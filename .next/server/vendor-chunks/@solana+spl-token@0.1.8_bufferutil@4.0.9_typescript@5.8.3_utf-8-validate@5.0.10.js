"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana+spl-token@0.1.8_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10";
exports.ids = ["vendor-chunks/@solana+spl-token@0.1.8_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@solana+spl-token@0.1.8_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/spl-token/lib/index.esm.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solana+spl-token@0.1.8_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/spl-token/lib/index.esm.js ***!
  \************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ASSOCIATED_TOKEN_PROGRAM_ID: () => (/* binding */ ASSOCIATED_TOKEN_PROGRAM_ID),\n/* harmony export */   AccountLayout: () => (/* binding */ AccountLayout),\n/* harmony export */   MintLayout: () => (/* binding */ MintLayout),\n/* harmony export */   NATIVE_MINT: () => (/* binding */ NATIVE_MINT),\n/* harmony export */   TOKEN_PROGRAM_ID: () => (/* binding */ TOKEN_PROGRAM_ID),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   u64: () => (/* binding */ u64)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/.pnpm/@babel+runtime@7.27.1/node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! assert */ \"assert\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@5.2.2/node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var buffer_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/.pnpm/buffer-layout@1.2.2/node_modules/buffer-layout/lib/Layout.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/.pnpm/@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/web3.js/lib/index.esm.js\");\n\n\n\n\n\n\n//      \n/**\n * Layout for a public key\n */ const publicKey = (property = \"publicKey\")=>{\n    return buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(32, property);\n};\n/**\n * Layout for a 64bit unsigned value\n */ const uint64 = (property = \"uint64\")=>{\n    return buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(8, property);\n};\n//      \nfunction sendAndConfirmTransaction(title, connection, transaction, ...signers) {\n    return (0,_solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.sendAndConfirmTransaction)(connection, transaction, signers, {\n        skipPreflight: false\n    });\n}\nconst TOKEN_PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nconst ASSOCIATED_TOKEN_PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nconst FAILED_TO_FIND_ACCOUNT = \"Failed to find account\";\nconst INVALID_ACCOUNT_OWNER = \"Invalid account owner\";\n/**\n * Unfortunately, BufferLayout.encode uses an `instanceof` check for `Buffer`\n * which fails when using `publicKey.toBuffer()` directly because the bundled `Buffer`\n * class in `@solana/web3.js` is different from the bundled `Buffer` class in this package\n */ function pubkeyToBuffer(publicKey) {\n    return buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(publicKey.toBuffer());\n}\n/**\n * 64-bit value\n */ class u64 extends (bn_js__WEBPACK_IMPORTED_MODULE_3___default()) {\n    /**\n   * Convert to Buffer representation\n   */ toBuffer() {\n        const a = super.toArray().reverse();\n        const b = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(a);\n        if (b.length === 8) {\n            return b;\n        }\n        assert__WEBPACK_IMPORTED_MODULE_2___default()(b.length < 8, \"u64 too large\");\n        const zeroPad = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(8);\n        b.copy(zeroPad);\n        return zeroPad;\n    }\n    /**\n   * Construct a u64 from Buffer representation\n   */ static fromBuffer(buffer) {\n        assert__WEBPACK_IMPORTED_MODULE_2___default()(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n        return new u64([\n            ...buffer\n        ].reverse().map((i)=>`00${i.toString(16)}`.slice(-2)).join(\"\"), 16);\n    }\n}\nfunction isAccount(accountOrPublicKey) {\n    return \"publicKey\" in accountOrPublicKey;\n}\nconst AuthorityTypeCodes = {\n    MintTokens: 0,\n    FreezeAccount: 1,\n    AccountOwner: 2,\n    CloseAccount: 3\n}; // The address of the special mint for wrapped native token.\nconst NATIVE_MINT = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(\"So11111111111111111111111111111111111111112\");\n/**\n * Information about the mint\n */ const MintLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(\"mintAuthorityOption\"),\n    publicKey(\"mintAuthority\"),\n    uint64(\"supply\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"decimals\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"isInitialized\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(\"freezeAuthorityOption\"),\n    publicKey(\"freezeAuthority\")\n]);\n/**\n * Information about an account\n */ /**\n * @private\n */ const AccountLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n    publicKey(\"mint\"),\n    publicKey(\"owner\"),\n    uint64(\"amount\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(\"delegateOption\"),\n    publicKey(\"delegate\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"state\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(\"isNativeOption\"),\n    uint64(\"isNative\"),\n    uint64(\"delegatedAmount\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(\"closeAuthorityOption\"),\n    publicKey(\"closeAuthority\")\n]);\n/**\n * Information about an multisig\n */ /**\n * @private\n */ const MultisigLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"m\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"n\"),\n    buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"is_initialized\"),\n    publicKey(\"signer1\"),\n    publicKey(\"signer2\"),\n    publicKey(\"signer3\"),\n    publicKey(\"signer4\"),\n    publicKey(\"signer5\"),\n    publicKey(\"signer6\"),\n    publicKey(\"signer7\"),\n    publicKey(\"signer8\"),\n    publicKey(\"signer9\"),\n    publicKey(\"signer10\"),\n    publicKey(\"signer11\")\n]);\n/**\n * An ERC20-like Token\n */ class Token {\n    /**\n   * @private\n   */ /**\n   * The public key identifying this mint\n   */ /**\n   * Program Identifier for the Token program\n   */ /**\n   * Program Identifier for the Associated Token program\n   */ /**\n   * Fee payer\n   */ /**\n   * Create a Token object attached to the specific mint\n   *\n   * @param connection The connection to use\n   * @param token Public key of the mint\n   * @param programId token programId\n   * @param payer Payer of fees\n   */ constructor(connection, publicKey, programId, payer){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"connection\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"publicKey\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"programId\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"associatedProgramId\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"payer\", void 0);\n        Object.assign(this, {\n            connection,\n            publicKey,\n            programId,\n            payer,\n            // Hard code is ok; Overriding is needed only for tests\n            associatedProgramId: ASSOCIATED_TOKEN_PROGRAM_ID\n        });\n    }\n    /**\n   * Get the minimum balance for the mint to be rent exempt\n   *\n   * @return Number of lamports required\n   */ static async getMinBalanceRentForExemptMint(connection) {\n        return await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n    }\n    /**\n   * Get the minimum balance for the account to be rent exempt\n   *\n   * @return Number of lamports required\n   */ static async getMinBalanceRentForExemptAccount(connection) {\n        return await connection.getMinimumBalanceForRentExemption(AccountLayout.span);\n    }\n    /**\n   * Get the minimum balance for the multsig to be rent exempt\n   *\n   * @return Number of lamports required\n   */ static async getMinBalanceRentForExemptMultisig(connection) {\n        return await connection.getMinimumBalanceForRentExemption(MultisigLayout.span);\n    }\n    /**\n   * Create and initialize a token.\n   *\n   * @param connection The connection to use\n   * @param payer Fee payer for transaction\n   * @param mintAuthority Account or multisig that will control minting\n   * @param freezeAuthority Optional account or multisig that can freeze token accounts\n   * @param decimals Location of the decimal place\n   * @param programId Optional token programId, uses the system programId by default\n   * @return Token object for the newly minted token\n   */ static async createMint(connection, payer, mintAuthority, freezeAuthority, decimals, programId) {\n        const mintAccount = _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Keypair.generate();\n        const token = new Token(connection, mintAccount.publicKey, programId, payer); // Allocate memory for the account\n        const balanceNeeded = await Token.getMinBalanceRentForExemptMint(connection);\n        const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction();\n        transaction.add(_solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: mintAccount.publicKey,\n            lamports: balanceNeeded,\n            space: MintLayout.span,\n            programId\n        }));\n        transaction.add(Token.createInitMintInstruction(programId, mintAccount.publicKey, decimals, mintAuthority, freezeAuthority)); // Send the two instructions\n        await sendAndConfirmTransaction(\"createAccount and InitializeMint\", connection, transaction, payer, mintAccount);\n        return token;\n    }\n    /**\n   * Create and initialize a new account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return Public key of the new empty account\n   */ async createAccount(owner) {\n        // Allocate memory for the account\n        const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(this.connection);\n        const newAccount = _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Keypair.generate();\n        const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction();\n        transaction.add(_solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SystemProgram.createAccount({\n            fromPubkey: this.payer.publicKey,\n            newAccountPubkey: newAccount.publicKey,\n            lamports: balanceNeeded,\n            space: AccountLayout.span,\n            programId: this.programId\n        }));\n        const mintPublicKey = this.publicKey;\n        transaction.add(Token.createInitAccountInstruction(this.programId, mintPublicKey, newAccount.publicKey, owner)); // Send the two instructions\n        await sendAndConfirmTransaction(\"createAccount and InitializeAccount\", this.connection, transaction, this.payer, newAccount);\n        return newAccount.publicKey;\n    }\n    /**\n   * Create and initialize the associated account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return Public key of the new associated account\n   */ async createAssociatedTokenAccount(owner) {\n        const associatedAddress = await Token.getAssociatedTokenAddress(this.associatedProgramId, this.programId, this.publicKey, owner);\n        return this.createAssociatedTokenAccountInternal(owner, associatedAddress);\n    }\n    async createAssociatedTokenAccountInternal(owner, associatedAddress) {\n        await sendAndConfirmTransaction(\"CreateAssociatedTokenAccount\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createAssociatedTokenAccountInstruction(this.associatedProgramId, this.programId, this.publicKey, associatedAddress, owner, this.payer.publicKey)), this.payer);\n        return associatedAddress;\n    }\n    /**\n   * Retrieve the associated account or create one if not found.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return The new associated account\n   */ async getOrCreateAssociatedAccountInfo(owner) {\n        const associatedAddress = await Token.getAssociatedTokenAddress(this.associatedProgramId, this.programId, this.publicKey, owner); // This is the optimum logic, considering TX fee, client-side computation,\n        // RPC roundtrips and guaranteed idempotent.\n        // Sadly we can't do this atomically;\n        try {\n            return await this.getAccountInfo(associatedAddress);\n        } catch (err) {\n            // INVALID_ACCOUNT_OWNER can be possible if the associatedAddress has\n            // already been received some lamports (= became system accounts).\n            // Assuming program derived addressing is safe, this is the only case\n            // for the INVALID_ACCOUNT_OWNER in this code-path\n            if (err.message === FAILED_TO_FIND_ACCOUNT || err.message === INVALID_ACCOUNT_OWNER) {\n                // as this isn't atomic, it's possible others can create associated\n                // accounts meanwhile\n                try {\n                    await this.createAssociatedTokenAccountInternal(owner, associatedAddress);\n                } catch (err) {\n                // selectively ignore the expected instruction error if the\n                // associated account is existing already.\n                } // Now this should always succeed\n                return await this.getAccountInfo(associatedAddress);\n            } else {\n                throw err;\n            }\n        }\n    }\n    /**\n   * Create and initialize a new account on the special native token mint.\n   *\n   * In order to be wrapped, the account must have a balance of native tokens\n   * when it is initialized with the token program.\n   *\n   * This function sends lamports to the new account before initializing it.\n   *\n   * @param connection A solana web3 connection\n   * @param programId The token program ID\n   * @param owner The owner of the new token account\n   * @param payer The source of the lamports to initialize, and payer of the initialization fees.\n   * @param amount The amount of lamports to wrap\n   * @return {Promise<PublicKey>} The new token account\n   */ static async createWrappedNativeAccount(connection, programId, owner, payer, amount) {\n        // Allocate memory for the account\n        const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(connection); // Create a new account\n        const newAccount = _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Keypair.generate();\n        const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction();\n        transaction.add(_solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: newAccount.publicKey,\n            lamports: balanceNeeded,\n            space: AccountLayout.span,\n            programId\n        })); // Send lamports to it (these will be wrapped into native tokens by the token program)\n        transaction.add(_solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: newAccount.publicKey,\n            lamports: amount\n        })); // Assign the new account to the native token mint.\n        // the account will be initialized with a balance equal to the native token balance.\n        // (i.e. amount)\n        transaction.add(Token.createInitAccountInstruction(programId, NATIVE_MINT, newAccount.publicKey, owner)); // Send the three instructions\n        await sendAndConfirmTransaction(\"createAccount, transfer, and initializeAccount\", connection, transaction, payer, newAccount);\n        return newAccount.publicKey;\n    }\n    /**\n   * Create and initialize a new multisig.\n   *\n   * This account may then be used for multisignature verification\n   *\n   * @param m Number of required signatures\n   * @param signers Full set of signers\n   * @return Public key of the new multisig account\n   */ async createMultisig(m, signers) {\n        const multisigAccount = _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Keypair.generate(); // Allocate memory for the account\n        const balanceNeeded = await Token.getMinBalanceRentForExemptMultisig(this.connection);\n        const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction();\n        transaction.add(_solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SystemProgram.createAccount({\n            fromPubkey: this.payer.publicKey,\n            newAccountPubkey: multisigAccount.publicKey,\n            lamports: balanceNeeded,\n            space: MultisigLayout.span,\n            programId: this.programId\n        })); // create the new account\n        let keys = [\n            {\n                pubkey: multisigAccount.publicKey,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        signers.forEach((signer)=>keys.push({\n                pubkey: signer,\n                isSigner: false,\n                isWritable: false\n            }));\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"m\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 2,\n            // InitializeMultisig instruction\n            m\n        }, data);\n        transaction.add({\n            keys,\n            programId: this.programId,\n            data\n        }); // Send the two instructions\n        await sendAndConfirmTransaction(\"createAccount and InitializeMultisig\", this.connection, transaction, this.payer, multisigAccount);\n        return multisigAccount.publicKey;\n    }\n    /**\n   * Retrieve mint information\n   */ async getMintInfo() {\n        const info = await this.connection.getAccountInfo(this.publicKey);\n        if (info === null) {\n            throw new Error(\"Failed to find mint account\");\n        }\n        if (!info.owner.equals(this.programId)) {\n            throw new Error(`Invalid mint owner: ${JSON.stringify(info.owner)}`);\n        }\n        if (info.data.length != MintLayout.span) {\n            throw new Error(`Invalid mint size`);\n        }\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(info.data);\n        const mintInfo = MintLayout.decode(data);\n        if (mintInfo.mintAuthorityOption === 0) {\n            mintInfo.mintAuthority = null;\n        } else {\n            mintInfo.mintAuthority = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(mintInfo.mintAuthority);\n        }\n        mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n        mintInfo.isInitialized = mintInfo.isInitialized != 0;\n        if (mintInfo.freezeAuthorityOption === 0) {\n            mintInfo.freezeAuthority = null;\n        } else {\n            mintInfo.freezeAuthority = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(mintInfo.freezeAuthority);\n        }\n        return mintInfo;\n    }\n    /**\n   * Retrieve account information\n   *\n   * @param account Public key of the account\n   */ async getAccountInfo(account, commitment) {\n        const info = await this.connection.getAccountInfo(account, commitment);\n        if (info === null) {\n            throw new Error(FAILED_TO_FIND_ACCOUNT);\n        }\n        if (!info.owner.equals(this.programId)) {\n            throw new Error(INVALID_ACCOUNT_OWNER);\n        }\n        if (info.data.length != AccountLayout.span) {\n            throw new Error(`Invalid account size`);\n        }\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(info.data);\n        const accountInfo = AccountLayout.decode(data);\n        accountInfo.address = account;\n        accountInfo.mint = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(accountInfo.mint);\n        accountInfo.owner = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(accountInfo.owner);\n        accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n        if (accountInfo.delegateOption === 0) {\n            accountInfo.delegate = null;\n            accountInfo.delegatedAmount = new u64();\n        } else {\n            accountInfo.delegate = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(accountInfo.delegate);\n            accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n        }\n        accountInfo.isInitialized = accountInfo.state !== 0;\n        accountInfo.isFrozen = accountInfo.state === 2;\n        if (accountInfo.isNativeOption === 1) {\n            accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n            accountInfo.isNative = true;\n        } else {\n            accountInfo.rentExemptReserve = null;\n            accountInfo.isNative = false;\n        }\n        if (accountInfo.closeAuthorityOption === 0) {\n            accountInfo.closeAuthority = null;\n        } else {\n            accountInfo.closeAuthority = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(accountInfo.closeAuthority);\n        }\n        if (!accountInfo.mint.equals(this.publicKey)) {\n            throw new Error(`Invalid account mint: ${JSON.stringify(accountInfo.mint)} !== ${JSON.stringify(this.publicKey)}`);\n        }\n        return accountInfo;\n    }\n    /**\n   * Retrieve Multisig information\n   *\n   * @param multisig Public key of the account\n   */ async getMultisigInfo(multisig) {\n        const info = await this.connection.getAccountInfo(multisig);\n        if (info === null) {\n            throw new Error(\"Failed to find multisig\");\n        }\n        if (!info.owner.equals(this.programId)) {\n            throw new Error(`Invalid multisig owner`);\n        }\n        if (info.data.length != MultisigLayout.span) {\n            throw new Error(`Invalid multisig size`);\n        }\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(info.data);\n        const multisigInfo = MultisigLayout.decode(data);\n        multisigInfo.signer1 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer1);\n        multisigInfo.signer2 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer2);\n        multisigInfo.signer3 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer3);\n        multisigInfo.signer4 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer4);\n        multisigInfo.signer5 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer5);\n        multisigInfo.signer6 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer6);\n        multisigInfo.signer7 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer7);\n        multisigInfo.signer8 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer8);\n        multisigInfo.signer9 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer9);\n        multisigInfo.signer10 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer10);\n        multisigInfo.signer11 = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(multisigInfo.signer11);\n        return multisigInfo;\n    }\n    /**\n   * Transfer tokens to another account\n   *\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Number of tokens to transfer\n   */ async transfer(source, destination, owner, multiSigners, amount) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(owner)) {\n            ownerPublicKey = owner.publicKey;\n            signers = [\n                owner\n            ];\n        } else {\n            ownerPublicKey = owner;\n            signers = multiSigners;\n        }\n        return await sendAndConfirmTransaction(\"Transfer\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createTransferInstruction(this.programId, source, destination, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);\n    }\n    /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account\n   *\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   */ async approve(account, delegate, owner, multiSigners, amount) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(owner)) {\n            ownerPublicKey = owner.publicKey;\n            signers = [\n                owner\n            ];\n        } else {\n            ownerPublicKey = owner;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"Approve\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createApproveInstruction(this.programId, account, delegate, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);\n    }\n    /**\n   * Remove approval for the transfer of any remaining tokens\n   *\n   * @param account Public key of the account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */ async revoke(account, owner, multiSigners) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(owner)) {\n            ownerPublicKey = owner.publicKey;\n            signers = [\n                owner\n            ];\n        } else {\n            ownerPublicKey = owner;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"Revoke\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createRevokeInstruction(this.programId, account, ownerPublicKey, multiSigners)), this.payer, ...signers);\n    }\n    /**\n   * Assign a new authority to the account\n   *\n   * @param account Public key of the account\n   * @param newAuthority New authority of the account\n   * @param authorityType Type of authority to set\n   * @param currentAuthority Current authority of the account\n   * @param multiSigners Signing accounts if `currentAuthority` is a multiSig\n   */ async setAuthority(account, newAuthority, authorityType, currentAuthority, multiSigners) {\n        let currentAuthorityPublicKey;\n        let signers;\n        if (isAccount(currentAuthority)) {\n            currentAuthorityPublicKey = currentAuthority.publicKey;\n            signers = [\n                currentAuthority\n            ];\n        } else {\n            currentAuthorityPublicKey = currentAuthority;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"SetAuthority\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createSetAuthorityInstruction(this.programId, account, newAuthority, authorityType, currentAuthorityPublicKey, multiSigners)), this.payer, ...signers);\n    }\n    /**\n   * Mint new tokens\n   *\n   * @param dest Public key of the account to mint to\n   * @param authority Minting authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   */ async mintTo(dest, authority, multiSigners, amount) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(authority)) {\n            ownerPublicKey = authority.publicKey;\n            signers = [\n                authority\n            ];\n        } else {\n            ownerPublicKey = authority;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"MintTo\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createMintToInstruction(this.programId, this.publicKey, dest, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);\n    }\n    /**\n   * Burn tokens\n   *\n   * @param account Account to burn tokens from\n   * @param owner Account owner\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Amount to burn\n   */ async burn(account, owner, multiSigners, amount) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(owner)) {\n            ownerPublicKey = owner.publicKey;\n            signers = [\n                owner\n            ];\n        } else {\n            ownerPublicKey = owner;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"Burn\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createBurnInstruction(this.programId, this.publicKey, account, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);\n    }\n    /**\n   * Close account\n   *\n   * @param account Account to close\n   * @param dest Account to receive the remaining balance of the closed account\n   * @param authority Authority which is allowed to close the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */ async closeAccount(account, dest, authority, multiSigners) {\n        let authorityPublicKey;\n        let signers;\n        if (isAccount(authority)) {\n            authorityPublicKey = authority.publicKey;\n            signers = [\n                authority\n            ];\n        } else {\n            authorityPublicKey = authority;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"CloseAccount\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createCloseAccountInstruction(this.programId, account, dest, authorityPublicKey, multiSigners)), this.payer, ...signers);\n    }\n    /**\n   * Freeze account\n   *\n   * @param account Account to freeze\n   * @param authority The mint freeze authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */ async freezeAccount(account, authority, multiSigners) {\n        let authorityPublicKey;\n        let signers;\n        if (isAccount(authority)) {\n            authorityPublicKey = authority.publicKey;\n            signers = [\n                authority\n            ];\n        } else {\n            authorityPublicKey = authority;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"FreezeAccount\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createFreezeAccountInstruction(this.programId, account, this.publicKey, authorityPublicKey, multiSigners)), this.payer, ...signers);\n    }\n    /**\n   * Thaw account\n   *\n   * @param account Account to thaw\n   * @param authority The mint freeze authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */ async thawAccount(account, authority, multiSigners) {\n        let authorityPublicKey;\n        let signers;\n        if (isAccount(authority)) {\n            authorityPublicKey = authority.publicKey;\n            signers = [\n                authority\n            ];\n        } else {\n            authorityPublicKey = authority;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"ThawAccount\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createThawAccountInstruction(this.programId, account, this.publicKey, authorityPublicKey, multiSigners)), this.payer, ...signers);\n    }\n    /**\n   * Transfer tokens to another account, asserting the token mint and decimals\n   *\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Number of tokens to transfer\n   * @param decimals Number of decimals in transfer amount\n   */ async transferChecked(source, destination, owner, multiSigners, amount, decimals) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(owner)) {\n            ownerPublicKey = owner.publicKey;\n            signers = [\n                owner\n            ];\n        } else {\n            ownerPublicKey = owner;\n            signers = multiSigners;\n        }\n        return await sendAndConfirmTransaction(\"TransferChecked\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createTransferCheckedInstruction(this.programId, source, this.publicKey, destination, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);\n    }\n    /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account,\n   * asserting the token mint and decimals\n   *\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   * @param decimals Number of decimals in approve amount\n   */ async approveChecked(account, delegate, owner, multiSigners, amount, decimals) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(owner)) {\n            ownerPublicKey = owner.publicKey;\n            signers = [\n                owner\n            ];\n        } else {\n            ownerPublicKey = owner;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"ApproveChecked\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createApproveCheckedInstruction(this.programId, account, this.publicKey, delegate, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);\n    }\n    /**\n   * Mint new tokens, asserting the token mint and decimals\n   *\n   * @param dest Public key of the account to mint to\n   * @param authority Minting authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   * @param decimals Number of decimals in amount to mint\n   */ async mintToChecked(dest, authority, multiSigners, amount, decimals) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(authority)) {\n            ownerPublicKey = authority.publicKey;\n            signers = [\n                authority\n            ];\n        } else {\n            ownerPublicKey = authority;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"MintToChecked\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createMintToCheckedInstruction(this.programId, this.publicKey, dest, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);\n    }\n    /**\n   * Burn tokens, asserting the token mint and decimals\n   *\n   * @param account Account to burn tokens from\n   * @param owner Account owner\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Amount to burn\n   * @param decimals Number of decimals in amount to burn\n   */ async burnChecked(account, owner, multiSigners, amount, decimals) {\n        let ownerPublicKey;\n        let signers;\n        if (isAccount(owner)) {\n            ownerPublicKey = owner.publicKey;\n            signers = [\n                owner\n            ];\n        } else {\n            ownerPublicKey = owner;\n            signers = multiSigners;\n        }\n        await sendAndConfirmTransaction(\"BurnChecked\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createBurnCheckedInstruction(this.programId, this.publicKey, account, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);\n    }\n    /**\n   * Sync amount in native SPL token account to underlying lamports\n   *\n   * @param nativeAccount Account to sync\n   */ async syncNative(nativeAccount) {\n        await sendAndConfirmTransaction(\"SyncNative\", this.connection, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction().add(Token.createSyncNativeInstruction(this.programId, nativeAccount)), this.payer);\n    }\n    /**\n   * Construct an InitializeMint instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param decimals Number of decimals in token account amounts\n   * @param mintAuthority Minting authority\n   * @param freezeAuthority Optional authority that can freeze token accounts\n   */ static createInitMintInstruction(programId, mint, decimals, mintAuthority, freezeAuthority) {\n        let keys = [\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        const commandDataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"decimals\"),\n            publicKey(\"mintAuthority\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"option\"),\n            publicKey(\"freezeAuthority\")\n        ]);\n        let data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(1024);\n        {\n            const encodeLength = commandDataLayout.encode({\n                instruction: 0,\n                // InitializeMint instruction\n                decimals,\n                mintAuthority: pubkeyToBuffer(mintAuthority),\n                option: freezeAuthority === null ? 0 : 1,\n                freezeAuthority: pubkeyToBuffer(freezeAuthority || new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(0))\n            }, data);\n            data = data.slice(0, encodeLength);\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId,\n            data\n        });\n    }\n    /**\n   * Construct an InitializeAccount instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param account New account\n   * @param owner Owner of the new account\n   */ static createInitAccountInstruction(programId, mint, account, owner) {\n        const keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 1 // InitializeAccount instruction\n        }, data);\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId,\n            data\n        });\n    }\n    /**\n   * Construct a Transfer instruction\n   *\n   * @param programId SPL Token program account\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Number of tokens to transfer\n   */ static createTransferInstruction(programId, source, destination, owner, multiSigners, amount) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            uint64(\"amount\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 3,\n            // Transfer instruction\n            amount: new u64(amount).toBuffer()\n        }, data);\n        let keys = [\n            {\n                pubkey: source,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: destination,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct an Approve instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer of tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   */ static createApproveInstruction(programId, account, delegate, owner, multiSigners, amount) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            uint64(\"amount\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 4,\n            // Approve instruction\n            amount: new u64(amount).toBuffer()\n        }, data);\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: delegate,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a Revoke instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */ static createRevokeInstruction(programId, account, owner, multiSigners) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 5 // Approve instruction\n        }, data);\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a SetAuthority instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param newAuthority New authority of the account\n   * @param authorityType Type of authority to set\n   * @param currentAuthority Current authority of the specified type\n   * @param multiSigners Signing accounts if `currentAuthority` is a multiSig\n   */ static createSetAuthorityInstruction(programId, account, newAuthority, authorityType, currentAuthority, multiSigners) {\n        const commandDataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"authorityType\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"option\"),\n            publicKey(\"newAuthority\")\n        ]);\n        let data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(1024);\n        {\n            const encodeLength = commandDataLayout.encode({\n                instruction: 6,\n                // SetAuthority instruction\n                authorityType: AuthorityTypeCodes[authorityType],\n                option: newAuthority === null ? 0 : 1,\n                newAuthority: pubkeyToBuffer(newAuthority || new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(0))\n            }, data);\n            data = data.slice(0, encodeLength);\n        }\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: currentAuthority,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: currentAuthority,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a MintTo instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Public key of the mint\n   * @param dest Public key of the account to mint to\n   * @param authority The mint authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   */ static createMintToInstruction(programId, mint, dest, authority, multiSigners, amount) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            uint64(\"amount\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 7,\n            // MintTo instruction\n            amount: new u64(amount).toBuffer()\n        }, data);\n        let keys = [\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: dest,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: authority,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: authority,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a Burn instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Mint for the account\n   * @param account Account to burn tokens from\n   * @param owner Owner of the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount amount to burn\n   */ static createBurnInstruction(programId, mint, account, owner, multiSigners, amount) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            uint64(\"amount\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 8,\n            // Burn instruction\n            amount: new u64(amount).toBuffer()\n        }, data);\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a Close instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to close\n   * @param dest Account to receive the remaining balance of the closed account\n   * @param authority Account Close authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */ static createCloseAccountInstruction(programId, account, dest, owner, multiSigners) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 9 // CloseAccount instruction\n        }, data);\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: dest,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a Freeze instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to freeze\n   * @param mint Mint account\n   * @param authority Mint freeze authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */ static createFreezeAccountInstruction(programId, account, mint, authority, multiSigners) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 10 // FreezeAccount instruction\n        }, data);\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: authority,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: authority,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a Thaw instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to thaw\n   * @param mint Mint account\n   * @param authority Mint freeze authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */ static createThawAccountInstruction(programId, account, mint, authority, multiSigners) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 11 // ThawAccount instruction\n        }, data);\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: authority,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: authority,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a TransferChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param source Source account\n   * @param mint Mint account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Number of tokens to transfer\n   * @param decimals Number of decimals in transfer amount\n   */ static createTransferCheckedInstruction(programId, source, mint, destination, owner, multiSigners, amount, decimals) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            uint64(\"amount\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"decimals\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 12,\n            // TransferChecked instruction\n            amount: new u64(amount).toBuffer(),\n            decimals\n        }, data);\n        let keys = [\n            {\n                pubkey: source,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: destination,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct an ApproveChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param mint Mint account\n   * @param delegate Account authorized to perform a transfer of tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   * @param decimals Number of decimals in approve amount\n   */ static createApproveCheckedInstruction(programId, account, mint, delegate, owner, multiSigners, amount, decimals) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            uint64(\"amount\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"decimals\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 13,\n            // ApproveChecked instruction\n            amount: new u64(amount).toBuffer(),\n            decimals\n        }, data);\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: delegate,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a MintToChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Public key of the mint\n   * @param dest Public key of the account to mint to\n   * @param authority The mint authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   * @param decimals Number of decimals in amount to mint\n   */ static createMintToCheckedInstruction(programId, mint, dest, authority, multiSigners, amount, decimals) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            uint64(\"amount\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"decimals\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 14,\n            // MintToChecked instruction\n            amount: new u64(amount).toBuffer(),\n            decimals\n        }, data);\n        let keys = [\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: dest,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: authority,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: authority,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a BurnChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Mint for the account\n   * @param account Account to burn tokens from\n   * @param owner Owner of the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount amount to burn\n   */ static createBurnCheckedInstruction(programId, mint, account, owner, multiSigners, amount, decimals) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\"),\n            uint64(\"amount\"),\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"decimals\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 15,\n            // BurnChecked instruction\n            amount: new u64(amount).toBuffer(),\n            decimals\n        }, data);\n        let keys = [\n            {\n                pubkey: account,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        if (multiSigners.length === 0) {\n            keys.push({\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            });\n        } else {\n            keys.push({\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            });\n            multiSigners.forEach((signer)=>keys.push({\n                    pubkey: signer.publicKey,\n                    isSigner: true,\n                    isWritable: false\n                }));\n        }\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Construct a SyncNative instruction\n   *\n   * @param programId SPL Token program account\n   * @param nativeAccount Account to sync lamports from\n   */ static createSyncNativeInstruction(programId, nativeAccount) {\n        const dataLayout = buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([\n            buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(\"instruction\")\n        ]);\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n            instruction: 17 // SyncNative instruction\n        }, data);\n        let keys = [\n            {\n                pubkey: nativeAccount,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: programId,\n            data\n        });\n    }\n    /**\n   * Get the address for the associated token account\n   *\n   * @param associatedProgramId SPL Associated Token program account\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param owner Owner of the new account\n   * @return Public key of the associated token account\n   */ static async getAssociatedTokenAddress(associatedProgramId, programId, mint, owner, allowOwnerOffCurve = false) {\n        if (!allowOwnerOffCurve && !_solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey.isOnCurve(owner.toBuffer())) {\n            throw new Error(`Owner cannot sign: ${owner.toString()}`);\n        }\n        return (await _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey.findProgramAddress([\n            owner.toBuffer(),\n            programId.toBuffer(),\n            mint.toBuffer()\n        ], associatedProgramId))[0];\n    }\n    /**\n   * Construct the AssociatedTokenProgram instruction to create the associated\n   * token account\n   *\n   * @param associatedProgramId SPL Associated Token program account\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param associatedAccount New associated account\n   * @param owner Owner of the new account\n   * @param payer Payer of fees\n   */ static createAssociatedTokenAccountInstruction(associatedProgramId, programId, mint, associatedAccount, owner, payer) {\n        const data = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(0);\n        let keys = [\n            {\n                pubkey: payer,\n                isSigner: true,\n                isWritable: true\n            },\n            {\n                pubkey: associatedAccount,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SystemProgram.programId,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: programId,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInstruction({\n            keys,\n            programId: associatedProgramId,\n            data\n        });\n    }\n}\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solana+spl-token@0.1.8_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/spl-token/lib/index.esm.js\n");

/***/ })

};
;