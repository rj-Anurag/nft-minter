"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/typescript-collections@1.3.3";
exports.ids = ["vendor-chunks/typescript-collections@1.3.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/typescript-collections@1.3.3/node_modules/typescript-collections/dist/lib/umd.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/typescript-collections@1.3.3/node_modules/typescript-collections/dist/lib/umd.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var require;\n(function(f) {\n    if (true) {\n        module.exports = f();\n    } else { var g; }\n})(function() {\n    var define1, module1, exports1;\n    require = function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = undefined;\n                    if (!u && a) return require(o, !0);\n                    if (i) return i(o, !0);\n                    var f = new Error(\"Cannot find module '\" + o + \"'\");\n                    throw f.code = \"MODULE_NOT_FOUND\", f;\n                }\n                var l = n[o] = {\n                    exports: {}\n                };\n                t[o][0].call(l.exports, function(e) {\n                    var n = t[o][1][e];\n                    return s(n ? n : e);\n                }, l, l.exports, e, t, n, r);\n            }\n            return n[o].exports;\n        }\n        var i = undefined;\n        for(var o = 0; o < r.length; o++)s(r[o]);\n        return s;\n    }({\n        1: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                var __extends = this && this.__extends || function() {\n                    var extendStatics = Object.setPrototypeOf || ({\n                        __proto__: []\n                    }) instanceof Array && function(d, b) {\n                        d.__proto__ = b;\n                    } || function(d, b) {\n                        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                    };\n                    return function(d, b) {\n                        extendStatics(d, b);\n                        function __() {\n                            this.constructor = d;\n                        }\n                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                    };\n                }();\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var BSTreeKV_1 = require1(\"./BSTreeKV\");\n                /**\n * Special-case of the binary search tree in which the search key is equal to the element type.\n * This definition is suitable when the element type can not be split between what defines its order\n * and what does not (eg. primitive types as opposed to indexed records).\n *\n * The table below shows some use-case examples for both interfaces:\n *\n *           element type              |  most suitable interface\n * ------------------------------------|----------------------------\n *    number                           |  BSTree<number>\n *    string                           |  BSTree<string>\n * { order: number, data: string }     |  BSTreeKV<{order: number}, {order: number, data: string}>\n *\n * @see BSTreeKV\n */ var BSTree = /** @class */ function(_super) {\n                    __extends(BSTree, _super);\n                    function BSTree() {\n                        return _super !== null && _super.apply(this, arguments) || this;\n                    }\n                    return BSTree;\n                }(BSTreeKV_1.default);\n                exports1.default = BSTree;\n            },\n            {\n                \"./BSTreeKV\": 2\n            }\n        ],\n        2: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var util = require1(\"./util\");\n                var Queue_1 = require1(\"./Queue\");\n                /**\n * General binary search tree implementation.\n *\n * This interface allows one to search elements using a subset of their attributes (thus the\n * tree can be used as an index for complex objects).\n * The attributes required to define an ordering in the tree must be defined in the type K.\n * Any additional attribute must be defined in the type V.\n *\n * @see BSTree\n */ var BSTreeKV = /** @class */ function() {\n                    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */ function BSTreeKV(compareFunction) {\n                        this.root = null;\n                        this.compare = compareFunction || util.defaultCompare;\n                        this.nElements = 0;\n                    }\n                    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */ BSTreeKV.prototype.add = function(element) {\n                        if (util.isUndefined(element)) {\n                            return false;\n                        }\n                        if (this.insertNode(this.createNode(element)) !== null) {\n                            this.nElements++;\n                            return true;\n                        }\n                        return false;\n                    };\n                    /**\n     * Removes all of the elements from this tree.\n     */ BSTreeKV.prototype.clear = function() {\n                        this.root = null;\n                        this.nElements = 0;\n                    };\n                    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */ BSTreeKV.prototype.isEmpty = function() {\n                        return this.nElements === 0;\n                    };\n                    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */ BSTreeKV.prototype.size = function() {\n                        return this.nElements;\n                    };\n                    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */ BSTreeKV.prototype.contains = function(element) {\n                        if (util.isUndefined(element)) {\n                            return false;\n                        }\n                        return this.searchNode(this.root, element) !== null;\n                    };\n                    /**\n     * Looks for the value with the provided search key.\n     * @param {Object} element The key to look for\n     * @return {Object} The value found or undefined if it was not found.\n     */ BSTreeKV.prototype.search = function(element) {\n                        var ret = this.searchNode(this.root, element);\n                        if (ret === null) {\n                            return undefined;\n                        }\n                        return ret.element;\n                    };\n                    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */ BSTreeKV.prototype.remove = function(element) {\n                        var node = this.searchNode(this.root, element);\n                        if (node === null) {\n                            return false;\n                        }\n                        this.removeNode(node);\n                        this.nElements--;\n                        return true;\n                    };\n                    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */ BSTreeKV.prototype.inorderTraversal = function(callback) {\n                        this.inorderTraversalAux(this.root, callback, {\n                            stop: false\n                        });\n                    };\n                    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */ BSTreeKV.prototype.preorderTraversal = function(callback) {\n                        this.preorderTraversalAux(this.root, callback, {\n                            stop: false\n                        });\n                    };\n                    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */ BSTreeKV.prototype.postorderTraversal = function(callback) {\n                        this.postorderTraversalAux(this.root, callback, {\n                            stop: false\n                        });\n                    };\n                    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */ BSTreeKV.prototype.levelTraversal = function(callback) {\n                        this.levelTraversalAux(this.root, callback);\n                    };\n                    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */ BSTreeKV.prototype.minimum = function() {\n                        if (this.isEmpty() || this.root === null) {\n                            return undefined;\n                        }\n                        return this.minimumAux(this.root).element;\n                    };\n                    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */ BSTreeKV.prototype.maximum = function() {\n                        if (this.isEmpty() || this.root === null) {\n                            return undefined;\n                        }\n                        return this.maximumAux(this.root).element;\n                    };\n                    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */ BSTreeKV.prototype.forEach = function(callback) {\n                        this.inorderTraversal(callback);\n                    };\n                    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */ BSTreeKV.prototype.toArray = function() {\n                        var array = [];\n                        this.inorderTraversal(function(element) {\n                            array.push(element);\n                            return true;\n                        });\n                        return array;\n                    };\n                    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */ BSTreeKV.prototype.height = function() {\n                        return this.heightAux(this.root);\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.searchNode = function(node, element) {\n                        var cmp = 1;\n                        while(node !== null && cmp !== 0){\n                            cmp = this.compare(element, node.element);\n                            if (cmp < 0) {\n                                node = node.leftCh;\n                            } else if (cmp > 0) {\n                                node = node.rightCh;\n                            }\n                        }\n                        return node;\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.transplant = function(n1, n2) {\n                        if (n1.parent === null) {\n                            this.root = n2;\n                        } else if (n1 === n1.parent.leftCh) {\n                            n1.parent.leftCh = n2;\n                        } else {\n                            n1.parent.rightCh = n2;\n                        }\n                        if (n2 !== null) {\n                            n2.parent = n1.parent;\n                        }\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.removeNode = function(node) {\n                        if (node.leftCh === null) {\n                            this.transplant(node, node.rightCh);\n                        } else if (node.rightCh === null) {\n                            this.transplant(node, node.leftCh);\n                        } else {\n                            var y = this.minimumAux(node.rightCh);\n                            if (y.parent !== node) {\n                                this.transplant(y, y.rightCh);\n                                y.rightCh = node.rightCh;\n                                y.rightCh.parent = y;\n                            }\n                            this.transplant(node, y);\n                            y.leftCh = node.leftCh;\n                            y.leftCh.parent = y;\n                        }\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.inorderTraversalAux = function(node, callback, signal) {\n                        if (node === null || signal.stop) {\n                            return;\n                        }\n                        this.inorderTraversalAux(node.leftCh, callback, signal);\n                        if (signal.stop) {\n                            return;\n                        }\n                        signal.stop = callback(node.element) === false;\n                        if (signal.stop) {\n                            return;\n                        }\n                        this.inorderTraversalAux(node.rightCh, callback, signal);\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.levelTraversalAux = function(node, callback) {\n                        var queue = new Queue_1.default();\n                        if (node !== null) {\n                            queue.enqueue(node);\n                        }\n                        node = queue.dequeue() || null;\n                        while(node != null){\n                            if (callback(node.element) === false) {\n                                return;\n                            }\n                            if (node.leftCh !== null) {\n                                queue.enqueue(node.leftCh);\n                            }\n                            if (node.rightCh !== null) {\n                                queue.enqueue(node.rightCh);\n                            }\n                            node = queue.dequeue() || null;\n                        }\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.preorderTraversalAux = function(node, callback, signal) {\n                        if (node === null || signal.stop) {\n                            return;\n                        }\n                        signal.stop = callback(node.element) === false;\n                        if (signal.stop) {\n                            return;\n                        }\n                        this.preorderTraversalAux(node.leftCh, callback, signal);\n                        if (signal.stop) {\n                            return;\n                        }\n                        this.preorderTraversalAux(node.rightCh, callback, signal);\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.postorderTraversalAux = function(node, callback, signal) {\n                        if (node === null || signal.stop) {\n                            return;\n                        }\n                        this.postorderTraversalAux(node.leftCh, callback, signal);\n                        if (signal.stop) {\n                            return;\n                        }\n                        this.postorderTraversalAux(node.rightCh, callback, signal);\n                        if (signal.stop) {\n                            return;\n                        }\n                        signal.stop = callback(node.element) === false;\n                    };\n                    BSTreeKV.prototype.minimumAux = function(node) {\n                        while(node != null && node.leftCh !== null){\n                            node = node.leftCh;\n                        }\n                        return node;\n                    };\n                    BSTreeKV.prototype.maximumAux = function(node) {\n                        while(node != null && node.rightCh !== null){\n                            node = node.rightCh;\n                        }\n                        return node;\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.heightAux = function(node) {\n                        if (node === null) {\n                            return -1;\n                        }\n                        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n                    };\n                    /*\n    * @private\n    */ BSTreeKV.prototype.insertNode = function(node) {\n                        var parent = null;\n                        var position = this.root;\n                        while(position !== null){\n                            var cmp = this.compare(node.element, position.element);\n                            if (cmp === 0) {\n                                return null;\n                            } else if (cmp < 0) {\n                                parent = position;\n                                position = position.leftCh;\n                            } else {\n                                parent = position;\n                                position = position.rightCh;\n                            }\n                        }\n                        node.parent = parent;\n                        if (parent === null) {\n                            // tree is empty\n                            this.root = node;\n                        } else if (this.compare(node.element, parent.element) < 0) {\n                            parent.leftCh = node;\n                        } else {\n                            parent.rightCh = node;\n                        }\n                        return node;\n                    };\n                    /**\n     * @private\n     */ BSTreeKV.prototype.createNode = function(element) {\n                        return {\n                            element: element,\n                            leftCh: null,\n                            rightCh: null,\n                            parent: null\n                        };\n                    };\n                    return BSTreeKV;\n                }();\n                exports1.default = BSTreeKV;\n            },\n            {\n                \"./Queue\": 12,\n                \"./util\": 16\n            }\n        ],\n        3: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var util = require1(\"./util\");\n                var Dictionary_1 = require1(\"./Dictionary\");\n                var Set_1 = require1(\"./Set\");\n                var Bag = /** @class */ function() {\n                    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */ function Bag(toStrFunction) {\n                        this.toStrF = toStrFunction || util.defaultToString;\n                        this.dictionary = new Dictionary_1.default(this.toStrF);\n                        this.nElements = 0;\n                    }\n                    /**\n     * Adds nCopies of the specified object to this bag.\n     * @param {Object} element element to add.\n     * @param {number=} nCopies the number of copies to add, if this argument is\n     * undefined 1 copy is added.\n     * @return {boolean} true unless element is undefined.\n     */ Bag.prototype.add = function(element, nCopies) {\n                        if (nCopies === void 0) {\n                            nCopies = 1;\n                        }\n                        if (util.isUndefined(element) || nCopies <= 0) {\n                            return false;\n                        }\n                        if (!this.contains(element)) {\n                            var node = {\n                                value: element,\n                                copies: nCopies\n                            };\n                            this.dictionary.setValue(element, node);\n                        } else {\n                            this.dictionary.getValue(element).copies += nCopies;\n                        }\n                        this.nElements += nCopies;\n                        return true;\n                    };\n                    /**\n     * Counts the number of copies of the specified object in this bag.\n     * @param {Object} element the object to search for..\n     * @return {number} the number of copies of the object, 0 if not found\n     */ Bag.prototype.count = function(element) {\n                        if (!this.contains(element)) {\n                            return 0;\n                        } else {\n                            return this.dictionary.getValue(element).copies;\n                        }\n                    };\n                    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */ Bag.prototype.contains = function(element) {\n                        return this.dictionary.containsKey(element);\n                    };\n                    /**\n     * Removes nCopies of the specified object to this bag.\n     * If the number of copies to remove is greater than the actual number\n     * of copies in the Bag, all copies are removed.\n     * @param {Object} element element to remove.\n     * @param {number=} nCopies the number of copies to remove, if this argument is\n     * undefined 1 copy is removed.\n     * @return {boolean} true if at least 1 element was removed.\n     */ Bag.prototype.remove = function(element, nCopies) {\n                        if (nCopies === void 0) {\n                            nCopies = 1;\n                        }\n                        if (util.isUndefined(element) || nCopies <= 0) {\n                            return false;\n                        }\n                        if (!this.contains(element)) {\n                            return false;\n                        } else {\n                            var node = this.dictionary.getValue(element);\n                            if (nCopies > node.copies) {\n                                this.nElements -= node.copies;\n                            } else {\n                                this.nElements -= nCopies;\n                            }\n                            node.copies -= nCopies;\n                            if (node.copies <= 0) {\n                                this.dictionary.remove(element);\n                            }\n                            return true;\n                        }\n                    };\n                    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */ Bag.prototype.toArray = function() {\n                        var a = [];\n                        var values = this.dictionary.values();\n                        for(var _i = 0, values_1 = values; _i < values_1.length; _i++){\n                            var node = values_1[_i];\n                            var element = node.value;\n                            var copies = node.copies;\n                            for(var j = 0; j < copies; j++){\n                                a.push(element);\n                            }\n                        }\n                        return a;\n                    };\n                    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */ Bag.prototype.toSet = function() {\n                        var toret = new Set_1.default(this.toStrF);\n                        var elements = this.dictionary.values();\n                        for(var _i = 0, elements_1 = elements; _i < elements_1.length; _i++){\n                            var ele = elements_1[_i];\n                            var value = ele.value;\n                            toret.add(value);\n                        }\n                        return toret;\n                    };\n                    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */ Bag.prototype.forEach = function(callback) {\n                        this.dictionary.forEach(function(k, v) {\n                            var value = v.value;\n                            var copies = v.copies;\n                            for(var i = 0; i < copies; i++){\n                                if (callback(value) === false) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        });\n                    };\n                    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */ Bag.prototype.size = function() {\n                        return this.nElements;\n                    };\n                    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */ Bag.prototype.isEmpty = function() {\n                        return this.nElements === 0;\n                    };\n                    /**\n     * Removes all of the elements from this bag.\n     */ Bag.prototype.clear = function() {\n                        this.nElements = 0;\n                        this.dictionary.clear();\n                    };\n                    return Bag;\n                }(); // End of bag\n                exports1.default = Bag;\n            },\n            {\n                \"./Dictionary\": 4,\n                \"./Set\": 13,\n                \"./util\": 16\n            }\n        ],\n        4: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var util = require1(\"./util\");\n                var Dictionary = /** @class */ function() {\n                    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */ function Dictionary(toStrFunction) {\n                        this.table = {};\n                        this.nElements = 0;\n                        this.toStr = toStrFunction || util.defaultToString;\n                    }\n                    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */ Dictionary.prototype.getValue = function(key) {\n                        var pair = this.table[\"$\" + this.toStr(key)];\n                        if (util.isUndefined(pair)) {\n                            return undefined;\n                        }\n                        return pair.value;\n                    };\n                    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */ Dictionary.prototype.setValue = function(key, value) {\n                        if (util.isUndefined(key) || util.isUndefined(value)) {\n                            return undefined;\n                        }\n                        var ret;\n                        var k = \"$\" + this.toStr(key);\n                        var previousElement = this.table[k];\n                        if (util.isUndefined(previousElement)) {\n                            this.nElements++;\n                            ret = undefined;\n                        } else {\n                            ret = previousElement.value;\n                        }\n                        this.table[k] = {\n                            key: key,\n                            value: value\n                        };\n                        return ret;\n                    };\n                    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */ Dictionary.prototype.remove = function(key) {\n                        var k = \"$\" + this.toStr(key);\n                        var previousElement = this.table[k];\n                        if (!util.isUndefined(previousElement)) {\n                            delete this.table[k];\n                            this.nElements--;\n                            return previousElement.value;\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */ Dictionary.prototype.keys = function() {\n                        var array = [];\n                        for(var name_1 in this.table){\n                            if (util.has(this.table, name_1)) {\n                                var pair = this.table[name_1];\n                                array.push(pair.key);\n                            }\n                        }\n                        return array;\n                    };\n                    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */ Dictionary.prototype.values = function() {\n                        var array = [];\n                        for(var name_2 in this.table){\n                            if (util.has(this.table, name_2)) {\n                                var pair = this.table[name_2];\n                                array.push(pair.value);\n                            }\n                        }\n                        return array;\n                    };\n                    /**\n     * Executes the provided function once for each key-value pair\n     * present in this dictionary.\n     * @param {function(Object,Object):*} callback function to execute, it is\n     * invoked with two arguments: key and value. To break the iteration you can\n     * optionally return false.\n     */ Dictionary.prototype.forEach = function(callback) {\n                        for(var name_3 in this.table){\n                            if (util.has(this.table, name_3)) {\n                                var pair = this.table[name_3];\n                                var ret = callback(pair.key, pair.value);\n                                if (ret === false) {\n                                    return;\n                                }\n                            }\n                        }\n                    };\n                    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */ Dictionary.prototype.containsKey = function(key) {\n                        return !util.isUndefined(this.getValue(key));\n                    };\n                    /**\n     * Removes all mappings from this dictionary.\n     * @this {collections.Dictionary}\n     */ Dictionary.prototype.clear = function() {\n                        this.table = {};\n                        this.nElements = 0;\n                    };\n                    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */ Dictionary.prototype.size = function() {\n                        return this.nElements;\n                    };\n                    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */ Dictionary.prototype.isEmpty = function() {\n                        return this.nElements <= 0;\n                    };\n                    Dictionary.prototype.toString = function() {\n                        var toret = \"{\";\n                        this.forEach(function(k, v) {\n                            toret += \"\\n\t\" + k + \" : \" + v;\n                        });\n                        return toret + \"\\n}\";\n                    };\n                    return Dictionary;\n                }(); // End of dictionary\n                exports1.default = Dictionary;\n            },\n            {\n                \"./util\": 16\n            }\n        ],\n        5: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                var __extends = this && this.__extends || function() {\n                    var extendStatics = Object.setPrototypeOf || ({\n                        __proto__: []\n                    }) instanceof Array && function(d, b) {\n                        d.__proto__ = b;\n                    } || function(d, b) {\n                        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                    };\n                    return function(d, b) {\n                        extendStatics(d, b);\n                        function __() {\n                            this.constructor = d;\n                        }\n                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                    };\n                }();\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var Dictionary_1 = require1(\"./Dictionary\");\n                var util = require1(\"./util\");\n                var FactoryDictionary = /** @class */ function(_super) {\n                    __extends(FactoryDictionary, _super);\n                    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>The default factory function should return a new object of the provided\n     * type. Example:</p>\n     * <pre>\n     * function petFactory() {\n     *  return new Pet();\n     * }\n     * </pre>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function():V=} defaultFactoryFunction function used to create a\n     * default object.\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */ function FactoryDictionary(defaultFactoryFunction, toStrFunction) {\n                        var _this = _super.call(this, toStrFunction) || this;\n                        _this.defaultFactoryFunction = defaultFactoryFunction;\n                        return _this;\n                    }\n                    /**\n     * Associates the specified default value with the specified key in this dictionary,\n     * if it didn't contain the key yet. If the key existed, the existing value will be used.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} defaultValue default value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or the default value,\n     * if the key didn't exist yet.\n     */ FactoryDictionary.prototype.setDefault = function(key, defaultValue) {\n                        var currentValue = _super.prototype.getValue.call(this, key);\n                        if (util.isUndefined(currentValue)) {\n                            this.setValue(key, defaultValue);\n                            return defaultValue;\n                        }\n                        return currentValue;\n                    };\n                    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns a default value created by the factory passed in the constructor,\n     * if this dictionary contains no mapping for this key. The missing key will\n     * automatically be added to the dictionary.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * a default value if the map contains no mapping for this key.\n     */ FactoryDictionary.prototype.getValue = function(key) {\n                        return this.setDefault(key, this.defaultFactoryFunction());\n                    };\n                    return FactoryDictionary;\n                }(Dictionary_1.default);\n                exports1.default = FactoryDictionary;\n            },\n            {\n                \"./Dictionary\": 4,\n                \"./util\": 16\n            }\n        ],\n        6: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var collections = require1(\"./util\");\n                var arrays = require1(\"./arrays\");\n                var Heap = /** @class */ function() {\n                    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */ function Heap(compareFunction) {\n                        /**\n         * Array used to store the elements of the heap.\n         * @type {Array.<Object>}\n         * @private\n         */ this.data = [];\n                        this.compare = compareFunction || collections.defaultCompare;\n                    }\n                    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */ Heap.prototype.leftChildIndex = function(nodeIndex) {\n                        return 2 * nodeIndex + 1;\n                    };\n                    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */ Heap.prototype.rightChildIndex = function(nodeIndex) {\n                        return 2 * nodeIndex + 2;\n                    };\n                    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */ Heap.prototype.parentIndex = function(nodeIndex) {\n                        return Math.floor((nodeIndex - 1) / 2);\n                    };\n                    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */ Heap.prototype.minIndex = function(leftChild, rightChild) {\n                        if (rightChild >= this.data.length) {\n                            if (leftChild >= this.data.length) {\n                                return -1;\n                            } else {\n                                return leftChild;\n                            }\n                        } else {\n                            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                                return leftChild;\n                            } else {\n                                return rightChild;\n                            }\n                        }\n                    };\n                    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */ Heap.prototype.siftUp = function(index) {\n                        var parent = this.parentIndex(index);\n                        while(index > 0 && this.compare(this.data[parent], this.data[index]) > 0){\n                            arrays.swap(this.data, parent, index);\n                            index = parent;\n                            parent = this.parentIndex(index);\n                        }\n                    };\n                    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */ Heap.prototype.siftDown = function(nodeIndex) {\n                        //smaller child index\n                        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n                        while(min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0){\n                            arrays.swap(this.data, min, nodeIndex);\n                            nodeIndex = min;\n                            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n                        }\n                    };\n                    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */ Heap.prototype.peek = function() {\n                        if (this.data.length > 0) {\n                            return this.data[0];\n                        } else {\n                            return undefined;\n                        }\n                    };\n                    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */ Heap.prototype.add = function(element) {\n                        if (collections.isUndefined(element)) {\n                            return false;\n                        }\n                        this.data.push(element);\n                        this.siftUp(this.data.length - 1);\n                        return true;\n                    };\n                    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */ Heap.prototype.removeRoot = function() {\n                        if (this.data.length > 0) {\n                            var obj = this.data[0];\n                            this.data[0] = this.data[this.data.length - 1];\n                            this.data.splice(this.data.length - 1, 1);\n                            if (this.data.length > 0) {\n                                this.siftDown(0);\n                            }\n                            return obj;\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */ Heap.prototype.contains = function(element) {\n                        var equF = collections.compareToEquals(this.compare);\n                        return arrays.contains(this.data, element, equF);\n                    };\n                    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */ Heap.prototype.size = function() {\n                        return this.data.length;\n                    };\n                    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */ Heap.prototype.isEmpty = function() {\n                        return this.data.length <= 0;\n                    };\n                    /**\n     * Removes all of the elements from this heap.\n     */ Heap.prototype.clear = function() {\n                        this.data.length = 0;\n                    };\n                    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */ Heap.prototype.forEach = function(callback) {\n                        arrays.forEach(this.data, callback);\n                    };\n                    return Heap;\n                }();\n                exports1.default = Heap;\n            },\n            {\n                \"./arrays\": 15,\n                \"./util\": 16\n            }\n        ],\n        7: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                var __extends = this && this.__extends || function() {\n                    var extendStatics = Object.setPrototypeOf || ({\n                        __proto__: []\n                    }) instanceof Array && function(d, b) {\n                        d.__proto__ = b;\n                    } || function(d, b) {\n                        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                    };\n                    return function(d, b) {\n                        extendStatics(d, b);\n                        function __() {\n                            this.constructor = d;\n                        }\n                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                    };\n                }();\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var Dictionary_1 = require1(\"./Dictionary\");\n                var util = require1(\"./util\");\n                /**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */ var LinkedDictionaryPair = /** @class */ function() {\n                    function LinkedDictionaryPair(key, value) {\n                        this.key = key;\n                        this.value = value;\n                    }\n                    LinkedDictionaryPair.prototype.unlink = function() {\n                        this.prev.next = this.next;\n                        this.next.prev = this.prev;\n                    };\n                    return LinkedDictionaryPair;\n                }();\n                /**\n * The head and tail elements of the list have null key and value properties but they\n * usually link to normal nodes.\n */ var HeadOrTailLinkedDictionaryPair = /** @class */ function() {\n                    function HeadOrTailLinkedDictionaryPair() {\n                        this.key = null;\n                        this.value = null;\n                    }\n                    HeadOrTailLinkedDictionaryPair.prototype.unlink = function() {\n                        this.prev.next = this.next;\n                        this.next.prev = this.prev;\n                    };\n                    return HeadOrTailLinkedDictionaryPair;\n                }();\n                function isHeadOrTailLinkedDictionaryPair(p) {\n                    return !p.next;\n                }\n                var LinkedDictionary = /** @class */ function(_super) {\n                    __extends(LinkedDictionary, _super);\n                    function LinkedDictionary(toStrFunction) {\n                        var _this = _super.call(this, toStrFunction) || this;\n                        _this.head = new HeadOrTailLinkedDictionaryPair();\n                        _this.tail = new HeadOrTailLinkedDictionaryPair();\n                        _this.head.next = _this.tail;\n                        _this.tail.prev = _this.head;\n                        return _this;\n                    }\n                    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */ LinkedDictionary.prototype.appendToTail = function(entry) {\n                        var lastNode = this.tail.prev;\n                        lastNode.next = entry;\n                        entry.prev = lastNode;\n                        entry.next = this.tail;\n                        this.tail.prev = entry;\n                    };\n                    /**\n     * Retrieves a linked dictionary from the table internally\n     */ LinkedDictionary.prototype.getLinkedDictionaryPair = function(key) {\n                        if (util.isUndefined(key)) {\n                            return undefined;\n                        }\n                        var k = \"$\" + this.toStr(key);\n                        var pair = this.table[k];\n                        return pair;\n                    };\n                    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */ LinkedDictionary.prototype.getValue = function(key) {\n                        var pair = this.getLinkedDictionaryPair(key);\n                        if (!util.isUndefined(pair)) {\n                            return pair.value;\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */ LinkedDictionary.prototype.remove = function(key) {\n                        var pair = this.getLinkedDictionaryPair(key);\n                        if (!util.isUndefined(pair)) {\n                            _super.prototype.remove.call(this, key); // This will remove it from the table\n                            pair.unlink(); // This will unlink it from the chain\n                            return pair.value;\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Removes all mappings from this LinkedDictionary.\n     * @this {collections.LinkedDictionary}\n     */ LinkedDictionary.prototype.clear = function() {\n                        _super.prototype.clear.call(this);\n                        this.head.next = this.tail;\n                        this.tail.prev = this.head;\n                    };\n                    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */ LinkedDictionary.prototype.replace = function(oldPair, newPair) {\n                        var k = \"$\" + this.toStr(newPair.key);\n                        // set the new Pair's links to existingPair's links\n                        newPair.next = oldPair.next;\n                        newPair.prev = oldPair.prev;\n                        // Delete Existing Pair from the table, unlink it from chain.\n                        // As a result, the nElements gets decremented by this operation\n                        this.remove(oldPair.key);\n                        // Link new Pair in place of where oldPair was,\n                        // by pointing the old pair's neighbors to it.\n                        newPair.prev.next = newPair;\n                        newPair.next.prev = newPair;\n                        this.table[k] = newPair;\n                        // To make up for the fact that the number of elements was decremented,\n                        // We need to increase it by one.\n                        ++this.nElements;\n                    };\n                    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */ LinkedDictionary.prototype.setValue = function(key, value) {\n                        if (util.isUndefined(key) || util.isUndefined(value)) {\n                            return undefined;\n                        }\n                        var existingPair = this.getLinkedDictionaryPair(key);\n                        var newPair = new LinkedDictionaryPair(key, value);\n                        var k = \"$\" + this.toStr(key);\n                        // If there is already an element for that key, we\n                        // keep it's place in the LinkedList\n                        if (!util.isUndefined(existingPair)) {\n                            this.replace(existingPair, newPair);\n                            return existingPair.value;\n                        } else {\n                            this.appendToTail(newPair);\n                            this.table[k] = newPair;\n                            ++this.nElements;\n                            return undefined;\n                        }\n                    };\n                    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */ LinkedDictionary.prototype.keys = function() {\n                        var array = [];\n                        this.forEach(function(key, value) {\n                            array.push(key);\n                        });\n                        return array;\n                    };\n                    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */ LinkedDictionary.prototype.values = function() {\n                        var array = [];\n                        this.forEach(function(key, value) {\n                            array.push(value);\n                        });\n                        return array;\n                    };\n                    /**\n     * Executes the provided function once for each key-value pair\n     * present in this LinkedDictionary. It is done in the order of insertion\n     * into the LinkedDictionary\n     * @param {function(Object,Object):*} callback function to execute, it is\n     * invoked with two arguments: key and value. To break the iteration you can\n     * optionally return false.\n     */ LinkedDictionary.prototype.forEach = function(callback) {\n                        var crawlNode = this.head.next;\n                        while(!isHeadOrTailLinkedDictionaryPair(crawlNode)){\n                            var ret = callback(crawlNode.key, crawlNode.value);\n                            if (ret === false) {\n                                return;\n                            }\n                            crawlNode = crawlNode.next;\n                        }\n                    };\n                    return LinkedDictionary;\n                }(Dictionary_1.default); // End of LinkedDictionary\n                exports1.default = LinkedDictionary;\n            // /**\n            //  * Returns true if this dictionary is equal to the given dictionary.\n            //  * Two dictionaries are equal if they contain the same mappings.\n            //  * @param {collections.Dictionary} other the other dictionary.\n            //  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n            //  * function used to check if two values are equal.\n            //  * @return {boolean} true if this dictionary is equal to the given dictionary.\n            //  */\n            // collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n            // \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n            // \tif(!(other instanceof collections.Dictionary)){\n            // \t\treturn false;\n            // \t}\n            // \tif(this.size() !== other.size()){\n            // \t\treturn false;\n            // \t}\n            // \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n            // }\n            },\n            {\n                \"./Dictionary\": 4,\n                \"./util\": 16\n            }\n        ],\n        8: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var util = require1(\"./util\");\n                var arrays = require1(\"./arrays\");\n                var LinkedList = /** @class */ function() {\n                    /**\n     * Creates an empty Linked List.\n     * @class A linked list is a data structure consisting of a group of nodes\n     * which together represent a sequence.\n     * @constructor\n     */ function LinkedList() {\n                        /**\n         * First node in the list\n         * @type {Object}\n         * @private\n         */ this.firstNode = null;\n                        /**\n         * Last node in the list\n         * @type {Object}\n         * @private\n         */ this.lastNode = null;\n                        /**\n         * Number of elements in the list\n         * @type {number}\n         * @private\n         */ this.nElements = 0;\n                    }\n                    /**\n     * Adds an element to this list.\n     * @param {Object} item element to be added.\n     * @param {number=} index optional index to add the element. If no index is specified\n     * the element is added to the end of this list.\n     * @return {boolean} true if the element was added or false if the index is invalid\n     * or if the element is undefined.\n     */ LinkedList.prototype.add = function(item, index) {\n                        if (util.isUndefined(index)) {\n                            index = this.nElements;\n                        }\n                        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n                            return false;\n                        }\n                        var newNode = this.createNode(item);\n                        if (this.nElements === 0 || this.lastNode === null) {\n                            // First node in the list.\n                            this.firstNode = newNode;\n                            this.lastNode = newNode;\n                        } else if (index === this.nElements) {\n                            // Insert at the end.\n                            this.lastNode.next = newNode;\n                            this.lastNode = newNode;\n                        } else if (index === 0) {\n                            // Change first node.\n                            newNode.next = this.firstNode;\n                            this.firstNode = newNode;\n                        } else {\n                            var prev = this.nodeAtIndex(index - 1);\n                            if (prev === null) {\n                                return false;\n                            }\n                            newNode.next = prev.next;\n                            prev.next = newNode;\n                        }\n                        this.nElements++;\n                        return true;\n                    };\n                    /**\n     * Returns the first element in this list.\n     * @return {*} the first element of the list or undefined if the list is\n     * empty.\n     */ LinkedList.prototype.first = function() {\n                        if (this.firstNode !== null) {\n                            return this.firstNode.element;\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Returns the last element in this list.\n     * @return {*} the last element in the list or undefined if the list is\n     * empty.\n     */ LinkedList.prototype.last = function() {\n                        if (this.lastNode !== null) {\n                            return this.lastNode.element;\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */ LinkedList.prototype.elementAtIndex = function(index) {\n                        var node = this.nodeAtIndex(index);\n                        if (node === null) {\n                            return undefined;\n                        }\n                        return node.element;\n                    };\n                    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */ LinkedList.prototype.indexOf = function(item, equalsFunction) {\n                        var equalsF = equalsFunction || util.defaultEquals;\n                        if (util.isUndefined(item)) {\n                            return -1;\n                        }\n                        var currentNode = this.firstNode;\n                        var index = 0;\n                        while(currentNode !== null){\n                            if (equalsF(currentNode.element, item)) {\n                                return index;\n                            }\n                            index++;\n                            currentNode = currentNode.next;\n                        }\n                        return -1;\n                    };\n                    /**\n     * Returns true if this list contains the specified element.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {boolean} true if this list contains the specified element, false\n     * otherwise.\n     */ LinkedList.prototype.contains = function(item, equalsFunction) {\n                        return this.indexOf(item, equalsFunction) >= 0;\n                    };\n                    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */ LinkedList.prototype.remove = function(item, equalsFunction) {\n                        var equalsF = equalsFunction || util.defaultEquals;\n                        if (this.nElements < 1 || util.isUndefined(item)) {\n                            return false;\n                        }\n                        var previous = null;\n                        var currentNode = this.firstNode;\n                        while(currentNode !== null){\n                            if (equalsF(currentNode.element, item)) {\n                                if (previous === null) {\n                                    this.firstNode = currentNode.next;\n                                    if (currentNode === this.lastNode) {\n                                        this.lastNode = null;\n                                    }\n                                } else if (currentNode === this.lastNode) {\n                                    this.lastNode = previous;\n                                    previous.next = currentNode.next;\n                                    currentNode.next = null;\n                                } else {\n                                    previous.next = currentNode.next;\n                                    currentNode.next = null;\n                                }\n                                this.nElements--;\n                                return true;\n                            }\n                            previous = currentNode;\n                            currentNode = currentNode.next;\n                        }\n                        return false;\n                    };\n                    /**\n     * Removes all of the elements from this list.\n     */ LinkedList.prototype.clear = function() {\n                        this.firstNode = null;\n                        this.lastNode = null;\n                        this.nElements = 0;\n                    };\n                    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */ LinkedList.prototype.equals = function(other, equalsFunction) {\n                        var eqF = equalsFunction || util.defaultEquals;\n                        if (!(other instanceof LinkedList)) {\n                            return false;\n                        }\n                        if (this.size() !== other.size()) {\n                            return false;\n                        }\n                        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n                    };\n                    /**\n     * @private\n     */ LinkedList.prototype.equalsAux = function(n1, n2, eqF) {\n                        while(n1 !== null && n2 !== null){\n                            if (!eqF(n1.element, n2.element)) {\n                                return false;\n                            }\n                            n1 = n1.next;\n                            n2 = n2.next;\n                        }\n                        return true;\n                    };\n                    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */ LinkedList.prototype.removeElementAtIndex = function(index) {\n                        if (index < 0 || index >= this.nElements || this.firstNode === null || this.lastNode === null) {\n                            return undefined;\n                        }\n                        var element;\n                        if (this.nElements === 1) {\n                            //First node in the list.\n                            element = this.firstNode.element;\n                            this.firstNode = null;\n                            this.lastNode = null;\n                        } else {\n                            var previous = this.nodeAtIndex(index - 1);\n                            if (previous === null) {\n                                element = this.firstNode.element;\n                                this.firstNode = this.firstNode.next;\n                            } else if (previous.next === this.lastNode) {\n                                element = this.lastNode.element;\n                                this.lastNode = previous;\n                            }\n                            if (previous !== null && previous.next !== null) {\n                                element = previous.next.element;\n                                previous.next = previous.next.next;\n                            }\n                        }\n                        this.nElements--;\n                        return element;\n                    };\n                    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */ LinkedList.prototype.forEach = function(callback) {\n                        var currentNode = this.firstNode;\n                        while(currentNode !== null){\n                            if (callback(currentNode.element) === false) {\n                                break;\n                            }\n                            currentNode = currentNode.next;\n                        }\n                    };\n                    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */ LinkedList.prototype.reverse = function() {\n                        var previous = null;\n                        var current = this.firstNode;\n                        var temp = null;\n                        while(current !== null){\n                            temp = current.next;\n                            current.next = previous;\n                            previous = current;\n                            current = temp;\n                        }\n                        temp = this.firstNode;\n                        this.firstNode = this.lastNode;\n                        this.lastNode = temp;\n                    };\n                    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */ LinkedList.prototype.toArray = function() {\n                        var array = [];\n                        var currentNode = this.firstNode;\n                        while(currentNode !== null){\n                            array.push(currentNode.element);\n                            currentNode = currentNode.next;\n                        }\n                        return array;\n                    };\n                    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */ LinkedList.prototype.size = function() {\n                        return this.nElements;\n                    };\n                    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */ LinkedList.prototype.isEmpty = function() {\n                        return this.nElements <= 0;\n                    };\n                    LinkedList.prototype.toString = function() {\n                        return arrays.toString(this.toArray());\n                    };\n                    /**\n     * @private\n     */ LinkedList.prototype.nodeAtIndex = function(index) {\n                        if (index < 0 || index >= this.nElements) {\n                            return null;\n                        }\n                        if (index === this.nElements - 1) {\n                            return this.lastNode;\n                        }\n                        var node = this.firstNode;\n                        for(var i = 0; i < index && node !== null; i++){\n                            node = node.next;\n                        }\n                        return node;\n                    };\n                    /**\n     * @private\n     */ LinkedList.prototype.createNode = function(item) {\n                        return {\n                            element: item,\n                            next: null\n                        };\n                    };\n                    return LinkedList;\n                }(); // End of linked list\n                exports1.default = LinkedList;\n            },\n            {\n                \"./arrays\": 15,\n                \"./util\": 16\n            }\n        ],\n        9: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var util = require1(\"./util\");\n                var Dictionary_1 = require1(\"./Dictionary\");\n                var arrays = require1(\"./arrays\");\n                var MultiDictionary = /** @class */ function() {\n                    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *     return pet.name;\n     * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n     *     return pet1.age === pet2.age;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */ function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n                        if (allowDuplicateValues === void 0) {\n                            allowDuplicateValues = false;\n                        }\n                        this.dict = new Dictionary_1.default(toStrFunction);\n                        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n                        this.allowDuplicate = allowDuplicateValues;\n                    }\n                    /**\n     * Returns an array holding the values to which this dictionary maps\n     * the specified key.\n     * Returns an empty array if this dictionary contains no mappings for this key.\n     * @param {Object} key key whose associated values are to be returned.\n     * @return {Array} an array holding the values to which this dictionary maps\n     * the specified key.\n     */ MultiDictionary.prototype.getValue = function(key) {\n                        var values = this.dict.getValue(key);\n                        if (util.isUndefined(values)) {\n                            return [];\n                        }\n                        return arrays.copy(values);\n                    };\n                    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */ MultiDictionary.prototype.setValue = function(key, value) {\n                        if (util.isUndefined(key) || util.isUndefined(value)) {\n                            return false;\n                        }\n                        var array = this.dict.getValue(key);\n                        if (util.isUndefined(array)) {\n                            this.dict.setValue(key, [\n                                value\n                            ]);\n                            return true;\n                        }\n                        if (!this.allowDuplicate) {\n                            if (arrays.contains(array, value, this.equalsF)) {\n                                return false;\n                            }\n                        }\n                        array.push(value);\n                        return true;\n                    };\n                    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */ MultiDictionary.prototype.remove = function(key, value) {\n                        if (util.isUndefined(value)) {\n                            var v = this.dict.remove(key);\n                            return !util.isUndefined(v);\n                        }\n                        var array = this.dict.getValue(key);\n                        if (!util.isUndefined(array) && arrays.remove(array, value, this.equalsF)) {\n                            if (array.length === 0) {\n                                this.dict.remove(key);\n                            }\n                            return true;\n                        }\n                        return false;\n                    };\n                    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */ MultiDictionary.prototype.keys = function() {\n                        return this.dict.keys();\n                    };\n                    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */ MultiDictionary.prototype.values = function() {\n                        var values = this.dict.values();\n                        var array = [];\n                        for(var _i = 0, values_1 = values; _i < values_1.length; _i++){\n                            var v = values_1[_i];\n                            for(var _a = 0, v_1 = v; _a < v_1.length; _a++){\n                                var w = v_1[_a];\n                                array.push(w);\n                            }\n                        }\n                        return array;\n                    };\n                    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */ MultiDictionary.prototype.containsKey = function(key) {\n                        return this.dict.containsKey(key);\n                    };\n                    /**\n     * Removes all mappings from this dictionary.\n     */ MultiDictionary.prototype.clear = function() {\n                        this.dict.clear();\n                    };\n                    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */ MultiDictionary.prototype.size = function() {\n                        return this.dict.size();\n                    };\n                    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */ MultiDictionary.prototype.isEmpty = function() {\n                        return this.dict.isEmpty();\n                    };\n                    return MultiDictionary;\n                }(); // end of multi dictionary\n                exports1.default = MultiDictionary;\n            },\n            {\n                \"./Dictionary\": 4,\n                \"./arrays\": 15,\n                \"./util\": 16\n            }\n        ],\n        10: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var Direction;\n                (function(Direction) {\n                    Direction[Direction[\"BEFORE\"] = 0] = \"BEFORE\";\n                    Direction[Direction[\"AFTER\"] = 1] = \"AFTER\";\n                    Direction[Direction[\"INSIDE_AT_END\"] = 2] = \"INSIDE_AT_END\";\n                    Direction[Direction[\"INSIDE_AT_START\"] = 3] = \"INSIDE_AT_START\";\n                })(Direction || (Direction = {}));\n                var MultiRootTree = /** @class */ function() {\n                    function MultiRootTree(rootIds, nodes) {\n                        if (rootIds === void 0) {\n                            rootIds = [];\n                        }\n                        if (nodes === void 0) {\n                            nodes = {};\n                        }\n                        this.rootIds = rootIds;\n                        this.nodes = nodes;\n                        this.initRootIds();\n                        this.initNodes();\n                    }\n                    MultiRootTree.prototype.initRootIds = function() {\n                        for(var _i = 0, _a = this.rootIds; _i < _a.length; _i++){\n                            var rootId = _a[_i];\n                            this.createEmptyNodeIfNotExist(rootId);\n                        }\n                    };\n                    MultiRootTree.prototype.initNodes = function() {\n                        for(var nodeKey in this.nodes){\n                            if (this.nodes.hasOwnProperty(nodeKey)) {\n                                for(var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++){\n                                    var nodeListItem = _a[_i];\n                                    this.createEmptyNodeIfNotExist(nodeListItem);\n                                }\n                            }\n                        }\n                    };\n                    MultiRootTree.prototype.createEmptyNodeIfNotExist = function(nodeKey) {\n                        if (!this.nodes[nodeKey]) {\n                            this.nodes[nodeKey] = [];\n                        }\n                    };\n                    MultiRootTree.prototype.getRootIds = function() {\n                        var clone = this.rootIds.slice();\n                        return clone;\n                    };\n                    MultiRootTree.prototype.getNodes = function() {\n                        var clone = {};\n                        for(var nodeKey in this.nodes){\n                            if (this.nodes.hasOwnProperty(nodeKey)) {\n                                clone[nodeKey] = this.nodes[nodeKey].slice();\n                            }\n                        }\n                        return clone;\n                    };\n                    MultiRootTree.prototype.getObject = function() {\n                        return {\n                            rootIds: this.getRootIds(),\n                            nodes: this.getNodes()\n                        };\n                    };\n                    MultiRootTree.prototype.toObject = function() {\n                        return this.getObject();\n                    };\n                    MultiRootTree.prototype.flatten = function() {\n                        var _this = this;\n                        var extraPropsObject = [];\n                        for(var i = 0; i < this.rootIds.length; i++){\n                            var rootId = this.rootIds[i];\n                            extraPropsObject.push({\n                                id: rootId,\n                                level: 0,\n                                hasParent: false,\n                                childrenCount: 0\n                            });\n                            traverse(rootId, this.nodes, extraPropsObject, 0);\n                        }\n                        for(var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++){\n                            var o = extraPropsObject_1[_i];\n                            o.childrenCount = countChildren(o.id);\n                        }\n                        return extraPropsObject;\n                        function countChildren(id) {\n                            if (!_this.nodes[id]) {\n                                return 0;\n                            } else {\n                                var childrenCount = _this.nodes[id].length;\n                                return childrenCount;\n                            }\n                        }\n                        function traverse(startId, nodes, returnArray, level) {\n                            if (level === void 0) {\n                                level = 0;\n                            }\n                            if (!startId || !nodes || !returnArray || !nodes[startId]) {\n                                return;\n                            }\n                            level++;\n                            var idsList = nodes[startId];\n                            for(var i = 0; i < idsList.length; i++){\n                                var id = idsList[i];\n                                returnArray.push({\n                                    id: id,\n                                    level: level,\n                                    hasParent: true\n                                });\n                                traverse(id, nodes, returnArray, level);\n                            }\n                            level--;\n                        }\n                    };\n                    MultiRootTree.prototype.moveIdBeforeId = function(moveId, beforeId) {\n                        return this.moveId(moveId, beforeId, Direction.BEFORE);\n                    };\n                    MultiRootTree.prototype.moveIdAfterId = function(moveId, afterId) {\n                        return this.moveId(moveId, afterId, Direction.AFTER);\n                    };\n                    MultiRootTree.prototype.moveIdIntoId = function(moveId, insideId, atStart) {\n                        if (atStart === void 0) {\n                            atStart = true;\n                        }\n                        if (atStart) {\n                            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);\n                        } else {\n                            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);\n                        }\n                    };\n                    MultiRootTree.prototype.swapRootIdWithRootId = function(rootId, withRootId) {\n                        var leftIndex = this.findRootId(rootId);\n                        var rightIndex = this.findRootId(withRootId);\n                        this.swapRootPositionWithRootPosition(leftIndex, rightIndex);\n                    };\n                    MultiRootTree.prototype.swapRootPositionWithRootPosition = function(swapRootPosition, withRootPosition) {\n                        var temp = this.rootIds[withRootPosition];\n                        this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];\n                        this.rootIds[swapRootPosition] = temp;\n                    };\n                    MultiRootTree.prototype.deleteId = function(id) {\n                        this.rootDeleteId(id);\n                        this.nodeAndSubNodesDelete(id);\n                        this.nodeRefrencesDelete(id);\n                    };\n                    MultiRootTree.prototype.insertIdBeforeId = function(beforeId, insertId) {\n                        var foundRootIdIndex = this.findRootId(beforeId);\n                        if (foundRootIdIndex > -1) {\n                            this.insertIdIntoRoot(insertId, foundRootIdIndex);\n                        }\n                        for(var nodeKey in this.nodes){\n                            if (this.nodes.hasOwnProperty(nodeKey)) {\n                                var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                                if (foundNodeIdIndex > -1) {\n                                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);\n                                }\n                            }\n                        }\n                    };\n                    MultiRootTree.prototype.insertIdAfterId = function(belowId, insertId) {\n                        var foundRootIdIndex = this.findRootId(belowId);\n                        if (foundRootIdIndex > -1) {\n                            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);\n                        }\n                        for(var nodeKey in this.nodes){\n                            if (this.nodes.hasOwnProperty(nodeKey)) {\n                                var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);\n                                if (foundNodeIdIndex > -1) {\n                                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);\n                                }\n                            }\n                        }\n                    };\n                    MultiRootTree.prototype.insertIdIntoId = function(insideId, insertId) {\n                        this.nodeInsertAtEnd(insideId, insertId);\n                        this.nodes[insertId] = [];\n                    };\n                    MultiRootTree.prototype.insertIdIntoRoot = function(id, position) {\n                        if (position === undefined) {\n                            this.rootInsertAtEnd(id);\n                        } else {\n                            if (position < 0) {\n                                var length_1 = this.rootIds.length;\n                                this.rootIds.splice(position + length_1 + 1, 0, id);\n                            } else {\n                                this.rootIds.splice(position, 0, id);\n                            }\n                        }\n                        this.nodes[id] = this.nodes[id] || [];\n                    };\n                    MultiRootTree.prototype.insertIdIntoNode = function(nodeKey, id, position) {\n                        this.nodes[nodeKey] = this.nodes[nodeKey] || [];\n                        this.nodes[id] = this.nodes[id] || [];\n                        if (position === undefined) {\n                            this.nodeInsertAtEnd(nodeKey, id);\n                        } else {\n                            if (position < 0) {\n                                var length_2 = this.nodes[nodeKey].length;\n                                this.nodes[nodeKey].splice(position + length_2 + 1, 0, id);\n                            } else {\n                                this.nodes[nodeKey].splice(position, 0, id);\n                            }\n                        }\n                    };\n                    MultiRootTree.prototype.moveId = function(moveId, beforeId, direction) {\n                        var sourceId = moveId;\n                        var sourceRootIndex = this.findRootId(sourceId);\n                        var sourceNodeKey;\n                        var sourceNodeIdIndex;\n                        if (this.nodes[beforeId]) {\n                            sourceNodeKey = beforeId;\n                        }\n                        for(var nodeKey in this.nodes){\n                            if (this.nodes.hasOwnProperty(nodeKey)) {\n                                sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                                break;\n                            }\n                        }\n                        // got all\n                        var targetId = beforeId;\n                        var targetRootIndex = this.findRootId(targetId);\n                        var targetNodeKey;\n                        var targetNodeIdIndex;\n                        if (this.nodes[beforeId]) {\n                            targetNodeKey = beforeId;\n                        }\n                        for(var nodeKey in this.nodes){\n                            if (this.nodes.hasOwnProperty(nodeKey)) {\n                                targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                                break;\n                            }\n                        }\n                        // got all\n                        if (sourceRootIndex > -1) {\n                            if (targetRootIndex > -1) {\n                                // moving root to root\n                                // console.log(`Moving ROOT to ROOT`);\n                                // console.log(`RootIds:`);\n                                // console.log(this.rootIds);\n                                // console.log(`TargetIndex=${targetRootIndex}, SourceIndex=${sourceRootIndex}`);\n                                // console.log(`TargetId=${targetId}, SourceId=${sourceId}`);\n                                this.rootDelete(sourceRootIndex); // indexes change now\n                                if (targetRootIndex > sourceRootIndex) {\n                                    targetRootIndex--;\n                                } else {}\n                                switch(direction){\n                                    case Direction.BEFORE:\n                                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                                        break;\n                                    case Direction.AFTER:\n                                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                                        break;\n                                    case Direction.INSIDE_AT_START:\n                                        this.nodeInsertAtStart(targetId, sourceId);\n                                        break;\n                                    case Direction.INSIDE_AT_END:\n                                        this.nodeInsertAtEnd(targetId, sourceId);\n                                        break;\n                                }\n                            } else {\n                                // moving root (source) ABOVE node (target)\n                                // will remove one entry from roots\n                                this.rootDelete(sourceRootIndex);\n                                for(var nodeKey in this.nodes){\n                                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                                        var index = this.findNodeId(nodeKey, targetId);\n                                        if (index > -1) {\n                                            switch(direction){\n                                                case Direction.BEFORE:\n                                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                                    break;\n                                                case Direction.AFTER:\n                                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                                    break;\n                                                case Direction.INSIDE_AT_START:\n                                                    this.nodeInsertAtStart(targetId, sourceId);\n                                                    break;\n                                                case Direction.INSIDE_AT_END:\n                                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                                    break;\n                                            }\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            if (targetRootIndex > -1) {\n                                // moving node (source) ABOVE root (target)\n                                // delete source id from each node\n                                for(var nodeKey in this.nodes){\n                                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                                        var index = this.findNodeId(nodeKey, sourceId);\n                                        if (index > -1) {\n                                            // this.nodeInsertId(nodeKey, sourceId, index);\n                                            this.nodeDeleteAtIndex(nodeKey, index);\n                                            break;\n                                        }\n                                    }\n                                }\n                                switch(direction){\n                                    case Direction.BEFORE:\n                                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                                        break;\n                                    case Direction.AFTER:\n                                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                                        break;\n                                    case Direction.INSIDE_AT_START:\n                                        this.nodeInsertAtStart(targetId, sourceId);\n                                        break;\n                                    case Direction.INSIDE_AT_END:\n                                        this.nodeInsertAtEnd(targetId, sourceId);\n                                        break;\n                                }\n                            } else {\n                                // moving node (source) ABOVE node (target)\n                                // delete source id from each node\n                                for(var nodeKey in this.nodes){\n                                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                                        var index = this.findNodeId(nodeKey, sourceId);\n                                        if (index > -1) {\n                                            this.nodeDeleteAtIndex(nodeKey, index);\n                                            break;\n                                        }\n                                    }\n                                }\n                                for(var nodeKey in this.nodes){\n                                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                                        var index = this.findNodeId(nodeKey, targetId);\n                                        if (index > -1) {\n                                            switch(direction){\n                                                case Direction.BEFORE:\n                                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                                    break;\n                                                case Direction.AFTER:\n                                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                                    break;\n                                                case Direction.INSIDE_AT_START:\n                                                    this.nodeInsertAtStart(targetId, sourceId);\n                                                    break;\n                                                case Direction.INSIDE_AT_END:\n                                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                                    break;\n                                            }\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    MultiRootTree.prototype.swapArrayElements = function(arr, indexA, indexB) {\n                        var temp = arr[indexA];\n                        arr[indexA] = arr[indexB];\n                        arr[indexB] = temp;\n                        return arr;\n                    };\n                    MultiRootTree.prototype.rootDeleteId = function(id) {\n                        var index = this.findRootId(id);\n                        if (index > -1) {\n                            this.rootDelete(index);\n                        }\n                    };\n                    MultiRootTree.prototype.nodeAndSubNodesDelete = function(nodeKey) {\n                        var toDeleteLater = [];\n                        for(var i = 0; i < this.nodes[nodeKey].length; i++){\n                            var id = this.nodes[nodeKey][i];\n                            this.nodeAndSubNodesDelete(id);\n                            toDeleteLater.push(nodeKey);\n                        }\n                        this.nodeDelete(nodeKey);\n                        for(var i = 0; i < toDeleteLater.length; i++){\n                            this.nodeDelete(toDeleteLater[i]);\n                        }\n                    };\n                    MultiRootTree.prototype.nodeRefrencesDelete = function(id) {\n                        for(var nodeKey in this.nodes){\n                            if (this.nodes.hasOwnProperty(nodeKey)) {\n                                for(var i = 0; i < this.nodes[nodeKey].length; i++){\n                                    var targetId = this.nodes[nodeKey][i];\n                                    if (targetId === id) {\n                                        this.nodeDeleteAtIndex(nodeKey, i);\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    MultiRootTree.prototype.nodeDelete = function(nodeKey) {\n                        delete this.nodes[nodeKey];\n                    };\n                    MultiRootTree.prototype.findRootId = function(id) {\n                        return this.rootIds.indexOf(id);\n                    };\n                    MultiRootTree.prototype.findNodeId = function(nodeKey, id) {\n                        return this.nodes[nodeKey].indexOf(id);\n                    };\n                    MultiRootTree.prototype.findNode = function(nodeKey) {\n                        return this.nodes[nodeKey];\n                    };\n                    MultiRootTree.prototype.nodeInsertAtStart = function(nodeKey, id) {\n                        this.nodes[nodeKey].unshift(id);\n                    };\n                    MultiRootTree.prototype.nodeInsertAtEnd = function(nodeKey, id) {\n                        this.nodes[nodeKey].push(id);\n                    };\n                    MultiRootTree.prototype.rootDelete = function(index) {\n                        this.rootIds.splice(index, 1);\n                    };\n                    MultiRootTree.prototype.nodeDeleteAtIndex = function(nodeKey, index) {\n                        this.nodes[nodeKey].splice(index, 1);\n                    };\n                    MultiRootTree.prototype.rootInsertAtStart = function(id) {\n                        this.rootIds.unshift(id);\n                    };\n                    MultiRootTree.prototype.rootInsertAtEnd = function(id) {\n                        this.rootIds.push(id);\n                    };\n                    return MultiRootTree;\n                }();\n                exports1.default = MultiRootTree;\n            },\n            {}\n        ],\n        11: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var util = require1(\"./util\");\n                var Heap_1 = require1(\"./Heap\");\n                var PriorityQueue = /** @class */ function() {\n                    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */ function PriorityQueue(compareFunction) {\n                        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n                    }\n                    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */ PriorityQueue.prototype.enqueue = function(element) {\n                        return this.heap.add(element);\n                    };\n                    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */ PriorityQueue.prototype.add = function(element) {\n                        return this.heap.add(element);\n                    };\n                    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */ PriorityQueue.prototype.dequeue = function() {\n                        if (this.heap.size() !== 0) {\n                            var el = this.heap.peek();\n                            this.heap.removeRoot();\n                            return el;\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */ PriorityQueue.prototype.peek = function() {\n                        return this.heap.peek();\n                    };\n                    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */ PriorityQueue.prototype.contains = function(element) {\n                        return this.heap.contains(element);\n                    };\n                    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */ PriorityQueue.prototype.isEmpty = function() {\n                        return this.heap.isEmpty();\n                    };\n                    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */ PriorityQueue.prototype.size = function() {\n                        return this.heap.size();\n                    };\n                    /**\n     * Removes all of the elements from this priority queue.\n     */ PriorityQueue.prototype.clear = function() {\n                        this.heap.clear();\n                    };\n                    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */ PriorityQueue.prototype.forEach = function(callback) {\n                        this.heap.forEach(callback);\n                    };\n                    return PriorityQueue;\n                }(); // end of priority queue\n                exports1.default = PriorityQueue;\n            },\n            {\n                \"./Heap\": 6,\n                \"./util\": 16\n            }\n        ],\n        12: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var LinkedList_1 = require1(\"./LinkedList\");\n                var Queue = /** @class */ function() {\n                    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */ function Queue() {\n                        this.list = new LinkedList_1.default();\n                    }\n                    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */ Queue.prototype.enqueue = function(elem) {\n                        return this.list.add(elem);\n                    };\n                    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */ Queue.prototype.add = function(elem) {\n                        return this.list.add(elem);\n                    };\n                    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */ Queue.prototype.dequeue = function() {\n                        if (this.list.size() !== 0) {\n                            var el = this.list.first();\n                            this.list.removeElementAtIndex(0);\n                            return el;\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */ Queue.prototype.peek = function() {\n                        if (this.list.size() !== 0) {\n                            return this.list.first();\n                        }\n                        return undefined;\n                    };\n                    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */ Queue.prototype.size = function() {\n                        return this.list.size();\n                    };\n                    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */ Queue.prototype.contains = function(elem, equalsFunction) {\n                        return this.list.contains(elem, equalsFunction);\n                    };\n                    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */ Queue.prototype.isEmpty = function() {\n                        return this.list.size() <= 0;\n                    };\n                    /**\n     * Removes all of the elements from this queue.\n     */ Queue.prototype.clear = function() {\n                        this.list.clear();\n                    };\n                    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */ Queue.prototype.forEach = function(callback) {\n                        this.list.forEach(callback);\n                    };\n                    return Queue;\n                }(); // End of queue\n                exports1.default = Queue;\n            },\n            {\n                \"./LinkedList\": 8\n            }\n        ],\n        13: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var util = require1(\"./util\");\n                var arrays = require1(\"./arrays\");\n                var Dictionary_1 = require1(\"./Dictionary\");\n                var Set = /** @class */ function() {\n                    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */ function Set(toStringFunction) {\n                        this.dictionary = new Dictionary_1.default(toStringFunction);\n                    }\n                    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */ Set.prototype.contains = function(element) {\n                        return this.dictionary.containsKey(element);\n                    };\n                    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */ Set.prototype.add = function(element) {\n                        if (this.contains(element) || util.isUndefined(element)) {\n                            return false;\n                        } else {\n                            this.dictionary.setValue(element, element);\n                            return true;\n                        }\n                    };\n                    /**\n     * Performs an intersection between this and another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */ Set.prototype.intersection = function(otherSet) {\n                        var set = this;\n                        this.forEach(function(element) {\n                            if (!otherSet.contains(element)) {\n                                set.remove(element);\n                            }\n                            return true;\n                        });\n                    };\n                    /**\n     * Performs a union between this and another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */ Set.prototype.union = function(otherSet) {\n                        var set = this;\n                        otherSet.forEach(function(element) {\n                            set.add(element);\n                            return true;\n                        });\n                    };\n                    /**\n     * Performs a difference between this and another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */ Set.prototype.difference = function(otherSet) {\n                        var set = this;\n                        otherSet.forEach(function(element) {\n                            set.remove(element);\n                            return true;\n                        });\n                    };\n                    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */ Set.prototype.isSubsetOf = function(otherSet) {\n                        if (this.size() > otherSet.size()) {\n                            return false;\n                        }\n                        var isSub = true;\n                        this.forEach(function(element) {\n                            if (!otherSet.contains(element)) {\n                                isSub = false;\n                                return false;\n                            }\n                            return true;\n                        });\n                        return isSub;\n                    };\n                    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */ Set.prototype.remove = function(element) {\n                        if (!this.contains(element)) {\n                            return false;\n                        } else {\n                            this.dictionary.remove(element);\n                            return true;\n                        }\n                    };\n                    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */ Set.prototype.forEach = function(callback) {\n                        this.dictionary.forEach(function(k, v) {\n                            return callback(v);\n                        });\n                    };\n                    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */ Set.prototype.toArray = function() {\n                        return this.dictionary.values();\n                    };\n                    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */ Set.prototype.isEmpty = function() {\n                        return this.dictionary.isEmpty();\n                    };\n                    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */ Set.prototype.size = function() {\n                        return this.dictionary.size();\n                    };\n                    /**\n     * Removes all of the elements from this set.\n     */ Set.prototype.clear = function() {\n                        this.dictionary.clear();\n                    };\n                    /*\n    * Provides a string representation for display\n    */ Set.prototype.toString = function() {\n                        return arrays.toString(this.toArray());\n                    };\n                    return Set;\n                }(); // end of Set\n                exports1.default = Set;\n            },\n            {\n                \"./Dictionary\": 4,\n                \"./arrays\": 15,\n                \"./util\": 16\n            }\n        ],\n        14: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var LinkedList_1 = require1(\"./LinkedList\");\n                var Stack = /** @class */ function() {\n                    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */ function Stack() {\n                        this.list = new LinkedList_1.default();\n                    }\n                    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */ Stack.prototype.push = function(elem) {\n                        return this.list.add(elem, 0);\n                    };\n                    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */ Stack.prototype.add = function(elem) {\n                        return this.list.add(elem, 0);\n                    };\n                    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */ Stack.prototype.pop = function() {\n                        return this.list.removeElementAtIndex(0);\n                    };\n                    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */ Stack.prototype.peek = function() {\n                        return this.list.first();\n                    };\n                    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */ Stack.prototype.size = function() {\n                        return this.list.size();\n                    };\n                    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */ Stack.prototype.contains = function(elem, equalsFunction) {\n                        return this.list.contains(elem, equalsFunction);\n                    };\n                    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */ Stack.prototype.isEmpty = function() {\n                        return this.list.isEmpty();\n                    };\n                    /**\n     * Removes all of the elements from this stack.\n     */ Stack.prototype.clear = function() {\n                        this.list.clear();\n                    };\n                    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */ Stack.prototype.forEach = function(callback) {\n                        this.list.forEach(callback);\n                    };\n                    return Stack;\n                }(); // End of stack\n                exports1.default = Stack;\n            },\n            {\n                \"./LinkedList\": 8\n            }\n        ],\n        15: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var util = require1(\"./util\");\n                /**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */ function indexOf(array, item, equalsFunction) {\n                    var equals = equalsFunction || util.defaultEquals;\n                    var length = array.length;\n                    for(var i = 0; i < length; i++){\n                        if (equals(array[i], item)) {\n                            return i;\n                        }\n                    }\n                    return -1;\n                }\n                exports1.indexOf = indexOf;\n                /**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */ function lastIndexOf(array, item, equalsFunction) {\n                    var equals = equalsFunction || util.defaultEquals;\n                    var length = array.length;\n                    for(var i = length - 1; i >= 0; i--){\n                        if (equals(array[i], item)) {\n                            return i;\n                        }\n                    }\n                    return -1;\n                }\n                exports1.lastIndexOf = lastIndexOf;\n                /**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */ function contains(array, item, equalsFunction) {\n                    return indexOf(array, item, equalsFunction) >= 0;\n                }\n                exports1.contains = contains;\n                /**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */ function remove(array, item, equalsFunction) {\n                    var index = indexOf(array, item, equalsFunction);\n                    if (index < 0) {\n                        return false;\n                    }\n                    array.splice(index, 1);\n                    return true;\n                }\n                exports1.remove = remove;\n                /**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */ function frequency(array, item, equalsFunction) {\n                    var equals = equalsFunction || util.defaultEquals;\n                    var length = array.length;\n                    var freq = 0;\n                    for(var i = 0; i < length; i++){\n                        if (equals(array[i], item)) {\n                            freq++;\n                        }\n                    }\n                    return freq;\n                }\n                exports1.frequency = frequency;\n                /**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */ function equals(array1, array2, equalsFunction) {\n                    var equals = equalsFunction || util.defaultEquals;\n                    if (array1.length !== array2.length) {\n                        return false;\n                    }\n                    var length = array1.length;\n                    for(var i = 0; i < length; i++){\n                        if (!equals(array1[i], array2[i])) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                exports1.equals = equals;\n                /**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */ function copy(array) {\n                    return array.concat();\n                }\n                exports1.copy = copy;\n                /**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */ function swap(array, i, j) {\n                    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n                        return false;\n                    }\n                    var temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                    return true;\n                }\n                exports1.swap = swap;\n                function toString(array) {\n                    return \"[\" + array.toString() + \"]\";\n                }\n                exports1.toString = toString;\n                /**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */ function forEach(array, callback) {\n                    for(var _i = 0, array_1 = array; _i < array_1.length; _i++){\n                        var ele = array_1[_i];\n                        if (callback(ele) === false) {\n                            return;\n                        }\n                    }\n                }\n                exports1.forEach = forEach;\n            },\n            {\n                \"./util\": 16\n            }\n        ],\n        16: [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var _hasOwnProperty = Object.prototype.hasOwnProperty;\n                exports1.has = function(obj, prop) {\n                    return _hasOwnProperty.call(obj, prop);\n                };\n                /**\n * Default function to compare element order.\n * @function\n */ function defaultCompare(a, b) {\n                    if (a < b) {\n                        return -1;\n                    } else if (a === b) {\n                        return 0;\n                    } else {\n                        return 1;\n                    }\n                }\n                exports1.defaultCompare = defaultCompare;\n                /**\n * Default function to test equality.\n * @function\n */ function defaultEquals(a, b) {\n                    return a === b;\n                }\n                exports1.defaultEquals = defaultEquals;\n                /**\n * Default function to convert an object to a string.\n * @function\n */ function defaultToString(item) {\n                    if (item === null) {\n                        return \"COLLECTION_NULL\";\n                    } else if (isUndefined(item)) {\n                        return \"COLLECTION_UNDEFINED\";\n                    } else if (isString(item)) {\n                        return \"$s\" + item;\n                    } else {\n                        return \"$o\" + item.toString();\n                    }\n                }\n                exports1.defaultToString = defaultToString;\n                /**\n * Joins all the properies of the object using the provided join string\n */ function makeString(item, join) {\n                    if (join === void 0) {\n                        join = \",\";\n                    }\n                    if (item === null) {\n                        return \"COLLECTION_NULL\";\n                    } else if (isUndefined(item)) {\n                        return \"COLLECTION_UNDEFINED\";\n                    } else if (isString(item)) {\n                        return item.toString();\n                    } else {\n                        var toret = \"{\";\n                        var first = true;\n                        for(var prop in item){\n                            if (exports1.has(item, prop)) {\n                                if (first) {\n                                    first = false;\n                                } else {\n                                    toret = toret + join;\n                                }\n                                toret = toret + prop + \":\" + item[prop];\n                            }\n                        }\n                        return toret + \"}\";\n                    }\n                }\n                exports1.makeString = makeString;\n                /**\n * Checks if the given argument is a function.\n * @function\n */ function isFunction(func) {\n                    return typeof func === \"function\";\n                }\n                exports1.isFunction = isFunction;\n                /**\n * Checks if the given argument is undefined.\n * @function\n */ function isUndefined(obj) {\n                    return typeof obj === \"undefined\";\n                }\n                exports1.isUndefined = isUndefined;\n                /**\n * Checks if the given argument is a string.\n * @function\n */ function isString(obj) {\n                    return Object.prototype.toString.call(obj) === \"[object String]\";\n                }\n                exports1.isString = isString;\n                /**\n * Reverses a compare function.\n * @function\n */ function reverseCompareFunction(compareFunction) {\n                    if (isUndefined(compareFunction) || !isFunction(compareFunction)) {\n                        return function(a, b) {\n                            if (a < b) {\n                                return 1;\n                            } else if (a === b) {\n                                return 0;\n                            } else {\n                                return -1;\n                            }\n                        };\n                    } else {\n                        return function(d, v) {\n                            return compareFunction(d, v) * -1;\n                        };\n                    }\n                }\n                exports1.reverseCompareFunction = reverseCompareFunction;\n                /**\n * Returns an equal function given a compare function.\n * @function\n */ function compareToEquals(compareFunction) {\n                    return function(a, b) {\n                        return compareFunction(a, b) === 0;\n                    };\n                }\n                exports1.compareToEquals = compareToEquals;\n            },\n            {}\n        ],\n        \"typescript-collections\": [\n            function(require1, module1, exports1) {\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                // Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n                //\n                // Licensed under MIT open source license http://opensource.org/licenses/MIT\n                //\n                // Orginal javascript code was by Mauricio Santos\n                //\n                var _arrays = require1(\"./arrays\");\n                exports1.arrays = _arrays;\n                var Bag_1 = require1(\"./Bag\");\n                exports1.Bag = Bag_1.default;\n                var BSTree_1 = require1(\"./BSTree\");\n                exports1.BSTree = BSTree_1.default;\n                var BSTreeKV_1 = require1(\"./BSTreeKV\");\n                exports1.BSTreeKV = BSTreeKV_1.default;\n                var Dictionary_1 = require1(\"./Dictionary\");\n                exports1.Dictionary = Dictionary_1.default;\n                var Heap_1 = require1(\"./Heap\");\n                exports1.Heap = Heap_1.default;\n                var LinkedDictionary_1 = require1(\"./LinkedDictionary\");\n                exports1.LinkedDictionary = LinkedDictionary_1.default;\n                var LinkedList_1 = require1(\"./LinkedList\");\n                exports1.LinkedList = LinkedList_1.default;\n                var MultiDictionary_1 = require1(\"./MultiDictionary\");\n                exports1.MultiDictionary = MultiDictionary_1.default;\n                var FactoryDictionary_1 = require1(\"./FactoryDictionary\");\n                exports1.FactoryDictionary = FactoryDictionary_1.default;\n                var FactoryDictionary_2 = require1(\"./FactoryDictionary\");\n                exports1.DefaultDictionary = FactoryDictionary_2.default;\n                var Queue_1 = require1(\"./Queue\");\n                exports1.Queue = Queue_1.default;\n                var PriorityQueue_1 = require1(\"./PriorityQueue\");\n                exports1.PriorityQueue = PriorityQueue_1.default;\n                var Set_1 = require1(\"./Set\");\n                exports1.Set = Set_1.default;\n                var Stack_1 = require1(\"./Stack\");\n                exports1.Stack = Stack_1.default;\n                var MultiRootTree_1 = require1(\"./MultiRootTree\");\n                exports1.MultiRootTree = MultiRootTree_1.default;\n                var _util = require1(\"./util\");\n                exports1.util = _util;\n            },\n            {\n                \"./BSTree\": 1,\n                \"./BSTreeKV\": 2,\n                \"./Bag\": 3,\n                \"./Dictionary\": 4,\n                \"./FactoryDictionary\": 5,\n                \"./Heap\": 6,\n                \"./LinkedDictionary\": 7,\n                \"./LinkedList\": 8,\n                \"./MultiDictionary\": 9,\n                \"./MultiRootTree\": 10,\n                \"./PriorityQueue\": 11,\n                \"./Queue\": 12,\n                \"./Set\": 13,\n                \"./Stack\": 14,\n                \"./arrays\": 15,\n                \"./util\": 16\n            }\n        ]\n    }, {}, []);\n    //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n    return __webpack_require__(/*! typescript-collections */ \"(ssr)/./node_modules/.pnpm/typescript-collections@1.3.3/node_modules/typescript-collections/dist/lib/umd.js\");\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/typescript-collections@1.3.3/node_modules/typescript-collections/dist/lib/umd.js\n");

/***/ })

};
;