"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multistream@4.1.0";
exports.ids = ["vendor-chunks/multistream@4.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/multistream@4.1.0/node_modules/multistream/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/multistream@4.1.0/node_modules/multistream/index.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! multistream. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ \nconst stream = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/readable.js\");\nconst once = __webpack_require__(/*! once */ \"(ssr)/./node_modules/.pnpm/once@1.4.0/node_modules/once/once.js\");\nfunction toStreams2Obj(s) {\n    return toStreams2(s, {\n        objectMode: true,\n        highWaterMark: 16\n    });\n}\nfunction toStreams2Buf(s) {\n    return toStreams2(s);\n}\nfunction toStreams2(s, opts) {\n    if (!s || typeof s === \"function\" || s._readableState) return s;\n    const wrap = new stream.Readable(opts).wrap(s);\n    if (s.destroy) {\n        wrap.destroy = s.destroy.bind(s);\n    }\n    return wrap;\n}\nclass MultiStream extends stream.Readable {\n    constructor(streams, opts){\n        super({\n            ...opts,\n            autoDestroy: true\n        });\n        this._drained = false;\n        this._forwarding = false;\n        this._current = null;\n        this._toStreams2 = opts && opts.objectMode ? toStreams2Obj : toStreams2Buf;\n        if (typeof streams === \"function\") {\n            this._queue = streams;\n        } else {\n            this._queue = streams.map(this._toStreams2);\n            this._queue.forEach((stream)=>{\n                if (typeof stream !== \"function\") this._attachErrorListener(stream);\n            });\n        }\n        this._next();\n    }\n    _read() {\n        this._drained = true;\n        this._forward();\n    }\n    _forward() {\n        if (this._forwarding || !this._drained || !this._current) return;\n        this._forwarding = true;\n        let chunk;\n        while(this._drained && (chunk = this._current.read()) !== null){\n            this._drained = this.push(chunk);\n        }\n        this._forwarding = false;\n    }\n    _destroy(err, cb) {\n        let streams = [];\n        if (this._current) streams.push(this._current);\n        if (typeof this._queue !== \"function\") streams = streams.concat(this._queue);\n        if (streams.length === 0) {\n            cb(err);\n        } else {\n            let counter = streams.length;\n            let er = err;\n            streams.forEach((stream)=>{\n                destroy(stream, err, (err)=>{\n                    er = er || err;\n                    if (--counter === 0) {\n                        cb(er);\n                    }\n                });\n            });\n        }\n    }\n    _next() {\n        this._current = null;\n        if (typeof this._queue === \"function\") {\n            this._queue((err, stream)=>{\n                if (err) return this.destroy(err);\n                stream = this._toStreams2(stream);\n                this._attachErrorListener(stream);\n                this._gotNextStream(stream);\n            });\n        } else {\n            let stream = this._queue.shift();\n            if (typeof stream === \"function\") {\n                stream = this._toStreams2(stream());\n                this._attachErrorListener(stream);\n            }\n            this._gotNextStream(stream);\n        }\n    }\n    _gotNextStream(stream) {\n        if (!stream) {\n            this.push(null);\n            return;\n        }\n        this._current = stream;\n        this._forward();\n        const onReadable = ()=>{\n            this._forward();\n        };\n        const onClose = ()=>{\n            if (!stream._readableState.ended && !stream.destroyed) {\n                const err = new Error(\"ERR_STREAM_PREMATURE_CLOSE\");\n                err.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                this.destroy(err);\n            }\n        };\n        const onEnd = ()=>{\n            this._current = null;\n            stream.removeListener(\"readable\", onReadable);\n            stream.removeListener(\"end\", onEnd);\n            stream.removeListener(\"close\", onClose);\n            stream.destroy();\n            this._next();\n        };\n        stream.on(\"readable\", onReadable);\n        stream.once(\"end\", onEnd);\n        stream.once(\"close\", onClose);\n    }\n    _attachErrorListener(stream) {\n        if (!stream) return;\n        const onError = (err)=>{\n            stream.removeListener(\"error\", onError);\n            this.destroy(err);\n        };\n        stream.once(\"error\", onError);\n    }\n}\nMultiStream.obj = (streams)=>new MultiStream(streams, {\n        objectMode: true,\n        highWaterMark: 16\n    });\nmodule.exports = MultiStream;\n// Normalize stream destroy w/ callback.\nfunction destroy(stream, err, cb) {\n    if (!stream.destroy || stream.destroyed) {\n        cb(err);\n    } else {\n        const callback = once((er)=>cb(er || err));\n        stream.on(\"error\", callback).on(\"close\", ()=>callback()).destroy(err, callback);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/multistream@4.1.0/node_modules/multistream/index.js\n");

/***/ })

};
;