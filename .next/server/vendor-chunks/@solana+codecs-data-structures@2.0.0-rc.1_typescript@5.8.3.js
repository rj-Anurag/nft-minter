"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.8.3";
exports.ids = ["vendor-chunks/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.8.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-data-structures/dist/index.node.cjs":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-data-structures/dist/index.node.cjs ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar codecsCore = __webpack_require__(/*! @solana/codecs-core */ \"(ssr)/./node_modules/.pnpm/@solana+codecs-core@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-core/dist/index.node.cjs\");\nvar codecsNumbers = __webpack_require__(/*! @solana/codecs-numbers */ \"(ssr)/./node_modules/.pnpm/@solana+codecs-numbers@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-numbers/dist/index.node.cjs\");\nvar errors = __webpack_require__(/*! @solana/errors */ \"(ssr)/./node_modules/.pnpm/@solana+errors@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/errors/dist/index.node.cjs\");\n// src/array.ts\nfunction assertValidNumberOfItemsForCodec(codecDescription, expected, actual) {\n    if (expected !== actual) {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {\n            actual,\n            codecDescription,\n            expected\n        });\n    }\n}\nfunction maxCodecSizes(sizes) {\n    return sizes.reduce((all, size)=>all === null || size === null ? null : Math.max(all, size), 0);\n}\nfunction sumCodecSizes(sizes) {\n    return sizes.reduce((all, size)=>all === null || size === null ? null : all + size, 0);\n}\nfunction getFixedSize(codec) {\n    return codecsCore.isFixedSize(codec) ? codec.fixedSize : null;\n}\nfunction getMaxSize(codec) {\n    return codecsCore.isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n// src/array.ts\nfunction getArrayEncoder(item, config = {}) {\n    const size = config.size ?? codecsNumbers.getU32Encoder();\n    const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));\n    const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n    return codecsCore.createEncoder({\n        ...fixedSize !== null ? {\n            fixedSize\n        } : {\n            getSizeFromValue: (array)=>{\n                const prefixSize = typeof size === \"object\" ? codecsCore.getEncodedSize(array.length, size) : 0;\n                return prefixSize + [\n                    ...array\n                ].reduce((all, value)=>all + codecsCore.getEncodedSize(value, item), 0);\n            },\n            maxSize\n        },\n        write: (array, bytes, offset)=>{\n            if (typeof size === \"number\") {\n                assertValidNumberOfItemsForCodec(\"array\", size, array.length);\n            }\n            if (typeof size === \"object\") {\n                offset = size.write(array.length, bytes, offset);\n            }\n            array.forEach((value)=>{\n                offset = item.write(value, bytes, offset);\n            });\n            return offset;\n        }\n    });\n}\nfunction getArrayDecoder(item, config = {}) {\n    const size = config.size ?? codecsNumbers.getU32Decoder();\n    const itemSize = getFixedSize(item);\n    const fixedSize = computeArrayLikeCodecSize(size, itemSize);\n    const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n    return codecsCore.createDecoder({\n        ...fixedSize !== null ? {\n            fixedSize\n        } : {\n            maxSize\n        },\n        read: (bytes, offset)=>{\n            const array = [];\n            if (typeof size === \"object\" && bytes.slice(offset).length === 0) {\n                return [\n                    array,\n                    offset\n                ];\n            }\n            if (size === \"remainder\") {\n                while(offset < bytes.length){\n                    const [value, newOffset2] = item.read(bytes, offset);\n                    offset = newOffset2;\n                    array.push(value);\n                }\n                return [\n                    array,\n                    offset\n                ];\n            }\n            const [resolvedSize, newOffset] = typeof size === \"number\" ? [\n                size,\n                offset\n            ] : size.read(bytes, offset);\n            offset = newOffset;\n            for(let i = 0; i < resolvedSize; i += 1){\n                const [value, newOffset2] = item.read(bytes, offset);\n                offset = newOffset2;\n                array.push(value);\n            }\n            return [\n                array,\n                offset\n            ];\n        }\n    });\n}\nfunction getArrayCodec(item, config = {}) {\n    return codecsCore.combineCodec(getArrayEncoder(item, config), getArrayDecoder(item, config));\n}\nfunction computeArrayLikeCodecSize(size, itemSize) {\n    if (typeof size !== \"number\") return null;\n    if (size === 0) return 0;\n    return itemSize === null ? null : itemSize * size;\n}\nfunction getBitArrayEncoder(size, config = {}) {\n    const parsedConfig = typeof config === \"boolean\" ? {\n        backward: config\n    } : config;\n    const backward = parsedConfig.backward ?? false;\n    return codecsCore.createEncoder({\n        fixedSize: size,\n        write (value, bytes, offset) {\n            const bytesToAdd = [];\n            for(let i = 0; i < size; i += 1){\n                let byte = 0;\n                for(let j = 0; j < 8; j += 1){\n                    const feature = Number(value[i * 8 + j] ?? 0);\n                    byte |= feature << (backward ? j : 7 - j);\n                }\n                if (backward) {\n                    bytesToAdd.unshift(byte);\n                } else {\n                    bytesToAdd.push(byte);\n                }\n            }\n            bytes.set(bytesToAdd, offset);\n            return size;\n        }\n    });\n}\nfunction getBitArrayDecoder(size, config = {}) {\n    const parsedConfig = typeof config === \"boolean\" ? {\n        backward: config\n    } : config;\n    const backward = parsedConfig.backward ?? false;\n    return codecsCore.createDecoder({\n        fixedSize: size,\n        read (bytes, offset) {\n            codecsCore.assertByteArrayHasEnoughBytesForCodec(\"bitArray\", size, bytes, offset);\n            const booleans = [];\n            let slice = bytes.slice(offset, offset + size);\n            slice = backward ? slice.reverse() : slice;\n            slice.forEach((byte)=>{\n                for(let i = 0; i < 8; i += 1){\n                    if (backward) {\n                        booleans.push(Boolean(byte & 1));\n                        byte >>= 1;\n                    } else {\n                        booleans.push(Boolean(byte & 128));\n                        byte <<= 1;\n                    }\n                }\n            });\n            return [\n                booleans,\n                offset + size\n            ];\n        }\n    });\n}\nfunction getBitArrayCodec(size, config = {}) {\n    return codecsCore.combineCodec(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));\n}\nfunction getBooleanEncoder(config = {}) {\n    return codecsCore.transformEncoder(config.size ?? codecsNumbers.getU8Encoder(), (value)=>value ? 1 : 0);\n}\nfunction getBooleanDecoder(config = {}) {\n    return codecsCore.transformDecoder(config.size ?? codecsNumbers.getU8Decoder(), (value)=>Number(value) === 1);\n}\nfunction getBooleanCodec(config = {}) {\n    return codecsCore.combineCodec(getBooleanEncoder(config), getBooleanDecoder(config));\n}\nfunction getBytesEncoder() {\n    return codecsCore.createEncoder({\n        getSizeFromValue: (value)=>value.length,\n        write: (value, bytes, offset)=>{\n            bytes.set(value, offset);\n            return offset + value.length;\n        }\n    });\n}\nfunction getBytesDecoder() {\n    return codecsCore.createDecoder({\n        read: (bytes, offset)=>{\n            const slice = bytes.slice(offset);\n            return [\n                slice,\n                offset + slice.length\n            ];\n        }\n    });\n}\nfunction getBytesCodec() {\n    return codecsCore.combineCodec(getBytesEncoder(), getBytesDecoder());\n}\nvar getBase16Decoder = ()=>codecsCore.createDecoder({\n        read (bytes, offset) {\n            const value = bytes.slice(offset).reduce((str, byte)=>str + byte.toString(16).padStart(2, \"0\"), \"\");\n            return [\n                value,\n                bytes.length\n            ];\n        }\n    });\nfunction getConstantEncoder(constant) {\n    return codecsCore.createEncoder({\n        fixedSize: constant.length,\n        write: (_, bytes, offset)=>{\n            bytes.set(constant, offset);\n            return offset + constant.length;\n        }\n    });\n}\nfunction getConstantDecoder(constant) {\n    return codecsCore.createDecoder({\n        fixedSize: constant.length,\n        read: (bytes, offset)=>{\n            const base16 = getBase16Decoder();\n            if (!codecsCore.containsBytes(bytes, constant, offset)) {\n                throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_CONSTANT, {\n                    constant,\n                    data: bytes,\n                    hexConstant: base16.decode(constant),\n                    hexData: base16.decode(bytes),\n                    offset\n                });\n            }\n            return [\n                void 0,\n                offset + constant.length\n            ];\n        }\n    });\n}\nfunction getConstantCodec(constant) {\n    return codecsCore.combineCodec(getConstantEncoder(constant), getConstantDecoder(constant));\n}\nfunction getTupleEncoder(items) {\n    const fixedSize = sumCodecSizes(items.map(getFixedSize));\n    const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n    return codecsCore.createEncoder({\n        ...fixedSize === null ? {\n            getSizeFromValue: (value)=>items.map((item, index)=>codecsCore.getEncodedSize(value[index], item)).reduce((all, one)=>all + one, 0),\n            maxSize\n        } : {\n            fixedSize\n        },\n        write: (value, bytes, offset)=>{\n            assertValidNumberOfItemsForCodec(\"tuple\", items.length, value.length);\n            items.forEach((item, index)=>{\n                offset = item.write(value[index], bytes, offset);\n            });\n            return offset;\n        }\n    });\n}\nfunction getTupleDecoder(items) {\n    const fixedSize = sumCodecSizes(items.map(getFixedSize));\n    const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n    return codecsCore.createDecoder({\n        ...fixedSize === null ? {\n            maxSize\n        } : {\n            fixedSize\n        },\n        read: (bytes, offset)=>{\n            const values = [];\n            items.forEach((item)=>{\n                const [newValue, newOffset] = item.read(bytes, offset);\n                values.push(newValue);\n                offset = newOffset;\n            });\n            return [\n                values,\n                offset\n            ];\n        }\n    });\n}\nfunction getTupleCodec(items) {\n    return codecsCore.combineCodec(getTupleEncoder(items), getTupleDecoder(items));\n}\nfunction getUnionEncoder(variants, getIndexFromValue) {\n    const fixedSize = getUnionFixedSize(variants);\n    const write = (variant, bytes, offset)=>{\n        const index = getIndexFromValue(variant);\n        assertValidVariantIndex(variants, index);\n        return variants[index].write(variant, bytes, offset);\n    };\n    if (fixedSize !== null) {\n        return codecsCore.createEncoder({\n            fixedSize,\n            write\n        });\n    }\n    const maxSize = getUnionMaxSize(variants);\n    return codecsCore.createEncoder({\n        ...maxSize !== null ? {\n            maxSize\n        } : {},\n        getSizeFromValue: (variant)=>{\n            const index = getIndexFromValue(variant);\n            assertValidVariantIndex(variants, index);\n            return codecsCore.getEncodedSize(variant, variants[index]);\n        },\n        write\n    });\n}\nfunction getUnionDecoder(variants, getIndexFromBytes) {\n    const fixedSize = getUnionFixedSize(variants);\n    const read = (bytes, offset)=>{\n        const index = getIndexFromBytes(bytes, offset);\n        assertValidVariantIndex(variants, index);\n        return variants[index].read(bytes, offset);\n    };\n    if (fixedSize !== null) {\n        return codecsCore.createDecoder({\n            fixedSize,\n            read\n        });\n    }\n    const maxSize = getUnionMaxSize(variants);\n    return codecsCore.createDecoder({\n        ...maxSize !== null ? {\n            maxSize\n        } : {},\n        read\n    });\n}\nfunction getUnionCodec(variants, getIndexFromValue, getIndexFromBytes) {\n    return codecsCore.combineCodec(getUnionEncoder(variants, getIndexFromValue), getUnionDecoder(variants, getIndexFromBytes));\n}\nfunction assertValidVariantIndex(variants, index) {\n    if (typeof variants[index] === \"undefined\") {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE, {\n            maxRange: variants.length - 1,\n            minRange: 0,\n            variant: index\n        });\n    }\n}\nfunction getUnionFixedSize(variants) {\n    if (variants.length === 0) return 0;\n    if (!codecsCore.isFixedSize(variants[0])) return null;\n    const variantSize = variants[0].fixedSize;\n    const sameSizedVariants = variants.every((variant)=>codecsCore.isFixedSize(variant) && variant.fixedSize === variantSize);\n    return sameSizedVariants ? variantSize : null;\n}\nfunction getUnionMaxSize(variants) {\n    return maxCodecSizes(variants.map((variant)=>getMaxSize(variant)));\n}\n// src/discriminated-union.ts\nfunction getDiscriminatedUnionEncoder(variants, config = {}) {\n    const discriminatorProperty = config.discriminator ?? \"__kind\";\n    const prefix = config.size ?? codecsNumbers.getU8Encoder();\n    return getUnionEncoder(variants.map(([, variant], index)=>codecsCore.transformEncoder(getTupleEncoder([\n            prefix,\n            variant\n        ]), (value)=>[\n                index,\n                value\n            ])), (value)=>getVariantDiscriminator(variants, value[discriminatorProperty]));\n}\nfunction getDiscriminatedUnionDecoder(variants, config = {}) {\n    const discriminatorProperty = config.discriminator ?? \"__kind\";\n    const prefix = config.size ?? codecsNumbers.getU8Decoder();\n    return getUnionDecoder(variants.map(([discriminator, variant])=>codecsCore.transformDecoder(getTupleDecoder([\n            prefix,\n            variant\n        ]), ([, value])=>({\n                [discriminatorProperty]: discriminator,\n                ...value\n            }))), (bytes, offset)=>Number(prefix.read(bytes, offset)[0]));\n}\nfunction getDiscriminatedUnionCodec(variants, config = {}) {\n    return codecsCore.combineCodec(getDiscriminatedUnionEncoder(variants, config), getDiscriminatedUnionDecoder(variants, config));\n}\nfunction getVariantDiscriminator(variants, discriminatorValue) {\n    const discriminator = variants.findIndex(([key])=>discriminatorValue === key);\n    if (discriminator < 0) {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT, {\n            value: discriminatorValue,\n            variants: variants.map(([key])=>key)\n        });\n    }\n    return discriminator;\n}\nvar getDataEnumEncoder = getDiscriminatedUnionEncoder;\nvar getDataEnumDecoder = getDiscriminatedUnionDecoder;\nvar getDataEnumCodec = getDiscriminatedUnionCodec;\n// src/enum-helpers.ts\nfunction getEnumStats(constructor) {\n    const numericalValues = [\n        ...new Set(Object.values(constructor).filter((v)=>typeof v === \"number\"))\n    ].sort();\n    const enumRecord = Object.fromEntries(Object.entries(constructor).slice(numericalValues.length));\n    const enumKeys = Object.keys(enumRecord);\n    const enumValues = Object.values(enumRecord);\n    const stringValues = [\n        .../* @__PURE__ */ new Set([\n            ...enumKeys,\n            ...enumValues.filter((v)=>typeof v === \"string\")\n        ])\n    ];\n    return {\n        enumKeys,\n        enumRecord,\n        enumValues,\n        numericalValues,\n        stringValues\n    };\n}\nfunction getEnumIndexFromVariant({ enumKeys, enumValues, variant }) {\n    const valueIndex = findLastIndex(enumValues, (value)=>value === variant);\n    if (valueIndex >= 0) return valueIndex;\n    return enumKeys.findIndex((key)=>key === variant);\n}\nfunction getEnumIndexFromDiscriminator({ discriminator, enumKeys, enumValues, useValuesAsDiscriminators }) {\n    if (!useValuesAsDiscriminators) {\n        return discriminator >= 0 && discriminator < enumKeys.length ? discriminator : -1;\n    }\n    return findLastIndex(enumValues, (value)=>value === discriminator);\n}\nfunction findLastIndex(array, predicate) {\n    let l = array.length;\n    while(l--){\n        if (predicate(array[l], l, array)) return l;\n    }\n    return -1;\n}\nfunction formatNumericalValues(values) {\n    if (values.length === 0) return \"\";\n    let range = [\n        values[0],\n        values[0]\n    ];\n    const ranges = [];\n    for(let index = 1; index < values.length; index++){\n        const value = values[index];\n        if (range[1] + 1 === value) {\n            range[1] = value;\n        } else {\n            ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);\n            range = [\n                value,\n                value\n            ];\n        }\n    }\n    ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);\n    return ranges.join(\", \");\n}\n// src/enum.ts\nfunction getEnumEncoder(constructor, config = {}) {\n    const prefix = config.size ?? codecsNumbers.getU8Encoder();\n    const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;\n    const { enumKeys, enumValues, numericalValues, stringValues } = getEnumStats(constructor);\n    if (useValuesAsDiscriminators && enumValues.some((value)=>typeof value === \"string\")) {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {\n            stringValues: enumValues.filter((v)=>typeof v === \"string\")\n        });\n    }\n    return codecsCore.transformEncoder(prefix, (variant)=>{\n        const index = getEnumIndexFromVariant({\n            enumKeys,\n            enumValues,\n            variant\n        });\n        if (index < 0) {\n            throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT, {\n                formattedNumericalValues: formatNumericalValues(numericalValues),\n                numericalValues,\n                stringValues,\n                variant\n            });\n        }\n        return useValuesAsDiscriminators ? enumValues[index] : index;\n    });\n}\nfunction getEnumDecoder(constructor, config = {}) {\n    const prefix = config.size ?? codecsNumbers.getU8Decoder();\n    const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;\n    const { enumKeys, enumValues, numericalValues } = getEnumStats(constructor);\n    if (useValuesAsDiscriminators && enumValues.some((value)=>typeof value === \"string\")) {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {\n            stringValues: enumValues.filter((v)=>typeof v === \"string\")\n        });\n    }\n    return codecsCore.transformDecoder(prefix, (value)=>{\n        const discriminator = Number(value);\n        const index = getEnumIndexFromDiscriminator({\n            discriminator,\n            enumKeys,\n            enumValues,\n            useValuesAsDiscriminators\n        });\n        if (index < 0) {\n            const validDiscriminators = useValuesAsDiscriminators ? numericalValues : [\n                ...Array(enumKeys.length).keys()\n            ];\n            throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n                discriminator,\n                formattedValidDiscriminators: formatNumericalValues(validDiscriminators),\n                validDiscriminators\n            });\n        }\n        return enumValues[index];\n    });\n}\nfunction getEnumCodec(constructor, config = {}) {\n    return codecsCore.combineCodec(getEnumEncoder(constructor, config), getEnumDecoder(constructor, config));\n}\nvar getScalarEnumEncoder = getEnumEncoder;\nvar getScalarEnumDecoder = getEnumDecoder;\nvar getScalarEnumCodec = getEnumCodec;\nfunction getHiddenPrefixEncoder(encoder, prefixedEncoders) {\n    return codecsCore.transformEncoder(getTupleEncoder([\n        ...prefixedEncoders,\n        encoder\n    ]), (value)=>[\n            ...prefixedEncoders.map(()=>void 0),\n            value\n        ]);\n}\nfunction getHiddenPrefixDecoder(decoder, prefixedDecoders) {\n    return codecsCore.transformDecoder(getTupleDecoder([\n        ...prefixedDecoders,\n        decoder\n    ]), (tuple)=>tuple[tuple.length - 1]);\n}\nfunction getHiddenPrefixCodec(codec, prefixedCodecs) {\n    return codecsCore.combineCodec(getHiddenPrefixEncoder(codec, prefixedCodecs), getHiddenPrefixDecoder(codec, prefixedCodecs));\n}\nfunction getHiddenSuffixEncoder(encoder, suffixedEncoders) {\n    return codecsCore.transformEncoder(getTupleEncoder([\n        encoder,\n        ...suffixedEncoders\n    ]), (value)=>[\n            value,\n            ...suffixedEncoders.map(()=>void 0)\n        ]);\n}\nfunction getHiddenSuffixDecoder(decoder, suffixedDecoders) {\n    return codecsCore.transformDecoder(getTupleDecoder([\n        decoder,\n        ...suffixedDecoders\n    ]), (tuple)=>tuple[0]);\n}\nfunction getHiddenSuffixCodec(codec, suffixedCodecs) {\n    return codecsCore.combineCodec(getHiddenSuffixEncoder(codec, suffixedCodecs), getHiddenSuffixDecoder(codec, suffixedCodecs));\n}\nfunction getMapEncoder(key, value, config = {}) {\n    return codecsCore.transformEncoder(getArrayEncoder(getTupleEncoder([\n        key,\n        value\n    ]), config), (map)=>[\n            ...map.entries()\n        ]);\n}\nfunction getMapDecoder(key, value, config = {}) {\n    return codecsCore.transformDecoder(getArrayDecoder(getTupleDecoder([\n        key,\n        value\n    ]), config), (entries)=>new Map(entries));\n}\nfunction getMapCodec(key, value, config = {}) {\n    return codecsCore.combineCodec(getMapEncoder(key, value, config), getMapDecoder(key, value, config));\n}\nfunction getUnitEncoder() {\n    return codecsCore.createEncoder({\n        fixedSize: 0,\n        write: (_value, _bytes, offset)=>offset\n    });\n}\nfunction getUnitDecoder() {\n    return codecsCore.createDecoder({\n        fixedSize: 0,\n        read: (_bytes, offset)=>[\n                void 0,\n                offset\n            ]\n    });\n}\nfunction getUnitCodec() {\n    return codecsCore.combineCodec(getUnitEncoder(), getUnitDecoder());\n}\n// src/nullable.ts\nfunction getNullableEncoder(item, config = {}) {\n    const prefix = (()=>{\n        if (config.prefix === null) {\n            return codecsCore.transformEncoder(getUnitEncoder(), (_boolean)=>void 0);\n        }\n        return getBooleanEncoder({\n            size: config.prefix ?? codecsNumbers.getU8Encoder()\n        });\n    })();\n    const noneValue = (()=>{\n        if (config.noneValue === \"zeroes\") {\n            codecsCore.assertIsFixedSize(item);\n            return codecsCore.fixEncoderSize(getUnitEncoder(), item.fixedSize);\n        }\n        if (!config.noneValue) {\n            return getUnitEncoder();\n        }\n        return getConstantEncoder(config.noneValue);\n    })();\n    return getUnionEncoder([\n        codecsCore.transformEncoder(getTupleEncoder([\n            prefix,\n            noneValue\n        ]), (_value)=>[\n                false,\n                void 0\n            ]),\n        codecsCore.transformEncoder(getTupleEncoder([\n            prefix,\n            item\n        ]), (value)=>[\n                true,\n                value\n            ])\n    ], (variant)=>Number(variant !== null));\n}\nfunction getNullableDecoder(item, config = {}) {\n    const prefix = (()=>{\n        if (config.prefix === null) {\n            return codecsCore.transformDecoder(getUnitDecoder(), ()=>false);\n        }\n        return getBooleanDecoder({\n            size: config.prefix ?? codecsNumbers.getU8Decoder()\n        });\n    })();\n    const noneValue = (()=>{\n        if (config.noneValue === \"zeroes\") {\n            codecsCore.assertIsFixedSize(item);\n            return codecsCore.fixDecoderSize(getUnitDecoder(), item.fixedSize);\n        }\n        if (!config.noneValue) {\n            return getUnitDecoder();\n        }\n        return getConstantDecoder(config.noneValue);\n    })();\n    return getUnionDecoder([\n        codecsCore.transformDecoder(getTupleDecoder([\n            prefix,\n            noneValue\n        ]), ()=>null),\n        codecsCore.transformDecoder(getTupleDecoder([\n            prefix,\n            item\n        ]), ([, value])=>value)\n    ], (bytes, offset)=>{\n        if (config.prefix === null && !config.noneValue) {\n            return Number(offset < bytes.length);\n        }\n        if (config.prefix === null && config.noneValue != null) {\n            const zeroValue = config.noneValue === \"zeroes\" ? new Uint8Array(noneValue.fixedSize).fill(0) : config.noneValue;\n            return codecsCore.containsBytes(bytes, zeroValue, offset) ? 0 : 1;\n        }\n        return Number(prefix.read(bytes, offset)[0]);\n    });\n}\nfunction getNullableCodec(item, config = {}) {\n    return codecsCore.combineCodec(getNullableEncoder(item, config), getNullableDecoder(item, config));\n}\nfunction getSetEncoder(item, config = {}) {\n    return codecsCore.transformEncoder(getArrayEncoder(item, config), (set)=>[\n            ...set\n        ]);\n}\nfunction getSetDecoder(item, config = {}) {\n    return codecsCore.transformDecoder(getArrayDecoder(item, config), (entries)=>new Set(entries));\n}\nfunction getSetCodec(item, config = {}) {\n    return codecsCore.combineCodec(getSetEncoder(item, config), getSetDecoder(item, config));\n}\nfunction getStructEncoder(fields) {\n    const fieldCodecs = fields.map(([, codec])=>codec);\n    const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n    const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n    return codecsCore.createEncoder({\n        ...fixedSize === null ? {\n            getSizeFromValue: (value)=>fields.map(([key, codec])=>codecsCore.getEncodedSize(value[key], codec)).reduce((all, one)=>all + one, 0),\n            maxSize\n        } : {\n            fixedSize\n        },\n        write: (struct, bytes, offset)=>{\n            fields.forEach(([key, codec])=>{\n                offset = codec.write(struct[key], bytes, offset);\n            });\n            return offset;\n        }\n    });\n}\nfunction getStructDecoder(fields) {\n    const fieldCodecs = fields.map(([, codec])=>codec);\n    const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n    const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n    return codecsCore.createDecoder({\n        ...fixedSize === null ? {\n            maxSize\n        } : {\n            fixedSize\n        },\n        read: (bytes, offset)=>{\n            const struct = {};\n            fields.forEach(([key, codec])=>{\n                const [value, newOffset] = codec.read(bytes, offset);\n                offset = newOffset;\n                struct[key] = value;\n            });\n            return [\n                struct,\n                offset\n            ];\n        }\n    });\n}\nfunction getStructCodec(fields) {\n    return codecsCore.combineCodec(getStructEncoder(fields), getStructDecoder(fields));\n}\nexports.assertValidNumberOfItemsForCodec = assertValidNumberOfItemsForCodec;\nexports.getArrayCodec = getArrayCodec;\nexports.getArrayDecoder = getArrayDecoder;\nexports.getArrayEncoder = getArrayEncoder;\nexports.getBitArrayCodec = getBitArrayCodec;\nexports.getBitArrayDecoder = getBitArrayDecoder;\nexports.getBitArrayEncoder = getBitArrayEncoder;\nexports.getBooleanCodec = getBooleanCodec;\nexports.getBooleanDecoder = getBooleanDecoder;\nexports.getBooleanEncoder = getBooleanEncoder;\nexports.getBytesCodec = getBytesCodec;\nexports.getBytesDecoder = getBytesDecoder;\nexports.getBytesEncoder = getBytesEncoder;\nexports.getConstantCodec = getConstantCodec;\nexports.getConstantDecoder = getConstantDecoder;\nexports.getConstantEncoder = getConstantEncoder;\nexports.getDataEnumCodec = getDataEnumCodec;\nexports.getDataEnumDecoder = getDataEnumDecoder;\nexports.getDataEnumEncoder = getDataEnumEncoder;\nexports.getDiscriminatedUnionCodec = getDiscriminatedUnionCodec;\nexports.getDiscriminatedUnionDecoder = getDiscriminatedUnionDecoder;\nexports.getDiscriminatedUnionEncoder = getDiscriminatedUnionEncoder;\nexports.getEnumCodec = getEnumCodec;\nexports.getEnumDecoder = getEnumDecoder;\nexports.getEnumEncoder = getEnumEncoder;\nexports.getHiddenPrefixCodec = getHiddenPrefixCodec;\nexports.getHiddenPrefixDecoder = getHiddenPrefixDecoder;\nexports.getHiddenPrefixEncoder = getHiddenPrefixEncoder;\nexports.getHiddenSuffixCodec = getHiddenSuffixCodec;\nexports.getHiddenSuffixDecoder = getHiddenSuffixDecoder;\nexports.getHiddenSuffixEncoder = getHiddenSuffixEncoder;\nexports.getMapCodec = getMapCodec;\nexports.getMapDecoder = getMapDecoder;\nexports.getMapEncoder = getMapEncoder;\nexports.getNullableCodec = getNullableCodec;\nexports.getNullableDecoder = getNullableDecoder;\nexports.getNullableEncoder = getNullableEncoder;\nexports.getScalarEnumCodec = getScalarEnumCodec;\nexports.getScalarEnumDecoder = getScalarEnumDecoder;\nexports.getScalarEnumEncoder = getScalarEnumEncoder;\nexports.getSetCodec = getSetCodec;\nexports.getSetDecoder = getSetDecoder;\nexports.getSetEncoder = getSetEncoder;\nexports.getStructCodec = getStructCodec;\nexports.getStructDecoder = getStructDecoder;\nexports.getStructEncoder = getStructEncoder;\nexports.getTupleCodec = getTupleCodec;\nexports.getTupleDecoder = getTupleDecoder;\nexports.getTupleEncoder = getTupleEncoder;\nexports.getUnionCodec = getUnionCodec;\nexports.getUnionDecoder = getUnionDecoder;\nexports.getUnionEncoder = getUnionEncoder;\nexports.getUnitCodec = getUnitCodec;\nexports.getUnitDecoder = getUnitDecoder;\nexports.getUnitEncoder = getUnitEncoder; //# sourceMappingURL=index.node.cjs.map\n //# sourceMappingURL=index.node.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-data-structures/dist/index.node.cjs\n");

/***/ })

};
;