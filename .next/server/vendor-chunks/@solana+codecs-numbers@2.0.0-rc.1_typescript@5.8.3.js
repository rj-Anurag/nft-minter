"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana+codecs-numbers@2.0.0-rc.1_typescript@5.8.3";
exports.ids = ["vendor-chunks/@solana+codecs-numbers@2.0.0-rc.1_typescript@5.8.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@solana+codecs-numbers@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-numbers/dist/index.node.cjs":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solana+codecs-numbers@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-numbers/dist/index.node.cjs ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar errors = __webpack_require__(/*! @solana/errors */ \"(ssr)/./node_modules/.pnpm/@solana+errors@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/errors/dist/index.node.cjs\");\nvar codecsCore = __webpack_require__(/*! @solana/codecs-core */ \"(ssr)/./node_modules/.pnpm/@solana+codecs-core@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-core/dist/index.node.cjs\");\n// src/assertions.ts\nfunction assertNumberIsBetweenForCodec(codecDescription, min, max, value) {\n    if (value < min || value > max) {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {\n            codecDescription,\n            max,\n            min,\n            value\n        });\n    }\n}\n// src/common.ts\nvar Endian = /* @__PURE__ */ ((Endian2)=>{\n    Endian2[Endian2[\"Little\"] = 0] = \"Little\";\n    Endian2[Endian2[\"Big\"] = 1] = \"Big\";\n    return Endian2;\n})(Endian || {});\nfunction isLittleEndian(config) {\n    return config?.endian === 1 /* Big */  ? false : true;\n}\nfunction numberEncoderFactory(input) {\n    return codecsCore.createEncoder({\n        fixedSize: input.size,\n        write (value, bytes, offset) {\n            if (input.range) {\n                assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);\n            }\n            const arrayBuffer = new ArrayBuffer(input.size);\n            input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));\n            bytes.set(new Uint8Array(arrayBuffer), offset);\n            return offset + input.size;\n        }\n    });\n}\nfunction numberDecoderFactory(input) {\n    return codecsCore.createDecoder({\n        fixedSize: input.size,\n        read (bytes, offset = 0) {\n            codecsCore.assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);\n            codecsCore.assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);\n            const view = new DataView(toArrayBuffer(bytes, offset, input.size));\n            return [\n                input.get(view, isLittleEndian(input.config)),\n                offset + input.size\n            ];\n        }\n    });\n}\nfunction toArrayBuffer(bytes, offset, length) {\n    const bytesOffset = bytes.byteOffset + (offset ?? 0);\n    const bytesLength = length ?? bytes.byteLength;\n    return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);\n}\n// src/f32.ts\nvar getF32Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"f32\",\n        set: (view, value, le)=>view.setFloat32(0, Number(value), le),\n        size: 4\n    });\nvar getF32Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>view.getFloat32(0, le),\n        name: \"f32\",\n        size: 4\n    });\nvar getF32Codec = (config = {})=>codecsCore.combineCodec(getF32Encoder(config), getF32Decoder(config));\nvar getF64Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"f64\",\n        set: (view, value, le)=>view.setFloat64(0, Number(value), le),\n        size: 8\n    });\nvar getF64Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>view.getFloat64(0, le),\n        name: \"f64\",\n        size: 8\n    });\nvar getF64Codec = (config = {})=>codecsCore.combineCodec(getF64Encoder(config), getF64Decoder(config));\nvar getI128Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"i128\",\n        range: [\n            -BigInt(\"0x7fffffffffffffffffffffffffffffff\") - 1n,\n            BigInt(\"0x7fffffffffffffffffffffffffffffff\")\n        ],\n        set: (view, value, le)=>{\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const rightMask = 0xffffffffffffffffn;\n            view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);\n            view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n        },\n        size: 16\n    });\nvar getI128Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>{\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const left = view.getBigInt64(leftOffset, le);\n            const right = view.getBigUint64(rightOffset, le);\n            return (left << 64n) + right;\n        },\n        name: \"i128\",\n        size: 16\n    });\nvar getI128Codec = (config = {})=>codecsCore.combineCodec(getI128Encoder(config), getI128Decoder(config));\nvar getI16Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"i16\",\n        range: [\n            -Number(\"0x7fff\") - 1,\n            Number(\"0x7fff\")\n        ],\n        set: (view, value, le)=>view.setInt16(0, Number(value), le),\n        size: 2\n    });\nvar getI16Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>view.getInt16(0, le),\n        name: \"i16\",\n        size: 2\n    });\nvar getI16Codec = (config = {})=>codecsCore.combineCodec(getI16Encoder(config), getI16Decoder(config));\nvar getI32Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"i32\",\n        range: [\n            -Number(\"0x7fffffff\") - 1,\n            Number(\"0x7fffffff\")\n        ],\n        set: (view, value, le)=>view.setInt32(0, Number(value), le),\n        size: 4\n    });\nvar getI32Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>view.getInt32(0, le),\n        name: \"i32\",\n        size: 4\n    });\nvar getI32Codec = (config = {})=>codecsCore.combineCodec(getI32Encoder(config), getI32Decoder(config));\nvar getI64Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"i64\",\n        range: [\n            -BigInt(\"0x7fffffffffffffff\") - 1n,\n            BigInt(\"0x7fffffffffffffff\")\n        ],\n        set: (view, value, le)=>view.setBigInt64(0, BigInt(value), le),\n        size: 8\n    });\nvar getI64Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>view.getBigInt64(0, le),\n        name: \"i64\",\n        size: 8\n    });\nvar getI64Codec = (config = {})=>codecsCore.combineCodec(getI64Encoder(config), getI64Decoder(config));\nvar getI8Encoder = ()=>numberEncoderFactory({\n        name: \"i8\",\n        range: [\n            -Number(\"0x7f\") - 1,\n            Number(\"0x7f\")\n        ],\n        set: (view, value)=>view.setInt8(0, Number(value)),\n        size: 1\n    });\nvar getI8Decoder = ()=>numberDecoderFactory({\n        get: (view)=>view.getInt8(0),\n        name: \"i8\",\n        size: 1\n    });\nvar getI8Codec = ()=>codecsCore.combineCodec(getI8Encoder(), getI8Decoder());\nvar getShortU16Encoder = ()=>codecsCore.createEncoder({\n        getSizeFromValue: (value)=>{\n            if (value <= 127) return 1;\n            if (value <= 16383) return 2;\n            return 3;\n        },\n        maxSize: 3,\n        write: (value, bytes, offset)=>{\n            assertNumberIsBetweenForCodec(\"shortU16\", 0, 65535, value);\n            const shortU16Bytes = [\n                0\n            ];\n            for(let ii = 0;; ii += 1){\n                const alignedValue = Number(value) >> ii * 7;\n                if (alignedValue === 0) {\n                    break;\n                }\n                const nextSevenBits = 127 & alignedValue;\n                shortU16Bytes[ii] = nextSevenBits;\n                if (ii > 0) {\n                    shortU16Bytes[ii - 1] |= 128;\n                }\n            }\n            bytes.set(shortU16Bytes, offset);\n            return offset + shortU16Bytes.length;\n        }\n    });\nvar getShortU16Decoder = ()=>codecsCore.createDecoder({\n        maxSize: 3,\n        read: (bytes, offset)=>{\n            let value = 0;\n            let byteCount = 0;\n            while(++byteCount){\n                const byteIndex = byteCount - 1;\n                const currentByte = bytes[offset + byteIndex];\n                const nextSevenBits = 127 & currentByte;\n                value |= nextSevenBits << byteIndex * 7;\n                if ((currentByte & 128) === 0) {\n                    break;\n                }\n            }\n            return [\n                value,\n                offset + byteCount\n            ];\n        }\n    });\nvar getShortU16Codec = ()=>codecsCore.combineCodec(getShortU16Encoder(), getShortU16Decoder());\nvar getU128Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"u128\",\n        range: [\n            0n,\n            BigInt(\"0xffffffffffffffffffffffffffffffff\")\n        ],\n        set: (view, value, le)=>{\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const rightMask = 0xffffffffffffffffn;\n            view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);\n            view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n        },\n        size: 16\n    });\nvar getU128Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>{\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const left = view.getBigUint64(leftOffset, le);\n            const right = view.getBigUint64(rightOffset, le);\n            return (left << 64n) + right;\n        },\n        name: \"u128\",\n        size: 16\n    });\nvar getU128Codec = (config = {})=>codecsCore.combineCodec(getU128Encoder(config), getU128Decoder(config));\nvar getU16Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"u16\",\n        range: [\n            0,\n            Number(\"0xffff\")\n        ],\n        set: (view, value, le)=>view.setUint16(0, Number(value), le),\n        size: 2\n    });\nvar getU16Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>view.getUint16(0, le),\n        name: \"u16\",\n        size: 2\n    });\nvar getU16Codec = (config = {})=>codecsCore.combineCodec(getU16Encoder(config), getU16Decoder(config));\nvar getU32Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"u32\",\n        range: [\n            0,\n            Number(\"0xffffffff\")\n        ],\n        set: (view, value, le)=>view.setUint32(0, Number(value), le),\n        size: 4\n    });\nvar getU32Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>view.getUint32(0, le),\n        name: \"u32\",\n        size: 4\n    });\nvar getU32Codec = (config = {})=>codecsCore.combineCodec(getU32Encoder(config), getU32Decoder(config));\nvar getU64Encoder = (config = {})=>numberEncoderFactory({\n        config,\n        name: \"u64\",\n        range: [\n            0n,\n            BigInt(\"0xffffffffffffffff\")\n        ],\n        set: (view, value, le)=>view.setBigUint64(0, BigInt(value), le),\n        size: 8\n    });\nvar getU64Decoder = (config = {})=>numberDecoderFactory({\n        config,\n        get: (view, le)=>view.getBigUint64(0, le),\n        name: \"u64\",\n        size: 8\n    });\nvar getU64Codec = (config = {})=>codecsCore.combineCodec(getU64Encoder(config), getU64Decoder(config));\nvar getU8Encoder = ()=>numberEncoderFactory({\n        name: \"u8\",\n        range: [\n            0,\n            Number(\"0xff\")\n        ],\n        set: (view, value)=>view.setUint8(0, Number(value)),\n        size: 1\n    });\nvar getU8Decoder = ()=>numberDecoderFactory({\n        get: (view)=>view.getUint8(0),\n        name: \"u8\",\n        size: 1\n    });\nvar getU8Codec = ()=>codecsCore.combineCodec(getU8Encoder(), getU8Decoder());\nexports.Endian = Endian;\nexports.assertNumberIsBetweenForCodec = assertNumberIsBetweenForCodec;\nexports.getF32Codec = getF32Codec;\nexports.getF32Decoder = getF32Decoder;\nexports.getF32Encoder = getF32Encoder;\nexports.getF64Codec = getF64Codec;\nexports.getF64Decoder = getF64Decoder;\nexports.getF64Encoder = getF64Encoder;\nexports.getI128Codec = getI128Codec;\nexports.getI128Decoder = getI128Decoder;\nexports.getI128Encoder = getI128Encoder;\nexports.getI16Codec = getI16Codec;\nexports.getI16Decoder = getI16Decoder;\nexports.getI16Encoder = getI16Encoder;\nexports.getI32Codec = getI32Codec;\nexports.getI32Decoder = getI32Decoder;\nexports.getI32Encoder = getI32Encoder;\nexports.getI64Codec = getI64Codec;\nexports.getI64Decoder = getI64Decoder;\nexports.getI64Encoder = getI64Encoder;\nexports.getI8Codec = getI8Codec;\nexports.getI8Decoder = getI8Decoder;\nexports.getI8Encoder = getI8Encoder;\nexports.getShortU16Codec = getShortU16Codec;\nexports.getShortU16Decoder = getShortU16Decoder;\nexports.getShortU16Encoder = getShortU16Encoder;\nexports.getU128Codec = getU128Codec;\nexports.getU128Decoder = getU128Decoder;\nexports.getU128Encoder = getU128Encoder;\nexports.getU16Codec = getU16Codec;\nexports.getU16Decoder = getU16Decoder;\nexports.getU16Encoder = getU16Encoder;\nexports.getU32Codec = getU32Codec;\nexports.getU32Decoder = getU32Decoder;\nexports.getU32Encoder = getU32Encoder;\nexports.getU64Codec = getU64Codec;\nexports.getU64Decoder = getU64Decoder;\nexports.getU64Encoder = getU64Encoder;\nexports.getU8Codec = getU8Codec;\nexports.getU8Decoder = getU8Decoder;\nexports.getU8Encoder = getU8Encoder; //# sourceMappingURL=index.node.cjs.map\n //# sourceMappingURL=index.node.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solana+codecs-numbers@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-numbers/dist/index.node.cjs\n");

/***/ })

};
;