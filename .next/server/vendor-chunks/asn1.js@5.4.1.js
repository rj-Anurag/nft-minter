"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/asn1.js@5.4.1";
exports.ids = ["vendor-chunks/asn1.js@5.4.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/api.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/api.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst encoders = __webpack_require__(/*! ./encoders */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/index.js\");\nconst decoders = __webpack_require__(/*! ./decoders */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/index.js\");\nconst inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nconst api = exports;\napi.define = function define(name, body) {\n    return new Entity(name, body);\n};\nfunction Entity(name, body) {\n    this.name = name;\n    this.body = body;\n    this.decoders = {};\n    this.encoders = {};\n}\nEntity.prototype._createNamed = function createNamed(Base) {\n    const name = this.name;\n    function Generated(entity) {\n        this._initNamed(entity, name);\n    }\n    inherits(Generated, Base);\n    Generated.prototype._initNamed = function _initNamed(entity, name) {\n        Base.call(this, entity, name);\n    };\n    return new Generated(this);\n};\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n    enc = enc || \"der\";\n    // Lazily create decoder\n    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);\n    return this.decoders[enc];\n};\nEntity.prototype.decode = function decode(data, enc, options) {\n    return this._getDecoder(enc).decode(data, options);\n};\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n    enc = enc || \"der\";\n    // Lazily create encoder\n    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);\n    return this.encoders[enc];\n};\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n    return this._getEncoder(enc).encode(data, reporter);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYXNuMS5qc0A1LjQuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9hcGkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxXQUFXQyxtQkFBT0EsQ0FBQztBQUN6QixNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUN6QixNQUFNRSxXQUFXRixtQkFBT0EsQ0FBQztBQUV6QixNQUFNRyxNQUFNQztBQUVaRCxJQUFJRSxNQUFNLEdBQUcsU0FBU0EsT0FBT0MsSUFBSSxFQUFFQyxJQUFJO0lBQ3JDLE9BQU8sSUFBSUMsT0FBT0YsTUFBTUM7QUFDMUI7QUFFQSxTQUFTQyxPQUFPRixJQUFJLEVBQUVDLElBQUk7SUFDeEIsSUFBSSxDQUFDRCxJQUFJLEdBQUdBO0lBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUdBO0lBRVosSUFBSSxDQUFDTixRQUFRLEdBQUcsQ0FBQztJQUNqQixJQUFJLENBQUNGLFFBQVEsR0FBRyxDQUFDO0FBQ25CO0FBRUFTLE9BQU9DLFNBQVMsQ0FBQ0MsWUFBWSxHQUFHLFNBQVNDLFlBQVlDLElBQUk7SUFDdkQsTUFBTU4sT0FBTyxJQUFJLENBQUNBLElBQUk7SUFFdEIsU0FBU08sVUFBVUMsTUFBTTtRQUN2QixJQUFJLENBQUNDLFVBQVUsQ0FBQ0QsUUFBUVI7SUFDMUI7SUFDQUosU0FBU1csV0FBV0Q7SUFDcEJDLFVBQVVKLFNBQVMsQ0FBQ00sVUFBVSxHQUFHLFNBQVNBLFdBQVdELE1BQU0sRUFBRVIsSUFBSTtRQUMvRE0sS0FBS0ksSUFBSSxDQUFDLElBQUksRUFBRUYsUUFBUVI7SUFDMUI7SUFFQSxPQUFPLElBQUlPLFVBQVUsSUFBSTtBQUMzQjtBQUVBTCxPQUFPQyxTQUFTLENBQUNRLFdBQVcsR0FBRyxTQUFTQSxZQUFZQyxHQUFHO0lBQ3JEQSxNQUFNQSxPQUFPO0lBQ2Isd0JBQXdCO0lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUNqQixRQUFRLENBQUNrQixjQUFjLENBQUNELE1BQ2hDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2lCLElBQUksR0FBRyxJQUFJLENBQUNSLFlBQVksQ0FBQ1QsUUFBUSxDQUFDaUIsSUFBSTtJQUN0RCxPQUFPLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2lCLElBQUk7QUFDM0I7QUFFQVYsT0FBT0MsU0FBUyxDQUFDVyxNQUFNLEdBQUcsU0FBU0EsT0FBT0MsSUFBSSxFQUFFSCxHQUFHLEVBQUVJLE9BQU87SUFDMUQsT0FBTyxJQUFJLENBQUNMLFdBQVcsQ0FBQ0MsS0FBS0UsTUFBTSxDQUFDQyxNQUFNQztBQUM1QztBQUVBZCxPQUFPQyxTQUFTLENBQUNjLFdBQVcsR0FBRyxTQUFTQSxZQUFZTCxHQUFHO0lBQ3JEQSxNQUFNQSxPQUFPO0lBQ2Isd0JBQXdCO0lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUNuQixRQUFRLENBQUNvQixjQUFjLENBQUNELE1BQ2hDLElBQUksQ0FBQ25CLFFBQVEsQ0FBQ21CLElBQUksR0FBRyxJQUFJLENBQUNSLFlBQVksQ0FBQ1gsUUFBUSxDQUFDbUIsSUFBSTtJQUN0RCxPQUFPLElBQUksQ0FBQ25CLFFBQVEsQ0FBQ21CLElBQUk7QUFDM0I7QUFFQVYsT0FBT0MsU0FBUyxDQUFDZSxNQUFNLEdBQUcsU0FBU0EsT0FBT0gsSUFBSSxFQUFFSCxHQUFHLEVBQUUsWUFBWSxHQUFHTyxRQUFRO0lBQzFFLE9BQU8sSUFBSSxDQUFDRixXQUFXLENBQUNMLEtBQUtNLE1BQU0sQ0FBQ0gsTUFBTUk7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FzbjEuanNANS40LjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYXBpLmpzPzZhMDYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlbmNvZGVycyA9IHJlcXVpcmUoJy4vZW5jb2RlcnMnKTtcbmNvbnN0IGRlY29kZXJzID0gcmVxdWlyZSgnLi9kZWNvZGVycycpO1xuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5jb25zdCBhcGkgPSBleHBvcnRzO1xuXG5hcGkuZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG5hbWUsIGJvZHkpIHtcbiAgcmV0dXJuIG5ldyBFbnRpdHkobmFtZSwgYm9keSk7XG59O1xuXG5mdW5jdGlvbiBFbnRpdHkobmFtZSwgYm9keSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmJvZHkgPSBib2R5O1xuXG4gIHRoaXMuZGVjb2RlcnMgPSB7fTtcbiAgdGhpcy5lbmNvZGVycyA9IHt9O1xufVxuXG5FbnRpdHkucHJvdG90eXBlLl9jcmVhdGVOYW1lZCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkKEJhc2UpIHtcbiAgY29uc3QgbmFtZSA9IHRoaXMubmFtZTtcblxuICBmdW5jdGlvbiBHZW5lcmF0ZWQoZW50aXR5KSB7XG4gICAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSwgbmFtZSk7XG4gIH1cbiAgaW5oZXJpdHMoR2VuZXJhdGVkLCBCYXNlKTtcbiAgR2VuZXJhdGVkLnByb3RvdHlwZS5faW5pdE5hbWVkID0gZnVuY3Rpb24gX2luaXROYW1lZChlbnRpdHksIG5hbWUpIHtcbiAgICBCYXNlLmNhbGwodGhpcywgZW50aXR5LCBuYW1lKTtcbiAgfTtcblxuICByZXR1cm4gbmV3IEdlbmVyYXRlZCh0aGlzKTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2dldERlY29kZXIgPSBmdW5jdGlvbiBfZ2V0RGVjb2RlcihlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICdkZXInO1xuICAvLyBMYXppbHkgY3JlYXRlIGRlY29kZXJcbiAgaWYgKCF0aGlzLmRlY29kZXJzLmhhc093blByb3BlcnR5KGVuYykpXG4gICAgdGhpcy5kZWNvZGVyc1tlbmNdID0gdGhpcy5fY3JlYXRlTmFtZWQoZGVjb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmRlY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuX2dldERlY29kZXIoZW5jKS5kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXRFbmNvZGVyID0gZnVuY3Rpb24gX2dldEVuY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBlbmNvZGVyXG4gIGlmICghdGhpcy5lbmNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZW5jb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGVuY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5lbmNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgZW5jLCAvKiBpbnRlcm5hbCAqLyByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy5fZ2V0RW5jb2RlcihlbmMpLmVuY29kZShkYXRhLCByZXBvcnRlcik7XG59O1xuIl0sIm5hbWVzIjpbImVuY29kZXJzIiwicmVxdWlyZSIsImRlY29kZXJzIiwiaW5oZXJpdHMiLCJhcGkiLCJleHBvcnRzIiwiZGVmaW5lIiwibmFtZSIsImJvZHkiLCJFbnRpdHkiLCJwcm90b3R5cGUiLCJfY3JlYXRlTmFtZWQiLCJjcmVhdGVOYW1lZCIsIkJhc2UiLCJHZW5lcmF0ZWQiLCJlbnRpdHkiLCJfaW5pdE5hbWVkIiwiY2FsbCIsIl9nZXREZWNvZGVyIiwiZW5jIiwiaGFzT3duUHJvcGVydHkiLCJkZWNvZGUiLCJkYXRhIiwib3B0aW9ucyIsIl9nZXRFbmNvZGVyIiwiZW5jb2RlIiwicmVwb3J0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/buffer.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/buffer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nconst Reporter = (__webpack_require__(/*! ../base/reporter */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/reporter.js\").Reporter);\nconst Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/.pnpm/safer-buffer@2.1.2/node_modules/safer-buffer/safer.js\").Buffer);\nfunction DecoderBuffer(base, options) {\n    Reporter.call(this, options);\n    if (!Buffer.isBuffer(base)) {\n        this.error(\"Input not Buffer\");\n        return;\n    }\n    this.base = base;\n    this.offset = 0;\n    this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\nDecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\n    if (data instanceof DecoderBuffer) {\n        return true;\n    }\n    // Or accept compatible API\n    const isCompatible = typeof data === \"object\" && Buffer.isBuffer(data.base) && data.constructor.name === \"DecoderBuffer\" && typeof data.offset === \"number\" && typeof data.length === \"number\" && typeof data.save === \"function\" && typeof data.restore === \"function\" && typeof data.isEmpty === \"function\" && typeof data.readUInt8 === \"function\" && typeof data.skip === \"function\" && typeof data.raw === \"function\";\n    return isCompatible;\n};\nDecoderBuffer.prototype.save = function save() {\n    return {\n        offset: this.offset,\n        reporter: Reporter.prototype.save.call(this)\n    };\n};\nDecoderBuffer.prototype.restore = function restore(save) {\n    // Return skipped data\n    const res = new DecoderBuffer(this.base);\n    res.offset = save.offset;\n    res.length = this.offset;\n    this.offset = save.offset;\n    Reporter.prototype.restore.call(this, save.reporter);\n    return res;\n};\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n    return this.offset === this.length;\n};\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);\n    else return this.error(fail || \"DecoderBuffer overrun\");\n};\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n    if (!(this.offset + bytes <= this.length)) return this.error(fail || \"DecoderBuffer overrun\");\n    const res = new DecoderBuffer(this.base);\n    // Share reporter state\n    res._reporterState = this._reporterState;\n    res.offset = this.offset;\n    res.length = this.offset + bytes;\n    this.offset += bytes;\n    return res;\n};\nDecoderBuffer.prototype.raw = function raw(save) {\n    return this.base.slice(save ? save.offset : this.offset, this.length);\n};\nfunction EncoderBuffer(value, reporter) {\n    if (Array.isArray(value)) {\n        this.length = 0;\n        this.value = value.map(function(item) {\n            if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);\n            this.length += item.length;\n            return item;\n        }, this);\n    } else if (typeof value === \"number\") {\n        if (!(0 <= value && value <= 0xff)) return reporter.error(\"non-byte EncoderBuffer value\");\n        this.value = value;\n        this.length = 1;\n    } else if (typeof value === \"string\") {\n        this.value = value;\n        this.length = Buffer.byteLength(value);\n    } else if (Buffer.isBuffer(value)) {\n        this.value = value;\n        this.length = value.length;\n    } else {\n        return reporter.error(\"Unsupported type: \" + typeof value);\n    }\n}\nexports.EncoderBuffer = EncoderBuffer;\nEncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {\n    if (data instanceof EncoderBuffer) {\n        return true;\n    }\n    // Or accept compatible API\n    const isCompatible = typeof data === \"object\" && data.constructor.name === \"EncoderBuffer\" && typeof data.length === \"number\" && typeof data.join === \"function\";\n    return isCompatible;\n};\nEncoderBuffer.prototype.join = function join(out, offset) {\n    if (!out) out = Buffer.alloc(this.length);\n    if (!offset) offset = 0;\n    if (this.length === 0) return out;\n    if (Array.isArray(this.value)) {\n        this.value.forEach(function(item) {\n            item.join(out, offset);\n            offset += item.length;\n        });\n    } else {\n        if (typeof this.value === \"number\") out[offset] = this.value;\n        else if (typeof this.value === \"string\") out.write(this.value, offset);\n        else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);\n        offset += this.length;\n    }\n    return out;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/node.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/node.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Reporter = (__webpack_require__(/*! ../base/reporter */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/reporter.js\").Reporter);\nconst EncoderBuffer = (__webpack_require__(/*! ../base/buffer */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/buffer.js\").EncoderBuffer);\nconst DecoderBuffer = (__webpack_require__(/*! ../base/buffer */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/buffer.js\").DecoderBuffer);\nconst assert = __webpack_require__(/*! minimalistic-assert */ \"(ssr)/./node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js\");\n// Supported tags\nconst tags = [\n    \"seq\",\n    \"seqof\",\n    \"set\",\n    \"setof\",\n    \"objid\",\n    \"bool\",\n    \"gentime\",\n    \"utctime\",\n    \"null_\",\n    \"enum\",\n    \"int\",\n    \"objDesc\",\n    \"bitstr\",\n    \"bmpstr\",\n    \"charstr\",\n    \"genstr\",\n    \"graphstr\",\n    \"ia5str\",\n    \"iso646str\",\n    \"numstr\",\n    \"octstr\",\n    \"printstr\",\n    \"t61str\",\n    \"unistr\",\n    \"utf8str\",\n    \"videostr\"\n];\n// Public methods list\nconst methods = [\n    \"key\",\n    \"obj\",\n    \"use\",\n    \"optional\",\n    \"explicit\",\n    \"implicit\",\n    \"def\",\n    \"choice\",\n    \"any\",\n    \"contains\"\n].concat(tags);\n// Overrided methods list\nconst overrided = [\n    \"_peekTag\",\n    \"_decodeTag\",\n    \"_use\",\n    \"_decodeStr\",\n    \"_decodeObjid\",\n    \"_decodeTime\",\n    \"_decodeNull\",\n    \"_decodeInt\",\n    \"_decodeBool\",\n    \"_decodeList\",\n    \"_encodeComposite\",\n    \"_encodeStr\",\n    \"_encodeObjid\",\n    \"_encodeTime\",\n    \"_encodeNull\",\n    \"_encodeInt\",\n    \"_encodeBool\"\n];\nfunction Node(enc, parent, name) {\n    const state = {};\n    this._baseState = state;\n    state.name = name;\n    state.enc = enc;\n    state.parent = parent || null;\n    state.children = null;\n    // State\n    state.tag = null;\n    state.args = null;\n    state.reverseArgs = null;\n    state.choice = null;\n    state.optional = false;\n    state.any = false;\n    state.obj = false;\n    state.use = null;\n    state.useDecoder = null;\n    state.key = null;\n    state[\"default\"] = null;\n    state.explicit = null;\n    state.implicit = null;\n    state.contains = null;\n    // Should create new instance on each method\n    if (!state.parent) {\n        state.children = [];\n        this._wrap();\n    }\n}\nmodule.exports = Node;\nconst stateProps = [\n    \"enc\",\n    \"parent\",\n    \"children\",\n    \"tag\",\n    \"args\",\n    \"reverseArgs\",\n    \"choice\",\n    \"optional\",\n    \"any\",\n    \"obj\",\n    \"use\",\n    \"alteredUse\",\n    \"key\",\n    \"default\",\n    \"explicit\",\n    \"implicit\",\n    \"contains\"\n];\nNode.prototype.clone = function clone() {\n    const state = this._baseState;\n    const cstate = {};\n    stateProps.forEach(function(prop) {\n        cstate[prop] = state[prop];\n    });\n    const res = new this.constructor(cstate.parent);\n    res._baseState = cstate;\n    return res;\n};\nNode.prototype._wrap = function wrap() {\n    const state = this._baseState;\n    methods.forEach(function(method) {\n        this[method] = function _wrappedMethod() {\n            const clone = new this.constructor(this);\n            state.children.push(clone);\n            return clone[method].apply(clone, arguments);\n        };\n    }, this);\n};\nNode.prototype._init = function init(body) {\n    const state = this._baseState;\n    assert(state.parent === null);\n    body.call(this);\n    // Filter children\n    state.children = state.children.filter(function(child) {\n        return child._baseState.parent === this;\n    }, this);\n    assert.equal(state.children.length, 1, \"Root node can have only one child\");\n};\nNode.prototype._useArgs = function useArgs(args) {\n    const state = this._baseState;\n    // Filter children and args\n    const children = args.filter(function(arg) {\n        return arg instanceof this.constructor;\n    }, this);\n    args = args.filter(function(arg) {\n        return !(arg instanceof this.constructor);\n    }, this);\n    if (children.length !== 0) {\n        assert(state.children === null);\n        state.children = children;\n        // Replace parent to maintain backward link\n        children.forEach(function(child) {\n            child._baseState.parent = this;\n        }, this);\n    }\n    if (args.length !== 0) {\n        assert(state.args === null);\n        state.args = args;\n        state.reverseArgs = args.map(function(arg) {\n            if (typeof arg !== \"object\" || arg.constructor !== Object) return arg;\n            const res = {};\n            Object.keys(arg).forEach(function(key) {\n                if (key == (key | 0)) key |= 0;\n                const value = arg[key];\n                res[value] = key;\n            });\n            return res;\n        });\n    }\n};\n//\n// Overrided methods\n//\noverrided.forEach(function(method) {\n    Node.prototype[method] = function _overrided() {\n        const state = this._baseState;\n        throw new Error(method + \" not implemented for encoding: \" + state.enc);\n    };\n});\n//\n// Public methods\n//\ntags.forEach(function(tag) {\n    Node.prototype[tag] = function _tagMethod() {\n        const state = this._baseState;\n        const args = Array.prototype.slice.call(arguments);\n        assert(state.tag === null);\n        state.tag = tag;\n        this._useArgs(args);\n        return this;\n    };\n});\nNode.prototype.use = function use(item) {\n    assert(item);\n    const state = this._baseState;\n    assert(state.use === null);\n    state.use = item;\n    return this;\n};\nNode.prototype.optional = function optional() {\n    const state = this._baseState;\n    state.optional = true;\n    return this;\n};\nNode.prototype.def = function def(val) {\n    const state = this._baseState;\n    assert(state[\"default\"] === null);\n    state[\"default\"] = val;\n    state.optional = true;\n    return this;\n};\nNode.prototype.explicit = function explicit(num) {\n    const state = this._baseState;\n    assert(state.explicit === null && state.implicit === null);\n    state.explicit = num;\n    return this;\n};\nNode.prototype.implicit = function implicit(num) {\n    const state = this._baseState;\n    assert(state.explicit === null && state.implicit === null);\n    state.implicit = num;\n    return this;\n};\nNode.prototype.obj = function obj() {\n    const state = this._baseState;\n    const args = Array.prototype.slice.call(arguments);\n    state.obj = true;\n    if (args.length !== 0) this._useArgs(args);\n    return this;\n};\nNode.prototype.key = function key(newKey) {\n    const state = this._baseState;\n    assert(state.key === null);\n    state.key = newKey;\n    return this;\n};\nNode.prototype.any = function any() {\n    const state = this._baseState;\n    state.any = true;\n    return this;\n};\nNode.prototype.choice = function choice(obj) {\n    const state = this._baseState;\n    assert(state.choice === null);\n    state.choice = obj;\n    this._useArgs(Object.keys(obj).map(function(key) {\n        return obj[key];\n    }));\n    return this;\n};\nNode.prototype.contains = function contains(item) {\n    const state = this._baseState;\n    assert(state.use === null);\n    state.contains = item;\n    return this;\n};\n//\n// Decoding\n//\nNode.prototype._decode = function decode(input, options) {\n    const state = this._baseState;\n    // Decode root node\n    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));\n    let result = state[\"default\"];\n    let present = true;\n    let prevKey = null;\n    if (state.key !== null) prevKey = input.enterKey(state.key);\n    // Check if tag is there\n    if (state.optional) {\n        let tag = null;\n        if (state.explicit !== null) tag = state.explicit;\n        else if (state.implicit !== null) tag = state.implicit;\n        else if (state.tag !== null) tag = state.tag;\n        if (tag === null && !state.any) {\n            // Trial and Error\n            const save = input.save();\n            try {\n                if (state.choice === null) this._decodeGeneric(state.tag, input, options);\n                else this._decodeChoice(input, options);\n                present = true;\n            } catch (e) {\n                present = false;\n            }\n            input.restore(save);\n        } else {\n            present = this._peekTag(input, tag, state.any);\n            if (input.isError(present)) return present;\n        }\n    }\n    // Push object on stack\n    let prevObj;\n    if (state.obj && present) prevObj = input.enterObject();\n    if (present) {\n        // Unwrap explicit values\n        if (state.explicit !== null) {\n            const explicit = this._decodeTag(input, state.explicit);\n            if (input.isError(explicit)) return explicit;\n            input = explicit;\n        }\n        const start = input.offset;\n        // Unwrap implicit and normal values\n        if (state.use === null && state.choice === null) {\n            let save;\n            if (state.any) save = input.save();\n            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);\n            if (input.isError(body)) return body;\n            if (state.any) result = input.raw(save);\n            else input = body;\n        }\n        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, \"tagged\");\n        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, \"content\");\n        // Select proper method for tag\n        if (state.any) {\n        // no-op\n        } else if (state.choice === null) {\n            result = this._decodeGeneric(state.tag, input, options);\n        } else {\n            result = this._decodeChoice(input, options);\n        }\n        if (input.isError(result)) return result;\n        // Decode children\n        if (!state.any && state.choice === null && state.children !== null) {\n            state.children.forEach(function decodeChildren(child) {\n                // NOTE: We are ignoring errors here, to let parser continue with other\n                // parts of encoded data\n                child._decode(input, options);\n            });\n        }\n        // Decode contained/encoded by schema, only in bit or octet strings\n        if (state.contains && (state.tag === \"octstr\" || state.tag === \"bitstr\")) {\n            const data = new DecoderBuffer(result);\n            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);\n        }\n    }\n    // Pop object\n    if (state.obj && present) result = input.leaveObject(prevObj);\n    // Set key\n    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);\n    else if (prevKey !== null) input.exitKey(prevKey);\n    return result;\n};\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n    const state = this._baseState;\n    if (tag === \"seq\" || tag === \"set\") return null;\n    if (tag === \"seqof\" || tag === \"setof\") return this._decodeList(input, tag, state.args[0], options);\n    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);\n    else if (tag === \"objid\" && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);\n    else if (tag === \"objid\") return this._decodeObjid(input, null, null, options);\n    else if (tag === \"gentime\" || tag === \"utctime\") return this._decodeTime(input, tag, options);\n    else if (tag === \"null_\") return this._decodeNull(input, options);\n    else if (tag === \"bool\") return this._decodeBool(input, options);\n    else if (tag === \"objDesc\") return this._decodeStr(input, tag, options);\n    else if (tag === \"int\" || tag === \"enum\") return this._decodeInt(input, state.args && state.args[0], options);\n    if (state.use !== null) {\n        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);\n    } else {\n        return input.error(\"unknown tag: \" + tag);\n    }\n};\nNode.prototype._getUse = function _getUse(entity, obj) {\n    const state = this._baseState;\n    // Create altered use decoder if implicit is set\n    state.useDecoder = this._use(entity, obj);\n    assert(state.useDecoder._baseState.parent === null);\n    state.useDecoder = state.useDecoder._baseState.children[0];\n    if (state.implicit !== state.useDecoder._baseState.implicit) {\n        state.useDecoder = state.useDecoder.clone();\n        state.useDecoder._baseState.implicit = state.implicit;\n    }\n    return state.useDecoder;\n};\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n    const state = this._baseState;\n    let result = null;\n    let match = false;\n    Object.keys(state.choice).some(function(key) {\n        const save = input.save();\n        const node = state.choice[key];\n        try {\n            const value = node._decode(input, options);\n            if (input.isError(value)) return false;\n            result = {\n                type: key,\n                value: value\n            };\n            match = true;\n        } catch (e) {\n            input.restore(save);\n            return false;\n        }\n        return true;\n    }, this);\n    if (!match) return input.error(\"Choice not matched\");\n    return result;\n};\n//\n// Encoding\n//\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n    return new EncoderBuffer(data, this.reporter);\n};\nNode.prototype._encode = function encode(data, reporter, parent) {\n    const state = this._baseState;\n    if (state[\"default\"] !== null && state[\"default\"] === data) return;\n    const result = this._encodeValue(data, reporter, parent);\n    if (result === undefined) return;\n    if (this._skipDefault(result, reporter, parent)) return;\n    return result;\n};\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n    const state = this._baseState;\n    // Decode root node\n    if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());\n    let result = null;\n    // Set reporter to share it with a child class\n    this.reporter = reporter;\n    // Check if data is there\n    if (state.optional && data === undefined) {\n        if (state[\"default\"] !== null) data = state[\"default\"];\n        else return;\n    }\n    // Encode children first\n    let content = null;\n    let primitive = false;\n    if (state.any) {\n        // Anything that was given is translated to buffer\n        result = this._createEncoderBuffer(data);\n    } else if (state.choice) {\n        result = this._encodeChoice(data, reporter);\n    } else if (state.contains) {\n        content = this._getUse(state.contains, parent)._encode(data, reporter);\n        primitive = true;\n    } else if (state.children) {\n        content = state.children.map(function(child) {\n            if (child._baseState.tag === \"null_\") return child._encode(null, reporter, data);\n            if (child._baseState.key === null) return reporter.error(\"Child should have a key\");\n            const prevKey = reporter.enterKey(child._baseState.key);\n            if (typeof data !== \"object\") return reporter.error(\"Child expected, but input is not object\");\n            const res = child._encode(data[child._baseState.key], reporter, data);\n            reporter.leaveKey(prevKey);\n            return res;\n        }, this).filter(function(child) {\n            return child;\n        });\n        content = this._createEncoderBuffer(content);\n    } else {\n        if (state.tag === \"seqof\" || state.tag === \"setof\") {\n            // TODO(indutny): this should be thrown on DSL level\n            if (!(state.args && state.args.length === 1)) return reporter.error(\"Too many args for : \" + state.tag);\n            if (!Array.isArray(data)) return reporter.error(\"seqof/setof, but data is not Array\");\n            const child = this.clone();\n            child._baseState.implicit = null;\n            content = this._createEncoderBuffer(data.map(function(item) {\n                const state = this._baseState;\n                return this._getUse(state.args[0], data)._encode(item, reporter);\n            }, child));\n        } else if (state.use !== null) {\n            result = this._getUse(state.use, parent)._encode(data, reporter);\n        } else {\n            content = this._encodePrimitive(state.tag, data);\n            primitive = true;\n        }\n    }\n    // Encode data itself\n    if (!state.any && state.choice === null) {\n        const tag = state.implicit !== null ? state.implicit : state.tag;\n        const cls = state.implicit === null ? \"universal\" : \"context\";\n        if (tag === null) {\n            if (state.use === null) reporter.error(\"Tag could be omitted only for .use()\");\n        } else {\n            if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);\n        }\n    }\n    // Wrap in explicit\n    if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, \"context\", result);\n    return result;\n};\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n    const state = this._baseState;\n    const node = state.choice[data.type];\n    if (!node) {\n        assert(false, data.type + \" not found in \" + JSON.stringify(Object.keys(state.choice)));\n    }\n    return node._encode(data.value, reporter);\n};\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n    const state = this._baseState;\n    if (/str$/.test(tag)) return this._encodeStr(data, tag);\n    else if (tag === \"objid\" && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n    else if (tag === \"objid\") return this._encodeObjid(data, null, null);\n    else if (tag === \"gentime\" || tag === \"utctime\") return this._encodeTime(data, tag);\n    else if (tag === \"null_\") return this._encodeNull();\n    else if (tag === \"int\" || tag === \"enum\") return this._encodeInt(data, state.args && state.reverseArgs[0]);\n    else if (tag === \"bool\") return this._encodeBool(data);\n    else if (tag === \"objDesc\") return this._encodeStr(data, tag);\n    else throw new Error(\"Unsupported tag: \" + tag);\n};\nNode.prototype._isNumstr = function isNumstr(str) {\n    return /^[0-9 ]*$/.test(str);\n};\nNode.prototype._isPrintstr = function isPrintstr(str) {\n    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/reporter.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/reporter.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nfunction Reporter(options) {\n    this._reporterState = {\n        obj: null,\n        path: [],\n        options: options || {},\n        errors: []\n    };\n}\nexports.Reporter = Reporter;\nReporter.prototype.isError = function isError(obj) {\n    return obj instanceof ReporterError;\n};\nReporter.prototype.save = function save() {\n    const state = this._reporterState;\n    return {\n        obj: state.obj,\n        pathLen: state.path.length\n    };\n};\nReporter.prototype.restore = function restore(data) {\n    const state = this._reporterState;\n    state.obj = data.obj;\n    state.path = state.path.slice(0, data.pathLen);\n};\nReporter.prototype.enterKey = function enterKey(key) {\n    return this._reporterState.path.push(key);\n};\nReporter.prototype.exitKey = function exitKey(index) {\n    const state = this._reporterState;\n    state.path = state.path.slice(0, index - 1);\n};\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n    const state = this._reporterState;\n    this.exitKey(index);\n    if (state.obj !== null) state.obj[key] = value;\n};\nReporter.prototype.path = function path() {\n    return this._reporterState.path.join(\"/\");\n};\nReporter.prototype.enterObject = function enterObject() {\n    const state = this._reporterState;\n    const prev = state.obj;\n    state.obj = {};\n    return prev;\n};\nReporter.prototype.leaveObject = function leaveObject(prev) {\n    const state = this._reporterState;\n    const now = state.obj;\n    state.obj = prev;\n    return now;\n};\nReporter.prototype.error = function error(msg) {\n    let err;\n    const state = this._reporterState;\n    const inherited = msg instanceof ReporterError;\n    if (inherited) {\n        err = msg;\n    } else {\n        err = new ReporterError(state.path.map(function(elem) {\n            return \"[\" + JSON.stringify(elem) + \"]\";\n        }).join(\"\"), msg.message || msg, msg.stack);\n    }\n    if (!state.options.partial) throw err;\n    if (!inherited) state.errors.push(err);\n    return err;\n};\nReporter.prototype.wrapResult = function wrapResult(result) {\n    const state = this._reporterState;\n    if (!state.options.partial) return result;\n    return {\n        result: this.isError(result) ? null : result,\n        errors: state.errors\n    };\n};\nfunction ReporterError(path, msg) {\n    this.path = path;\n    this.rethrow(msg);\n}\ninherits(ReporterError, Error);\nReporterError.prototype.rethrow = function rethrow(msg) {\n    this.message = msg + \" at: \" + (this.path || \"(shallow)\");\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);\n    if (!this.stack) {\n        try {\n            // IE only adds stack when thrown\n            throw new Error(this.message);\n        } catch (e) {\n            this.stack = e.stack;\n        }\n    }\n    return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/reporter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/der.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/der.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Helper\nfunction reverse(map) {\n    const res = {};\n    Object.keys(map).forEach(function(key) {\n        // Convert key to integer if it is stringified\n        if ((key | 0) == key) key = key | 0;\n        const value = map[key];\n        res[value] = key;\n    });\n    return res;\n}\nexports.tagClass = {\n    0: \"universal\",\n    1: \"application\",\n    2: \"context\",\n    3: \"private\"\n};\nexports.tagClassByName = reverse(exports.tagClass);\nexports.tag = {\n    0x00: \"end\",\n    0x01: \"bool\",\n    0x02: \"int\",\n    0x03: \"bitstr\",\n    0x04: \"octstr\",\n    0x05: \"null_\",\n    0x06: \"objid\",\n    0x07: \"objDesc\",\n    0x08: \"external\",\n    0x09: \"real\",\n    0x0a: \"enum\",\n    0x0b: \"embed\",\n    0x0c: \"utf8str\",\n    0x0d: \"relativeOid\",\n    0x10: \"seq\",\n    0x11: \"set\",\n    0x12: \"numstr\",\n    0x13: \"printstr\",\n    0x14: \"t61str\",\n    0x15: \"videostr\",\n    0x16: \"ia5str\",\n    0x17: \"utctime\",\n    0x18: \"gentime\",\n    0x19: \"graphstr\",\n    0x1a: \"iso646str\",\n    0x1b: \"genstr\",\n    0x1c: \"unistr\",\n    0x1d: \"charstr\",\n    0x1e: \"bmpstr\"\n};\nexports.tagByName = reverse(exports.tag);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYXNuMS5qc0A1LjQuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBUztBQUNULFNBQVNBLFFBQVFDLEdBQUc7SUFDbEIsTUFBTUMsTUFBTSxDQUFDO0lBRWJDLE9BQU9DLElBQUksQ0FBQ0gsS0FBS0ksT0FBTyxDQUFDLFNBQVNDLEdBQUc7UUFDbkMsOENBQThDO1FBQzlDLElBQUksQ0FBQ0EsTUFBTSxNQUFNQSxLQUNmQSxNQUFNQSxNQUFNO1FBRWQsTUFBTUMsUUFBUU4sR0FBRyxDQUFDSyxJQUFJO1FBQ3RCSixHQUFHLENBQUNLLE1BQU0sR0FBR0Q7SUFDZjtJQUVBLE9BQU9KO0FBQ1Q7QUFFQU0sZ0JBQWdCLEdBQUc7SUFDakIsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztBQUNMO0FBQ0FBLHNCQUFzQixHQUFHUixRQUFRUSxRQUFRQyxRQUFRO0FBRWpERCxXQUFXLEdBQUc7SUFDWixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtBQUNSO0FBQ0FBLGlCQUFpQixHQUFHUixRQUFRUSxRQUFRRyxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hc24xLmpzQDUuNC4xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9kZXIuanM/MTVjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIEhlbHBlclxuZnVuY3Rpb24gcmV2ZXJzZShtYXApIHtcbiAgY29uc3QgcmVzID0ge307XG5cbiAgT2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIC8vIENvbnZlcnQga2V5IHRvIGludGVnZXIgaWYgaXQgaXMgc3RyaW5naWZpZWRcbiAgICBpZiAoKGtleSB8IDApID09IGtleSlcbiAgICAgIGtleSA9IGtleSB8IDA7XG5cbiAgICBjb25zdCB2YWx1ZSA9IG1hcFtrZXldO1xuICAgIHJlc1t2YWx1ZV0gPSBrZXk7XG4gIH0pO1xuXG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydHMudGFnQ2xhc3MgPSB7XG4gIDA6ICd1bml2ZXJzYWwnLFxuICAxOiAnYXBwbGljYXRpb24nLFxuICAyOiAnY29udGV4dCcsXG4gIDM6ICdwcml2YXRlJ1xufTtcbmV4cG9ydHMudGFnQ2xhc3NCeU5hbWUgPSByZXZlcnNlKGV4cG9ydHMudGFnQ2xhc3MpO1xuXG5leHBvcnRzLnRhZyA9IHtcbiAgMHgwMDogJ2VuZCcsXG4gIDB4MDE6ICdib29sJyxcbiAgMHgwMjogJ2ludCcsXG4gIDB4MDM6ICdiaXRzdHInLFxuICAweDA0OiAnb2N0c3RyJyxcbiAgMHgwNTogJ251bGxfJyxcbiAgMHgwNjogJ29iamlkJyxcbiAgMHgwNzogJ29iakRlc2MnLFxuICAweDA4OiAnZXh0ZXJuYWwnLFxuICAweDA5OiAncmVhbCcsXG4gIDB4MGE6ICdlbnVtJyxcbiAgMHgwYjogJ2VtYmVkJyxcbiAgMHgwYzogJ3V0ZjhzdHInLFxuICAweDBkOiAncmVsYXRpdmVPaWQnLFxuICAweDEwOiAnc2VxJyxcbiAgMHgxMTogJ3NldCcsXG4gIDB4MTI6ICdudW1zdHInLFxuICAweDEzOiAncHJpbnRzdHInLFxuICAweDE0OiAndDYxc3RyJyxcbiAgMHgxNTogJ3ZpZGVvc3RyJyxcbiAgMHgxNjogJ2lhNXN0cicsXG4gIDB4MTc6ICd1dGN0aW1lJyxcbiAgMHgxODogJ2dlbnRpbWUnLFxuICAweDE5OiAnZ3JhcGhzdHInLFxuICAweDFhOiAnaXNvNjQ2c3RyJyxcbiAgMHgxYjogJ2dlbnN0cicsXG4gIDB4MWM6ICd1bmlzdHInLFxuICAweDFkOiAnY2hhcnN0cicsXG4gIDB4MWU6ICdibXBzdHInXG59O1xuZXhwb3J0cy50YWdCeU5hbWUgPSByZXZlcnNlKGV4cG9ydHMudGFnKTtcbiJdLCJuYW1lcyI6WyJyZXZlcnNlIiwibWFwIiwicmVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsImV4cG9ydHMiLCJ0YWdDbGFzcyIsInRhZ0NsYXNzQnlOYW1lIiwidGFnIiwidGFnQnlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/der.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/der.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/der.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nconst bignum = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.2/node_modules/bn.js/lib/bn.js\");\nconst DecoderBuffer = (__webpack_require__(/*! ../base/buffer */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/buffer.js\").DecoderBuffer);\nconst Node = __webpack_require__(/*! ../base/node */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/node.js\");\n// Import DER constants\nconst der = __webpack_require__(/*! ../constants/der */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/der.js\");\nfunction DERDecoder(entity) {\n    this.enc = \"der\";\n    this.name = entity.name;\n    this.entity = entity;\n    // Construct base tree\n    this.tree = new DERNode();\n    this.tree._init(entity.body);\n}\nmodule.exports = DERDecoder;\nDERDecoder.prototype.decode = function decode(data, options) {\n    if (!DecoderBuffer.isDecoderBuffer(data)) {\n        data = new DecoderBuffer(data, options);\n    }\n    return this.tree._decode(data, options);\n};\n// Tree methods\nfunction DERNode(parent) {\n    Node.call(this, \"der\", parent);\n}\ninherits(DERNode, Node);\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n    if (buffer.isEmpty()) return false;\n    const state = buffer.save();\n    const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n    if (buffer.isError(decodedTag)) return decodedTag;\n    buffer.restore(state);\n    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + \"of\" === tag || any;\n};\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n    const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of \"' + tag + '\"');\n    if (buffer.isError(decodedTag)) return decodedTag;\n    let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of \"' + tag + '\"');\n    // Failure\n    if (buffer.isError(len)) return len;\n    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + \"of\" !== tag) {\n        return buffer.error('Failed to match tag: \"' + tag + '\"');\n    }\n    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n    // Indefinite length... find END tag\n    const state = buffer.save();\n    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: \"' + this.tag + '\"');\n    if (buffer.isError(res)) return res;\n    len = buffer.offset - state.offset;\n    buffer.restore(state);\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n    for(;;){\n        const tag = derDecodeTag(buffer, fail);\n        if (buffer.isError(tag)) return tag;\n        const len = derDecodeLen(buffer, tag.primitive, fail);\n        if (buffer.isError(len)) return len;\n        let res;\n        if (tag.primitive || len !== null) res = buffer.skip(len);\n        else res = this._skipUntilEnd(buffer, fail);\n        // Failure\n        if (buffer.isError(res)) return res;\n        if (tag.tagStr === \"end\") break;\n    }\n};\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {\n    const result = [];\n    while(!buffer.isEmpty()){\n        const possibleEnd = this._peekTag(buffer, \"end\");\n        if (buffer.isError(possibleEnd)) return possibleEnd;\n        const res = decoder.decode(buffer, \"der\", options);\n        if (buffer.isError(res) && possibleEnd) break;\n        result.push(res);\n    }\n    return result;\n};\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n    if (tag === \"bitstr\") {\n        const unused = buffer.readUInt8();\n        if (buffer.isError(unused)) return unused;\n        return {\n            unused: unused,\n            data: buffer.raw()\n        };\n    } else if (tag === \"bmpstr\") {\n        const raw = buffer.raw();\n        if (raw.length % 2 === 1) return buffer.error(\"Decoding of string type: bmpstr length mismatch\");\n        let str = \"\";\n        for(let i = 0; i < raw.length / 2; i++){\n            str += String.fromCharCode(raw.readUInt16BE(i * 2));\n        }\n        return str;\n    } else if (tag === \"numstr\") {\n        const numstr = buffer.raw().toString(\"ascii\");\n        if (!this._isNumstr(numstr)) {\n            return buffer.error(\"Decoding of string type: \" + \"numstr unsupported characters\");\n        }\n        return numstr;\n    } else if (tag === \"octstr\") {\n        return buffer.raw();\n    } else if (tag === \"objDesc\") {\n        return buffer.raw();\n    } else if (tag === \"printstr\") {\n        const printstr = buffer.raw().toString(\"ascii\");\n        if (!this._isPrintstr(printstr)) {\n            return buffer.error(\"Decoding of string type: \" + \"printstr unsupported characters\");\n        }\n        return printstr;\n    } else if (/str$/.test(tag)) {\n        return buffer.raw().toString();\n    } else {\n        return buffer.error(\"Decoding of string type: \" + tag + \" unsupported\");\n    }\n};\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n    let result;\n    const identifiers = [];\n    let ident = 0;\n    let subident = 0;\n    while(!buffer.isEmpty()){\n        subident = buffer.readUInt8();\n        ident <<= 7;\n        ident |= subident & 0x7f;\n        if ((subident & 0x80) === 0) {\n            identifiers.push(ident);\n            ident = 0;\n        }\n    }\n    if (subident & 0x80) identifiers.push(ident);\n    const first = identifiers[0] / 40 | 0;\n    const second = identifiers[0] % 40;\n    if (relative) result = identifiers;\n    else result = [\n        first,\n        second\n    ].concat(identifiers.slice(1));\n    if (values) {\n        let tmp = values[result.join(\" \")];\n        if (tmp === undefined) tmp = values[result.join(\".\")];\n        if (tmp !== undefined) result = tmp;\n    }\n    return result;\n};\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n    const str = buffer.raw().toString();\n    let year;\n    let mon;\n    let day;\n    let hour;\n    let min;\n    let sec;\n    if (tag === \"gentime\") {\n        year = str.slice(0, 4) | 0;\n        mon = str.slice(4, 6) | 0;\n        day = str.slice(6, 8) | 0;\n        hour = str.slice(8, 10) | 0;\n        min = str.slice(10, 12) | 0;\n        sec = str.slice(12, 14) | 0;\n    } else if (tag === \"utctime\") {\n        year = str.slice(0, 2) | 0;\n        mon = str.slice(2, 4) | 0;\n        day = str.slice(4, 6) | 0;\n        hour = str.slice(6, 8) | 0;\n        min = str.slice(8, 10) | 0;\n        sec = str.slice(10, 12) | 0;\n        if (year < 70) year = 2000 + year;\n        else year = 1900 + year;\n    } else {\n        return buffer.error(\"Decoding \" + tag + \" time is not supported yet\");\n    }\n    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\nDERNode.prototype._decodeNull = function decodeNull() {\n    return null;\n};\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n    const res = buffer.readUInt8();\n    if (buffer.isError(res)) return res;\n    else return res !== 0;\n};\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n    // Bigint, return as it is (assume big endian)\n    const raw = buffer.raw();\n    let res = new bignum(raw);\n    if (values) res = values[res.toString(10)] || res;\n    return res;\n};\nDERNode.prototype._use = function use(entity, obj) {\n    if (typeof entity === \"function\") entity = entity(obj);\n    return entity._getDecoder(\"der\").tree;\n};\n// Utility methods\nfunction derDecodeTag(buf, fail) {\n    let tag = buf.readUInt8(fail);\n    if (buf.isError(tag)) return tag;\n    const cls = der.tagClass[tag >> 6];\n    const primitive = (tag & 0x20) === 0;\n    // Multi-octet tag - load\n    if ((tag & 0x1f) === 0x1f) {\n        let oct = tag;\n        tag = 0;\n        while((oct & 0x80) === 0x80){\n            oct = buf.readUInt8(fail);\n            if (buf.isError(oct)) return oct;\n            tag <<= 7;\n            tag |= oct & 0x7f;\n        }\n    } else {\n        tag &= 0x1f;\n    }\n    const tagStr = der.tag[tag];\n    return {\n        cls: cls,\n        primitive: primitive,\n        tag: tag,\n        tagStr: tagStr\n    };\n}\nfunction derDecodeLen(buf, primitive, fail) {\n    let len = buf.readUInt8(fail);\n    if (buf.isError(len)) return len;\n    // Indefinite form\n    if (!primitive && len === 0x80) return null;\n    // Definite form\n    if ((len & 0x80) === 0) {\n        // Short form\n        return len;\n    }\n    // Long form\n    const num = len & 0x7f;\n    if (num > 4) return buf.error(\"length octect is too long\");\n    len = 0;\n    for(let i = 0; i < num; i++){\n        len <<= 8;\n        const j = buf.readUInt8(fail);\n        if (buf.isError(j)) return j;\n        len |= j;\n    }\n    return len;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/der.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst decoders = exports;\ndecoders.der = __webpack_require__(/*! ./der */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/der.js\");\ndecoders.pem = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/pem.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYXNuMS5qc0A1LjQuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVdDO0FBRWpCRCxTQUFTRSxHQUFHLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ3ZCSCxTQUFTSSxHQUFHLEdBQUdELG1CQUFPQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hc24xLmpzQDUuNC4xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2luZGV4LmpzPzBhZmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZWNvZGVycyA9IGV4cG9ydHM7XG5cbmRlY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5kZWNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIl0sIm5hbWVzIjpbImRlY29kZXJzIiwiZXhwb3J0cyIsImRlciIsInJlcXVpcmUiLCJwZW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/pem.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/pem.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nconst Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/.pnpm/safer-buffer@2.1.2/node_modules/safer-buffer/safer.js\").Buffer);\nconst DERDecoder = __webpack_require__(/*! ./der */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/der.js\");\nfunction PEMDecoder(entity) {\n    DERDecoder.call(this, entity);\n    this.enc = \"pem\";\n}\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\nPEMDecoder.prototype.decode = function decode(data, options) {\n    const lines = data.toString().split(/[\\r\\n]+/g);\n    const label = options.label.toUpperCase();\n    const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n    let start = -1;\n    let end = -1;\n    for(let i = 0; i < lines.length; i++){\n        const match = lines[i].match(re);\n        if (match === null) continue;\n        if (match[2] !== label) continue;\n        if (start === -1) {\n            if (match[1] !== \"BEGIN\") break;\n            start = i;\n        } else {\n            if (match[1] !== \"END\") break;\n            end = i;\n            break;\n        }\n    }\n    if (start === -1 || end === -1) throw new Error(\"PEM section not found for: \" + label);\n    const base64 = lines.slice(start + 1, end).join(\"\");\n    // Remove excessive symbols\n    base64.replace(/[^a-z0-9+/=]+/gi, \"\");\n    const input = Buffer.from(base64, \"base64\");\n    return DERDecoder.prototype.decode.call(this, input, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYXNuMS5qc0A1LjQuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9wZW0uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxXQUFXQyxtQkFBT0EsQ0FBQztBQUN6QixNQUFNQyxTQUFTRCxvSUFBOEI7QUFFN0MsTUFBTUUsYUFBYUYsbUJBQU9BLENBQUM7QUFFM0IsU0FBU0csV0FBV0MsTUFBTTtJQUN4QkYsV0FBV0csSUFBSSxDQUFDLElBQUksRUFBRUQ7SUFDdEIsSUFBSSxDQUFDRSxHQUFHLEdBQUc7QUFDYjtBQUNBUCxTQUFTSSxZQUFZRDtBQUNyQkssT0FBT0MsT0FBTyxHQUFHTDtBQUVqQkEsV0FBV00sU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBU0EsT0FBT0MsSUFBSSxFQUFFQyxPQUFPO0lBQ3pELE1BQU1DLFFBQVFGLEtBQUtHLFFBQVEsR0FBR0MsS0FBSyxDQUFDO0lBRXBDLE1BQU1DLFFBQVFKLFFBQVFJLEtBQUssQ0FBQ0MsV0FBVztJQUV2QyxNQUFNQyxLQUFLO0lBQ1gsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsSUFBSUMsTUFBTSxDQUFDO0lBQ1gsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlSLE1BQU1TLE1BQU0sRUFBRUQsSUFBSztRQUNyQyxNQUFNRSxRQUFRVixLQUFLLENBQUNRLEVBQUUsQ0FBQ0UsS0FBSyxDQUFDTDtRQUM3QixJQUFJSyxVQUFVLE1BQ1o7UUFFRixJQUFJQSxLQUFLLENBQUMsRUFBRSxLQUFLUCxPQUNmO1FBRUYsSUFBSUcsVUFBVSxDQUFDLEdBQUc7WUFDaEIsSUFBSUksS0FBSyxDQUFDLEVBQUUsS0FBSyxTQUNmO1lBQ0ZKLFFBQVFFO1FBQ1YsT0FBTztZQUNMLElBQUlFLEtBQUssQ0FBQyxFQUFFLEtBQUssT0FDZjtZQUNGSCxNQUFNQztZQUNOO1FBQ0Y7SUFDRjtJQUNBLElBQUlGLFVBQVUsQ0FBQyxLQUFLQyxRQUFRLENBQUMsR0FDM0IsTUFBTSxJQUFJSSxNQUFNLGdDQUFnQ1I7SUFFbEQsTUFBTVMsU0FBU1osTUFBTWEsS0FBSyxDQUFDUCxRQUFRLEdBQUdDLEtBQUtPLElBQUksQ0FBQztJQUNoRCwyQkFBMkI7SUFDM0JGLE9BQU9HLE9BQU8sQ0FBQyxtQkFBbUI7SUFFbEMsTUFBTUMsUUFBUTVCLE9BQU82QixJQUFJLENBQUNMLFFBQVE7SUFDbEMsT0FBT3ZCLFdBQVdPLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDTCxJQUFJLENBQUMsSUFBSSxFQUFFd0IsT0FBT2pCO0FBQ3ZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hc24xLmpzQDUuNC4xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL3BlbS5qcz9kMTVjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuY29uc3QgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xuXG5jb25zdCBERVJEZWNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRGVjb2RlcihlbnRpdHkpIHtcbiAgREVSRGVjb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59XG5pbmhlcml0cyhQRU1EZWNvZGVyLCBERVJEZWNvZGVyKTtcbm1vZHVsZS5leHBvcnRzID0gUEVNRGVjb2RlcjtcblxuUEVNRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgbGluZXMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuICBjb25zdCBsYWJlbCA9IG9wdGlvbnMubGFiZWwudG9VcHBlckNhc2UoKTtcblxuICBjb25zdCByZSA9IC9eLS0tLS0oQkVHSU58RU5EKSAoW14tXSspLS0tLS0kLztcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIGxldCBlbmQgPSAtMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG1hdGNoID0gbGluZXNbaV0ubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKG1hdGNoWzJdICE9PSBsYWJlbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnQkVHSU4nKVxuICAgICAgICBicmVhaztcbiAgICAgIHN0YXJ0ID0gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnRU5EJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBlbmQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BFTSBzZWN0aW9uIG5vdCBmb3VuZCBmb3I6ICcgKyBsYWJlbCk7XG5cbiAgY29uc3QgYmFzZTY0ID0gbGluZXMuc2xpY2Uoc3RhcnQgKyAxLCBlbmQpLmpvaW4oJycpO1xuICAvLyBSZW1vdmUgZXhjZXNzaXZlIHN5bWJvbHNcbiAgYmFzZTY0LnJlcGxhY2UoL1teYS16MC05Ky89XSsvZ2ksICcnKTtcblxuICBjb25zdCBpbnB1dCA9IEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpO1xuICByZXR1cm4gREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlLmNhbGwodGhpcywgaW5wdXQsIG9wdGlvbnMpO1xufTtcbiJdLCJuYW1lcyI6WyJpbmhlcml0cyIsInJlcXVpcmUiLCJCdWZmZXIiLCJERVJEZWNvZGVyIiwiUEVNRGVjb2RlciIsImVudGl0eSIsImNhbGwiLCJlbmMiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvdG90eXBlIiwiZGVjb2RlIiwiZGF0YSIsIm9wdGlvbnMiLCJsaW5lcyIsInRvU3RyaW5nIiwic3BsaXQiLCJsYWJlbCIsInRvVXBwZXJDYXNlIiwicmUiLCJzdGFydCIsImVuZCIsImkiLCJsZW5ndGgiLCJtYXRjaCIsIkVycm9yIiwiYmFzZTY0Iiwic2xpY2UiLCJqb2luIiwicmVwbGFjZSIsImlucHV0IiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/pem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/der.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/der.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nconst Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/.pnpm/safer-buffer@2.1.2/node_modules/safer-buffer/safer.js\").Buffer);\nconst Node = __webpack_require__(/*! ../base/node */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/node.js\");\n// Import DER constants\nconst der = __webpack_require__(/*! ../constants/der */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/der.js\");\nfunction DEREncoder(entity) {\n    this.enc = \"der\";\n    this.name = entity.name;\n    this.entity = entity;\n    // Construct base tree\n    this.tree = new DERNode();\n    this.tree._init(entity.body);\n}\nmodule.exports = DEREncoder;\nDEREncoder.prototype.encode = function encode(data, reporter) {\n    return this.tree._encode(data, reporter).join();\n};\n// Tree methods\nfunction DERNode(parent) {\n    Node.call(this, \"der\", parent);\n}\ninherits(DERNode, Node);\nDERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {\n    const encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n    // Short form\n    if (content.length < 0x80) {\n        const header = Buffer.alloc(2);\n        header[0] = encodedTag;\n        header[1] = content.length;\n        return this._createEncoderBuffer([\n            header,\n            content\n        ]);\n    }\n    // Long form\n    // Count octets required to store length\n    let lenOctets = 1;\n    for(let i = content.length; i >= 0x100; i >>= 8)lenOctets++;\n    const header = Buffer.alloc(1 + 1 + lenOctets);\n    header[0] = encodedTag;\n    header[1] = 0x80 | lenOctets;\n    for(let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)header[i] = j & 0xff;\n    return this._createEncoderBuffer([\n        header,\n        content\n    ]);\n};\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n    if (tag === \"bitstr\") {\n        return this._createEncoderBuffer([\n            str.unused | 0,\n            str.data\n        ]);\n    } else if (tag === \"bmpstr\") {\n        const buf = Buffer.alloc(str.length * 2);\n        for(let i = 0; i < str.length; i++){\n            buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n        }\n        return this._createEncoderBuffer(buf);\n    } else if (tag === \"numstr\") {\n        if (!this._isNumstr(str)) {\n            return this.reporter.error(\"Encoding of string type: numstr supports \" + \"only digits and space\");\n        }\n        return this._createEncoderBuffer(str);\n    } else if (tag === \"printstr\") {\n        if (!this._isPrintstr(str)) {\n            return this.reporter.error(\"Encoding of string type: printstr supports \" + \"only latin upper and lower case letters, \" + \"digits, space, apostrophe, left and rigth \" + \"parenthesis, plus sign, comma, hyphen, \" + \"dot, slash, colon, equal sign, \" + \"question mark\");\n        }\n        return this._createEncoderBuffer(str);\n    } else if (/str$/.test(tag)) {\n        return this._createEncoderBuffer(str);\n    } else if (tag === \"objDesc\") {\n        return this._createEncoderBuffer(str);\n    } else {\n        return this.reporter.error(\"Encoding of string type: \" + tag + \" unsupported\");\n    }\n};\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n    if (typeof id === \"string\") {\n        if (!values) return this.reporter.error(\"string objid given, but no values map found\");\n        if (!values.hasOwnProperty(id)) return this.reporter.error(\"objid not found in values map\");\n        id = values[id].split(/[\\s.]+/g);\n        for(let i = 0; i < id.length; i++)id[i] |= 0;\n    } else if (Array.isArray(id)) {\n        id = id.slice();\n        for(let i = 0; i < id.length; i++)id[i] |= 0;\n    }\n    if (!Array.isArray(id)) {\n        return this.reporter.error(\"objid() should be either array or string, \" + \"got: \" + JSON.stringify(id));\n    }\n    if (!relative) {\n        if (id[1] >= 40) return this.reporter.error(\"Second objid identifier OOB\");\n        id.splice(0, 2, id[0] * 40 + id[1]);\n    }\n    // Count number of octets\n    let size = 0;\n    for(let i = 0; i < id.length; i++){\n        let ident = id[i];\n        for(size++; ident >= 0x80; ident >>= 7)size++;\n    }\n    const objid = Buffer.alloc(size);\n    let offset = objid.length - 1;\n    for(let i = id.length - 1; i >= 0; i--){\n        let ident = id[i];\n        objid[offset--] = ident & 0x7f;\n        while((ident >>= 7) > 0)objid[offset--] = 0x80 | ident & 0x7f;\n    }\n    return this._createEncoderBuffer(objid);\n};\nfunction two(num) {\n    if (num < 10) return \"0\" + num;\n    else return num;\n}\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n    let str;\n    const date = new Date(time);\n    if (tag === \"gentime\") {\n        str = [\n            two(date.getUTCFullYear()),\n            two(date.getUTCMonth() + 1),\n            two(date.getUTCDate()),\n            two(date.getUTCHours()),\n            two(date.getUTCMinutes()),\n            two(date.getUTCSeconds()),\n            \"Z\"\n        ].join(\"\");\n    } else if (tag === \"utctime\") {\n        str = [\n            two(date.getUTCFullYear() % 100),\n            two(date.getUTCMonth() + 1),\n            two(date.getUTCDate()),\n            two(date.getUTCHours()),\n            two(date.getUTCMinutes()),\n            two(date.getUTCSeconds()),\n            \"Z\"\n        ].join(\"\");\n    } else {\n        this.reporter.error(\"Encoding \" + tag + \" time is not supported yet\");\n    }\n    return this._encodeStr(str, \"octstr\");\n};\nDERNode.prototype._encodeNull = function encodeNull() {\n    return this._createEncoderBuffer(\"\");\n};\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n    if (typeof num === \"string\") {\n        if (!values) return this.reporter.error(\"String int or enum given, but no values map\");\n        if (!values.hasOwnProperty(num)) {\n            return this.reporter.error(\"Values map doesn't contain: \" + JSON.stringify(num));\n        }\n        num = values[num];\n    }\n    // Bignum, assume big endian\n    if (typeof num !== \"number\" && !Buffer.isBuffer(num)) {\n        const numArray = num.toArray();\n        if (!num.sign && numArray[0] & 0x80) {\n            numArray.unshift(0);\n        }\n        num = Buffer.from(numArray);\n    }\n    if (Buffer.isBuffer(num)) {\n        let size = num.length;\n        if (num.length === 0) size++;\n        const out = Buffer.alloc(size);\n        num.copy(out);\n        if (num.length === 0) out[0] = 0;\n        return this._createEncoderBuffer(out);\n    }\n    if (num < 0x80) return this._createEncoderBuffer(num);\n    if (num < 0x100) return this._createEncoderBuffer([\n        0,\n        num\n    ]);\n    let size = 1;\n    for(let i = num; i >= 0x100; i >>= 8)size++;\n    const out = new Array(size);\n    for(let i = out.length - 1; i >= 0; i--){\n        out[i] = num & 0xff;\n        num >>= 8;\n    }\n    if (out[0] & 0x80) {\n        out.unshift(0);\n    }\n    return this._createEncoderBuffer(Buffer.from(out));\n};\nDERNode.prototype._encodeBool = function encodeBool(value) {\n    return this._createEncoderBuffer(value ? 0xff : 0);\n};\nDERNode.prototype._use = function use(entity, obj) {\n    if (typeof entity === \"function\") entity = entity(obj);\n    return entity._getEncoder(\"der\").tree;\n};\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n    const state = this._baseState;\n    let i;\n    if (state[\"default\"] === null) return false;\n    const data = dataBuffer.join();\n    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state[\"default\"], reporter, parent).join();\n    if (data.length !== state.defaultBuffer.length) return false;\n    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;\n    return true;\n};\n// Utility methods\nfunction encodeTag(tag, primitive, cls, reporter) {\n    let res;\n    if (tag === \"seqof\") tag = \"seq\";\n    else if (tag === \"setof\") tag = \"set\";\n    if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];\n    else if (typeof tag === \"number\" && (tag | 0) === tag) res = tag;\n    else return reporter.error(\"Unknown tag: \" + tag);\n    if (res >= 0x1f) return reporter.error(\"Multi-octet tag encoding unsupported\");\n    if (!primitive) res |= 0x20;\n    res |= der.tagClassByName[cls || \"universal\"] << 6;\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYXNuMS5qc0A1LjQuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxXQUFXQyxtQkFBT0EsQ0FBQztBQUN6QixNQUFNQyxTQUFTRCxvSUFBOEI7QUFDN0MsTUFBTUUsT0FBT0YsbUJBQU9BLENBQUM7QUFFckIsdUJBQXVCO0FBQ3ZCLE1BQU1HLE1BQU1ILG1CQUFPQSxDQUFDO0FBRXBCLFNBQVNJLFdBQVdDLE1BQU07SUFDeEIsSUFBSSxDQUFDQyxHQUFHLEdBQUc7SUFDWCxJQUFJLENBQUNDLElBQUksR0FBR0YsT0FBT0UsSUFBSTtJQUN2QixJQUFJLENBQUNGLE1BQU0sR0FBR0E7SUFFZCxzQkFBc0I7SUFDdEIsSUFBSSxDQUFDRyxJQUFJLEdBQUcsSUFBSUM7SUFDaEIsSUFBSSxDQUFDRCxJQUFJLENBQUNFLEtBQUssQ0FBQ0wsT0FBT00sSUFBSTtBQUM3QjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdUO0FBRWpCQSxXQUFXVSxTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQSxPQUFPQyxJQUFJLEVBQUVDLFFBQVE7SUFDMUQsT0FBTyxJQUFJLENBQUNULElBQUksQ0FBQ1UsT0FBTyxDQUFDRixNQUFNQyxVQUFVRSxJQUFJO0FBQy9DO0FBRUEsZUFBZTtBQUVmLFNBQVNWLFFBQVFXLE1BQU07SUFDckJsQixLQUFLbUIsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPRDtBQUN6QjtBQUNBckIsU0FBU1UsU0FBU1A7QUFFbEJPLFFBQVFLLFNBQVMsQ0FBQ1EsZ0JBQWdCLEdBQUcsU0FBU0MsZ0JBQWdCQyxHQUFHLEVBQy9EQyxTQUFTLEVBQ1RDLEdBQUcsRUFDSEMsT0FBTztJQUNQLE1BQU1DLGFBQWFDLFVBQVVMLEtBQUtDLFdBQVdDLEtBQUssSUFBSSxDQUFDVCxRQUFRO0lBRS9ELGFBQWE7SUFDYixJQUFJVSxRQUFRRyxNQUFNLEdB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QUFVLEVBQUVuRixVQUFVRyxRQUFRRCxJQUFJO0lBRWxGLElBQUlILEtBQUtjLE1BQU0sS0FBS3NFLE1BQU1FLGFBQWEsQ0FBQ3hFLE1BQU0sRUFDNUMsT0FBTztJQUVULElBQUtLLElBQUUsR0FBR0EsSUFBSW5CLEtBQUtjLE1BQU0sRUFBRUssSUFDekIsSUFBSW5CLElBQUksQ0FBQ21CLEVBQUUsS0FBS2lFLE1BQU1FLGFBQWEsQ0FBQ25FLEVBQUUsRUFDcEMsT0FBTztJQUVYLE9BQU87QUFDVDtBQUVBLGtCQUFrQjtBQUVsQixTQUFTTixVQUFVTCxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFVCxRQUFRO0lBQzlDLElBQUl3RjtJQUVKLElBQUlqRixRQUFRLFNBQ1ZBLE1BQU07U0FDSCxJQUFJQSxRQUFRLFNBQ2ZBLE1BQU07SUFFUixJQUFJckIsSUFBSXVHLFNBQVMsQ0FBQ3JELGNBQWMsQ0FBQzdCLE1BQy9CaUYsTUFBTXRHLElBQUl1RyxTQUFTLENBQUNsRixJQUFJO1NBQ3JCLElBQUksT0FBT0EsUUFBUSxZQUFZLENBQUNBLE1BQU0sT0FBT0EsS0FDaERpRixNQUFNakY7U0FFTixPQUFPUCxTQUFTNEIsS0FBSyxDQUFDLGtCQUFrQnJCO0lBRTFDLElBQUlpRixPQUFPLE1BQ1QsT0FBT3hGLFNBQVM0QixLQUFLLENBQUM7SUFFeEIsSUFBSSxDQUFDcEIsV0FDSGdGLE9BQU87SUFFVEEsT0FBUXRHLElBQUl3RyxjQUFjLENBQUNqRixPQUFPLFlBQVksSUFBSTtJQUVsRCxPQUFPK0U7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYXNuMS5qc0A1LjQuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9kZXIuanM/YzVjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbmNvbnN0IEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbmNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9iYXNlL25vZGUnKTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbmNvbnN0IGRlciA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9kZXInKTtcblxuZnVuY3Rpb24gREVSRW5jb2RlcihlbnRpdHkpIHtcbiAgdGhpcy5lbmMgPSAnZGVyJztcbiAgdGhpcy5uYW1lID0gZW50aXR5Lm5hbWU7XG4gIHRoaXMuZW50aXR5ID0gZW50aXR5O1xuXG4gIC8vIENvbnN0cnVjdCBiYXNlIHRyZWVcbiAgdGhpcy50cmVlID0gbmV3IERFUk5vZGUoKTtcbiAgdGhpcy50cmVlLl9pbml0KGVudGl0eS5ib2R5KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gREVSRW5jb2RlcjtcblxuREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLnRyZWUuX2VuY29kZShkYXRhLCByZXBvcnRlcikuam9pbigpO1xufTtcblxuLy8gVHJlZSBtZXRob2RzXG5cbmZ1bmN0aW9uIERFUk5vZGUocGFyZW50KSB7XG4gIE5vZGUuY2FsbCh0aGlzLCAnZGVyJywgcGFyZW50KTtcbn1cbmluaGVyaXRzKERFUk5vZGUsIE5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQ29tcG9zaXRlID0gZnVuY3Rpb24gZW5jb2RlQ29tcG9zaXRlKHRhZyxcbiAgcHJpbWl0aXZlLFxuICBjbHMsXG4gIGNvbnRlbnQpIHtcbiAgY29uc3QgZW5jb2RlZFRhZyA9IGVuY29kZVRhZyh0YWcsIHByaW1pdGl2ZSwgY2xzLCB0aGlzLnJlcG9ydGVyKTtcblxuICAvLyBTaG9ydCBmb3JtXG4gIGlmIChjb250ZW50Lmxlbmd0aCA8IDB4ODApIHtcbiAgICBjb25zdCBoZWFkZXIgPSBCdWZmZXIuYWxsb2MoMik7XG4gICAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgICBoZWFkZXJbMV0gPSBjb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICAvLyBDb3VudCBvY3RldHMgcmVxdWlyZWQgdG8gc3RvcmUgbGVuZ3RoXG4gIGxldCBsZW5PY3RldHMgPSAxO1xuICBmb3IgKGxldCBpID0gY29udGVudC5sZW5ndGg7IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgbGVuT2N0ZXRzKys7XG5cbiAgY29uc3QgaGVhZGVyID0gQnVmZmVyLmFsbG9jKDEgKyAxICsgbGVuT2N0ZXRzKTtcbiAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgaGVhZGVyWzFdID0gMHg4MCB8IGxlbk9jdGV0cztcblxuICBmb3IgKGxldCBpID0gMSArIGxlbk9jdGV0cywgaiA9IGNvbnRlbnQubGVuZ3RoOyBqID4gMDsgaS0tLCBqID4+PSA4KVxuICAgIGhlYWRlcltpXSA9IGogJiAweGZmO1xuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgaGVhZGVyLCBjb250ZW50IF0pO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVN0ciA9IGZ1bmN0aW9uIGVuY29kZVN0cihzdHIsIHRhZykge1xuICBpZiAodGFnID09PSAnYml0c3RyJykge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgc3RyLnVudXNlZCB8IDAsIHN0ci5kYXRhIF0pO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHtcbiAgICBjb25zdCBidWYgPSBCdWZmZXIuYWxsb2Moc3RyLmxlbmd0aCAqIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBidWYud3JpdGVVSW50MTZCRShzdHIuY2hhckNvZGVBdChpKSwgaSAqIDIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihidWYpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ251bXN0cicpIHtcbiAgICBpZiAoIXRoaXMuX2lzTnVtc3RyKHN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogbnVtc3RyIHN1cHBvcnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubHkgZGlnaXRzIGFuZCBzcGFjZScpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3ByaW50c3RyJykge1xuICAgIGlmICghdGhpcy5faXNQcmludHN0cihzdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IHByaW50c3RyIHN1cHBvcnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubHkgbGF0aW4gdXBwZXIgYW5kIGxvd2VyIGNhc2UgbGV0dGVycywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlnaXRzLCBzcGFjZSwgYXBvc3Ryb3BoZSwgbGVmdCBhbmQgcmlndGggJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFyZW50aGVzaXMsIHBsdXMgc2lnbiwgY29tbWEsIGh5cGhlbiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG90LCBzbGFzaCwgY29sb24sIGVxdWFsIHNpZ24sICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXN0aW9uIG1hcmsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICgvc3RyJC8udGVzdCh0YWcpKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJykge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICsgdGFnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVPYmppZCA9IGZ1bmN0aW9uIGVuY29kZU9iamlkKGlkLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignc3RyaW5nIG9iamlkIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCBmb3VuZCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KGlkKSlcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCBub3QgZm91bmQgaW4gdmFsdWVzIG1hcCcpO1xuICAgIGlkID0gdmFsdWVzW2lkXS5zcGxpdCgvW1xccy5dKy9nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIGlkID0gaWQuc2xpY2UoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQoKSBzaG91bGQgYmUgZWl0aGVyIGFycmF5IG9yIHN0cmluZywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dvdDogJyArIEpTT04uc3RyaW5naWZ5KGlkKSk7XG4gIH1cblxuICBpZiAoIXJlbGF0aXZlKSB7XG4gICAgaWYgKGlkWzFdID49IDQwKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1NlY29uZCBvYmppZCBpZGVudGlmaWVyIE9PQicpO1xuICAgIGlkLnNwbGljZSgwLCAyLCBpZFswXSAqIDQwICsgaWRbMV0pO1xuICB9XG5cbiAgLy8gQ291bnQgbnVtYmVyIG9mIG9jdGV0c1xuICBsZXQgc2l6ZSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaWRlbnQgPSBpZFtpXTtcbiAgICBmb3IgKHNpemUrKzsgaWRlbnQgPj0gMHg4MDsgaWRlbnQgPj49IDcpXG4gICAgICBzaXplKys7XG4gIH1cblxuICBjb25zdCBvYmppZCA9IEJ1ZmZlci5hbGxvYyhzaXplKTtcbiAgbGV0IG9mZnNldCA9IG9iamlkLmxlbmd0aCAtIDE7XG4gIGZvciAobGV0IGkgPSBpZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGxldCBpZGVudCA9IGlkW2ldO1xuICAgIG9iamlkW29mZnNldC0tXSA9IGlkZW50ICYgMHg3ZjtcbiAgICB3aGlsZSAoKGlkZW50ID4+PSA3KSA+IDApXG4gICAgICBvYmppZFtvZmZzZXQtLV0gPSAweDgwIHwgKGlkZW50ICYgMHg3Zik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvYmppZCk7XG59O1xuXG5mdW5jdGlvbiB0d28obnVtKSB7XG4gIGlmIChudW0gPCAxMClcbiAgICByZXR1cm4gJzAnICsgbnVtO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bTtcbn1cblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVRpbWUgPSBmdW5jdGlvbiBlbmNvZGVUaW1lKHRpbWUsIHRhZykge1xuICBsZXQgc3RyO1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZSk7XG5cbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgc3RyID0gW1xuICAgICAgdHdvKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDSG91cnMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSxcbiAgICAgICdaJ1xuICAgIF0uam9pbignJyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRVVENGdWxsWWVhcigpICUgMTAwKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKHN0ciwgJ29jdHN0cicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU51bGwgPSBmdW5jdGlvbiBlbmNvZGVOdWxsKCkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcignJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSwgdmFsdWVzKSB7XG4gIGlmICh0eXBlb2YgbnVtID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1N0cmluZyBpbnQgb3IgZW51bSBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShudW0pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignVmFsdWVzIG1hcCBkb2VzblxcJ3QgY29udGFpbjogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShudW0pKTtcbiAgICB9XG4gICAgbnVtID0gdmFsdWVzW251bV07XG4gIH1cblxuICAvLyBCaWdudW0sIGFzc3VtZSBiaWcgZW5kaWFuXG4gIGlmICh0eXBlb2YgbnVtICE9PSAnbnVtYmVyJyAmJiAhQnVmZmVyLmlzQnVmZmVyKG51bSkpIHtcbiAgICBjb25zdCBudW1BcnJheSA9IG51bS50b0FycmF5KCk7XG4gICAgaWYgKCFudW0uc2lnbiAmJiBudW1BcnJheVswXSAmIDB4ODApIHtcbiAgICAgIG51bUFycmF5LnVuc2hpZnQoMCk7XG4gICAgfVxuICAgIG51bSA9IEJ1ZmZlci5mcm9tKG51bUFycmF5KTtcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIGxldCBzaXplID0gbnVtLmxlbmd0aDtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIHNpemUrKztcblxuICAgIGNvbnN0IG91dCA9IEJ1ZmZlci5hbGxvYyhzaXplKTtcbiAgICBudW0uY29weShvdXQpO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgb3V0WzBdID0gMDtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvdXQpO1xuICB9XG5cbiAgaWYgKG51bSA8IDB4ODApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobnVtKTtcblxuICBpZiAobnVtIDwgMHgxMDApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWzAsIG51bV0pO1xuXG4gIGxldCBzaXplID0gMTtcbiAgZm9yIChsZXQgaSA9IG51bTsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBzaXplKys7XG5cbiAgY29uc3Qgb3V0ID0gbmV3IEFycmF5KHNpemUpO1xuICBmb3IgKGxldCBpID0gb3V0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgb3V0W2ldID0gbnVtICYgMHhmZjtcbiAgICBudW0gPj49IDg7XG4gIH1cbiAgaWYob3V0WzBdICYgMHg4MCkge1xuICAgIG91dC51bnNoaWZ0KDApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoQnVmZmVyLmZyb20ob3V0KSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQm9vbCA9IGZ1bmN0aW9uIGVuY29kZUJvb2wodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIodmFsdWUgPyAweGZmIDogMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXRFbmNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBEZWZhdWx0ID0gZnVuY3Rpb24gc2tpcERlZmF1bHQoZGF0YUJ1ZmZlciwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgbGV0IGk7XG4gIGlmIChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBjb25zdCBkYXRhID0gZGF0YUJ1ZmZlci5qb2luKCk7XG4gIGlmIChzdGF0ZS5kZWZhdWx0QnVmZmVyID09PSB1bmRlZmluZWQpXG4gICAgc3RhdGUuZGVmYXVsdEJ1ZmZlciA9IHRoaXMuX2VuY29kZVZhbHVlKHN0YXRlWydkZWZhdWx0J10sIHJlcG9ydGVyLCBwYXJlbnQpLmpvaW4oKTtcblxuICBpZiAoZGF0YS5sZW5ndGggIT09IHN0YXRlLmRlZmF1bHRCdWZmZXIubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGk9MDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspXG4gICAgaWYgKGRhdGFbaV0gIT09IHN0YXRlLmRlZmF1bHRCdWZmZXJbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBVdGlsaXR5IG1ldGhvZHNcblxuZnVuY3Rpb24gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHJlcG9ydGVyKSB7XG4gIGxldCByZXM7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJylcbiAgICB0YWcgPSAnc2VxJztcbiAgZWxzZSBpZiAodGFnID09PSAnc2V0b2YnKVxuICAgIHRhZyA9ICdzZXQnO1xuXG4gIGlmIChkZXIudGFnQnlOYW1lLmhhc093blByb3BlcnR5KHRhZykpXG4gICAgcmVzID0gZGVyLnRhZ0J5TmFtZVt0YWddO1xuICBlbHNlIGlmICh0eXBlb2YgdGFnID09PSAnbnVtYmVyJyAmJiAodGFnIHwgMCkgPT09IHRhZylcbiAgICByZXMgPSB0YWc7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1Vua25vd24gdGFnOiAnICsgdGFnKTtcblxuICBpZiAocmVzID49IDB4MWYpXG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdNdWx0aS1vY3RldCB0YWcgZW5jb2RpbmcgdW5zdXBwb3J0ZWQnKTtcblxuICBpZiAoIXByaW1pdGl2ZSlcbiAgICByZXMgfD0gMHgyMDtcblxuICByZXMgfD0gKGRlci50YWdDbGFzc0J5TmFtZVtjbHMgfHwgJ3VuaXZlcnNhbCddIDw8IDYpO1xuXG4gIHJldHVybiByZXM7XG59XG4iXSwibmFtZXMiOlsiaW5oZXJpdHMiLCJyZXF1aXJlIiwiQnVmZmVyIiwiTm9kZSIsImRlciIsIkRFUkVuY29kZXIiLCJlbnRpdHkiLCJlbmMiLCJuYW1lIiwidHJlZSIsIkRFUk5vZGUiLCJfaW5pdCIsImJvZHkiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvdG90eXBlIiwiZW5jb2RlIiwiZGF0YSIsInJlcG9ydGVyIiwiX2VuY29kZSIsImpvaW4iLCJwYXJlbnQiLCJjYWxsIiwiX2VuY29kZUNvbXBvc2l0ZSIsImVuY29kZUNvbXBvc2l0ZSIsInRhZyIsInByaW1pdGl2ZSIsImNscyIsImNvbnRlbnQiLCJlbmNvZGVkVGFnIiwiZW5jb2RlVGFnIiwibGVuZ3RoIiwiaGVhZGVyIiwiYWxsb2MiLCJfY3JlYXRlRW5jb2RlckJ1ZmZlciIsImxlbk9jdGV0cyIsImkiLCJqIiwiX2VuY29kZVN0ciIsImVuY29kZVN0ciIsInN0ciIsInVudXNlZCIsImJ1ZiIsIndyaXRlVUludDE2QkUiLCJjaGFyQ29kZUF0IiwiX2lzTnVtc3RyIiwiZXJyb3IiLCJfaXNQcmludHN0ciIsInRlc3QiLCJfZW5jb2RlT2JqaWQiLCJlbmNvZGVPYmppZCIsImlkIiwidmFsdWVzIiwicmVsYXRpdmUiLCJoYXNPd25Qcm9wZXJ0eSIsInNwbGl0IiwiQXJyYXkiLCJpc0FycmF5Iiwic2xpY2UiLCJKU09OIiwic3RyaW5naWZ5Iiwic3BsaWNlIiwic2l6ZSIsImlkZW50Iiwib2JqaWQiLCJvZmZzZXQiLCJ0d28iLCJudW0iLCJfZW5jb2RlVGltZSIsImVuY29kZVRpbWUiLCJ0aW1lIiwiZGF0ZSIsIkRhdGUiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJfZW5jb2RlTnVsbCIsImVuY29kZU51bGwiLCJfZW5jb2RlSW50IiwiZW5jb2RlSW50IiwiaXNCdWZmZXIiLCJudW1BcnJheSIsInRvQXJyYXkiLCJzaWduIiwidW5zaGlmdCIsImZyb20iLCJvdXQiLCJjb3B5IiwiX2VuY29kZUJvb2wiLCJlbmNvZGVCb29sIiwidmFsdWUiLCJfdXNlIiwidXNlIiwib2JqIiwiX2dldEVuY29kZXIiLCJfc2tpcERlZmF1bHQiLCJza2lwRGVmYXVsdCIsImRhdGFCdWZmZXIiLCJzdGF0ZSIsIl9iYXNlU3RhdGUiLCJkZWZhdWx0QnVmZmVyIiwidW5kZWZpbmVkIiwiX2VuY29kZVZhbHVlIiwicmVzIiwidGFnQnlOYW1lIiwidGFnQ2xhc3NCeU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/der.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst encoders = exports;\nencoders.der = __webpack_require__(/*! ./der */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/der.js\");\nencoders.pem = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/pem.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYXNuMS5qc0A1LjQuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVdDO0FBRWpCRCxTQUFTRSxHQUFHLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ3ZCSCxTQUFTSSxHQUFHLEdBQUdELG1CQUFPQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hc24xLmpzQDUuNC4xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2VuY29kZXJzL2luZGV4LmpzPzY1OGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlbmNvZGVycyA9IGV4cG9ydHM7XG5cbmVuY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5lbmNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIl0sIm5hbWVzIjpbImVuY29kZXJzIiwiZXhwb3J0cyIsImRlciIsInJlcXVpcmUiLCJwZW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/pem.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/pem.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nconst DEREncoder = __webpack_require__(/*! ./der */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/der.js\");\nfunction PEMEncoder(entity) {\n    DEREncoder.call(this, entity);\n    this.enc = \"pem\";\n}\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\nPEMEncoder.prototype.encode = function encode(data, options) {\n    const buf = DEREncoder.prototype.encode.call(this, data);\n    const p = buf.toString(\"base64\");\n    const out = [\n        \"-----BEGIN \" + options.label + \"-----\"\n    ];\n    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));\n    out.push(\"-----END \" + options.label + \"-----\");\n    return out.join(\"\\n\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYXNuMS5qc0A1LjQuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9wZW0uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxXQUFXQyxtQkFBT0EsQ0FBQztBQUV6QixNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQztBQUUzQixTQUFTRSxXQUFXQyxNQUFNO0lBQ3hCRixXQUFXRyxJQUFJLENBQUMsSUFBSSxFQUFFRDtJQUN0QixJQUFJLENBQUNFLEdBQUcsR0FBRztBQUNiO0FBQ0FOLFNBQVNHLFlBQVlEO0FBQ3JCSyxPQUFPQyxPQUFPLEdBQUdMO0FBRWpCQSxXQUFXTSxTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQSxPQUFPQyxJQUFJLEVBQUVDLE9BQU87SUFDekQsTUFBTUMsTUFBTVgsV0FBV08sU0FBUyxDQUFDQyxNQUFNLENBQUNMLElBQUksQ0FBQyxJQUFJLEVBQUVNO0lBRW5ELE1BQU1HLElBQUlELElBQUlFLFFBQVEsQ0FBQztJQUN2QixNQUFNQyxNQUFNO1FBQUUsZ0JBQWdCSixRQUFRSyxLQUFLLEdBQUc7S0FBUztJQUN2RCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUosRUFBRUssTUFBTSxFQUFFRCxLQUFLLEdBQ2pDRixJQUFJSSxJQUFJLENBQUNOLEVBQUVPLEtBQUssQ0FBQ0gsR0FBR0EsSUFBSTtJQUMxQkYsSUFBSUksSUFBSSxDQUFDLGNBQWNSLFFBQVFLLEtBQUssR0FBRztJQUN2QyxPQUFPRCxJQUFJTSxJQUFJLENBQUM7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FzbjEuanNANS40LjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvcGVtLmpzP2M2ODciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmNvbnN0IERFUkVuY29kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuXG5mdW5jdGlvbiBQRU1FbmNvZGVyKGVudGl0eSkge1xuICBERVJFbmNvZGVyLmNhbGwodGhpcywgZW50aXR5KTtcbiAgdGhpcy5lbmMgPSAncGVtJztcbn1cbmluaGVyaXRzKFBFTUVuY29kZXIsIERFUkVuY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1FbmNvZGVyO1xuXG5QRU1FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCBidWYgPSBERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUuY2FsbCh0aGlzLCBkYXRhKTtcblxuICBjb25zdCBwID0gYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgY29uc3Qgb3V0ID0gWyAnLS0tLS1CRUdJTiAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScgXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSArPSA2NClcbiAgICBvdXQucHVzaChwLnNsaWNlKGksIGkgKyA2NCkpO1xuICBvdXQucHVzaCgnLS0tLS1FTkQgJyArIG9wdGlvbnMubGFiZWwgKyAnLS0tLS0nKTtcbiAgcmV0dXJuIG91dC5qb2luKCdcXG4nKTtcbn07XG4iXSwibmFtZXMiOlsiaW5oZXJpdHMiLCJyZXF1aXJlIiwiREVSRW5jb2RlciIsIlBFTUVuY29kZXIiLCJlbnRpdHkiLCJjYWxsIiwiZW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsImVuY29kZSIsImRhdGEiLCJvcHRpb25zIiwiYnVmIiwicCIsInRvU3RyaW5nIiwib3V0IiwibGFiZWwiLCJpIiwibGVuZ3RoIiwicHVzaCIsInNsaWNlIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/pem.js\n");

/***/ })

};
;