"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana-mobile+mobile-wallet-adapter-protocol@2.2.1_@solana+wallet-adapter-base@0.9.26__40d9b862a771b1e532816b65419832b4";
exports.ids = ["vendor-chunks/@solana-mobile+mobile-wallet-adapter-protocol@2.2.1_@solana+wallet-adapter-base@0.9.26__40d9b862a771b1e532816b65419832b4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@solana-mobile+mobile-wallet-adapter-protocol@2.2.1_@solana+wallet-adapter-base@0.9.26__40d9b862a771b1e532816b65419832b4/node_modules/@solana-mobile/mobile-wallet-adapter-protocol/lib/esm/index.js":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solana-mobile+mobile-wallet-adapter-protocol@2.2.1_@solana+wallet-adapter-base@0.9.26__40d9b862a771b1e532816b65419832b4/node_modules/@solana-mobile/mobile-wallet-adapter-protocol/lib/esm/index.js ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SolanaCloneAuthorization: () => (/* binding */ SolanaCloneAuthorization),\n/* harmony export */   SolanaMobileWalletAdapterError: () => (/* binding */ SolanaMobileWalletAdapterError),\n/* harmony export */   SolanaMobileWalletAdapterErrorCode: () => (/* binding */ SolanaMobileWalletAdapterErrorCode),\n/* harmony export */   SolanaMobileWalletAdapterProtocolError: () => (/* binding */ SolanaMobileWalletAdapterProtocolError),\n/* harmony export */   SolanaMobileWalletAdapterProtocolErrorCode: () => (/* binding */ SolanaMobileWalletAdapterProtocolErrorCode),\n/* harmony export */   SolanaSignInWithSolana: () => (/* binding */ SolanaSignInWithSolana),\n/* harmony export */   SolanaSignTransactions: () => (/* binding */ SolanaSignTransactions),\n/* harmony export */   startRemoteScenario: () => (/* binding */ startRemoteScenario),\n/* harmony export */   transact: () => (/* binding */ transact)\n/* harmony export */ });\n/* harmony import */ var _solana_wallet_standard_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/wallet-standard-util */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-standard-util@1.1.2/node_modules/@solana/wallet-standard-util/lib/esm/signIn.js\");\n\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaMobileWalletAdapterErrorCode = {\n    ERROR_ASSOCIATION_PORT_OUT_OF_RANGE: \"ERROR_ASSOCIATION_PORT_OUT_OF_RANGE\",\n    ERROR_REFLECTOR_ID_OUT_OF_RANGE: \"ERROR_REFLECTOR_ID_OUT_OF_RANGE\",\n    ERROR_FORBIDDEN_WALLET_BASE_URL: \"ERROR_FORBIDDEN_WALLET_BASE_URL\",\n    ERROR_SECURE_CONTEXT_REQUIRED: \"ERROR_SECURE_CONTEXT_REQUIRED\",\n    ERROR_SESSION_CLOSED: \"ERROR_SESSION_CLOSED\",\n    ERROR_SESSION_TIMEOUT: \"ERROR_SESSION_TIMEOUT\",\n    ERROR_WALLET_NOT_FOUND: \"ERROR_WALLET_NOT_FOUND\",\n    ERROR_INVALID_PROTOCOL_VERSION: \"ERROR_INVALID_PROTOCOL_VERSION\",\n    ERROR_BROWSER_NOT_SUPPORTED: \"ERROR_BROWSER_NOT_SUPPORTED\"\n};\nclass SolanaMobileWalletAdapterError extends Error {\n    constructor(...args){\n        const [code, message, data] = args;\n        super(message);\n        this.code = code;\n        this.data = data;\n        this.name = \"SolanaMobileWalletAdapterError\";\n    }\n}\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaMobileWalletAdapterProtocolErrorCode = {\n    // Keep these in sync with `mobilewalletadapter/common/ProtocolContract.java`.\n    ERROR_AUTHORIZATION_FAILED: -1,\n    ERROR_INVALID_PAYLOADS: -2,\n    ERROR_NOT_SIGNED: -3,\n    ERROR_NOT_SUBMITTED: -4,\n    ERROR_TOO_MANY_PAYLOADS: -5,\n    ERROR_ATTEST_ORIGIN_ANDROID: -100\n};\nclass SolanaMobileWalletAdapterProtocolError extends Error {\n    constructor(...args){\n        const [jsonRpcMessageId, code, message, data] = args;\n        super(message);\n        this.code = code;\n        this.data = data;\n        this.jsonRpcMessageId = jsonRpcMessageId;\n        this.name = \"SolanaMobileWalletAdapterProtocolError\";\n    }\n}\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction encode(input) {\n    return window.btoa(input);\n}\nfunction fromUint8Array(byteArray, urlsafe) {\n    const base64 = window.btoa(String.fromCharCode.call(null, ...byteArray));\n    if (urlsafe) {\n        return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n    } else return base64;\n}\nfunction toUint8Array(base64EncodedByteArray) {\n    return new Uint8Array(window.atob(base64EncodedByteArray).split(\"\").map((c)=>c.charCodeAt(0)));\n}\nfunction createHelloReq(ecdhPublicKey, associationKeypairPrivateKey) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const publicKeyBuffer = yield crypto.subtle.exportKey(\"raw\", ecdhPublicKey);\n        const signatureBuffer = yield crypto.subtle.sign({\n            hash: \"SHA-256\",\n            name: \"ECDSA\"\n        }, associationKeypairPrivateKey, publicKeyBuffer);\n        const response = new Uint8Array(publicKeyBuffer.byteLength + signatureBuffer.byteLength);\n        response.set(new Uint8Array(publicKeyBuffer), 0);\n        response.set(new Uint8Array(signatureBuffer), publicKeyBuffer.byteLength);\n        return response;\n    });\n}\nfunction createSIWSMessage(payload) {\n    return (0,_solana_wallet_standard_util__WEBPACK_IMPORTED_MODULE_0__.createSignInMessageText)(payload);\n}\nfunction createSIWSMessageBase64(payload) {\n    return encode(createSIWSMessage(payload));\n}\n// optional features\nconst SolanaSignTransactions = \"solana:signTransactions\";\nconst SolanaCloneAuthorization = \"solana:cloneAuthorization\";\nconst SolanaSignInWithSolana = \"solana:signInWithSolana\";\n/**\n * Creates a {@link MobileWallet} proxy that handles backwards compatibility and API to RPC conversion.\n *\n * @param protocolVersion the protocol version in use for this session/request\n * @param protocolRequestHandler callback function that handles sending the RPC request to the wallet endpoint.\n * @returns a {@link MobileWallet} proxy\n */ function createMobileWalletProxy(protocolVersion, protocolRequestHandler) {\n    return new Proxy({}, {\n        get (target, p) {\n            // Wrapping a Proxy in a promise results in the Proxy being asked for a 'then' property so must \n            // return null if 'then' is called on this proxy to let the 'resolve()' call know this is not a promise.\n            // see: https://stackoverflow.com/a/53890904\n            //@ts-ignore\n            if (p === \"then\") {\n                return null;\n            }\n            if (target[p] == null) {\n                target[p] = function(inputParams) {\n                    return __awaiter(this, void 0, void 0, function*() {\n                        const { method, params } = handleMobileWalletRequest(p, inputParams, protocolVersion);\n                        const result = yield protocolRequestHandler(method, params);\n                        // if the request tried to sign in but the wallet did not return a sign in result, fallback on message signing\n                        if (method === \"authorize\" && params.sign_in_payload && !result.sign_in_result) {\n                            result[\"sign_in_result\"] = yield signInFallback(params.sign_in_payload, result, protocolRequestHandler);\n                        }\n                        return handleMobileWalletResponse(p, result, protocolVersion);\n                    });\n                };\n            }\n            return target[p];\n        },\n        defineProperty () {\n            return false;\n        },\n        deleteProperty () {\n            return false;\n        }\n    });\n}\n/**\n * Handles all {@link MobileWallet} API requests and determines the correct MWA RPC method and params to call.\n * This handles backwards compatibility, based on the provided @protocolVersion.\n *\n * @param methodName the name of {@link MobileWallet} method that was called\n * @param methodParams the parameters that were passed to the method\n * @param protocolVersion the protocol version in use for this session/request\n * @returns the RPC request method and params that should be sent to the wallet endpoint\n */ function handleMobileWalletRequest(methodName, methodParams, protocolVersion) {\n    let params = methodParams;\n    let method = methodName.toString().replace(/[A-Z]/g, (letter)=>`_${letter.toLowerCase()}`).toLowerCase();\n    switch(methodName){\n        case \"authorize\":\n            {\n                let { chain } = params;\n                if (protocolVersion === \"legacy\") {\n                    switch(chain){\n                        case \"solana:testnet\":\n                            {\n                                chain = \"testnet\";\n                                break;\n                            }\n                        case \"solana:devnet\":\n                            {\n                                chain = \"devnet\";\n                                break;\n                            }\n                        case \"solana:mainnet\":\n                            {\n                                chain = \"mainnet-beta\";\n                                break;\n                            }\n                        default:\n                            {\n                                chain = params.cluster;\n                            }\n                    }\n                    params.cluster = chain;\n                } else {\n                    switch(chain){\n                        case \"testnet\":\n                        case \"devnet\":\n                            {\n                                chain = `solana:${chain}`;\n                                break;\n                            }\n                        case \"mainnet-beta\":\n                            {\n                                chain = \"solana:mainnet\";\n                                break;\n                            }\n                    }\n                    params.chain = chain;\n                }\n            }\n        case \"reauthorize\":\n            {\n                const { auth_token, identity } = params;\n                if (auth_token) {\n                    switch(protocolVersion){\n                        case \"legacy\":\n                            {\n                                method = \"reauthorize\";\n                                params = {\n                                    auth_token: auth_token,\n                                    identity: identity\n                                };\n                                break;\n                            }\n                        default:\n                            {\n                                method = \"authorize\";\n                                break;\n                            }\n                    }\n                }\n                break;\n            }\n    }\n    return {\n        method,\n        params\n    };\n}\n/**\n * Handles all {@link MobileWallet} API responses and modifies the response for backwards compatibility, if needed\n *\n * @param method the {@link MobileWallet} method that was called\n * @param response the original response that was returned by the method call\n * @param protocolVersion the protocol version in use for this session/request\n * @returns the possibly modified response\n */ function handleMobileWalletResponse(method, response, protocolVersion) {\n    switch(method){\n        case \"getCapabilities\":\n            {\n                const capabilities = response;\n                switch(protocolVersion){\n                    case \"legacy\":\n                        {\n                            const features = [\n                                SolanaSignTransactions\n                            ];\n                            if (capabilities.supports_clone_authorization === true) {\n                                features.push(SolanaCloneAuthorization);\n                            }\n                            return Object.assign(Object.assign({}, capabilities), {\n                                features: features\n                            });\n                        }\n                    case \"v1\":\n                        {\n                            return Object.assign(Object.assign({}, capabilities), {\n                                supports_sign_and_send_transactions: true,\n                                supports_clone_authorization: capabilities.features.includes(SolanaCloneAuthorization)\n                            });\n                        }\n                }\n            }\n    }\n    return response;\n}\nfunction signInFallback(signInPayload, authorizationResult, protocolRequestHandler) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function*() {\n        const domain = (_a = signInPayload.domain) !== null && _a !== void 0 ? _a : window.location.host;\n        const address = authorizationResult.accounts[0].address;\n        const siwsMessage = createSIWSMessageBase64(Object.assign(Object.assign({}, signInPayload), {\n            domain,\n            address\n        }));\n        const signMessageResult = yield protocolRequestHandler(\"sign_messages\", {\n            addresses: [\n                address\n            ],\n            payloads: [\n                siwsMessage\n            ]\n        });\n        const signInResult = {\n            address: address,\n            signed_message: siwsMessage,\n            signature: signMessageResult.signed_payloads[0].slice(siwsMessage.length)\n        };\n        return signInResult;\n    });\n}\nconst SEQUENCE_NUMBER_BYTES = 4;\nfunction createSequenceNumberVector(sequenceNumber) {\n    if (sequenceNumber >= 4294967296) {\n        throw new Error(\"Outbound sequence number overflow. The maximum sequence number is 32-bytes.\");\n    }\n    const byteArray = new ArrayBuffer(SEQUENCE_NUMBER_BYTES);\n    const view = new DataView(byteArray);\n    view.setUint32(0, sequenceNumber, /* littleEndian */ false);\n    return new Uint8Array(byteArray);\n}\nconst INITIALIZATION_VECTOR_BYTES = 12;\nconst ENCODED_PUBLIC_KEY_LENGTH_BYTES = 65;\nfunction encryptMessage(plaintext, sequenceNumber, sharedSecret) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const sequenceNumberVector = createSequenceNumberVector(sequenceNumber);\n        const initializationVector = new Uint8Array(INITIALIZATION_VECTOR_BYTES);\n        crypto.getRandomValues(initializationVector);\n        const ciphertext = yield crypto.subtle.encrypt(getAlgorithmParams(sequenceNumberVector, initializationVector), sharedSecret, new TextEncoder().encode(plaintext));\n        const response = new Uint8Array(sequenceNumberVector.byteLength + initializationVector.byteLength + ciphertext.byteLength);\n        response.set(new Uint8Array(sequenceNumberVector), 0);\n        response.set(new Uint8Array(initializationVector), sequenceNumberVector.byteLength);\n        response.set(new Uint8Array(ciphertext), sequenceNumberVector.byteLength + initializationVector.byteLength);\n        return response;\n    });\n}\nfunction decryptMessage(message, sharedSecret) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const sequenceNumberVector = message.slice(0, SEQUENCE_NUMBER_BYTES);\n        const initializationVector = message.slice(SEQUENCE_NUMBER_BYTES, SEQUENCE_NUMBER_BYTES + INITIALIZATION_VECTOR_BYTES);\n        const ciphertext = message.slice(SEQUENCE_NUMBER_BYTES + INITIALIZATION_VECTOR_BYTES);\n        const plaintextBuffer = yield crypto.subtle.decrypt(getAlgorithmParams(sequenceNumberVector, initializationVector), sharedSecret, ciphertext);\n        const plaintext = getUtf8Decoder().decode(plaintextBuffer);\n        return plaintext;\n    });\n}\nfunction getAlgorithmParams(sequenceNumber, initializationVector) {\n    return {\n        additionalData: sequenceNumber,\n        iv: initializationVector,\n        name: \"AES-GCM\",\n        tagLength: 128\n    };\n}\nlet _utf8Decoder;\nfunction getUtf8Decoder() {\n    if (_utf8Decoder === undefined) {\n        _utf8Decoder = new TextDecoder(\"utf-8\");\n    }\n    return _utf8Decoder;\n}\nfunction generateAssociationKeypair() {\n    return __awaiter(this, void 0, void 0, function*() {\n        return yield crypto.subtle.generateKey({\n            name: \"ECDSA\",\n            namedCurve: \"P-256\"\n        }, false, [\n            \"sign\"\n        ]);\n    });\n}\nfunction generateECDHKeypair() {\n    return __awaiter(this, void 0, void 0, function*() {\n        return yield crypto.subtle.generateKey({\n            name: \"ECDH\",\n            namedCurve: \"P-256\"\n        }, false, [\n            \"deriveKey\",\n            \"deriveBits\"\n        ]);\n    });\n}\n// https://stackoverflow.com/a/9458996/802047\nfunction arrayBufferToBase64String(buffer) {\n    let binary = \"\";\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for(let ii = 0; ii < len; ii++){\n        binary += String.fromCharCode(bytes[ii]);\n    }\n    return window.btoa(binary);\n}\nfunction getRandomAssociationPort() {\n    return assertAssociationPort(49152 + Math.floor(Math.random() * (65535 - 49152 + 1)));\n}\nfunction assertAssociationPort(port) {\n    if (port < 49152 || port > 65535) {\n        throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_ASSOCIATION_PORT_OUT_OF_RANGE, `Association port number must be between 49152 and 65535. ${port} given.`, {\n            port\n        });\n    }\n    return port;\n}\nfunction getStringWithURLUnsafeCharactersReplaced(unsafeBase64EncodedString) {\n    return unsafeBase64EncodedString.replace(/[/+=]/g, (m)=>({\n            \"/\": \"_\",\n            \"+\": \"-\",\n            \"=\": \".\"\n        })[m]);\n}\nconst INTENT_NAME = \"solana-wallet\";\nfunction getPathParts(pathString) {\n    return pathString// Strip leading and trailing slashes\n    .replace(/(^\\/+|\\/+$)/g, \"\")// Return an array of directories\n    .split(\"/\");\n}\nfunction getIntentURL(methodPathname, intentUrlBase) {\n    let baseUrl = null;\n    if (intentUrlBase) {\n        try {\n            baseUrl = new URL(intentUrlBase);\n        } catch (_a) {} // eslint-disable-line no-empty\n        if ((baseUrl === null || baseUrl === void 0 ? void 0 : baseUrl.protocol) !== \"https:\") {\n            throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_FORBIDDEN_WALLET_BASE_URL, \"Base URLs supplied by wallets must be valid `https` URLs\");\n        }\n    }\n    baseUrl || (baseUrl = new URL(`${INTENT_NAME}:/`));\n    const pathname = methodPathname.startsWith(\"/\") ? methodPathname : [\n        ...getPathParts(baseUrl.pathname),\n        ...getPathParts(methodPathname)\n    ].join(\"/\");\n    return new URL(pathname, baseUrl);\n}\nfunction getAssociateAndroidIntentURL(associationPublicKey, putativePort, associationURLBase, protocolVersions = [\n    \"v1\"\n]) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const associationPort = assertAssociationPort(putativePort);\n        const exportedKey = yield crypto.subtle.exportKey(\"raw\", associationPublicKey);\n        const encodedKey = arrayBufferToBase64String(exportedKey);\n        const url = getIntentURL(\"v1/associate/local\", associationURLBase);\n        url.searchParams.set(\"association\", getStringWithURLUnsafeCharactersReplaced(encodedKey));\n        url.searchParams.set(\"port\", `${associationPort}`);\n        protocolVersions.forEach((version)=>{\n            url.searchParams.set(\"v\", version);\n        });\n        return url;\n    });\n}\nfunction getRemoteAssociateAndroidIntentURL(associationPublicKey, hostAuthority, reflectorId, associationURLBase, protocolVersions = [\n    \"v1\"\n]) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const exportedKey = yield crypto.subtle.exportKey(\"raw\", associationPublicKey);\n        const encodedKey = arrayBufferToBase64String(exportedKey);\n        const url = getIntentURL(\"v1/associate/remote\", associationURLBase);\n        url.searchParams.set(\"association\", getStringWithURLUnsafeCharactersReplaced(encodedKey));\n        url.searchParams.set(\"reflector\", `${hostAuthority}`);\n        url.searchParams.set(\"id\", `${fromUint8Array(reflectorId, true)}`);\n        protocolVersions.forEach((version)=>{\n            url.searchParams.set(\"v\", version);\n        });\n        return url;\n    });\n}\nfunction encryptJsonRpcMessage(jsonRpcMessage, sharedSecret) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const plaintext = JSON.stringify(jsonRpcMessage);\n        const sequenceNumber = jsonRpcMessage.id;\n        return encryptMessage(plaintext, sequenceNumber, sharedSecret);\n    });\n}\nfunction decryptJsonRpcMessage(message, sharedSecret) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const plaintext = yield decryptMessage(message, sharedSecret);\n        const jsonRpcMessage = JSON.parse(plaintext);\n        if (Object.hasOwnProperty.call(jsonRpcMessage, \"error\")) {\n            throw new SolanaMobileWalletAdapterProtocolError(jsonRpcMessage.id, jsonRpcMessage.error.code, jsonRpcMessage.error.message);\n        }\n        return jsonRpcMessage;\n    });\n}\nfunction parseHelloRsp(payloadBuffer, associationPublicKey, ecdhPrivateKey) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const [associationPublicKeyBuffer, walletPublicKey] = yield Promise.all([\n            crypto.subtle.exportKey(\"raw\", associationPublicKey),\n            crypto.subtle.importKey(\"raw\", payloadBuffer.slice(0, ENCODED_PUBLIC_KEY_LENGTH_BYTES), {\n                name: \"ECDH\",\n                namedCurve: \"P-256\"\n            }, false, [])\n        ]);\n        const sharedSecret = yield crypto.subtle.deriveBits({\n            name: \"ECDH\",\n            public: walletPublicKey\n        }, ecdhPrivateKey, 256);\n        const ecdhSecretKey = yield crypto.subtle.importKey(\"raw\", sharedSecret, \"HKDF\", false, [\n            \"deriveKey\"\n        ]);\n        const aesKeyMaterialVal = yield crypto.subtle.deriveKey({\n            name: \"HKDF\",\n            hash: \"SHA-256\",\n            salt: new Uint8Array(associationPublicKeyBuffer),\n            info: new Uint8Array()\n        }, ecdhSecretKey, {\n            name: \"AES-GCM\",\n            length: 128\n        }, false, [\n            \"encrypt\",\n            \"decrypt\"\n        ]);\n        return aesKeyMaterialVal;\n    });\n}\nfunction parseSessionProps(message, sharedSecret) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const plaintext = yield decryptMessage(message, sharedSecret);\n        const jsonProperties = JSON.parse(plaintext);\n        let protocolVersion = \"legacy\";\n        if (Object.hasOwnProperty.call(jsonProperties, \"v\")) {\n            switch(jsonProperties.v){\n                case 1:\n                case \"1\":\n                case \"v1\":\n                    protocolVersion = \"v1\";\n                    break;\n                case \"legacy\":\n                    protocolVersion = \"legacy\";\n                    break;\n                default:\n                    throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_INVALID_PROTOCOL_VERSION, `Unknown/unsupported protocol version: ${jsonProperties.v}`);\n            }\n        }\n        return {\n            protocol_version: protocolVersion\n        };\n    });\n}\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst Browser = {\n    Firefox: 0,\n    Other: 1\n};\nfunction assertUnreachable(x) {\n    return x;\n}\nfunction getBrowser() {\n    return navigator.userAgent.indexOf(\"Firefox/\") !== -1 ? Browser.Firefox : Browser.Other;\n}\nfunction getDetectionPromise() {\n    // Chrome and others silently fail if a custom protocol is not supported.\n    // For these, we wait to see if the browser is navigated away from in\n    // a reasonable amount of time (ie. the native wallet opened).\n    return new Promise((resolve, reject)=>{\n        function cleanup() {\n            clearTimeout(timeoutId);\n            window.removeEventListener(\"blur\", handleBlur);\n        }\n        function handleBlur() {\n            cleanup();\n            resolve();\n        }\n        window.addEventListener(\"blur\", handleBlur);\n        const timeoutId = setTimeout(()=>{\n            cleanup();\n            reject();\n        }, 3000);\n    });\n}\nlet _frame = null;\nfunction launchUrlThroughHiddenFrame(url) {\n    if (_frame == null) {\n        _frame = document.createElement(\"iframe\");\n        _frame.style.display = \"none\";\n        document.body.appendChild(_frame);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _frame.contentWindow.location.href = url.toString();\n}\nfunction launchAssociation(associationUrl) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (associationUrl.protocol === \"https:\") {\n            // The association URL is an Android 'App Link' or iOS 'Universal Link'.\n            // These are regular web URLs that are designed to launch an app if it\n            // is installed or load the actual target webpage if not.\n            window.location.assign(associationUrl);\n        } else {\n            // The association URL has a custom protocol (eg. `solana-wallet:`)\n            try {\n                const browser = getBrowser();\n                switch(browser){\n                    case Browser.Firefox:\n                        // If a custom protocol is not supported in Firefox, it throws.\n                        launchUrlThroughHiddenFrame(associationUrl);\n                        break;\n                    case Browser.Other:\n                        {\n                            const detectionPromise = getDetectionPromise();\n                            window.location.assign(associationUrl);\n                            yield detectionPromise;\n                            break;\n                        }\n                    default:\n                        assertUnreachable(browser);\n                }\n            } catch (e) {\n                throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_WALLET_NOT_FOUND, \"Found no installed wallet that supports the mobile wallet protocol.\");\n            }\n        }\n    });\n}\nfunction startSession(associationPublicKey, associationURLBase) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const randomAssociationPort = getRandomAssociationPort();\n        const associationUrl = yield getAssociateAndroidIntentURL(associationPublicKey, randomAssociationPort, associationURLBase);\n        yield launchAssociation(associationUrl);\n        return randomAssociationPort;\n    });\n}\nconst WEBSOCKET_CONNECTION_CONFIG = {\n    /**\n     * 300 milliseconds is a generally accepted threshold for what someone\n     * would consider an acceptable response time for a user interface\n     * after having performed a low-attention tapping task. We set the initial\n     * interval at which we wait for the wallet to set up the websocket at\n     * half this, as per the Nyquist frequency, with a progressive backoff\n     * sequence from there. The total wait time is 30s, which allows for the\n     * user to be presented with a disambiguation dialog, select a wallet, and\n     * for the wallet app to subsequently start.\n     */ retryDelayScheduleMs: [\n        150,\n        150,\n        200,\n        500,\n        500,\n        750,\n        750,\n        1000\n    ],\n    timeoutMs: 30000\n};\nconst WEBSOCKET_PROTOCOL_BINARY = \"com.solana.mobilewalletadapter.v1\";\nconst WEBSOCKET_PROTOCOL_BASE64 = \"com.solana.mobilewalletadapter.v1.base64\";\nfunction assertSecureContext() {\n    if (true) {\n        throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SECURE_CONTEXT_REQUIRED, \"The mobile wallet adapter protocol must be used in a secure context (`https`).\");\n    }\n}\nfunction assertSecureEndpointSpecificURI(walletUriBase) {\n    let url;\n    try {\n        url = new URL(walletUriBase);\n    } catch (_a) {\n        throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_FORBIDDEN_WALLET_BASE_URL, \"Invalid base URL supplied by wallet\");\n    }\n    if (url.protocol !== \"https:\") {\n        throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_FORBIDDEN_WALLET_BASE_URL, \"Base URLs supplied by wallets must be valid `https` URLs\");\n    }\n}\nfunction getSequenceNumberFromByteArray(byteArray) {\n    const view = new DataView(byteArray);\n    return view.getUint32(0, /* littleEndian */ false);\n}\nfunction decodeVarLong(byteArray) {\n    var bytes = new Uint8Array(byteArray), l = byteArray.byteLength, limit = 10, value = 0, offset = 0, b;\n    do {\n        if (offset >= l || offset > limit) throw new RangeError(\"Failed to decode varint\");\n        b = bytes[offset++];\n        value |= (b & 0x7F) << 7 * offset;\n    }while (b >= 0x80);\n    return {\n        value,\n        offset\n    };\n}\nfunction getReflectorIdFromByteArray(byteArray) {\n    let { value: length, offset } = decodeVarLong(byteArray);\n    return new Uint8Array(byteArray.slice(offset, offset + length));\n}\nfunction transact(callback, config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        assertSecureContext();\n        const associationKeypair = yield generateAssociationKeypair();\n        const sessionPort = yield startSession(associationKeypair.publicKey, config === null || config === void 0 ? void 0 : config.baseUri);\n        const websocketURL = `ws://localhost:${sessionPort}/solana-wallet`;\n        let connectionStartTime;\n        const getNextRetryDelayMs = (()=>{\n            const schedule = [\n                ...WEBSOCKET_CONNECTION_CONFIG.retryDelayScheduleMs\n            ];\n            return ()=>schedule.length > 1 ? schedule.shift() : schedule[0];\n        })();\n        let nextJsonRpcMessageId = 1;\n        let lastKnownInboundSequenceNumber = 0;\n        let state = {\n            __type: \"disconnected\"\n        };\n        return new Promise((resolve, reject)=>{\n            let socket;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const jsonRpcResponsePromises = {};\n            const handleOpen = ()=>__awaiter(this, void 0, void 0, function*() {\n                    if (state.__type !== \"connecting\") {\n                        console.warn(\"Expected adapter state to be `connecting` at the moment the websocket opens. \" + `Got \\`${state.__type}\\`.`);\n                        return;\n                    }\n                    socket.removeEventListener(\"open\", handleOpen);\n                    // previous versions of this library and walletlib incorrectly implemented the MWA session \n                    // establishment protocol for local connections. The dapp is supposed to wait for the \n                    // APP_PING message before sending the HELLO_REQ. Instead, the dapp was sending the HELLO_REQ \n                    // immediately upon connection to the websocket server regardless of wether or not an \n                    // APP_PING was sent by the wallet/websocket server. We must continue to support this behavior \n                    // in case the user is using a wallet that has not updated their walletlib implementation. \n                    const { associationKeypair } = state;\n                    const ecdhKeypair = yield generateECDHKeypair();\n                    socket.send((yield createHelloReq(ecdhKeypair.publicKey, associationKeypair.privateKey)));\n                    state = {\n                        __type: \"hello_req_sent\",\n                        associationPublicKey: associationKeypair.publicKey,\n                        ecdhPrivateKey: ecdhKeypair.privateKey\n                    };\n                });\n            const handleClose = (evt)=>{\n                if (evt.wasClean) {\n                    state = {\n                        __type: \"disconnected\"\n                    };\n                } else {\n                    reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_CLOSED, `The wallet session dropped unexpectedly (${evt.code}: ${evt.reason}).`, {\n                        closeEvent: evt\n                    }));\n                }\n                disposeSocket();\n            };\n            const handleError = (_evt)=>__awaiter(this, void 0, void 0, function*() {\n                    disposeSocket();\n                    if (Date.now() - connectionStartTime >= WEBSOCKET_CONNECTION_CONFIG.timeoutMs) {\n                        reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_TIMEOUT, `Failed to connect to the wallet websocket at ${websocketURL}.`));\n                    } else {\n                        yield new Promise((resolve)=>{\n                            const retryDelayMs = getNextRetryDelayMs();\n                            retryWaitTimeoutId = window.setTimeout(resolve, retryDelayMs);\n                        });\n                        attemptSocketConnection();\n                    }\n                });\n            const handleMessage = (evt)=>__awaiter(this, void 0, void 0, function*() {\n                    const responseBuffer = yield evt.data.arrayBuffer();\n                    switch(state.__type){\n                        case \"connecting\":\n                            if (responseBuffer.byteLength !== 0) {\n                                throw new Error(\"Encountered unexpected message while connecting\");\n                            }\n                            const ecdhKeypair = yield generateECDHKeypair();\n                            socket.send((yield createHelloReq(ecdhKeypair.publicKey, associationKeypair.privateKey)));\n                            state = {\n                                __type: \"hello_req_sent\",\n                                associationPublicKey: associationKeypair.publicKey,\n                                ecdhPrivateKey: ecdhKeypair.privateKey\n                            };\n                            break;\n                        case \"connected\":\n                            try {\n                                const sequenceNumberVector = responseBuffer.slice(0, SEQUENCE_NUMBER_BYTES);\n                                const sequenceNumber = getSequenceNumberFromByteArray(sequenceNumberVector);\n                                if (sequenceNumber !== lastKnownInboundSequenceNumber + 1) {\n                                    throw new Error(\"Encrypted message has invalid sequence number\");\n                                }\n                                lastKnownInboundSequenceNumber = sequenceNumber;\n                                const jsonRpcMessage = yield decryptJsonRpcMessage(responseBuffer, state.sharedSecret);\n                                const responsePromise = jsonRpcResponsePromises[jsonRpcMessage.id];\n                                delete jsonRpcResponsePromises[jsonRpcMessage.id];\n                                responsePromise.resolve(jsonRpcMessage.result);\n                            } catch (e) {\n                                if (e instanceof SolanaMobileWalletAdapterProtocolError) {\n                                    const responsePromise = jsonRpcResponsePromises[e.jsonRpcMessageId];\n                                    delete jsonRpcResponsePromises[e.jsonRpcMessageId];\n                                    responsePromise.reject(e);\n                                } else {\n                                    throw e;\n                                }\n                            }\n                            break;\n                        case \"hello_req_sent\":\n                            {\n                                // if we receive an APP_PING message (empty message), resend the HELLO_REQ (see above)\n                                if (responseBuffer.byteLength === 0) {\n                                    const ecdhKeypair = yield generateECDHKeypair();\n                                    socket.send((yield createHelloReq(ecdhKeypair.publicKey, associationKeypair.privateKey)));\n                                    state = {\n                                        __type: \"hello_req_sent\",\n                                        associationPublicKey: associationKeypair.publicKey,\n                                        ecdhPrivateKey: ecdhKeypair.privateKey\n                                    };\n                                    break;\n                                }\n                                const sharedSecret = yield parseHelloRsp(responseBuffer, state.associationPublicKey, state.ecdhPrivateKey);\n                                const sessionPropertiesBuffer = responseBuffer.slice(ENCODED_PUBLIC_KEY_LENGTH_BYTES);\n                                const sessionProperties = sessionPropertiesBuffer.byteLength !== 0 ? yield (()=>__awaiter(this, void 0, void 0, function*() {\n                                        const sequenceNumberVector = sessionPropertiesBuffer.slice(0, SEQUENCE_NUMBER_BYTES);\n                                        const sequenceNumber = getSequenceNumberFromByteArray(sequenceNumberVector);\n                                        if (sequenceNumber !== lastKnownInboundSequenceNumber + 1) {\n                                            throw new Error(\"Encrypted message has invalid sequence number\");\n                                        }\n                                        lastKnownInboundSequenceNumber = sequenceNumber;\n                                        return parseSessionProps(sessionPropertiesBuffer, sharedSecret);\n                                    }))() : {\n                                    protocol_version: \"legacy\"\n                                };\n                                state = {\n                                    __type: \"connected\",\n                                    sharedSecret,\n                                    sessionProperties\n                                };\n                                const wallet = createMobileWalletProxy(sessionProperties.protocol_version, (method, params)=>__awaiter(this, void 0, void 0, function*() {\n                                        const id = nextJsonRpcMessageId++;\n                                        socket.send((yield encryptJsonRpcMessage({\n                                            id,\n                                            jsonrpc: \"2.0\",\n                                            method,\n                                            params: params !== null && params !== void 0 ? params : {}\n                                        }, sharedSecret)));\n                                        return new Promise((resolve, reject)=>{\n                                            jsonRpcResponsePromises[id] = {\n                                                resolve (result) {\n                                                    switch(method){\n                                                        case \"authorize\":\n                                                        case \"reauthorize\":\n                                                            {\n                                                                const { wallet_uri_base } = result;\n                                                                if (wallet_uri_base != null) {\n                                                                    try {\n                                                                        assertSecureEndpointSpecificURI(wallet_uri_base);\n                                                                    } catch (e) {\n                                                                        reject(e);\n                                                                        return;\n                                                                    }\n                                                                }\n                                                                break;\n                                                            }\n                                                    }\n                                                    resolve(result);\n                                                },\n                                                reject\n                                            };\n                                        });\n                                    }));\n                                try {\n                                    resolve((yield callback(wallet)));\n                                } catch (e) {\n                                    reject(e);\n                                } finally{\n                                    disposeSocket();\n                                    socket.close();\n                                }\n                                break;\n                            }\n                    }\n                });\n            let disposeSocket;\n            let retryWaitTimeoutId;\n            const attemptSocketConnection = ()=>{\n                if (disposeSocket) {\n                    disposeSocket();\n                }\n                state = {\n                    __type: \"connecting\",\n                    associationKeypair\n                };\n                if (connectionStartTime === undefined) {\n                    connectionStartTime = Date.now();\n                }\n                socket = new WebSocket(websocketURL, [\n                    WEBSOCKET_PROTOCOL_BINARY\n                ]);\n                socket.addEventListener(\"open\", handleOpen);\n                socket.addEventListener(\"close\", handleClose);\n                socket.addEventListener(\"error\", handleError);\n                socket.addEventListener(\"message\", handleMessage);\n                disposeSocket = ()=>{\n                    window.clearTimeout(retryWaitTimeoutId);\n                    socket.removeEventListener(\"open\", handleOpen);\n                    socket.removeEventListener(\"close\", handleClose);\n                    socket.removeEventListener(\"error\", handleError);\n                    socket.removeEventListener(\"message\", handleMessage);\n                };\n            };\n            attemptSocketConnection();\n        });\n    });\n}\nfunction startRemoteScenario(config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        assertSecureContext();\n        const associationKeypair = yield generateAssociationKeypair();\n        const websocketURL = `wss://${config === null || config === void 0 ? void 0 : config.remoteHostAuthority}/reflect`;\n        let connectionStartTime;\n        const getNextRetryDelayMs = (()=>{\n            const schedule = [\n                ...WEBSOCKET_CONNECTION_CONFIG.retryDelayScheduleMs\n            ];\n            return ()=>schedule.length > 1 ? schedule.shift() : schedule[0];\n        })();\n        let nextJsonRpcMessageId = 1;\n        let lastKnownInboundSequenceNumber = 0;\n        let encoding;\n        let state = {\n            __type: \"disconnected\"\n        };\n        let socket;\n        let disposeSocket;\n        let decodeBytes = (evt)=>__awaiter(this, void 0, void 0, function*() {\n                if (encoding == \"base64\") {\n                    const message = yield evt.data;\n                    return toUint8Array(message).buffer;\n                } else {\n                    return yield evt.data.arrayBuffer();\n                }\n            });\n        // Reflector Connection Phase\n        // here we connect to the reflector and wait for the REFLECTOR_ID message \n        // so we build the association URL and return that back to the caller\n        const associationUrl = yield new Promise((resolve, reject)=>{\n            const handleOpen = ()=>__awaiter(this, void 0, void 0, function*() {\n                    if (state.__type !== \"connecting\") {\n                        console.warn(\"Expected adapter state to be `connecting` at the moment the websocket opens. \" + `Got \\`${state.__type}\\`.`);\n                        return;\n                    }\n                    if (socket.protocol.includes(WEBSOCKET_PROTOCOL_BASE64)) {\n                        encoding = \"base64\";\n                    } else {\n                        encoding = \"binary\";\n                    }\n                    socket.removeEventListener(\"open\", handleOpen);\n                });\n            const handleClose = (evt)=>{\n                if (evt.wasClean) {\n                    state = {\n                        __type: \"disconnected\"\n                    };\n                } else {\n                    reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_CLOSED, `The wallet session dropped unexpectedly (${evt.code}: ${evt.reason}).`, {\n                        closeEvent: evt\n                    }));\n                }\n                disposeSocket();\n            };\n            const handleError = (_evt)=>__awaiter(this, void 0, void 0, function*() {\n                    disposeSocket();\n                    if (Date.now() - connectionStartTime >= WEBSOCKET_CONNECTION_CONFIG.timeoutMs) {\n                        reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_TIMEOUT, `Failed to connect to the wallet websocket at ${websocketURL}.`));\n                    } else {\n                        yield new Promise((resolve)=>{\n                            const retryDelayMs = getNextRetryDelayMs();\n                            retryWaitTimeoutId = window.setTimeout(resolve, retryDelayMs);\n                        });\n                        attemptSocketConnection();\n                    }\n                });\n            const handleReflectorIdMessage = (evt)=>__awaiter(this, void 0, void 0, function*() {\n                    const responseBuffer = yield decodeBytes(evt);\n                    if (state.__type === \"connecting\") {\n                        if (responseBuffer.byteLength == 0) {\n                            throw new Error(\"Encountered unexpected message while connecting\");\n                        }\n                        const reflectorId = getReflectorIdFromByteArray(responseBuffer);\n                        state = {\n                            __type: \"reflector_id_received\",\n                            reflectorId: reflectorId\n                        };\n                        const associationUrl = yield getRemoteAssociateAndroidIntentURL(associationKeypair.publicKey, config.remoteHostAuthority, reflectorId, config === null || config === void 0 ? void 0 : config.baseUri);\n                        socket.removeEventListener(\"message\", handleReflectorIdMessage);\n                        resolve(associationUrl);\n                    }\n                });\n            let retryWaitTimeoutId;\n            const attemptSocketConnection = ()=>{\n                if (disposeSocket) {\n                    disposeSocket();\n                }\n                state = {\n                    __type: \"connecting\",\n                    associationKeypair\n                };\n                if (connectionStartTime === undefined) {\n                    connectionStartTime = Date.now();\n                }\n                socket = new WebSocket(websocketURL, [\n                    WEBSOCKET_PROTOCOL_BINARY,\n                    WEBSOCKET_PROTOCOL_BASE64\n                ]);\n                socket.addEventListener(\"open\", handleOpen);\n                socket.addEventListener(\"close\", handleClose);\n                socket.addEventListener(\"error\", handleError);\n                socket.addEventListener(\"message\", handleReflectorIdMessage);\n                disposeSocket = ()=>{\n                    window.clearTimeout(retryWaitTimeoutId);\n                    socket.removeEventListener(\"open\", handleOpen);\n                    socket.removeEventListener(\"close\", handleClose);\n                    socket.removeEventListener(\"error\", handleError);\n                    socket.removeEventListener(\"message\", handleReflectorIdMessage);\n                };\n            };\n            attemptSocketConnection();\n        });\n        // Wallet Connection Phase\n        // here we return the association URL (containing the reflector ID) to the caller + \n        // a promise that will resolve the MobileWallet object once the wallet connects.\n        let sessionEstablished = false;\n        let handleClose;\n        return {\n            associationUrl,\n            close: ()=>{\n                socket.close();\n                handleClose();\n            },\n            wallet: new Promise((resolve, reject)=>{\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const jsonRpcResponsePromises = {};\n                const handleMessage = (evt)=>__awaiter(this, void 0, void 0, function*() {\n                        const responseBuffer = yield decodeBytes(evt);\n                        switch(state.__type){\n                            case \"reflector_id_received\":\n                                if (responseBuffer.byteLength !== 0) {\n                                    throw new Error(\"Encountered unexpected message while awaiting reflection\");\n                                }\n                                const ecdhKeypair = yield generateECDHKeypair();\n                                const binaryMsg = yield createHelloReq(ecdhKeypair.publicKey, associationKeypair.privateKey);\n                                if (encoding == \"base64\") {\n                                    socket.send(fromUint8Array(binaryMsg));\n                                } else {\n                                    socket.send(binaryMsg);\n                                }\n                                state = {\n                                    __type: \"hello_req_sent\",\n                                    associationPublicKey: associationKeypair.publicKey,\n                                    ecdhPrivateKey: ecdhKeypair.privateKey\n                                };\n                                break;\n                            case \"connected\":\n                                try {\n                                    const sequenceNumberVector = responseBuffer.slice(0, SEQUENCE_NUMBER_BYTES);\n                                    const sequenceNumber = getSequenceNumberFromByteArray(sequenceNumberVector);\n                                    if (sequenceNumber !== lastKnownInboundSequenceNumber + 1) {\n                                        throw new Error(\"Encrypted message has invalid sequence number\");\n                                    }\n                                    lastKnownInboundSequenceNumber = sequenceNumber;\n                                    const jsonRpcMessage = yield decryptJsonRpcMessage(responseBuffer, state.sharedSecret);\n                                    const responsePromise = jsonRpcResponsePromises[jsonRpcMessage.id];\n                                    delete jsonRpcResponsePromises[jsonRpcMessage.id];\n                                    responsePromise.resolve(jsonRpcMessage.result);\n                                } catch (e) {\n                                    if (e instanceof SolanaMobileWalletAdapterProtocolError) {\n                                        const responsePromise = jsonRpcResponsePromises[e.jsonRpcMessageId];\n                                        delete jsonRpcResponsePromises[e.jsonRpcMessageId];\n                                        responsePromise.reject(e);\n                                    } else {\n                                        throw e;\n                                    }\n                                }\n                                break;\n                            case \"hello_req_sent\":\n                                {\n                                    const sharedSecret = yield parseHelloRsp(responseBuffer, state.associationPublicKey, state.ecdhPrivateKey);\n                                    const sessionPropertiesBuffer = responseBuffer.slice(ENCODED_PUBLIC_KEY_LENGTH_BYTES);\n                                    const sessionProperties = sessionPropertiesBuffer.byteLength !== 0 ? yield (()=>__awaiter(this, void 0, void 0, function*() {\n                                            const sequenceNumberVector = sessionPropertiesBuffer.slice(0, SEQUENCE_NUMBER_BYTES);\n                                            const sequenceNumber = getSequenceNumberFromByteArray(sequenceNumberVector);\n                                            if (sequenceNumber !== lastKnownInboundSequenceNumber + 1) {\n                                                throw new Error(\"Encrypted message has invalid sequence number\");\n                                            }\n                                            lastKnownInboundSequenceNumber = sequenceNumber;\n                                            return parseSessionProps(sessionPropertiesBuffer, sharedSecret);\n                                        }))() : {\n                                        protocol_version: \"legacy\"\n                                    };\n                                    state = {\n                                        __type: \"connected\",\n                                        sharedSecret,\n                                        sessionProperties\n                                    };\n                                    const wallet = createMobileWalletProxy(sessionProperties.protocol_version, (method, params)=>__awaiter(this, void 0, void 0, function*() {\n                                            const id = nextJsonRpcMessageId++;\n                                            const binaryMsg = yield encryptJsonRpcMessage({\n                                                id,\n                                                jsonrpc: \"2.0\",\n                                                method,\n                                                params: params !== null && params !== void 0 ? params : {}\n                                            }, sharedSecret);\n                                            if (encoding == \"base64\") {\n                                                socket.send(fromUint8Array(binaryMsg));\n                                            } else {\n                                                socket.send(binaryMsg);\n                                            }\n                                            return new Promise((resolve, reject)=>{\n                                                jsonRpcResponsePromises[id] = {\n                                                    resolve (result) {\n                                                        switch(method){\n                                                            case \"authorize\":\n                                                            case \"reauthorize\":\n                                                                {\n                                                                    const { wallet_uri_base } = result;\n                                                                    if (wallet_uri_base != null) {\n                                                                        try {\n                                                                            assertSecureEndpointSpecificURI(wallet_uri_base);\n                                                                        } catch (e) {\n                                                                            reject(e);\n                                                                            return;\n                                                                        }\n                                                                    }\n                                                                    break;\n                                                                }\n                                                        }\n                                                        resolve(result);\n                                                    },\n                                                    reject\n                                                };\n                                            });\n                                        }));\n                                    sessionEstablished = true;\n                                    try {\n                                        resolve(wallet);\n                                    } catch (e) {\n                                        reject(e);\n                                    }\n                                    break;\n                                }\n                        }\n                    });\n                socket.addEventListener(\"message\", handleMessage);\n                handleClose = ()=>{\n                    socket.removeEventListener(\"message\", handleMessage);\n                    disposeSocket();\n                    if (!sessionEstablished) {\n                        reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_CLOSED, `The wallet session was closed before connection.`, {\n                            closeEvent: new CloseEvent(\"socket was closed before connection\")\n                        }));\n                    }\n                };\n            })\n        };\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solana-mobile+mobile-wallet-adapter-protocol@2.2.1_@solana+wallet-adapter-base@0.9.26__40d9b862a771b1e532816b65419832b4/node_modules/@solana-mobile/mobile-wallet-adapter-protocol/lib/esm/index.js\n");

/***/ })

};
;