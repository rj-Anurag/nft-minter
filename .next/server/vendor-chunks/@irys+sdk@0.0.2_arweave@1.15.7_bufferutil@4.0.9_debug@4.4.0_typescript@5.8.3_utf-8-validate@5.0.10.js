"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10";
exports.ids = ["vendor-chunks/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/api.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/api.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Api)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.9.0_debug@4.4.0/node_modules/axios/lib/axios.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n/* harmony import */ var _irys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./irys.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/irys.js\");\n\n\n\nclass Api {\n    constructor(config){\n        this.cookieMap = new Map();\n        if (config) this.applyConfig(config);\n    }\n    applyConfig(config) {\n        this.config = this.mergeDefaults(config);\n        this._instance = undefined;\n    }\n    getConfig() {\n        return this.config;\n    }\n    async requestInterceptor(request) {\n        const cookies = this.cookieMap.get(new URL(request.baseURL ?? \"\").host);\n        if (cookies) request.headers.cookie = cookies;\n        return request;\n    }\n    async responseInterceptor(response) {\n        const setCookie = response.headers?.[\"set-cookie\"];\n        if (setCookie) this.cookieMap.set(response.request.host, setCookie);\n        return response;\n    }\n    mergeDefaults(config) {\n        return {\n            url: config.url,\n            timeout: config.timeout ?? 20000,\n            logging: config.logging ?? false,\n            logger: config.logger ?? console.log,\n            headers: {\n                ...config.headers,\n                \"x-irys-js-sdk-version\": _irys_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].VERSION\n            },\n            withCredentials: config.withCredentials ?? false,\n            retry: {\n                retries: 3,\n                maxTimeout: 5000\n            }\n        };\n    }\n    async get(path, config) {\n        try {\n            return await this.request(path, {\n                ...config,\n                method: \"GET\"\n            });\n        } catch (error) {\n            if (error.response?.status) return error.response;\n            throw error;\n        }\n    }\n    async post(path, body, config) {\n        try {\n            return await this.request(path, {\n                data: body,\n                ...config,\n                method: \"POST\"\n            });\n        } catch (error) {\n            if (error.response?.status) return error.response;\n            throw error;\n        }\n    }\n    get instance() {\n        if (this._instance) return this._instance;\n        const instance = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n            baseURL: this.config.url.toString(),\n            timeout: this.config.timeout,\n            maxContentLength: 1024 * 1024 * 512,\n            headers: this.config.headers,\n            withCredentials: this.config.withCredentials\n        });\n        if (this.config.withCredentials) {\n            instance.interceptors.request.use(this.requestInterceptor.bind(this));\n            instance.interceptors.response.use(this.responseInterceptor.bind(this));\n        }\n        if (this.config.logging) {\n            instance.interceptors.request.use((request)=>{\n                this.config.logger(`Requesting: ${request.baseURL}/${request.url}`);\n                return request;\n            });\n            instance.interceptors.response.use((response)=>{\n                this.config.logger(`Response: ${response.config.url} - ${response.status}`);\n                return response;\n            });\n        }\n        return this._instance = instance;\n    }\n    async request(path, config) {\n        const instance = this.instance;\n        const url = config?.url ?? new URL(path, this.config.url).toString();\n        return async_retry__WEBPACK_IMPORTED_MODULE_0__((_)=>instance({\n                ...config,\n                url\n            }), {\n            ...this.config.retry,\n            ...config?.retry\n        });\n    }\n} // /**\n //  * *** To be removed when browsers catch up with the whatwg standard. ***\n //  * [Symbol.AsyncIterator] is needed to use `for-await` on the returned ReadableStream (web stream).\n //  * Feature is available in nodejs, and should be available in browsers eventually.\n //  */\n // export const addAsyncIterator = (body: ReadableStream): ReadableStream => {\n //   const bodyWithIter = body as ReadableStream<Uint8Array> & AsyncIterable<Uint8Array>;\n //   if (typeof bodyWithIter[Symbol.asyncIterator] === \"undefined\") {\n //     bodyWithIter[Symbol.asyncIterator] = webIiterator<Uint8Array>(body);\n //     return bodyWithIter;\n //   }\n //   return body;\n // };\n // const webIiterator = function <T>(stream: ReadableStream): () => AsyncGenerator<Awaited<T>, void> {\n //   return async function* iteratorGenerator<T>() {\n //     const reader = stream.getReader(); // lock\n //     try {\n //       while (true) {\n //         const { done, value } = await reader.read();\n //         if (done) return;\n //         yield value as T;\n //       }\n //     } finally {\n //       reader.releaseLock(); // unlock\n //     }\n //   };\n // };\n //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/chunkingUploader.js":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/chunkingUploader.js ***!
  \*******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChunkingUploader: () => (/* binding */ ChunkingUploader)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n/* harmony import */ var _s2ai_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./s2ai.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/s2ai.js\");\n\n\n\n\n\n\nclass ChunkingUploader extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(tokenConfig, api){\n        super({\n            captureRejections: true\n        });\n        this.paused = false;\n        this.isResume = false;\n        this.tokenConfig = tokenConfig;\n        this.arbundles = this.tokenConfig.irys.arbundles;\n        this.api = api;\n        this.token = this.tokenConfig.name;\n        this.chunkSize = 25000000;\n        this.batchSize = 5;\n        this.uploadID = \"\";\n    }\n    setResumeData(uploadID) {\n        if (uploadID) {\n            this.uploadID = uploadID;\n            this.isResume = true;\n        }\n        return this;\n    }\n    /**\n     * Note: Will return undefined unless an upload has been started.\n     * @returns\n     */ getResumeData() {\n        return this.uploadID;\n    }\n    setChunkSize(size) {\n        if (size < 1) {\n            throw new Error(\"Invalid chunk size (must be >=1)\");\n        }\n        this.chunkSize = size;\n        return this;\n    }\n    setBatchSize(size) {\n        if (size < 1) {\n            throw new Error(\"Invalid batch size (must be >=1)\");\n        }\n        this.batchSize = size;\n        return this;\n    }\n    pause() {\n        this.emit(\"pause\");\n        this.paused = true;\n    }\n    resume() {\n        this.paused = false;\n        this.emit(\"resume\");\n    }\n    async uploadTransaction(data, opts) {\n        this.uploadOptions = opts;\n        if (this.arbundles.DataItem.isDataItem(data)) {\n            return this.runUpload(data.getRaw());\n        } else {\n            return this.runUpload(data);\n        }\n    }\n    async uploadData(dataStream, options) {\n        this.uploadOptions = options?.upload;\n        return this.runUpload(dataStream, {\n            ...options\n        });\n    }\n    async runUpload(dataStream, transactionOpts) {\n        let id = this.uploadID;\n        const isTransaction = transactionOpts === undefined;\n        const headers = {\n            \"x-chunking-version\": \"2\"\n        };\n        let getres;\n        if (!id) {\n            getres = await this.api.get(`/chunks/${this.token}/-1/-1`, {\n                headers\n            });\n            _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].checkAndThrow(getres, \"Getting upload token\");\n            this.uploadID = id = getres.data.id;\n        } else {\n            getres = await this.api.get(`/chunks/${this.token}/${id}/-1`, {\n                headers\n            });\n            if (getres.status === 404) throw new Error(`Upload ID not found - your upload has probably expired.`);\n            _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].checkAndThrow(getres, \"Getting upload info\");\n            if (this.chunkSize != +getres.data.size) {\n                throw new Error(`Chunk size not equal to that of a previous upload (${+getres.data.size}).`);\n            }\n        }\n        const { max, min } = getres.data;\n        if (this.chunkSize < +min || this.chunkSize > +max) {\n            throw new Error(`Chunk size out of allowed range: ${min} - ${max}`);\n        }\n        let totalUploaded = 0;\n        const promiseFactory = (d, o, c)=>{\n            return new Promise((r)=>{\n                async_retry__WEBPACK_IMPORTED_MODULE_4__(async (bail)=>{\n                    await this.api.post(`/chunks/${this.token}/${id}/${o}`, d, {\n                        headers: {\n                            \"Content-Type\": \"application/octet-stream\",\n                            ...headers\n                        },\n                        maxBodyLength: Infinity,\n                        maxContentLength: Infinity\n                    }).then((re)=>{\n                        if (re?.status >= 300) {\n                            const e = {\n                                res: re,\n                                id: c,\n                                offset: o,\n                                size: d.length\n                            };\n                            this.emit(\"chunkError\", e);\n                            if (re?.status === 402) bail(new Error(\"Not enough funds to send data\"));\n                            throw e;\n                        }\n                        this.emit(\"chunkUpload\", {\n                            id: c,\n                            offset: o,\n                            size: d.length,\n                            totalUploaded: totalUploaded += d.length\n                        });\n                        r({\n                            o,\n                            d: re\n                        });\n                    });\n                }), {\n                    retries: 3,\n                    minTimeout: 1000,\n                    maxTimeout: 10000\n                };\n            });\n        };\n        const present = getres.data.chunks ?? [];\n        const stream = new stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough();\n        let cache = Buffer.alloc(0);\n        let ended = false;\n        let hasData = true;\n        stream.on(\"end\", ()=>ended = true);\n        stream.on(\"error\", (e)=>{\n            throw new Error(`Error processing readable: ${e}`);\n        });\n        // custom as we need to read any number of bytes.\n        const readBytes = async (size)=>{\n            while(!ended){\n                if (cache.length >= size) {\n                    data = Buffer.from(cache.slice(0, size)); // force a copy\n                    cache = cache.slice(size);\n                    return data;\n                }\n                // eslint-disable-next-line no-var\n                var data = stream.read(size);\n                if (data === null) {\n                    // wait for stream refill (perferred over setImmeadiate due to multi env support)\n                    await new Promise((r)=>setTimeout((r)=>r(true), 0, r));\n                    continue;\n                }\n                if (data.length === size) return data;\n                cache = Buffer.concat([\n                    cache,\n                    data\n                ]);\n            }\n            // flush\n            while(cache.length >= size){\n                data = Buffer.from(cache.slice(0, size)); // force a copy\n                cache = cache.slice(size);\n                return data;\n            }\n            hasData = false;\n            return cache;\n        };\n        let tx;\n        let txHeaderLength;\n        // doesn't matter if we randomise ID (anchor) between resumes, as the tx header/signing info is always uploaded last.\n        if (!isTransaction) {\n            tx = this.arbundles.createData(\"\", this.tokenConfig.getSigner(), {\n                ...transactionOpts,\n                anchor: transactionOpts?.anchor ?? crypto__WEBPACK_IMPORTED_MODULE_3__.randomBytes(32).toString(\"base64\").slice(0, 32)\n            });\n            const raw = tx.getRaw();\n            txHeaderLength = raw.length;\n            stream.write(raw);\n            totalUploaded -= raw.length;\n        }\n        if (Buffer.isBuffer(dataStream)) {\n            stream.write(dataStream);\n            stream.end();\n        } else if (\"pipe\" in dataStream) {\n            dataStream.pipe(stream);\n        } else {\n            throw new Error(\"Input data is not a buffer or a compatible stream (no .pipe method)\");\n        }\n        let offset = 0;\n        const processing = new Set();\n        let chunkID = 0;\n        let heldChunk;\n        let teeStream;\n        let deephash;\n        if (!isTransaction) {\n            teeStream = new stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough();\n            const txLength = tx.getRaw().length;\n            if (this.chunkSize < txHeaderLength) throw new Error(`Configured chunk size is too small for transaction header! (${this.chunkSize} < ${txHeaderLength})`);\n            heldChunk = await readBytes(this.chunkSize);\n            chunkID++;\n            offset += heldChunk.length;\n            teeStream.write(heldChunk.slice(txLength));\n            const sigComponents = [\n                this.arbundles.stringToBuffer(\"dataitem\"),\n                this.arbundles.stringToBuffer(\"1\"),\n                this.arbundles.stringToBuffer(tx.signatureType.toString()),\n                tx.rawOwner,\n                tx.rawTarget,\n                tx.rawAnchor,\n                tx.rawTags,\n                new _s2ai_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](teeStream)\n            ];\n            // do *not* await, this needs to process in parallel to the upload process.\n            deephash = this.arbundles.deepHash(sigComponents);\n        }\n        let nextPresent = present.pop();\n        // Consume data while there's data to read.\n        while(hasData){\n            if (this.paused) {\n                await new Promise((r)=>this.on(\"resume\", ()=>r(undefined)));\n            }\n            // do not upload data that's already present\n            if (nextPresent) {\n                const delta = +nextPresent[0] - offset;\n                if (delta <= this.chunkSize) {\n                    const bytesToSkip = nextPresent[1];\n                    const data = await readBytes(bytesToSkip);\n                    if (!isTransaction) teeStream.write(data);\n                    offset += bytesToSkip;\n                    nextPresent = present.pop();\n                    chunkID++;\n                    totalUploaded += bytesToSkip;\n                    continue;\n                }\n            }\n            const chunk = await readBytes(this.chunkSize);\n            if (!isTransaction) teeStream.write(chunk);\n            while(processing.size >= this.batchSize){\n                // get & then remove resolved promise from processing set\n                const [p] = await Promise.race(processing);\n                processing.delete(p);\n            }\n            // self-referencing promise\n            const promise = (async ()=>await promiseFactory(chunk, offset, ++chunkID))().then((value)=>[\n                    promise,\n                    value\n                ]);\n            processing.add(promise);\n            offset += chunk.length;\n        }\n        if (teeStream) teeStream.end();\n        await Promise.all(processing);\n        if (!isTransaction) {\n            const hash = await deephash;\n            const sigBytes = Buffer.from(await this.tokenConfig.getSigner().sign(hash));\n            heldChunk.set(sigBytes, 2); // tx will be the first part of the held chunk.\n            await promiseFactory(heldChunk, 0, 0);\n        }\n        // potential improvement: write chunks into a file at offsets, instead of individual chunks + doing a concatenating copy\n        const finishUpload = await this.api.post(`/chunks/${this.token}/${id}/-1`, null, {\n            headers: {\n                \"Content-Type\": \"application/octet-stream\",\n                ...headers\n            },\n            timeout: this.api.config?.timeout ?? 40000 * 10\n        });\n        if (finishUpload.status === 402) {\n            throw new Error(\"Not enough funds to send data\");\n        }\n        // this will throw if the dataItem reconstruction fails\n        _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].checkAndThrow(finishUpload, \"Finalising upload\", [\n            201\n        ]);\n        // Recover ID\n        if (finishUpload.status === 201) {\n            throw new Error(finishUpload.data);\n        }\n        finishUpload.data.verify = _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].verifyReceipt.bind({}, this.arbundles, finishUpload.data.data);\n        this.emit(\"done\", finishUpload);\n        return finishUpload;\n    }\n    get completionPromise() {\n        return new Promise((r)=>this.on(\"done\", r));\n    }\n} //# sourceMappingURL=chunkingUploader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/chunkingUploader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/fund.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/fund.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Fund)\n/* harmony export */ });\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n\n\n\nclass Fund {\n    constructor(utils){\n        this.utils = utils;\n    }\n    /**\n     * Function to Fund (send funds to) a Irys node - inherits instance token and node\n     * @param amount - amount in base units to send\n     * @param multiplier - network tx fee multiplier - only works for specific currencies\n     * @returns  - funding receipt\n     */ async fund(amount, multiplier = 1.0) {\n        const _amount = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](amount);\n        if (!_amount.isInteger()) {\n            throw new Error(\"must use an integer for funding amount\");\n        }\n        const c = this.utils.tokenConfig;\n        const to = await this.utils.getBundlerAddress(this.utils.token);\n        let fee;\n        if (c.needsFee) {\n            // winston's fee is actually for amount of data, not funds, so we have to 0 this.\n            const baseFee = await c.getFee(c.base[0] === \"winston\" ? 0 : _amount, to);\n            fee = bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isBigNumber(baseFee) ? baseFee.multipliedBy(multiplier).integerValue(bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ROUND_CEIL) : baseFee;\n        }\n        const tx = await c.createTx(_amount, to, fee);\n        let nres;\n        // eslint-disable-next-line no-useless-catch\n        try {\n            nres = await c.sendTx(tx.tx);\n        } catch (e) {\n            throw e;\n        }\n        tx.txId ??= nres;\n        if (!tx.txId) {\n            throw new Error(`Undefined transaction ID`);\n        }\n        _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].checkAndThrow(nres, `Sending transaction to the ${this.utils.token} network`);\n        let confirmError = await this.utils.confirmationPoll(tx.txId);\n        const bres = await this.submitTransaction(tx.txId).catch((e)=>{\n            confirmError = e;\n            return undefined;\n        });\n        if (!bres) {\n            throw new Error(`failed to post funding tx - ${tx.txId} - keep this id! \\n ${confirmError ? ` - ${confirmError?.message ?? confirmError}` : \"\"}`);\n        }\n        return {\n            reward: bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isBigNumber(fee) ? fee.toString() : JSON.stringify(fee),\n            target: to,\n            quantity: _amount.toString(),\n            id: tx.txId\n        };\n    }\n    async submitTransaction(transactionId) {\n        return await async_retry__WEBPACK_IMPORTED_MODULE_0__(async ()=>{\n            const bres = await this.utils.api.post(`/account/balance/${this.utils.token}`, {\n                tx_id: transactionId\n            });\n            _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].checkAndThrow(bres, `Posting transaction ${transactionId} information to the bundler`, [\n                202\n            ]);\n            return bres;\n        }, {\n            retries: 5,\n            maxTimeout: 1000,\n            minTimeout: 100,\n            randomize: true\n        });\n    }\n    async submitFundTransaction(transactionId) {\n        return this.submitTransaction(transactionId);\n    }\n} //# sourceMappingURL=fund.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL2Z1bmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFxQztBQUNBO0FBQ047QUFDaEIsTUFBTUc7SUFFakJDLFlBQVlDLEtBQUssQ0FBRTtRQUNmLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtJQUNqQjtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTUMsS0FBS0MsTUFBTSxFQUFFQyxhQUFhLEdBQUcsRUFBRTtRQUNqQyxNQUFNQyxVQUFVLElBQUlSLG9EQUFTQSxDQUFDTTtRQUM5QixJQUFJLENBQUNFLFFBQVFDLFNBQVMsSUFBSTtZQUN0QixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxNQUFNQyxJQUFJLElBQUksQ0FBQ1AsS0FBSyxDQUFDUSxXQUFXO1FBQ2hDLE1BQU1DLEtBQUssTUFBTSxJQUFJLENBQUNULEtBQUssQ0FBQ1UsaUJBQWlCLENBQUMsSUFBSSxDQUFDVixLQUFLLENBQUNXLEtBQUs7UUFDOUQsSUFBSUM7UUFDSixJQUFJTCxFQUFFTSxRQUFRLEVBQUU7WUFDWixpRkFBaUY7WUFDakYsTUFBTUMsVUFBVSxNQUFNUCxFQUFFUSxNQUFNLENBQUNSLEVBQUVTLElBQUksQ0FBQyxFQUFFLEtBQUssWUFBWSxJQUFJWixTQUFTSztZQUN0RUcsTUFBTWhCLG9EQUFTQSxDQUFDcUIsV0FBVyxDQUFDSCxXQUFXQSxRQUFRSSxZQUFZLENBQUNmLFlBQVlnQixZQUFZLENBQUN2QixvREFBU0EsQ0FBQ3dCLFVBQVUsSUFBSU47UUFDakg7UUFDQSxNQUFNTyxLQUFLLE1BQU1kLEVBQUVlLFFBQVEsQ0FBQ2xCLFNBQVNLLElBQUlHO1FBQ3pDLElBQUlXO1FBQ0osNENBQTRDO1FBQzVDLElBQUk7WUFDQUEsT0FBTyxNQUFNaEIsRUFBRWlCLE1BQU0sQ0FBQ0gsR0FBR0EsRUFBRTtRQUMvQixFQUNBLE9BQU9JLEdBQUc7WUFDTixNQUFNQTtRQUNWO1FBQ0FKLEdBQUdLLElBQUksS0FBS0g7UUFDWixJQUFJLENBQUNGLEdBQUdLLElBQUksRUFBRTtZQUNWLE1BQU0sSUFBSXBCLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQztRQUM5QztRQUNBVCxpREFBS0EsQ0FBQzhCLGFBQWEsQ0FBQ0osTUFBTSxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQ3ZCLEtBQUssQ0FBQ1csS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNsRixJQUFJaUIsZUFBZSxNQUFNLElBQUksQ0FBQzVCLEtBQUssQ0FBQzZCLGdCQUFnQixDQUFDUixHQUFHSyxJQUFJO1FBQzVELE1BQU1JLE9BQU8sTUFBTSxJQUFJLENBQUNDLGlCQUFpQixDQUFDVixHQUFHSyxJQUFJLEVBQUVNLEtBQUssQ0FBQyxDQUFDUDtZQUN0REcsZUFBZUg7WUFDZixPQUFPUTtRQUNYO1FBQ0EsSUFBSSxDQUFDSCxNQUFNO1lBQ1AsTUFBTSxJQUFJeEIsTUFBTSxDQUFDLDRCQUE0QixFQUFFZSxHQUFHSyxJQUFJLENBQUMsb0JBQW9CLEVBQUVFLGVBQWUsQ0FBQyxHQUFHLEVBQUVBLGNBQWNNLFdBQVdOLGFBQWEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNwSjtRQUNBLE9BQU87WUFBRU8sUUFBUXZDLG9EQUFTQSxDQUFDcUIsV0FBVyxDQUFDTCxPQUFPQSxJQUFJd0IsUUFBUSxLQUFLQyxLQUFLQyxTQUFTLENBQUMxQjtZQUFNMkIsUUFBUTlCO1lBQUkrQixVQUFVcEMsUUFBUWdDLFFBQVE7WUFBSUssSUFBSXBCLEdBQUdLLElBQUk7UUFBQztJQUM5STtJQUNBLE1BQU1LLGtCQUFrQlcsYUFBYSxFQUFFO1FBQ25DLE9BQU8sTUFBTS9DLHdDQUFVQSxDQUFDO1lBQ3BCLE1BQU1tQyxPQUFPLE1BQU0sSUFBSSxDQUFDOUIsS0FBSyxDQUFDMkMsR0FBRyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUM1QyxLQUFLLENBQUNXLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQUVrQyxPQUFPSDtZQUFjO1lBQ3RHN0MsaURBQUtBLENBQUM4QixhQUFhLENBQUNHLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRVksY0FBYywyQkFBMkIsQ0FBQyxFQUFFO2dCQUFDO2FBQUk7WUFDbEcsT0FBT1o7UUFDWCxHQUFHO1lBQ0NnQixTQUFTO1lBQ1RDLFlBQVk7WUFDWkMsWUFBWTtZQUNaQyxXQUFXO1FBQ2Y7SUFDSjtJQUNBLE1BQU1DLHNCQUFzQlIsYUFBYSxFQUFFO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDWCxpQkFBaUIsQ0FBQ1c7SUFDbEM7QUFDSixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL2Z1bmQuanM/OGFhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXN5bmNSZXRyeSBmcm9tIFwiYXN5bmMtcmV0cnlcIjtcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSBcImJpZ251bWJlci5qc1wiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuL3V0aWxzLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGdW5kIHtcbiAgICB1dGlscztcbiAgICBjb25zdHJ1Y3Rvcih1dGlscykge1xuICAgICAgICB0aGlzLnV0aWxzID0gdXRpbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRvIEZ1bmQgKHNlbmQgZnVuZHMgdG8pIGEgSXJ5cyBub2RlIC0gaW5oZXJpdHMgaW5zdGFuY2UgdG9rZW4gYW5kIG5vZGVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gYW1vdW50IGluIGJhc2UgdW5pdHMgdG8gc2VuZFxuICAgICAqIEBwYXJhbSBtdWx0aXBsaWVyIC0gbmV0d29yayB0eCBmZWUgbXVsdGlwbGllciAtIG9ubHkgd29ya3MgZm9yIHNwZWNpZmljIGN1cnJlbmNpZXNcbiAgICAgKiBAcmV0dXJucyAgLSBmdW5kaW5nIHJlY2VpcHRcbiAgICAgKi9cbiAgICBhc3luYyBmdW5kKGFtb3VudCwgbXVsdGlwbGllciA9IDEuMCkge1xuICAgICAgICBjb25zdCBfYW1vdW50ID0gbmV3IEJpZ051bWJlcihhbW91bnQpO1xuICAgICAgICBpZiAoIV9hbW91bnQuaXNJbnRlZ2VyKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm11c3QgdXNlIGFuIGludGVnZXIgZm9yIGZ1bmRpbmcgYW1vdW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLnV0aWxzLnRva2VuQ29uZmlnO1xuICAgICAgICBjb25zdCB0byA9IGF3YWl0IHRoaXMudXRpbHMuZ2V0QnVuZGxlckFkZHJlc3ModGhpcy51dGlscy50b2tlbik7XG4gICAgICAgIGxldCBmZWU7XG4gICAgICAgIGlmIChjLm5lZWRzRmVlKSB7XG4gICAgICAgICAgICAvLyB3aW5zdG9uJ3MgZmVlIGlzIGFjdHVhbGx5IGZvciBhbW91bnQgb2YgZGF0YSwgbm90IGZ1bmRzLCBzbyB3ZSBoYXZlIHRvIDAgdGhpcy5cbiAgICAgICAgICAgIGNvbnN0IGJhc2VGZWUgPSBhd2FpdCBjLmdldEZlZShjLmJhc2VbMF0gPT09IFwid2luc3RvblwiID8gMCA6IF9hbW91bnQsIHRvKTtcbiAgICAgICAgICAgIGZlZSA9IEJpZ051bWJlci5pc0JpZ051bWJlcihiYXNlRmVlKSA/IGJhc2VGZWUubXVsdGlwbGllZEJ5KG11bHRpcGxpZXIpLmludGVnZXJWYWx1ZShCaWdOdW1iZXIuUk9VTkRfQ0VJTCkgOiBiYXNlRmVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgYy5jcmVhdGVUeChfYW1vdW50LCB0bywgZmVlKTtcbiAgICAgICAgbGV0IG5yZXM7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhdGNoXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBucmVzID0gYXdhaXQgYy5zZW5kVHgodHgudHgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIHR4LnR4SWQgPz89IG5yZXM7XG4gICAgICAgIGlmICghdHgudHhJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmRlZmluZWQgdHJhbnNhY3Rpb24gSURgKTtcbiAgICAgICAgfVxuICAgICAgICBVdGlscy5jaGVja0FuZFRocm93KG5yZXMsIGBTZW5kaW5nIHRyYW5zYWN0aW9uIHRvIHRoZSAke3RoaXMudXRpbHMudG9rZW59IG5ldHdvcmtgKTtcbiAgICAgICAgbGV0IGNvbmZpcm1FcnJvciA9IGF3YWl0IHRoaXMudXRpbHMuY29uZmlybWF0aW9uUG9sbCh0eC50eElkKTtcbiAgICAgICAgY29uc3QgYnJlcyA9IGF3YWl0IHRoaXMuc3VibWl0VHJhbnNhY3Rpb24odHgudHhJZCkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGNvbmZpcm1FcnJvciA9IGU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFicmVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZhaWxlZCB0byBwb3N0IGZ1bmRpbmcgdHggLSAke3R4LnR4SWR9IC0ga2VlcCB0aGlzIGlkISBcXG4gJHtjb25maXJtRXJyb3IgPyBgIC0gJHtjb25maXJtRXJyb3I/Lm1lc3NhZ2UgPz8gY29uZmlybUVycm9yfWAgOiBcIlwifWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHJld2FyZDogQmlnTnVtYmVyLmlzQmlnTnVtYmVyKGZlZSkgPyBmZWUudG9TdHJpbmcoKSA6IEpTT04uc3RyaW5naWZ5KGZlZSksIHRhcmdldDogdG8sIHF1YW50aXR5OiBfYW1vdW50LnRvU3RyaW5nKCksIGlkOiB0eC50eElkIH07XG4gICAgfVxuICAgIGFzeW5jIHN1Ym1pdFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IEFzeW5jUmV0cnkoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnJlcyA9IGF3YWl0IHRoaXMudXRpbHMuYXBpLnBvc3QoYC9hY2NvdW50L2JhbGFuY2UvJHt0aGlzLnV0aWxzLnRva2VufWAsIHsgdHhfaWQ6IHRyYW5zYWN0aW9uSWQgfSk7XG4gICAgICAgICAgICBVdGlscy5jaGVja0FuZFRocm93KGJyZXMsIGBQb3N0aW5nIHRyYW5zYWN0aW9uICR7dHJhbnNhY3Rpb25JZH0gaW5mb3JtYXRpb24gdG8gdGhlIGJ1bmRsZXJgLCBbMjAyXSk7XG4gICAgICAgICAgICByZXR1cm4gYnJlcztcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgcmV0cmllczogNSxcbiAgICAgICAgICAgIG1heFRpbWVvdXQ6IDEwMDAsXG4gICAgICAgICAgICBtaW5UaW1lb3V0OiAxMDAsXG4gICAgICAgICAgICByYW5kb21pemU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzdWJtaXRGdW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25JZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJtaXRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbklkKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJBc3luY1JldHJ5IiwiQmlnTnVtYmVyIiwiVXRpbHMiLCJGdW5kIiwiY29uc3RydWN0b3IiLCJ1dGlscyIsImZ1bmQiLCJhbW91bnQiLCJtdWx0aXBsaWVyIiwiX2Ftb3VudCIsImlzSW50ZWdlciIsIkVycm9yIiwiYyIsInRva2VuQ29uZmlnIiwidG8iLCJnZXRCdW5kbGVyQWRkcmVzcyIsInRva2VuIiwiZmVlIiwibmVlZHNGZWUiLCJiYXNlRmVlIiwiZ2V0RmVlIiwiYmFzZSIsImlzQmlnTnVtYmVyIiwibXVsdGlwbGllZEJ5IiwiaW50ZWdlclZhbHVlIiwiUk9VTkRfQ0VJTCIsInR4IiwiY3JlYXRlVHgiLCJucmVzIiwic2VuZFR4IiwiZSIsInR4SWQiLCJjaGVja0FuZFRocm93IiwiY29uZmlybUVycm9yIiwiY29uZmlybWF0aW9uUG9sbCIsImJyZXMiLCJzdWJtaXRUcmFuc2FjdGlvbiIsImNhdGNoIiwidW5kZWZpbmVkIiwibWVzc2FnZSIsInJld2FyZCIsInRvU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInRhcmdldCIsInF1YW50aXR5IiwiaWQiLCJ0cmFuc2FjdGlvbklkIiwiYXBpIiwicG9zdCIsInR4X2lkIiwicmV0cmllcyIsIm1heFRpbWVvdXQiLCJtaW5UaW1lb3V0IiwicmFuZG9taXplIiwic3VibWl0RnVuZFRyYW5zYWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/fund.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/hack.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/hack.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// crypto hack - this is to stop arweave-js's import time(!!!) check for `subtleCrypto` - which occurs if you try to use the root import of this SDK.\nconst hack = ()=>{\n    throw new Error(`Unimplemented`);\n};\n// @ts-expect-error hack\nglobalThis.crypto ??= {};\n// @ts-expect-error hack\nglobalThis.crypto.subtle ??= {};\n// @ts-expect-error hack\nglobalThis.crypto.subtle.generateKey ??= hack;\n// @ts-expect-error hack\nglobalThis.crypto.subtle.importKey ??= hack;\n// @ts-expect-error hack\nglobalThis.crypto.subtle.exportKey ??= hack;\n// @ts-expect-error hack\nglobalThis.crypto.subtle.digest ??= hack;\n// @ts-expect-error hack\nglobalThis.crypto.subtle.sign ??= hack;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hack); //# sourceMappingURL=hack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL2hhY2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHFKQUFxSjtBQUNySixNQUFNQSxPQUFPO0lBQ1QsTUFBTSxJQUFJQyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBQ25DO0FBQ0Esd0JBQXdCO0FBQ3hCQyxXQUFXQyxNQUFNLEtBQUssQ0FBQztBQUN2Qix3QkFBd0I7QUFDeEJELFdBQVdDLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLLENBQUM7QUFDOUIsd0JBQXdCO0FBQ3hCRixXQUFXQyxNQUFNLENBQUNDLE1BQU0sQ0FBQ0MsV0FBVyxLQUFLTDtBQUN6Qyx3QkFBd0I7QUFDeEJFLFdBQVdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDRSxTQUFTLEtBQUtOO0FBQ3ZDLHdCQUF3QjtBQUN4QkUsV0FBV0MsTUFBTSxDQUFDQyxNQUFNLENBQUNHLFNBQVMsS0FBS1A7QUFDdkMsd0JBQXdCO0FBQ3hCRSxXQUFXQyxNQUFNLENBQUNDLE1BQU0sQ0FBQ0ksTUFBTSxLQUFLUjtBQUNwQyx3QkFBd0I7QUFDeEJFLFdBQVdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSyxJQUFJLEtBQUtUO0FBQ2xDLGlFQUFlQSxJQUFJQSxFQUFDLENBQ3BCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL2hhY2suanM/NWMwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcnlwdG8gaGFjayAtIHRoaXMgaXMgdG8gc3RvcCBhcndlYXZlLWpzJ3MgaW1wb3J0IHRpbWUoISEhKSBjaGVjayBmb3IgYHN1YnRsZUNyeXB0b2AgLSB3aGljaCBvY2N1cnMgaWYgeW91IHRyeSB0byB1c2UgdGhlIHJvb3QgaW1wb3J0IG9mIHRoaXMgU0RLLlxuY29uc3QgaGFjayA9ICgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaW1wbGVtZW50ZWRgKTtcbn07XG4vLyBAdHMtZXhwZWN0LWVycm9yIGhhY2tcbmdsb2JhbFRoaXMuY3J5cHRvID8/PSB7fTtcbi8vIEB0cy1leHBlY3QtZXJyb3IgaGFja1xuZ2xvYmFsVGhpcy5jcnlwdG8uc3VidGxlID8/PSB7fTtcbi8vIEB0cy1leHBlY3QtZXJyb3IgaGFja1xuZ2xvYmFsVGhpcy5jcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5ID8/PSBoYWNrO1xuLy8gQHRzLWV4cGVjdC1lcnJvciBoYWNrXG5nbG9iYWxUaGlzLmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5ID8/PSBoYWNrO1xuLy8gQHRzLWV4cGVjdC1lcnJvciBoYWNrXG5nbG9iYWxUaGlzLmNyeXB0by5zdWJ0bGUuZXhwb3J0S2V5ID8/PSBoYWNrO1xuLy8gQHRzLWV4cGVjdC1lcnJvciBoYWNrXG5nbG9iYWxUaGlzLmNyeXB0by5zdWJ0bGUuZGlnZXN0ID8/PSBoYWNrO1xuLy8gQHRzLWV4cGVjdC1lcnJvciBoYWNrXG5nbG9iYWxUaGlzLmNyeXB0by5zdWJ0bGUuc2lnbiA/Pz0gaGFjaztcbmV4cG9ydCBkZWZhdWx0IGhhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJoYWNrIiwiRXJyb3IiLCJnbG9iYWxUaGlzIiwiY3J5cHRvIiwic3VidGxlIiwiZ2VuZXJhdGVLZXkiLCJpbXBvcnRLZXkiLCJleHBvcnRLZXkiLCJkaWdlc3QiLCJzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/hack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/irys.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/irys.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Irys)\n/* harmony export */ });\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transaction.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n/* harmony import */ var _withdrawal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./withdrawal.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/withdrawal.js\");\n/* harmony import */ var _irys_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @irys/query */ \"(ssr)/./node_modules/.pnpm/@irys+query@0.0.1_debug@4.4.0/node_modules/@irys/query/build/esm/index.js\");\n\n\n\n\nclass Irys {\n    static{\n        this.VERSION = \"0.0.2\";\n    }\n    constructor({ url, arbundles }){\n        this.url = url;\n        this.arbundles = arbundles;\n        this.IrysTransaction = (0,_transaction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this);\n    }\n    get signer() {\n        return this.tokenConfig.getSigner();\n    }\n    get search() {\n        const q = new _irys_query__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n            url: new URL(\"/graphql\", this.url)\n        });\n        return q.search.bind(q);\n    }\n    query(queryOpts) {\n        return new _irys_query__WEBPACK_IMPORTED_MODULE_3__[\"default\"](queryOpts ?? {\n            url: this.url\n        });\n    }\n    async withdrawBalance(amount) {\n        return (0,_withdrawal_js__WEBPACK_IMPORTED_MODULE_2__.withdrawBalance)(this.utils, this.api, amount);\n    }\n    /**\n     * Gets the balance for the loaded wallet\n     * @returns balance (in winston)\n     */ async getLoadedBalance() {\n        if (!this.address) throw new Error(\"address is undefined\");\n        return this.utils.getBalance(this.address);\n    }\n    /**\n     * Gets the balance for the specified address\n     * @param address address to query for\n     * @returns the balance (in winston)\n     */ async getBalance(address) {\n        return this.utils.getBalance(address);\n    }\n    /**\n     * Sends amount atomic units to the specified bundler\n     * @param amount amount to send in atomic units\n     * @returns details about the fund transaction\n     */ async fund(amount, multiplier) {\n        return this.funder.fund(amount, multiplier);\n    }\n    /**\n     * Calculates the price for [bytes] bytes for the loaded token and Irys node.\n     * @param bytes\n     * @returns\n     */ async getPrice(bytes) {\n        return this.utils.getPrice(this.token, bytes);\n    }\n    async verifyReceipt(receipt) {\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].verifyReceipt(this.arbundles, receipt);\n    }\n    /**\n     * Create a new IrysTransactions (flex token arbundles dataItem)\n     * @param data\n     * @param opts - dataItemCreateOptions\n     * @returns - a new IrysTransaction instance\n     */ createTransaction(data, opts) {\n        return new this.IrysTransaction(data, this, opts);\n    }\n    /**\n     * Returns the signer for the loaded token\n     */ getSigner() {\n        return this.tokenConfig.getSigner();\n    }\n    async upload(data, opts) {\n        return this.uploader.uploadData(data, opts);\n    }\n    async uploadWithReceipt(data, opts) {\n        return this.uploader.uploadData(data, {\n            ...opts,\n            upload: {\n                getReceiptSignature: true\n            }\n        });\n    }\n    async ready() {\n        this.tokenConfig.ready ? await this.tokenConfig.ready() : true;\n        this.address = this.tokenConfig.address;\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n    get transaction() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const oThis = this;\n        return {\n            fromRaw (rawTransaction) {\n                return new oThis.IrysTransaction(rawTransaction, oThis, {\n                    dataIsRawTransaction: true\n                });\n            }\n        };\n    }\n} //# sourceMappingURL=irys.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/irys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/provenance.js":
/*!*************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/provenance.js ***!
  \*************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Provenance: () => (/* binding */ Provenance)\n/* harmony export */ });\nclass Provenance {\n    constructor(irys){\n        this.irys = irys;\n    }\n    async upload(data, opts) {\n        return this.irys.uploadWithReceipt(data, opts);\n    }\n    async uploadProof(proofFields) {\n        return await this.irys.uploadWithReceipt(\"\", {\n            tags: Object.entries({\n                dataProtocol: \"Provenance-Confirmation\",\n                ...proofFields\n            }).map(([k, v])=>({\n                    name: tagMap[k],\n                    value: v\n                }))\n        });\n    }\n    async getAllProofs(searchBy, opts) {\n        const queryTags = Object.entries(searchBy).map(([k, v])=>({\n                name: tagMap[k],\n                values: [\n                    v\n                ]\n            }));\n        if (queryTags.length === 0) throw new Error(`Getting a provenance proof requires at least one query element`);\n        const query = `\n    query ($tags: [TagFilter!]) {\n      transactions(tags: $tags) {\n        edges {\n          node {\n            id\n            receipt {\n              deadlineHeight\n              signature\n              timestamp\n              version\n            }\n            tags {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n    `;\n        const txs = [];\n        let endCursor = null;\n        do {\n            const gqlRes = await this.irys.api.post(\"/graphql\", {\n                query,\n                variables: {\n                    tags: queryTags,\n                    limit: opts?.limit ?? null,\n                    after: endCursor\n                }\n            }, undefined);\n            endCursor = gqlRes.data.data.transactions?.pageInfo?.hasNextPage ? gqlRes.data.data.transactions.pageInfo.endCursor : null;\n            txs.push(...gqlRes.data.data.transactions.edges.map((t)=>t.node));\n        }while (endCursor);\n        return txs;\n    }\n    async getProof(searchBy) {\n        const res = (await this.getAllProofs(searchBy, {\n            limit: 1\n        })).at(0);\n        if (!res) throw new Error(`Unable to locate proof with fields ${JSON.stringify(searchBy)}`);\n        return res;\n    }\n}\nconst tagMap = {\n    dataProtocol: \"Data-Protocol\",\n    hashingAlgo: \"Hashing-Algo\",\n    dataHash: \"Data-Hash\",\n    uploadedFor: \"Uploaded-For\",\n    prompt: \"Prompt\",\n    promptHash: \"Prompt-Hash\",\n    model: \"Model\"\n}; //# sourceMappingURL=provenance.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL3Byb3ZlbmFuY2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0lBRVRDLFlBQVlDLElBQUksQ0FBRTtRQUNkLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtJQUNoQjtJQUNBLE1BQU1DLE9BQU9DLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ3JCLE9BQU8sSUFBSSxDQUFDSCxJQUFJLENBQUNJLGlCQUFpQixDQUFDRixNQUFNQztJQUM3QztJQUNBLE1BQU1FLFlBQVlDLFdBQVcsRUFBRTtRQUMzQixPQUFPLE1BQU0sSUFBSSxDQUFDTixJQUFJLENBQUNJLGlCQUFpQixDQUFDLElBQUk7WUFDekNHLE1BQU1DLE9BQU9DLE9BQU8sQ0FBQztnQkFBRUMsY0FBYztnQkFBMkIsR0FBR0osV0FBVztZQUFDLEdBQUdLLEdBQUcsQ0FBQyxDQUFDLENBQUNDLEdBQUdDLEVBQUUsR0FBTTtvQkFBRUMsTUFBTUMsTUFBTSxDQUFDSCxFQUFFO29CQUFFSSxPQUFPSDtnQkFBRTtRQUNuSTtJQUNKO0lBQ0EsTUFBTUksYUFBYUMsUUFBUSxFQUFFZixJQUFJLEVBQUU7UUFDL0IsTUFBTWdCLFlBQVlYLE9BQU9DLE9BQU8sQ0FBQ1MsVUFBVVAsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsR0FBR0MsRUFBRSxHQUFNO2dCQUFFQyxNQUFNQyxNQUFNLENBQUNILEVBQUU7Z0JBQUVRLFFBQVE7b0JBQUNQO2lCQUFFO1lBQUM7UUFDM0YsSUFBSU0sVUFBVUUsTUFBTSxLQUFLLEdBQ3JCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLDhEQUE4RCxDQUFDO1FBQ3BGLE1BQU1DLFFBQVEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFvQm5CLENBQUM7UUFDRyxNQUFNQyxNQUFNLEVBQUU7UUFDZCxJQUFJQyxZQUFZO1FBQ2hCLEdBQUc7WUFDQyxNQUFNQyxTQUFTLE1BQU0sSUFBSSxDQUFDMUIsSUFBSSxDQUFDMkIsR0FBRyxDQUFDQyxJQUFJLENBQUMsWUFBWTtnQkFDaERMO2dCQUNBTSxXQUFXO29CQUFFdEIsTUFBTVk7b0JBQVdXLE9BQU8zQixNQUFNMkIsU0FBUztvQkFBTUMsT0FBT047Z0JBQVU7WUFDL0UsR0FBR087WUFDSFAsWUFBWUMsT0FBT3hCLElBQUksQ0FBQ0EsSUFBSSxDQUFDK0IsWUFBWSxFQUFFQyxVQUFVQyxjQUFjVCxPQUFPeEIsSUFBSSxDQUFDQSxJQUFJLENBQUMrQixZQUFZLENBQUNDLFFBQVEsQ0FBQ1QsU0FBUyxHQUFHO1lBQ3RIRCxJQUFJWSxJQUFJLElBQUlWLE9BQU94QixJQUFJLENBQUNBLElBQUksQ0FBQytCLFlBQVksQ0FBQ0ksS0FBSyxDQUFDMUIsR0FBRyxDQUFDLENBQUMyQixJQUFNQSxFQUFFQyxJQUFJO1FBQ3JFLFFBQVNkLFdBQVc7UUFDcEIsT0FBT0Q7SUFDWDtJQUNBLE1BQU1nQixTQUFTdEIsUUFBUSxFQUFFO1FBQ3JCLE1BQU11QixNQUFNLENBQUMsTUFBTSxJQUFJLENBQUN4QixZQUFZLENBQUNDLFVBQVU7WUFBRVksT0FBTztRQUFFLEVBQUMsRUFBR1ksRUFBRSxDQUFDO1FBQ2pFLElBQUksQ0FBQ0QsS0FDRCxNQUFNLElBQUluQixNQUFNLENBQUMsbUNBQW1DLEVBQUVxQixLQUFLQyxTQUFTLENBQUMxQixVQUFVLENBQUM7UUFDcEYsT0FBT3VCO0lBQ1g7QUFDSjtBQUNBLE1BQU0xQixTQUFTO0lBQ1hMLGNBQWM7SUFDZG1DLGFBQWE7SUFDYkMsVUFBVTtJQUNWQyxhQUFhO0lBQ2JDLFFBQVE7SUFDUkMsWUFBWTtJQUNaQyxPQUFPO0FBQ1gsR0FDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK3Nka0AwLjAuMl9hcndlYXZlQDEuMTUuN19idWZmZXJ1dGlsQDQuMC45X2RlYnVnQDQuNC4wX3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwL25vZGVfbW9kdWxlcy9AaXJ5cy9zZGsvYnVpbGQvZXNtL2NvbW1vbi9wcm92ZW5hbmNlLmpzP2Q5NDciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFByb3ZlbmFuY2Uge1xuICAgIGlyeXM7XG4gICAgY29uc3RydWN0b3IoaXJ5cykge1xuICAgICAgICB0aGlzLmlyeXMgPSBpcnlzO1xuICAgIH1cbiAgICBhc3luYyB1cGxvYWQoZGF0YSwgb3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pcnlzLnVwbG9hZFdpdGhSZWNlaXB0KGRhdGEsIG9wdHMpO1xuICAgIH1cbiAgICBhc3luYyB1cGxvYWRQcm9vZihwcm9vZkZpZWxkcykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5pcnlzLnVwbG9hZFdpdGhSZWNlaXB0KFwiXCIsIHtcbiAgICAgICAgICAgIHRhZ3M6IE9iamVjdC5lbnRyaWVzKHsgZGF0YVByb3RvY29sOiBcIlByb3ZlbmFuY2UtQ29uZmlybWF0aW9uXCIsIC4uLnByb29mRmllbGRzIH0pLm1hcCgoW2ssIHZdKSA9PiAoeyBuYW1lOiB0YWdNYXBba10sIHZhbHVlOiB2IH0pKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGdldEFsbFByb29mcyhzZWFyY2hCeSwgb3B0cykge1xuICAgICAgICBjb25zdCBxdWVyeVRhZ3MgPSBPYmplY3QuZW50cmllcyhzZWFyY2hCeSkubWFwKChbaywgdl0pID0+ICh7IG5hbWU6IHRhZ01hcFtrXSwgdmFsdWVzOiBbdl0gfSkpO1xuICAgICAgICBpZiAocXVlcnlUYWdzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR2V0dGluZyBhIHByb3ZlbmFuY2UgcHJvb2YgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIHF1ZXJ5IGVsZW1lbnRgKTtcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgXG4gICAgcXVlcnkgKCR0YWdzOiBbVGFnRmlsdGVyIV0pIHtcbiAgICAgIHRyYW5zYWN0aW9ucyh0YWdzOiAkdGFncykge1xuICAgICAgICBlZGdlcyB7XG4gICAgICAgICAgbm9kZSB7XG4gICAgICAgICAgICBpZFxuICAgICAgICAgICAgcmVjZWlwdCB7XG4gICAgICAgICAgICAgIGRlYWRsaW5lSGVpZ2h0XG4gICAgICAgICAgICAgIHNpZ25hdHVyZVxuICAgICAgICAgICAgICB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgdmVyc2lvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFncyB7XG4gICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYDtcbiAgICAgICAgY29uc3QgdHhzID0gW107XG4gICAgICAgIGxldCBlbmRDdXJzb3IgPSBudWxsO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjb25zdCBncWxSZXMgPSBhd2FpdCB0aGlzLmlyeXMuYXBpLnBvc3QoXCIvZ3JhcGhxbFwiLCB7XG4gICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7IHRhZ3M6IHF1ZXJ5VGFncywgbGltaXQ6IG9wdHM/LmxpbWl0ID8/IG51bGwsIGFmdGVyOiBlbmRDdXJzb3IgfSxcbiAgICAgICAgICAgIH0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBlbmRDdXJzb3IgPSBncWxSZXMuZGF0YS5kYXRhLnRyYW5zYWN0aW9ucz8ucGFnZUluZm8/Lmhhc05leHRQYWdlID8gZ3FsUmVzLmRhdGEuZGF0YS50cmFuc2FjdGlvbnMucGFnZUluZm8uZW5kQ3Vyc29yIDogbnVsbDtcbiAgICAgICAgICAgIHR4cy5wdXNoKC4uLmdxbFJlcy5kYXRhLmRhdGEudHJhbnNhY3Rpb25zLmVkZ2VzLm1hcCgodCkgPT4gdC5ub2RlKSk7XG4gICAgICAgIH0gd2hpbGUgKGVuZEN1cnNvcik7XG4gICAgICAgIHJldHVybiB0eHM7XG4gICAgfVxuICAgIGFzeW5jIGdldFByb29mKHNlYXJjaEJ5KSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IChhd2FpdCB0aGlzLmdldEFsbFByb29mcyhzZWFyY2hCeSwgeyBsaW1pdDogMSB9KSkuYXQoMCk7XG4gICAgICAgIGlmICghcmVzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbG9jYXRlIHByb29mIHdpdGggZmllbGRzICR7SlNPTi5zdHJpbmdpZnkoc2VhcmNoQnkpfWApO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cbmNvbnN0IHRhZ01hcCA9IHtcbiAgICBkYXRhUHJvdG9jb2w6IFwiRGF0YS1Qcm90b2NvbFwiLFxuICAgIGhhc2hpbmdBbGdvOiBcIkhhc2hpbmctQWxnb1wiLFxuICAgIGRhdGFIYXNoOiBcIkRhdGEtSGFzaFwiLFxuICAgIHVwbG9hZGVkRm9yOiBcIlVwbG9hZGVkLUZvclwiLFxuICAgIHByb21wdDogXCJQcm9tcHRcIixcbiAgICBwcm9tcHRIYXNoOiBcIlByb21wdC1IYXNoXCIsXG4gICAgbW9kZWw6IFwiTW9kZWxcIixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92ZW5hbmNlLmpzLm1hcCJdLCJuYW1lcyI6WyJQcm92ZW5hbmNlIiwiY29uc3RydWN0b3IiLCJpcnlzIiwidXBsb2FkIiwiZGF0YSIsIm9wdHMiLCJ1cGxvYWRXaXRoUmVjZWlwdCIsInVwbG9hZFByb29mIiwicHJvb2ZGaWVsZHMiLCJ0YWdzIiwiT2JqZWN0IiwiZW50cmllcyIsImRhdGFQcm90b2NvbCIsIm1hcCIsImsiLCJ2IiwibmFtZSIsInRhZ01hcCIsInZhbHVlIiwiZ2V0QWxsUHJvb2ZzIiwic2VhcmNoQnkiLCJxdWVyeVRhZ3MiLCJ2YWx1ZXMiLCJsZW5ndGgiLCJFcnJvciIsInF1ZXJ5IiwidHhzIiwiZW5kQ3Vyc29yIiwiZ3FsUmVzIiwiYXBpIiwicG9zdCIsInZhcmlhYmxlcyIsImxpbWl0IiwiYWZ0ZXIiLCJ1bmRlZmluZWQiLCJ0cmFuc2FjdGlvbnMiLCJwYWdlSW5mbyIsImhhc05leHRQYWdlIiwicHVzaCIsImVkZ2VzIiwidCIsIm5vZGUiLCJnZXRQcm9vZiIsInJlcyIsImF0IiwiSlNPTiIsInN0cmluZ2lmeSIsImhhc2hpbmdBbGdvIiwiZGF0YUhhc2giLCJ1cGxvYWRlZEZvciIsInByb21wdCIsInByb21wdEhhc2giLCJtb2RlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/provenance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/s2ai.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/s2ai.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STATES: () => (/* binding */ STATES),\n/* harmony export */   \"default\": () => (/* binding */ StreamToAsyncIterator)\n/* harmony export */ });\nconst NOT_READABLE = Symbol(\"not readable\");\nconst READABLE = Symbol(\"readable\");\nconst ENDED = Symbol(\"ended\");\nconst ERRORED = Symbol(\"errored\");\nconst STATES = {\n    notReadable: NOT_READABLE,\n    readable: READABLE,\n    ended: ENDED,\n    errored: ERRORED\n};\n/**\n * Wraps a stream into an object that can be used as an async iterator.\n *\n * This will keep a stream in a paused state, and will only read from the stream on each\n * iteration. A size can be supplied to set an explicit call to `stream.read([size])` in\n * the options for each iteration.\n */ class StreamToAsyncIterator {\n    get closed() {\n        return this._state === STATES.ended;\n    }\n    constructor(stream, { size } = {}){\n        /** The current state of the iterator (not readable, readable, ended, errored) */ this._state = STATES.notReadable;\n        /** The rejections of promises to call when stream errors out */ this._rejections = new Set();\n        this._stream = stream;\n        this._size = size;\n        const bindMethods = [\n            \"_handleStreamEnd\",\n            \"_handleStreamError\"\n        ];\n        for (const method of bindMethods){\n            Object.defineProperty(this, method, {\n                configurable: true,\n                writable: true,\n                value: this[method].bind(this)\n            });\n        }\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        stream.once(\"error\", this._handleStreamError);\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        stream.once(\"end\", this._handleStreamEnd);\n        stream.on(\"readable\", ()=>{\n            this._state = STATES.readable;\n        });\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    /**\n     * Returns the next iteration of data. Rejects if the stream errored out.\n     */ async next() {\n        switch(this._state){\n            case STATES.notReadable:\n                {\n                    let untilReadable;\n                    let untilEnd;\n                    try {\n                        untilReadable = this._untilReadable();\n                        untilEnd = this._untilEnd();\n                        await Promise.race([\n                            untilReadable.promise,\n                            untilEnd.promise\n                        ]);\n                    } finally{\n                        // need to clean up any hanging event listeners\n                        if (untilReadable != null) {\n                            untilReadable.close();\n                        }\n                        if (untilEnd != null) {\n                            untilEnd.close();\n                        }\n                    }\n                    return this.next();\n                }\n            case STATES.ended:\n                {\n                    this.close();\n                    return {\n                        done: true,\n                        value: undefined\n                    };\n                }\n            case STATES.errored:\n                {\n                    this.close();\n                    throw this._error;\n                }\n            case STATES.readable:\n                {\n                    // stream.read returns null if not readable or when stream has ended\n                    // todo: Could add a way to ensure data-type/shape of reads to make this type safe\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    const data = this._size ? this._stream.read(this._size) : this._stream.read();\n                    if (data !== null) {\n                        return {\n                            done: false,\n                            value: data\n                        };\n                    } else {\n                        // we're no longer readable, need to find out what state we're in\n                        this._state = STATES.notReadable;\n                        // need to let event loop run to fill stream buffer\n                        await new Promise((r)=>setTimeout((r)=>r(true), 0, r));\n                        return this.next();\n                    }\n                }\n        }\n    }\n    /**\n     * Waits until the stream is readable. Rejects if the stream errored out.\n     * @returns Promise when stream is readable\n     */ _untilReadable() {\n        // let is used here instead of const because the exact reference is\n        // required to remove it, this is why it is not a curried function that\n        // accepts resolve & reject as parameters.\n        let handleReadable = undefined;\n        const promise = new Promise((resolve, reject)=>{\n            handleReadable = ()=>{\n                this._state = STATES.readable;\n                this._rejections.delete(reject);\n                resolve();\n            };\n            if (this._state === STATES.readable) handleReadable; // race condition guard\n            this._stream.once(\"readable\", handleReadable);\n            this._rejections.add(reject);\n        });\n        const cleanup = ()=>{\n            if (handleReadable != null) {\n                this._stream.removeListener(\"readable\", handleReadable);\n            }\n        };\n        return {\n            close: cleanup,\n            promise\n        };\n    }\n    /**\n     * Waits until the stream is ended. Rejects if the stream errored out.\n     * @returns Promise when stream is finished\n     */ _untilEnd() {\n        let handleEnd = undefined;\n        const promise = new Promise((resolve, reject)=>{\n            handleEnd = ()=>{\n                this._state = STATES.ended;\n                this._rejections.delete(reject);\n                resolve();\n            };\n            this._stream.once(\"end\", handleEnd);\n            this._rejections.add(reject);\n        });\n        const cleanup = ()=>{\n            if (handleEnd != null) {\n                this._stream.removeListener(\"end\", handleEnd);\n            }\n        };\n        return {\n            close: cleanup,\n            promise\n        };\n    }\n    return() {\n        this._state = STATES.ended;\n        return this.next();\n    }\n    throw(err) {\n        this._error = err;\n        this._state = STATES.errored;\n        return this.next();\n    }\n    /**\n     * Destroy the stream\n     * @param err An optional error to pass to the stream for an error event\n     */ close(err) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this._stream.removeListener(\"end\", this._handleStreamEnd);\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this._stream.removeListener(\"error\", this._handleStreamError);\n        this._state = STATES.ended;\n        this._stream.destroy(err);\n    }\n    _handleStreamError(err) {\n        this._error = err;\n        this._state = STATES.errored;\n        for (const reject of this._rejections){\n            reject(err);\n        }\n    }\n    _handleStreamEnd() {\n        this._state = STATES.ended;\n    }\n    get state() {\n        return this._state;\n    }\n} // export const addAsyncIterator = (body: ReadableStream) => {\n //   const bodyWithIter = body as ReadableStream<Uint8Array> & AsyncIterable<Uint8Array>;\n //   if (typeof bodyWithIter[Symbol.asyncIterator] === \"undefined\") {\n //     bodyWithIter[Symbol.asyncIterator] = webIiterator<Uint8Array>(body);\n //     return bodyWithIter;\n //   }\n //   return body;\n // };\n // export const webIiterator = function <T>(stream: ReadableStream) {\n //   return async function* iteratorGenerator<T>() {\n //     const reader = stream.getReader(); //lock\n //     try {\n //       const { done, value } = await reader.read();\n //       if (done) return;\n //       yield value as T;\n //     } finally {\n //       reader.releaseLock(); //unlock\n //     }\n //   };\n // };\n //# sourceMappingURL=s2ai.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/s2ai.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transaction.js":
/*!**************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transaction.js ***!
  \**************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ buildIrysTransaction)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n/**\n * Extended DataItem that allows for seamless Irys operations, such as signing and uploading.\n * Takes the same parameters as a regular DataItem.\n */ function buildIrysTransaction(irys) {\n    class IrysTransaction extends irys.arbundles.DataItem {\n        constructor(data, irys, opts){\n            super(opts?.dataIsRawTransaction === true ? Buffer.from(data) : irys.arbundles.createData(data, irys.tokenConfig.getSigner(), {\n                ...opts,\n                anchor: opts?.anchor ?? crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes(32).toString(\"base64\").slice(0, 32)\n            }).getRaw());\n            this.Irys = irys;\n            this.signer = irys.tokenConfig.getSigner();\n        }\n        sign() {\n            return super.sign(this.signer);\n        }\n        get size() {\n            return this.getRaw().length;\n        }\n        async uploadWithReceipt(opts) {\n            return (await this.Irys.uploader.uploadTransaction(this, {\n                ...opts,\n                getReceiptSignature: true\n            })).data;\n        }\n        async upload(opts) {\n            return (await this.Irys.uploader.uploadTransaction(this, opts)).data;\n        }\n        // static fromRaw(rawTransaction: Buffer, IrysInstance: Irys): IrysTransaction {\n        //   return new IrysTransaction(rawTransaction, IrysInstance, { dataIsRawTransaction: true });\n        // }\n        async getPrice() {\n            return this.Irys.utils.getPrice(this.Irys.tokenConfig.name, this.size);\n        }\n        async isValid() {\n            return irys.arbundles.DataItem.verify(this.getRaw());\n        }\n    }\n    return IrysTransaction;\n} // export abstract class IrysTransaction extends DataItem {}\n // export interface IrysTransaction extends DataItem {\n //   size: number;\n //   uploadWithReceipt(opts?: UploadOptions): Promise<UploadReceipt>;\n //   upload(opts: UploadOptions & { getReceiptSignature: true }): Promise<UploadReceipt>;\n //   upload(opts?: UploadOptions): Promise<UploadResponse>;\n // }\n //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL3RyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRCO0FBQzVCOzs7Q0FHQyxHQUNjLFNBQVNDLHFCQUFxQkMsSUFBSTtJQUM3QyxNQUFNQyx3QkFBd0JELEtBQUtFLFNBQVMsQ0FBQ0MsUUFBUTtRQUdqREMsWUFBWUMsSUFBSSxFQUFFTCxJQUFJLEVBQUVNLElBQUksQ0FBRTtZQUMxQixLQUFLLENBQUNBLE1BQU1DLHlCQUF5QixPQUMvQkMsT0FBT0MsSUFBSSxDQUFDSixRQUNaTCxLQUFLRSxTQUFTLENBQ1hRLFVBQVUsQ0FBQ0wsTUFBTUwsS0FBS1csV0FBVyxDQUFDQyxTQUFTLElBQUk7Z0JBQ2hELEdBQUdOLElBQUk7Z0JBQ1BPLFFBQVFQLE1BQU1PLFVBQVVmLCtDQUFrQixDQUFDLElBQUlpQixRQUFRLENBQUMsVUFBVUMsS0FBSyxDQUFDLEdBQUc7WUFDL0UsR0FDS0MsTUFBTTtZQUNmLElBQUksQ0FBQ0MsSUFBSSxHQUFHbEI7WUFDWixJQUFJLENBQUNtQixNQUFNLEdBQUduQixLQUFLVyxXQUFXLENBQUNDLFNBQVM7UUFDNUM7UUFDQVEsT0FBTztZQUNILE9BQU8sS0FBSyxDQUFDQSxLQUFLLElBQUksQ0FBQ0QsTUFBTTtRQUNqQztRQUNBLElBQUlFLE9BQU87WUFDUCxPQUFPLElBQUksQ0FBQ0osTUFBTSxHQUFHSyxNQUFNO1FBQy9CO1FBQ0EsTUFBTUMsa0JBQWtCakIsSUFBSSxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQ1ksSUFBSSxDQUFDTSxRQUFRLENBQUNDLGlCQUFpQixDQUFDLElBQUksRUFBRTtnQkFBRSxHQUFHbkIsSUFBSTtnQkFBRW9CLHFCQUFxQjtZQUFLLEVBQUMsRUFBR3JCLElBQUk7UUFDMUc7UUFDQSxNQUFNc0IsT0FBT3JCLElBQUksRUFBRTtZQUNmLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQ1ksSUFBSSxDQUFDTSxRQUFRLENBQUNDLGlCQUFpQixDQUFDLElBQUksRUFBRW5CLEtBQUksRUFBR0QsSUFBSTtRQUN4RTtRQUNBLGdGQUFnRjtRQUNoRiw4RkFBOEY7UUFDOUYsSUFBSTtRQUNKLE1BQU11QixXQUFXO1lBQ2IsT0FBTyxJQUFJLENBQUNWLElBQUksQ0FBQ1csS0FBSyxDQUFDRCxRQUFRLENBQUMsSUFBSSxDQUFDVixJQUFJLENBQUNQLFdBQVcsQ0FBQ21CLElBQUksRUFBRSxJQUFJLENBQUNULElBQUk7UUFDekU7UUFDQSxNQUFNVSxVQUFVO1lBQ1osT0FBTy9CLEtBQUtFLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDNkIsTUFBTSxDQUFDLElBQUksQ0FBQ2YsTUFBTTtRQUNyRDtJQUNKO0lBQ0EsT0FBT2hCO0FBQ1gsRUFDQSw0REFBNEQ7Q0FDNUQsc0RBQXNEO0NBQ3RELGtCQUFrQjtDQUNsQixxRUFBcUU7Q0FDckUseUZBQXlGO0NBQ3pGLDJEQUEyRDtDQUMzRCxJQUFJO0NBQ0osdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cytzZGtAMC4wLjJfYXJ3ZWF2ZUAxLjE1LjdfYnVmZmVydXRpbEA0LjAuOV9kZWJ1Z0A0LjQuMF90eXBlc2NyaXB0QDUuOC4zX3V0Zi04LXZhbGlkYXRlQDUuMC4xMC9ub2RlX21vZHVsZXMvQGlyeXMvc2RrL2J1aWxkL2VzbS9jb21tb24vdHJhbnNhY3Rpb24uanM/YTViOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ3J5cHRvIGZyb20gXCJjcnlwdG9cIjtcbi8qKlxuICogRXh0ZW5kZWQgRGF0YUl0ZW0gdGhhdCBhbGxvd3MgZm9yIHNlYW1sZXNzIElyeXMgb3BlcmF0aW9ucywgc3VjaCBhcyBzaWduaW5nIGFuZCB1cGxvYWRpbmcuXG4gKiBUYWtlcyB0aGUgc2FtZSBwYXJhbWV0ZXJzIGFzIGEgcmVndWxhciBEYXRhSXRlbS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRJcnlzVHJhbnNhY3Rpb24oaXJ5cykge1xuICAgIGNsYXNzIElyeXNUcmFuc2FjdGlvbiBleHRlbmRzIGlyeXMuYXJidW5kbGVzLkRhdGFJdGVtIHtcbiAgICAgICAgSXJ5cztcbiAgICAgICAgc2lnbmVyO1xuICAgICAgICBjb25zdHJ1Y3RvcihkYXRhLCBpcnlzLCBvcHRzKSB7XG4gICAgICAgICAgICBzdXBlcihvcHRzPy5kYXRhSXNSYXdUcmFuc2FjdGlvbiA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgID8gQnVmZmVyLmZyb20oZGF0YSlcbiAgICAgICAgICAgICAgICA6IGlyeXMuYXJidW5kbGVzXG4gICAgICAgICAgICAgICAgICAgIC5jcmVhdGVEYXRhKGRhdGEsIGlyeXMudG9rZW5Db25maWcuZ2V0U2lnbmVyKCksIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yOiBvcHRzPy5hbmNob3IgPz8gQ3J5cHRvLnJhbmRvbUJ5dGVzKDMyKS50b1N0cmluZyhcImJhc2U2NFwiKS5zbGljZSgwLCAzMiksXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJhdygpKTtcbiAgICAgICAgICAgIHRoaXMuSXJ5cyA9IGlyeXM7XG4gICAgICAgICAgICB0aGlzLnNpZ25lciA9IGlyeXMudG9rZW5Db25maWcuZ2V0U2lnbmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2lnbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5zaWduKHRoaXMuc2lnbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJhdygpLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBhc3luYyB1cGxvYWRXaXRoUmVjZWlwdChvcHRzKSB7XG4gICAgICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuSXJ5cy51cGxvYWRlci51cGxvYWRUcmFuc2FjdGlvbih0aGlzLCB7IC4uLm9wdHMsIGdldFJlY2VpcHRTaWduYXR1cmU6IHRydWUgfSkpLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgYXN5bmMgdXBsb2FkKG9wdHMpIHtcbiAgICAgICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5JcnlzLnVwbG9hZGVyLnVwbG9hZFRyYW5zYWN0aW9uKHRoaXMsIG9wdHMpKS5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN0YXRpYyBmcm9tUmF3KHJhd1RyYW5zYWN0aW9uOiBCdWZmZXIsIElyeXNJbnN0YW5jZTogSXJ5cyk6IElyeXNUcmFuc2FjdGlvbiB7XG4gICAgICAgIC8vICAgcmV0dXJuIG5ldyBJcnlzVHJhbnNhY3Rpb24ocmF3VHJhbnNhY3Rpb24sIElyeXNJbnN0YW5jZSwgeyBkYXRhSXNSYXdUcmFuc2FjdGlvbjogdHJ1ZSB9KTtcbiAgICAgICAgLy8gfVxuICAgICAgICBhc3luYyBnZXRQcmljZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLklyeXMudXRpbHMuZ2V0UHJpY2UodGhpcy5JcnlzLnRva2VuQ29uZmlnLm5hbWUsIHRoaXMuc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgYXN5bmMgaXNWYWxpZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBpcnlzLmFyYnVuZGxlcy5EYXRhSXRlbS52ZXJpZnkodGhpcy5nZXRSYXcoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElyeXNUcmFuc2FjdGlvbjtcbn1cbi8vIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJcnlzVHJhbnNhY3Rpb24gZXh0ZW5kcyBEYXRhSXRlbSB7fVxuLy8gZXhwb3J0IGludGVyZmFjZSBJcnlzVHJhbnNhY3Rpb24gZXh0ZW5kcyBEYXRhSXRlbSB7XG4vLyAgIHNpemU6IG51bWJlcjtcbi8vICAgdXBsb2FkV2l0aFJlY2VpcHQob3B0cz86IFVwbG9hZE9wdGlvbnMpOiBQcm9taXNlPFVwbG9hZFJlY2VpcHQ+O1xuLy8gICB1cGxvYWQob3B0czogVXBsb2FkT3B0aW9ucyAmIHsgZ2V0UmVjZWlwdFNpZ25hdHVyZTogdHJ1ZSB9KTogUHJvbWlzZTxVcGxvYWRSZWNlaXB0Pjtcbi8vICAgdXBsb2FkKG9wdHM/OiBVcGxvYWRPcHRpb25zKTogUHJvbWlzZTxVcGxvYWRSZXNwb25zZT47XG4vLyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiQ3J5cHRvIiwiYnVpbGRJcnlzVHJhbnNhY3Rpb24iLCJpcnlzIiwiSXJ5c1RyYW5zYWN0aW9uIiwiYXJidW5kbGVzIiwiRGF0YUl0ZW0iLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJvcHRzIiwiZGF0YUlzUmF3VHJhbnNhY3Rpb24iLCJCdWZmZXIiLCJmcm9tIiwiY3JlYXRlRGF0YSIsInRva2VuQ29uZmlnIiwiZ2V0U2lnbmVyIiwiYW5jaG9yIiwicmFuZG9tQnl0ZXMiLCJ0b1N0cmluZyIsInNsaWNlIiwiZ2V0UmF3IiwiSXJ5cyIsInNpZ25lciIsInNpZ24iLCJzaXplIiwibGVuZ3RoIiwidXBsb2FkV2l0aFJlY2VpcHQiLCJ1cGxvYWRlciIsInVwbG9hZFRyYW5zYWN0aW9uIiwiZ2V0UmVjZWlwdFNpZ25hdHVyZSIsInVwbG9hZCIsImdldFByaWNlIiwidXRpbHMiLCJuYW1lIiwiaXNWYWxpZCIsInZlcmlmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transactions.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transactions.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transaction: () => (/* binding */ Transaction)\n/* harmony export */ });\nclass Transaction {\n    constructor(irys){\n        this.irys = irys;\n    }\n    async getById(id) {\n        const res = (await this.query({\n            ids: [\n                id\n            ],\n            limit: 1\n        })).at(0);\n        if (!res) throw new Error(`Unable to locate tx with id ${id}`);\n        return res;\n    }\n    async getByOwner(owner) {\n        const res = (await this.query({\n            owners: [\n                owner\n            ],\n            limit: 1\n        })).at(0);\n        if (!res) throw new Error(`Unable to locate tx with owner ${owner}`);\n        return res;\n    }\n    async getByTag(name, value) {\n        const res = (await this.query({\n            tags: [\n                {\n                    name,\n                    values: [\n                        value\n                    ]\n                }\n            ],\n            limit: 1\n        })).at(0);\n        if (!res) throw new Error(`Unable to locate tx with tag ${name}:${value}`);\n        return res;\n    }\n    async query(parameters) {\n        // full bundler node GQL query\n        const query = `\n    query ($ids: [String!], $after: String, $currency: String, $owners: [String!], $limit: Int, $order: SortOrder, $hasTags: Boolean, $tags: [TagFilter!]) {\n      transactions(ids: $ids, after: $after, currency: $currency, owners: $owners, limit: $limit, order: $order, hasTags: $hasTags, tags: $tags) {\n        edges {\n          cursor\n          node {\n            address\n            currency\n            id\n            receipt {\n              deadlineHeight\n              signature\n              timestamp\n              version\n            }\n            signature\n            tags {\n              name\n              value\n            }\n            timestamp\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    `;\n        const txs = [];\n        let endCursor = null;\n        do {\n            const gqlRes = await this.irys.api.post(\"/graphql\", {\n                query,\n                variables: {\n                    ...parameters,\n                    after: endCursor ?? parameters.after\n                }\n            }, undefined);\n            endCursor = gqlRes.data.data.transactions?.pageInfo?.hasNextPage ? gqlRes.data.data.transactions.pageInfo.endCursor : null;\n            txs.push(...gqlRes.data.data.transactions.edges.map((t)=>t.node));\n        }while (endCursor);\n        return txs;\n    }\n} //# sourceMappingURL=transactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL3RyYW5zYWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUE7SUFFVEMsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO0lBQ2hCO0lBQ0EsTUFBTUMsUUFBUUMsRUFBRSxFQUFFO1FBQ2QsTUFBTUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDQyxLQUFLLENBQUM7WUFBRUMsS0FBSztnQkFBQ0g7YUFBRztZQUFFSSxPQUFPO1FBQUUsRUFBQyxFQUFHQyxFQUFFLENBQUM7UUFDM0QsSUFBSSxDQUFDSixLQUNELE1BQU0sSUFBSUssTUFBTSxDQUFDLDRCQUE0QixFQUFFTixHQUFHLENBQUM7UUFDdkQsT0FBT0M7SUFDWDtJQUNBLE1BQU1NLFdBQVdDLEtBQUssRUFBRTtRQUNwQixNQUFNUCxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUNDLEtBQUssQ0FBQztZQUFFTyxRQUFRO2dCQUFDRDthQUFNO1lBQUVKLE9BQU87UUFBRSxFQUFDLEVBQUdDLEVBQUUsQ0FBQztRQUNqRSxJQUFJLENBQUNKLEtBQ0QsTUFBTSxJQUFJSyxNQUFNLENBQUMsK0JBQStCLEVBQUVFLE1BQU0sQ0FBQztRQUM3RCxPQUFPUDtJQUNYO0lBQ0EsTUFBTVMsU0FBU0MsSUFBSSxFQUFFQyxLQUFLLEVBQUU7UUFDeEIsTUFBTVgsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDQyxLQUFLLENBQUM7WUFBRVcsTUFBTTtnQkFBQztvQkFBRUY7b0JBQU1HLFFBQVE7d0JBQUNGO3FCQUFNO2dCQUFDO2FBQUU7WUFBRVIsT0FBTztRQUFFLEVBQUMsRUFBR0MsRUFBRSxDQUFDO1FBQ25GLElBQUksQ0FBQ0osS0FDRCxNQUFNLElBQUlLLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRUssS0FBSyxDQUFDLEVBQUVDLE1BQU0sQ0FBQztRQUNuRSxPQUFPWDtJQUNYO0lBQ0EsTUFBTUMsTUFBTWEsVUFBVSxFQUFFO1FBQ3BCLDhCQUE4QjtRQUM5QixNQUFNYixRQUFRLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBNkJuQixDQUFDO1FBQ0csTUFBTWMsTUFBTSxFQUFFO1FBQ2QsSUFBSUMsWUFBWTtRQUNoQixHQUFHO1lBQ0MsTUFBTUMsU0FBUyxNQUFNLElBQUksQ0FBQ3BCLElBQUksQ0FBQ3FCLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDLFlBQVk7Z0JBQ2hEbEI7Z0JBQ0FtQixXQUFXO29CQUFFLEdBQUdOLFVBQVU7b0JBQUVPLE9BQU9MLGFBQWFGLFdBQVdPLEtBQUs7Z0JBQUM7WUFDckUsR0FBR0M7WUFDSE4sWUFBWUMsT0FBT00sSUFBSSxDQUFDQSxJQUFJLENBQUNDLFlBQVksRUFBRUMsVUFBVUMsY0FBY1QsT0FBT00sSUFBSSxDQUFDQSxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsUUFBUSxDQUFDVCxTQUFTLEdBQUc7WUFDdEhELElBQUlZLElBQUksSUFBSVYsT0FBT00sSUFBSSxDQUFDQSxJQUFJLENBQUNDLFlBQVksQ0FBQ0ksS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsSUFBSTtRQUNyRSxRQUFTZixXQUFXO1FBQ3BCLE9BQU9EO0lBQ1g7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL3RyYW5zYWN0aW9ucy5qcz81ZDY2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiB7XG4gICAgaXJ5cztcbiAgICBjb25zdHJ1Y3RvcihpcnlzKSB7XG4gICAgICAgIHRoaXMuaXJ5cyA9IGlyeXM7XG4gICAgfVxuICAgIGFzeW5jIGdldEJ5SWQoaWQpIHtcbiAgICAgICAgY29uc3QgcmVzID0gKGF3YWl0IHRoaXMucXVlcnkoeyBpZHM6IFtpZF0sIGxpbWl0OiAxIH0pKS5hdCgwKTtcbiAgICAgICAgaWYgKCFyZXMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2NhdGUgdHggd2l0aCBpZCAke2lkfWApO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBhc3luYyBnZXRCeU93bmVyKG93bmVyKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IChhd2FpdCB0aGlzLnF1ZXJ5KHsgb3duZXJzOiBbb3duZXJdLCBsaW1pdDogMSB9KSkuYXQoMCk7XG4gICAgICAgIGlmICghcmVzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbG9jYXRlIHR4IHdpdGggb3duZXIgJHtvd25lcn1gKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgYXN5bmMgZ2V0QnlUYWcobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmVzID0gKGF3YWl0IHRoaXMucXVlcnkoeyB0YWdzOiBbeyBuYW1lLCB2YWx1ZXM6IFt2YWx1ZV0gfV0sIGxpbWl0OiAxIH0pKS5hdCgwKTtcbiAgICAgICAgaWYgKCFyZXMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2NhdGUgdHggd2l0aCB0YWcgJHtuYW1lfToke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBhc3luYyBxdWVyeShwYXJhbWV0ZXJzKSB7XG4gICAgICAgIC8vIGZ1bGwgYnVuZGxlciBub2RlIEdRTCBxdWVyeVxuICAgICAgICBjb25zdCBxdWVyeSA9IGBcbiAgICBxdWVyeSAoJGlkczogW1N0cmluZyFdLCAkYWZ0ZXI6IFN0cmluZywgJGN1cnJlbmN5OiBTdHJpbmcsICRvd25lcnM6IFtTdHJpbmchXSwgJGxpbWl0OiBJbnQsICRvcmRlcjogU29ydE9yZGVyLCAkaGFzVGFnczogQm9vbGVhbiwgJHRhZ3M6IFtUYWdGaWx0ZXIhXSkge1xuICAgICAgdHJhbnNhY3Rpb25zKGlkczogJGlkcywgYWZ0ZXI6ICRhZnRlciwgY3VycmVuY3k6ICRjdXJyZW5jeSwgb3duZXJzOiAkb3duZXJzLCBsaW1pdDogJGxpbWl0LCBvcmRlcjogJG9yZGVyLCBoYXNUYWdzOiAkaGFzVGFncywgdGFnczogJHRhZ3MpIHtcbiAgICAgICAgZWRnZXMge1xuICAgICAgICAgIGN1cnNvclxuICAgICAgICAgIG5vZGUge1xuICAgICAgICAgICAgYWRkcmVzc1xuICAgICAgICAgICAgY3VycmVuY3lcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgICByZWNlaXB0IHtcbiAgICAgICAgICAgICAgZGVhZGxpbmVIZWlnaHRcbiAgICAgICAgICAgICAgc2lnbmF0dXJlXG4gICAgICAgICAgICAgIHRpbWVzdGFtcFxuICAgICAgICAgICAgICB2ZXJzaW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWduYXR1cmVcbiAgICAgICAgICAgIHRhZ3Mge1xuICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aW1lc3RhbXBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFnZUluZm8ge1xuICAgICAgICAgIGVuZEN1cnNvclxuICAgICAgICAgIGhhc05leHRQYWdlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYDtcbiAgICAgICAgY29uc3QgdHhzID0gW107XG4gICAgICAgIGxldCBlbmRDdXJzb3IgPSBudWxsO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjb25zdCBncWxSZXMgPSBhd2FpdCB0aGlzLmlyeXMuYXBpLnBvc3QoXCIvZ3JhcGhxbFwiLCB7XG4gICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7IC4uLnBhcmFtZXRlcnMsIGFmdGVyOiBlbmRDdXJzb3IgPz8gcGFyYW1ldGVycy5hZnRlciB9LFxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGVuZEN1cnNvciA9IGdxbFJlcy5kYXRhLmRhdGEudHJhbnNhY3Rpb25zPy5wYWdlSW5mbz8uaGFzTmV4dFBhZ2UgPyBncWxSZXMuZGF0YS5kYXRhLnRyYW5zYWN0aW9ucy5wYWdlSW5mby5lbmRDdXJzb3IgOiBudWxsO1xuICAgICAgICAgICAgdHhzLnB1c2goLi4uZ3FsUmVzLmRhdGEuZGF0YS50cmFuc2FjdGlvbnMuZWRnZXMubWFwKCh0KSA9PiB0Lm5vZGUpKTtcbiAgICAgICAgfSB3aGlsZSAoZW5kQ3Vyc29yKTtcbiAgICAgICAgcmV0dXJuIHR4cztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2FjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIlRyYW5zYWN0aW9uIiwiY29uc3RydWN0b3IiLCJpcnlzIiwiZ2V0QnlJZCIsImlkIiwicmVzIiwicXVlcnkiLCJpZHMiLCJsaW1pdCIsImF0IiwiRXJyb3IiLCJnZXRCeU93bmVyIiwib3duZXIiLCJvd25lcnMiLCJnZXRCeVRhZyIsIm5hbWUiLCJ2YWx1ZSIsInRhZ3MiLCJ2YWx1ZXMiLCJwYXJhbWV0ZXJzIiwidHhzIiwiZW5kQ3Vyc29yIiwiZ3FsUmVzIiwiYXBpIiwicG9zdCIsInZhcmlhYmxlcyIsImFmdGVyIiwidW5kZWZpbmVkIiwiZGF0YSIsInRyYW5zYWN0aW9ucyIsInBhZ2VJbmZvIiwiaGFzTmV4dFBhZ2UiLCJwdXNoIiwiZWRnZXMiLCJtYXAiLCJ0Iiwibm9kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/upload.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/upload.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHUNKING_THRESHOLD: () => (/* binding */ CHUNKING_THRESHOLD),\n/* harmony export */   \"default\": () => (/* binding */ Uploader),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var _supercharge_promise_pool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @supercharge/promise-pool */ \"(ssr)/./node_modules/.pnpm/@supercharge+promise-pool@3.2.0/node_modules/@supercharge/promise-pool/dist/index.js\");\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/.pnpm/base64url@3.0.1/node_modules/base64url/index.js\");\n/* harmony import */ var _chunkingUploader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunkingUploader.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/chunkingUploader.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n\n\n\n\n\n\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nconst CHUNKING_THRESHOLD = 50000000;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass Uploader {\n    constructor(api, utils, token, tokenConfig, irysTransaction){\n        this.api = api;\n        this.token = token;\n        this.tokenConfig = tokenConfig;\n        this.arbundles = this.tokenConfig.irys.arbundles;\n        this.utils = utils;\n        this.irysTransaction = irysTransaction;\n    }\n    async uploadTransaction(transaction, opts) {\n        let res;\n        const isDataItem = this.arbundles.DataItem.isDataItem(transaction);\n        if (this.forceUseChunking || isDataItem && transaction.getRaw().length >= CHUNKING_THRESHOLD || !isDataItem) {\n            res = await this.chunkedUploader.uploadTransaction(isDataItem ? transaction.getRaw() : transaction, opts);\n        } else {\n            const { url, timeout, headers: confHeaders } = this.api.getConfig();\n            const headers = {\n                \"Content-Type\": \"application/octet-stream\",\n                ...confHeaders\n            };\n            res = await this.api.post(new URL(`/tx/${this.token}`, url).toString(), transaction.getRaw(), {\n                headers: headers,\n                timeout,\n                maxBodyLength: Infinity\n            });\n            if (res.status === 201) {\n                throw new Error(res.data);\n            }\n        }\n        switch(res.status){\n            case 402:\n                throw new Error(\"Not enough funds to send data\");\n            default:\n                if (res.status >= 400) {\n                    throw new Error(`whilst uploading Irys transaction: ${res.status} ${res.statusText}`);\n                }\n        }\n        res.data.verify = async ()=>this.utils.verifyReceipt(res.data);\n        return res;\n    }\n    async uploadData(data, opts) {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data);\n        }\n        if (Buffer.isBuffer(data)) {\n            if (data.length <= CHUNKING_THRESHOLD) {\n                const dataItem = this.arbundles.createData(data, this.tokenConfig.getSigner(), {\n                    ...opts,\n                    anchor: opts?.anchor ?? (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomBytes)(32).toString(\"base64\").slice(0, 32)\n                });\n                await dataItem.sign(this.tokenConfig.getSigner());\n                return (await this.uploadTransaction(dataItem, {\n                    ...opts?.upload\n                })).data;\n            }\n        }\n        return (await this.chunkedUploader.uploadData(data, opts)).data;\n    }\n    // concurrently uploads transactions\n    async concurrentUploader(data, opts) {\n        const errors = [];\n        const logFn = opts?.logFunction ? opts?.logFunction : async (_)=>{\n            return;\n        };\n        const concurrency = opts?.concurrency ?? 5;\n        const results = await _supercharge_promise_pool__WEBPACK_IMPORTED_MODULE_5__.PromisePool.for(data).withConcurrency(concurrency >= 1 ? concurrency : 5).handleError(async (error, _)=>{\n            errors.push(error);\n            if (error.message === \"Not enough funds to send data\") {\n                throw error;\n            }\n        }).process(async (item, i, _)=>{\n            await async_retry__WEBPACK_IMPORTED_MODULE_4__(async (bail)=>{\n                try {\n                    const res = await this.processItem(item, opts?.itemOptions);\n                    if (i % concurrency == 0) {\n                        await logFn(`Processed ${i} Items`);\n                    }\n                    if (opts?.resultProcessor) {\n                        return await opts.resultProcessor({\n                            item,\n                            res,\n                            i\n                        });\n                    } else {\n                        return {\n                            item,\n                            res,\n                            i\n                        };\n                    }\n                } catch (e) {\n                    if (e?.message === \"Not enough funds to send data\") {\n                        bail(e);\n                    }\n                    throw e;\n                }\n            }, {\n                retries: 3,\n                minTimeout: 1000,\n                maxTimeout: 10000\n            });\n        });\n        return {\n            errors,\n            results: results.results\n        };\n    }\n    async processItem(data, opts) {\n        if (this.arbundles.DataItem.isDataItem(data)) {\n            return this.uploadTransaction(data, {\n                ...opts?.upload\n            });\n        }\n        return this.uploadData(data, opts);\n    }\n    /**\n     * geneates a manifest JSON object\n     * @param config.items mapping of logical paths to item IDs\n     * @param config.indexFile optional logical path of the index file for the manifest\n     * @returns\n     */ async generateManifest(config) {\n        const { items, indexFile } = config;\n        const manifest = {\n            manifest: \"arweave/paths\",\n            version: \"0.1.0\",\n            paths: {}\n        };\n        if (indexFile) {\n            if (!items.has(indexFile)) {\n                throw new Error(`Unable to access item: ${indexFile}`);\n            }\n            manifest.index = {\n                path: indexFile\n            };\n        }\n        for (const [k, v] of items.entries()){\n            // @ts-expect-error constant index type\n            manifest.paths[k] = {\n                id: v\n            };\n        }\n        return manifest;\n    }\n    get chunkedUploader() {\n        return new _chunkingUploader_js__WEBPACK_IMPORTED_MODULE_2__.ChunkingUploader(this.tokenConfig, this.api);\n    }\n    set useChunking(state) {\n        if (typeof state === \"boolean\") {\n            this.forceUseChunking = state;\n        }\n    }\n    set contentType(type) {\n        // const fullType = mime.contentType(type)\n        // if(!fullType){\n        //     throw new Error(\"Invali\")\n        // }\n        this.contentTypeOverride = type;\n    }\n    async uploadBundle(transactions, opts) {\n        const throwawayKey = opts?.throwawayKey ?? await this.arbundles.getCryptoDriver().generateJWK();\n        const ephemeralSigner = new arbundles__WEBPACK_IMPORTED_MODULE_0__.ArweaveSigner(throwawayKey);\n        const txs = transactions.map((tx)=>this.arbundles.DataItem.isDataItem(tx) ? tx : this.arbundles.createData(tx, ephemeralSigner));\n        const bundle = await this.arbundles.bundleAndSignData(txs, ephemeralSigner);\n        // upload bundle with bundle specific tags, use actual signer for this.\n        const tx = this.arbundles.createData(bundle.getRaw(), this.tokenConfig.getSigner(), {\n            tags: [\n                {\n                    name: \"Bundle-Format\",\n                    value: \"binary\"\n                },\n                {\n                    name: \"Bundle-Version\",\n                    value: \"2.0.0\"\n                }\n            ]\n        });\n        await tx.sign(this.tokenConfig.getSigner());\n        const res = await this.uploadTransaction(tx, opts);\n        const throwawayKeyAddress = base64url__WEBPACK_IMPORTED_MODULE_1__(Buffer.from(await this.arbundles.getCryptoDriver().hash(base64url__WEBPACK_IMPORTED_MODULE_1__.toBuffer(base64url__WEBPACK_IMPORTED_MODULE_1__(ephemeralSigner.publicKey)))));\n        return {\n            ...res,\n            txs,\n            throwawayKey,\n            throwawayKeyAddress\n        };\n    }\n} //# sourceMappingURL=upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/upload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Utils),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/.pnpm/base64url@3.0.1/node_modules/base64url/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n\n\n\nbignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set({\n    DECIMAL_PLACES: 50\n});\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nclass Utils {\n    constructor(api, token, tokenConfig){\n        this.api = api;\n        this.token = token;\n        this.tokenConfig = tokenConfig;\n        this.arbundles = this.tokenConfig.irys.arbundles;\n    }\n    /**\n     * Throws an error if the provided axios reponse has a status code != 200\n     * @param res an axios response\n     * @returns nothing if the status code is 200\n     */ static checkAndThrow(res, context, exceptions) {\n        if (res?.status && !(exceptions ?? []).includes(res.status) && res.status != 200) {\n            throw new Error(`HTTP Error: ${context}: ${res.status} ${typeof res.data !== \"string\" ? res.statusText : res.data}`);\n        }\n        return;\n    }\n    /**\n     * Gets the nonce used for withdrawal request validation from the bundler\n     * @returns nonce for the current user\n     */ async getNonce() {\n        const res = await this.api.get(`/account/withdrawals/${this.tokenConfig.name}?address=${this.tokenConfig.address}`);\n        Utils.checkAndThrow(res, \"Getting withdrawal nonce\");\n        return res.data;\n    }\n    /**\n     * Gets the balance on the current bundler for the specified user\n     * @param address the user's address to query\n     * @returns the balance in winston\n     */ async getBalance(address) {\n        const res = await this.api.get(`/account/balance/${this.tokenConfig.name}?address=${address}`);\n        Utils.checkAndThrow(res, \"Getting balance\");\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](res.data.balance);\n    }\n    /**\n     * Queries the bundler to get it's address for a specific token\n     * @returns the bundler's address\n     */ async getBundlerAddress(token) {\n        const res = await this.api.get(\"/info\");\n        Utils.checkAndThrow(res, \"Getting Bundler address\");\n        const address = res.data.addresses[token];\n        if (!address) {\n            throw new Error(`Specified bundler does not support token ${token}`);\n        }\n        return address;\n    }\n    /**\n     * Calculates the price for [bytes] bytes paid for with [token] for the loaded Irys node.\n     * @param token\n     * @param bytes\n     * @returns\n     */ async getPrice(token, bytes) {\n        const res = await this.api.get(`/price/${token}/${bytes}`);\n        Utils.checkAndThrow(res, \"Getting storage cost\");\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](res.data);\n    }\n    /**\n     * This function *estimates* the cost in atomic units for uploading a given set of files\n     * note: this function becomes less accurate the smaller your transactions, unless you provide it with an accurate headerSizeAvg\n     * @param folderInfo either an array of file sizes in bytes, or an object containing the total number of files and the sum total size of the files in bytes\n     * note: for a more precise estimate, you can create an empty (dataless) transaction (make sure you still set tags and other metadata!) and then pass `tx.size` as `headerSizeAvg`\n     */ async estimateFolderPrice(folderInfo) {\n        if (Array.isArray(folderInfo)) {\n            folderInfo = {\n                fileCount: folderInfo.length,\n                totalBytes: folderInfo.reduce((acc, v)=>acc + v, 0)\n            };\n        }\n        // create a 0 data byte tx to estimate the per tx header overhead\n        const headerSizeAvg = folderInfo.headerSizeAvg ?? this.arbundles.createData(\"\", this.tokenConfig.getSigner()).getRaw().length;\n        const pricePerTxBase = await this.getPrice(this.tokenConfig.name, headerSizeAvg);\n        const basePriceForTxs = pricePerTxBase.multipliedBy(folderInfo.fileCount);\n        const priceForData = (await this.getPrice(this.tokenConfig.name, folderInfo.totalBytes)).plus(basePriceForTxs).decimalPlaces(0);\n        return priceForData;\n    }\n    /**\n     * Returns the decimal values' equivalent in atomic units\n     * @example\n     * 0.1 ETH -> 100,000,000,000,000,000 wei\n     * ```\n     * toAtomic(100_000_000_000_000_000) -> 0.1\n     * ```\n     * @param decimalAmount - amount in decimal\n     * @returns amount in atomic units\n     */ toAtomic(decimalAmount) {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](decimalAmount).multipliedBy(this.tokenConfig.base[1]);\n    }\n    /**\n     * Returns the atomic amounts' equivalent in decimal units\n     * @example\n     * 100,000,000,000,000,000 wei -> 0.1 ETH\n     * ```\n     * fromAtomic(0.1) -> 100_000_000_000_000_000\n     * ```\n     * @param atomicAmount\n     * @returns\n     */ fromAtomic(atomicAmount) {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](atomicAmount).dividedBy(this.tokenConfig.base[1]);\n    }\n    /**\n     * Polls for transaction confirmation (or at least pending status) - used for fast currencies (i.e not arweave)\n     * before posting the fund request to the server (so the server doesn't have to poll)\n     * @param txid\n     * @returns\n     */ async confirmationPoll(txid, seconds = 30) {\n        if (this.tokenConfig.isSlow) return;\n        if (seconds < 0) seconds = 0;\n        let lastError;\n        let timedout;\n        const internalPoll = async ()=>{\n            while(!timedout){\n                const getRes = await this.tokenConfig.getTx(txid).then((v)=>v?.confirmed).catch((err)=>{\n                    lastError = err;\n                    return false;\n                });\n                if (getRes) return true;\n                await sleep(1000);\n            }\n            return false;\n        };\n        const racer = async ()=>{\n            await sleep(seconds * 1000);\n            timedout = true;\n            return \"RACE\";\n        };\n        const r = await Promise.race([\n            racer(),\n            internalPoll()\n        ]);\n        if (r === \"RACE\") {\n            console.warn(`Tx ${txid} didn't finalize after ${seconds} seconds ${lastError ? ` - ${lastError}` : \"\"}`);\n            return lastError;\n        }\n        return r;\n    }\n    /**\n     * @deprecated this method is deprecated in favour of fromAtomic - removal slated for 0.12.0\n     */ unitConverter(baseUnits) {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](baseUnits).dividedBy(this.tokenConfig.base[1]);\n    }\n    async verifyReceipt(receipt) {\n        return Utils.verifyReceipt(this.arbundles, receipt);\n    }\n    static async verifyReceipt(dependencies, receipt) {\n        const { id, deadlineHeight, timestamp, public: pubKey, signature, version } = receipt;\n        const dh = await dependencies.deepHash([\n            dependencies.stringToBuffer(\"Bundlr\"),\n            dependencies.stringToBuffer(version),\n            dependencies.stringToBuffer(id),\n            dependencies.stringToBuffer(deadlineHeight.toString()),\n            dependencies.stringToBuffer(timestamp.toString())\n        ]);\n        return await dependencies.getCryptoDriver().verify(pubKey, dh, base64url__WEBPACK_IMPORTED_MODULE_0__.toBuffer(signature));\n    }\n    async getReceipt(txId) {\n        // get receipt information from GQL\n        const query = `query {\n      transactions(ids: [\"${txId}\"]) {\n        edges {\n          node {\n            receipt {\n              signature\n              timestamp\n              version\n              deadlineHeight\n            }\n          }\n        }\n      }\n    }`;\n        const queryRes = await async_retry__WEBPACK_IMPORTED_MODULE_2__(async ()=>{\n            return await this.api.post(\"/graphql\", {\n                query\n            }, {\n                headers: {\n                    \"content-type\": \"application/json\"\n                },\n                validateStatus: (s)=>s === 200\n            });\n        });\n        const receiptData = queryRes?.data?.data?.transactions?.edges?.at(0)?.node?.receipt;\n        if (!receiptData) throw new Error(`Missing required receipt data from node for tx: ${txId}`);\n        // get public key from node\n        const pubKey = (await this.api.get(\"/public\")).data;\n        const receipt = {\n            public: pubKey,\n            version: receiptData.version,\n            id: txId,\n            timestamp: receiptData.timestamp,\n            validatorSignatures: [],\n            signature: receiptData.signature,\n            deadlineHeight: receiptData.deadlineHeight,\n            // use stub to conform to type\n            verify: async ()=>{\n                return false;\n            }\n        };\n        // inject method\n        receipt.verify = async ()=>this.verifyReceipt(receipt);\n        return receipt;\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/withdrawal.js":
/*!*************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/withdrawal.js ***!
  \*************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withdrawBalance: () => (/* binding */ withdrawBalance)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/.pnpm/base64url@3.0.1/node_modules/base64url/index.js\");\n\n\n\n/**\n * Create and send a withdrawal request\n * @param utils Instance of Utils\n * @param api Instance of API\n * @param wallet Wallet to use\n * @param amount amount to withdraw in winston\n * @returns the response from the bundler\n */ async function withdrawBalance(utils, api, amount) {\n    const c = utils.tokenConfig;\n    const { deepHash, stringToBuffer } = c.irys.arbundles;\n    const pkey = await c.getPublicKey();\n    const data = {\n        publicKey: pkey,\n        currency: utils.token,\n        amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](amount).toString(),\n        nonce: await utils.getNonce(),\n        signature: \"\",\n        sigType: c.getSigner().signatureType\n    };\n    const deephash = await deepHash([\n        stringToBuffer(data.currency),\n        stringToBuffer(data.amount.toString()),\n        stringToBuffer(data.nonce.toString())\n    ]);\n    if (!Buffer.isBuffer(data.publicKey)) {\n        data.publicKey = Buffer.from(data.publicKey);\n    }\n    const signature = await c.sign(deephash);\n    const isValid = await c.verify(data.publicKey, deephash, signature);\n    data.publicKey = base64url__WEBPACK_IMPORTED_MODULE_2__.encode(data.publicKey);\n    data.signature = base64url__WEBPACK_IMPORTED_MODULE_2__.encode(Buffer.from(signature));\n    const cpk = base64url__WEBPACK_IMPORTED_MODULE_2__.toBuffer(data.publicKey);\n    const csig = base64url__WEBPACK_IMPORTED_MODULE_2__.toBuffer(data.signature);\n    // should match opk and csig\n    const dh2 = await deepHash([\n        stringToBuffer(data.currency),\n        stringToBuffer(data.amount.toString()),\n        stringToBuffer(data.nonce.toString())\n    ]);\n    const isValid2 = await c.verify(cpk, dh2, csig);\n    const isValid3 = c.ownerToAddress(c.name == \"arweave\" ? base64url__WEBPACK_IMPORTED_MODULE_2__.decode(data.publicKey) : base64url__WEBPACK_IMPORTED_MODULE_2__.toBuffer(data.publicKey)) === c.address;\n    if (!(isValid || isValid2 || isValid3)) {\n        throw new Error(`Internal withdrawal validation failed - please report this!\\nDebug Info:${JSON.stringify(data)}`);\n    }\n    const res = await api.post(\"/account/withdraw\", data);\n    if (res.status === 202) {\n        // node has timed/erroed out confirming the withdrawal\n        const txId = res.data.tx_id;\n        const withdrawalConfirmed = await utils.confirmationPoll(txId);\n        if (!(withdrawalConfirmed === true)) throw new Error(`Unable to confirm withdrawal tx ${txId} ${withdrawalConfirmed ? withdrawalConfirmed?.toString() : \"\"}`);\n    } else {\n        _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].checkAndThrow(res, \"Withdrawing balance\");\n    }\n    return res.data;\n} //# sourceMappingURL=withdrawal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vY29tbW9uL3dpdGhkcmF3YWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUNNO0FBQ0g7QUFDbEM7Ozs7Ozs7Q0FPQyxHQUNNLGVBQWVHLGdCQUFnQkMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLE1BQU07SUFDcEQsTUFBTUMsSUFBSUgsTUFBTUksV0FBVztJQUMzQixNQUFNLEVBQUVDLFFBQVEsRUFBRUMsY0FBYyxFQUFFLEdBQUdILEVBQUVJLElBQUksQ0FBQ0MsU0FBUztJQUNyRCxNQUFNQyxPQUFPLE1BQU1OLEVBQUVPLFlBQVk7SUFDakMsTUFBTUMsT0FBTztRQUNUQyxXQUFXSDtRQUNYSSxVQUFVYixNQUFNYyxLQUFLO1FBQ3JCWixRQUFRLElBQUlMLG9EQUFTQSxDQUFDSyxRQUFRYSxRQUFRO1FBQ3RDQyxPQUFPLE1BQU1oQixNQUFNaUIsUUFBUTtRQUMzQkMsV0FBVztRQUNYQyxTQUFTaEIsRUFBRWlCLFNBQVMsR0FBR0MsYUFBYTtJQUN4QztJQUNBLE1BQU1DLFdBQVcsTUFBTWpCLFNBQVM7UUFBQ0MsZUFBZUssS0FBS0UsUUFBUTtRQUFHUCxlQUFlSyxLQUFLVCxNQUFNLENBQUNhLFFBQVE7UUFBS1QsZUFBZUssS0FBS0ssS0FBSyxDQUFDRCxRQUFRO0tBQUk7SUFDOUksSUFBSSxDQUFDUSxPQUFPQyxRQUFRLENBQUNiLEtBQUtDLFNBQVMsR0FBRztRQUNsQ0QsS0FBS0MsU0FBUyxHQUFHVyxPQUFPRSxJQUFJLENBQUNkLEtBQUtDLFNBQVM7SUFDL0M7SUFDQSxNQUFNTSxZQUFZLE1BQU1mLEVBQUV1QixJQUFJLENBQUNKO0lBQy9CLE1BQU1LLFVBQVUsTUFBTXhCLEVBQUV5QixNQUFNLENBQUNqQixLQUFLQyxTQUFTLEVBQUVVLFVBQVVKO0lBQ3pEUCxLQUFLQyxTQUFTLEdBQUdkLDZDQUFnQixDQUFDYSxLQUFLQyxTQUFTO0lBQ2hERCxLQUFLTyxTQUFTLEdBQUdwQiw2Q0FBZ0IsQ0FBQ3lCLE9BQU9FLElBQUksQ0FBQ1A7SUFDOUMsTUFBTVksTUFBTWhDLCtDQUFrQixDQUFDYSxLQUFLQyxTQUFTO0lBQzdDLE1BQU1vQixPQUFPbEMsK0NBQWtCLENBQUNhLEtBQUtPLFNBQVM7SUFDOUMsNEJBQTRCO0lBQzVCLE1BQU1lLE1BQU0sTUFBTTVCLFNBQVM7UUFBQ0MsZUFBZUssS0FBS0UsUUFBUTtRQUFHUCxlQUFlSyxLQUFLVCxNQUFNLENBQUNhLFFBQVE7UUFBS1QsZUFBZUssS0FBS0ssS0FBSyxDQUFDRCxRQUFRO0tBQUk7SUFDekksTUFBTW1CLFdBQVcsTUFBTS9CLEVBQUV5QixNQUFNLENBQUNFLEtBQUtHLEtBQUtEO0lBQzFDLE1BQU1HLFdBQVdoQyxFQUFFaUMsY0FBYyxDQUFDakMsRUFBRWtDLElBQUksSUFBSSxZQUFZdkMsNkNBQWdCLENBQUNhLEtBQUtDLFNBQVMsSUFBSWQsK0NBQWtCLENBQUNhLEtBQUtDLFNBQVMsT0FBT1QsRUFBRW9DLE9BQU87SUFDNUksSUFBSSxDQUFFWixDQUFBQSxXQUFXTyxZQUFZQyxRQUFPLEdBQUk7UUFDcEMsTUFBTSxJQUFJSyxNQUFNLENBQUMsd0VBQXdFLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQy9CLE1BQU0sQ0FBQztJQUNySDtJQUNBLE1BQU1nQyxNQUFNLE1BQU0xQyxJQUFJMkMsSUFBSSxDQUFDLHFCQUFxQmpDO0lBQ2hELElBQUlnQyxJQUFJRSxNQUFNLEtBQUssS0FBSztRQUNwQixzREFBc0Q7UUFDdEQsTUFBTUMsT0FBT0gsSUFBSWhDLElBQUksQ0FBQ29DLEtBQUs7UUFDM0IsTUFBTUMsc0JBQXNCLE1BQU1oRCxNQUFNaUQsZ0JBQWdCLENBQUNIO1FBQ3pELElBQUksQ0FBRUUsQ0FBQUEsd0JBQXdCLElBQUcsR0FDN0IsTUFBTSxJQUFJUixNQUFNLENBQUMsZ0NBQWdDLEVBQUVNLEtBQUssQ0FBQyxFQUFFRSxzQkFBc0JBLHFCQUFxQmpDLGFBQWEsR0FBRyxDQUFDO0lBQy9ILE9BQ0s7UUFDRG5CLGlEQUFLQSxDQUFDc0QsYUFBYSxDQUFDUCxLQUFLO0lBQzdCO0lBQ0EsT0FBT0EsSUFBSWhDLElBQUk7QUFDbkIsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK3Nka0AwLjAuMl9hcndlYXZlQDEuMTUuN19idWZmZXJ1dGlsQDQuMC45X2RlYnVnQDQuNC4wX3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwL25vZGVfbW9kdWxlcy9AaXJ5cy9zZGsvYnVpbGQvZXNtL2NvbW1vbi93aXRoZHJhd2FsLmpzPzQxNTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFV0aWxzIGZyb20gXCIuL3V0aWxzLmpzXCI7XG5pbXBvcnQgQmlnTnVtYmVyIGZyb20gXCJiaWdudW1iZXIuanNcIjtcbmltcG9ydCBiYXNlNjR1cmwgZnJvbSBcImJhc2U2NHVybFwiO1xuLyoqXG4gKiBDcmVhdGUgYW5kIHNlbmQgYSB3aXRoZHJhd2FsIHJlcXVlc3RcbiAqIEBwYXJhbSB1dGlscyBJbnN0YW5jZSBvZiBVdGlsc1xuICogQHBhcmFtIGFwaSBJbnN0YW5jZSBvZiBBUElcbiAqIEBwYXJhbSB3YWxsZXQgV2FsbGV0IHRvIHVzZVxuICogQHBhcmFtIGFtb3VudCBhbW91bnQgdG8gd2l0aGRyYXcgaW4gd2luc3RvblxuICogQHJldHVybnMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGJ1bmRsZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZSh1dGlscywgYXBpLCBhbW91bnQpIHtcbiAgICBjb25zdCBjID0gdXRpbHMudG9rZW5Db25maWc7XG4gICAgY29uc3QgeyBkZWVwSGFzaCwgc3RyaW5nVG9CdWZmZXIgfSA9IGMuaXJ5cy5hcmJ1bmRsZXM7XG4gICAgY29uc3QgcGtleSA9IGF3YWl0IGMuZ2V0UHVibGljS2V5KCk7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgcHVibGljS2V5OiBwa2V5LFxuICAgICAgICBjdXJyZW5jeTogdXRpbHMudG9rZW4sXG4gICAgICAgIGFtb3VudDogbmV3IEJpZ051bWJlcihhbW91bnQpLnRvU3RyaW5nKCksXG4gICAgICAgIG5vbmNlOiBhd2FpdCB1dGlscy5nZXROb25jZSgpLFxuICAgICAgICBzaWduYXR1cmU6IFwiXCIsXG4gICAgICAgIHNpZ1R5cGU6IGMuZ2V0U2lnbmVyKCkuc2lnbmF0dXJlVHlwZSxcbiAgICB9O1xuICAgIGNvbnN0IGRlZXBoYXNoID0gYXdhaXQgZGVlcEhhc2goW3N0cmluZ1RvQnVmZmVyKGRhdGEuY3VycmVuY3kpLCBzdHJpbmdUb0J1ZmZlcihkYXRhLmFtb3VudC50b1N0cmluZygpKSwgc3RyaW5nVG9CdWZmZXIoZGF0YS5ub25jZS50b1N0cmluZygpKV0pO1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEucHVibGljS2V5KSkge1xuICAgICAgICBkYXRhLnB1YmxpY0tleSA9IEJ1ZmZlci5mcm9tKGRhdGEucHVibGljS2V5KTtcbiAgICB9XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgYy5zaWduKGRlZXBoYXNoKTtcbiAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgYy52ZXJpZnkoZGF0YS5wdWJsaWNLZXksIGRlZXBoYXNoLCBzaWduYXR1cmUpO1xuICAgIGRhdGEucHVibGljS2V5ID0gYmFzZTY0dXJsLmVuY29kZShkYXRhLnB1YmxpY0tleSk7XG4gICAgZGF0YS5zaWduYXR1cmUgPSBiYXNlNjR1cmwuZW5jb2RlKEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSkpO1xuICAgIGNvbnN0IGNwayA9IGJhc2U2NHVybC50b0J1ZmZlcihkYXRhLnB1YmxpY0tleSk7XG4gICAgY29uc3QgY3NpZyA9IGJhc2U2NHVybC50b0J1ZmZlcihkYXRhLnNpZ25hdHVyZSk7XG4gICAgLy8gc2hvdWxkIG1hdGNoIG9wayBhbmQgY3NpZ1xuICAgIGNvbnN0IGRoMiA9IGF3YWl0IGRlZXBIYXNoKFtzdHJpbmdUb0J1ZmZlcihkYXRhLmN1cnJlbmN5KSwgc3RyaW5nVG9CdWZmZXIoZGF0YS5hbW91bnQudG9TdHJpbmcoKSksIHN0cmluZ1RvQnVmZmVyKGRhdGEubm9uY2UudG9TdHJpbmcoKSldKTtcbiAgICBjb25zdCBpc1ZhbGlkMiA9IGF3YWl0IGMudmVyaWZ5KGNwaywgZGgyLCBjc2lnKTtcbiAgICBjb25zdCBpc1ZhbGlkMyA9IGMub3duZXJUb0FkZHJlc3MoYy5uYW1lID09IFwiYXJ3ZWF2ZVwiID8gYmFzZTY0dXJsLmRlY29kZShkYXRhLnB1YmxpY0tleSkgOiBiYXNlNjR1cmwudG9CdWZmZXIoZGF0YS5wdWJsaWNLZXkpKSA9PT0gYy5hZGRyZXNzO1xuICAgIGlmICghKGlzVmFsaWQgfHwgaXNWYWxpZDIgfHwgaXNWYWxpZDMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW50ZXJuYWwgd2l0aGRyYXdhbCB2YWxpZGF0aW9uIGZhaWxlZCAtIHBsZWFzZSByZXBvcnQgdGhpcyFcXG5EZWJ1ZyBJbmZvOiR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5wb3N0KFwiL2FjY291bnQvd2l0aGRyYXdcIiwgZGF0YSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMikge1xuICAgICAgICAvLyBub2RlIGhhcyB0aW1lZC9lcnJvZWQgb3V0IGNvbmZpcm1pbmcgdGhlIHdpdGhkcmF3YWxcbiAgICAgICAgY29uc3QgdHhJZCA9IHJlcy5kYXRhLnR4X2lkO1xuICAgICAgICBjb25zdCB3aXRoZHJhd2FsQ29uZmlybWVkID0gYXdhaXQgdXRpbHMuY29uZmlybWF0aW9uUG9sbCh0eElkKTtcbiAgICAgICAgaWYgKCEod2l0aGRyYXdhbENvbmZpcm1lZCA9PT0gdHJ1ZSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjb25maXJtIHdpdGhkcmF3YWwgdHggJHt0eElkfSAke3dpdGhkcmF3YWxDb25maXJtZWQgPyB3aXRoZHJhd2FsQ29uZmlybWVkPy50b1N0cmluZygpIDogXCJcIn1gKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIFV0aWxzLmNoZWNrQW5kVGhyb3cocmVzLCBcIldpdGhkcmF3aW5nIGJhbGFuY2VcIik7XG4gICAgfVxuICAgIHJldHVybiByZXMuZGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhkcmF3YWwuanMubWFwIl0sIm5hbWVzIjpbIlV0aWxzIiwiQmlnTnVtYmVyIiwiYmFzZTY0dXJsIiwid2l0aGRyYXdCYWxhbmNlIiwidXRpbHMiLCJhcGkiLCJhbW91bnQiLCJjIiwidG9rZW5Db25maWciLCJkZWVwSGFzaCIsInN0cmluZ1RvQnVmZmVyIiwiaXJ5cyIsImFyYnVuZGxlcyIsInBrZXkiLCJnZXRQdWJsaWNLZXkiLCJkYXRhIiwicHVibGljS2V5IiwiY3VycmVuY3kiLCJ0b2tlbiIsInRvU3RyaW5nIiwibm9uY2UiLCJnZXROb25jZSIsInNpZ25hdHVyZSIsInNpZ1R5cGUiLCJnZXRTaWduZXIiLCJzaWduYXR1cmVUeXBlIiwiZGVlcGhhc2giLCJCdWZmZXIiLCJpc0J1ZmZlciIsImZyb20iLCJzaWduIiwiaXNWYWxpZCIsInZlcmlmeSIsImVuY29kZSIsImNwayIsInRvQnVmZmVyIiwiY3NpZyIsImRoMiIsImlzVmFsaWQyIiwiaXNWYWxpZDMiLCJvd25lclRvQWRkcmVzcyIsIm5hbWUiLCJkZWNvZGUiLCJhZGRyZXNzIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzIiwicG9zdCIsInN0YXR1cyIsInR4SWQiLCJ0eF9pZCIsIndpdGhkcmF3YWxDb25maXJtZWQiLCJjb25maXJtYXRpb25Qb2xsIiwiY2hlY2tBbmRUaHJvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/withdrawal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/esmIndex.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/esmIndex.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeIrys: () => (/* reexport safe */ _node_irys_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   WebIrys: () => (/* reexport safe */ _web_irys_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   \"default\": () => (/* reexport safe */ _node_irys_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _common_hack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/hack.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/hack.js\");\n/* harmony import */ var _web_irys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./web/irys.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/irys.js\");\n/* harmony import */ var _node_irys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node/irys.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/irys.js\");\n\n\n\n //# sourceMappingURL=esmIndex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vZXNtSW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBCO0FBQ3lCO0FBQ0U7QUFDWixDQUN6QyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK3Nka0AwLjAuMl9hcndlYXZlQDEuMTUuN19idWZmZXJ1dGlsQDQuMC45X2RlYnVnQDQuNC4wX3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwL25vZGVfbW9kdWxlcy9AaXJ5cy9zZGsvYnVpbGQvZXNtL2VzbUluZGV4LmpzPzZmYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi9jb21tb24vaGFjay5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBXZWJJcnlzIH0gZnJvbSBcIi4vd2ViL2lyeXMuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTm9kZUlyeXMgfSBmcm9tIFwiLi9ub2RlL2lyeXMuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLi9ub2RlL2lyeXMuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzbUluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiV2ViSXJ5cyIsIk5vZGVJcnlzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/esmIndex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/irys.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/irys.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeIrys: () => (/* binding */ NodeIrys),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_hack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/hack.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/hack.js\");\n/* harmony import */ var _common_transactions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/transactions.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transactions.js\");\n/* harmony import */ var _common_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/api.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/api.js\");\n/* harmony import */ var _common_fund_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/fund.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/fund.js\");\n/* harmony import */ var _common_irys_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/irys.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/irys.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n/* harmony import */ var _tokens_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tokens/index.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/index.js\");\n/* harmony import */ var _upload_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./upload.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/upload.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/utils.js\");\n/* harmony import */ var _provenance_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./provenance.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/provenance.js\");\n\n\n\n\n\n\n\n\n\n\nclass NodeIrys extends _common_irys_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n    /**\n     * Constructs a new Irys instance, as well as supporting subclasses\n     * @param url - URL to the bundler\n     * @param key - private key (in whatever form required)\n     */ constructor({ url, token, key, config }){\n        switch(url){\n            case undefined:\n            case \"node1\":\n                url = \"https://node1.irys.xyz\";\n                break;\n            case \"node2\":\n                url = \"https://node2.irys.xyz\";\n                break;\n            case \"devnet\":\n                url = \"https://devnet.irys.xyz\";\n                break;\n        }\n        const parsed = new URL(url);\n        super({\n            url: parsed,\n            arbundles: _utils_js__WEBPACK_IMPORTED_MODULE_8__\n        });\n        if (parsed.host === \"devnet.irys.xyz\" && !config?.providerUrl) throw new Error(`Using ${parsed.host} requires a dev/testnet RPC to be configured! see https://docs.irys.xyz/developer-docs/using-devnet`);\n        this.api = new _common_api_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            url: parsed,\n            timeout: config?.timeout ?? 100000,\n            headers: config?.headers\n        });\n        this.tokenConfig = (0,_tokens_index_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(this, token.toLowerCase(), key, parsed.toString(), config?.providerUrl, config?.contractAddress, config?.tokenOpts);\n        this.token = this.tokenConfig.name;\n        this.address = this.tokenConfig.address;\n        this.utils = new _common_utils_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.api, this.token, this.tokenConfig);\n        this.funder = new _common_fund_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.utils);\n        this.uploader = new _upload_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.api, this.utils, this.token, this.tokenConfig, this.IrysTransaction);\n        this.provenance = new _provenance_js__WEBPACK_IMPORTED_MODULE_9__.NodeProvenance(this);\n        this.transactions = new _common_transactions_js__WEBPACK_IMPORTED_MODULE_1__.Transaction(this);\n        this._readyPromise = this.tokenConfig.ready ? this.tokenConfig.ready() : new Promise((r)=>r());\n    }\n    /**\n     * Upload a file at the specified path to the bundler\n     * @param path path to the file to upload\n     * @returns bundler response\n     */ async uploadFile(path, opts) {\n        return this.uploader.uploadFile(path, opts);\n    }\n    /**\n     * @param path - path to the folder to be uploaded\n     * @param indexFile - path to the index file (i.e index.html)\n     * @param batchSize - number of items to upload concurrently\n     * @param interactivePreflight - whether to interactively prompt the user for confirmation of upload (CLI ONLY)\n     * @param keepDeleted - Whether to keep previously uploaded (but now deleted) files in the manifest\n     * @param logFunction - for handling logging from the uploader for UX\n     * @param manifestTags - For allowing the caller to pass tags that will be added to the manifest transaction.\n     * @returns\n     */ async uploadFolder(path, { batchSize = 10, keepDeleted = true, indexFile, interactivePreflight, logFunction, manifestTags, itemOptions } = {}) {\n        return this.uploader.uploadFolder(path, {\n            indexFile,\n            batchSize,\n            interactivePreflight,\n            keepDeleted,\n            logFunction,\n            manifestTags,\n            itemOptions\n        });\n    }\n    static async init(opts) {\n        const { url, token, privateKey, publicKey, signingFunction, collectSignatures, providerUrl, timeout, contractAddress } = opts;\n        const Irys = new NodeIrys({\n            url,\n            token,\n            key: signingFunction ? publicKey : privateKey,\n            config: {\n                providerUrl,\n                timeout,\n                contractAddress,\n                tokenOpts: {\n                    signingFunction,\n                    collectSignatures\n                }\n            }\n        });\n        await Irys.ready();\n        return Irys;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NodeIrys); //# sourceMappingURL=irys.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/irys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/provenance.js":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/provenance.js ***!
  \***********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeProvenance: () => (/* binding */ NodeProvenance)\n/* harmony export */ });\n/* harmony import */ var _common_provenance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/provenance.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/provenance.js\");\n\nclass NodeProvenance extends _common_provenance_js__WEBPACK_IMPORTED_MODULE_0__.Provenance {\n    constructor(irys){\n        super(irys);\n    }\n    async uploadFile(path, opts) {\n        return this.irys.uploadFile(path, {\n            ...opts,\n            upload: {\n                ...opts?.upload,\n                getReceiptSignature: true\n            }\n        });\n    }\n    async uploadFolder(path, { batchSize = 10, keepDeleted = true, indexFile, interactivePreflight, logFunction, manifestTags, itemOptions } = {\n        batchSize: 10,\n        keepDeleted: true\n    }) {\n        return this.irys.uploadFolder(path, {\n            batchSize,\n            keepDeleted,\n            indexFile,\n            interactivePreflight,\n            logFunction,\n            manifestTags,\n            itemOptions: {\n                ...itemOptions,\n                upload: {\n                    ...itemOptions?.upload,\n                    getReceiptSignature: true\n                }\n            }\n        });\n    }\n} //# sourceMappingURL=provenance.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vbm9kZS9wcm92ZW5hbmNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFEO0FBQzlDLE1BQU1DLHVCQUF1QkQsNkRBQVVBO0lBQzFDRSxZQUFZQyxJQUFJLENBQUU7UUFDZCxLQUFLLENBQUNBO0lBQ1Y7SUFDQSxNQUFNQyxXQUFXQyxJQUFJLEVBQUVDLElBQUksRUFBRTtRQUN6QixPQUFPLElBQUksQ0FBQ0gsSUFBSSxDQUFDQyxVQUFVLENBQUNDLE1BQU07WUFBRSxHQUFHQyxJQUFJO1lBQUVDLFFBQVE7Z0JBQUUsR0FBR0QsTUFBTUMsTUFBTTtnQkFBRUMscUJBQXFCO1lBQUs7UUFBRTtJQUN4RztJQUNBLE1BQU1DLGFBQWFKLElBQUksRUFBRSxFQUFFSyxZQUFZLEVBQUUsRUFBRUMsY0FBYyxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsb0JBQW9CLEVBQUVDLFdBQVcsRUFBRUMsWUFBWSxFQUFFQyxXQUFXLEVBQUcsR0FBRztRQUFFTixXQUFXO1FBQUlDLGFBQWE7SUFBSyxDQUFDLEVBQUU7UUFDOUssT0FBTyxJQUFJLENBQUNSLElBQUksQ0FBQ00sWUFBWSxDQUFDSixNQUFNO1lBQ2hDSztZQUNBQztZQUNBQztZQUNBQztZQUNBQztZQUNBQztZQUNBQyxhQUFhO2dCQUFFLEdBQUdBLFdBQVc7Z0JBQUVULFFBQVE7b0JBQUUsR0FBR1MsYUFBYVQsTUFBTTtvQkFBRUMscUJBQXFCO2dCQUFLO1lBQUU7UUFDakc7SUFDSjtBQUNKLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cytzZGtAMC4wLjJfYXJ3ZWF2ZUAxLjE1LjdfYnVmZmVydXRpbEA0LjAuOV9kZWJ1Z0A0LjQuMF90eXBlc2NyaXB0QDUuOC4zX3V0Zi04LXZhbGlkYXRlQDUuMC4xMC9ub2RlX21vZHVsZXMvQGlyeXMvc2RrL2J1aWxkL2VzbS9ub2RlL3Byb3ZlbmFuY2UuanM/MmJkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92ZW5hbmNlIH0gZnJvbSBcIi4uL2NvbW1vbi9wcm92ZW5hbmNlLmpzXCI7XG5leHBvcnQgY2xhc3MgTm9kZVByb3ZlbmFuY2UgZXh0ZW5kcyBQcm92ZW5hbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihpcnlzKSB7XG4gICAgICAgIHN1cGVyKGlyeXMpO1xuICAgIH1cbiAgICBhc3luYyB1cGxvYWRGaWxlKHBhdGgsIG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXJ5cy51cGxvYWRGaWxlKHBhdGgsIHsgLi4ub3B0cywgdXBsb2FkOiB7IC4uLm9wdHM/LnVwbG9hZCwgZ2V0UmVjZWlwdFNpZ25hdHVyZTogdHJ1ZSB9IH0pO1xuICAgIH1cbiAgICBhc3luYyB1cGxvYWRGb2xkZXIocGF0aCwgeyBiYXRjaFNpemUgPSAxMCwga2VlcERlbGV0ZWQgPSB0cnVlLCBpbmRleEZpbGUsIGludGVyYWN0aXZlUHJlZmxpZ2h0LCBsb2dGdW5jdGlvbiwgbWFuaWZlc3RUYWdzLCBpdGVtT3B0aW9ucywgfSA9IHsgYmF0Y2hTaXplOiAxMCwga2VlcERlbGV0ZWQ6IHRydWUgfSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pcnlzLnVwbG9hZEZvbGRlcihwYXRoLCB7XG4gICAgICAgICAgICBiYXRjaFNpemUsXG4gICAgICAgICAgICBrZWVwRGVsZXRlZCxcbiAgICAgICAgICAgIGluZGV4RmlsZSxcbiAgICAgICAgICAgIGludGVyYWN0aXZlUHJlZmxpZ2h0LFxuICAgICAgICAgICAgbG9nRnVuY3Rpb24sXG4gICAgICAgICAgICBtYW5pZmVzdFRhZ3MsXG4gICAgICAgICAgICBpdGVtT3B0aW9uczogeyAuLi5pdGVtT3B0aW9ucywgdXBsb2FkOiB7IC4uLml0ZW1PcHRpb25zPy51cGxvYWQsIGdldFJlY2VpcHRTaWduYXR1cmU6IHRydWUgfSB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92ZW5hbmNlLmpzLm1hcCJdLCJuYW1lcyI6WyJQcm92ZW5hbmNlIiwiTm9kZVByb3ZlbmFuY2UiLCJjb25zdHJ1Y3RvciIsImlyeXMiLCJ1cGxvYWRGaWxlIiwicGF0aCIsIm9wdHMiLCJ1cGxvYWQiLCJnZXRSZWNlaXB0U2lnbmF0dXJlIiwidXBsb2FkRm9sZGVyIiwiYmF0Y2hTaXplIiwia2VlcERlbGV0ZWQiLCJpbmRleEZpbGUiLCJpbnRlcmFjdGl2ZVByZWZsaWdodCIsImxvZ0Z1bmN0aW9uIiwibWFuaWZlc3RUYWdzIiwiaXRlbU9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/provenance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseNodeToken: () => (/* binding */ BaseNodeToken),\n/* harmony export */   getRedstonePrice: () => (/* binding */ getRedstonePrice)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/utils.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/.pnpm/base64url@3.0.1/node_modules/base64url/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.9.0_debug@4.4.0/node_modules/axios/lib/axios.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n\n\n\n\nclass BaseNodeToken {\n    constructor(config){\n        this.minConfirm = 5;\n        this.isSlow = false;\n        this.needsFee = true;\n        Object.assign(this, config);\n        this._address = this.wallet ? this.ownerToAddress(this.getPublicKey()) : undefined;\n    }\n    // common methods\n    get address() {\n        return this._address;\n    }\n    async getId(item) {\n        return base64url__WEBPACK_IMPORTED_MODULE_1__.encode(Buffer.from(await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getCryptoDriver)().hash(await item.rawSignature())));\n    }\n    async price() {\n        return getRedstonePrice(this.ticker);\n    }\n}\nasync function getRedstonePrice(token) {\n    const res = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(`https://api.redstone.finance/prices?symbol=${token}&provider=redstone&limit=1`);\n    await _common_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].checkAndThrow(res, \"Getting price data\");\n    return res.data[0].value;\n} //# sourceMappingURL=token.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vbm9kZS90b2tlbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBNkM7QUFDWDtBQUNSO0FBQ2E7QUFDaEMsTUFBTUk7SUFjVEMsWUFBWUMsTUFBTSxDQUFFO2FBTnBCQyxhQUFhO2FBQ2JDLFNBQVM7YUFDVEMsV0FBVztRQUtQQyxPQUFPQyxNQUFNLENBQUMsSUFBSSxFQUFFTDtRQUNwQixJQUFJLENBQUNNLFFBQVEsR0FBRyxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBQyxJQUFJLENBQUNDLFlBQVksTUFBTUM7SUFDN0U7SUFDQSxpQkFBaUI7SUFDakIsSUFBSUMsVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDTCxRQUFRO0lBQ3hCO0lBQ0EsTUFBTU0sTUFBTUMsSUFBSSxFQUFFO1FBQ2QsT0FBT2xCLDZDQUFnQixDQUFDb0IsT0FBT0MsSUFBSSxDQUFDLE1BQU10QiwwREFBZUEsR0FBR3VCLElBQUksQ0FBQyxNQUFNSixLQUFLSyxZQUFZO0lBQzVGO0lBQ0EsTUFBTUMsUUFBUTtRQUNWLE9BQU9DLGlCQUFpQixJQUFJLENBQUNDLE1BQU07SUFDdkM7QUFDSjtBQUNPLGVBQWVELGlCQUFpQkUsS0FBSztJQUN4QyxNQUFNQyxNQUFNLE1BQU0zQiw2Q0FBS0EsQ0FBQzRCLEdBQUcsQ0FBQyxDQUFDLDJDQUEyQyxFQUFFRixNQUFNLDBCQUEwQixDQUFDO0lBQzNHLE1BQU16Qix3REFBS0EsQ0FBQzRCLGFBQWEsQ0FBQ0YsS0FBSztJQUMvQixPQUFPQSxJQUFJRyxJQUFJLENBQUMsRUFBRSxDQUFDQyxLQUFLO0FBQzVCLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cytzZGtAMC4wLjJfYXJ3ZWF2ZUAxLjE1LjdfYnVmZmVydXRpbEA0LjAuOV9kZWJ1Z0A0LjQuMF90eXBlc2NyaXB0QDUuOC4zX3V0Zi04LXZhbGlkYXRlQDUuMC4xMC9ub2RlX21vZHVsZXMvQGlyeXMvc2RrL2J1aWxkL2VzbS9ub2RlL3Rva2VuLmpzP2U0ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q3J5cHRvRHJpdmVyIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCBiYXNlNjR1cmwgZnJvbSBcImJhc2U2NHVybFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi9jb21tb24vdXRpbHMuanNcIjtcbmV4cG9ydCBjbGFzcyBCYXNlTm9kZVRva2VuIHtcbiAgICBiYXNlO1xuICAgIHdhbGxldDtcbiAgICBfYWRkcmVzcztcbiAgICBwcm92aWRlclVybDtcbiAgICBwcm92aWRlckluc3RhbmNlO1xuICAgIHRpY2tlcjtcbiAgICBuYW1lO1xuICAgIG1pbkNvbmZpcm0gPSA1O1xuICAgIGlzU2xvdyA9IGZhbHNlO1xuICAgIG5lZWRzRmVlID0gdHJ1ZTtcbiAgICBvcHRzO1xuICAgIHV0aWxzO1xuICAgIGlyeXM7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fYWRkcmVzcyA9IHRoaXMud2FsbGV0ID8gdGhpcy5vd25lclRvQWRkcmVzcyh0aGlzLmdldFB1YmxpY0tleSgpKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gY29tbW9uIG1ldGhvZHNcbiAgICBnZXQgYWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZHJlc3M7XG4gICAgfVxuICAgIGFzeW5jIGdldElkKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGJhc2U2NHVybC5lbmNvZGUoQnVmZmVyLmZyb20oYXdhaXQgZ2V0Q3J5cHRvRHJpdmVyKCkuaGFzaChhd2FpdCBpdGVtLnJhd1NpZ25hdHVyZSgpKSkpO1xuICAgIH1cbiAgICBhc3luYyBwcmljZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldFJlZHN0b25lUHJpY2UodGhpcy50aWNrZXIpO1xuICAgIH1cbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSZWRzdG9uZVByaWNlKHRva2VuKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL2FwaS5yZWRzdG9uZS5maW5hbmNlL3ByaWNlcz9zeW1ib2w9JHt0b2tlbn0mcHJvdmlkZXI9cmVkc3RvbmUmbGltaXQ9MWApO1xuICAgIGF3YWl0IHV0aWxzLmNoZWNrQW5kVGhyb3cocmVzLCBcIkdldHRpbmcgcHJpY2UgZGF0YVwiKTtcbiAgICByZXR1cm4gcmVzLmRhdGFbMF0udmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbi5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0Q3J5cHRvRHJpdmVyIiwiYmFzZTY0dXJsIiwiYXhpb3MiLCJ1dGlscyIsIkJhc2VOb2RlVG9rZW4iLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIm1pbkNvbmZpcm0iLCJpc1Nsb3ciLCJuZWVkc0ZlZSIsIk9iamVjdCIsImFzc2lnbiIsIl9hZGRyZXNzIiwid2FsbGV0Iiwib3duZXJUb0FkZHJlc3MiLCJnZXRQdWJsaWNLZXkiLCJ1bmRlZmluZWQiLCJhZGRyZXNzIiwiZ2V0SWQiLCJpdGVtIiwiZW5jb2RlIiwiQnVmZmVyIiwiZnJvbSIsImhhc2giLCJyYXdTaWduYXR1cmUiLCJwcmljZSIsImdldFJlZHN0b25lUHJpY2UiLCJ0aWNrZXIiLCJ0b2tlbiIsInJlcyIsImdldCIsImNoZWNrQW5kVGhyb3ciLCJkYXRhIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/algorand.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/algorand.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AlgorandConfig)\n/* harmony export */ });\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.9.0_debug@4.4.0/node_modules/axios/lib/axios.js\");\n/* harmony import */ var algosdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! algosdk */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/index.js\");\n\n\n\n\n\nclass AlgorandConfig extends _token_js__WEBPACK_IMPORTED_MODULE_2__.BaseNodeToken {\n    constructor(config){\n        super(config);\n        this.base = [\n            \"microAlgos\",\n            1e6\n        ];\n        this.keyPair = (0,algosdk__WEBPACK_IMPORTED_MODULE_3__.mnemonicToSecretKey)(this.wallet);\n        this.apiURL = config.providerUrl;\n        if (!config.opts.indexerUrl) throw new Error(`Algorand: required client constructor option 'opts.indexerUrl' is undefined`);\n        this.indexerURL = config.opts.indexerUrl;\n    }\n    async getTx(txId) {\n        const endpoint = `${this.indexerURL}/v2/transactions/${txId}`;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(endpoint);\n        const latestBlockHeight = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](await this.getCurrentHeight()).toNumber();\n        const txBlockHeight = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](response.data.transaction[\"confirmed-round\"]);\n        const tx = {\n            from: response.data.transaction.sender,\n            to: response.data.transaction[\"payment-transaction\"].receiver,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](response.data.transaction[\"payment-transaction\"].amount),\n            blockHeight: txBlockHeight,\n            pending: false,\n            confirmed: latestBlockHeight - txBlockHeight.toNumber() >= this.minConfirm\n        };\n        return tx;\n    }\n    ownerToAddress(owner) {\n        return (0,algosdk__WEBPACK_IMPORTED_MODULE_3__.encodeAddress)(owner);\n    }\n    async sign(data) {\n        return this.getSigner().sign(data);\n    }\n    getSigner() {\n        return new arbundles__WEBPACK_IMPORTED_MODULE_0__.AlgorandSigner(this.keyPair.sk, this.getPublicKey());\n    }\n    async verify(pub, data, signature) {\n        return arbundles__WEBPACK_IMPORTED_MODULE_0__.AlgorandSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        //  \"last-round\" = blockheight\n        const endpoint = `${this.apiURL}/v2/transactions/params`;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(endpoint);\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](await response.data[\"last-round\"]);\n    }\n    async getFee() {\n        const endpoint = `${this.apiURL}/v2/transactions/params`;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(endpoint);\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](response.data[\"min-fee\"]);\n    }\n    async sendTx(data) {\n        const endpoint = `${this.apiURL}/v2/transactions`;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].post(endpoint, data);\n        return response.data.txId;\n    }\n    async createTx(amount, to) {\n        const endpoint = `${this.apiURL}/v2/transactions/params`;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(endpoint);\n        const params = await response.data;\n        const unsigned = (0,algosdk__WEBPACK_IMPORTED_MODULE_3__.makePaymentTxnWithSuggestedParamsFromObject)({\n            from: this.keyPair.addr,\n            to: to,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](amount).toNumber(),\n            note: undefined,\n            suggestedParams: {\n                fee: params.fee,\n                firstRound: params[\"last-round\"],\n                flatFee: false,\n                genesisHash: params[\"genesis-hash\"],\n                genesisID: params[\"genesis-id\"],\n                lastRound: params[\"last-round\"] + 1000\n            }\n        });\n        const signed = (0,algosdk__WEBPACK_IMPORTED_MODULE_3__.signTransaction)(unsigned, this.keyPair.sk);\n        return {\n            tx: signed.blob,\n            txId: signed.txID\n        };\n    }\n    getPublicKey() {\n        this.keyPair = (0,algosdk__WEBPACK_IMPORTED_MODULE_3__.mnemonicToSecretKey)(this.wallet);\n        const pub = (0,algosdk__WEBPACK_IMPORTED_MODULE_3__.decodeAddress)(this.keyPair.addr).publicKey;\n        return Buffer.from(pub);\n    }\n} //# sourceMappingURL=algorand.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/algorand.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/aptos.js":
/*!*************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/aptos.js ***!
  \*************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AptosConfig)\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"(ssr)/./node_modules/.pnpm/aptos@1.8.5_debug@4.4.0/node_modules/aptos/dist/index.mjs\");\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js\");\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! js-sha3 */ \"(ssr)/./node_modules/.pnpm/js-sha3@0.8.0/node_modules/js-sha3/src/sha3.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n\n\n\n\n\n\n// import { Transaction_UserTransaction, TransactionPayload_EntryFunctionPayload, UserTransaction, } from \"aptos/src/generated\";\nclass AptosConfig extends _token_js__WEBPACK_IMPORTED_MODULE_3__.BaseNodeToken {\n    constructor(config){\n        if (typeof config.wallet === \"string\" && config.wallet.length === 66) config.wallet = Buffer.from(config.wallet.slice(2), \"hex\");\n        if (!config?.opts?.signingFunction && Buffer.isBuffer(config?.wallet)) {\n            // @ts-expect-error custom prop\n            config.accountInstance = new aptos__WEBPACK_IMPORTED_MODULE_0__.AptosAccount(config.wallet);\n        }\n        super(config);\n        this.txLock = Promise.resolve();\n        this.locked = false;\n        // @ts-expect-error assignment doesn't carry through for some reason\n        this.accountInstance = config.accountInstance;\n        this.signingFn = config?.opts?.signingFunction;\n        this.needsFee = true;\n        this.base = [\n            \"aptom\",\n            1e8\n        ];\n    }\n    async getProvider() {\n        return this.providerInstance ??= new aptos__WEBPACK_IMPORTED_MODULE_0__.AptosClient(this.providerUrl);\n    }\n    async getTx(txId) {\n        const client = await this.getProvider();\n        const tx = await client.waitForTransactionWithResult(txId /* , { checkSuccess: true } */ );\n        const payload = tx?.payload;\n        if (!tx.success) {\n            throw new Error(tx?.vm_status ?? \"Unknown Aptos error\");\n        }\n        if (!(payload?.function === \"0x1::coin::transfer\" && payload?.type_arguments[0] === \"0x1::aptos_coin::AptosCoin\" && tx?.vm_status === \"Executed successfully\")) {\n            throw new Error(`Aptos tx ${txId} failed validation`);\n        }\n        const isPending = tx.type === \"pending_transaction\";\n        return {\n            to: payload.arguments[0],\n            from: tx.sender,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](payload.arguments[1]),\n            pending: isPending,\n            confirmed: !isPending\n        };\n    }\n    ownerToAddress(owner) {\n        const hash = js_sha3__WEBPACK_IMPORTED_MODULE_4__.sha3_256.create();\n        hash.update(Buffer.from(owner));\n        hash.update(\"\\x00\");\n        return `0x${hash.hex()}`;\n    }\n    async sign(data) {\n        return await this.getSigner().sign(data);\n    }\n    getSigner() {\n        if (this.signerInstance) return this.signerInstance;\n        if (this.signingFn) {\n            const signer = new arbundles__WEBPACK_IMPORTED_MODULE_1__.AptosSigner(\"\", \"0x\" + this.getPublicKey().toString(\"hex\"));\n            signer.sign = this.signingFn; // override signer fn\n            return this.signerInstance = signer;\n        } else {\n            return this.signerInstance = new arbundles__WEBPACK_IMPORTED_MODULE_1__.AptosSigner(this.accountInstance.toPrivateKeyObject().privateKeyHex, this.accountInstance.toPrivateKeyObject().publicKeyHex);\n        }\n    }\n    async verify(pub, data, signature) {\n        return await arbundles__WEBPACK_IMPORTED_MODULE_1__.AptosSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]((await (await this.getProvider()).client.blocks.httpRequest.request({\n            method: \"GET\",\n            url: \"/\"\n        })).block_height);\n    }\n    async getFee(amount, to) {\n        if (!this.address) throw new Error(\"Address is undefined - you might be missing a wallet, or have not run Irys.ready()\");\n        const client = await this.getProvider();\n        const builder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderRemoteABI(client, {\n            sender: this.address\n        });\n        const rawTransaction = await builder.build(\"0x1::coin::transfer\", [\n            \"0x1::aptos_coin::AptosCoin\"\n        ], [\n            to ?? \"0x149f7dc9c8e43c14ab46d3a6b62cfe84d67668f764277411f98732bf6718acf9\",\n            new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](amount).toNumber()\n        ]);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const txnBuilder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderEd25519((_signingMessage)=>{\n            const invalidSigBytes = new Uint8Array(64);\n            return new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n        }, this.getPublicKey());\n        const signedSimulation = txnBuilder.sign(rawTransaction);\n        const queryParams = {\n            estimate_gas_unit_price: true,\n            estimate_max_gas_amount: true\n        };\n        const simulationResult = await async_retry__WEBPACK_IMPORTED_MODULE_5__(async (_)=>{\n            const simulationResult = await client.client.request.request({\n                url: \"/transactions/simulate\",\n                query: queryParams,\n                method: \"POST\",\n                body: signedSimulation,\n                mediaType: \"application/x.aptos.signed_transaction+bcs\"\n            });\n            if (!simulationResult[0].success || simulationResult[0].gas_used === \"0\") throw new Error(`Tx simulation failed`);\n            return simulationResult;\n        }, {\n            retries: 10\n        }).catch((_)=>[\n                {\n                    gas_unit_price: \"100\",\n                    gas_used: \"10\"\n                }\n            ]);\n        return {\n            gasUnitPrice: +simulationResult[0].gas_unit_price,\n            maxGasAmount: Math.ceil(+simulationResult[0].gas_used * 2)\n        };\n    // const simulationResult = await client.simulateTransaction(this.accountInstance, rawTransaction, { estimateGasUnitPrice: true, estimateMaxGasAmount: true });\n    // return new BigNumber(simulationResult?.[0].gas_unit_price).multipliedBy(simulationResult?.[0].gas_used);\n    // const est = await provider.client.transactions.estimateGasPrice();\n    // return new BigNumber(est.gas_estimate/* (await (await this.getProvider()).client.transactions.estimateGasPrice()).gas_estimate */); // * by gas limit (for upper limit)\n    }\n    async sendTx(data) {\n        const provider = await this.getProvider();\n        const s = await provider.submitSignedBCSTransaction(data.tx);\n        await provider.waitForTransactionWithResult(s.hash);\n        data.unlock?.();\n        return s.hash;\n    }\n    async createTx(amount, to, fee) {\n        if (!this.address) throw new Error(\"Address is undefined - you might be missing a wallet, or have not run irys.ready()\");\n        // mutex so multiple aptos txs aren't in flight with the same sequence number\n        const unlock = await this.lock();\n        const client = await this.getProvider();\n        const builder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderRemoteABI(client, {\n            sender: this.address,\n            gasUnitPrice: BigInt(fee?.gasUnitPrice ?? 100),\n            maxGasAmount: BigInt(fee?.maxGasAmount ?? 10)\n        });\n        const rawTransaction = await builder.build(\"0x1::coin::transfer\", [\n            \"0x1::aptos_coin::AptosCoin\"\n        ], [\n            to,\n            new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](amount).toNumber()\n        ]);\n        // const bcsTxn = AptosClient.generateBCSTransaction(this.accountInstance, rawTransaction);\n        const signingMessage = aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilder.getSigningMessage(rawTransaction);\n        const sig = await this.sign(signingMessage);\n        const txnBuilder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderEd25519((_)=>{\n            return new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.Ed25519Signature(sig);\n        }, this.getPublicKey());\n        const bcsTxn = txnBuilder.sign(rawTransaction);\n        return {\n            txId: undefined,\n            tx: {\n                tx: bcsTxn,\n                unlock\n            }\n        };\n    }\n    getPublicKey() {\n        if (this.opts?.signingFunction) return this.wallet;\n        return Buffer.from(this.accountInstance.pubKey().toString().slice(2), \"hex\");\n    }\n    async ready() {\n        const client = await this.getProvider();\n        this._address = await client.lookupOriginalAddress(this.address ?? \"\").then((hs)=>hs.toString()).catch((_)=>this._address); // fallback to original\n        if (this._address?.length == 66 && this._address.charAt(2) === \"0\") {\n            this._address = this._address.slice(0, 2) + this._address.slice(3);\n        }\n    }\n    // basic async mutex for transaction creation - done so sequenceNumbers don't overlap\n    async lock() {\n        this.locked = true;\n        let unlockNext;\n        const willLock = new Promise((r)=>unlockNext = r);\n        willLock.then(()=>this.locked = false);\n        const willUnlock = this.txLock.then(()=>unlockNext);\n        this.txLock = this.txLock.then(()=>willLock);\n        return willUnlock;\n    }\n} //# sourceMappingURL=aptos.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/aptos.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/arweave.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/arweave.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ArweaveConfig)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/utils.js\");\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/.pnpm/base64url@3.0.1/node_modules/base64url/index.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js\");\n\n\n\n\n\n\nclass ArweaveConfig extends _token_js__WEBPACK_IMPORTED_MODULE_5__.BaseNodeToken {\n    constructor(config){\n        super(config);\n        this.base = [\n            \"winston\",\n            1e12\n        ];\n        this.needsFee = true;\n    }\n    async getProvider() {\n        if (!this.providerInstance) {\n            const purl = new URL(this.providerUrl ?? \"https://arweave.net\");\n            // this.providerInstance = Arweave.init({\n            //   host: purl.hostname,\n            //   protocol: purl.protocol.replaceAll(\":\", \"\").replaceAll(\"/\", \"\"),\n            //   port: purl.port,\n            //   network: this?.opts?.network,\n            // });\n            this.providerInstance = new _utils_js__WEBPACK_IMPORTED_MODULE_0__.Arweave({\n                url: purl,\n                network: this?.opts?.network\n            });\n        }\n        return this.providerInstance;\n    }\n    async getTx(txId) {\n        const arweave = await this.getProvider();\n        const txs = await arweave.transactions.getStatus(txId);\n        let tx;\n        if (txs.status === 200) {\n            tx = await arweave.transactions.get(txId);\n        }\n        const confirmed = txs.status !== 202 && (txs.confirmed?.number_of_confirmations ?? 0) >= this.minConfirm;\n        let owner;\n        if (tx?.owner) {\n            owner = this.ownerToAddress(tx.owner);\n        }\n        return {\n            from: owner ?? undefined,\n            to: tx?.target ?? undefined,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](tx?.quantity ?? 0),\n            pending: txs.status === 202,\n            confirmed\n        };\n    }\n    ownerToAddress(owner) {\n        return _utils_js__WEBPACK_IMPORTED_MODULE_0__.Arweave.utils.bufferTob64Url(crypto__WEBPACK_IMPORTED_MODULE_3__.createHash(\"sha256\").update(_utils_js__WEBPACK_IMPORTED_MODULE_0__.Arweave.utils.b64UrlToBuffer(Buffer.isBuffer(owner) ? base64url__WEBPACK_IMPORTED_MODULE_4__(owner) : owner)).digest());\n    }\n    async sign(data) {\n        return this.providerInstance.crypto.sign(this.wallet, data);\n    }\n    getSigner() {\n        return new arbundles__WEBPACK_IMPORTED_MODULE_1__.ArweaveSigner(this.wallet);\n    }\n    async verify(pub, data, signature) {\n        if (Buffer.isBuffer(pub)) {\n            pub = pub.toString();\n        }\n        return this.providerInstance.crypto.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        return (await this.getProvider()).network.getInfo().then((r)=>new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](r.height));\n    }\n    async getFee(amount, to) {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](await (await this.getProvider()).transactions.getPrice(new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](amount).toNumber(), to)).integerValue(bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ROUND_CEIL);\n    }\n    async sendTx(data) {\n        const provider = await this.getProvider();\n        const res = await provider.transactions.post(data);\n        if (res.statusText.includes(\"Nodes rejected the TX headers\")) {\n            // check user balance\n            const balance = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](await provider.wallets.getBalance(this.address));\n            if (balance.isLessThanOrEqualTo(data.quantity)) throw new Error(`${this.address} has a balance of ${balance.toString()} winston, less than the required ${new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](data.reward).plus(data.quantity)}.`);\n        }\n        return res;\n    }\n    async createTx(amount, to, fee) {\n        const arweave = await this.getProvider();\n        const tx = await arweave.createTransaction({\n            quantity: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](amount).toString(),\n            reward: fee,\n            target: to\n        }, this.wallet);\n        await arweave.transactions.sign(tx, this.wallet);\n        return {\n            txId: tx.id,\n            tx\n        };\n    }\n    getPublicKey() {\n        return this.wallet.n;\n    }\n} //# sourceMappingURL=arweave.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/arweave.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/erc20.js":
/*!*************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/erc20.js ***!
  \*************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ERC20Config),\n/* harmony export */   erc20abi: () => (/* binding */ erc20abi)\n/* harmony export */ });\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/contracts */ \"(ssr)/./node_modules/.pnpm/@ethersproject+contracts@5.8.0/node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/wallet */ \"(ssr)/./node_modules/.pnpm/@ethersproject+wallet@5.8.0/node_modules/@ethersproject/wallet/lib.esm/index.js\");\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js\");\n/* harmony import */ var _ethereum_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ethereum.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/ethereum.js\");\n\n\n\n\n\n\nclass ERC20Config extends _ethereum_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    constructor(config){\n        super(config);\n        this.contractAddress = config.contractAddress;\n    }\n    async getContract() {\n        if (!this.contractInstance) {\n            this.contractInstance = new _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_4__.Contract(this.contractAddress, erc20abi, new _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_5__.Wallet(this.wallet, await this.getProvider()));\n            this.base = [\n                \"wei\",\n                Math.pow(10, await this.contractInstance.decimals())\n            ];\n        }\n        return this.contractInstance;\n    }\n    async getTx(txId) {\n        const response = await (await super.getProvider()).getTransaction(txId);\n        if (!response) throw new Error(\"Tx doesn't exist\");\n        if (response.data.length !== 138 || response.data.slice(2, 10) !== \"a9059cbb\" // standard ERC20-ABI method ID for transfers\n        ) {\n            throw new Error(\"Tx isn't a ERC20 transfer\");\n        }\n        const to = `0x${response.data.slice(34, 74)}`;\n        const amount = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.data.slice(74), 16);\n        return {\n            from: response.from,\n            to,\n            blockHeight: response.blockNumber ? new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.blockNumber) : undefined,\n            amount,\n            pending: response.blockNumber ? false : true,\n            confirmed: response.confirmations >= this.minConfirm\n        };\n    }\n    /**\n     * Returns the fee in CONTRACT TOKEN UNITS equivalent to the fee derived via gas token units, i.e Wei\n     * @param amount\n     * @param to\n     * @returns\n     */ async getFee(amount, to) {\n        const _amount = \"0x\" + new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](amount).toString(16);\n        const contract = await this.getContract();\n        const provider = await this.getProvider();\n        const gasPrice = await provider.getGasPrice();\n        const gasLimit = await contract.estimateGas.transfer(to, _amount);\n        const units = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](gasPrice.mul(gasLimit).toString()); // price in WEI\n        const [fiatGasPrice] = await this.getGas(); // get price of gas units\n        const value = fiatGasPrice.multipliedBy(units); // value of the fee\n        // convert value\n        const ctPrice = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](await this.price()); // price for this token\n        const ctAmount = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](value).dividedToIntegerBy(ctPrice);\n        // const b = ctAmount.multipliedBy(ctPrice)\n        // const c = value.dividedBy(this.base[1])\n        // console.log(b);\n        // console.log(c)\n        return ctAmount;\n    }\n    async createTx(amount, to, _fee) {\n        const provider = await this.getProvider();\n        const wallet = new _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_5__.Wallet(this.wallet, provider);\n        const contract = await this.getContract();\n        const _amount = \"0x\" + new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](amount).toString(16);\n        const tx = await contract.populateTransaction.transfer(to, _amount);\n        // Needed *specifically* for ERC20\n        tx.gasPrice = await provider.getGasPrice();\n        tx.gasLimit = await contract.estimateGas.transfer(to, _amount);\n        tx.chainId = (await provider.getNetwork()).chainId;\n        if (!this.address) throw new Error(\"Address is undefined - you might be missing a wallet, or have not run Irys.ready()\");\n        tx.nonce = await provider.getTransactionCount(this.address);\n        const signedTx = await wallet.signTransaction(tx);\n        const txId = \"0x\" + (0,arbundles__WEBPACK_IMPORTED_MODULE_1__.keccak256)(Buffer.from(signedTx.slice(2), \"hex\")).toString(\"hex\");\n        return {\n            txId,\n            tx: signedTx\n        };\n    }\n    // TODO: create a nicer solution than just overrides (larger issue: some currencies aren't on redstone)\n    async getGas() {\n        return [\n            new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](await (0,_token_js__WEBPACK_IMPORTED_MODULE_2__.getRedstonePrice)(\"ETH\")),\n            1e18\n        ];\n    }\n}\nconst erc20abi = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_spender\",\n                type: \"address\"\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\"\n            },\n            {\n                name: \"_to\",\n                type: \"address\"\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"balance\",\n                type: \"uint256\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\"\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\"\n            },\n            {\n                name: \"_spender\",\n                type: \"address\"\n            }\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        payable: true,\n        stateMutability: \"payable\",\n        type: \"fallback\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Approval\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Transfer\",\n        type: \"event\"\n    }\n]; //# sourceMappingURL=erc20.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/erc20.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/ethereum.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/ethereum.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EthereumConfig)\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_providers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/providers */ \"(ssr)/./node_modules/.pnpm/@ethersproject+providers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/wallet */ \"(ssr)/./node_modules/.pnpm/@ethersproject+wallet@5.8.0/node_modules/@ethersproject/wallet/lib.esm/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js\");\n\n\n\n\n\n\nconst ethereumSigner = arbundles__WEBPACK_IMPORTED_MODULE_1__.EthereumSigner;\nclass EthereumConfig extends _token_js__WEBPACK_IMPORTED_MODULE_2__.BaseNodeToken {\n    constructor(config){\n        super(config);\n        this.base = [\n            \"wei\",\n            1e18\n        ];\n    }\n    async getProvider() {\n        if (!this.providerInstance) {\n            this.providerInstance = new _ethersproject_providers__WEBPACK_IMPORTED_MODULE_3__.JsonRpcProvider(this.providerUrl);\n            await this.providerInstance.ready;\n        }\n        return this.providerInstance;\n    }\n    async getTx(txId) {\n        const provider = await this.getProvider();\n        const response = await provider.getTransaction(txId);\n        if (!response) throw new Error(\"Tx doesn't exist\");\n        if (!response.to) throw new Error(`Unable to determine transaction ${txId} recepient`);\n        // console.log(response.confirmations);\n        return {\n            from: response.from,\n            to: response.to,\n            blockHeight: response.blockNumber ? new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.blockNumber) : undefined,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.value.toHexString(), 16),\n            pending: response.blockNumber ? false : true,\n            confirmed: response.confirmations >= this.minConfirm\n        };\n    }\n    ownerToAddress(owner) {\n        return \"0x\" + (0,arbundles__WEBPACK_IMPORTED_MODULE_1__.keccak256)(owner.slice(1)).slice(-20).toString(\"hex\");\n    }\n    async sign(data) {\n        const signer = this.getSigner();\n        return signer.sign(data);\n    }\n    getSigner() {\n        return new ethereumSigner(this.wallet);\n    }\n    verify(pub, data, signature) {\n        return ethereumSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        const response = await (await this.getProvider()).send(\"eth_blockNumber\", []);\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response, 16);\n    }\n    async getFee(amount, to) {\n        const provider = await this.getProvider();\n        const _amount = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](amount);\n        const tx = {\n            from: this.address,\n            to,\n            value: \"0x\" + _amount.toString(16)\n        };\n        const estimatedGas = await provider.estimateGas(tx);\n        const gasPrice = await provider.getGasPrice();\n        // const b = await provider.send(\"eth_maxPriorityFeePerGas\", [])\n        // console.log(b)\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](estimatedGas.mul(gasPrice).toString());\n    }\n    async sendTx(data) {\n        return await (await this.getProvider()).sendTransaction(data).catch((e)=>{\n            console.error(`Error occurred while sending a tx - ${e}`);\n            throw e;\n        });\n    }\n    async createTx(amount, to, fee) {\n        const provider = await this.getProvider();\n        const wallet = new _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_4__.Wallet(this.wallet, provider);\n        const _amount = \"0x\" + new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](amount).toString(16);\n        let gasPrice = await provider.getGasPrice();\n        const gasEstimate = fee ? _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__.BigNumber.from(new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](fee).dividedToIntegerBy(gasPrice.toString()).toFixed()) : undefined;\n        // const estimatedGas = await provider.estimateGas({ from: this.address, to, value: _amount });\n        // console.log({ gasPrice, estimatedGas })\n        // if (fee) {\n        //     gasPrice = ethers.BigNumber.from(Math.ceil(+fee / estimatedGas.toNumber()))\n        // }\n        if (this.name === \"matic\") {\n            gasPrice = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__.BigNumber.from(new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](gasPrice.toString()).multipliedBy(10).decimalPlaces(0).toString());\n        }\n        const tx = await wallet.populateTransaction({\n            to,\n            value: _amount,\n            from: this.address,\n            gasPrice,\n            // gasLimit: estimatedGas,\n            gasLimit: gasEstimate\n        });\n        // tx.gasLimit = ethers.BigNumber.from(+(tx.gasLimit.toString()) * 4)\n        const signedTx = await wallet.signTransaction(tx);\n        const txId = \"0x\" + (0,arbundles__WEBPACK_IMPORTED_MODULE_1__.keccak256)(Buffer.from(signedTx.slice(2), \"hex\")).toString(\"hex\");\n        // const c = await provider.call(tx);\n        // console.log(c)\n        return {\n            txId,\n            tx: signedTx\n        };\n    }\n    getPublicKey() {\n        return this.getSigner().publicKey;\n    }\n} //# sourceMappingURL=ethereum.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/ethereum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/index.js":
/*!*************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/index.js ***!
  \*************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getTokenConfig)\n/* harmony export */ });\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _arweave_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arweave.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/arweave.js\");\n/* harmony import */ var _erc20_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./erc20.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/erc20.js\");\n/* harmony import */ var _ethereum_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ethereum.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/ethereum.js\");\n/* harmony import */ var _near_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./near.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/near.js\");\n/* harmony import */ var _solana_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./solana.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/solana.js\");\n/* harmony import */ var _algorand_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./algorand.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/algorand.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.9.0_debug@4.4.0/node_modules/axios/lib/axios.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n/* harmony import */ var _aptos_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./aptos.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/aptos.js\");\n/* harmony import */ var _multiAptos_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./multiAptos.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/multiAptos.js\");\n\n\n\n\n\n\n\n\n\n\n\nfunction getTokenConfig(Irys, token, wallet, url, providerUrl, contractAddress, opts) {\n    switch(token){\n        case \"arweave\":\n            return new _arweave_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                irys: Irys,\n                name: \"arweave\",\n                ticker: \"AR\",\n                minConfirm: 10,\n                providerUrl: providerUrl ?? \"https://arweave.net\",\n                wallet,\n                isSlow: true,\n                opts\n            });\n        case \"ethereum\":\n            return new _ethereum_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                irys: Irys,\n                name: \"ethereum\",\n                ticker: \"ETH\",\n                providerUrl: providerUrl ?? \"https://cloudflare-eth.com/\",\n                wallet,\n                opts\n            });\n        case \"matic\":\n            return new _ethereum_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                irys: Irys,\n                name: \"matic\",\n                ticker: \"MATIC\",\n                minConfirm: 1,\n                providerUrl: providerUrl ?? \"https://polygon-rpc.com/\",\n                wallet,\n                opts\n            });\n        case \"bnb\":\n            return new _ethereum_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                irys: Irys,\n                name: \"bnb\",\n                ticker: \"BNB\",\n                providerUrl: providerUrl ?? \"https://bsc-dataseed.binance.org/\",\n                wallet,\n                opts\n            });\n        case \"fantom\":\n            return new _ethereum_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                irys: Irys,\n                name: \"fantom\",\n                ticker: \"FTM\",\n                providerUrl: providerUrl ?? \"https://rpc.ftm.tools/\",\n                wallet,\n                opts\n            });\n        case \"solana\":\n            return new _solana_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n                irys: Irys,\n                name: \"solana\",\n                ticker: \"SOL\",\n                providerUrl: providerUrl ?? \"https://api.mainnet-beta.solana.com/\",\n                wallet,\n                opts\n            });\n        case \"avalanche\":\n            return new _ethereum_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                irys: Irys,\n                name: \"avalanche\",\n                ticker: \"AVAX\",\n                providerUrl: providerUrl ?? \"https://api.avax-test.network/ext/bc/C/rpc/\",\n                wallet,\n                opts\n            });\n        case \"boba-eth\":\n            return new _ethereum_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                irys: Irys,\n                name: \"boba-eth\",\n                ticker: \"ETH\",\n                providerUrl: providerUrl ?? \"https://mainnet.boba.network/\",\n                minConfirm: 1,\n                wallet,\n                opts\n            });\n        case \"boba\":\n            {\n                const k = new _erc20_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                    irys: Irys,\n                    name: \"boba\",\n                    ticker: \"BOBA\",\n                    providerUrl: providerUrl ?? \"https://mainnet.boba.network/\",\n                    contractAddress: contractAddress ?? \"0xa18bF3994C0Cc6E3b63ac420308E5383f53120D7\",\n                    minConfirm: 1,\n                    wallet,\n                    opts\n                });\n                // for L1 mainnet: \"https://main-light.eth.linkpool.io/\" and \"0x42bbfa2e77757c645eeaad1655e0911a7553efbc\"\n                k.price = async ()=>{\n                    const res = await axios__WEBPACK_IMPORTED_MODULE_10__[\"default\"].post(\"https://api.livecoinwatch.com/coins/single\", JSON.stringify({\n                        currency: \"USD\",\n                        code: `${k.ticker}`\n                    }), {\n                        headers: {\n                            \"x-api-key\": \"75a7a824-6577-45e6-ad86-511d590c7cc8\",\n                            \"content-type\": \"application/json\"\n                        }\n                    });\n                    await _common_utils_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].checkAndThrow(res, \"Getting price data\");\n                    if (!res?.data?.rate) {\n                        throw new Error(`unable to get price for ${k.name}`);\n                    }\n                    return +res.data.rate;\n                };\n                return k;\n            }\n        case \"arbitrum\":\n            return new _ethereum_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                irys: Irys,\n                name: \"arbitrum\",\n                ticker: \"ETH\",\n                providerUrl: providerUrl ?? \"https://arb1.arbitrum.io/rpc/\",\n                wallet,\n                opts\n            });\n        case \"chainlink\":\n            return new _erc20_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                irys: Irys,\n                name: \"chainlink\",\n                ticker: \"LINK\",\n                providerUrl: providerUrl ?? \"https://main-light.eth.linkpool.io/\",\n                contractAddress: contractAddress ?? \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n                wallet,\n                opts\n            });\n        case \"kyve\":\n            {\n                const k = new _erc20_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                    irys: Irys,\n                    name: \"kyve\",\n                    ticker: \"KYVE\",\n                    minConfirm: 0,\n                    providerUrl: providerUrl ?? \"https://moonbeam-alpha.api.onfinality.io/public\",\n                    contractAddress: contractAddress ?? \"0x3cf97096ccdb7c3a1d741973e351cb97a2ede2c1\",\n                    isSlow: true,\n                    wallet,\n                    opts\n                });\n                k.price = async ()=>{\n                    return 100;\n                }; // TODO: replace for mainnet\n                k.getGas = async ()=>{\n                    return [\n                        new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](100),\n                        1e18\n                    ];\n                };\n                return k; // TODO: ensure units above are right\n            }\n        case \"near\":\n            {\n                return new _near_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n                    irys: Irys,\n                    name: \"near\",\n                    ticker: \"NEAR\",\n                    providerUrl: providerUrl ?? \"https://rpc.mainnet.near.org\",\n                    wallet,\n                    IrysUrl: url,\n                    opts\n                });\n            }\n        case \"algorand\":\n            {\n                return new _algorand_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n                    irys: Irys,\n                    name: \"algorand\",\n                    ticker: \"ALGO\",\n                    providerUrl: providerUrl ?? \"https://mainnet-api.algonode.cloud\",\n                    wallet,\n                    opts: {\n                        indexerUrl: \"https://mainnet-idx.algonode.cloud\",\n                        ...opts\n                    }\n                });\n            }\n        case \"aptos\":\n            {\n                return new _aptos_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]({\n                    irys: Irys,\n                    name: \"aptos\",\n                    ticker: \"APTOS\",\n                    providerUrl: providerUrl ?? \"https://fullnode.mainnet.aptoslabs.com\",\n                    wallet,\n                    opts\n                });\n            }\n        case \"multiaptos\":\n            {\n                return new _multiAptos_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({\n                    irys: Irys,\n                    name: \"aptos\",\n                    ticker: \"APTOS\",\n                    providerUrl: providerUrl ?? \"https://fullnode.mainnet.aptoslabs.com/v1\",\n                    wallet,\n                    opts\n                });\n            }\n        default:\n            throw new Error(`Unknown/Unsupported token ${token}`);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/multiAptos.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/multiAptos.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MultiSignatureAptos)\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"(ssr)/./node_modules/.pnpm/aptos@1.8.5_debug@4.4.0/node_modules/aptos/dist/index.mjs\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _aptos_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./aptos.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/aptos.js\");\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n\n\n\n\nclass MultiSignatureAptos extends _aptos_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(config){\n        super(config);\n        this.collectSignatures = this?.opts?.collectSignatures;\n        this.needsFee = true;\n    }\n    /**\n     * @param owner compound MultiEd25519PublicKey .toBytes()\n     */ ownerToAddress(pubKey) {\n        // deserialise key\n        const multiSigPublicKey = this.deserialisePubKey(pubKey);\n        // derive address\n        const authKey2 = aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.AuthenticationKey.fromMultiEd25519PublicKey(multiSigPublicKey);\n        return authKey2.derivedAddress().toString();\n    }\n    deserialisePubKey(pubKey) {\n        const threshold = +pubKey.slice(32 * 32).toString();\n        const keys = [];\n        const nullBuf = Buffer.alloc(32, 0);\n        for(let i = 0; i < 32; i++){\n            const key = pubKey.subarray(i * 32, (i + 1) * 32);\n            if (!key.equals(nullBuf)) keys.push(new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.Ed25519PublicKey(key));\n        }\n        // reconstruct key\n        return new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.MultiEd25519PublicKey(keys, threshold);\n    }\n    getPublicKey() {\n        const { participants, threshold } = this.wallet;\n        const pkey = Buffer.alloc(32 * 32 + 1);\n        participants.forEach((k, i)=>{\n            pkey.set(k, i * 32);\n        });\n        pkey.set(Buffer.from(threshold.toString()), 1024);\n        return pkey;\n    }\n    async getFee(amount, to) {\n        const client = await this.getProvider();\n        if (!this.address) throw new Error(\"Address is undefined - you might be missing a wallet, or have not run Irys.ready()\");\n        const builder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderRemoteABI(client, {\n            sender: this.address\n        });\n        const rawTransaction = await builder.build(\"0x1::coin::transfer\", [\n            \"0x1::aptos_coin::AptosCoin\"\n        ], [\n            to ?? \"0x149f7dc9c8e43c14ab46d3a6b62cfe84d67668f764277411f98732bf6718acf9\",\n            new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](amount).toNumber()\n        ]);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const txnBuilder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderEd25519((_signingMessage)=>{\n            const invalidSigBytes = new Uint8Array(64);\n            return new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n        }, new Uint8Array(32));\n        const signedSimulation = txnBuilder.sign(rawTransaction);\n        const queryParams = {\n            estimate_gas_unit_price: true,\n            estimate_max_gas_amount: true\n        };\n        const simulationResult = await client.client.request.request({\n            url: \"/transactions/simulate\",\n            query: queryParams,\n            method: \"POST\",\n            body: signedSimulation,\n            mediaType: \"application/x.aptos.signed_transaction+bcs\"\n        });\n        return {\n            gasUnitPrice: +simulationResult[0].gas_unit_price,\n            maxGasAmount: +simulationResult[0].max_gas_amount\n        };\n    }\n    async createTx(amount, to, fee) {\n        const client = await this.getProvider();\n        const { participants, threshold } = this.wallet;\n        const multiSigPublicKey = new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.MultiEd25519PublicKey(participants.map((v)=>new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.Ed25519PublicKey(v)), threshold);\n        const authKey = aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.AuthenticationKey.fromMultiEd25519PublicKey(multiSigPublicKey);\n        const mutisigAccountAddress = authKey.derivedAddress();\n        const token = new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.TypeTagStruct(aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.StructTag.fromString(\"0x1::aptos_coin::AptosCoin\"));\n        const entryFunctionPayload = new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.TransactionPayloadEntryFunction(aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.EntryFunction.natural(// Fully qualified module name, `AccountAddress::ModuleName`\n        \"0x1::coin\", // Module function\n        \"transfer\", // The coin type to transfer\n        [\n            token\n        ], // Arguments for function `transfer`: receiver account address and amount to transfer\n        [\n            aptos__WEBPACK_IMPORTED_MODULE_0__.BCS.bcsToBytes(aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.AccountAddress.fromHex(to)),\n            aptos__WEBPACK_IMPORTED_MODULE_0__.BCS.bcsSerializeUint64(new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](amount).toNumber())\n        ]));\n        const [{ sequence_number: sequenceNumber }, chainId] = await Promise.all([\n            client.getAccount(mutisigAccountAddress),\n            client.getChainId()\n        ]);\n        const rawTx = new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.RawTransaction(// Transaction sender account address\n        aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.AccountAddress.fromHex(mutisigAccountAddress), BigInt(sequenceNumber), entryFunctionPayload, // Max gas unit to spend\n        BigInt(fee?.maxGasAmount ?? 10000), // Gas price per unit\n        BigInt(fee?.gasUnitPrice ?? 100), // Expiration timestamp. Transaction is discarded if it is not executed within 1000 seconds (16.6 minutes) from now.\n        BigInt(Math.floor(Date.now() / 1000) + 1000), new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.ChainId(chainId));\n        return {\n            tx: rawTx,\n            txId: undefined\n        };\n    }\n    async sendTx(data) {\n        const client = await this.getProvider();\n        const signingMessage = aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilder.getSigningMessage(data);\n        const { signatures, bitmap } = await this.collectSignatures(signingMessage);\n        const txnBuilder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderMultiEd25519((_)=>{\n            // Bitmap masks which public key has signed transaction.\n            // See https://aptos-labs.github.io/ts-sdk-doc/classes/TxnBuilderTypes.MultiEd25519Signature.html#createBitmap\n            const encodedBitmap = aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.MultiEd25519Signature.createBitmap(bitmap);\n            // See https://aptos-labs.github.io/ts-sdk-doc/classes/TxnBuilderTypes.MultiEd25519Signature.html#constructor\n            const muliEd25519Sig = new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.MultiEd25519Signature(signatures.map((s)=>new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.Ed25519Signature(s)), encodedBitmap);\n            return muliEd25519Sig;\n        }, this.deserialisePubKey(this.getPublicKey()));\n        const bcsTxn = txnBuilder.sign(data);\n        const txRes = await client.submitSignedBCSTransaction(bcsTxn);\n        return txRes.hash;\n    }\n    getSigner() {\n        if (this.signerInstance) return this.signerInstance;\n        const pkey = Buffer.alloc(1025);\n        const deserKey = this.deserialisePubKey(this.getPublicKey());\n        deserKey.public_keys.forEach((k, i)=>{\n            pkey.set(k.value, i * 32);\n        });\n        pkey.set(Buffer.from(deserKey.threshold.toString()), 1024);\n        return this.signerInstance ??= new arbundles__WEBPACK_IMPORTED_MODULE_3__.MultiSignatureAptosSigner(pkey, this.collectSignatures);\n    }\n    async ready() {\n        await super.ready();\n        this.accountInstance = new aptos__WEBPACK_IMPORTED_MODULE_0__.AptosAccount(undefined, this.address);\n    }\n    async verify(pub, data, signature) {\n        return await arbundles__WEBPACK_IMPORTED_MODULE_3__.MultiSignatureAptosSigner.verify(pub, data, signature);\n    }\n} //# sourceMappingURL=multiAptos.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/multiAptos.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/near.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/near.js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NearConfig)\n/* harmony export */ });\n/* harmony import */ var _near_js_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@0.0.3/node_modules/@near-js/crypto/lib/index.js\");\n/* harmony import */ var _near_js_providers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @near-js/providers */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/index.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/.pnpm/borsh@0.7.0/node_modules/borsh/lib/index.js\");\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@5.2.2/node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/.pnpm/js-sha256@0.9.0/node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var _near_js_transactions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/.pnpm/@near-js+transactions@0.1.1/node_modules/@near-js/transactions/lib/index.js\");\n/* harmony import */ var near_seed_phrase__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! near-seed-phrase */ \"(ssr)/./node_modules/.pnpm/near-seed-phrase@0.2.1/node_modules/near-seed-phrase/index.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/.pnpm/base64url@3.0.1/node_modules/base64url/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.9.0_debug@4.4.0/node_modules/axios/lib/axios.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass NearConfig extends _token_js__WEBPACK_IMPORTED_MODULE_5__.BaseNodeToken {\n    constructor(config){\n        let wallet = config.wallet;\n        if (typeof wallet === \"string\" && wallet?.split(\":\")?.[0] !== \"ed25519\") {\n            wallet = (0,near_seed_phrase__WEBPACK_IMPORTED_MODULE_10__.parseSeedPhrase)(wallet, near_seed_phrase__WEBPACK_IMPORTED_MODULE_10__.KEY_DERIVATION_PATH).secretKey;\n        }\n        config.wallet = wallet;\n        super(config);\n        this.base = [\n            \"yoctoNEAR\",\n            1e24\n        ];\n        this.keyPair = _near_js_crypto__WEBPACK_IMPORTED_MODULE_0__.KeyPair.fromString(this.wallet);\n    }\n    async getProvider() {\n        if (!this.providerInstance) {\n            this.providerInstance = new _near_js_providers__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider({\n                url: this.providerUrl\n            });\n        }\n        return this.providerInstance;\n    }\n    /**\n     * NEAR wants both the sender ID and tx Hash, so we have to concatenate to keep with the interface.\n     * @param txId assumes format senderID:txHash\n     */ async getTx(txId) {\n        // NOTE: their type defs are out of date with their actual API (23-01-2022)... beware the expect-error when debugging!\n        const provider = await this.getProvider();\n        const [id, hash] = txId.split(\":\");\n        const status = await provider.txStatusReceipts(bs58__WEBPACK_IMPORTED_MODULE_6__.decode(hash), id);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        const blockHeight = await provider.block(status.transaction_outcome.block_hash);\n        const latestBlockHeight = (await provider.block({\n            finality: \"final\"\n        })).header.height;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        if (status.receipts_outcome[0].outcome.status.SuccessValue !== \"\") {\n            throw new Error(\"Transaction failed!\");\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        const deposit = status.receipts[0].receipt.Action.actions[0].Transfer.deposit ?? 0;\n        return {\n            from: id,\n            to: status.transaction.receiver_id,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](deposit),\n            blockHeight: new bignumber_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](blockHeight.header.height),\n            pending: false,\n            confirmed: latestBlockHeight - blockHeight.header.height >= this.minConfirm\n        };\n    }\n    /**\n     * address = accountID\n     * @param owner // assumed to be the \"ed25519:\" header + b58 encoded key\n     */ ownerToAddress(owner) {\n        return Buffer.from(typeof owner === \"string\" ? bs58__WEBPACK_IMPORTED_MODULE_6__.decode(owner.replace(\"ed25519:\", \"\")) : bs58__WEBPACK_IMPORTED_MODULE_6__.decode(bs58__WEBPACK_IMPORTED_MODULE_6__.encode(owner))).toString(\"hex\");\n    }\n    async sign(data) {\n        return this.getSigner().sign(data);\n    }\n    getSigner() {\n        return new arbundles__WEBPACK_IMPORTED_MODULE_3__.NearSigner(this.wallet);\n    }\n    async verify(pub, data, signature) {\n        return arbundles__WEBPACK_IMPORTED_MODULE_3__.NearSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        const provider = await this.getProvider();\n        const res = await provider.status();\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](res.sync_info.latest_block_height);\n    }\n    /**\n     * NOTE: assumes only operation is transfer\n     * @param _amount\n     * @param _to\n     * @returns\n     */ async getFee(_amount, _to) {\n        // TODO: use https://docs.near.org/docs/concepts/gas and https://docs.near.org/docs/api/rpc/protocol#genesis-config\n        // to derive cost from genesis config to generalise support.\n        const provider = await this.getProvider();\n        const res = await provider.gasPrice(null); // null == gas price as of latest block\n        // multiply by action cost in gas units (assume only action is transfer)\n        // 4.5x10^11 gas units for fund transfers\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](res.gas_price).multipliedBy(450000000000);\n    }\n    async sendTx(data) {\n        const provider = await this.getProvider();\n        // // hack to fix near SDK issue\n        // we manually encode as due to a lack of node_module flattening, two classes (who are otherwise identical)\n        // are imported from two different locations, meaning JS's equivalency is broken (not the same internal object)\n        // this bypasses this issue by ensuring the class is imported from the \"flat\" version\n        // const res = await provider.sendTransaction(data);\n        const expectedSignedTransactionClass = [\n            ..._near_js_transactions__WEBPACK_IMPORTED_MODULE_9__.SCHEMA.keys()\n        ].find((c)=>c.name === \"SignedTransaction\");\n        data.constructor = expectedSignedTransactionClass;\n        const encodedTransaction = (0,_near_js_transactions__WEBPACK_IMPORTED_MODULE_9__.encodeTransaction)(data);\n        const res = await provider.sendJsonRpc(\"broadcast_tx_commit\", [\n            Buffer.from(encodedTransaction).toString(\"base64\")\n        ]);\n        return `${this.address}:${res.transaction.hash}`; // encode into compound format\n    }\n    async createTx(amount, to, _fee) {\n        const provider = await this.getProvider();\n        const accessKey = await provider.query({\n            request_type: \"view_access_key\",\n            finality: \"final\",\n            account_id: this.address,\n            public_key: this.keyPair.getPublicKey().toString()\n        });\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        const nonce = ++accessKey.nonce;\n        const recentBlockHash = Buffer.from(bs58__WEBPACK_IMPORTED_MODULE_6__.decode(accessKey.block_hash));\n        const actions = [\n            _near_js_transactions__WEBPACK_IMPORTED_MODULE_9__.actionCreators.transfer(new bn_js__WEBPACK_IMPORTED_MODULE_7__(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](amount).toFixed().toString()))\n        ];\n        if (!this.address) throw new Error(\"Address is undefined - you might be missing a wallet, or have not run Irys.ready()\");\n        const tx = (0,_near_js_transactions__WEBPACK_IMPORTED_MODULE_9__.createTransaction)(this.address, this.keyPair.getPublicKey(), to, nonce, actions, recentBlockHash);\n        // hack to fix near SDK issue\n        const expectedPublicKeyClass = [\n            ..._near_js_transactions__WEBPACK_IMPORTED_MODULE_9__.SCHEMA.keys()\n        ].find((c)=>c.name === \"PublicKey\");\n        tx.publicKey.constructor = expectedPublicKeyClass;\n        const serialTx = (0,borsh__WEBPACK_IMPORTED_MODULE_2__.serialize)(_near_js_transactions__WEBPACK_IMPORTED_MODULE_9__.SCHEMA, tx);\n        const serialTxHash = new Uint8Array(js_sha256__WEBPACK_IMPORTED_MODULE_8__.sha256.array(serialTx));\n        const signature = this.keyPair.sign(serialTxHash);\n        const signedTx = new _near_js_transactions__WEBPACK_IMPORTED_MODULE_9__.SignedTransaction({\n            transaction: tx,\n            signature: new _near_js_transactions__WEBPACK_IMPORTED_MODULE_9__.Signature({\n                keyType: tx.publicKey.keyType,\n                data: signature.signature\n            })\n        });\n        return {\n            tx: signedTx,\n            txId: undefined\n        };\n    }\n    getPublicKey() {\n        this.keyPair = _near_js_crypto__WEBPACK_IMPORTED_MODULE_0__.KeyPair.fromString(this.wallet);\n        return Buffer.from(this.keyPair.getPublicKey().data);\n    }\n    async ready() {\n        try {\n            // resolve loaded pubkey to parent address\n            const pubkey = this.keyPair.getPublicKey().toString();\n            const resolved = await axios__WEBPACK_IMPORTED_MODULE_12__[\"default\"].get(`${this.IrysUrl}account/near/lookup?address=${base64url__WEBPACK_IMPORTED_MODULE_11__.encode(pubkey.split(\":\")[1])}`).catch((e)=>{\n                return e;\n            });\n            this._address = resolved?.data?.address ?? this._address;\n        } catch (e) {\n            console.error(e);\n        }\n    }\n} //# sourceMappingURL=near.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/near.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/solana.js":
/*!**************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/solana.js ***!
  \**************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SolanaConfig)\n/* harmony export */ });\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js\");\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/token.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/.pnpm/@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/web3.js/lib/index.esm.js\");\n\n\n\n\n\n\n\nclass SolanaConfig extends _token_js__WEBPACK_IMPORTED_MODULE_4__.BaseNodeToken {\n    constructor(config){\n        super(config);\n        this.minConfirm = 1;\n        this.base = [\n            \"lamports\",\n            1e9\n        ];\n    }\n    async getProvider() {\n        if (!this.providerInstance) {\n            this.providerInstance = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_6__.Connection(this.providerUrl, {\n                confirmTransactionInitialTimeout: 60000,\n                commitment: \"confirmed\"\n            });\n        }\n        return this.providerInstance;\n    }\n    getKeyPair() {\n        let key = this.wallet;\n        if (typeof key !== \"string\") {\n            key = bs58__WEBPACK_IMPORTED_MODULE_2__.encode(Buffer.from(key));\n        }\n        return _solana_web3_js__WEBPACK_IMPORTED_MODULE_6__.Keypair.fromSecretKey(bs58__WEBPACK_IMPORTED_MODULE_2__.decode(key));\n    }\n    async getTx(txId) {\n        const connection = await this.getProvider();\n        const stx = await connection.getTransaction(txId, {\n            commitment: \"confirmed\"\n        });\n        if (!stx) throw new Error(\"Confirmed tx not found\");\n        const currentSlot = await connection.getSlot(\"confirmed\");\n        if (!stx.meta) throw new Error(`Unable to resolve transaction ${txId}`);\n        const amount = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](stx.meta.postBalances[1]).minus(new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](stx.meta.preBalances[1]));\n        const tx = {\n            from: stx.transaction.message.accountKeys[0].toBase58(),\n            to: stx.transaction.message.accountKeys[1].toBase58(),\n            amount: amount,\n            blockHeight: new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](stx.slot),\n            pending: false,\n            confirmed: currentSlot - stx.slot >= 1\n        };\n        return tx;\n    }\n    ownerToAddress(owner) {\n        return bs58__WEBPACK_IMPORTED_MODULE_2__.encode(owner);\n    }\n    async sign(data) {\n        return await (await this.getSigner()).sign(data);\n    }\n    getSigner() {\n        const keyp = this.getKeyPair();\n        const keypb = bs58__WEBPACK_IMPORTED_MODULE_2__.encode(Buffer.concat([\n            Buffer.from(keyp.secretKey),\n            keyp.publicKey.toBuffer()\n        ]));\n        return new arbundles__WEBPACK_IMPORTED_MODULE_0__.SolanaSigner(keypb);\n    }\n    verify(pub, data, signature) {\n        return arbundles__WEBPACK_IMPORTED_MODULE_0__.SolanaSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]((await (await this.getProvider()).getEpochInfo()).blockHeight ?? 0);\n    }\n    async getFee(_amount, _to) {\n        // const connection = await this.getProvider()\n        // const block = await connection.getRecentBlockhash();\n        // const feeCalc = await connection.getFeeCalculatorForBlockhash(\n        //     block.blockhash,\n        // );\n        // return new BigNumber(feeCalc.value.lamportsPerSignature);\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](5000); // hardcode it for now\n    }\n    async sendTx(data) {\n        const connection = await this.getProvider();\n        try {\n            return await (0,_solana_web3_js__WEBPACK_IMPORTED_MODULE_6__.sendAndConfirmTransaction)(connection, data, [\n                this.getKeyPair()\n            ], {\n                commitment: \"confirmed\"\n            });\n        } catch (e) {\n            if (e.message.includes(\"30.\")) {\n                const txId = e.message.match(/[A-Za-z0-9]{87,88}/g);\n                if (!txId) throw e;\n                try {\n                    const conf = await connection.confirmTransaction(txId[0], \"confirmed\");\n                    if (conf) return undefined;\n                    throw {\n                        message: e.message,\n                        txId: txId[0]\n                    };\n                } catch (e) {\n                    throw {\n                        message: e.message,\n                        txId: txId[0]\n                    };\n                }\n            }\n            throw e;\n        }\n    }\n    async createTx(amount, to, _fee) {\n        // TODO: figure out how to manually set fees\n        const keys = this.getKeyPair();\n        const blockHashInfo = await async_retry__WEBPACK_IMPORTED_MODULE_5__(async (bail)=>{\n            try {\n                return await (await this.getProvider()).getRecentBlockhash();\n            } catch (e) {\n                if (e.message?.includes(\"blockhash\")) throw e;\n                else bail(e);\n                throw new Error(\"Unreachable\");\n            }\n        }, {\n            retries: 3,\n            minTimeout: 1000\n        });\n        const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_6__.Transaction({\n            recentBlockhash: blockHashInfo.blockhash,\n            feePayer: keys.publicKey\n        });\n        transaction.add(_solana_web3_js__WEBPACK_IMPORTED_MODULE_6__.SystemProgram.transfer({\n            fromPubkey: keys.publicKey,\n            toPubkey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_6__.PublicKey(to),\n            lamports: +new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](amount).toNumber()\n        }));\n        const transactionBuffer = transaction.serializeMessage();\n        const signature = tweetnacl__WEBPACK_IMPORTED_MODULE_3__.sign.detached(transactionBuffer, keys.secretKey);\n        transaction.addSignature(keys.publicKey, Buffer.from(signature));\n        return {\n            tx: transaction,\n            txId: undefined\n        };\n    }\n    getPublicKey() {\n        const key = this.getKeyPair();\n        return key.publicKey.toBuffer();\n    }\n} //# sourceMappingURL=solana.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/tokens/solana.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/upload.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/upload.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkPath: () => (/* binding */ checkPath),\n/* harmony export */   \"default\": () => (/* binding */ NodeUploader)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _common_upload_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/upload.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/upload.js\");\n/* harmony import */ var mime_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mime-types */ \"(ssr)/./node_modules/.pnpm/mime-types@2.1.35/node_modules/mime-types/index.js\");\n/* harmony import */ var inquirer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! inquirer */ \"(ssr)/./node_modules/.pnpm/inquirer@8.2.6/node_modules/inquirer/lib/inquirer.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var csv_parse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! csv-parse */ \"(ssr)/./node_modules/.pnpm/csv-parse@4.16.3/node_modules/csv-parse/lib/index.js\");\n/* harmony import */ var csv_stringify__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! csv-stringify */ \"(ssr)/./node_modules/.pnpm/csv-stringify@5.6.5/node_modules/csv-stringify/lib/index.js\");\n\n\n\n\n\n\n\n\nconst checkPath = async (path)=>{\n    return fs__WEBPACK_IMPORTED_MODULE_0__.promises.stat(path).then((_)=>true).catch((_)=>false);\n};\nclass NodeUploader extends _common_upload_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(api, utils, token, tokenConfig, irysTx){\n        super(api, utils, token, tokenConfig, irysTx);\n    }\n    /**\n     * Uploads a file to the bundler\n     * @param path to the file to be uploaded\n     * @returns the response from the bundler\n     */ async uploadFile(path, opts) {\n        if (!await fs__WEBPACK_IMPORTED_MODULE_0__.promises.stat(path).then((_)=>true).catch((_)=>false)) {\n            throw new Error(`Unable to access path: ${path}`);\n        }\n        // don't add Content-type tag if it already exists\n        const hasContentTypeTag = opts?.tags && opts.tags.some((t)=>t.name.toLowerCase() === \"content-type\");\n        const mimeType = mime_types__WEBPACK_IMPORTED_MODULE_2__.contentType(mime_types__WEBPACK_IMPORTED_MODULE_2__.lookup(path) || \"application/octet-stream\");\n        (opts ??= {}).tags = hasContentTypeTag ? opts.tags : [\n            {\n                name: \"Content-Type\",\n                value: this.contentTypeOverride ?? mimeType\n            },\n            ...opts?.tags ?? []\n        ];\n        const data = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(path);\n        return await this.uploadData(data, opts);\n    }\n    async *walk(dir) {\n        for await (const d of (await fs__WEBPACK_IMPORTED_MODULE_0__.promises.opendir(dir))){\n            const entry = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)(dir, d.name);\n            if (d.isDirectory()) yield* await this.walk(entry);\n            else if (d.isFile()) yield entry;\n        }\n    }\n    /**\n     * Preprocessor for folder uploads, ensures the rest of the system has a correct operating environment.\n     * @param path - path to the folder to be uploaded\n     * @param indexFile - path to the index file (i.e index.html)\n     * @param batchSize - number of items to upload concurrently\n     * @param interactivePreflight - whether to interactively prompt the user for confirmation of upload (CLI ONLY)\n     * @param keepDeleted - Whether to keep previously uploaded (but now deleted) files in the manifest\n     * @param logFunction - for handling logging from the uploader for UX\n     * @returns\n     */ // eslint-disable-next-line @typescript-eslint/ban-types\n    async uploadFolder(path, { batchSize = 10, keepDeleted = true, indexFile, interactivePreflight, logFunction, manifestTags, itemOptions } = {\n        batchSize: 10,\n        keepDeleted: true\n    }) {\n        path = (0,path__WEBPACK_IMPORTED_MODULE_5__.resolve)(path);\n        const alreadyProcessed = new Map();\n        const receiptTxs = new Map();\n        if (!await checkPath(path)) {\n            throw new Error(`Unable to access path: ${path}`);\n        }\n        // fallback to console.log if no logging function is given and interactive preflight is on.\n        if (!logFunction && interactivePreflight) {\n            logFunction = async (log)=>{\n                console.log(log);\n            };\n        } else if (!logFunction) {\n            // blackhole logs\n            logFunction = async (_)=>{\n                return;\n            };\n        }\n        // manifest with folder name placed in parent directory of said folder - keeps contamination down.\n        const manifestPath = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)((0,path__WEBPACK_IMPORTED_MODULE_5__.join)(path, `${path__WEBPACK_IMPORTED_MODULE_5__.sep}..`), `${(0,path__WEBPACK_IMPORTED_MODULE_5__.basename)(path)}-manifest.csv`);\n        const csvHeader = \"path,id,receipt\\n\";\n        if (await checkPath(manifestPath)) {\n            const rstrm = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(manifestPath);\n            // check if empty\n            if ((await fs__WEBPACK_IMPORTED_MODULE_0__.promises.stat(manifestPath)).size === 0) {\n                await fs__WEBPACK_IMPORTED_MODULE_0__.promises.writeFile(manifestPath, csvHeader);\n            }\n            // validate header\n            await new Promise((res)=>{\n                (0,fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(manifestPath).once(\"data\", async (d)=>{\n                    const fl = d.toString().split(\"\\n\")[0];\n                    if (`${fl}\\n` !== csvHeader) {\n                        await fs__WEBPACK_IMPORTED_MODULE_0__.promises.writeFile(manifestPath, csvHeader);\n                    }\n                    res(d);\n                });\n            });\n            const csvStream = stream__WEBPACK_IMPORTED_MODULE_4__.Readable.from(rstrm.pipe(csv_parse__WEBPACK_IMPORTED_MODULE_6__({\n                delimiter: \",\",\n                columns: true\n            })));\n            for await (const record of csvStream){\n                record;\n                if (record.path && record.id) {\n                    alreadyProcessed.set(record.path, record.id);\n                    receiptTxs.set(record.path, JSON.parse(record.receipt));\n                }\n            }\n        } else {\n            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.writeFile(manifestPath, csvHeader);\n        }\n        const files = [];\n        let total = 0;\n        let i = 0;\n        for await (const f of this.walk(path)){\n            const relPath = (0,path__WEBPACK_IMPORTED_MODULE_5__.relative)(path, f);\n            if (!alreadyProcessed.has(relPath)) {\n                files.push(f);\n                total += (await fs__WEBPACK_IMPORTED_MODULE_0__.promises.stat(f)).size;\n            } else {\n                alreadyProcessed.delete(relPath);\n            }\n            if (++i % batchSize == 0) {\n                logFunction(`Checked ${i} files...`);\n            }\n        }\n        if (!keepDeleted) {\n            alreadyProcessed.clear();\n        }\n        // pass as param otherwise it thinks logFunction can be undef\n        const uploadManifest = async (logFunction)=>{\n            // generate JSON\n            await logFunction(\"Generating JSON manifest...\");\n            const jsonManifestPath = await this.generateManifestFromCsv(path, alreadyProcessed, indexFile);\n            // upload the manifest\n            await logFunction(\"Uploading JSON manifest...\");\n            const tags = [\n                {\n                    name: \"Type\",\n                    value: \"manifest\"\n                },\n                {\n                    name: \"Content-Type\",\n                    value: \"application/x.arweave-manifest+json\"\n                },\n                ...manifestTags ?? []\n            ];\n            const mres = await this.uploadData((0,fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(jsonManifestPath), {\n                tags\n            }).catch((e)=>{\n                throw new Error(`Failed to upload manifest: ${e.message}`);\n            });\n            await logFunction(\"Done!\");\n            if (mres?.id) {\n                await fs__WEBPACK_IMPORTED_MODULE_0__.promises.writeFile((0,path__WEBPACK_IMPORTED_MODULE_5__.join)((0,path__WEBPACK_IMPORTED_MODULE_5__.join)(path, `${path__WEBPACK_IMPORTED_MODULE_5__.sep}..`), `${(0,path__WEBPACK_IMPORTED_MODULE_5__.basename)(path)}-id.txt`), JSON.stringify(mres));\n            } else {\n                throw new Error(`Unable to get upload ID! ${JSON.stringify(mres)}`);\n            }\n            return mres;\n        };\n        // TODO: add logic to detect changes (MD5/other hash)\n        if (files.length == 0 && alreadyProcessed.size === 0) {\n            logFunction(\"No items to process\");\n            // return the txID of the upload\n            const idpath = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)((0,path__WEBPACK_IMPORTED_MODULE_5__.join)(path, `${path__WEBPACK_IMPORTED_MODULE_5__.sep}..`), `${(0,path__WEBPACK_IMPORTED_MODULE_5__.basename)(path)}-id.txt`);\n            if (await checkPath(idpath)) {\n                return JSON.parse(await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(idpath, \"utf-8\"));\n            }\n            // assume manifest wasn't uploaded\n            return await uploadManifest(logFunction);\n        }\n        // const zprice = (await this.utils.getPrice(this.currency, 0)).multipliedBy(files.length);\n        // const price = (await this.utils.getPrice(this.currency, total)).plus(zprice).toFixed(0);\n        const price = await this.utils.estimateFolderPrice({\n            fileCount: files.length,\n            totalBytes: total\n        });\n        if (interactivePreflight) {\n            if (!await confirmation(`Authorize upload?\\nTotal amount of data: ${total} bytes over ${files.length} files - cost: ${price} ${this.tokenConfig.base[0]} (${this.utils.fromAtomic(price).toFixed()} ${this.token})\\n Y / N`)) {\n                throw new Error(\"Confirmation failed\");\n            }\n        }\n        const stringifier = csv_stringify__WEBPACK_IMPORTED_MODULE_7__({\n            header: false,\n            columns: {\n                path: \"path\",\n                id: \"id\",\n                receipt: \"receipt\"\n            }\n        });\n        const wstrm = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(manifestPath, {\n            flags: \"a+\"\n        });\n        stringifier.pipe(wstrm);\n        const processor = async (data)=>{\n            if (data?.res?.id) {\n                const receipt = data.res.signature ? {\n                    id: data.res.id,\n                    block: data.res.block,\n                    deadlineHeight: data.res.deadlineHeight,\n                    public: data.res.public,\n                    signature: data.res.signature,\n                    timestamp: data.res.timestamp,\n                    validatorSignatures: data.res.validatorSignatures,\n                    version: data.res.version\n                } : {};\n                receiptTxs.set((0,path__WEBPACK_IMPORTED_MODULE_5__.relative)(path, data.item), receipt);\n                stringifier.write([\n                    (0,path__WEBPACK_IMPORTED_MODULE_5__.relative)(path, data.item),\n                    data.res.id,\n                    JSON.stringify(receipt)\n                ]);\n            }\n        };\n        const processingResults = await this.concurrentUploader(files, {\n            concurrency: batchSize,\n            resultProcessor: processor,\n            logFunction,\n            itemOptions\n        });\n        if (processingResults.errors.length > 0) {\n            await logFunction(`${processingResults.errors.length} Errors detected, skipping manifest upload...`);\n            const ewstrm = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)((0,path__WEBPACK_IMPORTED_MODULE_5__.join)((0,path__WEBPACK_IMPORTED_MODULE_5__.join)(path, `${path__WEBPACK_IMPORTED_MODULE_5__.sep}..`), `${(0,path__WEBPACK_IMPORTED_MODULE_5__.basename)(path)}-errors.txt`), {\n                flags: \"a+\"\n            });\n            ewstrm.write(`Errors from upload at ${new Date().toString()}:\\n`);\n            processingResults.errors.forEach((e)=>ewstrm.write(`${e?.stack ?? JSON.stringify(e)}\\n`));\n            await new Promise((res)=>ewstrm.close(res));\n            throw new Error(`${processingResults.errors.length} Errors detected - check ${(0,path__WEBPACK_IMPORTED_MODULE_5__.basename)(path)}-errors.txt for more information.`);\n        }\n        await logFunction(`Finished processing ${files.length} Items`);\n        await new Promise((r)=>wstrm.close(r));\n        return await uploadManifest(logFunction);\n    }\n    /**\n     * processes an item to convert it into a DataItem, and then uploads it.\n     * @param item can be a string value, a path to a file, a Buffer of data or a DataItem\n     * @returns A dataItem\n     */ async processItem(item, opts) {\n        if (this.arbundles.DataItem.isDataItem(item)) {\n            return this.uploadTransaction(item, {\n                ...opts?.upload\n            });\n        }\n        let tags;\n        if (typeof item === \"string\") {\n            if (await checkPath(item)) {\n                const mimeType = mime_types__WEBPACK_IMPORTED_MODULE_2__.contentType(mime_types__WEBPACK_IMPORTED_MODULE_2__.lookup(item) || \"application/octet-stream\");\n                tags = [\n                    {\n                        name: \"Content-Type\",\n                        value: this.contentTypeOverride ?? mimeType\n                    }\n                ];\n                // returnVal = item;\n                item = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(item);\n            } else {\n                item = Buffer.from(item);\n                if (this.contentTypeOverride) {\n                    tags = [\n                        {\n                            name: \"Content-Type\",\n                            value: this.contentTypeOverride\n                        }\n                    ];\n                }\n            }\n        }\n        return this.uploadData(item, {\n            ...opts,\n            tags: [\n                ...tags,\n                ...opts?.tags ?? []\n            ]\n        });\n    }\n    /**\n     * Stream-based CSV parser and JSON assembler\n     * @param path base path of the upload\n     * @param indexFile optional path to an index file\n     * @returns the path to the generated manifest\n     */ async generateManifestFromCsv(path, nowRemoved, indexFile) {\n        const csvstrm = csv_parse__WEBPACK_IMPORTED_MODULE_6__({\n            delimiter: \",\",\n            columns: true\n        });\n        const csvPath = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)((0,path__WEBPACK_IMPORTED_MODULE_5__.join)(path, `${path__WEBPACK_IMPORTED_MODULE_5__.sep}..`), `${(0,path__WEBPACK_IMPORTED_MODULE_5__.basename)(path)}-manifest.csv`);\n        const manifestPath = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)((0,path__WEBPACK_IMPORTED_MODULE_5__.join)(path, `${path__WEBPACK_IMPORTED_MODULE_5__.sep}..`), `${(0,path__WEBPACK_IMPORTED_MODULE_5__.basename)(path)}-manifest.json`);\n        const wstrm = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(manifestPath, {\n            flags: \"w+\"\n        });\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(csvPath).pipe(csvstrm); // pipe csv\n        /* eslint-disable quotes */ // \"header\"\n        wstrm.write(`{\\n\"manifest\": \"arweave/paths\",\\n\"version\": \"0.1.0\",\\n\"paths\": {\\n`);\n        const csvs = stream__WEBPACK_IMPORTED_MODULE_4__.Readable.from(csvstrm);\n        let firstValue = true;\n        for await (const d of csvs){\n            if (nowRemoved?.has(d.path)) {\n                nowRemoved.delete(d.path);\n                continue;\n            }\n            const prefix = firstValue ? \"\" : \",\\n\";\n            wstrm.write(`${prefix}\"${d.path.replaceAll(\"\\\\\", \"/\")}\":{\"id\":\"${d.id}\"}`);\n            firstValue = false;\n        }\n        // \"trailer\"\n        wstrm.write(`\\n}`);\n        // add index\n        if (indexFile) {\n            wstrm.write(`,\\n\"index\":{\"path\":\"${indexFile.replaceAll(\"\\\\\", \"/\")}\"}`);\n        }\n        wstrm.write(`\\n}`);\n        await new Promise((r)=>wstrm.close(r));\n        return manifestPath;\n    }\n}\nasync function confirmation(message) {\n    const answers = await inquirer__WEBPACK_IMPORTED_MODULE_3__.prompt([\n        {\n            type: \"input\",\n            name: \"confirmation\",\n            message\n        }\n    ]);\n    return answers.confirmation.toLowerCase() == \"y\";\n} //# sourceMappingURL=upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vbm9kZS91cGxvYWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFtRTtBQUN4QjtBQUNiO0FBQ0U7QUFDRTtBQUM0QjtBQUNoQztBQUNRO0FBQy9CLE1BQU1jLFlBQVksT0FBT0M7SUFDNUIsT0FBT2Ysd0NBQVFBLENBQ1ZnQixJQUFJLENBQUNELE1BQ0xFLElBQUksQ0FBQyxDQUFDQyxJQUFNLE1BQ1pDLEtBQUssQ0FBQyxDQUFDRCxJQUFNO0FBQ3RCLEVBQUU7QUFDYSxNQUFNRSxxQkFBcUJqQix5REFBUUE7SUFDOUNrQixZQUFZQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sQ0FBRTtRQUNoRCxLQUFLLENBQUNKLEtBQUtDLE9BQU9DLE9BQU9DLGFBQWFDO0lBQzFDO0lBQ0E7Ozs7S0FJQyxHQUNELE1BQU1DLFdBQVdaLElBQUksRUFBRWEsSUFBSSxFQUFFO1FBQ3pCLElBQUksQ0FBRSxNQUFNNUIsd0NBQVFBLENBQ2ZnQixJQUFJLENBQUNELE1BQ0xFLElBQUksQ0FBQyxDQUFDQyxJQUFNLE1BQ1pDLEtBQUssQ0FBQyxDQUFDRCxJQUFNLFFBQVM7WUFDdkIsTUFBTSxJQUFJVyxNQUFNLENBQUMsdUJBQXVCLEVBQUVkLEtBQUssQ0FBQztRQUNwRDtRQUNBLGtEQUFrRDtRQUNsRCxNQUFNZSxvQkFBb0JGLE1BQU1HLFFBQVFILEtBQUtHLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLElBQUksQ0FBQ0MsV0FBVyxPQUFPO1FBQ3ZGLE1BQU1DLFdBQVdoQyxtREFBZ0IsQ0FBQ0EsOENBQVcsQ0FBQ1csU0FBUztRQUN0RGEsQ0FBQUEsU0FBUyxDQUFDLEdBQUdHLElBQUksR0FBR0Qsb0JBQ2ZGLEtBQUtHLElBQUksR0FDVDtZQUFDO2dCQUFFRyxNQUFNO2dCQUFnQkssT0FBTyxJQUFJLENBQUNDLG1CQUFtQixJQUFJSjtZQUFTO2VBQU9SLE1BQU1HLFFBQVEsRUFBRTtTQUFFO1FBQ3BHLE1BQU1VLE9BQU94QyxvREFBZ0JBLENBQUNjO1FBQzlCLE9BQU8sTUFBTSxJQUFJLENBQUMyQixVQUFVLENBQUNELE1BQU1iO0lBQ3ZDO0lBQ0EsT0FBT2UsS0FBS0MsR0FBRyxFQUFFO1FBQ2IsV0FBVyxNQUFNQyxLQUFLLE9BQU03Qyx3Q0FBUUEsQ0FBQzhDLE9BQU8sQ0FBQ0YsSUFBRyxFQUFHO1lBQy9DLE1BQU1HLFFBQVF2QywwQ0FBSUEsQ0FBQ29DLEtBQUtDLEVBQUVYLElBQUk7WUFDOUIsSUFBSVcsRUFBRUcsV0FBVyxJQUNiLE9BQU8sTUFBTSxJQUFJLENBQUNMLElBQUksQ0FBQ0k7aUJBQ3RCLElBQUlGLEVBQUVJLE1BQU0sSUFDYixNQUFNRjtRQUNkO0lBQ0o7SUFDQTs7Ozs7Ozs7O0tBU0MsR0FDRCx3REFBd0Q7SUFDeEQsTUFBTUcsYUFBYW5DLElBQUksRUFBRSxFQUFFb0MsWUFBWSxFQUFFLEVBQUVDLGNBQWMsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLG9CQUFvQixFQUFFQyxXQUFXLEVBQUVDLFlBQVksRUFBRUMsV0FBVyxFQUFHLEdBQUc7UUFBRU4sV0FBVztRQUFJQyxhQUFhO0lBQUssQ0FBQyxFQUFFO1FBQzlLckMsT0FBT0wsNkNBQU9BLENBQUNLO1FBQ2YsTUFBTTJDLG1CQUFtQixJQUFJQztRQUM3QixNQUFNQyxhQUFhLElBQUlEO1FBQ3ZCLElBQUksQ0FBRSxNQUFNN0MsVUFBVUMsT0FBUTtZQUMxQixNQUFNLElBQUljLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRWQsS0FBSyxDQUFDO1FBQ3BEO1FBQ0EsMkZBQTJGO1FBQzNGLElBQUksQ0FBQ3dDLGVBQWVELHNCQUFzQjtZQUN0Q0MsY0FBYyxPQUFPTTtnQkFDakJDLFFBQVFELEdBQUcsQ0FBQ0E7WUFDaEI7UUFDSixPQUNLLElBQUksQ0FBQ04sYUFBYTtZQUNuQixpQkFBaUI7WUFDakJBLGNBQWMsT0FBT3JDO2dCQUNqQjtZQUNKO1FBQ0o7UUFDQSxrR0FBa0c7UUFDbEcsTUFBTTZDLGVBQWV2RCwwQ0FBSUEsQ0FBQ0EsMENBQUlBLENBQUNPLE1BQU0sQ0FBQyxFQUFFSixxQ0FBR0EsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUVKLDhDQUFRQSxDQUFDUSxNQUFNLGFBQWEsQ0FBQztRQUNsRixNQUFNaUQsWUFBWTtRQUNsQixJQUFJLE1BQU1sRCxVQUFVaUQsZUFBZTtZQUMvQixNQUFNRSxRQUFRaEUsb0RBQWdCQSxDQUFDOEQ7WUFDL0IsaUJBQWlCO1lBQ2pCLElBQUksQ0FBQyxNQUFNL0Qsd0NBQVFBLENBQUNnQixJQUFJLENBQUMrQyxhQUFZLEVBQUdHLElBQUksS0FBSyxHQUFHO2dCQUNoRCxNQUFNbEUsd0NBQVFBLENBQUNtRSxTQUFTLENBQUNKLGNBQWNDO1lBQzNDO1lBQ0Esa0JBQWtCO1lBQ2xCLE1BQU0sSUFBSUksUUFBUSxDQUFDQztnQkFDZnBFLG9EQUFnQkEsQ0FBQzhELGNBQWNPLElBQUksQ0FBQyxRQUFRLE9BQU96QjtvQkFDL0MsTUFBTTBCLEtBQUsxQixFQUFFMkIsUUFBUSxHQUFHQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxFQUFFRixHQUFHLEVBQUUsQ0FBQyxLQUFLUCxXQUFXO3dCQUN6QixNQUFNaEUsd0NBQVFBLENBQUNtRSxTQUFTLENBQUNKLGNBQWNDO29CQUMzQztvQkFDQUssSUFBSXhCO2dCQUNSO1lBQ0o7WUFDQSxNQUFNNkIsWUFBWXBFLDRDQUFRQSxDQUFDcUUsSUFBSSxDQUFDVixNQUFNVyxJQUFJLENBQUNoRSxzQ0FBS0EsQ0FBQztnQkFBRWlFLFdBQVc7Z0JBQUtDLFNBQVM7WUFBSztZQUNqRixXQUFXLE1BQU1DLFVBQVVMLFVBQVc7Z0JBQ2xDSztnQkFDQSxJQUFJQSxPQUFPaEUsSUFBSSxJQUFJZ0UsT0FBT0MsRUFBRSxFQUFFO29CQUMxQnRCLGlCQUFpQnVCLEdBQUcsQ0FBQ0YsT0FBT2hFLElBQUksRUFBRWdFLE9BQU9DLEVBQUU7b0JBQzNDcEIsV0FBV3FCLEdBQUcsQ0FBQ0YsT0FBT2hFLElBQUksRUFBRW1FLEtBQUt0RSxLQUFLLENBQUNtRSxPQUFPSSxPQUFPO2dCQUN6RDtZQUNKO1FBQ0osT0FDSztZQUNELE1BQU1uRix3Q0FBUUEsQ0FBQ21FLFNBQVMsQ0FBQ0osY0FBY0M7UUFDM0M7UUFDQSxNQUFNb0IsUUFBUSxFQUFFO1FBQ2hCLElBQUlDLFFBQVE7UUFDWixJQUFJQyxJQUFJO1FBQ1IsV0FBVyxNQUFNQyxLQUFLLElBQUksQ0FBQzVDLElBQUksQ0FBQzVCLE1BQU87WUFDbkMsTUFBTXlFLFVBQVUvRSw4Q0FBUUEsQ0FBQ00sTUFBTXdFO1lBQy9CLElBQUksQ0FBQzdCLGlCQUFpQitCLEdBQUcsQ0FBQ0QsVUFBVTtnQkFDaENKLE1BQU1NLElBQUksQ0FBQ0g7Z0JBQ1hGLFNBQVMsQ0FBQyxNQUFNckYsd0NBQVFBLENBQUNnQixJQUFJLENBQUN1RSxFQUFDLEVBQUdyQixJQUFJO1lBQzFDLE9BQ0s7Z0JBQ0RSLGlCQUFpQmlDLE1BQU0sQ0FBQ0g7WUFDNUI7WUFDQSxJQUFJLEVBQUVGLElBQUluQyxhQUFhLEdBQUc7Z0JBQ3RCSSxZQUFZLENBQUMsUUFBUSxFQUFFK0IsRUFBRSxTQUFTLENBQUM7WUFDdkM7UUFDSjtRQUNBLElBQUksQ0FBQ2xDLGFBQWE7WUFDZE0saUJBQWlCa0MsS0FBSztRQUMxQjtRQUNBLDZEQUE2RDtRQUM3RCxNQUFNQyxpQkFBaUIsT0FBT3RDO1lBQzFCLGdCQUFnQjtZQUNoQixNQUFNQSxZQUFZO1lBQ2xCLE1BQU11QyxtQkFBbUIsTUFBTSxJQUFJLENBQUNDLHVCQUF1QixDQUFDaEYsTUFBTTJDLGtCQUFrQkw7WUFDcEYsc0JBQXNCO1lBQ3RCLE1BQU1FLFlBQVk7WUFDbEIsTUFBTXhCLE9BQU87Z0JBQ1Q7b0JBQUVHLE1BQU07b0JBQVFLLE9BQU87Z0JBQVc7Z0JBQ2xDO29CQUFFTCxNQUFNO29CQUFnQkssT0FBTztnQkFBc0M7bUJBQ2pFaUIsZ0JBQWdCLEVBQUU7YUFDekI7WUFDRCxNQUFNd0MsT0FBTyxNQUFNLElBQUksQ0FBQ3RELFVBQVUsQ0FBQ3pDLG9EQUFnQkEsQ0FBQzZGLG1CQUFtQjtnQkFBRS9EO1lBQUssR0FBR1osS0FBSyxDQUFDLENBQUM4RTtnQkFDcEYsTUFBTSxJQUFJcEUsTUFBTSxDQUFDLDJCQUEyQixFQUFFb0UsRUFBRUMsT0FBTyxDQUFDLENBQUM7WUFDN0Q7WUFDQSxNQUFNM0MsWUFBWTtZQUNsQixJQUFJeUMsTUFBTWhCLElBQUk7Z0JBQ1YsTUFBTWhGLHdDQUFRQSxDQUFDbUUsU0FBUyxDQUFDM0QsMENBQUlBLENBQUNBLDBDQUFJQSxDQUFDTyxNQUFNLENBQUMsRUFBRUoscUNBQUdBLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFSiw4Q0FBUUEsQ0FBQ1EsTUFBTSxPQUFPLENBQUMsR0FBR21FLEtBQUtyRSxTQUFTLENBQUNtRjtZQUN0RyxPQUNLO2dCQUNELE1BQU0sSUFBSW5FLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRXFELEtBQUtyRSxTQUFTLENBQUNtRixNQUFNLENBQUM7WUFDdEU7WUFDQSxPQUFPQTtRQUNYO1FBQ0EscURBQXFEO1FBQ3JELElBQUlaLE1BQU1lLE1BQU0sSUFBSSxLQUFLekMsaUJBQWlCUSxJQUFJLEtBQUssR0FBRztZQUNsRFgsWUFBWTtZQUNaLGdDQUFnQztZQUNoQyxNQUFNNkMsU0FBUzVGLDBDQUFJQSxDQUFDQSwwQ0FBSUEsQ0FBQ08sTUFBTSxDQUFDLEVBQUVKLHFDQUFHQSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRUosOENBQVFBLENBQUNRLE1BQU0sT0FBTyxDQUFDO1lBQ3RFLElBQUksTUFBTUQsVUFBVXNGLFNBQVM7Z0JBQ3pCLE9BQU9sQixLQUFLdEUsS0FBSyxDQUFDLE1BQU1aLHdDQUFRQSxDQUFDcUcsUUFBUSxDQUFDRCxRQUFRO1lBQ3REO1lBQ0Esa0NBQWtDO1lBQ2xDLE9BQU8sTUFBTVAsZUFBZXRDO1FBQ2hDO1FBQ0EsMkZBQTJGO1FBQzNGLDJGQUEyRjtRQUMzRixNQUFNK0MsUUFBUSxNQUFNLElBQUksQ0FBQy9FLEtBQUssQ0FBQ2dGLG1CQUFtQixDQUFDO1lBQUVDLFdBQVdwQixNQUFNZSxNQUFNO1lBQUVNLFlBQVlwQjtRQUFNO1FBQ2hHLElBQUkvQixzQkFBc0I7WUFDdEIsSUFBSSxDQUFFLE1BQU1vRCxhQUFhLENBQUMseUNBQXlDLEVBQUVyQixNQUFNLFlBQVksRUFBRUQsTUFBTWUsTUFBTSxDQUFDLGVBQWUsRUFBRUcsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDN0UsV0FBVyxDQUFDa0YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDcEYsS0FBSyxDQUFDcUYsVUFBVSxDQUFDTixPQUFPTyxPQUFPLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQ3JGLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBSTtnQkFDNU4sTUFBTSxJQUFJSyxNQUFNO1lBQ3BCO1FBQ0o7UUFDQSxNQUFNaUYsY0FBY2pHLDBDQUFTQSxDQUFDO1lBQzFCa0csUUFBUTtZQUNSakMsU0FBUztnQkFDTC9ELE1BQU07Z0JBQ05pRSxJQUFJO2dCQUNKRyxTQUFTO1lBQ2I7UUFDSjtRQUNBLE1BQU02QixRQUFROUcscURBQWlCQSxDQUFDNkQsY0FBYztZQUFFa0QsT0FBTztRQUFLO1FBQzVESCxZQUFZbEMsSUFBSSxDQUFDb0M7UUFDakIsTUFBTUUsWUFBWSxPQUFPekU7WUFDckIsSUFBSUEsTUFBTTRCLEtBQUtXLElBQUk7Z0JBQ2YsTUFBTUcsVUFBVTFDLEtBQUs0QixHQUFHLENBQUM4QyxTQUFTLEdBQzVCO29CQUNFbkMsSUFBSXZDLEtBQUs0QixHQUFHLENBQUNXLEVBQUU7b0JBQ2ZvQyxPQUFPM0UsS0FBSzRCLEdBQUcsQ0FBQytDLEtBQUs7b0JBQ3JCQyxnQkFBZ0I1RSxLQUFLNEIsR0FBRyxDQUFDZ0QsY0FBYztvQkFDdkNDLFFBQVE3RSxLQUFLNEIsR0FBRyxDQUFDaUQsTUFBTTtvQkFDdkJILFdBQVcxRSxLQUFLNEIsR0FBRyxDQUFDOEMsU0FBUztvQkFDN0JJLFdBQVc5RSxLQUFLNEIsR0FBRyxDQUFDa0QsU0FBUztvQkFDN0JDLHFCQUFxQi9FLEtBQUs0QixHQUFHLENBQUNtRCxtQkFBbUI7b0JBQ2pEQyxTQUFTaEYsS0FBSzRCLEdBQUcsQ0FBQ29ELE9BQU87Z0JBQzdCLElBQ0UsQ0FBQztnQkFDUDdELFdBQVdxQixHQUFHLENBQUN4RSw4Q0FBUUEsQ0FBQ00sTUFBTTBCLEtBQUtpRixJQUFJLEdBQUd2QztnQkFDMUMyQixZQUFZYSxLQUFLLENBQUM7b0JBQUNsSCw4Q0FBUUEsQ0FBQ00sTUFBTTBCLEtBQUtpRixJQUFJO29CQUFHakYsS0FBSzRCLEdBQUcsQ0FBQ1csRUFBRTtvQkFBRUUsS0FBS3JFLFNBQVMsQ0FBQ3NFO2lCQUFTO1lBQ3ZGO1FBQ0o7UUFDQSxNQUFNeUMsb0JBQW9CLE1BQU0sSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ3pDLE9BQU87WUFDM0QwQyxhQUFhM0U7WUFDYjRFLGlCQUFpQmI7WUFDakIzRDtZQUNBRTtRQUNKO1FBQ0EsSUFBSW1FLGtCQUFrQkksTUFBTSxDQUFDN0IsTUFBTSxHQUFHLEdBQUc7WUFDckMsTUFBTTVDLFlBQVksQ0FBQyxFQUFFcUUsa0JBQWtCSSxNQUFNLENBQUM3QixNQUFNLENBQUMsNkNBQTZDLENBQUM7WUFDbkcsTUFBTThCLFNBQVMvSCxxREFBaUJBLENBQUNNLDBDQUFJQSxDQUFDQSwwQ0FBSUEsQ0FBQ08sTUFBTSxDQUFDLEVBQUVKLHFDQUFHQSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRUosOENBQVFBLENBQUNRLE1BQU0sV0FBVyxDQUFDLEdBQUc7Z0JBQUVrRyxPQUFPO1lBQUs7WUFDN0dnQixPQUFPTixLQUFLLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJTyxPQUFPMUQsUUFBUSxHQUFHLEdBQUcsQ0FBQztZQUNoRW9ELGtCQUFrQkksTUFBTSxDQUFDRyxPQUFPLENBQUMsQ0FBQ2xDLElBQU1nQyxPQUFPTixLQUFLLENBQUMsQ0FBQyxFQUFFMUIsR0FBR21DLFNBQVNsRCxLQUFLckUsU0FBUyxDQUFDb0YsR0FBRyxFQUFFLENBQUM7WUFDekYsTUFBTSxJQUFJN0IsUUFBUSxDQUFDQyxNQUFRNEQsT0FBT0ksS0FBSyxDQUFDaEU7WUFDeEMsTUFBTSxJQUFJeEMsTUFBTSxDQUFDLEVBQUUrRixrQkFBa0JJLE1BQU0sQ0FBQzdCLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRTVGLDhDQUFRQSxDQUFDUSxNQUFNLGlDQUFpQyxDQUFDO1FBQ25JO1FBQ0EsTUFBTXdDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRTZCLE1BQU1lLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDN0QsTUFBTSxJQUFJL0IsUUFBUSxDQUFDa0UsSUFBTXRCLE1BQU1xQixLQUFLLENBQUNDO1FBQ3JDLE9BQU8sTUFBTXpDLGVBQWV0QztJQUNoQztJQUNBOzs7O0tBSUMsR0FDRCxNQUFNZ0YsWUFBWWIsSUFBSSxFQUFFOUYsSUFBSSxFQUFFO1FBQzFCLElBQUksSUFBSSxDQUFDNEcsU0FBUyxDQUFDQyxRQUFRLENBQUNDLFVBQVUsQ0FBQ2hCLE9BQU87WUFDMUMsT0FBTyxJQUFJLENBQUNpQixpQkFBaUIsQ0FBQ2pCLE1BQU07Z0JBQUUsR0FBRzlGLE1BQU1nSCxNQUFNO1lBQUM7UUFDMUQ7UUFDQSxJQUFJN0c7UUFDSixJQUFJLE9BQU8yRixTQUFTLFVBQVU7WUFDMUIsSUFBSSxNQUFNNUcsVUFBVTRHLE9BQU87Z0JBQ3ZCLE1BQU10RixXQUFXaEMsbURBQWdCLENBQUNBLDhDQUFXLENBQUNzSCxTQUFTO2dCQUN2RDNGLE9BQU87b0JBQUM7d0JBQUVHLE1BQU07d0JBQWdCSyxPQUFPLElBQUksQ0FBQ0MsbUJBQW1CLElBQUlKO29CQUFTO2lCQUFFO2dCQUM5RSxvQkFBb0I7Z0JBQ3BCc0YsT0FBT3pILG9EQUFnQkEsQ0FBQ3lIO1lBQzVCLE9BQ0s7Z0JBQ0RBLE9BQU9tQixPQUFPbEUsSUFBSSxDQUFDK0M7Z0JBQ25CLElBQUksSUFBSSxDQUFDbEYsbUJBQW1CLEVBQUU7b0JBQzFCVCxPQUFPO3dCQUFDOzRCQUFFRyxNQUFNOzRCQUFnQkssT0FBTyxJQUFJLENBQUNDLG1CQUFtQjt3QkFBQztxQkFBRTtnQkFDdEU7WUFDSjtRQUNKO1FBQ0EsT0FBTyxJQUFJLENBQUNFLFVBQVUsQ0FBQ2dGLE1BQU07WUFBRSxHQUFHOUYsSUFBSTtZQUFFRyxNQUFNO21CQUFJQTttQkFBVUgsTUFBTUcsUUFBUSxFQUFFO2FBQUU7UUFBQztJQUNuRjtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTWdFLHdCQUF3QmhGLElBQUksRUFBRStILFVBQVUsRUFBRXpGLFNBQVMsRUFBRTtRQUN2RCxNQUFNMEYsVUFBVW5JLHNDQUFLQSxDQUFDO1lBQUVpRSxXQUFXO1lBQUtDLFNBQVM7UUFBSztRQUN0RCxNQUFNa0UsVUFBVXhJLDBDQUFJQSxDQUFDQSwwQ0FBSUEsQ0FBQ08sTUFBTSxDQUFDLEVBQUVKLHFDQUFHQSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRUosOENBQVFBLENBQUNRLE1BQU0sYUFBYSxDQUFDO1FBQzdFLE1BQU1nRCxlQUFldkQsMENBQUlBLENBQUNBLDBDQUFJQSxDQUFDTyxNQUFNLENBQUMsRUFBRUoscUNBQUdBLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFSiw4Q0FBUUEsQ0FBQ1EsTUFBTSxjQUFjLENBQUM7UUFDbkYsTUFBTWlHLFFBQVE5RyxxREFBaUJBLENBQUM2RCxjQUFjO1lBQUVrRCxPQUFPO1FBQUs7UUFDNURoSCxvREFBZ0JBLENBQUMrSSxTQUFTcEUsSUFBSSxDQUFDbUUsVUFBVSxXQUFXO1FBQ3BELHlCQUF5QixHQUN6QixXQUFXO1FBQ1gvQixNQUFNVyxLQUFLLENBQUMsQ0FBQyxrRUFBa0UsQ0FBQztRQUNoRixNQUFNc0IsT0FBTzNJLDRDQUFRQSxDQUFDcUUsSUFBSSxDQUFDb0U7UUFDM0IsSUFBSUcsYUFBYTtRQUNqQixXQUFXLE1BQU1yRyxLQUFLb0csS0FBTTtZQUN4QixJQUFJSCxZQUFZckQsSUFBSTVDLEVBQUU5QixJQUFJLEdBQUc7Z0JBQ3pCK0gsV0FBV25ELE1BQU0sQ0FBQzlDLEVBQUU5QixJQUFJO2dCQUN4QjtZQUNKO1lBQ0EsTUFBTW9JLFNBQVNELGFBQWEsS0FBSztZQUNqQ2xDLE1BQU1XLEtBQUssQ0FBQyxDQUFDLEVBQUV3QixPQUFPLENBQUMsRUFBRXRHLEVBQUU5QixJQUFJLENBQUNxSSxVQUFVLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRXZHLEVBQUVtQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ3pFa0UsYUFBYTtRQUNqQjtRQUNBLFlBQVk7UUFDWmxDLE1BQU1XLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNqQixZQUFZO1FBQ1osSUFBSXRFLFdBQVc7WUFDWDJELE1BQU1XLEtBQUssQ0FBQyxDQUFDLG9CQUFvQixFQUFFdEUsVUFBVStGLFVBQVUsQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDO1FBQzFFO1FBQ0FwQyxNQUFNVyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDakIsTUFBTSxJQUFJdkQsUUFBUSxDQUFDa0UsSUFBTXRCLE1BQU1xQixLQUFLLENBQUNDO1FBQ3JDLE9BQU92RTtJQUNYO0FBQ0o7QUFDQSxlQUFlMkMsYUFBYVIsT0FBTztJQUMvQixNQUFNbUQsVUFBVSxNQUFNaEosNENBQWUsQ0FBQztRQUFDO1lBQUVrSixNQUFNO1lBQVNySCxNQUFNO1lBQWdCZ0U7UUFBUTtLQUFFO0lBQ3hGLE9BQU9tRCxRQUFRM0MsWUFBWSxDQUFDdkUsV0FBVyxNQUFNO0FBQ2pELEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cytzZGtAMC4wLjJfYXJ3ZWF2ZUAxLjE1LjdfYnVmZmVydXRpbEA0LjAuOV9kZWJ1Z0A0LjQuMF90eXBlc2NyaXB0QDUuOC4zX3V0Zi04LXZhbGlkYXRlQDUuMC4xMC9ub2RlX21vZHVsZXMvQGlyeXMvc2RrL2J1aWxkL2VzbS9ub2RlL3VwbG9hZC5qcz8wMWU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByb21pc2VzLCBjcmVhdGVSZWFkU3RyZWFtLCBjcmVhdGVXcml0ZVN0cmVhbSB9IGZyb20gXCJmc1wiO1xuaW1wb3J0IFVwbG9hZGVyIGZyb20gXCIuLi9jb21tb24vdXBsb2FkLmpzXCI7XG5pbXBvcnQgbWltZSBmcm9tIFwibWltZS10eXBlc1wiO1xuaW1wb3J0IGlucXVpcmVyIGZyb20gXCJpbnF1aXJlclwiO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5pbXBvcnQgeyBiYXNlbmFtZSwgam9pbiwgcmVsYXRpdmUsIHJlc29sdmUsIHNlcCB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgcGFyc2UgZnJvbSBcImNzdi1wYXJzZVwiO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tIFwiY3N2LXN0cmluZ2lmeVwiO1xuZXhwb3J0IGNvbnN0IGNoZWNrUGF0aCA9IGFzeW5jIChwYXRoKSA9PiB7XG4gICAgcmV0dXJuIHByb21pc2VzXG4gICAgICAgIC5zdGF0KHBhdGgpXG4gICAgICAgIC50aGVuKChfKSA9PiB0cnVlKVxuICAgICAgICAuY2F0Y2goKF8pID0+IGZhbHNlKTtcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb2RlVXBsb2FkZXIgZXh0ZW5kcyBVcGxvYWRlciB7XG4gICAgY29uc3RydWN0b3IoYXBpLCB1dGlscywgdG9rZW4sIHRva2VuQ29uZmlnLCBpcnlzVHgpIHtcbiAgICAgICAgc3VwZXIoYXBpLCB1dGlscywgdG9rZW4sIHRva2VuQ29uZmlnLCBpcnlzVHgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWRzIGEgZmlsZSB0byB0aGUgYnVuZGxlclxuICAgICAqIEBwYXJhbSBwYXRoIHRvIHRoZSBmaWxlIHRvIGJlIHVwbG9hZGVkXG4gICAgICogQHJldHVybnMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGJ1bmRsZXJcbiAgICAgKi9cbiAgICBhc3luYyB1cGxvYWRGaWxlKHBhdGgsIG9wdHMpIHtcbiAgICAgICAgaWYgKCEoYXdhaXQgcHJvbWlzZXNcbiAgICAgICAgICAgIC5zdGF0KHBhdGgpXG4gICAgICAgICAgICAudGhlbigoXykgPT4gdHJ1ZSlcbiAgICAgICAgICAgIC5jYXRjaCgoXykgPT4gZmFsc2UpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gYWNjZXNzIHBhdGg6ICR7cGF0aH1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkb24ndCBhZGQgQ29udGVudC10eXBlIHRhZyBpZiBpdCBhbHJlYWR5IGV4aXN0c1xuICAgICAgICBjb25zdCBoYXNDb250ZW50VHlwZVRhZyA9IG9wdHM/LnRhZ3MgJiYgb3B0cy50YWdzLnNvbWUoKHQpID0+IHQubmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiKTtcbiAgICAgICAgY29uc3QgbWltZVR5cGUgPSBtaW1lLmNvbnRlbnRUeXBlKG1pbWUubG9va3VwKHBhdGgpIHx8IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpO1xuICAgICAgICAob3B0cyA/Pz0ge30pLnRhZ3MgPSBoYXNDb250ZW50VHlwZVRhZ1xuICAgICAgICAgICAgPyBvcHRzLnRhZ3NcbiAgICAgICAgICAgIDogW3sgbmFtZTogXCJDb250ZW50LVR5cGVcIiwgdmFsdWU6IHRoaXMuY29udGVudFR5cGVPdmVycmlkZSA/PyBtaW1lVHlwZSB9LCAuLi4ob3B0cz8udGFncyA/PyBbXSldO1xuICAgICAgICBjb25zdCBkYXRhID0gY3JlYXRlUmVhZFN0cmVhbShwYXRoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudXBsb2FkRGF0YShkYXRhLCBvcHRzKTtcbiAgICB9XG4gICAgYXN5bmMgKndhbGsoZGlyKSB7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgZCBvZiBhd2FpdCBwcm9taXNlcy5vcGVuZGlyKGRpcikpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gam9pbihkaXIsIGQubmFtZSk7XG4gICAgICAgICAgICBpZiAoZC5pc0RpcmVjdG9yeSgpKVxuICAgICAgICAgICAgICAgIHlpZWxkKiBhd2FpdCB0aGlzLndhbGsoZW50cnkpO1xuICAgICAgICAgICAgZWxzZSBpZiAoZC5pc0ZpbGUoKSlcbiAgICAgICAgICAgICAgICB5aWVsZCBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmVwcm9jZXNzb3IgZm9yIGZvbGRlciB1cGxvYWRzLCBlbnN1cmVzIHRoZSByZXN0IG9mIHRoZSBzeXN0ZW0gaGFzIGEgY29ycmVjdCBvcGVyYXRpbmcgZW52aXJvbm1lbnQuXG4gICAgICogQHBhcmFtIHBhdGggLSBwYXRoIHRvIHRoZSBmb2xkZXIgdG8gYmUgdXBsb2FkZWRcbiAgICAgKiBAcGFyYW0gaW5kZXhGaWxlIC0gcGF0aCB0byB0aGUgaW5kZXggZmlsZSAoaS5lIGluZGV4Lmh0bWwpXG4gICAgICogQHBhcmFtIGJhdGNoU2l6ZSAtIG51bWJlciBvZiBpdGVtcyB0byB1cGxvYWQgY29uY3VycmVudGx5XG4gICAgICogQHBhcmFtIGludGVyYWN0aXZlUHJlZmxpZ2h0IC0gd2hldGhlciB0byBpbnRlcmFjdGl2ZWx5IHByb21wdCB0aGUgdXNlciBmb3IgY29uZmlybWF0aW9uIG9mIHVwbG9hZCAoQ0xJIE9OTFkpXG4gICAgICogQHBhcmFtIGtlZXBEZWxldGVkIC0gV2hldGhlciB0byBrZWVwIHByZXZpb3VzbHkgdXBsb2FkZWQgKGJ1dCBub3cgZGVsZXRlZCkgZmlsZXMgaW4gdGhlIG1hbmlmZXN0XG4gICAgICogQHBhcmFtIGxvZ0Z1bmN0aW9uIC0gZm9yIGhhbmRsaW5nIGxvZ2dpbmcgZnJvbSB0aGUgdXBsb2FkZXIgZm9yIFVYXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICAgIGFzeW5jIHVwbG9hZEZvbGRlcihwYXRoLCB7IGJhdGNoU2l6ZSA9IDEwLCBrZWVwRGVsZXRlZCA9IHRydWUsIGluZGV4RmlsZSwgaW50ZXJhY3RpdmVQcmVmbGlnaHQsIGxvZ0Z1bmN0aW9uLCBtYW5pZmVzdFRhZ3MsIGl0ZW1PcHRpb25zLCB9ID0geyBiYXRjaFNpemU6IDEwLCBrZWVwRGVsZXRlZDogdHJ1ZSB9KSB7XG4gICAgICAgIHBhdGggPSByZXNvbHZlKHBhdGgpO1xuICAgICAgICBjb25zdCBhbHJlYWR5UHJvY2Vzc2VkID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCByZWNlaXB0VHhzID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAoIShhd2FpdCBjaGVja1BhdGgocGF0aCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBhY2Nlc3MgcGF0aDogJHtwYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGNvbnNvbGUubG9nIGlmIG5vIGxvZ2dpbmcgZnVuY3Rpb24gaXMgZ2l2ZW4gYW5kIGludGVyYWN0aXZlIHByZWZsaWdodCBpcyBvbi5cbiAgICAgICAgaWYgKCFsb2dGdW5jdGlvbiAmJiBpbnRlcmFjdGl2ZVByZWZsaWdodCkge1xuICAgICAgICAgICAgbG9nRnVuY3Rpb24gPSBhc3luYyAobG9nKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobG9nKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWxvZ0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAvLyBibGFja2hvbGUgbG9nc1xuICAgICAgICAgICAgbG9nRnVuY3Rpb24gPSBhc3luYyAoXykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWFuaWZlc3Qgd2l0aCBmb2xkZXIgbmFtZSBwbGFjZWQgaW4gcGFyZW50IGRpcmVjdG9yeSBvZiBzYWlkIGZvbGRlciAtIGtlZXBzIGNvbnRhbWluYXRpb24gZG93bi5cbiAgICAgICAgY29uc3QgbWFuaWZlc3RQYXRoID0gam9pbihqb2luKHBhdGgsIGAke3NlcH0uLmApLCBgJHtiYXNlbmFtZShwYXRoKX0tbWFuaWZlc3QuY3N2YCk7XG4gICAgICAgIGNvbnN0IGNzdkhlYWRlciA9IFwicGF0aCxpZCxyZWNlaXB0XFxuXCI7XG4gICAgICAgIGlmIChhd2FpdCBjaGVja1BhdGgobWFuaWZlc3RQYXRoKSkge1xuICAgICAgICAgICAgY29uc3QgcnN0cm0gPSBjcmVhdGVSZWFkU3RyZWFtKG1hbmlmZXN0UGF0aCk7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiBlbXB0eVxuICAgICAgICAgICAgaWYgKChhd2FpdCBwcm9taXNlcy5zdGF0KG1hbmlmZXN0UGF0aCkpLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwcm9taXNlcy53cml0ZUZpbGUobWFuaWZlc3RQYXRoLCBjc3ZIZWFkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmFsaWRhdGUgaGVhZGVyXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXRlUmVhZFN0cmVhbShtYW5pZmVzdFBhdGgpLm9uY2UoXCJkYXRhXCIsIGFzeW5jIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsID0gZC50b1N0cmluZygpLnNwbGl0KFwiXFxuXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYCR7Zmx9XFxuYCAhPT0gY3N2SGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBwcm9taXNlcy53cml0ZUZpbGUobWFuaWZlc3RQYXRoLCBjc3ZIZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlcyhkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgY3N2U3RyZWFtID0gUmVhZGFibGUuZnJvbShyc3RybS5waXBlKHBhcnNlKHsgZGVsaW1pdGVyOiBcIixcIiwgY29sdW1uczogdHJ1ZSB9KSkpO1xuICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCByZWNvcmQgb2YgY3N2U3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQucGF0aCAmJiByZWNvcmQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeVByb2Nlc3NlZC5zZXQocmVjb3JkLnBhdGgsIHJlY29yZC5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpcHRUeHMuc2V0KHJlY29yZC5wYXRoLCBKU09OLnBhcnNlKHJlY29yZC5yZWNlaXB0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgcHJvbWlzZXMud3JpdGVGaWxlKG1hbmlmZXN0UGF0aCwgY3N2SGVhZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxlcyA9IFtdO1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgZiBvZiB0aGlzLndhbGsocGF0aCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbFBhdGggPSByZWxhdGl2ZShwYXRoLCBmKTtcbiAgICAgICAgICAgIGlmICghYWxyZWFkeVByb2Nlc3NlZC5oYXMocmVsUGF0aCkpIHtcbiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKGYpO1xuICAgICAgICAgICAgICAgIHRvdGFsICs9IChhd2FpdCBwcm9taXNlcy5zdGF0KGYpKS5zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxyZWFkeVByb2Nlc3NlZC5kZWxldGUocmVsUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKytpICUgYmF0Y2hTaXplID09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dGdW5jdGlvbihgQ2hlY2tlZCAke2l9IGZpbGVzLi4uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFrZWVwRGVsZXRlZCkge1xuICAgICAgICAgICAgYWxyZWFkeVByb2Nlc3NlZC5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBhc3MgYXMgcGFyYW0gb3RoZXJ3aXNlIGl0IHRoaW5rcyBsb2dGdW5jdGlvbiBjYW4gYmUgdW5kZWZcbiAgICAgICAgY29uc3QgdXBsb2FkTWFuaWZlc3QgPSBhc3luYyAobG9nRnVuY3Rpb24pID0+IHtcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIEpTT05cbiAgICAgICAgICAgIGF3YWl0IGxvZ0Z1bmN0aW9uKFwiR2VuZXJhdGluZyBKU09OIG1hbmlmZXN0Li4uXCIpO1xuICAgICAgICAgICAgY29uc3QganNvbk1hbmlmZXN0UGF0aCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVNYW5pZmVzdEZyb21Dc3YocGF0aCwgYWxyZWFkeVByb2Nlc3NlZCwgaW5kZXhGaWxlKTtcbiAgICAgICAgICAgIC8vIHVwbG9hZCB0aGUgbWFuaWZlc3RcbiAgICAgICAgICAgIGF3YWl0IGxvZ0Z1bmN0aW9uKFwiVXBsb2FkaW5nIEpTT04gbWFuaWZlc3QuLi5cIik7XG4gICAgICAgICAgICBjb25zdCB0YWdzID0gW1xuICAgICAgICAgICAgICAgIHsgbmFtZTogXCJUeXBlXCIsIHZhbHVlOiBcIm1hbmlmZXN0XCIgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IFwiQ29udGVudC1UeXBlXCIsIHZhbHVlOiBcImFwcGxpY2F0aW9uL3guYXJ3ZWF2ZS1tYW5pZmVzdCtqc29uXCIgfSxcbiAgICAgICAgICAgICAgICAuLi4obWFuaWZlc3RUYWdzID8/IFtdKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBjb25zdCBtcmVzID0gYXdhaXQgdGhpcy51cGxvYWREYXRhKGNyZWF0ZVJlYWRTdHJlYW0oanNvbk1hbmlmZXN0UGF0aCksIHsgdGFncyB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHVwbG9hZCBtYW5pZmVzdDogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IGxvZ0Z1bmN0aW9uKFwiRG9uZSFcIik7XG4gICAgICAgICAgICBpZiAobXJlcz8uaWQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwcm9taXNlcy53cml0ZUZpbGUoam9pbihqb2luKHBhdGgsIGAke3NlcH0uLmApLCBgJHtiYXNlbmFtZShwYXRoKX0taWQudHh0YCksIEpTT04uc3RyaW5naWZ5KG1yZXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCB1cGxvYWQgSUQhICR7SlNPTi5zdHJpbmdpZnkobXJlcyl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbXJlcztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogYWRkIGxvZ2ljIHRvIGRldGVjdCBjaGFuZ2VzIChNRDUvb3RoZXIgaGFzaClcbiAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA9PSAwICYmIGFscmVhZHlQcm9jZXNzZWQuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgbG9nRnVuY3Rpb24oXCJObyBpdGVtcyB0byBwcm9jZXNzXCIpO1xuICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSB0eElEIG9mIHRoZSB1cGxvYWRcbiAgICAgICAgICAgIGNvbnN0IGlkcGF0aCA9IGpvaW4oam9pbihwYXRoLCBgJHtzZXB9Li5gKSwgYCR7YmFzZW5hbWUocGF0aCl9LWlkLnR4dGApO1xuICAgICAgICAgICAgaWYgKGF3YWl0IGNoZWNrUGF0aChpZHBhdGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoYXdhaXQgcHJvbWlzZXMucmVhZEZpbGUoaWRwYXRoLCBcInV0Zi04XCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFzc3VtZSBtYW5pZmVzdCB3YXNuJ3QgdXBsb2FkZWRcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB1cGxvYWRNYW5pZmVzdChsb2dGdW5jdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3QgenByaWNlID0gKGF3YWl0IHRoaXMudXRpbHMuZ2V0UHJpY2UodGhpcy5jdXJyZW5jeSwgMCkpLm11bHRpcGxpZWRCeShmaWxlcy5sZW5ndGgpO1xuICAgICAgICAvLyBjb25zdCBwcmljZSA9IChhd2FpdCB0aGlzLnV0aWxzLmdldFByaWNlKHRoaXMuY3VycmVuY3ksIHRvdGFsKSkucGx1cyh6cHJpY2UpLnRvRml4ZWQoMCk7XG4gICAgICAgIGNvbnN0IHByaWNlID0gYXdhaXQgdGhpcy51dGlscy5lc3RpbWF0ZUZvbGRlclByaWNlKHsgZmlsZUNvdW50OiBmaWxlcy5sZW5ndGgsIHRvdGFsQnl0ZXM6IHRvdGFsIH0pO1xuICAgICAgICBpZiAoaW50ZXJhY3RpdmVQcmVmbGlnaHQpIHtcbiAgICAgICAgICAgIGlmICghKGF3YWl0IGNvbmZpcm1hdGlvbihgQXV0aG9yaXplIHVwbG9hZD9cXG5Ub3RhbCBhbW91bnQgb2YgZGF0YTogJHt0b3RhbH0gYnl0ZXMgb3ZlciAke2ZpbGVzLmxlbmd0aH0gZmlsZXMgLSBjb3N0OiAke3ByaWNlfSAke3RoaXMudG9rZW5Db25maWcuYmFzZVswXX0gKCR7dGhpcy51dGlscy5mcm9tQXRvbWljKHByaWNlKS50b0ZpeGVkKCl9ICR7dGhpcy50b2tlbn0pXFxuIFkgLyBOYCkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uZmlybWF0aW9uIGZhaWxlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJpbmdpZmllciA9IHN0cmluZ2lmeSh7XG4gICAgICAgICAgICBoZWFkZXI6IGZhbHNlLFxuICAgICAgICAgICAgY29sdW1uczoge1xuICAgICAgICAgICAgICAgIHBhdGg6IFwicGF0aFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcImlkXCIsXG4gICAgICAgICAgICAgICAgcmVjZWlwdDogXCJyZWNlaXB0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgd3N0cm0gPSBjcmVhdGVXcml0ZVN0cmVhbShtYW5pZmVzdFBhdGgsIHsgZmxhZ3M6IFwiYStcIiB9KTtcbiAgICAgICAgc3RyaW5naWZpZXIucGlwZSh3c3RybSk7XG4gICAgICAgIGNvbnN0IHByb2Nlc3NvciA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YT8ucmVzPy5pZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBkYXRhLnJlcy5zaWduYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZGF0YS5yZXMuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jazogZGF0YS5yZXMuYmxvY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWFkbGluZUhlaWdodDogZGF0YS5yZXMuZGVhZGxpbmVIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWM6IGRhdGEucmVzLnB1YmxpYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogZGF0YS5yZXMuc2lnbmF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBkYXRhLnJlcy50aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JTaWduYXR1cmVzOiBkYXRhLnJlcy52YWxpZGF0b3JTaWduYXR1cmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogZGF0YS5yZXMudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHt9O1xuICAgICAgICAgICAgICAgIHJlY2VpcHRUeHMuc2V0KHJlbGF0aXZlKHBhdGgsIGRhdGEuaXRlbSksIHJlY2VpcHQpO1xuICAgICAgICAgICAgICAgIHN0cmluZ2lmaWVyLndyaXRlKFtyZWxhdGl2ZShwYXRoLCBkYXRhLml0ZW0pLCBkYXRhLnJlcy5pZCwgSlNPTi5zdHJpbmdpZnkocmVjZWlwdCldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHJvY2Vzc2luZ1Jlc3VsdHMgPSBhd2FpdCB0aGlzLmNvbmN1cnJlbnRVcGxvYWRlcihmaWxlcywge1xuICAgICAgICAgICAgY29uY3VycmVuY3k6IGJhdGNoU2l6ZSxcbiAgICAgICAgICAgIHJlc3VsdFByb2Nlc3NvcjogcHJvY2Vzc29yLFxuICAgICAgICAgICAgbG9nRnVuY3Rpb24sXG4gICAgICAgICAgICBpdGVtT3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcm9jZXNzaW5nUmVzdWx0cy5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYXdhaXQgbG9nRnVuY3Rpb24oYCR7cHJvY2Vzc2luZ1Jlc3VsdHMuZXJyb3JzLmxlbmd0aH0gRXJyb3JzIGRldGVjdGVkLCBza2lwcGluZyBtYW5pZmVzdCB1cGxvYWQuLi5gKTtcbiAgICAgICAgICAgIGNvbnN0IGV3c3RybSA9IGNyZWF0ZVdyaXRlU3RyZWFtKGpvaW4oam9pbihwYXRoLCBgJHtzZXB9Li5gKSwgYCR7YmFzZW5hbWUocGF0aCl9LWVycm9ycy50eHRgKSwgeyBmbGFnczogXCJhK1wiIH0pO1xuICAgICAgICAgICAgZXdzdHJtLndyaXRlKGBFcnJvcnMgZnJvbSB1cGxvYWQgYXQgJHtuZXcgRGF0ZSgpLnRvU3RyaW5nKCl9OlxcbmApO1xuICAgICAgICAgICAgcHJvY2Vzc2luZ1Jlc3VsdHMuZXJyb3JzLmZvckVhY2goKGUpID0+IGV3c3RybS53cml0ZShgJHtlPy5zdGFjayA/PyBKU09OLnN0cmluZ2lmeShlKX1cXG5gKSk7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzKSA9PiBld3N0cm0uY2xvc2UocmVzKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJvY2Vzc2luZ1Jlc3VsdHMuZXJyb3JzLmxlbmd0aH0gRXJyb3JzIGRldGVjdGVkIC0gY2hlY2sgJHtiYXNlbmFtZShwYXRoKX0tZXJyb3JzLnR4dCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBsb2dGdW5jdGlvbihgRmluaXNoZWQgcHJvY2Vzc2luZyAke2ZpbGVzLmxlbmd0aH0gSXRlbXNgKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHIpID0+IHdzdHJtLmNsb3NlKHIpKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHVwbG9hZE1hbmlmZXN0KGxvZ0Z1bmN0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogcHJvY2Vzc2VzIGFuIGl0ZW0gdG8gY29udmVydCBpdCBpbnRvIGEgRGF0YUl0ZW0sIGFuZCB0aGVuIHVwbG9hZHMgaXQuXG4gICAgICogQHBhcmFtIGl0ZW0gY2FuIGJlIGEgc3RyaW5nIHZhbHVlLCBhIHBhdGggdG8gYSBmaWxlLCBhIEJ1ZmZlciBvZiBkYXRhIG9yIGEgRGF0YUl0ZW1cbiAgICAgKiBAcmV0dXJucyBBIGRhdGFJdGVtXG4gICAgICovXG4gICAgYXN5bmMgcHJvY2Vzc0l0ZW0oaXRlbSwgb3B0cykge1xuICAgICAgICBpZiAodGhpcy5hcmJ1bmRsZXMuRGF0YUl0ZW0uaXNEYXRhSXRlbShpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkVHJhbnNhY3Rpb24oaXRlbSwgeyAuLi5vcHRzPy51cGxvYWQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRhZ3M7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKGF3YWl0IGNoZWNrUGF0aChpdGVtKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbWVUeXBlID0gbWltZS5jb250ZW50VHlwZShtaW1lLmxvb2t1cChpdGVtKSB8fCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKTtcbiAgICAgICAgICAgICAgICB0YWdzID0gW3sgbmFtZTogXCJDb250ZW50LVR5cGVcIiwgdmFsdWU6IHRoaXMuY29udGVudFR5cGVPdmVycmlkZSA/PyBtaW1lVHlwZSB9XTtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm5WYWwgPSBpdGVtO1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBjcmVhdGVSZWFkU3RyZWFtKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IEJ1ZmZlci5mcm9tKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRUeXBlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFncyA9IFt7IG5hbWU6IFwiQ29udGVudC1UeXBlXCIsIHZhbHVlOiB0aGlzLmNvbnRlbnRUeXBlT3ZlcnJpZGUgfV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnVwbG9hZERhdGEoaXRlbSwgeyAuLi5vcHRzLCB0YWdzOiBbLi4udGFncywgLi4uKG9wdHM/LnRhZ3MgPz8gW10pXSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RyZWFtLWJhc2VkIENTViBwYXJzZXIgYW5kIEpTT04gYXNzZW1ibGVyXG4gICAgICogQHBhcmFtIHBhdGggYmFzZSBwYXRoIG9mIHRoZSB1cGxvYWRcbiAgICAgKiBAcGFyYW0gaW5kZXhGaWxlIG9wdGlvbmFsIHBhdGggdG8gYW4gaW5kZXggZmlsZVxuICAgICAqIEByZXR1cm5zIHRoZSBwYXRoIHRvIHRoZSBnZW5lcmF0ZWQgbWFuaWZlc3RcbiAgICAgKi9cbiAgICBhc3luYyBnZW5lcmF0ZU1hbmlmZXN0RnJvbUNzdihwYXRoLCBub3dSZW1vdmVkLCBpbmRleEZpbGUpIHtcbiAgICAgICAgY29uc3QgY3N2c3RybSA9IHBhcnNlKHsgZGVsaW1pdGVyOiBcIixcIiwgY29sdW1uczogdHJ1ZSB9KTtcbiAgICAgICAgY29uc3QgY3N2UGF0aCA9IGpvaW4oam9pbihwYXRoLCBgJHtzZXB9Li5gKSwgYCR7YmFzZW5hbWUocGF0aCl9LW1hbmlmZXN0LmNzdmApO1xuICAgICAgICBjb25zdCBtYW5pZmVzdFBhdGggPSBqb2luKGpvaW4ocGF0aCwgYCR7c2VwfS4uYCksIGAke2Jhc2VuYW1lKHBhdGgpfS1tYW5pZmVzdC5qc29uYCk7XG4gICAgICAgIGNvbnN0IHdzdHJtID0gY3JlYXRlV3JpdGVTdHJlYW0obWFuaWZlc3RQYXRoLCB7IGZsYWdzOiBcIncrXCIgfSk7XG4gICAgICAgIGNyZWF0ZVJlYWRTdHJlYW0oY3N2UGF0aCkucGlwZShjc3ZzdHJtKTsgLy8gcGlwZSBjc3ZcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcXVvdGVzICovXG4gICAgICAgIC8vIFwiaGVhZGVyXCJcbiAgICAgICAgd3N0cm0ud3JpdGUoYHtcXG5cIm1hbmlmZXN0XCI6IFwiYXJ3ZWF2ZS9wYXRoc1wiLFxcblwidmVyc2lvblwiOiBcIjAuMS4wXCIsXFxuXCJwYXRoc1wiOiB7XFxuYCk7XG4gICAgICAgIGNvbnN0IGNzdnMgPSBSZWFkYWJsZS5mcm9tKGNzdnN0cm0pO1xuICAgICAgICBsZXQgZmlyc3RWYWx1ZSA9IHRydWU7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgZCBvZiBjc3ZzKSB7XG4gICAgICAgICAgICBpZiAobm93UmVtb3ZlZD8uaGFzKGQucGF0aCkpIHtcbiAgICAgICAgICAgICAgICBub3dSZW1vdmVkLmRlbGV0ZShkLnBhdGgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gZmlyc3RWYWx1ZSA/IFwiXCIgOiBcIixcXG5cIjtcbiAgICAgICAgICAgIHdzdHJtLndyaXRlKGAke3ByZWZpeH1cIiR7ZC5wYXRoLnJlcGxhY2VBbGwoXCJcXFxcXCIsIFwiL1wiKX1cIjp7XCJpZFwiOlwiJHtkLmlkfVwifWApO1xuICAgICAgICAgICAgZmlyc3RWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFwidHJhaWxlclwiXG4gICAgICAgIHdzdHJtLndyaXRlKGBcXG59YCk7XG4gICAgICAgIC8vIGFkZCBpbmRleFxuICAgICAgICBpZiAoaW5kZXhGaWxlKSB7XG4gICAgICAgICAgICB3c3RybS53cml0ZShgLFxcblwiaW5kZXhcIjp7XCJwYXRoXCI6XCIke2luZGV4RmlsZS5yZXBsYWNlQWxsKFwiXFxcXFwiLCBcIi9cIil9XCJ9YCk7XG4gICAgICAgIH1cbiAgICAgICAgd3N0cm0ud3JpdGUoYFxcbn1gKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHIpID0+IHdzdHJtLmNsb3NlKHIpKTtcbiAgICAgICAgcmV0dXJuIG1hbmlmZXN0UGF0aDtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBjb25maXJtYXRpb24obWVzc2FnZSkge1xuICAgIGNvbnN0IGFuc3dlcnMgPSBhd2FpdCBpbnF1aXJlci5wcm9tcHQoW3sgdHlwZTogXCJpbnB1dFwiLCBuYW1lOiBcImNvbmZpcm1hdGlvblwiLCBtZXNzYWdlIH1dKTtcbiAgICByZXR1cm4gYW5zd2Vycy5jb25maXJtYXRpb24udG9Mb3dlckNhc2UoKSA9PSBcInlcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVwbG9hZC5qcy5tYXAiXSwibmFtZXMiOlsicHJvbWlzZXMiLCJjcmVhdGVSZWFkU3RyZWFtIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJVcGxvYWRlciIsIm1pbWUiLCJpbnF1aXJlciIsIlJlYWRhYmxlIiwiYmFzZW5hbWUiLCJqb2luIiwicmVsYXRpdmUiLCJyZXNvbHZlIiwic2VwIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJjaGVja1BhdGgiLCJwYXRoIiwic3RhdCIsInRoZW4iLCJfIiwiY2F0Y2giLCJOb2RlVXBsb2FkZXIiLCJjb25zdHJ1Y3RvciIsImFwaSIsInV0aWxzIiwidG9rZW4iLCJ0b2tlbkNvbmZpZyIsImlyeXNUeCIsInVwbG9hZEZpbGUiLCJvcHRzIiwiRXJyb3IiLCJoYXNDb250ZW50VHlwZVRhZyIsInRhZ3MiLCJzb21lIiwidCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsIm1pbWVUeXBlIiwiY29udGVudFR5cGUiLCJsb29rdXAiLCJ2YWx1ZSIsImNvbnRlbnRUeXBlT3ZlcnJpZGUiLCJkYXRhIiwidXBsb2FkRGF0YSIsIndhbGsiLCJkaXIiLCJkIiwib3BlbmRpciIsImVudHJ5IiwiaXNEaXJlY3RvcnkiLCJpc0ZpbGUiLCJ1cGxvYWRGb2xkZXIiLCJiYXRjaFNpemUiLCJrZWVwRGVsZXRlZCIsImluZGV4RmlsZSIsImludGVyYWN0aXZlUHJlZmxpZ2h0IiwibG9nRnVuY3Rpb24iLCJtYW5pZmVzdFRhZ3MiLCJpdGVtT3B0aW9ucyIsImFscmVhZHlQcm9jZXNzZWQiLCJNYXAiLCJyZWNlaXB0VHhzIiwibG9nIiwiY29uc29sZSIsIm1hbmlmZXN0UGF0aCIsImNzdkhlYWRlciIsInJzdHJtIiwic2l6ZSIsIndyaXRlRmlsZSIsIlByb21pc2UiLCJyZXMiLCJvbmNlIiwiZmwiLCJ0b1N0cmluZyIsInNwbGl0IiwiY3N2U3RyZWFtIiwiZnJvbSIsInBpcGUiLCJkZWxpbWl0ZXIiLCJjb2x1bW5zIiwicmVjb3JkIiwiaWQiLCJzZXQiLCJKU09OIiwicmVjZWlwdCIsImZpbGVzIiwidG90YWwiLCJpIiwiZiIsInJlbFBhdGgiLCJoYXMiLCJwdXNoIiwiZGVsZXRlIiwiY2xlYXIiLCJ1cGxvYWRNYW5pZmVzdCIsImpzb25NYW5pZmVzdFBhdGgiLCJnZW5lcmF0ZU1hbmlmZXN0RnJvbUNzdiIsIm1yZXMiLCJlIiwibWVzc2FnZSIsImxlbmd0aCIsImlkcGF0aCIsInJlYWRGaWxlIiwicHJpY2UiLCJlc3RpbWF0ZUZvbGRlclByaWNlIiwiZmlsZUNvdW50IiwidG90YWxCeXRlcyIsImNvbmZpcm1hdGlvbiIsImJhc2UiLCJmcm9tQXRvbWljIiwidG9GaXhlZCIsInN0cmluZ2lmaWVyIiwiaGVhZGVyIiwid3N0cm0iLCJmbGFncyIsInByb2Nlc3NvciIsInNpZ25hdHVyZSIsImJsb2NrIiwiZGVhZGxpbmVIZWlnaHQiLCJwdWJsaWMiLCJ0aW1lc3RhbXAiLCJ2YWxpZGF0b3JTaWduYXR1cmVzIiwidmVyc2lvbiIsIml0ZW0iLCJ3cml0ZSIsInByb2Nlc3NpbmdSZXN1bHRzIiwiY29uY3VycmVudFVwbG9hZGVyIiwiY29uY3VycmVuY3kiLCJyZXN1bHRQcm9jZXNzb3IiLCJlcnJvcnMiLCJld3N0cm0iLCJEYXRlIiwiZm9yRWFjaCIsInN0YWNrIiwiY2xvc2UiLCJyIiwicHJvY2Vzc0l0ZW0iLCJhcmJ1bmRsZXMiLCJEYXRhSXRlbSIsImlzRGF0YUl0ZW0iLCJ1cGxvYWRUcmFuc2FjdGlvbiIsInVwbG9hZCIsIkJ1ZmZlciIsIm5vd1JlbW92ZWQiLCJjc3ZzdHJtIiwiY3N2UGF0aCIsImNzdnMiLCJmaXJzdFZhbHVlIiwicHJlZml4IiwicmVwbGFjZUFsbCIsImFuc3dlcnMiLCJwcm9tcHQiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/upload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arweave: () => (/* reexport safe */ arbundles_node__WEBPACK_IMPORTED_MODULE_0__.Arweave),\n/* harmony export */   DataItem: () => (/* reexport safe */ arbundles_node__WEBPACK_IMPORTED_MODULE_0__.DataItem),\n/* harmony export */   bundleAndSignData: () => (/* reexport safe */ arbundles_node__WEBPACK_IMPORTED_MODULE_0__.bundleAndSignData),\n/* harmony export */   createData: () => (/* reexport safe */ arbundles_node__WEBPACK_IMPORTED_MODULE_0__.createData),\n/* harmony export */   deepHash: () => (/* reexport safe */ arbundles_node__WEBPACK_IMPORTED_MODULE_0__.deepHash),\n/* harmony export */   getCryptoDriver: () => (/* reexport safe */ arbundles_node__WEBPACK_IMPORTED_MODULE_0__.getCryptoDriver),\n/* harmony export */   stringToBuffer: () => (/* reexport safe */ arbundles_node__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer)\n/* harmony export */ });\n/* harmony import */ var arbundles_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! arbundles/node */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vbm9kZS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUE2SDtBQUN0QixDQUN2RyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK3Nka0AwLjAuMl9hcndlYXZlQDEuMTUuN19idWZmZXJ1dGlsQDQuMC45X2RlYnVnQDQuNC4wX3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwL25vZGVfbW9kdWxlcy9AaXJ5cy9zZGsvYnVpbGQvZXNtL25vZGUvdXRpbHMuanM/NWQ0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVEYXRhLCBEYXRhSXRlbSwgZGVlcEhhc2gsIHN0cmluZ1RvQnVmZmVyLCBnZXRDcnlwdG9Ecml2ZXIsIGJ1bmRsZUFuZFNpZ25EYXRhLCBBcndlYXZlIH0gZnJvbSBcImFyYnVuZGxlcy9ub2RlXCI7XG5leHBvcnQgeyBjcmVhdGVEYXRhLCBEYXRhSXRlbSwgZGVlcEhhc2gsIHN0cmluZ1RvQnVmZmVyLCBnZXRDcnlwdG9Ecml2ZXIsIGJ1bmRsZUFuZFNpZ25EYXRhLCBBcndlYXZlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlRGF0YSIsIkRhdGFJdGVtIiwiZGVlcEhhc2giLCJzdHJpbmdUb0J1ZmZlciIsImdldENyeXB0b0RyaXZlciIsImJ1bmRsZUFuZFNpZ25EYXRhIiwiQXJ3ZWF2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/node/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/irys.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/irys.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebIrys: () => (/* binding */ WebIrys),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_hack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/hack.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/hack.js\");\n/* harmony import */ var _common_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/api.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/api.js\");\n/* harmony import */ var _common_fund_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/fund.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/fund.js\");\n/* harmony import */ var _common_irys_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/irys.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/irys.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n/* harmony import */ var _tokens_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tokens/index.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/index.js\");\n/* harmony import */ var _common_provenance_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/provenance.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/provenance.js\");\n/* harmony import */ var _common_transactions_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/transactions.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/transactions.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/utils.js\");\n/* harmony import */ var _upload_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./upload.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/upload.js\");\n\n\n\n\n\n\n\n\n\n\nclass WebIrys extends _common_irys_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    constructor({ url, token, wallet, config }){\n        switch(url){\n            case undefined:\n            case \"node1\":\n                url = \"https://node1.irys.xyz\";\n                break;\n            case \"node2\":\n                url = \"https://node2.irys.xyz\";\n                break;\n            case \"devnet\":\n                url = \"https://devnet.irys.xyz\";\n                break;\n        }\n        const parsed = new URL(url);\n        // @ts-expect-error types\n        super({\n            url: parsed,\n            arbundles: _utils_js__WEBPACK_IMPORTED_MODULE_8__\n        });\n        this.api = new _common_api_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            url: parsed,\n            timeout: config?.timeout ?? 100000,\n            headers: config?.headers\n        });\n        this.tokenConfig = (0,_tokens_index_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({\n            irys: this,\n            token: token.toLowerCase(),\n            wallet: wallet?.provider,\n            providerUrl: config?.providerUrl ?? wallet?.rpcUrl,\n            contractAddress: config?.contractAddress,\n            providerName: wallet?.name\n        });\n        this.token = this.tokenConfig.name;\n        if (parsed.host === \"devnet.irys.network\" && !(config?.providerUrl ?? (wallet?.rpcUrl || this.tokenConfig.inheritsRPC))) throw new Error(`Using ${parsed.host} requires a dev/testnet RPC to be configured! see https://docs.irys.network/sdk/using-devnet`);\n        this.utils = new _common_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.api, this.token, this.tokenConfig);\n        this.uploader = new _upload_js__WEBPACK_IMPORTED_MODULE_9__.WebUploader(this);\n        this.funder = new _common_fund_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.utils);\n        this.uploader = new _upload_js__WEBPACK_IMPORTED_MODULE_9__.WebUploader(this);\n        this.provenance = new _common_provenance_js__WEBPACK_IMPORTED_MODULE_6__.Provenance(this);\n        this.transactions = new _common_transactions_js__WEBPACK_IMPORTED_MODULE_7__.Transaction(this);\n        this.address = \"Please run `await Irys.ready()`\";\n        this.uploadFolder = this.uploader.uploadFolder.bind(this.uploader);\n        this.uploadFile = this.uploader.uploadFile.bind(this.uploader);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebIrys); //# sourceMappingURL=irys.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vd2ViL2lyeXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQTJCO0FBQ1E7QUFDRTtBQUNBO0FBQ0U7QUFDUTtBQUNNO0FBQ0c7QUFDaEI7QUFDRTtBQUNuQyxNQUFNUyxnQkFBZ0JQLHVEQUFJQTtJQUs3QlEsWUFBWSxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUcsQ0FBRTtRQUN6QyxPQUFRSDtZQUNKLEtBQUtJO1lBQ0wsS0FBSztnQkFDREosTUFBTTtnQkFDTjtZQUNKLEtBQUs7Z0JBQ0RBLE1BQU07Z0JBQ047WUFDSixLQUFLO2dCQUNEQSxNQUFNO2dCQUNOO1FBQ1I7UUFDQSxNQUFNSyxTQUFTLElBQUlDLElBQUlOO1FBQ3ZCLHlCQUF5QjtRQUN6QixLQUFLLENBQUM7WUFBRUEsS0FBS0s7WUFBUVQsU0FBU0Esd0NBQUFBO1FBQUM7UUFDL0IsSUFBSSxDQUFDVyxHQUFHLEdBQUcsSUFBSWxCLHNEQUFHQSxDQUFDO1lBQ2ZXLEtBQUtLO1lBQ0xHLFNBQVNMLFFBQVFLLFdBQVc7WUFDNUJDLFNBQVNOLFFBQVFNO1FBQ3JCO1FBQ0EsSUFBSSxDQUFDQyxXQUFXLEdBQUdqQiw0REFBY0EsQ0FBQztZQUM5QmtCLE1BQU0sSUFBSTtZQUNWVixPQUFPQSxNQUFNVyxXQUFXO1lBQ3hCVixRQUFRQSxRQUFRVztZQUNoQkMsYUFBYVgsUUFBUVcsZUFBZVosUUFBUWE7WUFDNUNDLGlCQUFpQmIsUUFBUWE7WUFDekJDLGNBQWNmLFFBQVFnQjtRQUMxQjtRQUNBLElBQUksQ0FBQ2pCLEtBQUssR0FBRyxJQUFJLENBQUNTLFdBQVcsQ0FBQ1EsSUFBSTtRQUNsQyxJQUFJYixPQUFPYyxJQUFJLEtBQUsseUJBQXlCLENBQUVoQixDQUFBQSxRQUFRVyxlQUFnQlosQ0FBQUEsUUFBUWEsVUFBVSxJQUFJLENBQUNMLFdBQVcsQ0FBQ1UsV0FBVyxJQUNqSCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxNQUFNLEVBQUVoQixPQUFPYyxJQUFJLENBQUMsNEZBQTRGLENBQUM7UUFDdEksSUFBSSxDQUFDRyxLQUFLLEdBQUcsSUFBSTlCLHdEQUFLQSxDQUFDLElBQUksQ0FBQ2UsR0FBRyxFQUFFLElBQUksQ0FBQ04sS0FBSyxFQUFFLElBQUksQ0FBQ1MsV0FBVztRQUM3RCxJQUFJLENBQUNhLFFBQVEsR0FBRyxJQUFJMUIsbURBQVdBLENBQUMsSUFBSTtRQUNwQyxJQUFJLENBQUMyQixNQUFNLEdBQUcsSUFBSWxDLHVEQUFJQSxDQUFDLElBQUksQ0FBQ2dDLEtBQUs7UUFDakMsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSTFCLG1EQUFXQSxDQUFDLElBQUk7UUFDcEMsSUFBSSxDQUFDNEIsVUFBVSxHQUFHLElBQUkvQiw2REFBVUEsQ0FBQyxJQUFJO1FBQ3JDLElBQUksQ0FBQ2dDLFlBQVksR0FBRyxJQUFJL0IsZ0VBQVdBLENBQUMsSUFBSTtRQUN4QyxJQUFJLENBQUNnQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUNMLFFBQVEsQ0FBQ0ssWUFBWSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDTixRQUFRO1FBQ2pFLElBQUksQ0FBQ08sVUFBVSxHQUFHLElBQUksQ0FBQ1AsUUFBUSxDQUFDTyxVQUFVLENBQUNELElBQUksQ0FBQyxJQUFJLENBQUNOLFFBQVE7SUFDakU7QUFDSjtBQUNBLGlFQUFlekIsT0FBT0EsRUFBQyxDQUN2QixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK3Nka0AwLjAuMl9hcndlYXZlQDEuMTUuN19idWZmZXJ1dGlsQDQuMC45X2RlYnVnQDQuNC4wX3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwL25vZGVfbW9kdWxlcy9AaXJ5cy9zZGsvYnVpbGQvZXNtL3dlYi9pcnlzLmpzPzhiZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY29tbW9uL2hhY2suanNcIjtcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbW1vbi9hcGkuanNcIjtcbmltcG9ydCBGdW5kIGZyb20gXCIuLi9jb21tb24vZnVuZC5qc1wiO1xuaW1wb3J0IElyeXMgZnJvbSBcIi4uL2NvbW1vbi9pcnlzLmpzXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL2NvbW1vbi91dGlscy5qc1wiO1xuaW1wb3J0IGdldFRva2VuQ29uZmlnIGZyb20gXCIuL3Rva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgUHJvdmVuYW5jZSB9IGZyb20gXCIuLi9jb21tb24vcHJvdmVuYW5jZS5qc1wiO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tIFwiLi4vY29tbW9uL3RyYW5zYWN0aW9ucy5qc1wiO1xuaW1wb3J0ICogYXMgYXJidW5kbGVzIGZyb20gXCIuL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBXZWJVcGxvYWRlciB9IGZyb20gXCIuL3VwbG9hZC5qc1wiO1xuZXhwb3J0IGNsYXNzIFdlYklyeXMgZXh0ZW5kcyBJcnlzIHtcbiAgICB0b2tlbkNvbmZpZztcbiAgICB1cGxvYWRlcjtcbiAgICB1cGxvYWRGb2xkZXI7XG4gICAgdXBsb2FkRmlsZTtcbiAgICBjb25zdHJ1Y3Rvcih7IHVybCwgdG9rZW4sIHdhbGxldCwgY29uZmlnLCB9KSB7XG4gICAgICAgIHN3aXRjaCAodXJsKSB7XG4gICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIGNhc2UgXCJub2RlMVwiOlxuICAgICAgICAgICAgICAgIHVybCA9IFwiaHR0cHM6Ly9ub2RlMS5pcnlzLnh5elwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm5vZGUyXCI6XG4gICAgICAgICAgICAgICAgdXJsID0gXCJodHRwczovL25vZGUyLmlyeXMueHl6XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGV2bmV0XCI6XG4gICAgICAgICAgICAgICAgdXJsID0gXCJodHRwczovL2Rldm5ldC5pcnlzLnh5elwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBVUkwodXJsKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0eXBlc1xuICAgICAgICBzdXBlcih7IHVybDogcGFyc2VkLCBhcmJ1bmRsZXMgfSk7XG4gICAgICAgIHRoaXMuYXBpID0gbmV3IEFwaSh7XG4gICAgICAgICAgICB1cmw6IHBhcnNlZCxcbiAgICAgICAgICAgIHRpbWVvdXQ6IGNvbmZpZz8udGltZW91dCA/PyAxMDAwMDAsXG4gICAgICAgICAgICBoZWFkZXJzOiBjb25maWc/LmhlYWRlcnMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRva2VuQ29uZmlnID0gZ2V0VG9rZW5Db25maWcoe1xuICAgICAgICAgICAgaXJ5czogdGhpcyxcbiAgICAgICAgICAgIHRva2VuOiB0b2tlbi50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgd2FsbGV0OiB3YWxsZXQ/LnByb3ZpZGVyLFxuICAgICAgICAgICAgcHJvdmlkZXJVcmw6IGNvbmZpZz8ucHJvdmlkZXJVcmwgPz8gd2FsbGV0Py5ycGNVcmwsXG4gICAgICAgICAgICBjb250cmFjdEFkZHJlc3M6IGNvbmZpZz8uY29udHJhY3RBZGRyZXNzLFxuICAgICAgICAgICAgcHJvdmlkZXJOYW1lOiB3YWxsZXQ/Lm5hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRva2VuID0gdGhpcy50b2tlbkNvbmZpZy5uYW1lO1xuICAgICAgICBpZiAocGFyc2VkLmhvc3QgPT09IFwiZGV2bmV0LmlyeXMubmV0d29ya1wiICYmICEoY29uZmlnPy5wcm92aWRlclVybCA/PyAod2FsbGV0Py5ycGNVcmwgfHwgdGhpcy50b2tlbkNvbmZpZy5pbmhlcml0c1JQQykpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVc2luZyAke3BhcnNlZC5ob3N0fSByZXF1aXJlcyBhIGRldi90ZXN0bmV0IFJQQyB0byBiZSBjb25maWd1cmVkISBzZWUgaHR0cHM6Ly9kb2NzLmlyeXMubmV0d29yay9zZGsvdXNpbmctZGV2bmV0YCk7XG4gICAgICAgIHRoaXMudXRpbHMgPSBuZXcgVXRpbHModGhpcy5hcGksIHRoaXMudG9rZW4sIHRoaXMudG9rZW5Db25maWcpO1xuICAgICAgICB0aGlzLnVwbG9hZGVyID0gbmV3IFdlYlVwbG9hZGVyKHRoaXMpO1xuICAgICAgICB0aGlzLmZ1bmRlciA9IG5ldyBGdW5kKHRoaXMudXRpbHMpO1xuICAgICAgICB0aGlzLnVwbG9hZGVyID0gbmV3IFdlYlVwbG9hZGVyKHRoaXMpO1xuICAgICAgICB0aGlzLnByb3ZlbmFuY2UgPSBuZXcgUHJvdmVuYW5jZSh0aGlzKTtcbiAgICAgICAgdGhpcy50cmFuc2FjdGlvbnMgPSBuZXcgVHJhbnNhY3Rpb24odGhpcyk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IFwiUGxlYXNlIHJ1biBgYXdhaXQgSXJ5cy5yZWFkeSgpYFwiO1xuICAgICAgICB0aGlzLnVwbG9hZEZvbGRlciA9IHRoaXMudXBsb2FkZXIudXBsb2FkRm9sZGVyLmJpbmQodGhpcy51cGxvYWRlcik7XG4gICAgICAgIHRoaXMudXBsb2FkRmlsZSA9IHRoaXMudXBsb2FkZXIudXBsb2FkRmlsZS5iaW5kKHRoaXMudXBsb2FkZXIpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFdlYklyeXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcnlzLmpzLm1hcCJdLCJuYW1lcyI6WyJBcGkiLCJGdW5kIiwiSXJ5cyIsIlV0aWxzIiwiZ2V0VG9rZW5Db25maWciLCJQcm92ZW5hbmNlIiwiVHJhbnNhY3Rpb24iLCJhcmJ1bmRsZXMiLCJXZWJVcGxvYWRlciIsIldlYklyeXMiLCJjb25zdHJ1Y3RvciIsInVybCIsInRva2VuIiwid2FsbGV0IiwiY29uZmlnIiwidW5kZWZpbmVkIiwicGFyc2VkIiwiVVJMIiwiYXBpIiwidGltZW91dCIsImhlYWRlcnMiLCJ0b2tlbkNvbmZpZyIsImlyeXMiLCJ0b0xvd2VyQ2FzZSIsInByb3ZpZGVyIiwicHJvdmlkZXJVcmwiLCJycGNVcmwiLCJjb250cmFjdEFkZHJlc3MiLCJwcm92aWRlck5hbWUiLCJuYW1lIiwiaG9zdCIsImluaGVyaXRzUlBDIiwiRXJyb3IiLCJ1dGlscyIsInVwbG9hZGVyIiwiZnVuZGVyIiwicHJvdmVuYW5jZSIsInRyYW5zYWN0aW9ucyIsImFkZHJlc3MiLCJ1cGxvYWRGb2xkZXIiLCJiaW5kIiwidXBsb2FkRmlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/irys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/providers/ethereum/ethersv5.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/providers/ethereum/ethersv5.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumEthersV5: () => (/* binding */ EthereumEthersV5)\n/* harmony export */ });\n/* harmony import */ var _tokens_ethereum_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tokens/ethereum.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/ethereum.js\");\n\nclass EthereumEthersV5 extends _tokens_ethereum_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n} //# sourceMappingURL=ethersv5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vd2ViL3Byb3ZpZGVycy9ldGhlcmV1bS9ldGhlcnN2NS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUMvQyxNQUFNQyx5QkFBeUJELDJEQUFjQTtBQUNwRCxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vd2ViL3Byb3ZpZGVycy9ldGhlcmV1bS9ldGhlcnN2NS5qcz8yNWI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdGhlcmV1bUNvbmZpZyBmcm9tIFwiLi4vLi4vdG9rZW5zL2V0aGVyZXVtLmpzXCI7XG5leHBvcnQgY2xhc3MgRXRoZXJldW1FdGhlcnNWNSBleHRlbmRzIEV0aGVyZXVtQ29uZmlnIHtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV0aGVyc3Y1LmpzLm1hcCJdLCJuYW1lcyI6WyJFdGhlcmV1bUNvbmZpZyIsIkV0aGVyZXVtRXRoZXJzVjUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/providers/ethereum/ethersv5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/providers/ethereum/ethersv6.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/providers/ethereum/ethersv6.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumEthersV6: () => (/* binding */ EthereumEthersV6)\n/* harmony export */ });\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _tokens_ethereum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tokens/ethereum.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/ethereum.js\");\n\n\nclass EthereumEthersV6 extends _tokens_ethereum_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    async createTx(amount, to, _fee) {\n        const signer = this.w3signer;\n        const tx = {\n            to,\n            from: this.address,\n            value: amount.toString(),\n            gasLimit: BigInt(0)\n        };\n        const estimatedGas = await this.provider.estimateGas(tx);\n        tx.gasLimit = estimatedGas;\n        const txr = await signer.populateTransaction(tx);\n        return {\n            tx: txr,\n            txId: undefined\n        };\n    }\n    async getTx(txId) {\n        const provider = this.provider;\n        const response = await provider.getTransaction(txId);\n        if (!response) throw new Error(\"Tx doesn't exist\");\n        if (!response.to) throw new Error(`Unable to resolve transactions ${txId} receiver`);\n        return {\n            from: response.from,\n            to: response.to,\n            blockHeight: response.blockNumber ? new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.blockNumber) : undefined,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.value.toString()),\n            pending: response.blockNumber ? false : true,\n            confirmed: await response.confirmations() >= this.minConfirm\n        };\n    }\n    async ready() {\n        const provider = this.wallet;\n        this.provider = provider;\n        const signer = await provider.getSigner();\n        signer._signTypedData = async (domain, types, value)=>signer.signTypedData(domain, types, value);\n        // @ts-expect-error fix\n        provider.getSigner = ()=>signer;\n        // @ts-expect-error fix\n        this.wallet = provider;\n        await super.ready();\n    }\n} //# sourceMappingURL=ethersv6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vd2ViL3Byb3ZpZGVycy9ldGhlcmV1bS9ldGhlcnN2Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUM7QUFDaUI7QUFDL0MsTUFBTUUseUJBQXlCRCwyREFBY0E7SUFDaEQsTUFBTUUsU0FBU0MsTUFBTSxFQUFFQyxFQUFFLEVBQUVDLElBQUksRUFBRTtRQUM3QixNQUFNQyxTQUFTLElBQUksQ0FBQ0MsUUFBUTtRQUM1QixNQUFNQyxLQUFLO1lBQUVKO1lBQUlLLE1BQU0sSUFBSSxDQUFDQyxPQUFPO1lBQUVDLE9BQU9SLE9BQU9TLFFBQVE7WUFBSUMsVUFBVUMsT0FBTztRQUFHO1FBQ25GLE1BQU1DLGVBQWUsTUFBTSxJQUFJLENBQUNDLFFBQVEsQ0FBQ0MsV0FBVyxDQUFDVDtRQUNyREEsR0FBR0ssUUFBUSxHQUFHRTtRQUNkLE1BQU1HLE1BQU0sTUFBTVosT0FBT2EsbUJBQW1CLENBQUNYO1FBQzdDLE9BQU87WUFBRUEsSUFBSVU7WUFBS0UsTUFBTUM7UUFBVTtJQUN0QztJQUNBLE1BQU1DLE1BQU1GLElBQUksRUFBRTtRQUNkLE1BQU1KLFdBQVcsSUFBSSxDQUFDQSxRQUFRO1FBQzlCLE1BQU1PLFdBQVcsTUFBTVAsU0FBU1EsY0FBYyxDQUFDSjtRQUMvQyxJQUFJLENBQUNHLFVBQ0QsTUFBTSxJQUFJRSxNQUFNO1FBQ3BCLElBQUksQ0FBQ0YsU0FBU25CLEVBQUUsRUFDWixNQUFNLElBQUlxQixNQUFNLENBQUMsK0JBQStCLEVBQUVMLEtBQUssU0FBUyxDQUFDO1FBQ3JFLE9BQU87WUFDSFgsTUFBTWMsU0FBU2QsSUFBSTtZQUNuQkwsSUFBSW1CLFNBQVNuQixFQUFFO1lBQ2ZzQixhQUFhSCxTQUFTSSxXQUFXLEdBQUcsSUFBSTVCLG9EQUFTQSxDQUFDd0IsU0FBU0ksV0FBVyxJQUFJTjtZQUMxRWxCLFFBQVEsSUFBSUosb0RBQVNBLENBQUN3QixTQUFTWixLQUFLLENBQUNDLFFBQVE7WUFDN0NnQixTQUFTTCxTQUFTSSxXQUFXLEdBQUcsUUFBUTtZQUN4Q0UsV0FBVyxNQUFPTixTQUFTTyxhQUFhLE1BQU8sSUFBSSxDQUFDQyxVQUFVO1FBQ2xFO0lBQ0o7SUFDQSxNQUFNQyxRQUFRO1FBQ1YsTUFBTWhCLFdBQVcsSUFBSSxDQUFDaUIsTUFBTTtRQUM1QixJQUFJLENBQUNqQixRQUFRLEdBQUdBO1FBQ2hCLE1BQU1WLFNBQVMsTUFBTVUsU0FBU2tCLFNBQVM7UUFDdkM1QixPQUFPNkIsY0FBYyxHQUFHLE9BQU9DLFFBQVFDLE9BQU8xQixRQUFVTCxPQUFPZ0MsYUFBYSxDQUFDRixRQUFRQyxPQUFPMUI7UUFDNUYsdUJBQXVCO1FBQ3ZCSyxTQUFTa0IsU0FBUyxHQUFHLElBQU01QjtRQUMzQix1QkFBdUI7UUFDdkIsSUFBSSxDQUFDMkIsTUFBTSxHQUFHakI7UUFDZCxNQUFNLEtBQUssQ0FBQ2dCO0lBQ2hCO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK3Nka0AwLjAuMl9hcndlYXZlQDEuMTUuN19idWZmZXJ1dGlsQDQuMC45X2RlYnVnQDQuNC4wX3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwL25vZGVfbW9kdWxlcy9AaXJ5cy9zZGsvYnVpbGQvZXNtL3dlYi9wcm92aWRlcnMvZXRoZXJldW0vZXRoZXJzdjYuanM/OWE3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmlnTnVtYmVyIGZyb20gXCJiaWdudW1iZXIuanNcIjtcbmltcG9ydCBFdGhlcmV1bUNvbmZpZyBmcm9tIFwiLi4vLi4vdG9rZW5zL2V0aGVyZXVtLmpzXCI7XG5leHBvcnQgY2xhc3MgRXRoZXJldW1FdGhlcnNWNiBleHRlbmRzIEV0aGVyZXVtQ29uZmlnIHtcbiAgICBhc3luYyBjcmVhdGVUeChhbW91bnQsIHRvLCBfZmVlKSB7XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IHRoaXMudzNzaWduZXI7XG4gICAgICAgIGNvbnN0IHR4ID0geyB0bywgZnJvbTogdGhpcy5hZGRyZXNzLCB2YWx1ZTogYW1vdW50LnRvU3RyaW5nKCksIGdhc0xpbWl0OiBCaWdJbnQoMCkgfTtcbiAgICAgICAgY29uc3QgZXN0aW1hdGVkR2FzID0gYXdhaXQgdGhpcy5wcm92aWRlci5lc3RpbWF0ZUdhcyh0eCk7XG4gICAgICAgIHR4Lmdhc0xpbWl0ID0gZXN0aW1hdGVkR2FzO1xuICAgICAgICBjb25zdCB0eHIgPSBhd2FpdCBzaWduZXIucG9wdWxhdGVUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgIHJldHVybiB7IHR4OiB0eHIsIHR4SWQ6IHVuZGVmaW5lZCB9O1xuICAgIH1cbiAgICBhc3luYyBnZXRUeCh0eElkKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5wcm92aWRlcjtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvbih0eElkKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlR4IGRvZXNuJ3QgZXhpc3RcIik7XG4gICAgICAgIGlmICghcmVzcG9uc2UudG8pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byByZXNvbHZlIHRyYW5zYWN0aW9ucyAke3R4SWR9IHJlY2VpdmVyYCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmcm9tOiByZXNwb25zZS5mcm9tLFxuICAgICAgICAgICAgdG86IHJlc3BvbnNlLnRvLFxuICAgICAgICAgICAgYmxvY2tIZWlnaHQ6IHJlc3BvbnNlLmJsb2NrTnVtYmVyID8gbmV3IEJpZ051bWJlcihyZXNwb25zZS5ibG9ja051bWJlcikgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhbW91bnQ6IG5ldyBCaWdOdW1iZXIocmVzcG9uc2UudmFsdWUudG9TdHJpbmcoKSksXG4gICAgICAgICAgICBwZW5kaW5nOiByZXNwb25zZS5ibG9ja051bWJlciA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpcm1lZDogKGF3YWl0IHJlc3BvbnNlLmNvbmZpcm1hdGlvbnMoKSkgPj0gdGhpcy5taW5Db25maXJtLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyByZWFkeSgpIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLndhbGxldDtcbiAgICAgICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICBjb25zdCBzaWduZXIgPSBhd2FpdCBwcm92aWRlci5nZXRTaWduZXIoKTtcbiAgICAgICAgc2lnbmVyLl9zaWduVHlwZWREYXRhID0gYXN5bmMgKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSA9PiBzaWduZXIuc2lnblR5cGVkRGF0YShkb21haW4sIHR5cGVzLCB2YWx1ZSk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgZml4XG4gICAgICAgIHByb3ZpZGVyLmdldFNpZ25lciA9ICgpID0+IHNpZ25lcjtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBmaXhcbiAgICAgICAgdGhpcy53YWxsZXQgPSBwcm92aWRlcjtcbiAgICAgICAgYXdhaXQgc3VwZXIucmVhZHkoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldGhlcnN2Ni5qcy5tYXAiXSwibmFtZXMiOlsiQmlnTnVtYmVyIiwiRXRoZXJldW1Db25maWciLCJFdGhlcmV1bUV0aGVyc1Y2IiwiY3JlYXRlVHgiLCJhbW91bnQiLCJ0byIsIl9mZWUiLCJzaWduZXIiLCJ3M3NpZ25lciIsInR4IiwiZnJvbSIsImFkZHJlc3MiLCJ2YWx1ZSIsInRvU3RyaW5nIiwiZ2FzTGltaXQiLCJCaWdJbnQiLCJlc3RpbWF0ZWRHYXMiLCJwcm92aWRlciIsImVzdGltYXRlR2FzIiwidHhyIiwicG9wdWxhdGVUcmFuc2FjdGlvbiIsInR4SWQiLCJ1bmRlZmluZWQiLCJnZXRUeCIsInJlc3BvbnNlIiwiZ2V0VHJhbnNhY3Rpb24iLCJFcnJvciIsImJsb2NrSGVpZ2h0IiwiYmxvY2tOdW1iZXIiLCJwZW5kaW5nIiwiY29uZmlybWVkIiwiY29uZmlybWF0aW9ucyIsIm1pbkNvbmZpcm0iLCJyZWFkeSIsIndhbGxldCIsImdldFNpZ25lciIsIl9zaWduVHlwZWREYXRhIiwiZG9tYWluIiwidHlwZXMiLCJzaWduVHlwZWREYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/providers/ethereum/ethersv6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/token.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/token.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BaseWebToken),\n/* harmony export */   getRedstonePrice: () => (/* binding */ getRedstonePrice)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/utils.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/.pnpm/base64url@3.0.1/node_modules/base64url/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.9.0_debug@4.4.0/node_modules/axios/lib/axios.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n\n\n\n\nclass BaseWebToken {\n    constructor(config){\n        this.minConfirm = 5;\n        this.isSlow = false;\n        this.needsFee = true;\n        this.inheritsRPC = false;\n        Object.assign(this, config);\n    }\n    // common methods\n    get address() {\n        return this._address;\n    }\n    async ready() {\n        this._address = this.wallet ? this.ownerToAddress(await this.getPublicKey()) : undefined;\n    }\n    async getId(item) {\n        return base64url__WEBPACK_IMPORTED_MODULE_1__.encode(Buffer.from(await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getCryptoDriver)().hash(await item.rawSignature())));\n    }\n    async price() {\n        return getRedstonePrice(this.ticker);\n    }\n}\nasync function getRedstonePrice(token) {\n    const res = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(`https://api.redstone.finance/prices?symbol=${token}&provider=redstone&limit=1`);\n    await _common_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].checkAndThrow(res, \"Getting price data\");\n    return res.data[0].value;\n} //# sourceMappingURL=token.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vd2ViL3Rva2VuLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE2QztBQUNYO0FBQ1I7QUFDYTtBQUN4QixNQUFNSTtJQWFqQkMsWUFBWUMsTUFBTSxDQUFFO2FBSnBCQyxhQUFhO2FBQ2JDLFNBQVM7YUFDVEMsV0FBVzthQUNYQyxjQUFjO1FBRVZDLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLEVBQUVOO0lBQ3hCO0lBQ0EsaUJBQWlCO0lBQ2pCLElBQUlPLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQ0MsUUFBUTtJQUN4QjtJQUNBLE1BQU1DLFFBQVE7UUFDVixJQUFJLENBQUNELFFBQVEsR0FBRyxJQUFJLENBQUNFLE1BQU0sR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBQyxNQUFNLElBQUksQ0FBQ0MsWUFBWSxNQUFNQztJQUNuRjtJQUNBLE1BQU1DLE1BQU1DLElBQUksRUFBRTtRQUNkLE9BQU9wQiw2Q0FBZ0IsQ0FBQ3NCLE9BQU9DLElBQUksQ0FBQyxNQUFNeEIsMERBQWVBLEdBQUd5QixJQUFJLENBQUMsTUFBTUosS0FBS0ssWUFBWTtJQUM1RjtJQUNBLE1BQU1DLFFBQVE7UUFDVixPQUFPQyxpQkFBaUIsSUFBSSxDQUFDQyxNQUFNO0lBQ3ZDO0FBQ0o7QUFDTyxlQUFlRCxpQkFBaUJFLEtBQUs7SUFDeEMsTUFBTUMsTUFBTSxNQUFNN0IsNkNBQUtBLENBQUM4QixHQUFHLENBQUMsQ0FBQywyQ0FBMkMsRUFBRUYsTUFBTSwwQkFBMEIsQ0FBQztJQUMzRyxNQUFNM0Isd0RBQUtBLENBQUM4QixhQUFhLENBQUNGLEtBQUs7SUFDL0IsT0FBT0EsSUFBSUcsSUFBSSxDQUFDLEVBQUUsQ0FBQ0MsS0FBSztBQUM1QixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vd2ViL3Rva2VuLmpzPzA2MDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q3J5cHRvRHJpdmVyIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCBiYXNlNjR1cmwgZnJvbSBcImJhc2U2NHVybFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi9jb21tb24vdXRpbHMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VXZWJUb2tlbiB7XG4gICAgYmFzZTtcbiAgICB3YWxsZXQ7XG4gICAgX2FkZHJlc3M7XG4gICAgcHJvdmlkZXJVcmw7XG4gICAgcHJvdmlkZXJJbnN0YW5jZTtcbiAgICB0aWNrZXI7XG4gICAgbmFtZTtcbiAgICBpcnlzO1xuICAgIG1pbkNvbmZpcm0gPSA1O1xuICAgIGlzU2xvdyA9IGZhbHNlO1xuICAgIG5lZWRzRmVlID0gdHJ1ZTtcbiAgICBpbmhlcml0c1JQQyA9IGZhbHNlO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZyk7XG4gICAgfVxuICAgIC8vIGNvbW1vbiBtZXRob2RzXG4gICAgZ2V0IGFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRyZXNzO1xuICAgIH1cbiAgICBhc3luYyByZWFkeSgpIHtcbiAgICAgICAgdGhpcy5fYWRkcmVzcyA9IHRoaXMud2FsbGV0ID8gdGhpcy5vd25lclRvQWRkcmVzcyhhd2FpdCB0aGlzLmdldFB1YmxpY0tleSgpKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0SWQoaXRlbSkge1xuICAgICAgICByZXR1cm4gYmFzZTY0dXJsLmVuY29kZShCdWZmZXIuZnJvbShhd2FpdCBnZXRDcnlwdG9Ecml2ZXIoKS5oYXNoKGF3YWl0IGl0ZW0ucmF3U2lnbmF0dXJlKCkpKSk7XG4gICAgfVxuICAgIGFzeW5jIHByaWNlKCkge1xuICAgICAgICByZXR1cm4gZ2V0UmVkc3RvbmVQcmljZSh0aGlzLnRpY2tlcik7XG4gICAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJlZHN0b25lUHJpY2UodG9rZW4pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vYXBpLnJlZHN0b25lLmZpbmFuY2UvcHJpY2VzP3N5bWJvbD0ke3Rva2VufSZwcm92aWRlcj1yZWRzdG9uZSZsaW1pdD0xYCk7XG4gICAgYXdhaXQgdXRpbHMuY2hlY2tBbmRUaHJvdyhyZXMsIFwiR2V0dGluZyBwcmljZSBkYXRhXCIpO1xuICAgIHJldHVybiByZXMuZGF0YVswXS52YWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2VuLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRDcnlwdG9Ecml2ZXIiLCJiYXNlNjR1cmwiLCJheGlvcyIsInV0aWxzIiwiQmFzZVdlYlRva2VuIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJtaW5Db25maXJtIiwiaXNTbG93IiwibmVlZHNGZWUiLCJpbmhlcml0c1JQQyIsIk9iamVjdCIsImFzc2lnbiIsImFkZHJlc3MiLCJfYWRkcmVzcyIsInJlYWR5Iiwid2FsbGV0Iiwib3duZXJUb0FkZHJlc3MiLCJnZXRQdWJsaWNLZXkiLCJ1bmRlZmluZWQiLCJnZXRJZCIsIml0ZW0iLCJlbmNvZGUiLCJCdWZmZXIiLCJmcm9tIiwiaGFzaCIsInJhd1NpZ25hdHVyZSIsInByaWNlIiwiZ2V0UmVkc3RvbmVQcmljZSIsInRpY2tlciIsInRva2VuIiwicmVzIiwiZ2V0IiwiY2hlY2tBbmRUaHJvdyIsImRhdGEiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/aptos.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/aptos.js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AptosConfig)\n/* harmony export */ });\n/* harmony import */ var aptos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aptos */ \"(ssr)/./node_modules/.pnpm/aptos@1.8.5_debug@4.4.0/node_modules/aptos/dist/index.mjs\");\n/* harmony import */ var arbundles_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! arbundles/web */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/web/esm/webIndex.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! js-sha3 */ \"(ssr)/./node_modules/.pnpm/js-sha3@0.8.0/node_modules/js-sha3/src/sha3.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/token.js\");\n\n\n\n\n// import { Ed25519PublicKey } from \"aptos/src/aptos_types/ed25519\";\n// import { Transaction_UserTransaction, TransactionPayload_EntryFunctionPayload, TransactionPayload, PendingTransaction, UserTransaction } from \"aptos/src/generated\";\n\nclass AptosConfig extends _token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n    constructor(config){\n        // if (typeof config.wallet === \"string\" && config.wallet.length === 66) config.wallet = Buffer.from(config.wallet.slice(2), \"hex\");\n        // // @ts-ignore\n        // config.accountInstance = new AptosAccount(config.wallet);\n        super(config);\n        this.base = [\n            \"aptom\",\n            1e8\n        ];\n    }\n    async getProvider() {\n        return this.providerInstance ??= new aptos__WEBPACK_IMPORTED_MODULE_0__.AptosClient(this.providerUrl);\n    }\n    async getTx(txId) {\n        const client = await this.getProvider();\n        const tx = await client.waitForTransactionWithResult(txId, /* { checkSuccess: true } */ {\n            timeoutSecs: 1,\n            checkSuccess: true\n        });\n        const payload = tx?.payload;\n        if (!tx.success) {\n            throw new Error(tx?.vm_status ?? \"Unknown Aptos error\");\n        }\n        if (!(payload?.function === \"0x1::coin::transfer\" && payload?.type_arguments[0] === \"0x1::aptos_coin::AptosCoin\" && tx?.vm_status === \"Executed successfully\")) {\n            throw new Error(`Aptos tx ${txId} failed validation`);\n        }\n        const isPending = tx.type === \"pending_transaction\";\n        return {\n            to: payload.arguments[0],\n            from: tx.sender,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](payload.arguments[1]),\n            pending: isPending,\n            confirmed: !isPending\n        };\n    }\n    ownerToAddress(owner) {\n        const hash = js_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256.create();\n        hash.update(Buffer.from(owner));\n        hash.update(\"\\x00\");\n        return `0x${hash.hex()}`;\n    }\n    async sign(data) {\n        return await this.getSigner().sign(data);\n    }\n    getSigner() {\n        return this.signerInstance ??= new arbundles_web__WEBPACK_IMPORTED_MODULE_1__.InjectedAptosSigner(this.wallet, this._publicKey);\n    }\n    async verify(pub, data, signature) {\n        return await arbundles_web__WEBPACK_IMPORTED_MODULE_1__.InjectedAptosSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]((await (await this.getProvider()).client.blocks.httpRequest.request({\n            method: \"GET\",\n            url: \"/\"\n        })).block_height);\n    }\n    async getFee(amount, to) {\n        const client = await this.getProvider();\n        if (!this.address) throw new Error(\"Address is undefined - you might be missing a wallet, or have not run Irys.ready()\");\n        const builder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderRemoteABI(client, {\n            sender: this.address\n        });\n        const rawTransaction = await builder.build(\"0x1::coin::transfer\", [\n            \"0x1::aptos_coin::AptosCoin\"\n        ], [\n            to ?? \"0x149f7dc9c8e43c14ab46d3a6b62cfe84d67668f764277411f98732bf6718acf9\",\n            new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](amount).toNumber()\n        ]);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const txnBuilder = new aptos__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilderEd25519((_signingMessage)=>{\n            const invalidSigBytes = new Uint8Array(64);\n            return new aptos__WEBPACK_IMPORTED_MODULE_0__.TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n        }, await this.getPublicKey());\n        const signedSimulation = txnBuilder.sign(rawTransaction);\n        const queryParams = {\n            estimate_gas_unit_price: true,\n            estimate_max_gas_amount: true\n        };\n        const simulationResult = await client.client.request.request({\n            url: \"/transactions/simulate\",\n            query: queryParams,\n            method: \"POST\",\n            body: signedSimulation,\n            mediaType: \"application/x.aptos.signed_transaction+bcs\"\n        });\n        return {\n            gasUnitPrice: +simulationResult[0].gas_unit_price,\n            maxGasAmount: +simulationResult[0].max_gas_amount\n        };\n    // const simulationResult = await client.simulateTransaction(this.accountInstance, rawTransaction, { estimateGasUnitPrice: true, estimateMaxGasAmount: true });\n    // return new BigNumber(simulationResult?.[0].gas_unit_price).multipliedBy(simulationResult?.[0].gas_used);\n    // const est = await provider.client.transactions.estimateGasPrice();\n    // return new BigNumber(est.gas_estimate/* (await (await this.getProvider()).client.transactions.estimateGasPrice()).gas_estimate */); // * by gas limit (for upper limit)\n    }\n    async sendTx(data) {\n        return (await this.wallet.signAndSubmitTransaction(data)).hash;\n    // return (await (await (this.getProvider())).submitSignedBCSTransaction(data)).hash;\n    }\n    async createTx(amount, to, _fee) {\n        // const client = await this.getProvider();\n        // const payload = new CoinClient(client).transactionBuilder.buildTransactionPayload(\n        //     \"0x1::coin::transfer\",\n        //     [\"0x1::aptos_coin::AptosCoin\"],\n        //     [to, new BigNumber(amount).toNumber()],\n        // );\n        const tx = {\n            arguments: [\n                to,\n                new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](amount).toNumber()\n            ],\n            function: \"0x1::coin::transfer\",\n            type: \"entry_function_payload\",\n            type_arguments: [\n                \"0x1::aptos_coin::AptosCoin\"\n            ]\n        };\n        // const rawTransaction = await client.generateRawTransaction(this.accountInstance.address(), payload);\n        // const bcsTxn = AptosClient.generateBCSTransaction(this.accountInstance, rawTransaction);\n        // const tx = await this.wallet.signTransaction(transaction);\n        return {\n            txId: undefined,\n            tx\n        };\n    }\n    async getPublicKey() {\n        return this._publicKey ??= Buffer.from((await this.wallet.account()).publicKey.toString().slice(2), \"hex\");\n    }\n    async ready() {\n        this._publicKey = await this.getPublicKey();\n        this._address = this.ownerToAddress(this._publicKey);\n        const client = await this.getProvider();\n        this._address = await client.lookupOriginalAddress(this.address ?? \"\").then((hs)=>hs.toString()).catch((_)=>this._address); // fallback to original\n        if (this._address?.length == 66 && this._address.charAt(2) === \"0\") {\n            this._address = this._address.slice(0, 2) + this._address.slice(3);\n        }\n    }\n} //# sourceMappingURL=aptos.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/aptos.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/erc20.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/erc20.js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ERC20Config),\n/* harmony export */   erc20abi: () => (/* binding */ erc20abi)\n/* harmony export */ });\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/contracts */ \"(ssr)/./node_modules/.pnpm/@ethersproject+contracts@5.8.0/node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/token.js\");\n/* harmony import */ var _ethereum_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ethereum.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/ethereum.js\");\n\n\n\n\nclass ERC20Config extends _ethereum_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(config){\n        super(config);\n        this.contractAddress = config.contractAddress;\n    }\n    async getContract() {\n        if (!this.contractInstance) {\n            // @ts-expect-error minimal type\n            this.contractInstance = new _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_3__.Contract(this.contractAddress, erc20abi, this.w3signer);\n            this.base = [\n                \"wei\",\n                Math.pow(10, await this.contractInstance.decimals())\n            ];\n        }\n        return this.contractInstance;\n    }\n    async getTx(txId) {\n        const response = await this.providerInstance.getTransaction(txId);\n        if (!response) throw new Error(\"Tx doesn't exist\");\n        if (response.data.length !== 138 || response.data.slice(2, 10) !== \"a9059cbb\" // standard ERC20-ABI method ID for transfers\n        ) {\n            throw new Error(\"Tx isn't a ERC20 transfer\");\n        }\n        const to = `0x${response.data.slice(34, 74)}`;\n        const amount = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.data.slice(74), 16);\n        return {\n            from: response.from,\n            to,\n            blockHeight: response.blockNumber ? new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.blockNumber) : undefined,\n            amount,\n            pending: response.blockNumber ? false : true,\n            confirmed: response.confirmations >= this.minConfirm\n        };\n    }\n    /**\n     * Returns the fee in CONTRACT TOKEN UNITS equivalent to the fee derived via gas token units, i.e Wei\n     * @param amount\n     * @param to\n     * @returns\n     */ async getFee(amount, to) {\n        const _amount = \"0x\" + new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](amount).toString(16);\n        const contract = await this.getContract();\n        const gasPrice = await this.providerInstance.getGasPrice();\n        const gasLimit = await contract.estimateGas.transfer(to, _amount);\n        const units = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](gasPrice.mul(gasLimit).toString()); // price in WEI\n        const [fiatGasPrice] = await this.getGas(); // get price of gas units\n        const value = fiatGasPrice.multipliedBy(units); // value of the fee\n        // convert value\n        const ctPrice = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](await this.price()); // price for this token\n        const ctAmount = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](value).dividedToIntegerBy(ctPrice);\n        // const b = ctAmount.multipliedBy(ctPrice)\n        // const c = value.dividedBy(this.base[1])\n        // console.log(b);\n        // console.log(c)\n        return ctAmount;\n    }\n    async createTx(amount, to, _fee) {\n        // const provider = await this.getProvider()\n        // const wallet = new Wallet(this.wallet, this.providerInstance);\n        const contract = await this.getContract();\n        const _amount = \"0x\" + new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](amount).toString(16);\n        const tx = await contract.populateTransaction.transfer(to, _amount);\n        // Needed *specifically* for ERC20\n        tx.gasPrice = await this.providerInstance.getGasPrice();\n        tx.gasLimit = await contract.estimateGas.transfer(to, _amount);\n        tx.chainId = (await this.providerInstance.getNetwork()).chainId;\n        if (!this.address) throw new Error(\"Address is undefined - you might be missing a wallet, or have not run Irys.ready()\");\n        tx.nonce = await this.providerInstance.getTransactionCount(this.address);\n        // const txr = this.w3signer.populateTransaction()\n        // const signedTx = await this.wallet.signTransaction(tx);\n        // const txId = \"0x\" + keccak256(Buffer.from(signedTx.slice(2), \"hex\")).toString(\"hex\");\n        return {\n            txId: undefined,\n            tx: tx\n        };\n    }\n    // TODO: create a nicer solution than just overrides (larger issue: some currencies aren't on redstone)\n    async getGas() {\n        return [\n            new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](await (0,_token_js__WEBPACK_IMPORTED_MODULE_1__.getRedstonePrice)(\"ETH\")),\n            1e18\n        ];\n    }\n}\nconst erc20abi = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_spender\",\n                type: \"address\"\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\"\n            },\n            {\n                name: \"_to\",\n                type: \"address\"\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"balance\",\n                type: \"uint256\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\"\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\"\n            },\n            {\n                name: \"_spender\",\n                type: \"address\"\n            }\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        payable: true,\n        stateMutability: \"payable\",\n        type: \"fallback\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Approval\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Transfer\",\n        type: \"event\"\n    }\n]; //# sourceMappingURL=erc20.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/erc20.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/ethereum.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/ethereum.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EthereumConfig)\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bignumber@5.8.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/token.js\");\n/* harmony import */ var arbundles_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! arbundles/web */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/web/esm/webIndex.js\");\n\n\n\n\nconst ethereumSigner = arbundles_web__WEBPACK_IMPORTED_MODULE_2__.InjectedTypedEthereumSigner;\nclass EthereumConfig extends _token_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(config){\n        super(config);\n        this.inheritsRPC = true;\n        this.base = [\n            \"wei\",\n            1e18\n        ];\n    }\n    async getTx(txId) {\n        const provider = this.providerInstance;\n        const response = await provider.getTransaction(txId);\n        if (!response) throw new Error(\"Tx doesn't exist\");\n        if (!response.to) throw new Error(`Unable to resolve transactions ${txId} receiver`);\n        return {\n            from: response.from,\n            to: response.to,\n            blockHeight: response.blockNumber ? new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.blockNumber) : undefined,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response.value.toHexString(), 16),\n            pending: response.blockNumber ? false : true,\n            confirmed: response.confirmations >= this.minConfirm\n        };\n    }\n    ownerToAddress(owner) {\n        // return (\n        //   \"0x\" +\n        //   keccak256(Buffer.from(owner.slice(1)))\n        //     .slice(-20)\n        //     .toString(\"hex\")\n        // );\n        // return owner;\n        return owner.toString().toLowerCase();\n    }\n    async sign(data) {\n        const signer = await this.getSigner();\n        return signer.sign(data);\n    }\n    getSigner() {\n        if (!this.signer) {\n            this.signer = new arbundles_web__WEBPACK_IMPORTED_MODULE_2__.InjectedTypedEthereumSigner(this.wallet);\n        }\n        return this.signer;\n    }\n    async verify(pub, data, signature) {\n        return ethereumSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        const provider = this.providerInstance;\n        const response = await provider.send(\"eth_blockNumber\", []);\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](response, 16);\n    }\n    async getFee(amount, to) {\n        const provider = this.providerInstance;\n        const tx = {\n            to,\n            from: this.address,\n            value: \"0x\" + new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](amount).toString(16)\n        };\n        const estimatedGas = await provider.estimateGas(tx);\n        const gasPrice = await provider.getGasPrice();\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](estimatedGas.mul(gasPrice).toString());\n    }\n    async sendTx(data) {\n        const signer = this.w3signer;\n        const receipt = await signer.sendTransaction(data); // .catch((e) => { console.error(`Sending tx: ${e}`) })\n        return receipt ? receipt.hash : undefined;\n    }\n    async createTx(amount, to, _fee) {\n        const amountc = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](amount).toFixed());\n        const signer = this.w3signer;\n        const estimatedGas = await signer.estimateGas({\n            to,\n            from: this.address,\n            value: amountc.toHexString()\n        });\n        let gasPrice = await signer.getGasPrice();\n        if (this.name === \"matic\") {\n            gasPrice = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](gasPrice.toString()).multipliedBy(10).decimalPlaces(0).toString());\n        }\n        const txr = await signer.populateTransaction({\n            to,\n            from: this.address,\n            value: amountc.toHexString(),\n            gasPrice,\n            gasLimit: estimatedGas\n        });\n        return {\n            txId: undefined,\n            tx: txr\n        };\n    }\n    async getPublicKey() {\n        return this.address;\n    }\n    async ready() {\n        this.w3signer = await this.wallet.getSigner();\n        this._address = (await this.w3signer.getAddress()).toString().toLowerCase();\n        await this.getSigner().ready();\n        // this.providerInstance = new .JsonRpcProvider(this.providerUrl);\n        this.providerInstance = this.wallet;\n        await this.providerInstance?._ready?.();\n    }\n} //# sourceMappingURL=ethereum.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/ethereum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/index.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/index.js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getTokenConfig)\n/* harmony export */ });\n/* harmony import */ var _ethereum_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ethereum.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/ethereum.js\");\n/* harmony import */ var _near_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./near.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/near.js\");\n/* harmony import */ var _solana_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./solana.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/solana.js\");\n/* harmony import */ var _erc20_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./erc20.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/erc20.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.9.0_debug@4.4.0/node_modules/axios/lib/axios.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/utils.js\");\n/* harmony import */ var _aptos_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./aptos.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/aptos.js\");\n/* harmony import */ var _providers_ethereum_ethersv5_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../providers/ethereum/ethersv5.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/providers/ethereum/ethersv5.js\");\n/* harmony import */ var _providers_ethereum_ethersv6_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../providers/ethereum/ethersv6.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/providers/ethereum/ethersv6.js\");\n\n\n\n\n\n\n\n\n\nfunction getTokenConfig(config) {\n    switch(config.token){\n        case \"ethereum\":\n            return resolveProvider(\"ethereum\", config.providerName, {\n                irys: config.irys,\n                name: \"ethereum\",\n                ticker: \"ETH\",\n                providerUrl: config.providerUrl ?? \"https://cloudflare-eth.com/\",\n                wallet: config.wallet\n            });\n        case \"matic\":\n            return resolveProvider(\"ethereum\", config.providerName, {\n                irys: config.irys,\n                name: \"matic\",\n                ticker: \"MATIC\",\n                providerUrl: config.providerUrl ?? \"https://polygon-rpc.com\",\n                wallet: config.wallet,\n                minConfirm: 1\n            });\n        case \"arbitrum\":\n            return resolveProvider(\"ethereum\", config.providerName, {\n                irys: config.irys,\n                name: \"arbitrum\",\n                ticker: \"ETH\",\n                providerUrl: config.providerUrl ?? \"https://arb1.arbitrum.io/rpc\",\n                wallet: config.wallet\n            });\n        case \"bnb\":\n            return resolveProvider(\"ethereum\", config.providerName, {\n                irys: config.irys,\n                name: \"bnb\",\n                ticker: \"BNB\",\n                providerUrl: config.providerUrl ?? \"https://bsc-dataseed.binance.org\",\n                wallet: config.wallet\n            });\n        case \"avalanche\":\n            return resolveProvider(\"ethereum\", config.providerName, {\n                irys: config.irys,\n                name: \"avalanche\",\n                ticker: \"AVAX\",\n                providerUrl: config.providerUrl ?? \"https://api.avax.network/ext/bc/C/rpc\",\n                wallet: config.wallet\n            });\n        case \"boba-eth\":\n            return resolveProvider(\"ethereum\", config.providerName, {\n                irys: config.irys,\n                name: \"boba-eth\",\n                ticker: \"ETH\",\n                providerUrl: config.providerUrl ?? \"https://mainnet.boba.network/\",\n                minConfirm: 1,\n                wallet: config.wallet\n            });\n        case \"boba\":\n            {\n                const k = new _erc20_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                    irys: config.irys,\n                    name: \"boba\",\n                    ticker: \"BOBA\",\n                    providerUrl: config.providerUrl ?? \"https://mainnet.boba.network/\",\n                    contractAddress: config.contractAddress ?? \"0xa18bF3994C0Cc6E3b63ac420308E5383f53120D7\",\n                    minConfirm: 1,\n                    wallet: config.wallet\n                });\n                // for L1 mainnet: \"https://main-light.eth.linkpool.io/\" and \"0x42bbfa2e77757c645eeaad1655e0911a7553efbc\"\n                k.price = async ()=>{\n                    const res = await axios__WEBPACK_IMPORTED_MODULE_8__[\"default\"].post(\"https://api.livecoinwatch.com/coins/single\", JSON.stringify({\n                        currency: \"USD\",\n                        code: `${k.ticker}`\n                    }), {\n                        headers: {\n                            \"x-api-key\": \"75a7a824-6577-45e6-ad86-511d590c7cc8\",\n                            \"content-type\": \"application/json\"\n                        }\n                    });\n                    await _common_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].checkAndThrow(res, \"Getting price data\");\n                    if (!res?.data?.rate) {\n                        throw new Error(`unable to get price for ${k.name}`);\n                    }\n                    return +res.data.rate;\n                };\n                return k;\n            }\n        case \"solana\":\n            return new _solana_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                irys: config.irys,\n                name: \"solana\",\n                ticker: \"SOL\",\n                providerUrl: config.providerUrl ?? \"https://api.mainnet-beta.solana.com/\",\n                wallet: config.wallet\n            });\n        // case \"algorand\":\n        //     return new AlgorandConfig({ name: \"algorand\", ticker: \"ALGO\", providerUrl: config.providerUrl ?? \"https://api.mainnet-beta.solana.com/\", wallet: config.wallet })\n        case \"near\":\n            return new _near_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                irys: config.irys,\n                name: \"near\",\n                ticker: \"NEAR\",\n                providerUrl: config.providerUrl ?? \"https://rpc.mainnet.near.org\",\n                wallet: config.wallet\n            });\n        case \"aptos\":\n            return new _aptos_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n                irys: config.irys,\n                name: \"aptos\",\n                ticker: \"APTOS\",\n                providerUrl: config.providerUrl ?? \"https://fullnode.mainnet.aptoslabs.com/v1\",\n                wallet: config.wallet\n            });\n        default:\n            throw new Error(`Unknown/Unsupported token ${config.token}`);\n    }\n}\n// @ts-expect-error todo fix\nfunction resolveProvider(family, providerName, config) {\n    switch(family){\n        case \"ethereum\":\n            switch(providerName){\n                case \"ethersv5\":\n                    return new _providers_ethereum_ethersv5_js__WEBPACK_IMPORTED_MODULE_6__.EthereumEthersV5(config);\n                case \"ethersv6\":\n                    return new _providers_ethereum_ethersv6_js__WEBPACK_IMPORTED_MODULE_7__.EthereumEthersV6(config);\n                default:\n                    return new _ethereum_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](config);\n            }\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/near.js":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/near.js ***!
  \***********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NearConfig)\n/* harmony export */ });\n/* harmony import */ var arbundles_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! arbundles/web */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/web/esm/webIndex.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _near_js_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@0.0.3/node_modules/@near-js/crypto/lib/index.js\");\n/* harmony import */ var _near_js_keystores_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @near-js/keystores-browser */ \"(ssr)/./node_modules/.pnpm/@near-js+keystores-browser@0.0.3/node_modules/@near-js/keystores-browser/lib/index.js\");\n/* harmony import */ var _near_js_transactions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/.pnpm/@near-js+transactions@0.1.1/node_modules/@near-js/transactions/lib/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/.pnpm/borsh@0.7.0/node_modules/borsh/lib/index.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@5.2.2/node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/.pnpm/js-sha256@0.9.0/node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/token.js\");\n\n\n\n\n\n\n\n\n\n\nclass NearConfig extends _token_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"] {\n    constructor(config){\n        super(config);\n        this.near = this.wallet._near;\n        this.base = [\n            \"yoctoNEAR\",\n            1e25\n        ];\n    // this.keyPair = KeyPair.fromString(this.wallet)\n    }\n    async ready() {\n        if (!this.wallet.isSignedIn()) {\n            throw new Error(\"Wallet has not been signed in!\");\n        }\n        const keystore = new _near_js_keystores_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserLocalStorageKeyStore();\n        const account = this.wallet.account();\n        // console.log(this.address)\n        // console.log(await account.getAccessKeys())\n        // this._address = this.wallet.getAccountId()\n        // this.keyPair = KeyPair.fromString(this.wallet)\n        // console.log(await account.getAccessKeys())\n        this.keyPair = await keystore.getKey(this.wallet._networkId, account.accountId);\n        if (!this.keyPair) {\n            this.keyPair = _near_js_crypto__WEBPACK_IMPORTED_MODULE_2__.KeyPair.fromRandom(\"ed25519\");\n            const publicKey = this.keyPair.getPublicKey().toString();\n            // this.wallet._networkId\n            await keystore.setKey(this.wallet._networkId, account.accountId, this.keyPair);\n            // can't do this :c\n            // console.log(publicKey)\n            await account.addKey(publicKey);\n        }\n        // console.log(this.keyPair.getPublicKey().toString());\n        // this._address = this.ownerToAddress(Buffer.from(this.keyPair.getPublicKey().data));\n        this._address = await this.wallet.getAccountId();\n        // this.providerInstance = new providers.JsonRpcProvider({ url: this.providerUrl });\n        this.providerInstance = this.wallet._near.connection.provider;\n    // console.log(this.keyPair);\n    }\n    /**\n     * NEAR wants both the sender ID and tx Hash, so we have to concatenate to keep with the interface.\n     * @param txId assumes format senderID:txHash\n     */ async getTx(txId) {\n        // NOTE: their type defs are out of date with their actual API (23-01-2022)... beware the expect-error when debugging!\n        const provider = await this.providerInstance;\n        const [id, hash] = txId.split(\":\");\n        const status = await provider.txStatusReceipts(bs58__WEBPACK_IMPORTED_MODULE_5__.decode(hash), id);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        const blockHeight = await provider.block(status.transaction_outcome.block_hash);\n        const latestBlockHeight = (await provider.block({\n            finality: \"final\"\n        })).header.height;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        if (status.receipts_outcome[0].outcome.status.SuccessValue !== \"\") {\n            throw new Error(\"Transaction failed!\");\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        const deposit = status.receipts[0].receipt.Action.actions[0].Transfer.deposit ?? 0;\n        // console.log(decode(status.receipts_outcome[0].block_hash))\n        // // const routcometx = await provider.txStatusReceipts(decode(status.receipts_outcome[0].block_hash), status.receipts_outcome[0].id)\n        // console.log({ blockHeight, status, latestBlockHeight })\n        return {\n            from: id,\n            to: status.transaction.receiver_id,\n            amount: new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](deposit),\n            blockHeight: new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](blockHeight.header.height),\n            pending: false,\n            confirmed: latestBlockHeight - blockHeight.header.height >= this.minConfirm\n        };\n    }\n    /**\n     * address = accountID\n     * @param owner // assumed to be the \"ed25519:\" header + b58 encoded key\n     */ ownerToAddress(owner) {\n        // should just return the loaded address?\n        const pubkey = typeof owner === \"string\" ? owner : bs58__WEBPACK_IMPORTED_MODULE_5__.encode(owner);\n        return Buffer.from(bs58__WEBPACK_IMPORTED_MODULE_5__.decode(pubkey.replace(\"ed25519:\", \"\"))).toString(\"hex\");\n    }\n    async sign(data) {\n        return this.getSigner().sign(data);\n    }\n    getSigner() {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return new arbundles_web__WEBPACK_IMPORTED_MODULE_0__.NearSigner(this.keyPair.secretKey);\n    }\n    async verify(pub, data, signature) {\n        return arbundles_web__WEBPACK_IMPORTED_MODULE_0__.NearSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        // const provider = await this.getProvider();\n        const res = await this.providerInstance.status();\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](res.sync_info.latest_block_height);\n    }\n    async getFee(_amount, _to) {\n        // const provider = await this.getProvider();\n        // one unit of gas\n        // const res = await provider.connection.provider.gasPrice(await (await this.getCurrentHeight()).toNumber())\n        const latestBlockHeight = (await this.providerInstance.block({\n            finality: \"final\"\n        })).header.height;\n        const res = await this.providerInstance.gasPrice(latestBlockHeight); // null == gas price as of latest block\n        // multiply by action cost in gas units (assume only action is transfer)\n        // 4.5x10^11 gas units for fund transfers\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](res.gas_price).multipliedBy(450000000000);\n    }\n    async sendTx(data) {\n        data;\n        const res = await this.providerInstance.sendTransaction(data);\n        return `${this.address}:${res.transaction.hash}`; // encode into compound format\n    }\n    async createTx(amount, to, _fee) {\n        if (!this.address) throw new Error(\"Address is undefined - you might be missing a wallet, or have not run Irys.ready()\");\n        const accessKey = await this.providerInstance.query({\n            request_type: \"view_access_key\",\n            finality: \"final\",\n            account_id: this.address,\n            public_key: this.keyPair.getPublicKey().toString()\n        });\n        // console.log(accessKey);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        const nonce = ++accessKey.nonce;\n        const recentBlockHash = Buffer.from(bs58__WEBPACK_IMPORTED_MODULE_5__.decode(accessKey.block_hash));\n        const actions = [\n            _near_js_transactions__WEBPACK_IMPORTED_MODULE_4__.actionCreators.transfer(new bn_js__WEBPACK_IMPORTED_MODULE_7__(new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](amount).toString()))\n        ];\n        const tx = (0,_near_js_transactions__WEBPACK_IMPORTED_MODULE_4__.createTransaction)(this.address, this.keyPair.getPublicKey(), to, nonce, actions, recentBlockHash);\n        const serialTx = (0,borsh__WEBPACK_IMPORTED_MODULE_6__.serialize)(_near_js_transactions__WEBPACK_IMPORTED_MODULE_4__.SCHEMA, tx);\n        const serialTxHash = new Uint8Array(js_sha256__WEBPACK_IMPORTED_MODULE_8__.sha256.array(serialTx));\n        const signature = this.keyPair.sign(serialTxHash);\n        const signedTx = new _near_js_transactions__WEBPACK_IMPORTED_MODULE_4__.SignedTransaction({\n            transaction: tx,\n            signature: new _near_js_transactions__WEBPACK_IMPORTED_MODULE_4__.Signature({\n                keyType: tx.publicKey.keyType,\n                data: signature.signature\n            })\n        });\n        return {\n            tx: signedTx,\n            txId: undefined\n        };\n    }\n    async getPublicKey() {\n        return Buffer.from(this.keyPair.getPublicKey().data);\n    }\n} //# sourceMappingURL=near.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/near.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/solana.js":
/*!*************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/solana.js ***!
  \*************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SolanaConfig)\n/* harmony export */ });\n/* harmony import */ var arbundles_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! arbundles/web */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/web/esm/webIndex.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../token.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/token.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/.pnpm/@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/web3.js/lib/index.esm.js\");\n\n\n\n\n\n\nclass SolanaConfig extends _token_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(config){\n        super(config);\n        this.minConfirm = 1;\n        this.base = [\n            \"lamports\",\n            1e9\n        ];\n    }\n    async getProvider() {\n        if (!this.providerInstance) {\n            this.providerInstance = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Connection(this.providerUrl, {\n                confirmTransactionInitialTimeout: 60000,\n                commitment: \"confirmed\"\n            });\n        }\n        return this.providerInstance;\n    }\n    async getTx(txId) {\n        const connection = await this.getProvider();\n        const stx = await connection.getTransaction(txId, {\n            commitment: \"confirmed\"\n        });\n        if (!stx) throw new Error(\"Confirmed tx not found\");\n        const currentSlot = await connection.getSlot(\"confirmed\");\n        if (!stx.meta) throw new Error(`Unable to resolve transaction ${txId}`);\n        const amount = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](stx.meta.postBalances[1]).minus(new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](stx.meta.preBalances[1]));\n        const tx = {\n            from: stx.transaction.message.accountKeys[0].toBase58(),\n            to: stx.transaction.message.accountKeys[1].toBase58(),\n            amount: amount,\n            blockHeight: new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](stx.slot),\n            pending: false,\n            confirmed: currentSlot - stx.slot >= 1\n        };\n        return tx;\n    }\n    ownerToAddress(owner) {\n        if (typeof owner === \"string\") {\n            owner = Buffer.from(owner);\n        }\n        return bs58__WEBPACK_IMPORTED_MODULE_3__.encode(owner);\n    }\n    async sign(data) {\n        return await (await this.getSigner()).sign(data);\n    }\n    getSigner() {\n        if (!this.signer) {\n            // if (this.wallet?.name === \"Phantom\") {\n            //     this.signer = new PhantomSigner(this.wallet)\n            // } else {\n            //     this.signer = new InjectedSolanaSigner(this.wallet)\n            // }\n            this.signer = new arbundles_web__WEBPACK_IMPORTED_MODULE_0__.HexInjectedSolanaSigner(this.wallet);\n        }\n        return this.signer;\n    }\n    verify(pub, data, signature) {\n        // if (this.wallet?.name === \"Phantom\") {\n        //     return PhantomSigner.verify(pub, data, signature)\n        // }\n        // return InjectedSolanaSigner.verify(pub, data, signature);\n        return arbundles_web__WEBPACK_IMPORTED_MODULE_0__.HexInjectedSolanaSigner.verify(pub, data, signature);\n    }\n    async getCurrentHeight() {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]((await (await this.getProvider()).getEpochInfo()).blockHeight ?? 0);\n    }\n    async getFee(_amount, _to) {\n        // const connection = await this.getProvider()\n        // const block = await connection.getRecentBlockhash();\n        // const feeCalc = await connection.getFeeCalculatorForBlockhash(\n        //     block.blockhash,\n        // );\n        // return new BigNumber(feeCalc.value.lamportsPerSignature);\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](5000); // hardcode it for now\n    }\n    async sendTx(data) {\n        return await this.wallet.sendTransaction(data, await this.getProvider(), {\n            skipPreflight: true\n        });\n    }\n    async createTx(amount, to, _fee) {\n        // TODO: figure out how to manually set fees\n        const pubkey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(await this.getPublicKey());\n        const blockHashInfo = await async_retry__WEBPACK_IMPORTED_MODULE_4__(async (bail)=>{\n            try {\n                return await (await this.getProvider()).getRecentBlockhash();\n            } catch (e) {\n                if (e.message?.includes(\"blockhash\")) throw e;\n                else bail(e);\n                throw new Error(\"Unreachable\");\n            }\n        }, {\n            retries: 3,\n            minTimeout: 1000\n        });\n        const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.Transaction({\n            recentBlockhash: blockHashInfo.blockhash,\n            feePayer: pubkey\n        });\n        transaction.add(_solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.SystemProgram.transfer({\n            fromPubkey: pubkey,\n            toPubkey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey(to),\n            lamports: +new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](amount).toNumber()\n        }));\n        return {\n            tx: transaction,\n            txId: undefined\n        };\n    }\n    async getPublicKey() {\n        if (!this.wallet.publicKey) throw new Error(\"Wallet.publicKey is undefined\");\n        return this.wallet.publicKey.toBuffer();\n    }\n} //# sourceMappingURL=solana.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/tokens/solana.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/upload.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/upload.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebUploader: () => (/* binding */ WebUploader)\n/* harmony export */ });\n/* harmony import */ var _common_upload_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/upload.js */ \"(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/common/upload.js\");\n/* harmony import */ var arbundles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! arbundles */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/node/esm/index.js\");\n\n\nclass WebUploader extends _common_upload_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(irys){\n        super(irys.api, irys.utils, irys.token, irys.tokenConfig, irys.IrysTransaction);\n        this.irys = irys;\n    }\n    /**\n     * Uploads a tagged file object, automatically adding the content-type tag if it's not present\n     * @param file - File object to upload\n     * @param opts - optional options for the upload / data item creation\n     * @returns\n     */ async uploadFile(file, opts) {\n        const hasContentType = opts?.tags ? opts.tags.some(({ name })=>name.toLowerCase() === \"content-type\") : false;\n        const tags = hasContentType ? opts?.tags : [\n            ...opts?.tags ?? [],\n            {\n                name: \"Content-Type\",\n                value: file.type\n            }\n        ];\n        return this.uploadData(Buffer.from(await file.arrayBuffer()), {\n            tags,\n            ...opts\n        });\n    }\n    /**\n     * Uploads a list of `File` objects & a generated folder manifest as a nested bundle using a temporary signing key.\n     *\n     * @param files list of `File` objects to upload - note: this code determines the paths via the File's `webkitRelativePath` property - if it's undefined, it falls back to file.name\n     * @param {string} [opts.indexFileRelPath] Relative path for the index file, i.e `folder/index.html`\n     * @param {Tag[]} [opts.manifestTags] List of tags to add onto the manifest transaction\n     * @param {JWKInterface} [opts.throwawayKey] Provide your own throwaway JWK to use for signing the items in the bundle\n     * @param {boolean} [opts.seperateManifestTx=false] Whether upload the manifest as a seperate tx (not in the nested bundle) - note: transactions in a nested bundle are not indexed by bundlr GQL - if you have tags you want to use to find the manifest, set this option to true\n     *\n     * @returns Standard upload response from the bundler node, plus the throwaway key & address, manifest, manifest TxId and the list of generated transactions\n     */ async uploadFolder(files, opts) {\n        const txs = [];\n        const txMap = new Map();\n        const throwawayKey = opts?.throwawayKey ?? await this.irys.arbundles.getCryptoDriver().generateJWK();\n        const ephemeralSigner = new arbundles__WEBPACK_IMPORTED_MODULE_1__.ArweaveSigner(throwawayKey);\n        for (const file of files){\n            const path = file.webkitRelativePath ? file.webkitRelativePath : file.name;\n            const hasContentType = file.tags ? file.tags.some(({ name })=>name.toLowerCase() === \"content-type\") : false;\n            const tags = hasContentType ? file.tags : [\n                ...file.tags ?? [],\n                {\n                    name: \"Content-Type\",\n                    value: file.type\n                }\n            ];\n            const tx = this.irys.arbundles.createData(Buffer.from(await file.arrayBuffer()), ephemeralSigner, {\n                tags\n            });\n            await tx.sign(ephemeralSigner);\n            txs.push(tx);\n            txMap.set(path, tx.id);\n        }\n        // generate manifest, add to bundle\n        const manifest = await this.generateManifest({\n            items: txMap,\n            indexFile: opts?.indexFileRelPath\n        });\n        const manifestTx = this.irys.arbundles.createData(JSON.stringify(manifest), opts?.seperateManifestTx ? this.irys.tokenConfig.getSigner() : ephemeralSigner, {\n            tags: [\n                {\n                    name: \"Type\",\n                    value: \"manifest\"\n                },\n                {\n                    name: \"Content-Type\",\n                    value: \"application/x.arweave-manifest+json\"\n                },\n                ...opts?.manifestTags ?? []\n            ]\n        });\n        if (opts?.seperateManifestTx === true) {\n            await manifestTx.sign(this.irys.tokenConfig.getSigner());\n            await this.uploadTransaction(manifestTx, {\n                ...opts\n            });\n        } else {\n            await manifestTx.sign(ephemeralSigner);\n            txs.push(manifestTx);\n        }\n        // upload bundle\n        const bundleRes = await this.uploadBundle(txs, {\n            ...opts\n        });\n        return {\n            ...bundleRes.data,\n            manifestId: manifestTx.id,\n            manifest,\n            throwawayKey: bundleRes.throwawayKey,\n            throwawayKeyAddress: bundleRes.throwawayKeyAddress,\n            txs: bundleRes.txs\n        };\n    }\n} //# sourceMappingURL=upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/upload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/utils.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/utils.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataItem: () => (/* reexport safe */ arbundles_web__WEBPACK_IMPORTED_MODULE_0__.DataItem),\n/* harmony export */   bundleAndSignData: () => (/* reexport safe */ arbundles_web__WEBPACK_IMPORTED_MODULE_0__.bundleAndSignData),\n/* harmony export */   createData: () => (/* reexport safe */ arbundles_web__WEBPACK_IMPORTED_MODULE_0__.createData),\n/* harmony export */   deepHash: () => (/* reexport safe */ arbundles_web__WEBPACK_IMPORTED_MODULE_0__.deepHash),\n/* harmony export */   getCryptoDriver: () => (/* reexport safe */ arbundles_web__WEBPACK_IMPORTED_MODULE_0__.getCryptoDriver),\n/* harmony export */   stringToBuffer: () => (/* reexport safe */ arbundles_web__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer)\n/* harmony export */ });\n/* harmony import */ var arbundles_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! arbundles/web */ \"(ssr)/./node_modules/.pnpm/arbundles@0.10.1_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_utf-8-validate@5.0.10/node_modules/arbundles/build/web/esm/webIndex.js\");\n\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrc2RrQDAuMC4yX2Fyd2VhdmVAMS4xNS43X2J1ZmZlcnV0aWxANC4wLjlfZGVidWdANC40LjBfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTAvbm9kZV9tb2R1bGVzL0BpcnlzL3Nkay9idWlsZC9lc20vd2ViL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUk7QUFDckIsQ0FDNUcsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cytzZGtAMC4wLjJfYXJ3ZWF2ZUAxLjE1LjdfYnVmZmVydXRpbEA0LjAuOV9kZWJ1Z0A0LjQuMF90eXBlc2NyaXB0QDUuOC4zX3V0Zi04LXZhbGlkYXRlQDUuMC4xMC9ub2RlX21vZHVsZXMvQGlyeXMvc2RrL2J1aWxkL2VzbS93ZWIvdXRpbHMuanM/NGFjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVEYXRhLCBEYXRhSXRlbSwgZGVlcEhhc2gsIHN0cmluZ1RvQnVmZmVyLCBnZXRDcnlwdG9Ecml2ZXIsIGJ1bmRsZUFuZFNpZ25EYXRhIC8qIEFyd2VhdmUgKi8gfSBmcm9tIFwiYXJidW5kbGVzL3dlYlwiO1xuZXhwb3J0IHsgY3JlYXRlRGF0YSwgRGF0YUl0ZW0sIGRlZXBIYXNoLCBzdHJpbmdUb0J1ZmZlciwgZ2V0Q3J5cHRvRHJpdmVyLCBidW5kbGVBbmRTaWduRGF0YSAvKiBBcndlYXZlICovIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlRGF0YSIsIkRhdGFJdGVtIiwiZGVlcEhhc2giLCJzdHJpbmdUb0J1ZmZlciIsImdldENyeXB0b0RyaXZlciIsImJ1bmRsZUFuZFNpZ25EYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+sdk@0.0.2_arweave@1.15.7_bufferutil@4.0.9_debug@4.4.0_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@irys/sdk/build/esm/web/utils.js\n");

/***/ })

};
;