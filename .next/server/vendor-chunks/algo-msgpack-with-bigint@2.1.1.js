"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/algo-msgpack-with-bigint@2.1.1";
exports.ids = ["vendor-chunks/algo-msgpack-with-bigint@2.1.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/CachedKeyDecoder.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/CachedKeyDecoder.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CachedKeyDecoder = void 0;\nconst utf8_1 = __webpack_require__(/*! ./utils/utf8 */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/utf8.js\");\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\nclass CachedKeyDecoder {\n    constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY){\n        this.maxKeyLength = maxKeyLength;\n        this.maxLengthPerKey = maxLengthPerKey;\n        this.hit = 0;\n        this.miss = 0;\n        // avoid `new Array(N)` to create a non-sparse array for performance.\n        this.caches = [];\n        for(let i = 0; i < this.maxKeyLength; i++){\n            this.caches.push([]);\n        }\n    }\n    canBeCached(byteLength) {\n        return byteLength > 0 && byteLength <= this.maxKeyLength;\n    }\n    get(bytes, inputOffset, byteLength) {\n        const records = this.caches[byteLength - 1];\n        const recordsLength = records.length;\n        FIND_CHUNK: for(let i = 0; i < recordsLength; i++){\n            const record = records[i];\n            const recordBytes = record.bytes;\n            for(let j = 0; j < byteLength; j++){\n                if (recordBytes[j] !== bytes[inputOffset + j]) {\n                    continue FIND_CHUNK;\n                }\n            }\n            return record.value;\n        }\n        return null;\n    }\n    store(bytes, value) {\n        const records = this.caches[bytes.length - 1];\n        const record = {\n            bytes,\n            value\n        };\n        if (records.length >= this.maxLengthPerKey) {\n            // `records` are full!\n            // Set `record` to a randomized position.\n            records[Math.random() * records.length | 0] = record;\n        } else {\n            records.push(record);\n        }\n    }\n    decode(bytes, inputOffset, byteLength) {\n        const cachedValue = this.get(bytes, inputOffset, byteLength);\n        if (cachedValue != null) {\n            this.hit++;\n            return cachedValue;\n        }\n        this.miss++;\n        const value = utf8_1.utf8DecodeJs(bytes, inputOffset, byteLength);\n        // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n        const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n        this.store(slicedCopyOfBytes, value);\n        return value;\n    }\n}\nexports.CachedKeyDecoder = CachedKeyDecoder; //# sourceMappingURL=CachedKeyDecoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9DYWNoZWRLZXlEZWNvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBRyxLQUFLO0FBQ2hDLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLHdJQUFjO0FBQ3JDLE1BQU1DLHlCQUF5QjtBQUMvQixNQUFNQyw2QkFBNkI7QUFDbkMsTUFBTUo7SUFDRkssWUFBWUMsZUFBZUgsc0JBQXNCLEVBQUVJLGtCQUFrQkgsMEJBQTBCLENBQUU7UUFDN0YsSUFBSSxDQUFDRSxZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtRQUN2QixJQUFJLENBQUNDLEdBQUcsR0FBRztRQUNYLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1oscUVBQXFFO1FBQ3JFLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7UUFDaEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDTCxZQUFZLEVBQUVLLElBQUs7WUFDeEMsSUFBSSxDQUFDRCxNQUFNLENBQUNFLElBQUksQ0FBQyxFQUFFO1FBQ3ZCO0lBQ0o7SUFDQUMsWUFBWUMsVUFBVSxFQUFFO1FBQ3BCLE9BQU9BLGFBQWEsS0FBS0EsY0FBYyxJQUFJLENBQUNSLFlBQVk7SUFDNUQ7SUFDQVMsSUFBSUMsS0FBSyxFQUFFQyxXQUFXLEVBQUVILFVBQVUsRUFBRTtRQUNoQyxNQUFNSSxVQUFVLElBQUksQ0FBQ1IsTUFBTSxDQUFDSSxhQUFhLEVBQUU7UUFDM0MsTUFBTUssZ0JBQWdCRCxRQUFRRSxNQUFNO1FBQ3BDQyxZQUFZLElBQUssSUFBSVYsSUFBSSxHQUFHQSxJQUFJUSxlQUFlUixJQUFLO1lBQ2hELE1BQU1XLFNBQVNKLE9BQU8sQ0FBQ1AsRUFBRTtZQUN6QixNQUFNWSxjQUFjRCxPQUFPTixLQUFLO1lBQ2hDLElBQUssSUFBSVEsSUFBSSxHQUFHQSxJQUFJVixZQUFZVSxJQUFLO2dCQUNqQyxJQUFJRCxXQUFXLENBQUNDLEVBQUUsS0FBS1IsS0FBSyxDQUFDQyxjQUFjTyxFQUFFLEVBQUU7b0JBQzNDLFNBQVNIO2dCQUNiO1lBQ0o7WUFDQSxPQUFPQyxPQUFPdkIsS0FBSztRQUN2QjtRQUNBLE9BQU87SUFDWDtJQUNBMEIsTUFBTVQsS0FBSyxFQUFFakIsS0FBSyxFQUFFO1FBQ2hCLE1BQU1tQixVQUFVLElBQUksQ0FBQ1IsTUFBTSxDQUFDTSxNQUFNSSxNQUFNLEdBQUcsRUFBRTtRQUM3QyxNQUFNRSxTQUFTO1lBQUVOO1lBQU9qQjtRQUFNO1FBQzlCLElBQUltQixRQUFRRSxNQUFNLElBQUksSUFBSSxDQUFDYixlQUFlLEVBQUU7WUFDeEMsc0JBQXNCO1lBQ3RCLHlDQUF5QztZQUN6Q1csT0FBTyxDQUFDLEtBQU1TLE1BQU0sS0FBS1QsUUFBUUUsTUFBTSxHQUFJLEVBQUUsR0FBR0U7UUFDcEQsT0FDSztZQUNESixRQUFRTixJQUFJLENBQUNVO1FBQ2pCO0lBQ0o7SUFDQU0sT0FBT1osS0FBSyxFQUFFQyxXQUFXLEVBQUVILFVBQVUsRUFBRTtRQUNuQyxNQUFNZSxjQUFjLElBQUksQ0FBQ2QsR0FBRyxDQUFDQyxPQUFPQyxhQUFhSDtRQUNqRCxJQUFJZSxlQUFlLE1BQU07WUFDckIsSUFBSSxDQUFDckIsR0FBRztZQUNSLE9BQU9xQjtRQUNYO1FBQ0EsSUFBSSxDQUFDcEIsSUFBSTtRQUNULE1BQU1WLFFBQVFFLE9BQU82QixZQUFZLENBQUNkLE9BQU9DLGFBQWFIO1FBQ3RELDRJQUE0STtRQUM1SSxNQUFNaUIsb0JBQW9CQyxXQUFXQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDbkIsT0FBT0MsYUFBYUEsY0FBY0g7UUFDNUYsSUFBSSxDQUFDVyxLQUFLLENBQUNNLG1CQUFtQmhDO1FBQzlCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBRCx3QkFBd0IsR0FBR0Usa0JBQzNCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9DYWNoZWRLZXlEZWNvZGVyLmpzP2U3NDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhY2hlZEtleURlY29kZXIgPSB2b2lkIDA7XG5jb25zdCB1dGY4XzEgPSByZXF1aXJlKFwiLi91dGlscy91dGY4XCIpO1xuY29uc3QgREVGQVVMVF9NQVhfS0VZX0xFTkdUSCA9IDE2O1xuY29uc3QgREVGQVVMVF9NQVhfTEVOR1RIX1BFUl9LRVkgPSAxNjtcbmNsYXNzIENhY2hlZEtleURlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKG1heEtleUxlbmd0aCA9IERFRkFVTFRfTUFYX0tFWV9MRU5HVEgsIG1heExlbmd0aFBlcktleSA9IERFRkFVTFRfTUFYX0xFTkdUSF9QRVJfS0VZKSB7XG4gICAgICAgIHRoaXMubWF4S2V5TGVuZ3RoID0gbWF4S2V5TGVuZ3RoO1xuICAgICAgICB0aGlzLm1heExlbmd0aFBlcktleSA9IG1heExlbmd0aFBlcktleTtcbiAgICAgICAgdGhpcy5oaXQgPSAwO1xuICAgICAgICB0aGlzLm1pc3MgPSAwO1xuICAgICAgICAvLyBhdm9pZCBgbmV3IEFycmF5KE4pYCB0byBjcmVhdGUgYSBub24tc3BhcnNlIGFycmF5IGZvciBwZXJmb3JtYW5jZS5cbiAgICAgICAgdGhpcy5jYWNoZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1heEtleUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlcy5wdXNoKFtdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYW5CZUNhY2hlZChieXRlTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBieXRlTGVuZ3RoID4gMCAmJiBieXRlTGVuZ3RoIDw9IHRoaXMubWF4S2V5TGVuZ3RoO1xuICAgIH1cbiAgICBnZXQoYnl0ZXMsIGlucHV0T2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSB0aGlzLmNhY2hlc1tieXRlTGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IHJlY29yZHNMZW5ndGggPSByZWNvcmRzLmxlbmd0aDtcbiAgICAgICAgRklORF9DSFVOSzogZm9yIChsZXQgaSA9IDA7IGkgPCByZWNvcmRzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZCA9IHJlY29yZHNbaV07XG4gICAgICAgICAgICBjb25zdCByZWNvcmRCeXRlcyA9IHJlY29yZC5ieXRlcztcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYnl0ZUxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZEJ5dGVzW2pdICE9PSBieXRlc1tpbnB1dE9mZnNldCArIGpdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIEZJTkRfQ0hVTks7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3RvcmUoYnl0ZXMsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSB0aGlzLmNhY2hlc1tieXRlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgcmVjb3JkID0geyBieXRlcywgdmFsdWUgfTtcbiAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoID49IHRoaXMubWF4TGVuZ3RoUGVyS2V5KSB7XG4gICAgICAgICAgICAvLyBgcmVjb3Jkc2AgYXJlIGZ1bGwhXG4gICAgICAgICAgICAvLyBTZXQgYHJlY29yZGAgdG8gYSByYW5kb21pemVkIHBvc2l0aW9uLlxuICAgICAgICAgICAgcmVjb3Jkc1soTWF0aC5yYW5kb20oKSAqIHJlY29yZHMubGVuZ3RoKSB8IDBdID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVjb2RlKGJ5dGVzLCBpbnB1dE9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgICAgICBjb25zdCBjYWNoZWRWYWx1ZSA9IHRoaXMuZ2V0KGJ5dGVzLCBpbnB1dE9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgICAgIGlmIChjYWNoZWRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmhpdCsrO1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWlzcysrO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHV0ZjhfMS51dGY4RGVjb2RlSnMoYnl0ZXMsIGlucHV0T2Zmc2V0LCBieXRlTGVuZ3RoKTtcbiAgICAgICAgLy8gRW5zdXJlIHRvIGNvcHkgYSBzbGljZSBvZiBieXRlcyBiZWNhdXNlIHRoZSBieXRlIG1heSBiZSBOb2RlSlMgQnVmZmVyIGFuZCBCdWZmZXIjc2xpY2UoKSByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIGl0cyBpbnRlcm5hbCBBcnJheUJ1ZmZlci5cbiAgICAgICAgY29uc3Qgc2xpY2VkQ29weU9mQnl0ZXMgPSBVaW50OEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ5dGVzLCBpbnB1dE9mZnNldCwgaW5wdXRPZmZzZXQgKyBieXRlTGVuZ3RoKTtcbiAgICAgICAgdGhpcy5zdG9yZShzbGljZWRDb3B5T2ZCeXRlcywgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5DYWNoZWRLZXlEZWNvZGVyID0gQ2FjaGVkS2V5RGVjb2Rlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhY2hlZEtleURlY29kZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2FjaGVkS2V5RGVjb2RlciIsInV0ZjhfMSIsInJlcXVpcmUiLCJERUZBVUxUX01BWF9LRVlfTEVOR1RIIiwiREVGQVVMVF9NQVhfTEVOR1RIX1BFUl9LRVkiLCJjb25zdHJ1Y3RvciIsIm1heEtleUxlbmd0aCIsIm1heExlbmd0aFBlcktleSIsImhpdCIsIm1pc3MiLCJjYWNoZXMiLCJpIiwicHVzaCIsImNhbkJlQ2FjaGVkIiwiYnl0ZUxlbmd0aCIsImdldCIsImJ5dGVzIiwiaW5wdXRPZmZzZXQiLCJyZWNvcmRzIiwicmVjb3Jkc0xlbmd0aCIsImxlbmd0aCIsIkZJTkRfQ0hVTksiLCJyZWNvcmQiLCJyZWNvcmRCeXRlcyIsImoiLCJzdG9yZSIsIk1hdGgiLCJyYW5kb20iLCJkZWNvZGUiLCJjYWNoZWRWYWx1ZSIsInV0ZjhEZWNvZGVKcyIsInNsaWNlZENvcHlPZkJ5dGVzIiwiVWludDhBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/CachedKeyDecoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Decoder.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Decoder.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Decoder = exports.DataViewIndexOutOfBoundsError = void 0;\nconst prettyByte_1 = __webpack_require__(/*! ./utils/prettyByte */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/prettyByte.js\");\nconst ExtensionCodec_1 = __webpack_require__(/*! ./ExtensionCodec */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtensionCodec.js\");\nconst int_1 = __webpack_require__(/*! ./utils/int */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/int.js\");\nconst utf8_1 = __webpack_require__(/*! ./utils/utf8 */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/utf8.js\");\nconst typedArrays_1 = __webpack_require__(/*! ./utils/typedArrays */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/typedArrays.js\");\nconst CachedKeyDecoder_1 = __webpack_require__(/*! ./CachedKeyDecoder */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/CachedKeyDecoder.js\");\nconst isValidMapKeyType = (key)=>{\n    const keyType = typeof key;\n    return keyType === \"string\" || keyType === \"number\";\n};\nconst HEAD_BYTE_REQUIRED = -1;\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexports.DataViewIndexOutOfBoundsError = (()=>{\n    try {\n        // IE11: The spec says it should throw RangeError,\n        // IE11: but in IE11 it throws TypeError.\n        EMPTY_VIEW.getInt8(0);\n    } catch (e) {\n        return e.constructor;\n    }\n    throw new Error(\"never reached\");\n})();\nconst MORE_DATA = new exports.DataViewIndexOutOfBoundsError(\"Insufficient data\");\nconst DEFAULT_MAX_LENGTH = 4294967295; // uint32_max\nconst sharedCachedKeyDecoder = new CachedKeyDecoder_1.CachedKeyDecoder();\nclass Decoder {\n    constructor(extensionCodec = ExtensionCodec_1.ExtensionCodec.defaultCodec, context = undefined, maxStrLength = DEFAULT_MAX_LENGTH, maxBinLength = DEFAULT_MAX_LENGTH, maxArrayLength = DEFAULT_MAX_LENGTH, maxMapLength = DEFAULT_MAX_LENGTH, maxExtLength = DEFAULT_MAX_LENGTH, keyDecoder = sharedCachedKeyDecoder){\n        this.extensionCodec = extensionCodec;\n        this.context = context;\n        this.maxStrLength = maxStrLength;\n        this.maxBinLength = maxBinLength;\n        this.maxArrayLength = maxArrayLength;\n        this.maxMapLength = maxMapLength;\n        this.maxExtLength = maxExtLength;\n        this.keyDecoder = keyDecoder;\n        this.totalPos = 0;\n        this.pos = 0;\n        this.view = EMPTY_VIEW;\n        this.bytes = EMPTY_BYTES;\n        this.headByte = HEAD_BYTE_REQUIRED;\n        this.stack = [];\n    }\n    reinitializeState() {\n        this.totalPos = 0;\n        this.headByte = HEAD_BYTE_REQUIRED;\n    }\n    setBuffer(buffer) {\n        this.bytes = typedArrays_1.ensureUint8Array(buffer);\n        this.view = typedArrays_1.createDataView(this.bytes);\n        this.pos = 0;\n    }\n    appendBuffer(buffer) {\n        if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining()) {\n            this.setBuffer(buffer);\n        } else {\n            // retried because data is insufficient\n            const remainingData = this.bytes.subarray(this.pos);\n            const newData = typedArrays_1.ensureUint8Array(buffer);\n            const concated = new Uint8Array(remainingData.length + newData.length);\n            concated.set(remainingData);\n            concated.set(newData, remainingData.length);\n            this.setBuffer(concated);\n        }\n    }\n    hasRemaining(size = 1) {\n        return this.view.byteLength - this.pos >= size;\n    }\n    createNoExtraBytesError(posToShow) {\n        const { view, pos } = this;\n        return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n    }\n    decode(buffer) {\n        this.reinitializeState();\n        this.setBuffer(buffer);\n        return this.doDecodeSingleSync();\n    }\n    doDecodeSingleSync() {\n        const object = this.doDecodeSync();\n        if (this.hasRemaining()) {\n            throw this.createNoExtraBytesError(this.pos);\n        }\n        return object;\n    }\n    async decodeAsync(stream) {\n        let decoded = false;\n        let object;\n        for await (const buffer of stream){\n            if (decoded) {\n                throw this.createNoExtraBytesError(this.totalPos);\n            }\n            this.appendBuffer(buffer);\n            try {\n                object = this.doDecodeSync();\n                decoded = true;\n            } catch (e) {\n                if (!(e instanceof exports.DataViewIndexOutOfBoundsError)) {\n                    throw e; // rethrow\n                }\n            // fallthrough\n            }\n            this.totalPos += this.pos;\n        }\n        if (decoded) {\n            if (this.hasRemaining()) {\n                throw this.createNoExtraBytesError(this.totalPos);\n            }\n            return object;\n        }\n        const { headByte, pos, totalPos } = this;\n        throw new RangeError(`Insufficient data in parcing ${prettyByte_1.prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);\n    }\n    decodeArrayStream(stream) {\n        return this.decodeMultiAsync(stream, true);\n    }\n    decodeStream(stream) {\n        return this.decodeMultiAsync(stream, false);\n    }\n    async *decodeMultiAsync(stream, isArray) {\n        let isArrayHeaderRequired = isArray;\n        let arrayItemsLeft = -1;\n        for await (const buffer of stream){\n            if (isArray && arrayItemsLeft === 0) {\n                throw this.createNoExtraBytesError(this.totalPos);\n            }\n            this.appendBuffer(buffer);\n            if (isArrayHeaderRequired) {\n                arrayItemsLeft = this.readArraySize();\n                isArrayHeaderRequired = false;\n                this.complete();\n            }\n            try {\n                while(true){\n                    yield this.doDecodeSync();\n                    if (--arrayItemsLeft === 0) {\n                        break;\n                    }\n                }\n            } catch (e) {\n                if (!(e instanceof exports.DataViewIndexOutOfBoundsError)) {\n                    throw e; // rethrow\n                }\n            // fallthrough\n            }\n            this.totalPos += this.pos;\n        }\n    }\n    doDecodeSync() {\n        DECODE: while(true){\n            const headByte = this.readHeadByte();\n            let object;\n            if (headByte >= 0xe0) {\n                // negative fixint (111x xxxx) 0xe0 - 0xff\n                object = headByte - 0x100;\n            } else if (headByte < 0xc0) {\n                if (headByte < 0x80) {\n                    // positive fixint (0xxx xxxx) 0x00 - 0x7f\n                    object = headByte;\n                } else if (headByte < 0x90) {\n                    // fixmap (1000 xxxx) 0x80 - 0x8f\n                    const size = headByte - 0x80;\n                    if (size !== 0) {\n                        this.pushMapState(size);\n                        this.complete();\n                        continue DECODE;\n                    } else {\n                        object = {};\n                    }\n                } else if (headByte < 0xa0) {\n                    // fixarray (1001 xxxx) 0x90 - 0x9f\n                    const size = headByte - 0x90;\n                    if (size !== 0) {\n                        this.pushArrayState(size);\n                        this.complete();\n                        continue DECODE;\n                    } else {\n                        object = [];\n                    }\n                } else {\n                    // fixstr (101x xxxx) 0xa0 - 0xbf\n                    const byteLength = headByte - 0xa0;\n                    object = this.decodeUtf8String(byteLength, 0);\n                }\n            } else if (headByte === 0xc0) {\n                // nil\n                object = null;\n            } else if (headByte === 0xc2) {\n                // false\n                object = false;\n            } else if (headByte === 0xc3) {\n                // true\n                object = true;\n            } else if (headByte === 0xca) {\n                // float 32\n                object = this.readF32();\n            } else if (headByte === 0xcb) {\n                // float 64\n                object = this.readF64();\n            } else if (headByte === 0xcc) {\n                // uint 8\n                object = this.readU8();\n            } else if (headByte === 0xcd) {\n                // uint 16\n                object = this.readU16();\n            } else if (headByte === 0xce) {\n                // uint 32\n                object = this.readU32();\n            } else if (headByte === 0xcf) {\n                // uint 64\n                object = this.readU64();\n            } else if (headByte === 0xd0) {\n                // int 8\n                object = this.readI8();\n            } else if (headByte === 0xd1) {\n                // int 16\n                object = this.readI16();\n            } else if (headByte === 0xd2) {\n                // int 32\n                object = this.readI32();\n            } else if (headByte === 0xd3) {\n                // int 64\n                object = this.readI64();\n            } else if (headByte === 0xd9) {\n                // str 8\n                const byteLength = this.lookU8();\n                object = this.decodeUtf8String(byteLength, 1);\n            } else if (headByte === 0xda) {\n                // str 16\n                const byteLength = this.lookU16();\n                object = this.decodeUtf8String(byteLength, 2);\n            } else if (headByte === 0xdb) {\n                // str 32\n                const byteLength = this.lookU32();\n                object = this.decodeUtf8String(byteLength, 4);\n            } else if (headByte === 0xdc) {\n                // array 16\n                const size = this.readU16();\n                if (size !== 0) {\n                    this.pushArrayState(size);\n                    this.complete();\n                    continue DECODE;\n                } else {\n                    object = [];\n                }\n            } else if (headByte === 0xdd) {\n                // array 32\n                const size = this.readU32();\n                if (size !== 0) {\n                    this.pushArrayState(size);\n                    this.complete();\n                    continue DECODE;\n                } else {\n                    object = [];\n                }\n            } else if (headByte === 0xde) {\n                // map 16\n                const size = this.readU16();\n                if (size !== 0) {\n                    this.pushMapState(size);\n                    this.complete();\n                    continue DECODE;\n                } else {\n                    object = {};\n                }\n            } else if (headByte === 0xdf) {\n                // map 32\n                const size = this.readU32();\n                if (size !== 0) {\n                    this.pushMapState(size);\n                    this.complete();\n                    continue DECODE;\n                } else {\n                    object = {};\n                }\n            } else if (headByte === 0xc4) {\n                // bin 8\n                const size = this.lookU8();\n                object = this.decodeBinary(size, 1);\n            } else if (headByte === 0xc5) {\n                // bin 16\n                const size = this.lookU16();\n                object = this.decodeBinary(size, 2);\n            } else if (headByte === 0xc6) {\n                // bin 32\n                const size = this.lookU32();\n                object = this.decodeBinary(size, 4);\n            } else if (headByte === 0xd4) {\n                // fixext 1\n                object = this.decodeExtension(1, 0);\n            } else if (headByte === 0xd5) {\n                // fixext 2\n                object = this.decodeExtension(2, 0);\n            } else if (headByte === 0xd6) {\n                // fixext 4\n                object = this.decodeExtension(4, 0);\n            } else if (headByte === 0xd7) {\n                // fixext 8\n                object = this.decodeExtension(8, 0);\n            } else if (headByte === 0xd8) {\n                // fixext 16\n                object = this.decodeExtension(16, 0);\n            } else if (headByte === 0xc7) {\n                // ext 8\n                const size = this.lookU8();\n                object = this.decodeExtension(size, 1);\n            } else if (headByte === 0xc8) {\n                // ext 16\n                const size = this.lookU16();\n                object = this.decodeExtension(size, 2);\n            } else if (headByte === 0xc9) {\n                // ext 32\n                const size = this.lookU32();\n                object = this.decodeExtension(size, 4);\n            } else {\n                throw new Error(`Unrecognized type byte: ${prettyByte_1.prettyByte(headByte)}`);\n            }\n            this.complete();\n            const stack = this.stack;\n            while(stack.length > 0){\n                // arrays and maps\n                const state = stack[stack.length - 1];\n                if (state.type === 0 /* ARRAY */ ) {\n                    state.array[state.position] = object;\n                    state.position++;\n                    if (state.position === state.size) {\n                        stack.pop();\n                        object = state.array;\n                    } else {\n                        continue DECODE;\n                    }\n                } else if (state.type === 1 /* MAP_KEY */ ) {\n                    if (!isValidMapKeyType(object)) {\n                        throw new Error(\"The type of key must be string or number but \" + typeof object);\n                    }\n                    state.key = object;\n                    state.type = 2 /* MAP_VALUE */ ;\n                    continue DECODE;\n                } else {\n                    // it must be `state.type === State.MAP_VALUE` here\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    state.map[state.key] = object;\n                    state.readCount++;\n                    if (state.readCount === state.size) {\n                        stack.pop();\n                        object = state.map;\n                    } else {\n                        state.key = null;\n                        state.type = 1 /* MAP_KEY */ ;\n                        continue DECODE;\n                    }\n                }\n            }\n            return object;\n        }\n    }\n    readHeadByte() {\n        if (this.headByte === HEAD_BYTE_REQUIRED) {\n            this.headByte = this.readU8();\n        // console.log(\"headByte\", prettyByte(this.headByte));\n        }\n        return this.headByte;\n    }\n    complete() {\n        this.headByte = HEAD_BYTE_REQUIRED;\n    }\n    readArraySize() {\n        const headByte = this.readHeadByte();\n        switch(headByte){\n            case 0xdc:\n                return this.readU16();\n            case 0xdd:\n                return this.readU32();\n            default:\n                {\n                    if (headByte < 0xa0) {\n                        return headByte - 0x90;\n                    } else {\n                        throw new Error(`Unrecognized array type byte: ${prettyByte_1.prettyByte(headByte)}`);\n                    }\n                }\n        }\n    }\n    pushMapState(size) {\n        if (size > this.maxMapLength) {\n            throw new Error(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n        }\n        this.stack.push({\n            type: 1 /* MAP_KEY */ ,\n            size,\n            key: null,\n            readCount: 0,\n            map: {}\n        });\n    }\n    pushArrayState(size) {\n        if (size > this.maxArrayLength) {\n            throw new Error(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n        }\n        this.stack.push({\n            type: 0 /* ARRAY */ ,\n            size,\n            array: new Array(size),\n            position: 0\n        });\n    }\n    decodeUtf8String(byteLength, headerOffset) {\n        var _a;\n        if (byteLength > this.maxStrLength) {\n            throw new Error(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);\n        }\n        if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n            throw MORE_DATA;\n        }\n        const offset = this.pos + headerOffset;\n        let object;\n        if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {\n            object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n        } else if (utf8_1.TEXT_ENCODING_AVAILABLE && byteLength > utf8_1.TEXT_DECODER_THRESHOLD) {\n            object = utf8_1.utf8DecodeTD(this.bytes, offset, byteLength);\n        } else {\n            object = utf8_1.utf8DecodeJs(this.bytes, offset, byteLength);\n        }\n        this.pos += headerOffset + byteLength;\n        return object;\n    }\n    stateIsMapKey() {\n        if (this.stack.length > 0) {\n            const state = this.stack[this.stack.length - 1];\n            return state.type === 1 /* MAP_KEY */ ;\n        }\n        return false;\n    }\n    decodeBinary(byteLength, headOffset) {\n        if (byteLength > this.maxBinLength) {\n            throw new Error(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n        }\n        if (!this.hasRemaining(byteLength + headOffset)) {\n            throw MORE_DATA;\n        }\n        const offset = this.pos + headOffset;\n        const object = this.bytes.subarray(offset, offset + byteLength);\n        this.pos += headOffset + byteLength;\n        return object;\n    }\n    decodeExtension(size, headOffset) {\n        if (size > this.maxExtLength) {\n            throw new Error(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n        }\n        const extType = this.view.getInt8(this.pos + headOffset);\n        const data = this.decodeBinary(size, headOffset + 1 /* extType */ );\n        return this.extensionCodec.decode(data, extType, this.context);\n    }\n    lookU8() {\n        return this.view.getUint8(this.pos);\n    }\n    lookU16() {\n        return this.view.getUint16(this.pos);\n    }\n    lookU32() {\n        return this.view.getUint32(this.pos);\n    }\n    readU8() {\n        const value = this.view.getUint8(this.pos);\n        this.pos++;\n        return value;\n    }\n    readI8() {\n        const value = this.view.getInt8(this.pos);\n        this.pos++;\n        return value;\n    }\n    readU16() {\n        const value = this.view.getUint16(this.pos);\n        this.pos += 2;\n        return value;\n    }\n    readI16() {\n        const value = this.view.getInt16(this.pos);\n        this.pos += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.view.getUint32(this.pos);\n        this.pos += 4;\n        return value;\n    }\n    readI32() {\n        const value = this.view.getInt32(this.pos);\n        this.pos += 4;\n        return value;\n    }\n    readU64() {\n        const value = int_1.getUint64(this.view, this.pos);\n        this.pos += 8;\n        return value;\n    }\n    readI64() {\n        const value = int_1.getInt64(this.view, this.pos);\n        this.pos += 8;\n        return value;\n    }\n    readF32() {\n        const value = this.view.getFloat32(this.pos);\n        this.pos += 4;\n        return value;\n    }\n    readF64() {\n        const value = this.view.getFloat64(this.pos);\n        this.pos += 8;\n        return value;\n    }\n}\nexports.Decoder = Decoder; //# sourceMappingURL=Decoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Encoder.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Encoder.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Encoder = exports.DEFAULT_INITIAL_BUFFER_SIZE = exports.DEFAULT_MAX_DEPTH = void 0;\nconst utf8_1 = __webpack_require__(/*! ./utils/utf8 */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/utf8.js\");\nconst ExtensionCodec_1 = __webpack_require__(/*! ./ExtensionCodec */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtensionCodec.js\");\nconst int_1 = __webpack_require__(/*! ./utils/int */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/int.js\");\nconst typedArrays_1 = __webpack_require__(/*! ./utils/typedArrays */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/typedArrays.js\");\nexports.DEFAULT_MAX_DEPTH = 100;\nexports.DEFAULT_INITIAL_BUFFER_SIZE = 2048;\nclass Encoder {\n    constructor(extensionCodec = ExtensionCodec_1.ExtensionCodec.defaultCodec, context = undefined, maxDepth = exports.DEFAULT_MAX_DEPTH, initialBufferSize = exports.DEFAULT_INITIAL_BUFFER_SIZE, sortKeys = false, forceFloat32 = false, ignoreUndefined = false, forceIntegerToFloat = false){\n        this.extensionCodec = extensionCodec;\n        this.context = context;\n        this.maxDepth = maxDepth;\n        this.initialBufferSize = initialBufferSize;\n        this.sortKeys = sortKeys;\n        this.forceFloat32 = forceFloat32;\n        this.ignoreUndefined = ignoreUndefined;\n        this.forceIntegerToFloat = forceIntegerToFloat;\n        this.pos = 0;\n        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n        this.bytes = new Uint8Array(this.view.buffer);\n    }\n    getUint8Array() {\n        return this.bytes.subarray(0, this.pos);\n    }\n    reinitializeState() {\n        this.pos = 0;\n    }\n    encode(object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.getUint8Array();\n    }\n    doEncode(object, depth) {\n        if (depth > this.maxDepth) {\n            throw new Error(`Too deep objects in depth ${depth}`);\n        }\n        if (object == null) {\n            this.encodeNil();\n        } else if (typeof object === \"boolean\") {\n            this.encodeBoolean(object);\n        } else if (typeof object === \"number\") {\n            this.encodeNumber(object);\n        } else if (typeof object === \"string\") {\n            this.encodeString(object);\n        } else if (typeof object === \"bigint\") {\n            this.encodebigint(object);\n        } else {\n            this.encodeObject(object, depth);\n        }\n    }\n    ensureBufferSizeToWrite(sizeToWrite) {\n        const requiredSize = this.pos + sizeToWrite;\n        if (this.view.byteLength < requiredSize) {\n            this.resizeBuffer(requiredSize * 2);\n        }\n    }\n    resizeBuffer(newSize) {\n        const newBuffer = new ArrayBuffer(newSize);\n        const newBytes = new Uint8Array(newBuffer);\n        const newView = new DataView(newBuffer);\n        newBytes.set(this.bytes);\n        this.view = newView;\n        this.bytes = newBytes;\n    }\n    encodeNil() {\n        this.writeU8(0xc0);\n    }\n    encodeBoolean(object) {\n        if (object === false) {\n            this.writeU8(0xc2);\n        } else {\n            this.writeU8(0xc3);\n        }\n    }\n    encodeNumber(object) {\n        if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n            if (object >= 0) {\n                if (object < 0x80) {\n                    // positive fixint\n                    this.writeU8(object);\n                } else if (object < 0x100) {\n                    // uint 8\n                    this.writeU8(0xcc);\n                    this.writeU8(object);\n                } else if (object < 0x10000) {\n                    // uint 16\n                    this.writeU8(0xcd);\n                    this.writeU16(object);\n                } else if (object < 0x100000000) {\n                    // uint 32\n                    this.writeU8(0xce);\n                    this.writeU32(object);\n                } else {\n                    // uint 64\n                    this.writeU8(0xcf);\n                    this.writeU64(object);\n                }\n            } else {\n                if (object >= -0x20) {\n                    // nagative fixint\n                    this.writeU8(0xe0 | object + 0x20);\n                } else if (object >= -0x80) {\n                    // int 8\n                    this.writeU8(0xd0);\n                    this.writeI8(object);\n                } else if (object >= -0x8000) {\n                    // int 16\n                    this.writeU8(0xd1);\n                    this.writeI16(object);\n                } else if (object >= -0x80000000) {\n                    // int 32\n                    this.writeU8(0xd2);\n                    this.writeI32(object);\n                } else {\n                    // int 64\n                    this.writeU8(0xd3);\n                    this.writeI64(object);\n                }\n            }\n        } else {\n            // non-integer numbers\n            if (this.forceFloat32) {\n                // float 32\n                this.writeU8(0xca);\n                this.writeF32(object);\n            } else {\n                // float 64\n                this.writeU8(0xcb);\n                this.writeF64(object);\n            }\n        }\n    }\n    encodebigint(object) {\n        if (object >= BigInt(0)) {\n            if (object < BigInt(0x80)) {\n                // positive fixint\n                this.writeU8(Number(object));\n            } else if (object < BigInt(0x100)) {\n                // uint 8\n                this.writeU8(0xcc);\n                this.writeU8(Number(object));\n            } else if (object < BigInt(0x10000)) {\n                // uint 16\n                this.writeU8(0xcd);\n                this.writeU16(Number(object));\n            } else if (object < BigInt(0x100000000)) {\n                // uint 32\n                this.writeU8(0xce);\n                this.writeU32(Number(object));\n            } else {\n                // uint 64\n                this.writeU8(0xcf);\n                this.writeBig64(object);\n            }\n        } else {\n            if (object >= BigInt(-0x20)) {\n                // nagative fixint\n                this.writeU8(0xe0 | Number(object) + 0x20);\n            } else if (object >= BigInt(-0x80)) {\n                // int 8\n                this.writeU8(0xd0);\n                this.writeI8(Number(object));\n            } else if (object >= BigInt(-0x8000)) {\n                // int 16\n                this.writeU8(0xd1);\n                this.writeI16(Number(object));\n            } else if (object >= BigInt(-0x80000000)) {\n                // int 32\n                this.writeU8(0xd2);\n                this.writeI32(Number(object));\n            } else {\n                // int 64\n                this.writeU8(0xd3);\n                this.writeBig64(object);\n            }\n        }\n    }\n    writeStringHeader(byteLength) {\n        if (byteLength < 32) {\n            // fixstr\n            this.writeU8(0xa0 + byteLength);\n        } else if (byteLength < 0x100) {\n            // str 8\n            this.writeU8(0xd9);\n            this.writeU8(byteLength);\n        } else if (byteLength < 0x10000) {\n            // str 16\n            this.writeU8(0xda);\n            this.writeU16(byteLength);\n        } else if (byteLength < 0x100000000) {\n            // str 32\n            this.writeU8(0xdb);\n            this.writeU32(byteLength);\n        } else {\n            throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n        }\n    }\n    encodeString(object) {\n        const maxHeaderSize = 1 + 4;\n        const strLength = object.length;\n        if (utf8_1.TEXT_ENCODING_AVAILABLE && strLength > utf8_1.TEXT_ENCODER_THRESHOLD) {\n            const byteLength = utf8_1.utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8_1.utf8EncodeTE(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        } else {\n            const byteLength = utf8_1.utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8_1.utf8EncodeJs(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n    }\n    encodeObject(object, depth) {\n        // try to encode objects with custom codec first of non-primitives\n        const ext = this.extensionCodec.tryToEncode(object, this.context);\n        if (ext != null) {\n            this.encodeExtension(ext);\n        } else if (Array.isArray(object)) {\n            this.encodeArray(object, depth);\n        } else if (ArrayBuffer.isView(object)) {\n            this.encodeBinary(object);\n        } else if (typeof object === \"object\") {\n            this.encodeMap(object, depth);\n        } else {\n            // symbol, function and other special object come here unless extensionCodec handles them.\n            throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n        }\n    }\n    encodeBinary(object) {\n        const size = object.byteLength;\n        if (size < 0x100) {\n            // bin 8\n            this.writeU8(0xc4);\n            this.writeU8(size);\n        } else if (size < 0x10000) {\n            // bin 16\n            this.writeU8(0xc5);\n            this.writeU16(size);\n        } else if (size < 0x100000000) {\n            // bin 32\n            this.writeU8(0xc6);\n            this.writeU32(size);\n        } else {\n            throw new Error(`Too large binary: ${size}`);\n        }\n        const bytes = typedArrays_1.ensureUint8Array(object);\n        this.writeU8a(bytes);\n    }\n    encodeArray(object, depth) {\n        const size = object.length;\n        if (size < 16) {\n            // fixarray\n            this.writeU8(0x90 + size);\n        } else if (size < 0x10000) {\n            // array 16\n            this.writeU8(0xdc);\n            this.writeU16(size);\n        } else if (size < 0x100000000) {\n            // array 32\n            this.writeU8(0xdd);\n            this.writeU32(size);\n        } else {\n            throw new Error(`Too large array: ${size}`);\n        }\n        for (const item of object){\n            this.doEncode(item, depth + 1);\n        }\n    }\n    countWithoutUndefined(object, keys) {\n        let count = 0;\n        for (const key of keys){\n            if (object[key] !== undefined) {\n                count++;\n            }\n        }\n        return count;\n    }\n    encodeMap(object, depth) {\n        const keys = Object.keys(object);\n        if (this.sortKeys) {\n            keys.sort();\n        }\n        const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n        if (size < 16) {\n            // fixmap\n            this.writeU8(0x80 + size);\n        } else if (size < 0x10000) {\n            // map 16\n            this.writeU8(0xde);\n            this.writeU16(size);\n        } else if (size < 0x100000000) {\n            // map 32\n            this.writeU8(0xdf);\n            this.writeU32(size);\n        } else {\n            throw new Error(`Too large map object: ${size}`);\n        }\n        for (const key of keys){\n            const value = object[key];\n            if (!(this.ignoreUndefined && value === undefined)) {\n                this.encodeString(key);\n                this.doEncode(value, depth + 1);\n            }\n        }\n    }\n    encodeExtension(ext) {\n        const size = ext.data.length;\n        if (size === 1) {\n            // fixext 1\n            this.writeU8(0xd4);\n        } else if (size === 2) {\n            // fixext 2\n            this.writeU8(0xd5);\n        } else if (size === 4) {\n            // fixext 4\n            this.writeU8(0xd6);\n        } else if (size === 8) {\n            // fixext 8\n            this.writeU8(0xd7);\n        } else if (size === 16) {\n            // fixext 16\n            this.writeU8(0xd8);\n        } else if (size < 0x100) {\n            // ext 8\n            this.writeU8(0xc7);\n            this.writeU8(size);\n        } else if (size < 0x10000) {\n            // ext 16\n            this.writeU8(0xc8);\n            this.writeU16(size);\n        } else if (size < 0x100000000) {\n            // ext 32\n            this.writeU8(0xc9);\n            this.writeU32(size);\n        } else {\n            throw new Error(`Too large extension object: ${size}`);\n        }\n        this.writeI8(ext.type);\n        this.writeU8a(ext.data);\n    }\n    writeU8(value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setUint8(this.pos, value);\n        this.pos++;\n    }\n    writeU8a(values) {\n        const size = values.length;\n        this.ensureBufferSizeToWrite(size);\n        this.bytes.set(values, this.pos);\n        this.pos += size;\n    }\n    writeI8(value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setInt8(this.pos, value);\n        this.pos++;\n    }\n    writeU16(value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setUint16(this.pos, value);\n        this.pos += 2;\n    }\n    writeI16(value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setInt16(this.pos, value);\n        this.pos += 2;\n    }\n    writeU32(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setUint32(this.pos, value);\n        this.pos += 4;\n    }\n    writeI32(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setInt32(this.pos, value);\n        this.pos += 4;\n    }\n    writeF32(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setFloat32(this.pos, value);\n        this.pos += 4;\n    }\n    writeF64(value) {\n        this.ensureBufferSizeToWrite(8);\n        this.view.setFloat64(this.pos, value);\n        this.pos += 8;\n    }\n    writeU64(value) {\n        this.ensureBufferSizeToWrite(8);\n        int_1.setUint64(this.view, this.pos, value);\n        this.pos += 8;\n    }\n    writeI64(value) {\n        this.ensureBufferSizeToWrite(8);\n        int_1.setInt64(this.view, this.pos, value);\n        this.pos += 8;\n    }\n    writeBig64(value) {\n        this.ensureBufferSizeToWrite(8);\n        int_1.setBigInt64(this.view, this.pos, value);\n        this.pos += 8;\n    }\n}\nexports.Encoder = Encoder; //# sourceMappingURL=Encoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtData.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtData.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExtData = void 0;\n/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */ class ExtData {\n    constructor(type, data){\n        this.type = type;\n        this.data = data;\n    }\n}\nexports.ExtData = ExtData; //# sourceMappingURL=ExtData.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9FeHREYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUcsS0FBSztBQUN2Qjs7Q0FFQyxHQUNELE1BQU1FO0lBQ0ZDLFlBQVlDLElBQUksRUFBRUMsSUFBSSxDQUFFO1FBQ3BCLElBQUksQ0FBQ0QsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtJQUNoQjtBQUNKO0FBQ0FMLGVBQWUsR0FBR0UsU0FDbEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnRAMi4xLjEvbm9kZV9tb2R1bGVzL2FsZ28tbXNncGFjay13aXRoLWJpZ2ludC9kaXN0L0V4dERhdGEuanM/ZjU2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXh0RGF0YSA9IHZvaWQgMDtcbi8qKlxuICogRXh0RGF0YSBpcyB1c2VkIHRvIGhhbmRsZSBFeHRlbnNpb24gVHlwZXMgdGhhdCBhcmUgbm90IHJlZ2lzdGVyZWQgdG8gRXh0ZW5zaW9uQ29kZWMuXG4gKi9cbmNsYXNzIEV4dERhdGEge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGRhdGEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5leHBvcnRzLkV4dERhdGEgPSBFeHREYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXh0RGF0YS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJFeHREYXRhIiwiY29uc3RydWN0b3IiLCJ0eXBlIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtData.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtensionCodec.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtensionCodec.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// ExtensionCodec to handle MessagePack extensions\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExtensionCodec = void 0;\nconst ExtData_1 = __webpack_require__(/*! ./ExtData */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtData.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/timestamp.js\");\nclass ExtensionCodec {\n    constructor(){\n        // built-in extensions\n        this.builtInEncoders = [];\n        this.builtInDecoders = [];\n        // custom extensions\n        this.encoders = [];\n        this.decoders = [];\n        this.register(timestamp_1.timestampExtension);\n    }\n    register({ type, encode, decode }) {\n        if (type >= 0) {\n            // custom extensions\n            this.encoders[type] = encode;\n            this.decoders[type] = decode;\n        } else {\n            // built-in extensions\n            const index = 1 + type;\n            this.builtInEncoders[index] = encode;\n            this.builtInDecoders[index] = decode;\n        }\n    }\n    tryToEncode(object, context) {\n        // built-in extensions\n        for(let i = 0; i < this.builtInEncoders.length; i++){\n            const encoder = this.builtInEncoders[i];\n            if (encoder != null) {\n                const data = encoder(object, context);\n                if (data != null) {\n                    const type = -1 - i;\n                    return new ExtData_1.ExtData(type, data);\n                }\n            }\n        }\n        // custom extensions\n        for(let i = 0; i < this.encoders.length; i++){\n            const encoder = this.encoders[i];\n            if (encoder != null) {\n                const data = encoder(object, context);\n                if (data != null) {\n                    const type = i;\n                    return new ExtData_1.ExtData(type, data);\n                }\n            }\n        }\n        if (object instanceof ExtData_1.ExtData) {\n            // to keep ExtData as is\n            return object;\n        }\n        return null;\n    }\n    decode(data, type, context) {\n        const decoder = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n        if (decoder) {\n            return decoder(data, type, context);\n        } else {\n            // decode() does not fail, returns ExtData instead.\n            return new ExtData_1.ExtData(type, data);\n        }\n    }\n}\nexports.ExtensionCodec = ExtensionCodec;\nExtensionCodec.defaultCodec = new ExtensionCodec(); //# sourceMappingURL=ExtensionCodec.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9FeHRlbnNpb25Db2RlYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtEQUFrRDtBQUNsREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsa0lBQVc7QUFDckMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsc0lBQWE7QUFDekMsTUFBTUY7SUFDRkksYUFBYztRQUNWLHNCQUFzQjtRQUN0QixJQUFJLENBQUNDLGVBQWUsR0FBRyxFQUFFO1FBQ3pCLElBQUksQ0FBQ0MsZUFBZSxHQUFHLEVBQUU7UUFDekIsb0JBQW9CO1FBQ3BCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsRUFBRTtRQUNsQixJQUFJLENBQUNDLFFBQVEsQ0FBQ04sWUFBWU8sa0JBQWtCO0lBQ2hEO0lBQ0FELFNBQVMsRUFBRUUsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRyxFQUFFO1FBQ2hDLElBQUlGLFFBQVEsR0FBRztZQUNYLG9CQUFvQjtZQUNwQixJQUFJLENBQUNKLFFBQVEsQ0FBQ0ksS0FBSyxHQUFHQztZQUN0QixJQUFJLENBQUNKLFFBQVEsQ0FBQ0csS0FBSyxHQUFHRTtRQUMxQixPQUNLO1lBQ0Qsc0JBQXNCO1lBQ3RCLE1BQU1DLFFBQVEsSUFBSUg7WUFDbEIsSUFBSSxDQUFDTixlQUFlLENBQUNTLE1BQU0sR0FBR0Y7WUFDOUIsSUFBSSxDQUFDTixlQUFlLENBQUNRLE1BQU0sR0FBR0Q7UUFDbEM7SUFDSjtJQUNBRSxZQUFZQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUN6QixzQkFBc0I7UUFDdEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDYixlQUFlLENBQUNjLE1BQU0sRUFBRUQsSUFBSztZQUNsRCxNQUFNRSxVQUFVLElBQUksQ0FBQ2YsZUFBZSxDQUFDYSxFQUFFO1lBQ3ZDLElBQUlFLFdBQVcsTUFBTTtnQkFDakIsTUFBTUMsT0FBT0QsUUFBUUosUUFBUUM7Z0JBQzdCLElBQUlJLFFBQVEsTUFBTTtvQkFDZCxNQUFNVixPQUFPLENBQUMsSUFBSU87b0JBQ2xCLE9BQU8sSUFBSWpCLFVBQVVxQixPQUFPLENBQUNYLE1BQU1VO2dCQUN2QztZQUNKO1FBQ0o7UUFDQSxvQkFBb0I7UUFDcEIsSUFBSyxJQUFJSCxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDWCxRQUFRLENBQUNZLE1BQU0sRUFBRUQsSUFBSztZQUMzQyxNQUFNRSxVQUFVLElBQUksQ0FBQ2IsUUFBUSxDQUFDVyxFQUFFO1lBQ2hDLElBQUlFLFdBQVcsTUFBTTtnQkFDakIsTUFBTUMsT0FBT0QsUUFBUUosUUFBUUM7Z0JBQzdCLElBQUlJLFFBQVEsTUFBTTtvQkFDZCxNQUFNVixPQUFPTztvQkFDYixPQUFPLElBQUlqQixVQUFVcUIsT0FBTyxDQUFDWCxNQUFNVTtnQkFDdkM7WUFDSjtRQUNKO1FBQ0EsSUFBSUwsa0JBQWtCZixVQUFVcUIsT0FBTyxFQUFFO1lBQ3JDLHdCQUF3QjtZQUN4QixPQUFPTjtRQUNYO1FBQ0EsT0FBTztJQUNYO0lBQ0FILE9BQU9RLElBQUksRUFBRVYsSUFBSSxFQUFFTSxPQUFPLEVBQUU7UUFDeEIsTUFBTU0sVUFBVVosT0FBTyxJQUFJLElBQUksQ0FBQ0wsZUFBZSxDQUFDLENBQUMsSUFBSUssS0FBSyxHQUFHLElBQUksQ0FBQ0gsUUFBUSxDQUFDRyxLQUFLO1FBQ2hGLElBQUlZLFNBQVM7WUFDVCxPQUFPQSxRQUFRRixNQUFNVixNQUFNTTtRQUMvQixPQUNLO1lBQ0QsbURBQW1EO1lBQ25ELE9BQU8sSUFBSWhCLFVBQVVxQixPQUFPLENBQUNYLE1BQU1VO1FBQ3ZDO0lBQ0o7QUFDSjtBQUNBdkIsc0JBQXNCLEdBQUdFO0FBQ3pCQSxlQUFld0IsWUFBWSxHQUFHLElBQUl4QixrQkFDbEMsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnRAMi4xLjEvbm9kZV9tb2R1bGVzL2FsZ28tbXNncGFjay13aXRoLWJpZ2ludC9kaXN0L0V4dGVuc2lvbkNvZGVjLmpzPzZjMDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBFeHRlbnNpb25Db2RlYyB0byBoYW5kbGUgTWVzc2FnZVBhY2sgZXh0ZW5zaW9uc1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHRlbnNpb25Db2RlYyA9IHZvaWQgMDtcbmNvbnN0IEV4dERhdGFfMSA9IHJlcXVpcmUoXCIuL0V4dERhdGFcIik7XG5jb25zdCB0aW1lc3RhbXBfMSA9IHJlcXVpcmUoXCIuL3RpbWVzdGFtcFwiKTtcbmNsYXNzIEV4dGVuc2lvbkNvZGVjIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gYnVpbHQtaW4gZXh0ZW5zaW9uc1xuICAgICAgICB0aGlzLmJ1aWx0SW5FbmNvZGVycyA9IFtdO1xuICAgICAgICB0aGlzLmJ1aWx0SW5EZWNvZGVycyA9IFtdO1xuICAgICAgICAvLyBjdXN0b20gZXh0ZW5zaW9uc1xuICAgICAgICB0aGlzLmVuY29kZXJzID0gW107XG4gICAgICAgIHRoaXMuZGVjb2RlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aW1lc3RhbXBfMS50aW1lc3RhbXBFeHRlbnNpb24pO1xuICAgIH1cbiAgICByZWdpc3Rlcih7IHR5cGUsIGVuY29kZSwgZGVjb2RlLCB9KSB7XG4gICAgICAgIGlmICh0eXBlID49IDApIHtcbiAgICAgICAgICAgIC8vIGN1c3RvbSBleHRlbnNpb25zXG4gICAgICAgICAgICB0aGlzLmVuY29kZXJzW3R5cGVdID0gZW5jb2RlO1xuICAgICAgICAgICAgdGhpcy5kZWNvZGVyc1t0eXBlXSA9IGRlY29kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGJ1aWx0LWluIGV4dGVuc2lvbnNcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gMSArIHR5cGU7XG4gICAgICAgICAgICB0aGlzLmJ1aWx0SW5FbmNvZGVyc1tpbmRleF0gPSBlbmNvZGU7XG4gICAgICAgICAgICB0aGlzLmJ1aWx0SW5EZWNvZGVyc1tpbmRleF0gPSBkZWNvZGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJ5VG9FbmNvZGUob2JqZWN0LCBjb250ZXh0KSB7XG4gICAgICAgIC8vIGJ1aWx0LWluIGV4dGVuc2lvbnNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJ1aWx0SW5FbmNvZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IHRoaXMuYnVpbHRJbkVuY29kZXJzW2ldO1xuICAgICAgICAgICAgaWYgKGVuY29kZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVyKG9iamVjdCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gLTEgLSBpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEV4dERhdGFfMS5FeHREYXRhKHR5cGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjdXN0b20gZXh0ZW5zaW9uc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZW5jb2RlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSB0aGlzLmVuY29kZXJzW2ldO1xuICAgICAgICAgICAgaWYgKGVuY29kZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVyKG9iamVjdCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gaTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFeHREYXRhXzEuRXh0RGF0YSh0eXBlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEV4dERhdGFfMS5FeHREYXRhKSB7XG4gICAgICAgICAgICAvLyB0byBrZWVwIEV4dERhdGEgYXMgaXNcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGRlY29kZShkYXRhLCB0eXBlLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGRlY29kZXIgPSB0eXBlIDwgMCA/IHRoaXMuYnVpbHRJbkRlY29kZXJzWy0xIC0gdHlwZV0gOiB0aGlzLmRlY29kZXJzW3R5cGVdO1xuICAgICAgICBpZiAoZGVjb2Rlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZXIoZGF0YSwgdHlwZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBkZWNvZGUoKSBkb2VzIG5vdCBmYWlsLCByZXR1cm5zIEV4dERhdGEgaW5zdGVhZC5cbiAgICAgICAgICAgIHJldHVybiBuZXcgRXh0RGF0YV8xLkV4dERhdGEodHlwZSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkV4dGVuc2lvbkNvZGVjID0gRXh0ZW5zaW9uQ29kZWM7XG5FeHRlbnNpb25Db2RlYy5kZWZhdWx0Q29kZWMgPSBuZXcgRXh0ZW5zaW9uQ29kZWMoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4dGVuc2lvbkNvZGVjLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkV4dGVuc2lvbkNvZGVjIiwiRXh0RGF0YV8xIiwicmVxdWlyZSIsInRpbWVzdGFtcF8xIiwiY29uc3RydWN0b3IiLCJidWlsdEluRW5jb2RlcnMiLCJidWlsdEluRGVjb2RlcnMiLCJlbmNvZGVycyIsImRlY29kZXJzIiwicmVnaXN0ZXIiLCJ0aW1lc3RhbXBFeHRlbnNpb24iLCJ0eXBlIiwiZW5jb2RlIiwiZGVjb2RlIiwiaW5kZXgiLCJ0cnlUb0VuY29kZSIsIm9iamVjdCIsImNvbnRleHQiLCJpIiwibGVuZ3RoIiwiZW5jb2RlciIsImRhdGEiLCJFeHREYXRhIiwiZGVjb2RlciIsImRlZmF1bHRDb2RlYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtensionCodec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decode.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decode.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decode = exports.defaultDecodeOptions = void 0;\nconst Decoder_1 = __webpack_require__(/*! ./Decoder */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Decoder.js\");\nexports.defaultDecodeOptions = {};\n/**\n * It decodes a MessagePack-encoded buffer.\n *\n * This is a synchronous decoding function. See other variants for asynchronous decoding: `decodeAsync()`, `decodeStream()`, `decodeArrayStream()`.\n */ function decode(buffer, options = exports.defaultDecodeOptions) {\n    const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decode(buffer);\n}\nexports.decode = decode; //# sourceMappingURL=decode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9kZWNvZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0EsNEJBQTRCLEdBQUcsS0FBSztBQUNyRCxNQUFNSSxZQUFZQyxtQkFBT0EsQ0FBQyxrSUFBVztBQUNyQ0wsNEJBQTRCLEdBQUcsQ0FBQztBQUNoQzs7OztDQUlDLEdBQ0QsU0FBU0UsT0FBT0ksTUFBTSxFQUFFQyxVQUFVUCxRQUFRRyxvQkFBb0I7SUFDMUQsTUFBTUssVUFBVSxJQUFJSixVQUFVSyxPQUFPLENBQUNGLFFBQVFHLGNBQWMsRUFBRUgsUUFBUUksT0FBTyxFQUFFSixRQUFRSyxZQUFZLEVBQUVMLFFBQVFNLFlBQVksRUFBRU4sUUFBUU8sY0FBYyxFQUFFUCxRQUFRUSxZQUFZLEVBQUVSLFFBQVFTLFlBQVk7SUFDN0wsT0FBT1IsUUFBUU4sTUFBTSxDQUFDSTtBQUMxQjtBQUNBTixjQUFjLEdBQUdFLFFBQ2pCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9kZWNvZGUuanM/MjI4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5kZWZhdWx0RGVjb2RlT3B0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IERlY29kZXJfMSA9IHJlcXVpcmUoXCIuL0RlY29kZXJcIik7XG5leHBvcnRzLmRlZmF1bHREZWNvZGVPcHRpb25zID0ge307XG4vKipcbiAqIEl0IGRlY29kZXMgYSBNZXNzYWdlUGFjay1lbmNvZGVkIGJ1ZmZlci5cbiAqXG4gKiBUaGlzIGlzIGEgc3luY2hyb25vdXMgZGVjb2RpbmcgZnVuY3Rpb24uIFNlZSBvdGhlciB2YXJpYW50cyBmb3IgYXN5bmNocm9ub3VzIGRlY29kaW5nOiBgZGVjb2RlQXN5bmMoKWAsIGBkZWNvZGVTdHJlYW0oKWAsIGBkZWNvZGVBcnJheVN0cmVhbSgpYC5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlKGJ1ZmZlciwgb3B0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdERlY29kZU9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IERlY29kZXJfMS5EZWNvZGVyKG9wdGlvbnMuZXh0ZW5zaW9uQ29kZWMsIG9wdGlvbnMuY29udGV4dCwgb3B0aW9ucy5tYXhTdHJMZW5ndGgsIG9wdGlvbnMubWF4QmluTGVuZ3RoLCBvcHRpb25zLm1heEFycmF5TGVuZ3RoLCBvcHRpb25zLm1heE1hcExlbmd0aCwgb3B0aW9ucy5tYXhFeHRMZW5ndGgpO1xuICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShidWZmZXIpO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVjb2RlIiwiZGVmYXVsdERlY29kZU9wdGlvbnMiLCJEZWNvZGVyXzEiLCJyZXF1aXJlIiwiYnVmZmVyIiwib3B0aW9ucyIsImRlY29kZXIiLCJEZWNvZGVyIiwiZXh0ZW5zaW9uQ29kZWMiLCJjb250ZXh0IiwibWF4U3RyTGVuZ3RoIiwibWF4QmluTGVuZ3RoIiwibWF4QXJyYXlMZW5ndGgiLCJtYXhNYXBMZW5ndGgiLCJtYXhFeHRMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decodeAsync.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decodeAsync.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeStream = exports.decodeArrayStream = exports.decodeAsync = void 0;\nconst Decoder_1 = __webpack_require__(/*! ./Decoder */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Decoder.js\");\nconst decode_1 = __webpack_require__(/*! ./decode */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decode.js\");\nconst stream_1 = __webpack_require__(/*! ./utils/stream */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/stream.js\");\nasync function decodeAsync(streamLike, options = decode_1.defaultDecodeOptions) {\n    const stream = stream_1.ensureAsyncIterabe(streamLike);\n    const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeAsync(stream);\n}\nexports.decodeAsync = decodeAsync;\nfunction decodeArrayStream(streamLike, options = decode_1.defaultDecodeOptions) {\n    const stream = stream_1.ensureAsyncIterabe(streamLike);\n    const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeArrayStream(stream);\n}\nexports.decodeArrayStream = decodeArrayStream;\nfunction decodeStream(streamLike, options = decode_1.defaultDecodeOptions) {\n    const stream = stream_1.ensureAsyncIterabe(streamLike);\n    const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeStream(stream);\n}\nexports.decodeStream = decodeStream; //# sourceMappingURL=decodeAsync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9kZWNvZGVBc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLHlCQUF5QixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQzlFLE1BQU1LLFlBQVlDLG1CQUFPQSxDQUFDLGtJQUFXO0FBQ3JDLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLGdJQUFVO0FBQ25DLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLDRJQUFnQjtBQUN6QyxlQUFlRixZQUFZSyxVQUFVLEVBQUVDLFVBQVVILFNBQVNJLG9CQUFvQjtJQUMxRSxNQUFNQyxTQUFTSixTQUFTSyxrQkFBa0IsQ0FBQ0o7SUFDM0MsTUFBTUssVUFBVSxJQUFJVCxVQUFVVSxPQUFPLENBQUNMLFFBQVFNLGNBQWMsRUFBRU4sUUFBUU8sT0FBTyxFQUFFUCxRQUFRUSxZQUFZLEVBQUVSLFFBQVFTLFlBQVksRUFBRVQsUUFBUVUsY0FBYyxFQUFFVixRQUFRVyxZQUFZLEVBQUVYLFFBQVFZLFlBQVk7SUFDN0wsT0FBT1IsUUFBUVYsV0FBVyxDQUFDUTtBQUMvQjtBQUNBWixtQkFBbUIsR0FBR0k7QUFDdEIsU0FBU0Qsa0JBQWtCTSxVQUFVLEVBQUVDLFVBQVVILFNBQVNJLG9CQUFvQjtJQUMxRSxNQUFNQyxTQUFTSixTQUFTSyxrQkFBa0IsQ0FBQ0o7SUFDM0MsTUFBTUssVUFBVSxJQUFJVCxVQUFVVSxPQUFPLENBQUNMLFFBQVFNLGNBQWMsRUFBRU4sUUFBUU8sT0FBTyxFQUFFUCxRQUFRUSxZQUFZLEVBQUVSLFFBQVFTLFlBQVksRUFBRVQsUUFBUVUsY0FBYyxFQUFFVixRQUFRVyxZQUFZLEVBQUVYLFFBQVFZLFlBQVk7SUFDN0wsT0FBT1IsUUFBUVgsaUJBQWlCLENBQUNTO0FBQ3JDO0FBQ0FaLHlCQUF5QixHQUFHRztBQUM1QixTQUFTRCxhQUFhTyxVQUFVLEVBQUVDLFVBQVVILFNBQVNJLG9CQUFvQjtJQUNyRSxNQUFNQyxTQUFTSixTQUFTSyxrQkFBa0IsQ0FBQ0o7SUFDM0MsTUFBTUssVUFBVSxJQUFJVCxVQUFVVSxPQUFPLENBQUNMLFFBQVFNLGNBQWMsRUFBRU4sUUFBUU8sT0FBTyxFQUFFUCxRQUFRUSxZQUFZLEVBQUVSLFFBQVFTLFlBQVksRUFBRVQsUUFBUVUsY0FBYyxFQUFFVixRQUFRVyxZQUFZLEVBQUVYLFFBQVFZLFlBQVk7SUFDN0wsT0FBT1IsUUFBUVosWUFBWSxDQUFDVTtBQUNoQztBQUNBWixvQkFBb0IsR0FBR0UsY0FDdkIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnRAMi4xLjEvbm9kZV9tb2R1bGVzL2FsZ28tbXNncGFjay13aXRoLWJpZ2ludC9kaXN0L2RlY29kZUFzeW5jLmpzP2FiNTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZVN0cmVhbSA9IGV4cG9ydHMuZGVjb2RlQXJyYXlTdHJlYW0gPSBleHBvcnRzLmRlY29kZUFzeW5jID0gdm9pZCAwO1xuY29uc3QgRGVjb2Rlcl8xID0gcmVxdWlyZShcIi4vRGVjb2RlclwiKTtcbmNvbnN0IGRlY29kZV8xID0gcmVxdWlyZShcIi4vZGVjb2RlXCIpO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi91dGlscy9zdHJlYW1cIik7XG5hc3luYyBmdW5jdGlvbiBkZWNvZGVBc3luYyhzdHJlYW1MaWtlLCBvcHRpb25zID0gZGVjb2RlXzEuZGVmYXVsdERlY29kZU9wdGlvbnMpIHtcbiAgICBjb25zdCBzdHJlYW0gPSBzdHJlYW1fMS5lbnN1cmVBc3luY0l0ZXJhYmUoc3RyZWFtTGlrZSk7XG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBEZWNvZGVyXzEuRGVjb2RlcihvcHRpb25zLmV4dGVuc2lvbkNvZGVjLCBvcHRpb25zLmNvbnRleHQsIG9wdGlvbnMubWF4U3RyTGVuZ3RoLCBvcHRpb25zLm1heEJpbkxlbmd0aCwgb3B0aW9ucy5tYXhBcnJheUxlbmd0aCwgb3B0aW9ucy5tYXhNYXBMZW5ndGgsIG9wdGlvbnMubWF4RXh0TGVuZ3RoKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGVBc3luYyhzdHJlYW0pO1xufVxuZXhwb3J0cy5kZWNvZGVBc3luYyA9IGRlY29kZUFzeW5jO1xuZnVuY3Rpb24gZGVjb2RlQXJyYXlTdHJlYW0oc3RyZWFtTGlrZSwgb3B0aW9ucyA9IGRlY29kZV8xLmRlZmF1bHREZWNvZGVPcHRpb25zKSB7XG4gICAgY29uc3Qgc3RyZWFtID0gc3RyZWFtXzEuZW5zdXJlQXN5bmNJdGVyYWJlKHN0cmVhbUxpa2UpO1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgRGVjb2Rlcl8xLkRlY29kZXIob3B0aW9ucy5leHRlbnNpb25Db2RlYywgb3B0aW9ucy5jb250ZXh0LCBvcHRpb25zLm1heFN0ckxlbmd0aCwgb3B0aW9ucy5tYXhCaW5MZW5ndGgsIG9wdGlvbnMubWF4QXJyYXlMZW5ndGgsIG9wdGlvbnMubWF4TWFwTGVuZ3RoLCBvcHRpb25zLm1heEV4dExlbmd0aCk7XG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlQXJyYXlTdHJlYW0oc3RyZWFtKTtcbn1cbmV4cG9ydHMuZGVjb2RlQXJyYXlTdHJlYW0gPSBkZWNvZGVBcnJheVN0cmVhbTtcbmZ1bmN0aW9uIGRlY29kZVN0cmVhbShzdHJlYW1MaWtlLCBvcHRpb25zID0gZGVjb2RlXzEuZGVmYXVsdERlY29kZU9wdGlvbnMpIHtcbiAgICBjb25zdCBzdHJlYW0gPSBzdHJlYW1fMS5lbnN1cmVBc3luY0l0ZXJhYmUoc3RyZWFtTGlrZSk7XG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBEZWNvZGVyXzEuRGVjb2RlcihvcHRpb25zLmV4dGVuc2lvbkNvZGVjLCBvcHRpb25zLmNvbnRleHQsIG9wdGlvbnMubWF4U3RyTGVuZ3RoLCBvcHRpb25zLm1heEJpbkxlbmd0aCwgb3B0aW9ucy5tYXhBcnJheUxlbmd0aCwgb3B0aW9ucy5tYXhNYXBMZW5ndGgsIG9wdGlvbnMubWF4RXh0TGVuZ3RoKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGVTdHJlYW0oc3RyZWFtKTtcbn1cbmV4cG9ydHMuZGVjb2RlU3RyZWFtID0gZGVjb2RlU3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlQXN5bmMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVjb2RlU3RyZWFtIiwiZGVjb2RlQXJyYXlTdHJlYW0iLCJkZWNvZGVBc3luYyIsIkRlY29kZXJfMSIsInJlcXVpcmUiLCJkZWNvZGVfMSIsInN0cmVhbV8xIiwic3RyZWFtTGlrZSIsIm9wdGlvbnMiLCJkZWZhdWx0RGVjb2RlT3B0aW9ucyIsInN0cmVhbSIsImVuc3VyZUFzeW5jSXRlcmFiZSIsImRlY29kZXIiLCJEZWNvZGVyIiwiZXh0ZW5zaW9uQ29kZWMiLCJjb250ZXh0IiwibWF4U3RyTGVuZ3RoIiwibWF4QmluTGVuZ3RoIiwibWF4QXJyYXlMZW5ndGgiLCJtYXhNYXBMZW5ndGgiLCJtYXhFeHRMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decodeAsync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/encode.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/encode.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.encode = void 0;\nconst Encoder_1 = __webpack_require__(/*! ./Encoder */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Encoder.js\");\nconst defaultEncodeOptions = {};\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */ function encode(value, options = defaultEncodeOptions) {\n    const encoder = new Encoder_1.Encoder(options.extensionCodec, options.context, options.maxDepth, options.initialBufferSize, options.sortKeys, options.forceFloat32, options.ignoreUndefined, options.forceIntegerToFloat);\n    return encoder.encode(value);\n}\nexports.encode = encode; //# sourceMappingURL=encode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9lbmNvZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBRyxLQUFLO0FBQ3RCLE1BQU1HLFlBQVlDLG1CQUFPQSxDQUFDLGtJQUFXO0FBQ3JDLE1BQU1DLHVCQUF1QixDQUFDO0FBQzlCOzs7OztDQUtDLEdBQ0QsU0FBU0gsT0FBT0QsS0FBSyxFQUFFSyxVQUFVRCxvQkFBb0I7SUFDakQsTUFBTUUsVUFBVSxJQUFJSixVQUFVSyxPQUFPLENBQUNGLFFBQVFHLGNBQWMsRUFBRUgsUUFBUUksT0FBTyxFQUFFSixRQUFRSyxRQUFRLEVBQUVMLFFBQVFNLGlCQUFpQixFQUFFTixRQUFRTyxRQUFRLEVBQUVQLFFBQVFRLFlBQVksRUFBRVIsUUFBUVMsZUFBZSxFQUFFVCxRQUFRVSxtQkFBbUI7SUFDeE4sT0FBT1QsUUFBUUwsTUFBTSxDQUFDRDtBQUMxQjtBQUNBRCxjQUFjLEdBQUdFLFFBQ2pCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9lbmNvZGUuanM/NWUwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZW5jb2RlID0gdm9pZCAwO1xuY29uc3QgRW5jb2Rlcl8xID0gcmVxdWlyZShcIi4vRW5jb2RlclwiKTtcbmNvbnN0IGRlZmF1bHRFbmNvZGVPcHRpb25zID0ge307XG4vKipcbiAqIEl0IGVuY29kZXMgYHZhbHVlYCBpbiB0aGUgTWVzc2FnZVBhY2sgZm9ybWF0IGFuZFxuICogcmV0dXJucyBhIGJ5dGUgYnVmZmVyLlxuICpcbiAqIFRoZSByZXR1cm5lZCBidWZmZXIgaXMgYSBzbGljZSBvZiBhIGxhcmdlciBgQXJyYXlCdWZmZXJgLCBzbyB5b3UgaGF2ZSB0byB1c2UgaXRzIGAjYnl0ZU9mZnNldGAgYW5kIGAjYnl0ZUxlbmd0aGAgaW4gb3JkZXIgdG8gY29udmVydCBpdCB0byBhbm90aGVyIHR5cGVkIGFycmF5cyBpbmNsdWRpbmcgTm9kZUpTIGBCdWZmZXJgLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsdWUsIG9wdGlvbnMgPSBkZWZhdWx0RW5jb2RlT3B0aW9ucykge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRW5jb2Rlcl8xLkVuY29kZXIob3B0aW9ucy5leHRlbnNpb25Db2RlYywgb3B0aW9ucy5jb250ZXh0LCBvcHRpb25zLm1heERlcHRoLCBvcHRpb25zLmluaXRpYWxCdWZmZXJTaXplLCBvcHRpb25zLnNvcnRLZXlzLCBvcHRpb25zLmZvcmNlRmxvYXQzMiwgb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQsIG9wdGlvbnMuZm9yY2VJbnRlZ2VyVG9GbG9hdCk7XG4gICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKHZhbHVlKTtcbn1cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVuY29kZSIsIkVuY29kZXJfMSIsInJlcXVpcmUiLCJkZWZhdWx0RW5jb2RlT3B0aW9ucyIsIm9wdGlvbnMiLCJlbmNvZGVyIiwiRW5jb2RlciIsImV4dGVuc2lvbkNvZGVjIiwiY29udGV4dCIsIm1heERlcHRoIiwiaW5pdGlhbEJ1ZmZlclNpemUiLCJzb3J0S2V5cyIsImZvcmNlRmxvYXQzMiIsImlnbm9yZVVuZGVmaW5lZCIsImZvcmNlSW50ZWdlclRvRmxvYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/encode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/index.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/index.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Main Functions:\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeTimestampExtension = exports.encodeTimestampExtension = exports.decodeTimestampToTimeSpec = exports.encodeTimeSpecToTimestamp = exports.encodeDateToTimeSpec = exports.EXT_TIMESTAMP = exports.ExtData = exports.ExtensionCodec = exports.Encoder = exports.Decoder = exports.decodeStream = exports.decodeArrayStream = exports.decodeAsync = exports.decode = exports.encode = void 0;\nvar encode_1 = __webpack_require__(/*! ./encode */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/encode.js\");\nObject.defineProperty(exports, \"encode\", ({\n    enumerable: true,\n    get: function() {\n        return encode_1.encode;\n    }\n}));\nvar decode_1 = __webpack_require__(/*! ./decode */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decode.js\");\nObject.defineProperty(exports, \"decode\", ({\n    enumerable: true,\n    get: function() {\n        return decode_1.decode;\n    }\n}));\nvar decodeAsync_1 = __webpack_require__(/*! ./decodeAsync */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/decodeAsync.js\");\nObject.defineProperty(exports, \"decodeAsync\", ({\n    enumerable: true,\n    get: function() {\n        return decodeAsync_1.decodeAsync;\n    }\n}));\nObject.defineProperty(exports, \"decodeArrayStream\", ({\n    enumerable: true,\n    get: function() {\n        return decodeAsync_1.decodeArrayStream;\n    }\n}));\nObject.defineProperty(exports, \"decodeStream\", ({\n    enumerable: true,\n    get: function() {\n        return decodeAsync_1.decodeStream;\n    }\n}));\n/**\n * @experimental `Decoder` is exported for experimental use.\n */ var Decoder_1 = __webpack_require__(/*! ./Decoder */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Decoder.js\");\nObject.defineProperty(exports, \"Decoder\", ({\n    enumerable: true,\n    get: function() {\n        return Decoder_1.Decoder;\n    }\n}));\n/**\n * @experimental `Encoder` is exported for experimental use.\n */ var Encoder_1 = __webpack_require__(/*! ./Encoder */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/Encoder.js\");\nObject.defineProperty(exports, \"Encoder\", ({\n    enumerable: true,\n    get: function() {\n        return Encoder_1.Encoder;\n    }\n}));\n// Utilitiies for Extension Types:\nvar ExtensionCodec_1 = __webpack_require__(/*! ./ExtensionCodec */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtensionCodec.js\");\nObject.defineProperty(exports, \"ExtensionCodec\", ({\n    enumerable: true,\n    get: function() {\n        return ExtensionCodec_1.ExtensionCodec;\n    }\n}));\nvar ExtData_1 = __webpack_require__(/*! ./ExtData */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/ExtData.js\");\nObject.defineProperty(exports, \"ExtData\", ({\n    enumerable: true,\n    get: function() {\n        return ExtData_1.ExtData;\n    }\n}));\nvar timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/timestamp.js\");\nObject.defineProperty(exports, \"EXT_TIMESTAMP\", ({\n    enumerable: true,\n    get: function() {\n        return timestamp_1.EXT_TIMESTAMP;\n    }\n}));\nObject.defineProperty(exports, \"encodeDateToTimeSpec\", ({\n    enumerable: true,\n    get: function() {\n        return timestamp_1.encodeDateToTimeSpec;\n    }\n}));\nObject.defineProperty(exports, \"encodeTimeSpecToTimestamp\", ({\n    enumerable: true,\n    get: function() {\n        return timestamp_1.encodeTimeSpecToTimestamp;\n    }\n}));\nObject.defineProperty(exports, \"decodeTimestampToTimeSpec\", ({\n    enumerable: true,\n    get: function() {\n        return timestamp_1.decodeTimestampToTimeSpec;\n    }\n}));\nObject.defineProperty(exports, \"encodeTimestampExtension\", ({\n    enumerable: true,\n    get: function() {\n        return timestamp_1.encodeTimestampExtension;\n    }\n}));\nObject.defineProperty(exports, \"decodeTimestampExtension\", ({\n    enumerable: true,\n    get: function() {\n        return timestamp_1.decodeTimestampExtension;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtCQUFrQjtBQUNsQkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHQSxnQ0FBZ0MsR0FBR0EsaUNBQWlDLEdBQUdBLGlDQUFpQyxHQUFHQSw0QkFBNEIsR0FBR0EscUJBQXFCLEdBQUdBLGVBQWUsR0FBR0Esc0JBQXNCLEdBQUdBLGVBQWUsR0FBR0EsZUFBZSxHQUFHQSxvQkFBb0IsR0FBR0EseUJBQXlCLEdBQUdBLG1CQUFtQixHQUFHQSxjQUFjLEdBQUdBLGNBQWMsR0FBRyxLQUFLO0FBQ3BZLElBQUlpQixXQUFXQyxtQkFBT0EsQ0FBQyxnSUFBVTtBQUNqQ3BCLDBDQUF5QztJQUFFcUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0QsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVHLElBQUlLLFdBQVdILG1CQUFPQSxDQUFDLGdJQUFVO0FBQ2pDcEIsMENBQXlDO0lBQUVxQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxTQUFTTixNQUFNO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDNUcsSUFBSU8sZ0JBQWdCSixtQkFBT0EsQ0FBQywwSUFBZTtBQUMzQ3BCLCtDQUE4QztJQUFFcUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsY0FBY1IsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNIaEIscURBQW9EO0lBQUVxQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxjQUFjVCxpQkFBaUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SWYsZ0RBQStDO0lBQUVxQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxjQUFjVixZQUFZO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0g7O0NBRUMsR0FDRCxJQUFJVyxZQUFZTCxtQkFBT0EsQ0FBQyxrSUFBVztBQUNuQ3BCLDJDQUEwQztJQUFFcUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csVUFBVVosT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQy9HOztDQUVDLEdBQ0QsSUFBSWEsWUFBWU4sbUJBQU9BLENBQUMsa0lBQVc7QUFDbkNwQiwyQ0FBMEM7SUFBRXFCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9JLFVBQVVkLE9BQU87SUFBRTtBQUFFLENBQUMsRUFBQztBQUMvRyxrQ0FBa0M7QUFDbEMsSUFBSWUsbUJBQW1CUCxtQkFBT0EsQ0FBQyxnSkFBa0I7QUFDakRwQixrREFBaUQ7SUFBRXFCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9LLGlCQUFpQmhCLGNBQWM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNwSSxJQUFJaUIsWUFBWVIsbUJBQU9BLENBQUMsa0lBQVc7QUFDbkNwQiwyQ0FBMEM7SUFBRXFCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9NLFVBQVVsQixPQUFPO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDL0csSUFBSW1CLGNBQWNULG1CQUFPQSxDQUFDLHNJQUFhO0FBQ3ZDcEIsaURBQWdEO0lBQUVxQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPTyxZQUFZcEIsYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzdIVCx3REFBdUQ7SUFBRXFCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9PLFlBQVlyQixvQkFBb0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMzSVIsNkRBQTREO0lBQUVxQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPTyxZQUFZdEIseUJBQXlCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDckpQLDZEQUE0RDtJQUFFcUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT08sWUFBWXZCLHlCQUF5QjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JKTiw0REFBMkQ7SUFBRXFCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9PLFlBQVl4Qix3QkFBd0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNuSkwsNERBQTJEO0lBQUVxQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPTyxZQUFZekIsd0JBQXdCO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDbkosaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnRAMi4xLjEvbm9kZV9tb2R1bGVzL2FsZ28tbXNncGFjay13aXRoLWJpZ2ludC9kaXN0L2luZGV4LmpzPzU4NzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBNYWluIEZ1bmN0aW9uczpcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlVGltZXN0YW1wRXh0ZW5zaW9uID0gZXhwb3J0cy5lbmNvZGVUaW1lc3RhbXBFeHRlbnNpb24gPSBleHBvcnRzLmRlY29kZVRpbWVzdGFtcFRvVGltZVNwZWMgPSBleHBvcnRzLmVuY29kZVRpbWVTcGVjVG9UaW1lc3RhbXAgPSBleHBvcnRzLmVuY29kZURhdGVUb1RpbWVTcGVjID0gZXhwb3J0cy5FWFRfVElNRVNUQU1QID0gZXhwb3J0cy5FeHREYXRhID0gZXhwb3J0cy5FeHRlbnNpb25Db2RlYyA9IGV4cG9ydHMuRW5jb2RlciA9IGV4cG9ydHMuRGVjb2RlciA9IGV4cG9ydHMuZGVjb2RlU3RyZWFtID0gZXhwb3J0cy5kZWNvZGVBcnJheVN0cmVhbSA9IGV4cG9ydHMuZGVjb2RlQXN5bmMgPSBleHBvcnRzLmRlY29kZSA9IGV4cG9ydHMuZW5jb2RlID0gdm9pZCAwO1xudmFyIGVuY29kZV8xID0gcmVxdWlyZShcIi4vZW5jb2RlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfMS5lbmNvZGU7IH0gfSk7XG52YXIgZGVjb2RlXzEgPSByZXF1aXJlKFwiLi9kZWNvZGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8xLmRlY29kZTsgfSB9KTtcbnZhciBkZWNvZGVBc3luY18xID0gcmVxdWlyZShcIi4vZGVjb2RlQXN5bmNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVBc3luY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlQXN5bmNfMS5kZWNvZGVBc3luYzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUFycmF5U3RyZWFtXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVBc3luY18xLmRlY29kZUFycmF5U3RyZWFtOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlU3RyZWFtXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVBc3luY18xLmRlY29kZVN0cmVhbTsgfSB9KTtcbi8qKlxuICogQGV4cGVyaW1lbnRhbCBgRGVjb2RlcmAgaXMgZXhwb3J0ZWQgZm9yIGV4cGVyaW1lbnRhbCB1c2UuXG4gKi9cbnZhciBEZWNvZGVyXzEgPSByZXF1aXJlKFwiLi9EZWNvZGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVjb2RlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRGVjb2Rlcl8xLkRlY29kZXI7IH0gfSk7XG4vKipcbiAqIEBleHBlcmltZW50YWwgYEVuY29kZXJgIGlzIGV4cG9ydGVkIGZvciBleHBlcmltZW50YWwgdXNlLlxuICovXG52YXIgRW5jb2Rlcl8xID0gcmVxdWlyZShcIi4vRW5jb2RlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVuY29kZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVuY29kZXJfMS5FbmNvZGVyOyB9IH0pO1xuLy8gVXRpbGl0aWllcyBmb3IgRXh0ZW5zaW9uIFR5cGVzOlxudmFyIEV4dGVuc2lvbkNvZGVjXzEgPSByZXF1aXJlKFwiLi9FeHRlbnNpb25Db2RlY1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV4dGVuc2lvbkNvZGVjXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBFeHRlbnNpb25Db2RlY18xLkV4dGVuc2lvbkNvZGVjOyB9IH0pO1xudmFyIEV4dERhdGFfMSA9IHJlcXVpcmUoXCIuL0V4dERhdGFcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHREYXRhXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBFeHREYXRhXzEuRXh0RGF0YTsgfSB9KTtcbnZhciB0aW1lc3RhbXBfMSA9IHJlcXVpcmUoXCIuL3RpbWVzdGFtcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVYVF9USU1FU1RBTVBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRpbWVzdGFtcF8xLkVYVF9USU1FU1RBTVA7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVEYXRlVG9UaW1lU3BlY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZXN0YW1wXzEuZW5jb2RlRGF0ZVRvVGltZVNwZWM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVUaW1lU3BlY1RvVGltZXN0YW1wXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lc3RhbXBfMS5lbmNvZGVUaW1lU3BlY1RvVGltZXN0YW1wOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlVGltZXN0YW1wVG9UaW1lU3BlY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZXN0YW1wXzEuZGVjb2RlVGltZXN0YW1wVG9UaW1lU3BlYzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZVRpbWVzdGFtcEV4dGVuc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZXN0YW1wXzEuZW5jb2RlVGltZXN0YW1wRXh0ZW5zaW9uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlVGltZXN0YW1wRXh0ZW5zaW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lc3RhbXBfMS5kZWNvZGVUaW1lc3RhbXBFeHRlbnNpb247IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGVUaW1lc3RhbXBFeHRlbnNpb24iLCJlbmNvZGVUaW1lc3RhbXBFeHRlbnNpb24iLCJkZWNvZGVUaW1lc3RhbXBUb1RpbWVTcGVjIiwiZW5jb2RlVGltZVNwZWNUb1RpbWVzdGFtcCIsImVuY29kZURhdGVUb1RpbWVTcGVjIiwiRVhUX1RJTUVTVEFNUCIsIkV4dERhdGEiLCJFeHRlbnNpb25Db2RlYyIsIkVuY29kZXIiLCJEZWNvZGVyIiwiZGVjb2RlU3RyZWFtIiwiZGVjb2RlQXJyYXlTdHJlYW0iLCJkZWNvZGVBc3luYyIsImRlY29kZSIsImVuY29kZSIsImVuY29kZV8xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWNvZGVfMSIsImRlY29kZUFzeW5jXzEiLCJEZWNvZGVyXzEiLCJFbmNvZGVyXzEiLCJFeHRlbnNpb25Db2RlY18xIiwiRXh0RGF0YV8xIiwidGltZXN0YW1wXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/timestamp.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/timestamp.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.timestampExtension = exports.decodeTimestampExtension = exports.decodeTimestampToTimeSpec = exports.encodeTimestampExtension = exports.encodeDateToTimeSpec = exports.encodeTimeSpecToTimestamp = exports.EXT_TIMESTAMP = void 0;\n// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nconst int_1 = __webpack_require__(/*! ./utils/int */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/int.js\");\nexports.EXT_TIMESTAMP = -1;\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\nfunction encodeTimeSpecToTimestamp({ sec, nsec }) {\n    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n        // Here sec >= 0 && nsec >= 0\n        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n            // timestamp 32 = { sec32 (unsigned) }\n            const rv = new Uint8Array(4);\n            const view = new DataView(rv.buffer);\n            view.setUint32(0, sec);\n            return rv;\n        } else {\n            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n            const secHigh = sec / 0x100000000;\n            const secLow = sec & 0xffffffff;\n            const rv = new Uint8Array(8);\n            const view = new DataView(rv.buffer);\n            // nsec30 | secHigh2\n            view.setUint32(0, nsec << 2 | secHigh & 0x3);\n            // secLow32\n            view.setUint32(4, secLow);\n            return rv;\n        }\n    } else {\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n        const rv = new Uint8Array(12);\n        const view = new DataView(rv.buffer);\n        view.setUint32(0, nsec);\n        int_1.setInt64(view, 4, sec);\n        return rv;\n    }\n}\nexports.encodeTimeSpecToTimestamp = encodeTimeSpecToTimestamp;\nfunction encodeDateToTimeSpec(date) {\n    const msec = date.getTime();\n    const sec = Math.floor(msec / 1e3);\n    const nsec = (msec - sec * 1e3) * 1e6;\n    // Normalizes { sec, nsec } to ensure nsec is unsigned.\n    const nsecInSec = Math.floor(nsec / 1e9);\n    return {\n        sec: sec + nsecInSec,\n        nsec: nsec - nsecInSec * 1e9\n    };\n}\nexports.encodeDateToTimeSpec = encodeDateToTimeSpec;\nfunction encodeTimestampExtension(object) {\n    if (object instanceof Date) {\n        const timeSpec = encodeDateToTimeSpec(object);\n        return encodeTimeSpecToTimestamp(timeSpec);\n    } else {\n        return null;\n    }\n}\nexports.encodeTimestampExtension = encodeTimestampExtension;\nfunction decodeTimestampToTimeSpec(data) {\n    const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    // data may be 32, 64, or 96 bits\n    switch(data.byteLength){\n        case 4:\n            {\n                // timestamp 32 = { sec32 }\n                const sec = view.getUint32(0);\n                const nsec = 0;\n                return {\n                    sec,\n                    nsec\n                };\n            }\n        case 8:\n            {\n                // timestamp 64 = { nsec30, sec34 }\n                const nsec30AndSecHigh2 = view.getUint32(0);\n                const secLow32 = view.getUint32(4);\n                const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n                const nsec = nsec30AndSecHigh2 >>> 2;\n                return {\n                    sec,\n                    nsec\n                };\n            }\n        case 12:\n            {\n                // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n                const sec = int_1.getInt64(view, 4);\n                const nsec = view.getUint32(0);\n                return {\n                    sec,\n                    nsec\n                };\n            }\n        default:\n            throw new Error(`Unrecognized data size for timestamp: ${data.length}`);\n    }\n}\nexports.decodeTimestampToTimeSpec = decodeTimestampToTimeSpec;\nfunction decodeTimestampExtension(data) {\n    const timeSpec = decodeTimestampToTimeSpec(data);\n    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\nexports.decodeTimestampExtension = decodeTimestampExtension;\nexports.timestampExtension = {\n    type: exports.EXT_TIMESTAMP,\n    encode: encodeTimestampExtension,\n    decode: decodeTimestampExtension\n}; //# sourceMappingURL=timestamp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/timestamp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/int.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/int.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getUint64 = exports.getInt64 = exports.setBigInt64 = exports.setInt64 = exports.setUint64 = void 0;\nfunction setUint64(view, offset, value) {\n    const high = value / 4294967296;\n    const low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexports.setUint64 = setUint64;\nfunction setInt64(view, offset, value) {\n    const high = Math.floor(value / 4294967296);\n    const low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexports.setInt64 = setInt64;\nfunction setBigInt64(view, offset, value) {\n    let high = Number(value / BigInt(4294967296));\n    const low = Number(value % BigInt(4294967296));\n    if (high < 0 && low !== 0) {\n        // simulate Math.floor for negative high\n        high -= 1;\n    }\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexports.setBigInt64 = setBigInt64;\nfunction getInt64(view, offset) {\n    const high = view.getInt32(offset);\n    const low = view.getUint32(offset + 4);\n    const exceeds_min_safe_int = high < Math.floor(Number.MIN_SAFE_INTEGER / 4294967296) || high === Math.floor(Number.MIN_SAFE_INTEGER / 4294967296) && low === 0;\n    const exceeds_max_safe_int = high > Math.floor(Number.MAX_SAFE_INTEGER / 4294967296);\n    if (exceeds_min_safe_int || exceeds_max_safe_int) {\n        return BigInt(high) * BigInt(4294967296) + BigInt(low);\n    }\n    return high * 4294967296 + low;\n}\nexports.getInt64 = getInt64;\nfunction getUint64(view, offset) {\n    const high = view.getUint32(offset);\n    const low = view.getUint32(offset + 4);\n    const exceeds_max_safe_int = high > Math.floor(Number.MAX_SAFE_INTEGER / 4294967296);\n    if (exceeds_max_safe_int) {\n        return BigInt(high) * BigInt(4294967296) + BigInt(low);\n    }\n    return high * 4294967296 + low;\n}\nexports.getUint64 = getUint64; //# sourceMappingURL=int.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC91dGlscy9pbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwrQ0FBK0M7QUFDL0Msa0VBQWtFO0FBQ2xFQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSxtQkFBbUIsR0FBR0EsZ0JBQWdCLEdBQUdBLGlCQUFpQixHQUFHLEtBQUs7QUFDekcsU0FBU00sVUFBVUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVQLEtBQUs7SUFDbEMsTUFBTVEsT0FBT1IsUUFBUTtJQUNyQixNQUFNUyxNQUFNVCxPQUFPLHNDQUFzQztJQUN6RE0sS0FBS0ksU0FBUyxDQUFDSCxRQUFRQztJQUN2QkYsS0FBS0ksU0FBUyxDQUFDSCxTQUFTLEdBQUdFO0FBQy9CO0FBQ0FWLGlCQUFpQixHQUFHTTtBQUNwQixTQUFTRCxTQUFTRSxJQUFJLEVBQUVDLE1BQU0sRUFBRVAsS0FBSztJQUNqQyxNQUFNUSxPQUFPRyxLQUFLQyxLQUFLLENBQUNaLFFBQVE7SUFDaEMsTUFBTVMsTUFBTVQsT0FBTyxzQ0FBc0M7SUFDekRNLEtBQUtJLFNBQVMsQ0FBQ0gsUUFBUUM7SUFDdkJGLEtBQUtJLFNBQVMsQ0FBQ0gsU0FBUyxHQUFHRTtBQUMvQjtBQUNBVixnQkFBZ0IsR0FBR0s7QUFDbkIsU0FBU0QsWUFBWUcsSUFBSSxFQUFFQyxNQUFNLEVBQUVQLEtBQUs7SUFDcEMsSUFBSVEsT0FBT0ssT0FBT2IsUUFBUWMsT0FBTztJQUNqQyxNQUFNTCxNQUFNSSxPQUFPYixRQUFRYyxPQUFPO0lBQ2xDLElBQUlOLE9BQU8sS0FBS0MsUUFBUSxHQUFHO1FBQ3ZCLHdDQUF3QztRQUN4Q0QsUUFBUTtJQUNaO0lBQ0FGLEtBQUtJLFNBQVMsQ0FBQ0gsUUFBUUM7SUFDdkJGLEtBQUtJLFNBQVMsQ0FBQ0gsU0FBUyxHQUFHRTtBQUMvQjtBQUNBVixtQkFBbUIsR0FBR0k7QUFDdEIsU0FBU0QsU0FBU0ksSUFBSSxFQUFFQyxNQUFNO0lBQzFCLE1BQU1DLE9BQU9GLEtBQUtTLFFBQVEsQ0FBQ1I7SUFDM0IsTUFBTUUsTUFBTUgsS0FBS1UsU0FBUyxDQUFDVCxTQUFTO0lBQ3BDLE1BQU1VLHVCQUF1QlQsT0FBT0csS0FBS0MsS0FBSyxDQUFDQyxPQUFPSyxnQkFBZ0IsR0FBRyxlQUNwRVYsU0FBU0csS0FBS0MsS0FBSyxDQUFDQyxPQUFPSyxnQkFBZ0IsR0FBRyxlQUFlVCxRQUFRO0lBQzFFLE1BQU1VLHVCQUF1QlgsT0FBT0csS0FBS0MsS0FBSyxDQUFDQyxPQUFPTyxnQkFBZ0IsR0FBRztJQUN6RSxJQUFJSCx3QkFBd0JFLHNCQUFzQjtRQUM5QyxPQUFPTCxPQUFPTixRQUFRTSxPQUFPLGNBQWNBLE9BQU9MO0lBQ3REO0lBQ0EsT0FBT0QsT0FBTyxhQUFhQztBQUMvQjtBQUNBVixnQkFBZ0IsR0FBR0c7QUFDbkIsU0FBU0QsVUFBVUssSUFBSSxFQUFFQyxNQUFNO0lBQzNCLE1BQU1DLE9BQU9GLEtBQUtVLFNBQVMsQ0FBQ1Q7SUFDNUIsTUFBTUUsTUFBTUgsS0FBS1UsU0FBUyxDQUFDVCxTQUFTO0lBQ3BDLE1BQU1ZLHVCQUF1QlgsT0FBT0csS0FBS0MsS0FBSyxDQUFDQyxPQUFPTyxnQkFBZ0IsR0FBRztJQUN6RSxJQUFJRCxzQkFBc0I7UUFDdEIsT0FBT0wsT0FBT04sUUFBUU0sT0FBTyxjQUFjQSxPQUFPTDtJQUN0RDtJQUNBLE9BQU9ELE9BQU8sYUFBYUM7QUFDL0I7QUFDQVYsaUJBQWlCLEdBQUdFLFdBQ3BCLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC91dGlscy9pbnQuanM/ZmMyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIERhdGFWaWV3IGV4dGVuc2lvbiB0byBoYW5kbGUgaW50NjQgLyB1aW50NjQsXG4vLyB3aGVyZSB0aGUgYWN0dWFsIHJhbmdlIGlzIDUzLWJpdHMgaW50ZWdlciAoYS5rLmEuIHNhZmUgaW50ZWdlcilcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VWludDY0ID0gZXhwb3J0cy5nZXRJbnQ2NCA9IGV4cG9ydHMuc2V0QmlnSW50NjQgPSBleHBvcnRzLnNldEludDY0ID0gZXhwb3J0cy5zZXRVaW50NjQgPSB2b2lkIDA7XG5mdW5jdGlvbiBzZXRVaW50NjQodmlldywgb2Zmc2V0LCB2YWx1ZSkge1xuICAgIGNvbnN0IGhpZ2ggPSB2YWx1ZSAvIDQyOTQ5NjcyOTY7XG4gICAgY29uc3QgbG93ID0gdmFsdWU7IC8vIGhpZ2ggYml0cyBhcmUgdHJ1bmNhdGVkIGJ5IERhdGFWaWV3XG4gICAgdmlldy5zZXRVaW50MzIob2Zmc2V0LCBoaWdoKTtcbiAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQgKyA0LCBsb3cpO1xufVxuZXhwb3J0cy5zZXRVaW50NjQgPSBzZXRVaW50NjQ7XG5mdW5jdGlvbiBzZXRJbnQ2NCh2aWV3LCBvZmZzZXQsIHZhbHVlKSB7XG4gICAgY29uc3QgaGlnaCA9IE1hdGguZmxvb3IodmFsdWUgLyA0Mjk0OTY3Mjk2KTtcbiAgICBjb25zdCBsb3cgPSB2YWx1ZTsgLy8gaGlnaCBiaXRzIGFyZSB0cnVuY2F0ZWQgYnkgRGF0YVZpZXdcbiAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQsIGhpZ2gpO1xuICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCArIDQsIGxvdyk7XG59XG5leHBvcnRzLnNldEludDY0ID0gc2V0SW50NjQ7XG5mdW5jdGlvbiBzZXRCaWdJbnQ2NCh2aWV3LCBvZmZzZXQsIHZhbHVlKSB7XG4gICAgbGV0IGhpZ2ggPSBOdW1iZXIodmFsdWUgLyBCaWdJbnQoNDI5NDk2NzI5NikpO1xuICAgIGNvbnN0IGxvdyA9IE51bWJlcih2YWx1ZSAlIEJpZ0ludCg0Mjk0OTY3Mjk2KSk7XG4gICAgaWYgKGhpZ2ggPCAwICYmIGxvdyAhPT0gMCkge1xuICAgICAgICAvLyBzaW11bGF0ZSBNYXRoLmZsb29yIGZvciBuZWdhdGl2ZSBoaWdoXG4gICAgICAgIGhpZ2ggLT0gMTtcbiAgICB9XG4gICAgdmlldy5zZXRVaW50MzIob2Zmc2V0LCBoaWdoKTtcbiAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQgKyA0LCBsb3cpO1xufVxuZXhwb3J0cy5zZXRCaWdJbnQ2NCA9IHNldEJpZ0ludDY0O1xuZnVuY3Rpb24gZ2V0SW50NjQodmlldywgb2Zmc2V0KSB7XG4gICAgY29uc3QgaGlnaCA9IHZpZXcuZ2V0SW50MzIob2Zmc2V0KTtcbiAgICBjb25zdCBsb3cgPSB2aWV3LmdldFVpbnQzMihvZmZzZXQgKyA0KTtcbiAgICBjb25zdCBleGNlZWRzX21pbl9zYWZlX2ludCA9IGhpZ2ggPCBNYXRoLmZsb29yKE51bWJlci5NSU5fU0FGRV9JTlRFR0VSIC8gNDI5NDk2NzI5NikgfHxcbiAgICAgICAgKGhpZ2ggPT09IE1hdGguZmxvb3IoTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIgLyA0Mjk0OTY3Mjk2KSAmJiBsb3cgPT09IDApO1xuICAgIGNvbnN0IGV4Y2VlZHNfbWF4X3NhZmVfaW50ID0gaGlnaCA+IE1hdGguZmxvb3IoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgLyA0Mjk0OTY3Mjk2KTtcbiAgICBpZiAoZXhjZWVkc19taW5fc2FmZV9pbnQgfHwgZXhjZWVkc19tYXhfc2FmZV9pbnQpIHtcbiAgICAgICAgcmV0dXJuIEJpZ0ludChoaWdoKSAqIEJpZ0ludCg0Mjk0OTY3Mjk2KSArIEJpZ0ludChsb3cpO1xuICAgIH1cbiAgICByZXR1cm4gaGlnaCAqIDQyOTQ5NjcyOTYgKyBsb3c7XG59XG5leHBvcnRzLmdldEludDY0ID0gZ2V0SW50NjQ7XG5mdW5jdGlvbiBnZXRVaW50NjQodmlldywgb2Zmc2V0KSB7XG4gICAgY29uc3QgaGlnaCA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgY29uc3QgbG93ID0gdmlldy5nZXRVaW50MzIob2Zmc2V0ICsgNCk7XG4gICAgY29uc3QgZXhjZWVkc19tYXhfc2FmZV9pbnQgPSBoaWdoID4gTWF0aC5mbG9vcihOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAvIDQyOTQ5NjcyOTYpO1xuICAgIGlmIChleGNlZWRzX21heF9zYWZlX2ludCkge1xuICAgICAgICByZXR1cm4gQmlnSW50KGhpZ2gpICogQmlnSW50KDQyOTQ5NjcyOTYpICsgQmlnSW50KGxvdyk7XG4gICAgfVxuICAgIHJldHVybiBoaWdoICogNDI5NDk2NzI5NiArIGxvdztcbn1cbmV4cG9ydHMuZ2V0VWludDY0ID0gZ2V0VWludDY0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFVpbnQ2NCIsImdldEludDY0Iiwic2V0QmlnSW50NjQiLCJzZXRJbnQ2NCIsInNldFVpbnQ2NCIsInZpZXciLCJvZmZzZXQiLCJoaWdoIiwibG93Iiwic2V0VWludDMyIiwiTWF0aCIsImZsb29yIiwiTnVtYmVyIiwiQmlnSW50IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJleGNlZWRzX21pbl9zYWZlX2ludCIsIk1JTl9TQUZFX0lOVEVHRVIiLCJleGNlZWRzX21heF9zYWZlX2ludCIsIk1BWF9TQUZFX0lOVEVHRVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/prettyByte.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/prettyByte.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.prettyByte = void 0;\nfunction prettyByte(byte) {\n    return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\n}\nexports.prettyByte = prettyByte; //# sourceMappingURL=prettyByte.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC91dGlscy9wcmV0dHlCeXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLFNBQVNFLFdBQVdDLElBQUk7SUFDcEIsT0FBTyxDQUFDLEVBQUVBLE9BQU8sSUFBSSxNQUFNLEdBQUcsRUFBRSxFQUFFQyxLQUFLQyxHQUFHLENBQUNGLE1BQU1HLFFBQVEsQ0FBQyxJQUFJQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDcEY7QUFDQVAsa0JBQWtCLEdBQUdFLFlBQ3JCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC91dGlscy9wcmV0dHlCeXRlLmpzP2IzYmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByZXR0eUJ5dGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBwcmV0dHlCeXRlKGJ5dGUpIHtcbiAgICByZXR1cm4gYCR7Ynl0ZSA8IDAgPyBcIi1cIiA6IFwiXCJ9MHgke01hdGguYWJzKGJ5dGUpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIil9YDtcbn1cbmV4cG9ydHMucHJldHR5Qnl0ZSA9IHByZXR0eUJ5dGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmV0dHlCeXRlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByZXR0eUJ5dGUiLCJieXRlIiwiTWF0aCIsImFicyIsInRvU3RyaW5nIiwicGFkU3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/prettyByte.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/stream.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/stream.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// utility for whatwg streams\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ensureAsyncIterabe = exports.asyncIterableFromStream = exports.isAsyncIterable = void 0;\nfunction isAsyncIterable(object) {\n    return object[Symbol.asyncIterator] != null;\n}\nexports.isAsyncIterable = isAsyncIterable;\nfunction assertNonNull(value) {\n    if (value == null) {\n        throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n    }\n}\nasync function* asyncIterableFromStream(stream) {\n    const reader = stream.getReader();\n    try {\n        while(true){\n            const { done, value } = await reader.read();\n            if (done) {\n                return;\n            }\n            assertNonNull(value);\n            yield value;\n        }\n    } finally{\n        reader.releaseLock();\n    }\n}\nexports.asyncIterableFromStream = asyncIterableFromStream;\nfunction ensureAsyncIterabe(streamLike) {\n    if (isAsyncIterable(streamLike)) {\n        return streamLike;\n    } else {\n        return asyncIterableFromStream(streamLike);\n    }\n}\nexports.ensureAsyncIterabe = ensureAsyncIterabe; //# sourceMappingURL=stream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC91dGlscy9zdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw2QkFBNkI7QUFDN0JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0EsK0JBQStCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDOUYsU0FBU0ksZ0JBQWdCQyxNQUFNO0lBQzNCLE9BQU9BLE1BQU0sQ0FBQ0MsT0FBT0MsYUFBYSxDQUFDLElBQUk7QUFDM0M7QUFDQVAsdUJBQXVCLEdBQUdJO0FBQzFCLFNBQVNJLGNBQWNQLEtBQUs7SUFDeEIsSUFBSUEsU0FBUyxNQUFNO1FBQ2YsTUFBTSxJQUFJUSxNQUFNO0lBQ3BCO0FBQ0o7QUFDQSxnQkFBZ0JOLHdCQUF3Qk8sTUFBTTtJQUMxQyxNQUFNQyxTQUFTRCxPQUFPRSxTQUFTO0lBQy9CLElBQUk7UUFDQSxNQUFPLEtBQU07WUFDVCxNQUFNLEVBQUVDLElBQUksRUFBRVosS0FBSyxFQUFFLEdBQUcsTUFBTVUsT0FBT0csSUFBSTtZQUN6QyxJQUFJRCxNQUFNO2dCQUNOO1lBQ0o7WUFDQUwsY0FBY1A7WUFDZCxNQUFNQTtRQUNWO0lBQ0osU0FDUTtRQUNKVSxPQUFPSSxXQUFXO0lBQ3RCO0FBQ0o7QUFDQWYsK0JBQStCLEdBQUdHO0FBQ2xDLFNBQVNELG1CQUFtQmMsVUFBVTtJQUNsQyxJQUFJWixnQkFBZ0JZLGFBQWE7UUFDN0IsT0FBT0E7SUFDWCxPQUNLO1FBQ0QsT0FBT2Isd0JBQXdCYTtJQUNuQztBQUNKO0FBQ0FoQiwwQkFBMEIsR0FBR0Usb0JBQzdCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC91dGlscy9zdHJlYW0uanM/M2ZmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIHV0aWxpdHkgZm9yIHdoYXR3ZyBzdHJlYW1zXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuc3VyZUFzeW5jSXRlcmFiZSA9IGV4cG9ydHMuYXN5bmNJdGVyYWJsZUZyb21TdHJlYW0gPSBleHBvcnRzLmlzQXN5bmNJdGVyYWJsZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSAhPSBudWxsO1xufVxuZXhwb3J0cy5pc0FzeW5jSXRlcmFibGUgPSBpc0FzeW5jSXRlcmFibGU7XG5mdW5jdGlvbiBhc3NlcnROb25OdWxsKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXNzZXJ0aW9uIEZhaWx1cmU6IHZhbHVlIG11c3Qgbm90IGJlIG51bGwgbm9yIHVuZGVmaW5lZFwiKTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiogYXN5bmNJdGVyYWJsZUZyb21TdHJlYW0oc3RyZWFtKSB7XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnROb25OdWxsKHZhbHVlKTtcbiAgICAgICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICB9XG59XG5leHBvcnRzLmFzeW5jSXRlcmFibGVGcm9tU3RyZWFtID0gYXN5bmNJdGVyYWJsZUZyb21TdHJlYW07XG5mdW5jdGlvbiBlbnN1cmVBc3luY0l0ZXJhYmUoc3RyZWFtTGlrZSkge1xuICAgIGlmIChpc0FzeW5jSXRlcmFibGUoc3RyZWFtTGlrZSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmVhbUxpa2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYXN5bmNJdGVyYWJsZUZyb21TdHJlYW0oc3RyZWFtTGlrZSk7XG4gICAgfVxufVxuZXhwb3J0cy5lbnN1cmVBc3luY0l0ZXJhYmUgPSBlbnN1cmVBc3luY0l0ZXJhYmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW0uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW5zdXJlQXN5bmNJdGVyYWJlIiwiYXN5bmNJdGVyYWJsZUZyb21TdHJlYW0iLCJpc0FzeW5jSXRlcmFibGUiLCJvYmplY3QiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwiYXNzZXJ0Tm9uTnVsbCIsIkVycm9yIiwic3RyZWFtIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwiZG9uZSIsInJlYWQiLCJyZWxlYXNlTG9jayIsInN0cmVhbUxpa2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/typedArrays.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/typedArrays.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createDataView = exports.ensureUint8Array = void 0;\nfunction ensureUint8Array(buffer) {\n    if (buffer instanceof Uint8Array) {\n        return buffer;\n    } else if (ArrayBuffer.isView(buffer)) {\n        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    } else if (buffer instanceof ArrayBuffer) {\n        return new Uint8Array(buffer);\n    } else {\n        // ArrayLike<number>\n        return Uint8Array.from(buffer);\n    }\n}\nexports.ensureUint8Array = ensureUint8Array;\nfunction createDataView(buffer) {\n    if (buffer instanceof ArrayBuffer) {\n        return new DataView(buffer);\n    }\n    const bufferView = ensureUint8Array(buffer);\n    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\nexports.createDataView = createDataView; //# sourceMappingURL=typedArrays.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC91dGlscy90eXBlZEFycmF5cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUdBLHdCQUF3QixHQUFHLEtBQUs7QUFDekQsU0FBU0csaUJBQWlCQyxNQUFNO0lBQzVCLElBQUlBLGtCQUFrQkMsWUFBWTtRQUM5QixPQUFPRDtJQUNYLE9BQ0ssSUFBSUUsWUFBWUMsTUFBTSxDQUFDSCxTQUFTO1FBQ2pDLE9BQU8sSUFBSUMsV0FBV0QsT0FBT0EsTUFBTSxFQUFFQSxPQUFPSSxVQUFVLEVBQUVKLE9BQU9LLFVBQVU7SUFDN0UsT0FDSyxJQUFJTCxrQkFBa0JFLGFBQWE7UUFDcEMsT0FBTyxJQUFJRCxXQUFXRDtJQUMxQixPQUNLO1FBQ0Qsb0JBQW9CO1FBQ3BCLE9BQU9DLFdBQVdLLElBQUksQ0FBQ047SUFDM0I7QUFDSjtBQUNBSix3QkFBd0IsR0FBR0c7QUFDM0IsU0FBU0QsZUFBZUUsTUFBTTtJQUMxQixJQUFJQSxrQkFBa0JFLGFBQWE7UUFDL0IsT0FBTyxJQUFJSyxTQUFTUDtJQUN4QjtJQUNBLE1BQU1RLGFBQWFULGlCQUFpQkM7SUFDcEMsT0FBTyxJQUFJTyxTQUFTQyxXQUFXUixNQUFNLEVBQUVRLFdBQVdKLFVBQVUsRUFBRUksV0FBV0gsVUFBVTtBQUN2RjtBQUNBVCxzQkFBc0IsR0FBR0UsZ0JBQ3pCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50QDIuMS4xL25vZGVfbW9kdWxlcy9hbGdvLW1zZ3BhY2std2l0aC1iaWdpbnQvZGlzdC91dGlscy90eXBlZEFycmF5cy5qcz83MTlkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVEYXRhVmlldyA9IGV4cG9ydHMuZW5zdXJlVWludDhBcnJheSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGVuc3VyZVVpbnQ4QXJyYXkoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gQXJyYXlMaWtlPG51bWJlcj5cbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShidWZmZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuZW5zdXJlVWludDhBcnJheSA9IGVuc3VyZVVpbnQ4QXJyYXk7XG5mdW5jdGlvbiBjcmVhdGVEYXRhVmlldyhidWZmZXIpIHtcbiAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgIH1cbiAgICBjb25zdCBidWZmZXJWaWV3ID0gZW5zdXJlVWludDhBcnJheShidWZmZXIpO1xuICAgIHJldHVybiBuZXcgRGF0YVZpZXcoYnVmZmVyVmlldy5idWZmZXIsIGJ1ZmZlclZpZXcuYnl0ZU9mZnNldCwgYnVmZmVyVmlldy5ieXRlTGVuZ3RoKTtcbn1cbmV4cG9ydHMuY3JlYXRlRGF0YVZpZXcgPSBjcmVhdGVEYXRhVmlldztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVkQXJyYXlzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZURhdGFWaWV3IiwiZW5zdXJlVWludDhBcnJheSIsImJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiZnJvbSIsIkRhdGFWaWV3IiwiYnVmZmVyVmlldyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/typedArrays.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/utf8.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/utf8.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.utf8DecodeTD = exports.TEXT_DECODER_THRESHOLD = exports.utf8DecodeJs = exports.utf8EncodeTE = exports.TEXT_ENCODER_THRESHOLD = exports.utf8EncodeJs = exports.utf8Count = exports.TEXT_ENCODING_AVAILABLE = void 0;\nexports.TEXT_ENCODING_AVAILABLE = typeof process !== \"undefined\" && process.env.TEXT_ENCODING !== \"never\" && typeof TextEncoder !== \"undefined\" && typeof TextDecoder !== \"undefined\";\nfunction utf8Count(str) {\n    const strLength = str.length;\n    let byteLength = 0;\n    let pos = 0;\n    while(pos < strLength){\n        let value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            byteLength++;\n            continue;\n        } else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            byteLength += 2;\n        } else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    const extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                byteLength += 3;\n            } else {\n                // 4-byte\n                byteLength += 4;\n            }\n        }\n    }\n    return byteLength;\n}\nexports.utf8Count = utf8Count;\nfunction utf8EncodeJs(str, output, outputOffset) {\n    const strLength = str.length;\n    let offset = outputOffset;\n    let pos = 0;\n    while(pos < strLength){\n        let value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            output[offset++] = value;\n            continue;\n        } else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            output[offset++] = value >> 6 & 0x1f | 0xc0;\n        } else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    const extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                output[offset++] = value >> 12 & 0x0f | 0xe0;\n                output[offset++] = value >> 6 & 0x3f | 0x80;\n            } else {\n                // 4-byte\n                output[offset++] = value >> 18 & 0x07 | 0xf0;\n                output[offset++] = value >> 12 & 0x3f | 0x80;\n                output[offset++] = value >> 6 & 0x3f | 0x80;\n            }\n        }\n        output[offset++] = value & 0x3f | 0x80;\n    }\n}\nexports.utf8EncodeJs = utf8EncodeJs;\nconst sharedTextEncoder = exports.TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexports.TEXT_ENCODER_THRESHOLD = typeof process !== \"undefined\" && process.env.TEXT_ENCODING !== \"force\" ? 200 : 0;\nfunction utf8EncodeTEencode(str, output, outputOffset) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    output.set(sharedTextEncoder.encode(str), outputOffset);\n}\nfunction utf8EncodeTEencodeInto(str, output, outputOffset) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\n}\nexports.utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\nconst CHUNK_SIZE = 4096;\nfunction utf8DecodeJs(bytes, inputOffset, byteLength) {\n    let offset = inputOffset;\n    const end = offset + byteLength;\n    const units = [];\n    let result = \"\";\n    while(offset < end){\n        const byte1 = bytes[offset++];\n        if ((byte1 & 0x80) === 0) {\n            // 1 byte\n            units.push(byte1);\n        } else if ((byte1 & 0xe0) === 0xc0) {\n            // 2 bytes\n            const byte2 = bytes[offset++] & 0x3f;\n            units.push((byte1 & 0x1f) << 6 | byte2);\n        } else if ((byte1 & 0xf0) === 0xe0) {\n            // 3 bytes\n            const byte2 = bytes[offset++] & 0x3f;\n            const byte3 = bytes[offset++] & 0x3f;\n            units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);\n        } else if ((byte1 & 0xf8) === 0xf0) {\n            // 4 bytes\n            const byte2 = bytes[offset++] & 0x3f;\n            const byte3 = bytes[offset++] & 0x3f;\n            const byte4 = bytes[offset++] & 0x3f;\n            let unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n            if (unit > 0xffff) {\n                unit -= 0x10000;\n                units.push(unit >>> 10 & 0x3ff | 0xd800);\n                unit = 0xdc00 | unit & 0x3ff;\n            }\n            units.push(unit);\n        } else {\n            units.push(byte1);\n        }\n        if (units.length >= CHUNK_SIZE) {\n            result += String.fromCharCode(...units);\n            units.length = 0;\n        }\n    }\n    if (units.length > 0) {\n        result += String.fromCharCode(...units);\n    }\n    return result;\n}\nexports.utf8DecodeJs = utf8DecodeJs;\nconst sharedTextDecoder = exports.TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexports.TEXT_DECODER_THRESHOLD = typeof process !== \"undefined\" && process.env.TEXT_DECODER !== \"force\" ? 200 : 0;\nfunction utf8DecodeTD(bytes, inputOffset, byteLength) {\n    const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return sharedTextDecoder.decode(stringBytes);\n}\nexports.utf8DecodeTD = utf8DecodeTD; //# sourceMappingURL=utf8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/utils/utf8.js\n");

/***/ })

};
;