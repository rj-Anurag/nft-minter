"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/depd@1.1.2";
exports.ids = ["vendor-chunks/depd@1.1.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/.pnpm/depd@1.1.2/node_modules/depd/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * depd\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */ /**\n * Module dependencies.\n */ \nvar callSiteToString = (__webpack_require__(/*! ./lib/compat */ \"(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/index.js\").callSiteToString);\nvar eventListenerCount = (__webpack_require__(/*! ./lib/compat */ \"(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/index.js\").eventListenerCount);\nvar relative = (__webpack_require__(/*! path */ \"path\").relative);\n/**\n * Module exports.\n */ module.exports = depd;\n/**\n * Get the path to base files on.\n */ var basePath = process.cwd();\n/**\n * Determine if namespace is contained in the string.\n */ function containsNamespace(str, namespace) {\n    var vals = str.split(/[ ,]+/);\n    var ns = String(namespace).toLowerCase();\n    for(var i = 0; i < vals.length; i++){\n        var val = vals[i];\n        // namespace contained\n        if (val && (val === \"*\" || val.toLowerCase() === ns)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Convert a data descriptor to accessor descriptor.\n */ function convertDataDescriptorToAccessor(obj, prop, message) {\n    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n    var value = descriptor.value;\n    descriptor.get = function getter() {\n        return value;\n    };\n    if (descriptor.writable) {\n        descriptor.set = function setter(val) {\n            return value = val;\n        };\n    }\n    delete descriptor.value;\n    delete descriptor.writable;\n    Object.defineProperty(obj, prop, descriptor);\n    return descriptor;\n}\n/**\n * Create arguments string to keep arity.\n */ function createArgumentsString(arity) {\n    var str = \"\";\n    for(var i = 0; i < arity; i++){\n        str += \", arg\" + i;\n    }\n    return str.substr(2);\n}\n/**\n * Create stack string from stack.\n */ function createStackString(stack) {\n    var str = this.name + \": \" + this.namespace;\n    if (this.message) {\n        str += \" deprecated \" + this.message;\n    }\n    for(var i = 0; i < stack.length; i++){\n        str += \"\\n    at \" + callSiteToString(stack[i]);\n    }\n    return str;\n}\n/**\n * Create deprecate for namespace in caller.\n */ function depd(namespace) {\n    if (!namespace) {\n        throw new TypeError(\"argument namespace is required\");\n    }\n    var stack = getStack();\n    var site = callSiteLocation(stack[1]);\n    var file = site[0];\n    function deprecate(message) {\n        // call to self as log\n        log.call(deprecate, message);\n    }\n    deprecate._file = file;\n    deprecate._ignored = isignored(namespace);\n    deprecate._namespace = namespace;\n    deprecate._traced = istraced(namespace);\n    deprecate._warned = Object.create(null);\n    deprecate.function = wrapfunction;\n    deprecate.property = wrapproperty;\n    return deprecate;\n}\n/**\n * Determine if namespace is ignored.\n */ function isignored(namespace) {\n    /* istanbul ignore next: tested in a child processs */ if (process.noDeprecation) {\n        // --no-deprecation support\n        return true;\n    }\n    var str = process.env.NO_DEPRECATION || \"\";\n    // namespace ignored\n    return containsNamespace(str, namespace);\n}\n/**\n * Determine if namespace is traced.\n */ function istraced(namespace) {\n    /* istanbul ignore next: tested in a child processs */ if (process.traceDeprecation) {\n        // --trace-deprecation support\n        return true;\n    }\n    var str = process.env.TRACE_DEPRECATION || \"\";\n    // namespace traced\n    return containsNamespace(str, namespace);\n}\n/**\n * Display deprecation message.\n */ function log(message, site) {\n    var haslisteners = eventListenerCount(process, \"deprecation\") !== 0;\n    // abort early if no destination\n    if (!haslisteners && this._ignored) {\n        return;\n    }\n    var caller;\n    var callFile;\n    var callSite;\n    var depSite;\n    var i = 0;\n    var seen = false;\n    var stack = getStack();\n    var file = this._file;\n    if (site) {\n        // provided site\n        depSite = site;\n        callSite = callSiteLocation(stack[1]);\n        callSite.name = depSite.name;\n        file = callSite[0];\n    } else {\n        // get call site\n        i = 2;\n        depSite = callSiteLocation(stack[i]);\n        callSite = depSite;\n    }\n    // get caller of deprecated thing in relation to file\n    for(; i < stack.length; i++){\n        caller = callSiteLocation(stack[i]);\n        callFile = caller[0];\n        if (callFile === file) {\n            seen = true;\n        } else if (callFile === this._file) {\n            file = this._file;\n        } else if (seen) {\n            break;\n        }\n    }\n    var key = caller ? depSite.join(\":\") + \"__\" + caller.join(\":\") : undefined;\n    if (key !== undefined && key in this._warned) {\n        // already warned\n        return;\n    }\n    this._warned[key] = true;\n    // generate automatic message from call site\n    var msg = message;\n    if (!msg) {\n        msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);\n    }\n    // emit deprecation if listeners exist\n    if (haslisteners) {\n        var err = DeprecationError(this._namespace, msg, stack.slice(i));\n        process.emit(\"deprecation\", err);\n        return;\n    }\n    // format and write message\n    var format = process.stderr.isTTY ? formatColor : formatPlain;\n    var output = format.call(this, msg, caller, stack.slice(i));\n    process.stderr.write(output + \"\\n\", \"utf8\");\n}\n/**\n * Get call site location as array.\n */ function callSiteLocation(callSite) {\n    var file = callSite.getFileName() || \"<anonymous>\";\n    var line = callSite.getLineNumber();\n    var colm = callSite.getColumnNumber();\n    if (callSite.isEval()) {\n        file = callSite.getEvalOrigin() + \", \" + file;\n    }\n    var site = [\n        file,\n        line,\n        colm\n    ];\n    site.callSite = callSite;\n    site.name = callSite.getFunctionName();\n    return site;\n}\n/**\n * Generate a default message from the site.\n */ function defaultMessage(site) {\n    var callSite = site.callSite;\n    var funcName = site.name;\n    // make useful anonymous name\n    if (!funcName) {\n        funcName = \"<anonymous@\" + formatLocation(site) + \">\";\n    }\n    var context = callSite.getThis();\n    var typeName = context && callSite.getTypeName();\n    // ignore useless type name\n    if (typeName === \"Object\") {\n        typeName = undefined;\n    }\n    // make useful type name\n    if (typeName === \"Function\") {\n        typeName = context.name || typeName;\n    }\n    return typeName && callSite.getMethodName() ? typeName + \".\" + funcName : funcName;\n}\n/**\n * Format deprecation message without color.\n */ function formatPlain(msg, caller, stack) {\n    var timestamp = new Date().toUTCString();\n    var formatted = timestamp + \" \" + this._namespace + \" deprecated \" + msg;\n    // add stack trace\n    if (this._traced) {\n        for(var i = 0; i < stack.length; i++){\n            formatted += \"\\n    at \" + callSiteToString(stack[i]);\n        }\n        return formatted;\n    }\n    if (caller) {\n        formatted += \" at \" + formatLocation(caller);\n    }\n    return formatted;\n}\n/**\n * Format deprecation message with color.\n */ function formatColor(msg, caller, stack) {\n    var formatted = \"\\x1b[36;1m\" + this._namespace + \"\\x1b[22;39m\" + // bold cyan\n    \" \\x1b[33;1mdeprecated\\x1b[22;39m\" + // bold yellow\n    \" \\x1b[0m\" + msg + \"\\x1b[39m\" // reset\n    ;\n    // add stack trace\n    if (this._traced) {\n        for(var i = 0; i < stack.length; i++){\n            formatted += \"\\n    \\x1b[36mat \" + callSiteToString(stack[i]) + \"\\x1b[39m\" // cyan\n            ;\n        }\n        return formatted;\n    }\n    if (caller) {\n        formatted += \" \\x1b[36m\" + formatLocation(caller) + \"\\x1b[39m\" // cyan\n        ;\n    }\n    return formatted;\n}\n/**\n * Format call site location.\n */ function formatLocation(callSite) {\n    return relative(basePath, callSite[0]) + \":\" + callSite[1] + \":\" + callSite[2];\n}\n/**\n * Get the stack as array of call sites.\n */ function getStack() {\n    var limit = Error.stackTraceLimit;\n    var obj = {};\n    var prep = Error.prepareStackTrace;\n    Error.prepareStackTrace = prepareObjectStackTrace;\n    Error.stackTraceLimit = Math.max(10, limit);\n    // capture the stack\n    Error.captureStackTrace(obj);\n    // slice this function off the top\n    var stack = obj.stack.slice(1);\n    Error.prepareStackTrace = prep;\n    Error.stackTraceLimit = limit;\n    return stack;\n}\n/**\n * Capture call site stack from v8.\n */ function prepareObjectStackTrace(obj, stack) {\n    return stack;\n}\n/**\n * Return a wrapped function in a deprecation message.\n */ function wrapfunction(fn, message) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"argument fn must be a function\");\n    }\n    var args = createArgumentsString(fn.length);\n    var deprecate = this // eslint-disable-line no-unused-vars\n    ;\n    var stack = getStack();\n    var site = callSiteLocation(stack[1]);\n    site.name = fn.name;\n    // eslint-disable-next-line no-eval\n    var deprecatedfn = eval(\"(function (\" + args + \") {\\n\" + '\"use strict\"\\n' + \"log.call(deprecate, message, site)\\n\" + \"return fn.apply(this, arguments)\\n\" + \"})\");\n    return deprecatedfn;\n}\n/**\n * Wrap property in a deprecation message.\n */ function wrapproperty(obj, prop, message) {\n    if (!obj || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        throw new TypeError(\"argument obj must be object\");\n    }\n    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n    if (!descriptor) {\n        throw new TypeError(\"must call property on owner object\");\n    }\n    if (!descriptor.configurable) {\n        throw new TypeError(\"property must be configurable\");\n    }\n    var deprecate = this;\n    var stack = getStack();\n    var site = callSiteLocation(stack[1]);\n    // set site name\n    site.name = prop;\n    // convert data descriptor\n    if (\"value\" in descriptor) {\n        descriptor = convertDataDescriptorToAccessor(obj, prop, message);\n    }\n    var get = descriptor.get;\n    var set = descriptor.set;\n    // wrap getter\n    if (typeof get === \"function\") {\n        descriptor.get = function getter() {\n            log.call(deprecate, message, site);\n            return get.apply(this, arguments);\n        };\n    }\n    // wrap setter\n    if (typeof set === \"function\") {\n        descriptor.set = function setter() {\n            log.call(deprecate, message, site);\n            return set.apply(this, arguments);\n        };\n    }\n    Object.defineProperty(obj, prop, descriptor);\n}\n/**\n * Create DeprecationError for deprecation\n */ function DeprecationError(namespace, message, stack) {\n    var error = new Error();\n    var stackString;\n    Object.defineProperty(error, \"constructor\", {\n        value: DeprecationError\n    });\n    Object.defineProperty(error, \"message\", {\n        configurable: true,\n        enumerable: false,\n        value: message,\n        writable: true\n    });\n    Object.defineProperty(error, \"name\", {\n        enumerable: false,\n        configurable: true,\n        value: \"DeprecationError\",\n        writable: true\n    });\n    Object.defineProperty(error, \"namespace\", {\n        configurable: true,\n        enumerable: false,\n        value: namespace,\n        writable: true\n    });\n    Object.defineProperty(error, \"stack\", {\n        configurable: true,\n        enumerable: false,\n        get: function() {\n            if (stackString !== undefined) {\n                return stackString;\n            }\n            // prepare stack trace\n            return stackString = createStackString.call(this, stack);\n        },\n        set: function setter(val) {\n            stackString = val;\n        }\n    });\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/callsite-tostring.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/callsite-tostring.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

eval("/*!\n * depd\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n */ module.exports = callSiteToString;\n/**\n * Format a CallSite file location to a string.\n */ function callSiteFileLocation(callSite) {\n    var fileName;\n    var fileLocation = \"\";\n    if (callSite.isNative()) {\n        fileLocation = \"native\";\n    } else if (callSite.isEval()) {\n        fileName = callSite.getScriptNameOrSourceURL();\n        if (!fileName) {\n            fileLocation = callSite.getEvalOrigin();\n        }\n    } else {\n        fileName = callSite.getFileName();\n    }\n    if (fileName) {\n        fileLocation += fileName;\n        var lineNumber = callSite.getLineNumber();\n        if (lineNumber != null) {\n            fileLocation += \":\" + lineNumber;\n            var columnNumber = callSite.getColumnNumber();\n            if (columnNumber) {\n                fileLocation += \":\" + columnNumber;\n            }\n        }\n    }\n    return fileLocation || \"unknown source\";\n}\n/**\n * Format a CallSite to a string.\n */ function callSiteToString(callSite) {\n    var addSuffix = true;\n    var fileLocation = callSiteFileLocation(callSite);\n    var functionName = callSite.getFunctionName();\n    var isConstructor = callSite.isConstructor();\n    var isMethodCall = !(callSite.isToplevel() || isConstructor);\n    var line = \"\";\n    if (isMethodCall) {\n        var methodName = callSite.getMethodName();\n        var typeName = getConstructorName(callSite);\n        if (functionName) {\n            if (typeName && functionName.indexOf(typeName) !== 0) {\n                line += typeName + \".\";\n            }\n            line += functionName;\n            if (methodName && functionName.lastIndexOf(\".\" + methodName) !== functionName.length - methodName.length - 1) {\n                line += \" [as \" + methodName + \"]\";\n            }\n        } else {\n            line += typeName + \".\" + (methodName || \"<anonymous>\");\n        }\n    } else if (isConstructor) {\n        line += \"new \" + (functionName || \"<anonymous>\");\n    } else if (functionName) {\n        line += functionName;\n    } else {\n        addSuffix = false;\n        line += fileLocation;\n    }\n    if (addSuffix) {\n        line += \" (\" + fileLocation + \")\";\n    }\n    return line;\n}\n/**\n * Get constructor name of reviver.\n */ function getConstructorName(obj) {\n    var receiver = obj.receiver;\n    return receiver.constructor && receiver.constructor.name || null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZGVwZEAxLjEuMi9ub2RlX21vZHVsZXMvZGVwZC9saWIvY29tcGF0L2NhbGxzaXRlLXRvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUMsR0FFRDtBQUVBOztDQUVDLEdBRURBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakI7O0NBRUMsR0FFRCxTQUFTQyxxQkFBc0JDLFFBQVE7SUFDckMsSUFBSUM7SUFDSixJQUFJQyxlQUFlO0lBRW5CLElBQUlGLFNBQVNHLFFBQVEsSUFBSTtRQUN2QkQsZUFBZTtJQUNqQixPQUFPLElBQUlGLFNBQVNJLE1BQU0sSUFBSTtRQUM1QkgsV0FBV0QsU0FBU0ssd0JBQXdCO1FBQzVDLElBQUksQ0FBQ0osVUFBVTtZQUNiQyxlQUFlRixTQUFTTSxhQUFhO1FBQ3ZDO0lBQ0YsT0FBTztRQUNMTCxXQUFXRCxTQUFTTyxXQUFXO0lBQ2pDO0lBRUEsSUFBSU4sVUFBVTtRQUNaQyxnQkFBZ0JEO1FBRWhCLElBQUlPLGFBQWFSLFNBQVNTLGFBQWE7UUFDdkMsSUFBSUQsY0FBYyxNQUFNO1lBQ3RCTixnQkFBZ0IsTUFBTU07WUFFdEIsSUFBSUUsZUFBZVYsU0FBU1csZUFBZTtZQUMzQyxJQUFJRCxjQUFjO2dCQUNoQlIsZ0JBQWdCLE1BQU1RO1lBQ3hCO1FBQ0Y7SUFDRjtJQUVBLE9BQU9SLGdCQUFnQjtBQUN6QjtBQUVBOztDQUVDLEdBRUQsU0FBU0osaUJBQWtCRSxRQUFRO0lBQ2pDLElBQUlZLFlBQVk7SUFDaEIsSUFBSVYsZUFBZUgscUJBQXFCQztJQUN4QyxJQUFJYSxlQUFlYixTQUFTYyxlQUFlO0lBQzNDLElBQUlDLGdCQUFnQmYsU0FBU2UsYUFBYTtJQUMxQyxJQUFJQyxlQUFlLENBQUVoQixDQUFBQSxTQUFTaUIsVUFBVSxNQUFNRixhQUFZO0lBQzFELElBQUlHLE9BQU87SUFFWCxJQUFJRixjQUFjO1FBQ2hCLElBQUlHLGFBQWFuQixTQUFTb0IsYUFBYTtRQUN2QyxJQUFJQyxXQUFXQyxtQkFBbUJ0QjtRQUVsQyxJQUFJYSxjQUFjO1lBQ2hCLElBQUlRLFlBQVlSLGFBQWFVLE9BQU8sQ0FBQ0YsY0FBYyxHQUFHO2dCQUNwREgsUUFBUUcsV0FBVztZQUNyQjtZQUVBSCxRQUFRTDtZQUVSLElBQUlNLGNBQWNOLGFBQWFXLFdBQVcsQ0FBQyxNQUFNTCxnQkFBZ0JOLGFBQWFZLE1BQU0sR0FBR04sV0FBV00sTUFBTSxHQUFHLEdBQUc7Z0JBQzVHUCxRQUFRLFVBQVVDLGFBQWE7WUFDakM7UUFDRixPQUFPO1lBQ0xELFFBQVFHLFdBQVcsTUFBT0YsQ0FBQUEsY0FBYyxhQUFZO1FBQ3REO0lBQ0YsT0FBTyxJQUFJSixlQUFlO1FBQ3hCRyxRQUFRLFNBQVVMLENBQUFBLGdCQUFnQixhQUFZO0lBQ2hELE9BQU8sSUFBSUEsY0FBYztRQUN2QkssUUFBUUw7SUFDVixPQUFPO1FBQ0xELFlBQVk7UUFDWk0sUUFBUWhCO0lBQ1Y7SUFFQSxJQUFJVSxXQUFXO1FBQ2JNLFFBQVEsT0FBT2hCLGVBQWU7SUFDaEM7SUFFQSxPQUFPZ0I7QUFDVDtBQUVBOztDQUVDLEdBRUQsU0FBU0ksbUJBQW9CSSxHQUFHO0lBQzlCLElBQUlDLFdBQVdELElBQUlDLFFBQVE7SUFDM0IsT0FBTyxTQUFVQyxXQUFXLElBQUlELFNBQVNDLFdBQVcsQ0FBQ0MsSUFBSSxJQUFLO0FBQ2hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9kZXBkQDEuMS4yL25vZGVfbW9kdWxlcy9kZXBkL2xpYi9jb21wYXQvY2FsbHNpdGUtdG9zdHJpbmcuanM/ZTBiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRlcGRcbiAqIENvcHlyaWdodChjKSAyMDE0IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbGxTaXRlVG9TdHJpbmdcblxuLyoqXG4gKiBGb3JtYXQgYSBDYWxsU2l0ZSBmaWxlIGxvY2F0aW9uIHRvIGEgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIGNhbGxTaXRlRmlsZUxvY2F0aW9uIChjYWxsU2l0ZSkge1xuICB2YXIgZmlsZU5hbWVcbiAgdmFyIGZpbGVMb2NhdGlvbiA9ICcnXG5cbiAgaWYgKGNhbGxTaXRlLmlzTmF0aXZlKCkpIHtcbiAgICBmaWxlTG9jYXRpb24gPSAnbmF0aXZlJ1xuICB9IGVsc2UgaWYgKGNhbGxTaXRlLmlzRXZhbCgpKSB7XG4gICAgZmlsZU5hbWUgPSBjYWxsU2l0ZS5nZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwoKVxuICAgIGlmICghZmlsZU5hbWUpIHtcbiAgICAgIGZpbGVMb2NhdGlvbiA9IGNhbGxTaXRlLmdldEV2YWxPcmlnaW4oKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmaWxlTmFtZSA9IGNhbGxTaXRlLmdldEZpbGVOYW1lKClcbiAgfVxuXG4gIGlmIChmaWxlTmFtZSkge1xuICAgIGZpbGVMb2NhdGlvbiArPSBmaWxlTmFtZVxuXG4gICAgdmFyIGxpbmVOdW1iZXIgPSBjYWxsU2l0ZS5nZXRMaW5lTnVtYmVyKClcbiAgICBpZiAobGluZU51bWJlciAhPSBudWxsKSB7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gJzonICsgbGluZU51bWJlclxuXG4gICAgICB2YXIgY29sdW1uTnVtYmVyID0gY2FsbFNpdGUuZ2V0Q29sdW1uTnVtYmVyKClcbiAgICAgIGlmIChjb2x1bW5OdW1iZXIpIHtcbiAgICAgICAgZmlsZUxvY2F0aW9uICs9ICc6JyArIGNvbHVtbk51bWJlclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWxlTG9jYXRpb24gfHwgJ3Vua25vd24gc291cmNlJ1xufVxuXG4vKipcbiAqIEZvcm1hdCBhIENhbGxTaXRlIHRvIGEgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIGNhbGxTaXRlVG9TdHJpbmcgKGNhbGxTaXRlKSB7XG4gIHZhciBhZGRTdWZmaXggPSB0cnVlXG4gIHZhciBmaWxlTG9jYXRpb24gPSBjYWxsU2l0ZUZpbGVMb2NhdGlvbihjYWxsU2l0ZSlcbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGNhbGxTaXRlLmdldEZ1bmN0aW9uTmFtZSgpXG4gIHZhciBpc0NvbnN0cnVjdG9yID0gY2FsbFNpdGUuaXNDb25zdHJ1Y3RvcigpXG4gIHZhciBpc01ldGhvZENhbGwgPSAhKGNhbGxTaXRlLmlzVG9wbGV2ZWwoKSB8fCBpc0NvbnN0cnVjdG9yKVxuICB2YXIgbGluZSA9ICcnXG5cbiAgaWYgKGlzTWV0aG9kQ2FsbCkge1xuICAgIHZhciBtZXRob2ROYW1lID0gY2FsbFNpdGUuZ2V0TWV0aG9kTmFtZSgpXG4gICAgdmFyIHR5cGVOYW1lID0gZ2V0Q29uc3RydWN0b3JOYW1lKGNhbGxTaXRlKVxuXG4gICAgaWYgKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgaWYgKHR5cGVOYW1lICYmIGZ1bmN0aW9uTmFtZS5pbmRleE9mKHR5cGVOYW1lKSAhPT0gMCkge1xuICAgICAgICBsaW5lICs9IHR5cGVOYW1lICsgJy4nXG4gICAgICB9XG5cbiAgICAgIGxpbmUgKz0gZnVuY3Rpb25OYW1lXG5cbiAgICAgIGlmIChtZXRob2ROYW1lICYmIGZ1bmN0aW9uTmFtZS5sYXN0SW5kZXhPZignLicgKyBtZXRob2ROYW1lKSAhPT0gZnVuY3Rpb25OYW1lLmxlbmd0aCAtIG1ldGhvZE5hbWUubGVuZ3RoIC0gMSkge1xuICAgICAgICBsaW5lICs9ICcgW2FzICcgKyBtZXRob2ROYW1lICsgJ10nXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmUgKz0gdHlwZU5hbWUgKyAnLicgKyAobWV0aG9kTmFtZSB8fCAnPGFub255bW91cz4nKVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0NvbnN0cnVjdG9yKSB7XG4gICAgbGluZSArPSAnbmV3ICcgKyAoZnVuY3Rpb25OYW1lIHx8ICc8YW5vbnltb3VzPicpXG4gIH0gZWxzZSBpZiAoZnVuY3Rpb25OYW1lKSB7XG4gICAgbGluZSArPSBmdW5jdGlvbk5hbWVcbiAgfSBlbHNlIHtcbiAgICBhZGRTdWZmaXggPSBmYWxzZVxuICAgIGxpbmUgKz0gZmlsZUxvY2F0aW9uXG4gIH1cblxuICBpZiAoYWRkU3VmZml4KSB7XG4gICAgbGluZSArPSAnICgnICsgZmlsZUxvY2F0aW9uICsgJyknXG4gIH1cblxuICByZXR1cm4gbGluZVxufVxuXG4vKipcbiAqIEdldCBjb25zdHJ1Y3RvciBuYW1lIG9mIHJldml2ZXIuXG4gKi9cblxuZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JOYW1lIChvYmopIHtcbiAgdmFyIHJlY2VpdmVyID0gb2JqLnJlY2VpdmVyXG4gIHJldHVybiAocmVjZWl2ZXIuY29uc3RydWN0b3IgJiYgcmVjZWl2ZXIuY29uc3RydWN0b3IubmFtZSkgfHwgbnVsbFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjYWxsU2l0ZVRvU3RyaW5nIiwiY2FsbFNpdGVGaWxlTG9jYXRpb24iLCJjYWxsU2l0ZSIsImZpbGVOYW1lIiwiZmlsZUxvY2F0aW9uIiwiaXNOYXRpdmUiLCJpc0V2YWwiLCJnZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwiLCJnZXRFdmFsT3JpZ2luIiwiZ2V0RmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZ2V0TGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImdldENvbHVtbk51bWJlciIsImFkZFN1ZmZpeCIsImZ1bmN0aW9uTmFtZSIsImdldEZ1bmN0aW9uTmFtZSIsImlzQ29uc3RydWN0b3IiLCJpc01ldGhvZENhbGwiLCJpc1RvcGxldmVsIiwibGluZSIsIm1ldGhvZE5hbWUiLCJnZXRNZXRob2ROYW1lIiwidHlwZU5hbWUiLCJnZXRDb25zdHJ1Y3Rvck5hbWUiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJsZW5ndGgiLCJvYmoiLCJyZWNlaXZlciIsImNvbnN0cnVjdG9yIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/callsite-tostring.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/event-listener-count.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/event-listener-count.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("/*!\n * depd\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = eventListenerCount;\n/**\n * Get the count of listeners on an event emitter of a specific type.\n */ function eventListenerCount(emitter, type) {\n    return emitter.listeners(type).length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZGVwZEAxLjEuMi9ub2RlX21vZHVsZXMvZGVwZC9saWIvY29tcGF0L2V2ZW50LWxpc3RlbmVyLWNvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUMsR0FFRDtBQUVBOzs7Q0FHQyxHQUVEQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCOztDQUVDLEdBRUQsU0FBU0EsbUJBQW9CQyxPQUFPLEVBQUVDLElBQUk7SUFDeEMsT0FBT0QsUUFBUUUsU0FBUyxDQUFDRCxNQUFNRSxNQUFNO0FBQ3ZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9kZXBkQDEuMS4yL25vZGVfbW9kdWxlcy9kZXBkL2xpYi9jb21wYXQvZXZlbnQtbGlzdGVuZXItY291bnQuanM/ZDM1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRlcGRcbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50TGlzdGVuZXJDb3VudFxuXG4vKipcbiAqIEdldCB0aGUgY291bnQgb2YgbGlzdGVuZXJzIG9uIGFuIGV2ZW50IGVtaXR0ZXIgb2YgYSBzcGVjaWZpYyB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXJDb3VudCAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImV2ZW50TGlzdGVuZXJDb3VudCIsImVtaXR0ZXIiLCJ0eXBlIiwibGlzdGVuZXJzIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/event-listener-count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/index.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * depd\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n/**\n * Module exports.\n * @public\n */ lazyProperty(module.exports, \"callSiteToString\", function callSiteToString() {\n    var limit = Error.stackTraceLimit;\n    var obj = {};\n    var prep = Error.prepareStackTrace;\n    function prepareObjectStackTrace(obj, stack) {\n        return stack;\n    }\n    Error.prepareStackTrace = prepareObjectStackTrace;\n    Error.stackTraceLimit = 2;\n    // capture the stack\n    Error.captureStackTrace(obj);\n    // slice the stack\n    var stack = obj.stack.slice();\n    Error.prepareStackTrace = prep;\n    Error.stackTraceLimit = limit;\n    return stack[0].toString ? toString : __webpack_require__(/*! ./callsite-tostring */ \"(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/callsite-tostring.js\");\n});\nlazyProperty(module.exports, \"eventListenerCount\", function eventListenerCount() {\n    return EventEmitter.listenerCount || __webpack_require__(/*! ./event-listener-count */ \"(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/event-listener-count.js\");\n});\n/**\n * Define a lazy property.\n */ function lazyProperty(obj, prop, getter) {\n    function get() {\n        var val = getter();\n        Object.defineProperty(obj, prop, {\n            configurable: true,\n            enumerable: true,\n            value: val\n        });\n        return val;\n    }\n    Object.defineProperty(obj, prop, {\n        configurable: true,\n        enumerable: true,\n        get: get\n    });\n}\n/**\n * Call toString() on the obj\n */ function toString(obj) {\n    return obj.toString();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZGVwZEAxLjEuMi9ub2RlX21vZHVsZXMvZGVwZC9saWIvY29tcGF0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUMsR0FFRDtBQUVBOzs7Q0FHQyxHQUVELElBQUlBLGVBQWVDLDBEQUE4QjtBQUVqRDs7O0NBR0MsR0FFREMsYUFBYUMsT0FBT0MsT0FBTyxFQUFFLG9CQUFvQixTQUFTQztJQUN4RCxJQUFJQyxRQUFRQyxNQUFNQyxlQUFlO0lBQ2pDLElBQUlDLE1BQU0sQ0FBQztJQUNYLElBQUlDLE9BQU9ILE1BQU1JLGlCQUFpQjtJQUVsQyxTQUFTQyx3QkFBeUJILEdBQUcsRUFBRUksS0FBSztRQUMxQyxPQUFPQTtJQUNUO0lBRUFOLE1BQU1JLGlCQUFpQixHQUFHQztJQUMxQkwsTUFBTUMsZUFBZSxHQUFHO0lBRXhCLG9CQUFvQjtJQUNwQkQsTUFBTU8saUJBQWlCLENBQUNMO0lBRXhCLGtCQUFrQjtJQUNsQixJQUFJSSxRQUFRSixJQUFJSSxLQUFLLENBQUNFLEtBQUs7SUFFM0JSLE1BQU1JLGlCQUFpQixHQUFHRDtJQUMxQkgsTUFBTUMsZUFBZSxHQUFHRjtJQUV4QixPQUFPTyxLQUFLLENBQUMsRUFBRSxDQUFDRyxRQUFRLEdBQUdBLFdBQVdmLG1CQUFPQSxDQUFDO0FBQ2hEO0FBRUFDLGFBQWFDLE9BQU9DLE9BQU8sRUFBRSxzQkFBc0IsU0FBU2E7SUFDMUQsT0FBT2pCLGFBQWFrQixhQUFhLElBQUlqQixtQkFBT0EsQ0FBQztBQUMvQztBQUVBOztDQUVDLEdBRUQsU0FBU0MsYUFBY08sR0FBRyxFQUFFVSxJQUFJLEVBQUVDLE1BQU07SUFDdEMsU0FBU0M7UUFDUCxJQUFJQyxNQUFNRjtRQUVWRyxPQUFPQyxjQUFjLENBQUNmLEtBQUtVLE1BQU07WUFDL0JNLGNBQWM7WUFDZEMsWUFBWTtZQUNaQyxPQUFPTDtRQUNUO1FBRUEsT0FBT0E7SUFDVDtJQUVBQyxPQUFPQyxjQUFjLENBQUNmLEtBQUtVLE1BQU07UUFDL0JNLGNBQWM7UUFDZEMsWUFBWTtRQUNaTCxLQUFLQTtJQUNQO0FBQ0Y7QUFFQTs7Q0FFQyxHQUVELFNBQVNMLFNBQVVQLEdBQUc7SUFDcEIsT0FBT0EsSUFBSU8sUUFBUTtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vZGVwZEAxLjEuMi9ub2RlX21vZHVsZXMvZGVwZC9saWIvY29tcGF0L2luZGV4LmpzPzcwZWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXBkXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubGF6eVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnY2FsbFNpdGVUb1N0cmluZycsIGZ1bmN0aW9uIGNhbGxTaXRlVG9TdHJpbmcgKCkge1xuICB2YXIgbGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXRcbiAgdmFyIG9iaiA9IHt9XG4gIHZhciBwcmVwID0gRXJyb3IucHJlcGFyZVN0YWNrVHJhY2VcblxuICBmdW5jdGlvbiBwcmVwYXJlT2JqZWN0U3RhY2tUcmFjZSAob2JqLCBzdGFjaykge1xuICAgIHJldHVybiBzdGFja1xuICB9XG5cbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmVwYXJlT2JqZWN0U3RhY2tUcmFjZVxuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAyXG5cbiAgLy8gY2FwdHVyZSB0aGUgc3RhY2tcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2Uob2JqKVxuXG4gIC8vIHNsaWNlIHRoZSBzdGFja1xuICB2YXIgc3RhY2sgPSBvYmouc3RhY2suc2xpY2UoKVxuXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJlcFxuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBsaW1pdFxuXG4gIHJldHVybiBzdGFja1swXS50b1N0cmluZyA/IHRvU3RyaW5nIDogcmVxdWlyZSgnLi9jYWxsc2l0ZS10b3N0cmluZycpXG59KVxuXG5sYXp5UHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdldmVudExpc3RlbmVyQ291bnQnLCBmdW5jdGlvbiBldmVudExpc3RlbmVyQ291bnQgKCkge1xuICByZXR1cm4gRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgfHwgcmVxdWlyZSgnLi9ldmVudC1saXN0ZW5lci1jb3VudCcpXG59KVxuXG4vKipcbiAqIERlZmluZSBhIGxhenkgcHJvcGVydHkuXG4gKi9cblxuZnVuY3Rpb24gbGF6eVByb3BlcnR5IChvYmosIHByb3AsIGdldHRlcikge1xuICBmdW5jdGlvbiBnZXQgKCkge1xuICAgIHZhciB2YWwgPSBnZXR0ZXIoKVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiB2YWxcbiAgICB9KVxuXG4gICAgcmV0dXJuIHZhbFxuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZ2V0XG4gIH0pXG59XG5cbi8qKlxuICogQ2FsbCB0b1N0cmluZygpIG9uIHRoZSBvYmpcbiAqL1xuXG5mdW5jdGlvbiB0b1N0cmluZyAob2JqKSB7XG4gIHJldHVybiBvYmoudG9TdHJpbmcoKVxufVxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJsYXp5UHJvcGVydHkiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbFNpdGVUb1N0cmluZyIsImxpbWl0IiwiRXJyb3IiLCJzdGFja1RyYWNlTGltaXQiLCJvYmoiLCJwcmVwIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJwcmVwYXJlT2JqZWN0U3RhY2tUcmFjZSIsInN0YWNrIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzbGljZSIsInRvU3RyaW5nIiwiZXZlbnRMaXN0ZW5lckNvdW50IiwibGlzdGVuZXJDb3VudCIsInByb3AiLCJnZXR0ZXIiLCJnZXQiLCJ2YWwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/index.js\n");

/***/ })

};
;