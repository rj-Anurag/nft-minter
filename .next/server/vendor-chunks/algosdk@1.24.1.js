"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/algosdk@1.24.1";
exports.ids = ["vendor-chunks/algosdk@1.24.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/abi_type.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/abi_type.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIAddressType: () => (/* binding */ ABIAddressType),\n/* harmony export */   ABIArrayDynamicType: () => (/* binding */ ABIArrayDynamicType),\n/* harmony export */   ABIArrayStaticType: () => (/* binding */ ABIArrayStaticType),\n/* harmony export */   ABIBoolType: () => (/* binding */ ABIBoolType),\n/* harmony export */   ABIByteType: () => (/* binding */ ABIByteType),\n/* harmony export */   ABIStringType: () => (/* binding */ ABIStringType),\n/* harmony export */   ABITupleType: () => (/* binding */ ABITupleType),\n/* harmony export */   ABIType: () => (/* binding */ ABIType),\n/* harmony export */   ABIUfixedType: () => (/* binding */ ABIUfixedType),\n/* harmony export */   ABIUintType: () => (/* binding */ ABIUintType),\n/* harmony export */   ADDR_BYTE_SIZE: () => (/* binding */ ADDR_BYTE_SIZE),\n/* harmony export */   LENGTH_ENCODE_BYTE_SIZE: () => (/* binding */ LENGTH_ENCODE_BYTE_SIZE),\n/* harmony export */   MAX_LEN: () => (/* binding */ MAX_LEN),\n/* harmony export */   SINGLE_BOOL_SIZE: () => (/* binding */ SINGLE_BOOL_SIZE),\n/* harmony export */   SINGLE_BYTE_SIZE: () => (/* binding */ SINGLE_BYTE_SIZE)\n/* harmony export */ });\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_bigint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding/bigint */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/bigint.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n/* eslint-disable no-bitwise */ /* eslint-disable no-use-before-define */ /* eslint-disable class-methods-use-this */ /**\n    //ABI-Types: uint<N>: An N-bit unsigned integer (8 <= N <= 512 and N % 8 = 0).\n    // | byte (alias for uint8)\n    // | ufixed <N> x <M> (8 <= N <= 512, N % 8 = 0, and 0 < M <= 160)\n    // | bool\n    // | address (alias for byte[32])\n    // | <type> [<N>]\n    // | <type> []\n    // | string\n    // | (T1, ..., Tn)\n*/ \n\n\nconst MAX_LEN = 2 ** 16 - 1;\nconst ADDR_BYTE_SIZE = 32;\nconst SINGLE_BYTE_SIZE = 1;\nconst SINGLE_BOOL_SIZE = 1;\nconst LENGTH_ENCODE_BYTE_SIZE = 2;\nconst staticArrayRegexp = /^([a-z\\d[\\](),]+)\\[(0|[1-9][\\d]*)]$/;\nconst ufixedRegexp = /^ufixed([1-9][\\d]*)x([1-9][\\d]*)$/;\nclass ABIType {\n    // De-serializes the ABI type from a string using the ABI specs\n    static from(str) {\n        if (str.endsWith(\"[]\")) {\n            const arrayArgType = ABIType.from(str.slice(0, str.length - 2));\n            return new ABIArrayDynamicType(arrayArgType);\n        }\n        if (str.endsWith(\"]\")) {\n            const stringMatches = str.match(staticArrayRegexp);\n            // Match the string itself, array element type, then array length\n            if (stringMatches.length !== 3) {\n                throw new Error(`malformed static array string: ${str}`);\n            }\n            // Parse static array using regex\n            const arrayLengthStr = stringMatches[2];\n            const arrayLength = parseInt(arrayLengthStr, 10);\n            if (arrayLength > MAX_LEN) {\n                throw new Error(`array length exceeds limit ${MAX_LEN}`);\n            }\n            // Parse the array element type\n            const arrayType = ABIType.from(stringMatches[1]);\n            return new ABIArrayStaticType(arrayType, arrayLength);\n        }\n        if (str.startsWith(\"uint\")) {\n            // Checks if the parsed number contains only digits, no whitespaces\n            const digitsOnly = (string)=>[\n                    ...string\n                ].every((c)=>\"0123456789\".includes(c));\n            const typeSizeStr = str.slice(4, str.length);\n            if (!digitsOnly(typeSizeStr)) {\n                throw new Error(`malformed uint string: ${typeSizeStr}`);\n            }\n            const typeSize = parseInt(typeSizeStr, 10);\n            if (typeSize > MAX_LEN) {\n                throw new Error(`malformed uint string: ${typeSize}`);\n            }\n            return new ABIUintType(typeSize);\n        }\n        if (str === \"byte\") {\n            return new ABIByteType();\n        }\n        if (str.startsWith(\"ufixed\")) {\n            const stringMatches = str.match(ufixedRegexp);\n            if (stringMatches.length !== 3) {\n                throw new Error(`malformed ufixed type: ${str}`);\n            }\n            const ufixedSize = parseInt(stringMatches[1], 10);\n            const ufixedPrecision = parseInt(stringMatches[2], 10);\n            return new ABIUfixedType(ufixedSize, ufixedPrecision);\n        }\n        if (str === \"bool\") {\n            return new ABIBoolType();\n        }\n        if (str === \"address\") {\n            return new ABIAddressType();\n        }\n        if (str === \"string\") {\n            return new ABIStringType();\n        }\n        if (str.length >= 2 && str[0] === \"(\" && str[str.length - 1] === \")\") {\n            const tupleContent = ABITupleType.parseTupleContent(str.slice(1, str.length - 1));\n            const tupleTypes = [];\n            for(let i = 0; i < tupleContent.length; i++){\n                const ti = ABIType.from(tupleContent[i]);\n                tupleTypes.push(ti);\n            }\n            return new ABITupleType(tupleTypes);\n        }\n        throw new Error(`cannot convert a string ${str} to an ABI type`);\n    }\n}\nclass ABIUintType extends ABIType {\n    constructor(size){\n        super();\n        if (size % 8 !== 0 || size < 8 || size > 512) {\n            throw new Error(`unsupported uint type bitSize: ${size}`);\n        }\n        this.bitSize = size;\n    }\n    toString() {\n        return `uint${this.bitSize}`;\n    }\n    equals(other) {\n        return other instanceof ABIUintType && this.bitSize === other.bitSize;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return this.bitSize / 8;\n    }\n    encode(value) {\n        if (typeof value !== \"bigint\" && typeof value !== \"number\") {\n            throw new Error(`Cannot encode value as uint${this.bitSize}: ${value}`);\n        }\n        if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {\n            throw new Error(`${value} is not a non-negative int or too big to fit in size uint${this.bitSize}`);\n        }\n        if (typeof value === \"number\" && !Number.isSafeInteger(value)) {\n            throw new Error(`${value} should be converted into a BigInt before it is encoded`);\n        }\n        return (0,_encoding_bigint__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(value, this.bitSize / 8);\n    }\n    decode(byteString) {\n        if (byteString.length !== this.bitSize / 8) {\n            throw new Error(`byte string must correspond to a uint${this.bitSize}`);\n        }\n        return (0,_encoding_bigint__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(byteString);\n    }\n}\nclass ABIUfixedType extends ABIType {\n    constructor(size, denominator){\n        super();\n        if (size % 8 !== 0 || size < 8 || size > 512) {\n            throw new Error(`unsupported ufixed type bitSize: ${size}`);\n        }\n        if (denominator > 160 || denominator < 1) {\n            throw new Error(`unsupported ufixed type precision: ${denominator}`);\n        }\n        this.bitSize = size;\n        this.precision = denominator;\n    }\n    toString() {\n        return `ufixed${this.bitSize}x${this.precision}`;\n    }\n    equals(other) {\n        return other instanceof ABIUfixedType && this.bitSize === other.bitSize && this.precision === other.precision;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return this.bitSize / 8;\n    }\n    encode(value) {\n        if (typeof value !== \"bigint\" && typeof value !== \"number\") {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {\n            throw new Error(`${value} is not a non-negative int or too big to fit in size ${this.toString()}`);\n        }\n        if (typeof value === \"number\" && !Number.isSafeInteger(value)) {\n            throw new Error(`${value} should be converted into a BigInt before it is encoded`);\n        }\n        return (0,_encoding_bigint__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(value, this.bitSize / 8);\n    }\n    decode(byteString) {\n        if (byteString.length !== this.bitSize / 8) {\n            throw new Error(`byte string must correspond to a ${this.toString()}`);\n        }\n        return (0,_encoding_bigint__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(byteString);\n    }\n}\nclass ABIAddressType extends ABIType {\n    toString() {\n        return \"address\";\n    }\n    equals(other) {\n        return other instanceof ABIAddressType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return ADDR_BYTE_SIZE;\n    }\n    encode(value) {\n        if (typeof value !== \"string\" && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        if (typeof value === \"string\") {\n            const decodedAddress = (0,_encoding_address__WEBPACK_IMPORTED_MODULE_0__.decodeAddress)(value);\n            return decodedAddress.publicKey;\n        }\n        // Return the address if it is already in bytes\n        if (value.byteLength !== 32) {\n            throw new Error(`byte string must be 32 bytes long for an address`);\n        }\n        return value;\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 32) {\n            throw new Error(`byte string must be 32 bytes long for an address`);\n        }\n        return (0,_encoding_address__WEBPACK_IMPORTED_MODULE_0__.encodeAddress)(byteString);\n    }\n}\nclass ABIBoolType extends ABIType {\n    toString() {\n        return \"bool\";\n    }\n    equals(other) {\n        return other instanceof ABIBoolType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return SINGLE_BOOL_SIZE;\n    }\n    encode(value) {\n        if (typeof value !== \"boolean\") {\n            throw new Error(`Cannot encode value as bool: ${value}`);\n        }\n        if (value) {\n            return new Uint8Array([\n                128\n            ]);\n        }\n        return new Uint8Array([\n            0\n        ]);\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 1) {\n            throw new Error(`bool string must be 1 byte long`);\n        }\n        const value = byteString[0];\n        if (value === 128) {\n            return true;\n        }\n        if (value === 0) {\n            return false;\n        }\n        throw new Error(`boolean could not be decoded from the byte string`);\n    }\n}\nclass ABIByteType extends ABIType {\n    toString() {\n        return \"byte\";\n    }\n    equals(other) {\n        return other instanceof ABIByteType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return SINGLE_BYTE_SIZE;\n    }\n    encode(value) {\n        if (typeof value !== \"number\" && typeof value !== \"bigint\") {\n            throw new Error(`Cannot encode value as byte: ${value}`);\n        }\n        if (typeof value === \"bigint\") {\n            // eslint-disable-next-line no-param-reassign\n            value = Number(value);\n        }\n        if (value < 0 || value > 255) {\n            throw new Error(`${value} cannot be encoded into a byte`);\n        }\n        return new Uint8Array([\n            value\n        ]);\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 1) {\n            throw new Error(`byte string must be 1 byte long`);\n        }\n        return byteString[0];\n    }\n}\nclass ABIStringType extends ABIType {\n    toString() {\n        return \"string\";\n    }\n    equals(other) {\n        return other instanceof ABIStringType;\n    }\n    isDynamic() {\n        return true;\n    }\n    byteLen() {\n        throw new Error(`${this.toString()} is a dynamic type`);\n    }\n    encode(value) {\n        if (typeof value !== \"string\" && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as string: ${value}`);\n        }\n        const encodedBytes = Buffer.from(value);\n        const encodedLength = (0,_encoding_bigint__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(encodedBytes.length, LENGTH_ENCODE_BYTE_SIZE);\n        const mergedBytes = new Uint8Array(encodedBytes.length + LENGTH_ENCODE_BYTE_SIZE);\n        mergedBytes.set(encodedLength);\n        mergedBytes.set(encodedBytes, LENGTH_ENCODE_BYTE_SIZE);\n        return mergedBytes;\n    }\n    decode(byteString) {\n        if (byteString.length < LENGTH_ENCODE_BYTE_SIZE) {\n            throw new Error(`byte string is too short to be decoded. Actual length is ${byteString.length}, but expected at least ${LENGTH_ENCODE_BYTE_SIZE}`);\n        }\n        const buf = Buffer.from(byteString);\n        const byteLength = buf.readUIntBE(0, LENGTH_ENCODE_BYTE_SIZE);\n        const byteValue = byteString.slice(LENGTH_ENCODE_BYTE_SIZE, byteString.length);\n        if (byteLength !== byteValue.length) {\n            throw new Error(`string length bytes do not match the actual length of string. Expected ${byteLength}, got ${byteValue.length}`);\n        }\n        return Buffer.from(byteValue).toString(\"utf-8\");\n    }\n}\nclass ABIArrayStaticType extends ABIType {\n    constructor(argType, arrayLength){\n        super();\n        if (arrayLength < 0) {\n            throw new Error(`static array must have a non negative length: ${arrayLength}`);\n        }\n        this.childType = argType;\n        this.staticLength = arrayLength;\n    }\n    toString() {\n        return `${this.childType.toString()}[${this.staticLength}]`;\n    }\n    equals(other) {\n        return other instanceof ABIArrayStaticType && this.staticLength === other.staticLength && this.childType.equals(other.childType);\n    }\n    isDynamic() {\n        return this.childType.isDynamic();\n    }\n    byteLen() {\n        if (this.childType.constructor === ABIBoolType) {\n            return Math.ceil(this.staticLength / 8);\n        }\n        return this.staticLength * this.childType.byteLen();\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        if (value.length !== this.staticLength) {\n            throw new Error(`Value array does not match static array length. Expected ${this.staticLength}, got ${value.length}`);\n        }\n        const convertedTuple = this.toABITupleType();\n        return convertedTuple.encode(value);\n    }\n    decode(byteString) {\n        const convertedTuple = this.toABITupleType();\n        return convertedTuple.decode(byteString);\n    }\n    toABITupleType() {\n        return new ABITupleType(Array(this.staticLength).fill(this.childType));\n    }\n}\nclass ABIArrayDynamicType extends ABIType {\n    constructor(argType){\n        super();\n        this.childType = argType;\n    }\n    toString() {\n        return `${this.childType.toString()}[]`;\n    }\n    equals(other) {\n        return other instanceof ABIArrayDynamicType && this.childType.equals(other.childType);\n    }\n    isDynamic() {\n        return true;\n    }\n    byteLen() {\n        throw new Error(`${this.toString()} is a dynamic type`);\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        const convertedTuple = this.toABITupleType(value.length);\n        const encodedTuple = convertedTuple.encode(value);\n        const encodedLength = (0,_encoding_bigint__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(convertedTuple.childTypes.length, LENGTH_ENCODE_BYTE_SIZE);\n        const mergedBytes = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.concatArrays)(encodedLength, encodedTuple);\n        return mergedBytes;\n    }\n    decode(byteString) {\n        const buf = Buffer.from(byteString);\n        const byteLength = buf.readUIntBE(0, LENGTH_ENCODE_BYTE_SIZE);\n        const convertedTuple = this.toABITupleType(byteLength);\n        return convertedTuple.decode(byteString.slice(LENGTH_ENCODE_BYTE_SIZE, byteString.length));\n    }\n    toABITupleType(length) {\n        return new ABITupleType(Array(length).fill(this.childType));\n    }\n}\nclass ABITupleType extends ABIType {\n    constructor(argTypes){\n        super();\n        if (argTypes.length >= MAX_LEN) {\n            throw new Error(\"tuple type child type number larger than maximum uint16 error\");\n        }\n        this.childTypes = argTypes;\n    }\n    toString() {\n        const typeStrings = [];\n        for(let i = 0; i < this.childTypes.length; i++){\n            typeStrings[i] = this.childTypes[i].toString();\n        }\n        return `(${typeStrings.join(\",\")})`;\n    }\n    equals(other) {\n        return other instanceof ABITupleType && this.childTypes.length === other.childTypes.length && this.childTypes.every((child, index)=>child.equals(other.childTypes[index]));\n    }\n    isDynamic() {\n        const isDynamic = (child)=>child.isDynamic();\n        return this.childTypes.some(isDynamic);\n    }\n    byteLen() {\n        let size = 0;\n        for(let i = 0; i < this.childTypes.length; i++){\n            if (this.childTypes[i].constructor === ABIBoolType) {\n                const after = findBoolLR(this.childTypes, i, 1);\n                const boolNum = after + 1;\n                i += after;\n                size += Math.trunc((boolNum + 7) / 8);\n            } else {\n                const childByteSize = this.childTypes[i].byteLen();\n                size += childByteSize;\n            }\n        }\n        return size;\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        const values = Array.from(value);\n        if (value.length > MAX_LEN) {\n            throw new Error(\"length of tuple array should not exceed a uint16\");\n        }\n        const tupleTypes = this.childTypes;\n        const heads = [];\n        const tails = [];\n        const isDynamicIndex = new Map();\n        let i = 0;\n        while(i < tupleTypes.length){\n            const tupleType = tupleTypes[i];\n            if (tupleType.isDynamic()) {\n                // Head is not pre-determined for dynamic types; store a placeholder for now\n                isDynamicIndex.set(heads.length, true);\n                heads.push(new Uint8Array([\n                    0,\n                    0\n                ]));\n                tails.push(tupleType.encode(values[i]));\n            } else {\n                if (tupleType.constructor === ABIBoolType) {\n                    const before = findBoolLR(tupleTypes, i, -1);\n                    let after = findBoolLR(tupleTypes, i, 1);\n                    // Pack bytes to heads and tails\n                    if (before % 8 !== 0) {\n                        throw new Error(\"expected before index should have number of bool mod 8 equal 0\");\n                    }\n                    after = Math.min(7, after);\n                    const compressedInt = compressMultipleBool(values.slice(i, i + after + 1));\n                    heads.push((0,_encoding_bigint__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(compressedInt, 1));\n                    i += after;\n                } else {\n                    const encodedTupleValue = tupleType.encode(values[i]);\n                    heads.push(encodedTupleValue);\n                }\n                isDynamicIndex.set(i, false);\n                tails.push(new Uint8Array());\n            }\n            i += 1;\n        }\n        // Adjust head lengths for dynamic types\n        let headLength = 0;\n        for (const headElement of heads){\n            headLength += headElement.length;\n        }\n        // encode any placeholders for dynamic types\n        let tailLength = 0;\n        for(let j = 0; j < heads.length; j++){\n            if (isDynamicIndex.get(j)) {\n                const headValue = headLength + tailLength;\n                if (headValue > MAX_LEN) {\n                    throw new Error(`byte length of ${headValue} should not exceed a uint16`);\n                }\n                heads[j] = (0,_encoding_bigint__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(headValue, LENGTH_ENCODE_BYTE_SIZE);\n            }\n            tailLength += tails[j].length;\n        }\n        return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.concatArrays)(...heads, ...tails);\n    }\n    decode(byteString) {\n        const tupleTypes = this.childTypes;\n        const dynamicSegments = [];\n        const valuePartition = [];\n        let i = 0;\n        let iterIndex = 0;\n        const buf = Buffer.from(byteString);\n        while(i < tupleTypes.length){\n            const tupleType = tupleTypes[i];\n            if (tupleType.isDynamic()) {\n                if (byteString.slice(iterIndex, byteString.length).length < LENGTH_ENCODE_BYTE_SIZE) {\n                    throw new Error(\"dynamic type in tuple is too short to be decoded\");\n                }\n                const dynamicIndex = buf.readUIntBE(iterIndex, LENGTH_ENCODE_BYTE_SIZE);\n                if (dynamicSegments.length > 0) {\n                    dynamicSegments[dynamicSegments.length - 1].right = dynamicIndex;\n                    // Check that right side of segment is greater than the left side\n                    if (dynamicIndex < dynamicSegments[dynamicSegments.length - 1].left) {\n                        throw new Error(\"dynamic index segment miscalculation: left is greater than right index\");\n                    }\n                }\n                // Since we do not know where the current dynamic element ends, put a placeholder and update later\n                const seg = {\n                    left: dynamicIndex,\n                    right: -1\n                };\n                dynamicSegments.push(seg);\n                valuePartition.push(null);\n                iterIndex += LENGTH_ENCODE_BYTE_SIZE;\n            } else {\n                // eslint-disable-next-line no-lonely-if\n                if (tupleType.constructor === ABIBoolType) {\n                    const before = findBoolLR(this.childTypes, i, -1);\n                    let after = findBoolLR(this.childTypes, i, 1);\n                    if (before % 8 !== 0) {\n                        throw new Error(\"expected before bool number mod 8 === 0\");\n                    }\n                    after = Math.min(7, after);\n                    // Parse bool in a byte to multiple byte strings\n                    for(let boolIndex = 0; boolIndex <= after; boolIndex++){\n                        const boolMask = 0x80 >> boolIndex;\n                        if ((byteString[iterIndex] & boolMask) > 0) {\n                            valuePartition.push(new Uint8Array([\n                                128\n                            ]));\n                        } else {\n                            valuePartition.push(new Uint8Array([\n                                0\n                            ]));\n                        }\n                    }\n                    i += after;\n                    iterIndex += 1;\n                } else {\n                    const currLen = tupleType.byteLen();\n                    valuePartition.push(byteString.slice(iterIndex, iterIndex + currLen));\n                    iterIndex += currLen;\n                }\n            }\n            if (i !== tupleTypes.length - 1 && iterIndex >= byteString.length) {\n                throw new Error(\"input byte not enough to decode\");\n            }\n            i += 1;\n        }\n        if (dynamicSegments.length > 0) {\n            dynamicSegments[dynamicSegments.length - 1].right = byteString.length;\n            iterIndex = byteString.length;\n        }\n        if (iterIndex < byteString.length) {\n            throw new Error(\"input byte not fully consumed\");\n        }\n        // Check segment indices are valid\n        // If the dynamic segment are not consecutive and well-ordered, we return error\n        for(let j = 0; j < dynamicSegments.length; j++){\n            const seg = dynamicSegments[j];\n            if (seg.left > seg.right) {\n                throw new Error(\"dynamic segment should display a [l, r] space with l <= r\");\n            }\n            if (j !== dynamicSegments.length - 1 && seg.right !== dynamicSegments[j + 1].left) {\n                throw new Error(\"dynamic segment should be consecutive\");\n            }\n        }\n        // Check dynamic element partitions\n        let segIndex = 0;\n        for(let j = 0; j < tupleTypes.length; j++){\n            if (tupleTypes[j].isDynamic()) {\n                valuePartition[j] = byteString.slice(dynamicSegments[segIndex].left, dynamicSegments[segIndex].right);\n                segIndex += 1;\n            }\n        }\n        // Decode each tuple element\n        const returnValues = [];\n        for(let j = 0; j < tupleTypes.length; j++){\n            const valueTi = tupleTypes[j].decode(valuePartition[j]);\n            returnValues.push(valueTi);\n        }\n        return returnValues;\n    }\n    static parseTupleContent(str) {\n        if (str.length === 0) {\n            return [];\n        }\n        if (str.endsWith(\",\") || str.startsWith(\",\")) {\n            throw new Error(\"tuple string should not start with comma\");\n        }\n        if (str.includes(\",,\")) {\n            throw new Error(\"tuple string should not have consecutive commas\");\n        }\n        const tupleStrings = [];\n        let depth = 0;\n        let word = \"\";\n        for (const char of str){\n            word += char;\n            if (char === \"(\") {\n                depth += 1;\n            } else if (char === \")\") {\n                depth -= 1;\n            } else if (char === \",\") {\n                // If the comma is at depth 0, then append the word as token.\n                if (depth === 0) {\n                    tupleStrings.push(word.slice(0, word.length - 1));\n                    word = \"\";\n                }\n            }\n        }\n        if (word.length !== 0) {\n            tupleStrings.push(word);\n        }\n        if (depth !== 0) {\n            throw new Error(\"tuple string has mismatched parentheses\");\n        }\n        return tupleStrings;\n    }\n}\n// compressMultipleBool compresses consecutive bool values into a byte in ABI tuple / array value.\nfunction compressMultipleBool(valueList) {\n    let res = 0;\n    if (valueList.length > 8) {\n        throw new Error(\"value list passed in should be no greater than length 8\");\n    }\n    for(let i = 0; i < valueList.length; i++){\n        const boolVal = valueList[i];\n        if (typeof boolVal !== \"boolean\") {\n            throw new Error(\"non-boolean values cannot be compressed into a byte\");\n        }\n        if (boolVal) {\n            res |= 1 << 7 - i;\n        }\n    }\n    return res;\n}\n// Assume that the current index on the list of type is an ABI bool type.\n// It returns the difference between the current index and the index of the furthest consecutive Bool type.\nfunction findBoolLR(typeList, index, delta) {\n    let until = 0;\n    while(true){\n        const curr = index + delta * until;\n        if (typeList[curr].constructor === ABIBoolType) {\n            if (curr !== typeList.length - 1 && delta === 1) {\n                until += 1;\n            } else if (curr > 0 && delta === -1) {\n                until += 1;\n            } else {\n                break;\n            }\n        } else {\n            until -= 1;\n            break;\n        }\n    }\n    return until;\n} //# sourceMappingURL=abi_type.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/abi_type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/contract.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/contract.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIContract: () => (/* binding */ ABIContract)\n/* harmony export */ });\n/* harmony import */ var _method__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/method.js\");\n\nclass ABIContract {\n    constructor(params){\n        if (typeof params.name !== \"string\" || !Array.isArray(params.methods) || params.networks && typeof params.networks !== \"object\") {\n            throw new Error(\"Invalid ABIContract parameters\");\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.networks = params.networks ? {\n            ...params.networks\n        } : {};\n        this.methods = params.methods.map((method)=>new _method__WEBPACK_IMPORTED_MODULE_0__.ABIMethod(method));\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            networks: this.networks,\n            methods: this.methods.map((method)=>method.toJSON())\n        };\n    }\n    getMethodByName(name) {\n        return (0,_method__WEBPACK_IMPORTED_MODULE_0__.getMethodByName)(this.methods, name);\n    }\n} //# sourceMappingURL=contract.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL2NvbnRyYWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNEO0FBQy9DLE1BQU1FO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJLE9BQU9BLE9BQU9DLElBQUksS0FBSyxZQUN2QixDQUFDQyxNQUFNQyxPQUFPLENBQUNILE9BQU9JLE9BQU8sS0FDNUJKLE9BQU9LLFFBQVEsSUFBSSxPQUFPTCxPQUFPSyxRQUFRLEtBQUssVUFBVztZQUMxRCxNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNMLElBQUksR0FBR0QsT0FBT0MsSUFBSTtRQUN2QixJQUFJLENBQUNNLFdBQVcsR0FBR1AsT0FBT1EsSUFBSTtRQUM5QixJQUFJLENBQUNILFFBQVEsR0FBR0wsT0FBT0ssUUFBUSxHQUFHO1lBQUUsR0FBR0wsT0FBT0ssUUFBUTtRQUFDLElBQUksQ0FBQztRQUM1RCxJQUFJLENBQUNELE9BQU8sR0FBR0osT0FBT0ksT0FBTyxDQUFDSyxHQUFHLENBQUMsQ0FBQ0MsU0FBVyxJQUFJZCw4Q0FBU0EsQ0FBQ2M7SUFDaEU7SUFDQUMsU0FBUztRQUNMLE9BQU87WUFDSFYsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZk8sTUFBTSxJQUFJLENBQUNELFdBQVc7WUFDdEJGLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1lBQ3ZCRCxTQUFTLElBQUksQ0FBQ0EsT0FBTyxDQUFDSyxHQUFHLENBQUMsQ0FBQ0MsU0FBV0EsT0FBT0MsTUFBTTtRQUN2RDtJQUNKO0lBQ0FkLGdCQUFnQkksSUFBSSxFQUFFO1FBQ2xCLE9BQU9KLHdEQUFlQSxDQUFDLElBQUksQ0FBQ08sT0FBTyxFQUFFSDtJQUN6QztBQUNKLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hYmkvY29udHJhY3QuanM/MDJjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBQklNZXRob2QsIGdldE1ldGhvZEJ5TmFtZSB9IGZyb20gJy4vbWV0aG9kJztcbmV4cG9ydCBjbGFzcyBBQklDb250cmFjdCB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLm5hbWUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAhQXJyYXkuaXNBcnJheShwYXJhbXMubWV0aG9kcykgfHxcbiAgICAgICAgICAgIChwYXJhbXMubmV0d29ya3MgJiYgdHlwZW9mIHBhcmFtcy5uZXR3b3JrcyAhPT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQUJJQ29udHJhY3QgcGFyYW1ldGVycycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gcGFyYW1zLmRlc2M7XG4gICAgICAgIHRoaXMubmV0d29ya3MgPSBwYXJhbXMubmV0d29ya3MgPyB7IC4uLnBhcmFtcy5uZXR3b3JrcyB9IDoge307XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHBhcmFtcy5tZXRob2RzLm1hcCgobWV0aG9kKSA9PiBuZXcgQUJJTWV0aG9kKG1ldGhvZCkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZXNjOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbmV0d29ya3M6IHRoaXMubmV0d29ya3MsXG4gICAgICAgICAgICBtZXRob2RzOiB0aGlzLm1ldGhvZHMubWFwKChtZXRob2QpID0+IG1ldGhvZC50b0pTT04oKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldE1ldGhvZEJ5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBnZXRNZXRob2RCeU5hbWUodGhpcy5tZXRob2RzLCBuYW1lKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cmFjdC5qcy5tYXAiXSwibmFtZXMiOlsiQUJJTWV0aG9kIiwiZ2V0TWV0aG9kQnlOYW1lIiwiQUJJQ29udHJhY3QiLCJjb25zdHJ1Y3RvciIsInBhcmFtcyIsIm5hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJtZXRob2RzIiwibmV0d29ya3MiLCJFcnJvciIsImRlc2NyaXB0aW9uIiwiZGVzYyIsIm1hcCIsIm1ldGhvZCIsInRvSlNPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIAddressType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIAddressType),\n/* harmony export */   ABIArrayDynamicType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIArrayDynamicType),\n/* harmony export */   ABIArrayStaticType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIArrayStaticType),\n/* harmony export */   ABIBoolType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIBoolType),\n/* harmony export */   ABIByteType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIByteType),\n/* harmony export */   ABIContract: () => (/* reexport safe */ _contract__WEBPACK_IMPORTED_MODULE_1__.ABIContract),\n/* harmony export */   ABIInterface: () => (/* reexport safe */ _interface__WEBPACK_IMPORTED_MODULE_2__.ABIInterface),\n/* harmony export */   ABIMethod: () => (/* reexport safe */ _method__WEBPACK_IMPORTED_MODULE_3__.ABIMethod),\n/* harmony export */   ABIReferenceType: () => (/* reexport safe */ _reference__WEBPACK_IMPORTED_MODULE_5__.ABIReferenceType),\n/* harmony export */   ABIStringType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIStringType),\n/* harmony export */   ABITransactionType: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_4__.ABITransactionType),\n/* harmony export */   ABITupleType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABITupleType),\n/* harmony export */   ABIType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIType),\n/* harmony export */   ABIUfixedType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIUfixedType),\n/* harmony export */   ABIUintType: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ABIUintType),\n/* harmony export */   ADDR_BYTE_SIZE: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.ADDR_BYTE_SIZE),\n/* harmony export */   LENGTH_ENCODE_BYTE_SIZE: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.LENGTH_ENCODE_BYTE_SIZE),\n/* harmony export */   MAX_LEN: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.MAX_LEN),\n/* harmony export */   SINGLE_BOOL_SIZE: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.SINGLE_BOOL_SIZE),\n/* harmony export */   SINGLE_BYTE_SIZE: () => (/* reexport safe */ _abi_type__WEBPACK_IMPORTED_MODULE_0__.SINGLE_BYTE_SIZE),\n/* harmony export */   abiCheckTransactionType: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_4__.abiCheckTransactionType),\n/* harmony export */   abiTypeIsReference: () => (/* reexport safe */ _reference__WEBPACK_IMPORTED_MODULE_5__.abiTypeIsReference),\n/* harmony export */   abiTypeIsTransaction: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_4__.abiTypeIsTransaction),\n/* harmony export */   getMethodByName: () => (/* reexport safe */ _method__WEBPACK_IMPORTED_MODULE_3__.getMethodByName)\n/* harmony export */ });\n/* harmony import */ var _abi_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abi_type */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/abi_type.js\");\n/* harmony import */ var _contract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/contract.js\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interface */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/interface.js\");\n/* harmony import */ var _method__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/method.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/transaction.js\");\n/* harmony import */ var _reference__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reference */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/reference.js\");\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyQjtBQUNBO0FBQ0M7QUFDSDtBQUNLO0FBQ0YsQ0FDNUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hYmkvaW5kZXguanM/Zjk3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FiaV90eXBlJztcbmV4cG9ydCAqIGZyb20gJy4vY29udHJhY3QnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9tZXRob2QnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL3JlZmVyZW5jZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/interface.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/interface.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIInterface: () => (/* binding */ ABIInterface)\n/* harmony export */ });\n/* harmony import */ var _method__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/method.js\");\n\nclass ABIInterface {\n    constructor(params){\n        if (typeof params.name !== \"string\" || !Array.isArray(params.methods)) {\n            throw new Error(\"Invalid ABIInterface parameters\");\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.methods = params.methods.map((method)=>new _method__WEBPACK_IMPORTED_MODULE_0__.ABIMethod(method));\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            methods: this.methods.map((method)=>method.toJSON())\n        };\n    }\n    getMethodByName(name) {\n        return (0,_method__WEBPACK_IMPORTED_MODULE_0__.getMethodByName)(this.methods, name);\n    }\n} //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL2ludGVyZmFjZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUMvQyxNQUFNRTtJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSSxPQUFPQSxPQUFPQyxJQUFJLEtBQUssWUFBWSxDQUFDQyxNQUFNQyxPQUFPLENBQUNILE9BQU9JLE9BQU8sR0FBRztZQUNuRSxNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNKLElBQUksR0FBR0QsT0FBT0MsSUFBSTtRQUN2QixJQUFJLENBQUNLLFdBQVcsR0FBR04sT0FBT08sSUFBSTtRQUM5QixJQUFJLENBQUNILE9BQU8sR0FBR0osT0FBT0ksT0FBTyxDQUFDSSxHQUFHLENBQUMsQ0FBQ0MsU0FBVyxJQUFJYiw4Q0FBU0EsQ0FBQ2E7SUFDaEU7SUFDQUMsU0FBUztRQUNMLE9BQU87WUFDSFQsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZk0sTUFBTSxJQUFJLENBQUNELFdBQVc7WUFDdEJGLFNBQVMsSUFBSSxDQUFDQSxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDQyxTQUFXQSxPQUFPQyxNQUFNO1FBQ3ZEO0lBQ0o7SUFDQWIsZ0JBQWdCSSxJQUFJLEVBQUU7UUFDbEIsT0FBT0osd0RBQWVBLENBQUMsSUFBSSxDQUFDTyxPQUFPLEVBQUVIO0lBQ3pDO0FBQ0osRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2FiaS9pbnRlcmZhY2UuanM/ZmRmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBQklNZXRob2QsIGdldE1ldGhvZEJ5TmFtZSB9IGZyb20gJy4vbWV0aG9kJztcbmV4cG9ydCBjbGFzcyBBQklJbnRlcmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5uYW1lICE9PSAnc3RyaW5nJyB8fCAhQXJyYXkuaXNBcnJheShwYXJhbXMubWV0aG9kcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBQklJbnRlcmZhY2UgcGFyYW1ldGVycycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gcGFyYW1zLmRlc2M7XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHBhcmFtcy5tZXRob2RzLm1hcCgobWV0aG9kKSA9PiBuZXcgQUJJTWV0aG9kKG1ldGhvZCkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZXNjOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbWV0aG9kczogdGhpcy5tZXRob2RzLm1hcCgobWV0aG9kKSA9PiBtZXRob2QudG9KU09OKCkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRNZXRob2RCeU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gZ2V0TWV0aG9kQnlOYW1lKHRoaXMubWV0aG9kcywgbmFtZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6WyJBQklNZXRob2QiLCJnZXRNZXRob2RCeU5hbWUiLCJBQklJbnRlcmZhY2UiLCJjb25zdHJ1Y3RvciIsInBhcmFtcyIsIm5hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJtZXRob2RzIiwiRXJyb3IiLCJkZXNjcmlwdGlvbiIsImRlc2MiLCJtYXAiLCJtZXRob2QiLCJ0b0pTT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/method.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/method.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIMethod: () => (/* binding */ ABIMethod),\n/* harmony export */   getMethodByName: () => (/* binding */ getMethodByName)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _abi_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abi_type */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/abi_type.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/transaction.js\");\n/* harmony import */ var _reference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reference */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/reference.js\");\n\n\n\n\nfunction parseMethodSignature(signature) {\n    const argsStart = signature.indexOf(\"(\");\n    if (argsStart === -1) {\n        throw new Error(`Invalid method signature: ${signature}`);\n    }\n    let argsEnd = -1;\n    let depth = 0;\n    for(let i = argsStart; i < signature.length; i++){\n        const char = signature[i];\n        if (char === \"(\") {\n            depth += 1;\n        } else if (char === \")\") {\n            if (depth === 0) {\n                break;\n            }\n            depth -= 1;\n            if (depth === 0) {\n                argsEnd = i;\n                break;\n            }\n        }\n    }\n    if (argsEnd === -1) {\n        throw new Error(`Invalid method signature: ${signature}`);\n    }\n    return {\n        name: signature.slice(0, argsStart),\n        args: _abi_type__WEBPACK_IMPORTED_MODULE_1__.ABITupleType.parseTupleContent(signature.slice(argsStart + 1, argsEnd)),\n        returns: signature.slice(argsEnd + 1)\n    };\n}\nclass ABIMethod {\n    constructor(params){\n        if (typeof params.name !== \"string\" || typeof params.returns !== \"object\" || !Array.isArray(params.args)) {\n            throw new Error(\"Invalid ABIMethod parameters\");\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.args = params.args.map(({ type, name, desc })=>{\n            if ((0,_transaction__WEBPACK_IMPORTED_MODULE_2__.abiTypeIsTransaction)(type) || (0,_reference__WEBPACK_IMPORTED_MODULE_3__.abiTypeIsReference)(type)) {\n                return {\n                    type,\n                    name,\n                    description: desc\n                };\n            }\n            return {\n                type: _abi_type__WEBPACK_IMPORTED_MODULE_1__.ABIType.from(type),\n                name,\n                description: desc\n            };\n        });\n        this.returns = {\n            type: params.returns.type === \"void\" ? params.returns.type : _abi_type__WEBPACK_IMPORTED_MODULE_1__.ABIType.from(params.returns.type),\n            description: params.returns.desc\n        };\n    }\n    getSignature() {\n        const args = this.args.map((arg)=>arg.type.toString()).join(\",\");\n        const returns = this.returns.type.toString();\n        return `${this.name}(${args})${returns}`;\n    }\n    getSelector() {\n        const hash = (0,_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.genericHash)(this.getSignature());\n        return new Uint8Array(hash.slice(0, 4));\n    }\n    txnCount() {\n        let count = 1;\n        for (const arg of this.args){\n            if (typeof arg.type === \"string\" && (0,_transaction__WEBPACK_IMPORTED_MODULE_2__.abiTypeIsTransaction)(arg.type)) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            args: this.args.map(({ type, name, description })=>({\n                    type: type.toString(),\n                    name,\n                    desc: description\n                })),\n            returns: {\n                type: this.returns.type.toString(),\n                desc: this.returns.description\n            }\n        };\n    }\n    static fromSignature(signature) {\n        const { name, args, returns } = parseMethodSignature(signature);\n        return new ABIMethod({\n            name,\n            args: args.map((arg)=>({\n                    type: arg\n                })),\n            returns: {\n                type: returns\n            }\n        });\n    }\n}\nfunction getMethodByName(methods, name) {\n    if (methods === null || !Array.isArray(methods) || !methods.every((item)=>item instanceof ABIMethod)) throw new Error(\"Methods list provided is null or not the correct type\");\n    const filteredMethods = methods.filter((m)=>m.name === name);\n    if (filteredMethods.length > 1) throw new Error(`found ${filteredMethods.length} methods with the same name ${filteredMethods.map((m)=>m.getSignature()).join(\",\")}`);\n    if (filteredMethods.length === 0) throw new Error(`found 0 methods with the name ${name}`);\n    return filteredMethods[0];\n} //# sourceMappingURL=method.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/method.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/reference.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/reference.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIReferenceType: () => (/* binding */ ABIReferenceType),\n/* harmony export */   abiTypeIsReference: () => (/* binding */ abiTypeIsReference)\n/* harmony export */ });\nvar ABIReferenceType;\n(function(ABIReferenceType) {\n    /**\n     * Account reference type\n     */ ABIReferenceType[\"account\"] = \"account\";\n    /**\n     * Application reference type\n     */ ABIReferenceType[\"application\"] = \"application\";\n    /**\n     * Asset reference type\n     */ ABIReferenceType[\"asset\"] = \"asset\";\n})(ABIReferenceType || (ABIReferenceType = {}));\nfunction abiTypeIsReference(type) {\n    return type === ABIReferenceType.account || type === ABIReferenceType.application || type === ABIReferenceType.asset;\n} //# sourceMappingURL=reference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL3JlZmVyZW5jZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLElBQUlBLGlCQUFpQjtBQUMzQixVQUFVQSxnQkFBZ0I7SUFDdkI7O0tBRUMsR0FDREEsZ0JBQWdCLENBQUMsVUFBVSxHQUFHO0lBQzlCOztLQUVDLEdBQ0RBLGdCQUFnQixDQUFDLGNBQWMsR0FBRztJQUNsQzs7S0FFQyxHQUNEQSxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUc7QUFDaEMsR0FBR0Esb0JBQXFCQSxDQUFBQSxtQkFBbUIsQ0FBQztBQUNyQyxTQUFTQyxtQkFBbUJDLElBQUk7SUFDbkMsT0FBUUEsU0FBU0YsaUJBQWlCRyxPQUFPLElBQ3JDRCxTQUFTRixpQkFBaUJJLFdBQVcsSUFDckNGLFNBQVNGLGlCQUFpQkssS0FBSztBQUN2QyxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL3JlZmVyZW5jZS5qcz83YTAyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgQUJJUmVmZXJlbmNlVHlwZTtcbihmdW5jdGlvbiAoQUJJUmVmZXJlbmNlVHlwZSkge1xuICAgIC8qKlxuICAgICAqIEFjY291bnQgcmVmZXJlbmNlIHR5cGVcbiAgICAgKi9cbiAgICBBQklSZWZlcmVuY2VUeXBlW1wiYWNjb3VudFwiXSA9IFwiYWNjb3VudFwiO1xuICAgIC8qKlxuICAgICAqIEFwcGxpY2F0aW9uIHJlZmVyZW5jZSB0eXBlXG4gICAgICovXG4gICAgQUJJUmVmZXJlbmNlVHlwZVtcImFwcGxpY2F0aW9uXCJdID0gXCJhcHBsaWNhdGlvblwiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IHJlZmVyZW5jZSB0eXBlXG4gICAgICovXG4gICAgQUJJUmVmZXJlbmNlVHlwZVtcImFzc2V0XCJdID0gXCJhc3NldFwiO1xufSkoQUJJUmVmZXJlbmNlVHlwZSB8fCAoQUJJUmVmZXJlbmNlVHlwZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gYWJpVHlwZUlzUmVmZXJlbmNlKHR5cGUpIHtcbiAgICByZXR1cm4gKHR5cGUgPT09IEFCSVJlZmVyZW5jZVR5cGUuYWNjb3VudCB8fFxuICAgICAgICB0eXBlID09PSBBQklSZWZlcmVuY2VUeXBlLmFwcGxpY2F0aW9uIHx8XG4gICAgICAgIHR5cGUgPT09IEFCSVJlZmVyZW5jZVR5cGUuYXNzZXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmZXJlbmNlLmpzLm1hcCJdLCJuYW1lcyI6WyJBQklSZWZlcmVuY2VUeXBlIiwiYWJpVHlwZUlzUmVmZXJlbmNlIiwidHlwZSIsImFjY291bnQiLCJhcHBsaWNhdGlvbiIsImFzc2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/reference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/transaction.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/transaction.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABITransactionType: () => (/* binding */ ABITransactionType),\n/* harmony export */   abiCheckTransactionType: () => (/* binding */ abiCheckTransactionType),\n/* harmony export */   abiTypeIsTransaction: () => (/* binding */ abiTypeIsTransaction)\n/* harmony export */ });\nvar ABITransactionType;\n(function(ABITransactionType) {\n    /**\n     * Any transaction type\n     */ ABITransactionType[\"any\"] = \"txn\";\n    /**\n     * Payment transaction type\n     */ ABITransactionType[\"pay\"] = \"pay\";\n    /**\n     * Key registration transaction type\n     */ ABITransactionType[\"keyreg\"] = \"keyreg\";\n    /**\n     * Asset configuration transaction type\n     */ ABITransactionType[\"acfg\"] = \"acfg\";\n    /**\n     * Asset transfer transaction type\n     */ ABITransactionType[\"axfer\"] = \"axfer\";\n    /**\n     * Asset freeze transaction type\n     */ ABITransactionType[\"afrz\"] = \"afrz\";\n    /**\n     * Application transaction type\n     */ ABITransactionType[\"appl\"] = \"appl\";\n})(ABITransactionType || (ABITransactionType = {}));\nfunction abiTypeIsTransaction(type) {\n    return type === ABITransactionType.any || type === ABITransactionType.pay || type === ABITransactionType.keyreg || type === ABITransactionType.acfg || type === ABITransactionType.axfer || type === ABITransactionType.afrz || type === ABITransactionType.appl;\n}\nfunction abiCheckTransactionType(type, txn) {\n    if (type === ABITransactionType.any) {\n        return true;\n    }\n    return txn.type && txn.type.toString() === type.toString();\n} //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL3RyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLElBQUlBLG1CQUFtQjtBQUM3QixVQUFVQSxrQkFBa0I7SUFDekI7O0tBRUMsR0FDREEsa0JBQWtCLENBQUMsTUFBTSxHQUFHO0lBQzVCOztLQUVDLEdBQ0RBLGtCQUFrQixDQUFDLE1BQU0sR0FBRztJQUM1Qjs7S0FFQyxHQUNEQSxrQkFBa0IsQ0FBQyxTQUFTLEdBQUc7SUFDL0I7O0tBRUMsR0FDREEsa0JBQWtCLENBQUMsT0FBTyxHQUFHO0lBQzdCOztLQUVDLEdBQ0RBLGtCQUFrQixDQUFDLFFBQVEsR0FBRztJQUM5Qjs7S0FFQyxHQUNEQSxrQkFBa0IsQ0FBQyxPQUFPLEdBQUc7SUFDN0I7O0tBRUMsR0FDREEsa0JBQWtCLENBQUMsT0FBTyxHQUFHO0FBQ2pDLEdBQUdBLHNCQUF1QkEsQ0FBQUEscUJBQXFCLENBQUM7QUFDekMsU0FBU0MscUJBQXFCQyxJQUFJO0lBQ3JDLE9BQVFBLFNBQVNGLG1CQUFtQkcsR0FBRyxJQUNuQ0QsU0FBU0YsbUJBQW1CSSxHQUFHLElBQy9CRixTQUFTRixtQkFBbUJLLE1BQU0sSUFDbENILFNBQVNGLG1CQUFtQk0sSUFBSSxJQUNoQ0osU0FBU0YsbUJBQW1CTyxLQUFLLElBQ2pDTCxTQUFTRixtQkFBbUJRLElBQUksSUFDaENOLFNBQVNGLG1CQUFtQlMsSUFBSTtBQUN4QztBQUNPLFNBQVNDLHdCQUF3QlIsSUFBSSxFQUFFUyxHQUFHO0lBQzdDLElBQUlULFNBQVNGLG1CQUFtQkcsR0FBRyxFQUFFO1FBQ2pDLE9BQU87SUFDWDtJQUNBLE9BQU9RLElBQUlULElBQUksSUFBSVMsSUFBSVQsSUFBSSxDQUFDVSxRQUFRLE9BQU9WLEtBQUtVLFFBQVE7QUFDNUQsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2FiaS90cmFuc2FjdGlvbi5qcz9iZDEzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgQUJJVHJhbnNhY3Rpb25UeXBlO1xuKGZ1bmN0aW9uIChBQklUcmFuc2FjdGlvblR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBBbnkgdHJhbnNhY3Rpb24gdHlwZVxuICAgICAqL1xuICAgIEFCSVRyYW5zYWN0aW9uVHlwZVtcImFueVwiXSA9IFwidHhuXCI7XG4gICAgLyoqXG4gICAgICogUGF5bWVudCB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICovXG4gICAgQUJJVHJhbnNhY3Rpb25UeXBlW1wicGF5XCJdID0gXCJwYXlcIjtcbiAgICAvKipcbiAgICAgKiBLZXkgcmVnaXN0cmF0aW9uIHRyYW5zYWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBBQklUcmFuc2FjdGlvblR5cGVbXCJrZXlyZWdcIl0gPSBcImtleXJlZ1wiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IGNvbmZpZ3VyYXRpb24gdHJhbnNhY3Rpb24gdHlwZVxuICAgICAqL1xuICAgIEFCSVRyYW5zYWN0aW9uVHlwZVtcImFjZmdcIl0gPSBcImFjZmdcIjtcbiAgICAvKipcbiAgICAgKiBBc3NldCB0cmFuc2ZlciB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICovXG4gICAgQUJJVHJhbnNhY3Rpb25UeXBlW1wiYXhmZXJcIl0gPSBcImF4ZmVyXCI7XG4gICAgLyoqXG4gICAgICogQXNzZXQgZnJlZXplIHRyYW5zYWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBBQklUcmFuc2FjdGlvblR5cGVbXCJhZnJ6XCJdID0gXCJhZnJ6XCI7XG4gICAgLyoqXG4gICAgICogQXBwbGljYXRpb24gdHJhbnNhY3Rpb24gdHlwZVxuICAgICAqL1xuICAgIEFCSVRyYW5zYWN0aW9uVHlwZVtcImFwcGxcIl0gPSBcImFwcGxcIjtcbn0pKEFCSVRyYW5zYWN0aW9uVHlwZSB8fCAoQUJJVHJhbnNhY3Rpb25UeXBlID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiBhYmlUeXBlSXNUcmFuc2FjdGlvbih0eXBlKSB7XG4gICAgcmV0dXJuICh0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUuYW55IHx8XG4gICAgICAgIHR5cGUgPT09IEFCSVRyYW5zYWN0aW9uVHlwZS5wYXkgfHxcbiAgICAgICAgdHlwZSA9PT0gQUJJVHJhbnNhY3Rpb25UeXBlLmtleXJlZyB8fFxuICAgICAgICB0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUuYWNmZyB8fFxuICAgICAgICB0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUuYXhmZXIgfHxcbiAgICAgICAgdHlwZSA9PT0gQUJJVHJhbnNhY3Rpb25UeXBlLmFmcnogfHxcbiAgICAgICAgdHlwZSA9PT0gQUJJVHJhbnNhY3Rpb25UeXBlLmFwcGwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFiaUNoZWNrVHJhbnNhY3Rpb25UeXBlKHR5cGUsIHR4bikge1xuICAgIGlmICh0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUuYW55KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdHhuLnR5cGUgJiYgdHhuLnR5cGUudG9TdHJpbmcoKSA9PT0gdHlwZS50b1N0cmluZygpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNhY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbIkFCSVRyYW5zYWN0aW9uVHlwZSIsImFiaVR5cGVJc1RyYW5zYWN0aW9uIiwidHlwZSIsImFueSIsInBheSIsImtleXJlZyIsImFjZmciLCJheGZlciIsImFmcnoiLCJhcHBsIiwiYWJpQ2hlY2tUcmFuc2FjdGlvblR5cGUiLCJ0eG4iLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/account.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/account.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ generateAccount)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n\n\n/**\n * generateAccount returns a new Algorand address and its corresponding secret key\n */ function generateAccount() {\n    const keys = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.keyPair();\n    const encodedPk = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(keys.publicKey);\n    return {\n        addr: encodedPk,\n        sk: keys.secretKey\n    };\n} //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWNjb3VudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEM7QUFDRTtBQUM5Qzs7Q0FFQyxHQUNjLFNBQVNFO0lBQ3BCLE1BQU1DLE9BQU9ILHVEQUFZO0lBQ3pCLE1BQU1LLFlBQVlKLDREQUFxQixDQUFDRSxLQUFLSSxTQUFTO0lBQ3RELE9BQU87UUFBRUMsTUFBTUg7UUFBV0ksSUFBSU4sS0FBS08sU0FBUztJQUFDO0FBQ2pELEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hY2NvdW50LmpzPzE2OTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbmFjbCBmcm9tICcuL25hY2wvbmFjbFdyYXBwZXJzJztcbmltcG9ydCAqIGFzIGFkZHJlc3MgZnJvbSAnLi9lbmNvZGluZy9hZGRyZXNzJztcbi8qKlxuICogZ2VuZXJhdGVBY2NvdW50IHJldHVybnMgYSBuZXcgQWxnb3JhbmQgYWRkcmVzcyBhbmQgaXRzIGNvcnJlc3BvbmRpbmcgc2VjcmV0IGtleVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZUFjY291bnQoKSB7XG4gICAgY29uc3Qga2V5cyA9IG5hY2wua2V5UGFpcigpO1xuICAgIGNvbnN0IGVuY29kZWRQayA9IGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhrZXlzLnB1YmxpY0tleSk7XG4gICAgcmV0dXJuIHsgYWRkcjogZW5jb2RlZFBrLCBzazoga2V5cy5zZWNyZXRLZXkgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY291bnQuanMubWFwIl0sIm5hbWVzIjpbIm5hY2wiLCJhZGRyZXNzIiwiZ2VuZXJhdGVBY2NvdW50Iiwia2V5cyIsImtleVBhaXIiLCJlbmNvZGVkUGsiLCJlbmNvZGVBZGRyZXNzIiwicHVibGljS2V5IiwiYWRkciIsInNrIiwic2VjcmV0S2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/bid.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/bid.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Bid)\n/* harmony export */ });\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\n\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */ class Bid {\n    constructor({ bidderKey, bidAmount, bidID, auctionKey, auctionID, maxPrice }){\n        this.name = \"Bid\";\n        this.tag = Buffer.from([\n            97,\n            66\n        ]); // \"aB\"\n        const decodedBidderKey = _encoding_address__WEBPACK_IMPORTED_MODULE_0__.decodeAddress(bidderKey);\n        const decodedAuctionKey = _encoding_address__WEBPACK_IMPORTED_MODULE_0__.decodeAddress(auctionKey);\n        if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error(\"Bid amount must be positive and 2^53-1\");\n        if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error(\"BidID must be positive and 2^53-1\");\n        if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error(\"auctionID must be positive\");\n        Object.assign(this, {\n            bidderKey: decodedBidderKey,\n            bidAmount,\n            bidID,\n            auctionKey: decodedAuctionKey,\n            auctionID,\n            maxPrice\n        });\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        return {\n            bidder: Buffer.from(this.bidderKey.publicKey),\n            cur: this.bidAmount,\n            price: this.maxPrice,\n            id: this.bidID,\n            auc: Buffer.from(this.auctionKey.publicKey),\n            aid: this.auctionID\n        };\n    }\n    signBid(sk) {\n        const encodedMsg = _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__.encode(this.get_obj_for_encoding());\n        const toBeSigned = Buffer.from(_utils_utils__WEBPACK_IMPORTED_MODULE_3__.concatArrays(this.tag, encodedMsg));\n        const sig = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_2__.sign(toBeSigned, sk);\n        // construct signed message\n        const sBid = {\n            sig: Buffer.from(sig),\n            bid: this.get_obj_for_encoding()\n        };\n        const note = {\n            t: \"b\",\n            b: sBid\n        };\n        return new Uint8Array(_encoding_encoding__WEBPACK_IMPORTED_MODULE_1__.encode(note));\n    }\n} //# sourceMappingURL=bid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYmlkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThDO0FBQ0U7QUFDSjtBQUNMO0FBQ3ZDOztHQUVHLEdBQ1ksTUFBTUk7SUFDakJDLFlBQVksRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRyxDQUFFO1FBQzNFLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxHQUFHLEdBQUdDLE9BQU9DLElBQUksQ0FBQztZQUFDO1lBQUk7U0FBRyxHQUFHLE9BQU87UUFDekMsTUFBTUMsbUJBQW1CaEIsNERBQXFCLENBQUNNO1FBQy9DLE1BQU1ZLG9CQUFvQmxCLDREQUFxQixDQUFDUztRQUNoRCxJQUFJLENBQUNVLE9BQU9DLGFBQWEsQ0FBQ2IsY0FBY0EsWUFBWSxHQUNoRCxNQUFNYyxNQUFNO1FBQ2hCLElBQUksQ0FBQ0YsT0FBT0MsYUFBYSxDQUFDWixVQUFVQSxRQUFRLEdBQ3hDLE1BQU1hLE1BQU07UUFDaEIsSUFBSSxDQUFDRixPQUFPQyxhQUFhLENBQUNWLGNBQWNBLFlBQVksR0FDaEQsTUFBTVcsTUFBTTtRQUNoQkMsT0FBT0MsTUFBTSxDQUFDLElBQUksRUFBRTtZQUNoQmpCLFdBQVdVO1lBQ1hUO1lBQ0FDO1lBQ0FDLFlBQVlTO1lBQ1pSO1lBQ0FDO1FBQ0o7SUFDSjtJQUNBLHFDQUFxQztJQUNyQ2EsdUJBQXVCO1FBQ25CLE9BQU87WUFDSEMsUUFBUVgsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ1QsU0FBUyxDQUFDb0IsU0FBUztZQUM1Q0MsS0FBSyxJQUFJLENBQUNwQixTQUFTO1lBQ25CcUIsT0FBTyxJQUFJLENBQUNqQixRQUFRO1lBQ3BCa0IsSUFBSSxJQUFJLENBQUNyQixLQUFLO1lBQ2RzQixLQUFLaEIsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ04sVUFBVSxDQUFDaUIsU0FBUztZQUMxQ0ssS0FBSyxJQUFJLENBQUNyQixTQUFTO1FBQ3ZCO0lBQ0o7SUFDQXNCLFFBQVFDLEVBQUUsRUFBRTtRQUNSLE1BQU1DLGFBQWFqQyxzREFBZSxDQUFDLElBQUksQ0FBQ3VCLG9CQUFvQjtRQUM1RCxNQUFNWSxhQUFhdEIsT0FBT0MsSUFBSSxDQUFDWixzREFBa0IsQ0FBQyxJQUFJLENBQUNVLEdBQUcsRUFBRXFCO1FBQzVELE1BQU1JLE1BQU1wQyxvREFBUyxDQUFDa0MsWUFBWUg7UUFDbEMsMkJBQTJCO1FBQzNCLE1BQU1PLE9BQU87WUFDVEYsS0FBS3hCLE9BQU9DLElBQUksQ0FBQ3VCO1lBQ2pCRyxLQUFLLElBQUksQ0FBQ2pCLG9CQUFvQjtRQUNsQztRQUNBLE1BQU1rQixPQUFPO1lBQ1RDLEdBQUc7WUFDSEMsR0FBR0o7UUFDUDtRQUNBLE9BQU8sSUFBSUssV0FBVzVDLHNEQUFlLENBQUN5QztJQUMxQztBQUNKLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9iaWQuanM/MDQ3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhZGRyZXNzIGZyb20gJy4vZW5jb2RpbmcvYWRkcmVzcyc7XG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICcuL2VuY29kaW5nL2VuY29kaW5nJztcbmltcG9ydCAqIGFzIG5hY2wgZnJvbSAnLi9uYWNsL25hY2xXcmFwcGVycyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzL3V0aWxzJztcbi8qKlxuICogQmlkIGVuYWJsZXMgY29uc3RydWN0aW9uIG9mIEFsZ29yYW5kIEF1Y3Rpb25zIEJpZHNcbiAqICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaWQge1xuICAgIGNvbnN0cnVjdG9yKHsgYmlkZGVyS2V5LCBiaWRBbW91bnQsIGJpZElELCBhdWN0aW9uS2V5LCBhdWN0aW9uSUQsIG1heFByaWNlLCB9KSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdCaWQnO1xuICAgICAgICB0aGlzLnRhZyA9IEJ1ZmZlci5mcm9tKFs5NywgNjZdKTsgLy8gXCJhQlwiXG4gICAgICAgIGNvbnN0IGRlY29kZWRCaWRkZXJLZXkgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3MoYmlkZGVyS2V5KTtcbiAgICAgICAgY29uc3QgZGVjb2RlZEF1Y3Rpb25LZXkgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3MoYXVjdGlvbktleSk7XG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoYmlkQW1vdW50KSB8fCBiaWRBbW91bnQgPCAwKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0JpZCBhbW91bnQgbXVzdCBiZSBwb3NpdGl2ZSBhbmQgMl41My0xJyk7XG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoYmlkSUQpIHx8IGJpZElEIDwgMClcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdCaWRJRCBtdXN0IGJlIHBvc2l0aXZlIGFuZCAyXjUzLTEnKTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihhdWN0aW9uSUQpIHx8IGF1Y3Rpb25JRCA8IDApXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignYXVjdGlvbklEIG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XG4gICAgICAgICAgICBiaWRkZXJLZXk6IGRlY29kZWRCaWRkZXJLZXksXG4gICAgICAgICAgICBiaWRBbW91bnQsXG4gICAgICAgICAgICBiaWRJRCxcbiAgICAgICAgICAgIGF1Y3Rpb25LZXk6IGRlY29kZWRBdWN0aW9uS2V5LFxuICAgICAgICAgICAgYXVjdGlvbklELFxuICAgICAgICAgICAgbWF4UHJpY2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgZ2V0X29ial9mb3JfZW5jb2RpbmcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiaWRkZXI6IEJ1ZmZlci5mcm9tKHRoaXMuYmlkZGVyS2V5LnB1YmxpY0tleSksXG4gICAgICAgICAgICBjdXI6IHRoaXMuYmlkQW1vdW50LFxuICAgICAgICAgICAgcHJpY2U6IHRoaXMubWF4UHJpY2UsXG4gICAgICAgICAgICBpZDogdGhpcy5iaWRJRCxcbiAgICAgICAgICAgIGF1YzogQnVmZmVyLmZyb20odGhpcy5hdWN0aW9uS2V5LnB1YmxpY0tleSksXG4gICAgICAgICAgICBhaWQ6IHRoaXMuYXVjdGlvbklELFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzaWduQmlkKHNrKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZWRNc2cgPSBlbmNvZGluZy5lbmNvZGUodGhpcy5nZXRfb2JqX2Zvcl9lbmNvZGluZygpKTtcbiAgICAgICAgY29uc3QgdG9CZVNpZ25lZCA9IEJ1ZmZlci5mcm9tKHV0aWxzLmNvbmNhdEFycmF5cyh0aGlzLnRhZywgZW5jb2RlZE1zZykpO1xuICAgICAgICBjb25zdCBzaWcgPSBuYWNsLnNpZ24odG9CZVNpZ25lZCwgc2spO1xuICAgICAgICAvLyBjb25zdHJ1Y3Qgc2lnbmVkIG1lc3NhZ2VcbiAgICAgICAgY29uc3Qgc0JpZCA9IHtcbiAgICAgICAgICAgIHNpZzogQnVmZmVyLmZyb20oc2lnKSxcbiAgICAgICAgICAgIGJpZDogdGhpcy5nZXRfb2JqX2Zvcl9lbmNvZGluZygpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBub3RlID0ge1xuICAgICAgICAgICAgdDogJ2InLFxuICAgICAgICAgICAgYjogc0JpZCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGVuY29kaW5nLmVuY29kZShub3RlKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmlkLmpzLm1hcCJdLCJuYW1lcyI6WyJhZGRyZXNzIiwiZW5jb2RpbmciLCJuYWNsIiwidXRpbHMiLCJCaWQiLCJjb25zdHJ1Y3RvciIsImJpZGRlcktleSIsImJpZEFtb3VudCIsImJpZElEIiwiYXVjdGlvbktleSIsImF1Y3Rpb25JRCIsIm1heFByaWNlIiwibmFtZSIsInRhZyIsIkJ1ZmZlciIsImZyb20iLCJkZWNvZGVkQmlkZGVyS2V5IiwiZGVjb2RlQWRkcmVzcyIsImRlY29kZWRBdWN0aW9uS2V5IiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsIkVycm9yIiwiT2JqZWN0IiwiYXNzaWduIiwiZ2V0X29ial9mb3JfZW5jb2RpbmciLCJiaWRkZXIiLCJwdWJsaWNLZXkiLCJjdXIiLCJwcmljZSIsImlkIiwiYXVjIiwiYWlkIiwic2lnbkJpZCIsInNrIiwiZW5jb2RlZE1zZyIsImVuY29kZSIsInRvQmVTaWduZWQiLCJjb25jYXRBcnJheXMiLCJzaWciLCJzaWduIiwic0JpZCIsImJpZCIsIm5vdGUiLCJ0IiwiYiIsIlVpbnQ4QXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/bid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/boxStorage.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/boxStorage.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   translateBoxReferences: () => (/* binding */ translateBoxReferences)\n/* harmony export */ });\nfunction translateBoxReference(reference, foreignApps, appIndex) {\n    const referenceId = reference.appIndex;\n    const referenceName = reference.name;\n    const isOwnReference = referenceId === 0 || referenceId === appIndex;\n    let index = 0;\n    if (foreignApps != null) {\n        // Foreign apps start from index 1; index 0 is its own app ID.\n        index = foreignApps.indexOf(referenceId) + 1;\n    }\n    // Check if the app referenced is itself after checking the foreign apps array.\n    // If index is zero, then the app ID was not found in the foreign apps array\n    // or the foreign apps array was null.\n    if (index === 0 && !isOwnReference) {\n        // Error if the app is trying to reference a foreign app that was not in\n        // its own foreign apps array.\n        throw new Error(`Box ref with appId ${referenceId} not in foreign-apps`);\n    }\n    return {\n        i: index,\n        n: referenceName\n    };\n}\n/**\n * translateBoxReferences translates an array of BoxReferences with app IDs\n * into an array of EncodedBoxReferences with foreign indices.\n */ function translateBoxReferences(references, foreignApps, appIndex) {\n    if (references == null) return [];\n    return references.map((bx)=>translateBoxReference(bx, foreignApps, appIndex));\n} //# sourceMappingURL=boxStorage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYm94U3RvcmFnZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0Esc0JBQXNCQyxTQUFTLEVBQUVDLFdBQVcsRUFBRUMsUUFBUTtJQUMzRCxNQUFNQyxjQUFjSCxVQUFVRSxRQUFRO0lBQ3RDLE1BQU1FLGdCQUFnQkosVUFBVUssSUFBSTtJQUNwQyxNQUFNQyxpQkFBaUJILGdCQUFnQixLQUFLQSxnQkFBZ0JEO0lBQzVELElBQUlLLFFBQVE7SUFDWixJQUFJTixlQUFlLE1BQU07UUFDckIsOERBQThEO1FBQzlETSxRQUFRTixZQUFZTyxPQUFPLENBQUNMLGVBQWU7SUFDL0M7SUFDQSwrRUFBK0U7SUFDL0UsNEVBQTRFO0lBQzVFLHNDQUFzQztJQUN0QyxJQUFJSSxVQUFVLEtBQUssQ0FBQ0QsZ0JBQWdCO1FBQ2hDLHdFQUF3RTtRQUN4RSw4QkFBOEI7UUFDOUIsTUFBTSxJQUFJRyxNQUFNLENBQUMsbUJBQW1CLEVBQUVOLFlBQVksb0JBQW9CLENBQUM7SUFDM0U7SUFDQSxPQUFPO1FBQUVPLEdBQUdIO1FBQU9JLEdBQUdQO0lBQWM7QUFDeEM7QUFDQTs7O0NBR0MsR0FDTSxTQUFTUSx1QkFBdUJDLFVBQVUsRUFBRVosV0FBVyxFQUFFQyxRQUFRO0lBQ3BFLElBQUlXLGNBQWMsTUFDZCxPQUFPLEVBQUU7SUFDYixPQUFPQSxXQUFXQyxHQUFHLENBQUMsQ0FBQ0MsS0FBT2hCLHNCQUFzQmdCLElBQUlkLGFBQWFDO0FBQ3pFLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9ib3hTdG9yYWdlLmpzPzdlZjIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdHJhbnNsYXRlQm94UmVmZXJlbmNlKHJlZmVyZW5jZSwgZm9yZWlnbkFwcHMsIGFwcEluZGV4KSB7XG4gICAgY29uc3QgcmVmZXJlbmNlSWQgPSByZWZlcmVuY2UuYXBwSW5kZXg7XG4gICAgY29uc3QgcmVmZXJlbmNlTmFtZSA9IHJlZmVyZW5jZS5uYW1lO1xuICAgIGNvbnN0IGlzT3duUmVmZXJlbmNlID0gcmVmZXJlbmNlSWQgPT09IDAgfHwgcmVmZXJlbmNlSWQgPT09IGFwcEluZGV4O1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgaWYgKGZvcmVpZ25BcHBzICE9IG51bGwpIHtcbiAgICAgICAgLy8gRm9yZWlnbiBhcHBzIHN0YXJ0IGZyb20gaW5kZXggMTsgaW5kZXggMCBpcyBpdHMgb3duIGFwcCBJRC5cbiAgICAgICAgaW5kZXggPSBmb3JlaWduQXBwcy5pbmRleE9mKHJlZmVyZW5jZUlkKSArIDE7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoZSBhcHAgcmVmZXJlbmNlZCBpcyBpdHNlbGYgYWZ0ZXIgY2hlY2tpbmcgdGhlIGZvcmVpZ24gYXBwcyBhcnJheS5cbiAgICAvLyBJZiBpbmRleCBpcyB6ZXJvLCB0aGVuIHRoZSBhcHAgSUQgd2FzIG5vdCBmb3VuZCBpbiB0aGUgZm9yZWlnbiBhcHBzIGFycmF5XG4gICAgLy8gb3IgdGhlIGZvcmVpZ24gYXBwcyBhcnJheSB3YXMgbnVsbC5cbiAgICBpZiAoaW5kZXggPT09IDAgJiYgIWlzT3duUmVmZXJlbmNlKSB7XG4gICAgICAgIC8vIEVycm9yIGlmIHRoZSBhcHAgaXMgdHJ5aW5nIHRvIHJlZmVyZW5jZSBhIGZvcmVpZ24gYXBwIHRoYXQgd2FzIG5vdCBpblxuICAgICAgICAvLyBpdHMgb3duIGZvcmVpZ24gYXBwcyBhcnJheS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCb3ggcmVmIHdpdGggYXBwSWQgJHtyZWZlcmVuY2VJZH0gbm90IGluIGZvcmVpZ24tYXBwc2ApO1xuICAgIH1cbiAgICByZXR1cm4geyBpOiBpbmRleCwgbjogcmVmZXJlbmNlTmFtZSB9O1xufVxuLyoqXG4gKiB0cmFuc2xhdGVCb3hSZWZlcmVuY2VzIHRyYW5zbGF0ZXMgYW4gYXJyYXkgb2YgQm94UmVmZXJlbmNlcyB3aXRoIGFwcCBJRHNcbiAqIGludG8gYW4gYXJyYXkgb2YgRW5jb2RlZEJveFJlZmVyZW5jZXMgd2l0aCBmb3JlaWduIGluZGljZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGVCb3hSZWZlcmVuY2VzKHJlZmVyZW5jZXMsIGZvcmVpZ25BcHBzLCBhcHBJbmRleCkge1xuICAgIGlmIChyZWZlcmVuY2VzID09IG51bGwpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICByZXR1cm4gcmVmZXJlbmNlcy5tYXAoKGJ4KSA9PiB0cmFuc2xhdGVCb3hSZWZlcmVuY2UoYngsIGZvcmVpZ25BcHBzLCBhcHBJbmRleCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym94U3RvcmFnZS5qcy5tYXAiXSwibmFtZXMiOlsidHJhbnNsYXRlQm94UmVmZXJlbmNlIiwicmVmZXJlbmNlIiwiZm9yZWlnbkFwcHMiLCJhcHBJbmRleCIsInJlZmVyZW5jZUlkIiwicmVmZXJlbmNlTmFtZSIsIm5hbWUiLCJpc093blJlZmVyZW5jZSIsImluZGV4IiwiaW5kZXhPZiIsIkVycm9yIiwiaSIsIm4iLCJ0cmFuc2xhdGVCb3hSZWZlcmVuY2VzIiwicmVmZXJlbmNlcyIsIm1hcCIsImJ4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/boxStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/algod.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/algod.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { default: HTTPClient } = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/client.js\");\nconst { setSendTransactionHeaders } = __webpack_require__(/*! ./v2/algod/sendRawTransaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js\");\n/** @deprecated v1 algod APIs are deprecated, please use the v2 client */ function Algod(token = \"\", baseServer = \"http://r2.algorand.network\", port = 4180, headers = {}) {\n    // workaround to allow backwards compatibility for multiple headers\n    let tokenHeader = token;\n    if (typeof tokenHeader === \"string\") {\n        tokenHeader = {\n            \"X-Algo-API-Token\": tokenHeader\n        };\n    }\n    // Get client\n    const c = new HTTPClient(tokenHeader, baseServer, port, headers);\n    /**\n     * Takes an object and convert its note field to Buffer, if exist.\n     * @param o\n     * @returns {*}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ function noteb64ToNote(o) {\n        if (!(o.noteb64 === undefined || o.noteb64 === null)) {\n            // eslint-disable-next-line no-param-reassign\n            o.note = Buffer.from(o.noteb64, \"base64\");\n        }\n        return o;\n    }\n    /**\n     * status retrieves the StatusResponse from the running node\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.status = async (headerObj = {})=>{\n        const res = await c.get(\"/v1/status\", {}, headerObj);\n        return res.body;\n    };\n    /**\n     * healthCheck returns an empty object iff the node is running\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.healthCheck = async (headerObj = {})=>{\n        const res = await c.get(\"/health\", {}, headerObj);\n        if (!res.ok) {\n            throw new Error(`Health response: ${res.status}`);\n        }\n        return {};\n    };\n    /**\n     * statusAfterBlock waits for round roundNumber to occur then returns the StatusResponse for this round.\n     * This call blocks\n     * @param roundNumber\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.statusAfterBlock = async (roundNumber, headerObj = {})=>{\n        if (!Number.isInteger(roundNumber)) throw Error(\"roundNumber should be an integer\");\n        const res = await c.get(`/v1/status/wait-for-block-after/${roundNumber}`, {}, headerObj);\n        return res.body;\n    };\n    /**\n     * pendingTransactions asks algod for a snapshot of current pending txns on the node, bounded by maxTxns.\n     * If maxTxns = 0, fetches as many transactions as possible.\n     * @param maxTxns - number\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.pendingTransactions = async (maxTxns, headerObj = {})=>{\n        if (!Number.isInteger(maxTxns)) throw Error(\"maxTxns should be an integer\");\n        const res = await c.get(\"/v1/transactions/pending\", {\n            max: maxTxns\n        }, headerObj);\n        if (res.statusCode === 200 && res.body.truncatedTxns.transactions !== undefined) {\n            for(let i = 0; i < res.body.truncatedTxns.transactions.length; i++){\n                res.body.truncatedTxns.transactions[i] = noteb64ToNote(res.body.truncatedTxns.transactions[i]);\n            }\n        }\n        return res.body;\n    };\n    /**\n     * versions retrieves the VersionResponse from the running node\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.versions = async (headerObj = {})=>{\n        const res = await c.get(\"/versions\", {}, headerObj);\n        return res.body;\n    };\n    /**\n     * LedgerSupply gets the supply details for the specified node's Ledger\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.ledgerSupply = async (headerObj = {})=>{\n        const res = await c.get(\"/v1/ledger/supply\", {}, headerObj);\n        return res.body;\n    };\n    /**\n     * transactionsByAddress returns all transactions for a PK [addr] in the [first, last] rounds range.\n     * @param addr - string\n     * @param first - number, optional\n     * @param last - number, optional\n     * @param maxTxns - number, optional\n     * @param headers, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.transactionByAddress = async (addr, first = null, last = null, maxTxns = null, headerObj = {})=>{\n        if (first !== null && !Number.isInteger(first)) {\n            throw Error(\"first round should be an integer\");\n        }\n        if (last !== null && !Number.isInteger(last)) {\n            throw Error(\"last round should be an integer\");\n        }\n        const res = await c.get(`/v1/account/${addr}/transactions`, {\n            firstRound: first,\n            lastRound: last,\n            max: maxTxns\n        }, headerObj);\n        if (res.statusCode === 200 && res.body.transactions !== undefined) {\n            for(let i = 0; i < res.body.transactions.length; i++){\n                res.body.transactions[i] = noteb64ToNote(res.body.transactions[i]);\n            }\n        }\n        return res.body;\n    };\n    /**\n     * transactionsByAddressAndDate returns all transactions for a PK [addr] in the [fromDate, toDate] date range.\n     * The date is a string in the YYYY-MM-DD format.\n     * @param addr - string\n     * @param fromDate - string\n     * @param toDate - string\n     * @param maxTxns - number, optional\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.transactionByAddressAndDate = async (addr, fromDate, toDate, maxTxns = null, headerObj = {})=>{\n        const res = await c.get(`/v1/account/${addr}/transactions`, {\n            fromDate,\n            toDate,\n            max: maxTxns\n        }, headerObj);\n        if (res.statusCode === 200 && res.body.transactions !== undefined) {\n            for(let i = 0; i < res.body.transactions.length; i++){\n                res.body.transactions[i] = noteb64ToNote(res.body.transactions[i]);\n            }\n        }\n        return res.body;\n    };\n    /**\n     * transactionById returns the a transaction information of a specific txid [txId]\n     * Note - This method is allowed only when Indexer is enabled.\n     * @param txid\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.transactionById = async (txid, headerObj = {})=>{\n        const res = await c.get(`/v1/transaction/${txid}`, {}, headerObj);\n        if (res.statusCode === 200) {\n            res.body = noteb64ToNote(res.body);\n        }\n        return res.body;\n    };\n    /**\n     * transactionInformation returns the transaction information of a specific txid and an address\n     * @param addr\n     * @param txid\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.transactionInformation = async (addr, txid, headerObj = {})=>{\n        const res = await c.get(`/v1/account/${addr}/transaction/${txid}`, {}, headerObj);\n        if (res.statusCode === 200) {\n            res.body = noteb64ToNote(res.body);\n        }\n        return res.body;\n    };\n    /**\n     * pendingTransactionInformation returns the transaction information for a specific txid of a pending transaction\n     * @param txid\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.pendingTransactionInformation = async (txid, headerObj = {})=>{\n        const res = await c.get(`/v1/transactions/pending/${txid}`, {}, headerObj);\n        if (res.statusCode === 200) {\n            res.body = noteb64ToNote(res.body);\n        }\n        return res.body;\n    };\n    /**\n     * accountInformation returns the passed account's information\n     * @param addr - string\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.accountInformation = async (addr, headerObj = {})=>{\n        const res = await c.get(`/v1/account/${addr}`, {}, headerObj);\n        return res.body;\n    };\n    /**\n     * assetInformation returns the information for the asset with the passed creator and index\n     * @param index - number\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.assetInformation = async (index, headerObj = {})=>{\n        const res = await c.get(`/v1/asset/${index}`, {}, headerObj);\n        return res.body;\n    };\n    /**\n     * suggestedFee gets the recommended transaction fee from the node\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.suggestedFee = async (headerObj = {})=>{\n        const res = await c.get(\"/v1/transactions/fee\", {}, headerObj);\n        return res.body;\n    };\n    /**\n     * sendRawTransaction gets an encoded SignedTxn and broadcasts it to the network\n     * @param txn - Uin8Array\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.sendRawTransaction = async (txn, headerObj = {})=>{\n        const txHeaders = setSendTransactionHeaders(headerObj);\n        const res = await c.post(\"/v1/transactions\", Buffer.from(txn), txHeaders);\n        return res.body;\n    };\n    /**\n     * sendRawTransactions gets a list of encoded SignedTxns and broadcasts it to the network\n     * @param txn - Array of Uin8Array\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.sendRawTransactions = async (txns, headerObj = {})=>{\n        const txHeaders = setSendTransactionHeaders(headerObj);\n        const merged = Array.prototype.concat(...txns.map((arr)=>Array.from(arr)));\n        const res = await c.post(\"/v1/transactions\", Buffer.from(merged), txHeaders);\n        return res.body;\n    };\n    /**\n     * getTransactionParams returns to common needed parameters for a new transaction\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.getTransactionParams = async (headerObj = {})=>{\n        const res = await c.get(\"/v1/transactions/params\", {}, headerObj);\n        return res.body;\n    };\n    /**\n     * suggestParams returns to common needed parameters for a new transaction, in a format the transaction builder expects\n     * @param headerObj, optional\n     * @returns {Object}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.suggestParams = async (headerObj = {})=>{\n        const result = await this.getTransactionParams(headerObj);\n        return {\n            flatFee: false,\n            fee: result.fee,\n            firstRound: result.lastRound,\n            lastRound: result.lastRound + 1000,\n            genesisID: result.genesisID,\n            genesisHash: result.genesishashb64\n        };\n    };\n    /**\n     * block gets the block info for the given round This call blocks\n     * @param roundNumber\n     * @param headerObj, optional\n     * @returns {Promise<*>}\n     * @deprecated v1 algod APIs are deprecated, please use the v2 client\n     */ this.block = async (roundNumber, headerObj = {})=>{\n        if (!Number.isInteger(roundNumber)) throw Error(\"roundNumber should be an integer\");\n        const res = await c.get(`/v1/block/${roundNumber}`, {}, headerObj);\n        if (res.statusCode === 200 && res.body.txns.transactions !== undefined) {\n            for(let i = 0; i < res.body.txns.transactions.length; i++){\n                res.body.txns.transactions[i] = noteb64ToNote(res.body.txns.transactions[i]);\n            }\n        }\n        return res.body;\n    };\n}\nmodule.exports = {\n    Algod\n}; //# sourceMappingURL=algod.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/algod.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/client.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/client.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HTTPClient)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _urlTokenBaseHTTPClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./urlTokenBaseHTTPClient */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/urlTokenBaseHTTPClient.js\");\n\n\n/**\n * Remove falsy values or values with a length of 0 from an object.\n */ function removeFalsyOrEmpty(obj) {\n    for(const key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            // eslint-disable-next-line no-param-reassign\n            if (!obj[key] || obj[key].length === 0) delete obj[key];\n        }\n    }\n    return obj;\n}\n/**\n * Create a new object with lower-case keys\n * See https://codereview.stackexchange.com/a/162418\n * Used to ensure all headers are lower-case and to work more easily with them\n */ function tolowerCaseKeys(o) {\n    /* eslint-disable no-param-reassign,no-return-assign,no-sequences */ return Object.keys(o).reduce((c, k)=>(c[k.toLowerCase()] = o[k], c), {});\n/* eslint-enable no-param-reassign,no-return-assign,no-sequences */ }\n/**\n * getAcceptFormat returns the correct Accept header depending on the\n * requested format.\n */ function getAcceptFormat(query) {\n    if (query !== undefined && Object.prototype.hasOwnProperty.call(query, \"format\")) {\n        switch(query.format){\n            case \"msgpack\":\n                return \"application/msgpack\";\n            case \"json\":\n            default:\n                return \"application/json\";\n        }\n    } else return \"application/json\";\n}\n/**\n * HTTPClient is a wrapper around a BaseHTTPClient\n * It takes care of setting the proper \"Accept\" header and of\n * decoding the JSON outputs.\n */ class HTTPClient {\n    constructor(bcOrTokenHeader, baseServer, port, defaultHeaders = {}){\n        if (baseServer !== undefined) {\n            this.bc = new _urlTokenBaseHTTPClient__WEBPACK_IMPORTED_MODULE_1__.URLTokenBaseHTTPClient(bcOrTokenHeader, baseServer, port, defaultHeaders);\n        } else {\n            this.bc = bcOrTokenHeader;\n        }\n    }\n    /**\n     * Parse JSON using either the built-in JSON.parse or utils.parseJSON\n     * depending on whether jsonOptions are provided or not\n     *\n     * @param text - JSON data\n     * @param status - Status of the response (used in case parseJSON fails)\n     * @param jsonOptions - Options object to use to decode JSON responses. See\n     *   utils.parseJSON for the options available.\n     */ static parseJSON(text, status, jsonOptions = {}) {\n        try {\n            if (Object.keys(jsonOptions).length === 0) {\n                return text && JSON.parse(text);\n            }\n            return text && _utils_utils__WEBPACK_IMPORTED_MODULE_0__.parseJSON(text, jsonOptions);\n        } catch (err_) {\n            const err = err_;\n            // return the raw response if the response parsing fails\n            err.rawResponse = text || null;\n            // return the http status code if the response parsing fails\n            err.statusCode = status;\n            throw err;\n        }\n    }\n    /**\n     * Serialize the data according to the requestHeaders\n     * Assumes that requestHeaders contain a key \"content-type\"\n     * If the content-type is \"application/json\", data is JSON serialized\n     * Otherwise, data needs to be either an UTF-8 string that is converted to an Uint8Array\n     * or an Uint8Array\n     * @private\n     */ static serializeData(data, requestHeaders) {\n        if (!data) {\n            return new Uint8Array(0); // empty Uint8Array\n        }\n        if (requestHeaders[\"content-type\"] === \"application/json\") {\n            return new Uint8Array(Buffer.from(JSON.stringify(data)));\n        }\n        if (typeof data === \"string\") {\n            return new Uint8Array(Buffer.from(data));\n        }\n        if (data instanceof Uint8Array) {\n            return data;\n        }\n        throw new Error(\"provided data is neither a string nor a Uint8Array and content-type is not application/json\");\n    }\n    /**\n     * Convert a BaseHTTPClientResponse into a full HTTPClientResponse\n     * Parse the body in\n     * Modifies in place res and return the result\n     */ static prepareResponse(res, format, parseBody, jsonOptions = {}) {\n        let { body } = res;\n        let text;\n        if (format !== \"application/msgpack\") {\n            text = body && Buffer.from(body).toString() || \"\";\n        }\n        if (parseBody && format === \"application/json\") {\n            body = HTTPClient.parseJSON(text, res.status, jsonOptions);\n        }\n        return {\n            ...res,\n            body,\n            text,\n            ok: Math.trunc(res.status / 100) === 2\n        };\n    }\n    /**\n     * Prepare an error with a response\n     * (the type of errors BaseHTTPClient are supposed to throw)\n     * by adding the status and preparing the internal response\n     * @private\n     */ static prepareResponseError(err) {\n        if (err.response) {\n            // eslint-disable-next-line no-param-reassign\n            err.response = HTTPClient.prepareResponse(err.response, \"application/json\", true);\n            // eslint-disable-next-line no-param-reassign\n            err.status = err.response.status;\n        }\n        return err;\n    }\n    /**\n     * Send a GET request.\n     * @param relativePath - The path of the request.\n     * @param query - An object containing the query parameters of the request.\n     * @param requestHeaders - An object containing additional request headers to use.\n     * @param jsonOptions - Options object to use to decode JSON responses. See\n     *   utils.parseJSON for the options available.\n     * @param parseBody - An optional boolean indicating whether the response body should be parsed\n     *   or not.\n     * @returns Response object.\n     */ async get(relativePath, query, requestHeaders = {}, jsonOptions = {}, parseBody = true) {\n        const format = getAcceptFormat(query);\n        const fullHeaders = {\n            ...requestHeaders,\n            accept: format\n        };\n        try {\n            const res = await this.bc.get(relativePath, removeFalsyOrEmpty(query), fullHeaders);\n            return HTTPClient.prepareResponse(res, format, parseBody, jsonOptions);\n        } catch (err) {\n            throw HTTPClient.prepareResponseError(err);\n        }\n    }\n    /**\n     * Send a POST request.\n     * If no content-type present, adds the header \"content-type: application/json\"\n     * and data is serialized in JSON (if not empty)\n     */ async post(relativePath, data, requestHeaders = {}, query, parseBody = true) {\n        const fullHeaders = {\n            \"content-type\": \"application/json\",\n            ...tolowerCaseKeys(requestHeaders)\n        };\n        try {\n            const res = await this.bc.post(relativePath, HTTPClient.serializeData(data, fullHeaders), query, fullHeaders);\n            return HTTPClient.prepareResponse(res, \"application/json\", parseBody);\n        } catch (err) {\n            throw HTTPClient.prepareResponseError(err);\n        }\n    }\n    /**\n     * Send a DELETE request.\n     * If no content-type present, adds the header \"content-type: application/json\"\n     * and data is serialized in JSON (if not empty)\n     */ async delete(relativePath, data, requestHeaders = {}, parseBody = true) {\n        const fullHeaders = {\n            \"content-type\": \"application/json\",\n            ...tolowerCaseKeys(requestHeaders)\n        };\n        const res = await this.bc.delete(relativePath, HTTPClient.serializeData(data, fullHeaders), undefined, fullHeaders);\n        return HTTPClient.prepareResponse(res, \"application/json\", parseBody);\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/kmd.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/kmd.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Kmd)\n/* harmony export */ });\n/* harmony import */ var _v2_serviceClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v2/serviceClient */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/serviceClient.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\n\n\nclass Kmd extends _v2_serviceClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(token, baseServer = \"http://127.0.0.1\", port = 7833, headers = {}){\n        super(\"X-KMD-API-Token\", token, baseServer, port, headers);\n    }\n    /**\n     * version returns a VersionResponse containing a list of kmd API versions supported by this running kmd instance.\n     */ async versions() {\n        const res = await this.c.get(\"/versions\");\n        return res.body;\n    }\n    /**\n     * listWallets returns a ListWalletsResponse containing the list of wallets known to kmd. Using a wallet ID\n     * returned from this endpoint, you can initialize a wallet handle with client.InitWalletHandle\n     */ async listWallets() {\n        const res = await this.c.get(\"/v1/wallets\");\n        return res.body;\n    }\n    /**\n     * createWallet creates a wallet with the specified name, password, driver,\n     * and master derivation key. If the master derivation key is blank, one is\n     * generated internally to kmd. CreateWallet returns a CreateWalletResponse\n     * containing information about the new wallet.\n     * @param walletName\n     * @param walletPassword\n     * @param walletDriverName\n     * @param walletMDK\n     */ async createWallet(walletName, walletPassword, walletMDK = new Uint8Array(), walletDriverName = \"sqlite\") {\n        const req = {\n            wallet_name: walletName,\n            wallet_driver_name: walletDriverName,\n            wallet_password: walletPassword,\n            master_derivation_key: Buffer.from(walletMDK).toString(\"base64\")\n        };\n        const res = await this.c.post(\"/v1/wallet\", req);\n        return res.body;\n    }\n    /**\n     * initWalletHandle accepts a wallet ID and a wallet password, and returns an\n     * initWalletHandleResponse containing a wallet handle token. This wallet\n     * handle token can be used for subsequent operations on this wallet, like key\n     * generation, transaction signing, etc.. WalletHandleTokens expire after a\n     * configurable number of seconds, and must be renewed periodically with\n     * RenewWalletHandle. It is good practice to call ReleaseWalletHandle when\n     * you're done interacting with this wallet.\n     * @param walletID\n     * @param walletPassword\n     */ async initWalletHandle(walletID, walletPassword) {\n        const req = {\n            wallet_id: walletID,\n            wallet_password: walletPassword\n        };\n        const res = await this.c.post(\"/v1/wallet/init\", req);\n        return res.body;\n    }\n    /**\n     * releaseWalletHandle invalidates the passed wallet handle token, making\n     * it unusuable for subsequent wallet operations.\n     * @param walletHandle\n     */ async releaseWalletHandle(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        const res = await this.c.post(\"/v1/wallet/release\", req);\n        return res.body;\n    }\n    /**\n     * renewWalletHandle accepts a wallet handle and attempts to renew it, moving\n     * the expiration time to some number of seconds in the future. It returns a\n     * RenewWalletHandleResponse containing the walletHandle and the number of\n     * seconds until expiration\n     * @param walletHandle\n     */ async renewWalletHandle(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        const res = await this.c.post(\"/v1/wallet/renew\", req);\n        return res.body;\n    }\n    /**\n     * renameWallet accepts a wallet ID, wallet password, and a new wallet name,\n     * and renames the underlying wallet.\n     * @param walletID\n     * @param walletPassword\n     * @param newWalletName\n     */ async renameWallet(walletID, walletPassword, newWalletName) {\n        const req = {\n            wallet_id: walletID,\n            wallet_password: walletPassword,\n            wallet_name: newWalletName\n        };\n        const res = await this.c.post(\"/v1/wallet/rename\", req);\n        return res.body;\n    }\n    /**\n     * getWallet accepts a wallet handle and returns high level information about\n     * this wallet in a GetWalletResponse.\n     * @param walletHandle\n     */ async getWallet(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        const res = await this.c.post(\"/v1/wallet/info\", req);\n        return res.body;\n    }\n    /**\n     * exportMasterDerivationKey accepts a wallet handle and a wallet password, and\n     * returns an ExportMasterDerivationKeyResponse containing the master\n     * derivation key. This key can be used as an argument to CreateWallet in\n     * order to recover the keys generated by this wallet. The master derivation\n     * key can be encoded as a sequence of words using the mnemonic library, and\n     * @param walletHandle\n     * @param walletPassword\n     */ async exportMasterDerivationKey(walletHandle, walletPassword) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword\n        };\n        const res = await this.c.post(\"/v1/master-key/export\", req);\n        return {\n            master_derivation_key: Buffer.from(res.body.master_derivation_key, \"base64\")\n        };\n    }\n    /**\n     * importKey accepts a wallet handle and an ed25519 private key, and imports\n     * the key into the wallet. It returns an ImportKeyResponse containing the\n     * address corresponding to this private key.\n     * @param walletHandle\n     * @param secretKey\n     */ async importKey(walletHandle, secretKey) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            private_key: Buffer.from(secretKey).toString(\"base64\")\n        };\n        const res = await this.c.post(\"/v1/key/import\", req);\n        return res.body;\n    }\n    /**\n     * exportKey accepts a wallet handle, wallet password, and address, and returns\n     * an ExportKeyResponse containing the ed25519 private key corresponding to the\n     * address stored in the wallet.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */ async exportKey(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword\n        };\n        const res = await this.c.post(\"/v1/key/export\", req);\n        return {\n            private_key: Buffer.from(res.body.private_key, \"base64\")\n        };\n    }\n    /**\n     * generateKey accepts a wallet handle, and then generates the next key in the\n     * wallet using its internal master derivation key. Two wallets with the same\n     * master derivation key will generate the same sequence of keys.\n     * @param walletHandle\n     */ async generateKey(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            display_mnemonic: false\n        };\n        const res = await this.c.post(\"/v1/key\", req);\n        return res.body;\n    }\n    /**\n     * deleteKey accepts a wallet handle, wallet password, and address, and deletes\n     * the information about this address from the wallet (including address and\n     * secret key). If DeleteKey is called on a key generated using GenerateKey,\n     * the same key will not be generated again. However, if a wallet is recovered\n     * using the master derivation key, a key generated in this way can be\n     * recovered.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */ async deleteKey(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword\n        };\n        const res = await this.c.delete(\"/v1/key\", req);\n        return res.body;\n    }\n    /**\n     * ListKeys accepts a wallet handle and returns a ListKeysResponse containing\n     * all of the addresses for which this wallet contains secret keys.\n     * @param walletHandle\n     */ async listKeys(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        const res = await this.c.post(\"/v1/key/list\", req);\n        return res.body;\n    }\n    /**\n     * signTransaction accepts a wallet handle, wallet password, and a transaction,\n     * and returns and SignTransactionResponse containing an encoded, signed\n     * transaction. The transaction is signed using the key corresponding to the\n     * Sender field.\n     * @param walletHandle\n     * @param walletPassword\n     * @param transaction\n     */ async signTransaction(walletHandle, walletPassword, transaction) {\n        const tx = _transaction__WEBPACK_IMPORTED_MODULE_1__.instantiateTxnIfNeeded(transaction);\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword,\n            transaction: Buffer.from(tx.toByte()).toString(\"base64\")\n        };\n        const res = await this.c.post(\"/v1/transaction/sign\", req);\n        if (res.status === 200) {\n            return Buffer.from(res.body.signed_transaction, \"base64\");\n        }\n        return res.body;\n    }\n    /**\n     * signTransactionWithSpecificPublicKey accepts a wallet handle, wallet password, a transaction, and a public key,\n     * and returns and SignTransactionResponse containing an encoded, signed\n     * transaction. The transaction is signed using the key corresponding to the\n     * publicKey arg.\n     * @param walletHandle\n     * @param walletPassword\n     * @param transaction\n     * @param publicKey - sign the txn with the key corresponding to publicKey (used for working with a rekeyed addr)\n     */ async signTransactionWithSpecificPublicKey(walletHandle, walletPassword, transaction, publicKey) {\n        const tx = _transaction__WEBPACK_IMPORTED_MODULE_1__.instantiateTxnIfNeeded(transaction);\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword,\n            transaction: Buffer.from(tx.toByte()).toString(\"base64\"),\n            public_key: Buffer.from(publicKey).toString(\"base64\")\n        };\n        const res = await this.c.post(\"/v1/transaction/sign\", req);\n        if (res.status === 200) {\n            return Buffer.from(res.body.signed_transaction, \"base64\");\n        }\n        return res.body;\n    }\n    /**\n     * listMultisig accepts a wallet handle and returns a ListMultisigResponse\n     * containing the multisig addresses whose preimages are stored in this wallet.\n     * A preimage is the information needed to reconstruct this multisig address,\n     * including multisig version information, threshold information, and a list\n     * of public keys.\n     * @param walletHandle\n     */ async listMultisig(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        const res = await this.c.post(\"/v1/multisig/list\", req);\n        return res.body;\n    }\n    /**\n     * importMultisig accepts a wallet handle and the information required to\n     * generate a multisig address. It derives this address, and stores all of the\n     * information within the wallet. It returns a ImportMultisigResponse with the\n     * derived address.\n     * @param walletHandle\n     * @param version\n     * @param threshold\n     * @param pks\n     */ async importMultisig(walletHandle, version, threshold, pks) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            multisig_version: version,\n            threshold,\n            pks\n        };\n        const res = await this.c.post(\"/v1/multisig/import\", req);\n        return res.body;\n    }\n    /**\n     * exportMultisig accepts a wallet handle, wallet password, and multisig\n     * address, and returns an ExportMultisigResponse containing the stored\n     * multisig preimage. The preimage contains all of the information necessary\n     * to derive the multisig address, including version, threshold, and a list of\n     * public keys.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */ async exportMultisig(walletHandle, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr\n        };\n        const res = await this.c.post(\"/v1/multisig/export\", req);\n        return res.body;\n    }\n    /**\n     * signMultisigTransaction accepts a wallet handle, wallet password,\n     * transaction, public key (*not* an address), and an optional partial\n     * MultisigSig. It looks up the secret key corresponding to the public key, and\n     * returns a SignMultisigTransactionResponse containing a MultisigSig with a\n     * signature by the secret key included.\n     * @param walletHandle\n     * @param pw\n     * @param tx\n     * @param pk\n     * @param partial\n     */ async signMultisigTransaction(walletHandle, pw, transaction, pk, partial) {\n        const tx = _transaction__WEBPACK_IMPORTED_MODULE_1__.instantiateTxnIfNeeded(transaction);\n        const req = {\n            wallet_handle_token: walletHandle,\n            transaction: Buffer.from(tx.toByte()).toString(\"base64\"),\n            public_key: Buffer.from(pk).toString(\"base64\"),\n            partial_multisig: partial,\n            wallet_password: pw\n        };\n        const res = await this.c.post(\"/v1/multisig/sign\", req);\n        return res.body;\n    }\n    /**\n     * deleteMultisig accepts a wallet handle, wallet password, and multisig\n     * address, and deletes the information about this multisig address from the\n     * wallet (including address and secret key).\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */ async deleteMultisig(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword\n        };\n        const res = await this.c.delete(\"/v1/multisig\", req);\n        return res.body;\n    }\n} //# sourceMappingURL=kmd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/kmd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/urlTokenBaseHTTPClient.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/urlTokenBaseHTTPClient.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URLTokenBaseHTTPClient: () => (/* binding */ URLTokenBaseHTTPClient)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/.pnpm/cross-fetch@3.2.0/node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);\n\nclass URLTokenBaseHTTPError extends Error {\n    constructor(message, response){\n        super(message);\n        this.response = response;\n        this.name = \"URLTokenBaseHTTPError\";\n        this.response = response;\n    }\n}\n/**\n * Implementation of BaseHTTPClient that uses a URL and a token\n * and make the REST queries using fetch.\n * This is the default implementation of BaseHTTPClient.\n */ class URLTokenBaseHTTPClient {\n    constructor(tokenHeader, baseServer, port, defaultHeaders = {}){\n        this.defaultHeaders = defaultHeaders;\n        // Append a trailing slash so we can use relative paths. Without the trailing\n        // slash, the last path segment will be replaced by the relative path. See\n        // usage in `addressWithPath`.\n        const fixedBaseServer = baseServer.endsWith(\"/\") ? baseServer : `${baseServer}/`;\n        const baseServerURL = new URL(fixedBaseServer);\n        if (typeof port !== \"undefined\") {\n            baseServerURL.port = port.toString();\n        }\n        if (baseServerURL.protocol.length === 0) {\n            throw new Error(\"Invalid base server URL, protocol must be defined.\");\n        }\n        this.baseURL = baseServerURL;\n        this.tokenHeader = tokenHeader;\n    }\n    /**\n     * Compute the URL for a path relative to the instance's address\n     * @param relativePath - A path string\n     * @param query - An optional key-value object of query parameters to add to the URL. If the\n     *   relativePath already has query parameters on it, the additional parameters defined here will\n     *   be added to the URL without modifying those (unless a key collision occurs).\n     * @returns A URL string\n     */ getURL(relativePath, query) {\n        let fixedRelativePath;\n        if (relativePath.startsWith(\"./\")) {\n            fixedRelativePath = relativePath;\n        } else if (relativePath.startsWith(\"/\")) {\n            fixedRelativePath = `.${relativePath}`;\n        } else {\n            fixedRelativePath = `./${relativePath}`;\n        }\n        const address = new URL(fixedRelativePath, this.baseURL);\n        if (query) {\n            for (const [key, value] of Object.entries(query)){\n                address.searchParams.set(key, value);\n            }\n        }\n        return address.toString();\n    }\n    static formatFetchResponseHeaders(headers) {\n        const headersObj = {};\n        headers.forEach((key, value)=>{\n            headersObj[key] = value;\n        });\n        return headersObj;\n    }\n    static async checkHttpError(res) {\n        if (res.ok) {\n            return;\n        }\n        let body = null;\n        let bodyErrorMessage = null;\n        try {\n            body = new Uint8Array(await res.arrayBuffer());\n            const decoded = JSON.parse(Buffer.from(body).toString());\n            if (decoded.message) {\n                bodyErrorMessage = decoded.message;\n            }\n        } catch (_) {\n        // ignore any error that happened while we are parsing the error response\n        }\n        let message = `Network request error. Received status ${res.status} (${res.statusText})`;\n        if (bodyErrorMessage) {\n            message += `: ${bodyErrorMessage}`;\n        }\n        throw new URLTokenBaseHTTPError(message, {\n            body,\n            status: res.status,\n            headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers)\n        });\n    }\n    static async formatFetchResponse(res) {\n        await this.checkHttpError(res);\n        return {\n            body: new Uint8Array(await res.arrayBuffer()),\n            status: res.status,\n            headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers)\n        };\n    }\n    async get(relativePath, query, requestHeaders = {}) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders\n        };\n        const res = await (0,cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch)(this.getURL(relativePath, query), {\n            mode: \"cors\",\n            headers\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n    async post(relativePath, data, query, requestHeaders = {}) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders\n        };\n        const res = await (0,cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch)(this.getURL(relativePath, query), {\n            method: \"POST\",\n            mode: \"cors\",\n            body: data,\n            headers\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n    async delete(relativePath, data, query, requestHeaders = {}) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders\n        };\n        const res = await (0,cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch)(this.getURL(relativePath, query), {\n            method: \"DELETE\",\n            mode: \"cors\",\n            body: data,\n            headers\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n} //# sourceMappingURL=urlTokenBaseHTTPClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3VybFRva2VuQmFzZUhUVFBDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9DO0FBQ3BDLE1BQU1DLDhCQUE4QkM7SUFDaENDLFlBQVlDLE9BQU8sRUFBRUMsUUFBUSxDQUFFO1FBQzNCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNELFFBQVEsR0FBR0E7SUFDcEI7QUFDSjtBQUNBOzs7O0NBSUMsR0FDTSxNQUFNRTtJQUNUSixZQUFZSyxXQUFXLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUU7UUFDNUQsSUFBSSxDQUFDQSxjQUFjLEdBQUdBO1FBQ3RCLDZFQUE2RTtRQUM3RSwwRUFBMEU7UUFDMUUsOEJBQThCO1FBQzlCLE1BQU1DLGtCQUFrQkgsV0FBV0ksUUFBUSxDQUFDLE9BQ3RDSixhQUNBLENBQUMsRUFBRUEsV0FBVyxDQUFDLENBQUM7UUFDdEIsTUFBTUssZ0JBQWdCLElBQUlDLElBQUlIO1FBQzlCLElBQUksT0FBT0YsU0FBUyxhQUFhO1lBQzdCSSxjQUFjSixJQUFJLEdBQUdBLEtBQUtNLFFBQVE7UUFDdEM7UUFDQSxJQUFJRixjQUFjRyxRQUFRLENBQUNDLE1BQU0sS0FBSyxHQUFHO1lBQ3JDLE1BQU0sSUFBSWhCLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNpQixPQUFPLEdBQUdMO1FBQ2YsSUFBSSxDQUFDTixXQUFXLEdBQUdBO0lBQ3ZCO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNEWSxPQUFPQyxZQUFZLEVBQUVDLEtBQUssRUFBRTtRQUN4QixJQUFJQztRQUNKLElBQUlGLGFBQWFHLFVBQVUsQ0FBQyxPQUFPO1lBQy9CRCxvQkFBb0JGO1FBQ3hCLE9BQ0ssSUFB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QUFNLENBQUNDLGNBQWNDLFFBQVE7WUFDdERtQyxRQUFRO1lBQ1JILE1BQU07WUFDTmYsTUFBTWlCO1lBQ052QjtRQUNKO1FBQ0EsT0FBTzFCLHVCQUF1QjRDLG1CQUFtQixDQUFDZDtJQUN0RDtJQUNBLE1BQU1xQixPQUFPckMsWUFBWSxFQUFFbUMsSUFBSSxFQUFFbEMsS0FBSyxFQUFFK0IsaUJBQWlCLENBQUMsQ0FBQyxFQUFFO1FBQ3pELGtDQUFrQztRQUNsQyxNQUFNcEIsVUFBVTtZQUNaLEdBQUcsSUFBSSxDQUFDekIsV0FBVztZQUNuQixHQUFHLElBQUksQ0FBQ0csY0FBYztZQUN0QixHQUFHMEMsY0FBYztRQUNyQjtRQUNBLE1BQU1oQixNQUFNLE1BQU1yQyxrREFBS0EsQ0FBQyxJQUFJLENBQUNvQixNQUFNLENBQUNDLGNBQWNDLFFBQVE7WUFDdERtQyxRQUFRO1lBQ1JILE1BQU07WUFDTmYsTUFBTWlCO1lBQ052QjtRQUNKO1FBQ0EsT0FBTzFCLHVCQUF1QjRDLG1CQUFtQixDQUFDZDtJQUN0RDtBQUNKLEVBQ0Esa0RBQWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdXJsVG9rZW5CYXNlSFRUUENsaWVudC5qcz9iOTQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZldGNoIH0gZnJvbSAnY3Jvc3MtZmV0Y2gnO1xuY2xhc3MgVVJMVG9rZW5CYXNlSFRUUEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHJlc3BvbnNlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVUkxUb2tlbkJhc2VIVFRQRXJyb3InO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgfVxufVxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBCYXNlSFRUUENsaWVudCB0aGF0IHVzZXMgYSBVUkwgYW5kIGEgdG9rZW5cbiAqIGFuZCBtYWtlIHRoZSBSRVNUIHF1ZXJpZXMgdXNpbmcgZmV0Y2guXG4gKiBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIEJhc2VIVFRQQ2xpZW50LlxuICovXG5leHBvcnQgY2xhc3MgVVJMVG9rZW5CYXNlSFRUUENsaWVudCB7XG4gICAgY29uc3RydWN0b3IodG9rZW5IZWFkZXIsIGJhc2VTZXJ2ZXIsIHBvcnQsIGRlZmF1bHRIZWFkZXJzID0ge30pIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0SGVhZGVycyA9IGRlZmF1bHRIZWFkZXJzO1xuICAgICAgICAvLyBBcHBlbmQgYSB0cmFpbGluZyBzbGFzaCBzbyB3ZSBjYW4gdXNlIHJlbGF0aXZlIHBhdGhzLiBXaXRob3V0IHRoZSB0cmFpbGluZ1xuICAgICAgICAvLyBzbGFzaCwgdGhlIGxhc3QgcGF0aCBzZWdtZW50IHdpbGwgYmUgcmVwbGFjZWQgYnkgdGhlIHJlbGF0aXZlIHBhdGguIFNlZVxuICAgICAgICAvLyB1c2FnZSBpbiBgYWRkcmVzc1dpdGhQYXRoYC5cbiAgICAgICAgY29uc3QgZml4ZWRCYXNlU2VydmVyID0gYmFzZVNlcnZlci5lbmRzV2l0aCgnLycpXG4gICAgICAgICAgICA/IGJhc2VTZXJ2ZXJcbiAgICAgICAgICAgIDogYCR7YmFzZVNlcnZlcn0vYDtcbiAgICAgICAgY29uc3QgYmFzZVNlcnZlclVSTCA9IG5ldyBVUkwoZml4ZWRCYXNlU2VydmVyKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwb3J0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYmFzZVNlcnZlclVSTC5wb3J0ID0gcG9ydC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlU2VydmVyVVJMLnByb3RvY29sLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJhc2Ugc2VydmVyIFVSTCwgcHJvdG9jb2wgbXVzdCBiZSBkZWZpbmVkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZVVSTCA9IGJhc2VTZXJ2ZXJVUkw7XG4gICAgICAgIHRoaXMudG9rZW5IZWFkZXIgPSB0b2tlbkhlYWRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgVVJMIGZvciBhIHBhdGggcmVsYXRpdmUgdG8gdGhlIGluc3RhbmNlJ3MgYWRkcmVzc1xuICAgICAqIEBwYXJhbSByZWxhdGl2ZVBhdGggLSBBIHBhdGggc3RyaW5nXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gQW4gb3B0aW9uYWwga2V5LXZhbHVlIG9iamVjdCBvZiBxdWVyeSBwYXJhbWV0ZXJzIHRvIGFkZCB0byB0aGUgVVJMLiBJZiB0aGVcbiAgICAgKiAgIHJlbGF0aXZlUGF0aCBhbHJlYWR5IGhhcyBxdWVyeSBwYXJhbWV0ZXJzIG9uIGl0LCB0aGUgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGRlZmluZWQgaGVyZSB3aWxsXG4gICAgICogICBiZSBhZGRlZCB0byB0aGUgVVJMIHdpdGhvdXQgbW9kaWZ5aW5nIHRob3NlICh1bmxlc3MgYSBrZXkgY29sbGlzaW9uIG9jY3VycykuXG4gICAgICogQHJldHVybnMgQSBVUkwgc3RyaW5nXG4gICAgICovXG4gICAgZ2V0VVJMKHJlbGF0aXZlUGF0aCwgcXVlcnkpIHtcbiAgICAgICAgbGV0IGZpeGVkUmVsYXRpdmVQYXRoO1xuICAgICAgICBpZiAocmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoJy4vJykpIHtcbiAgICAgICAgICAgIGZpeGVkUmVsYXRpdmVQYXRoID0gcmVsYXRpdmVQYXRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgIGZpeGVkUmVsYXRpdmVQYXRoID0gYC4ke3JlbGF0aXZlUGF0aH1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZml4ZWRSZWxhdGl2ZVBhdGggPSBgLi8ke3JlbGF0aXZlUGF0aH1gO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSBuZXcgVVJMKGZpeGVkUmVsYXRpdmVQYXRoLCB0aGlzLmJhc2VVUkwpO1xuICAgICAgICBpZiAocXVlcnkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5KSkge1xuICAgICAgICAgICAgICAgIGFkZHJlc3Muc2VhcmNoUGFyYW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWRkcmVzcy50b1N0cmluZygpO1xuICAgIH1cbiAgICBzdGF0aWMgZm9ybWF0RmV0Y2hSZXNwb25zZUhlYWRlcnMoaGVhZGVycykge1xuICAgICAgICBjb25zdCBoZWFkZXJzT2JqID0ge307XG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaCgoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaGVhZGVyc09ialtrZXldID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaGVhZGVyc09iajtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGNoZWNrSHR0cEVycm9yKHJlcykge1xuICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJvZHkgPSBudWxsO1xuICAgICAgICBsZXQgYm9keUVycm9yTWVzc2FnZSA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBib2R5ID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgcmVzLmFycmF5QnVmZmVyKCkpO1xuICAgICAgICAgICAgY29uc3QgZGVjb2RlZCA9IEpTT04ucGFyc2UoQnVmZmVyLmZyb20oYm9keSkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBpZiAoZGVjb2RlZC5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgYm9keUVycm9yTWVzc2FnZSA9IGRlY29kZWQubWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoXykge1xuICAgICAgICAgICAgLy8gaWdub3JlIGFueSBlcnJvciB0aGF0IGhhcHBlbmVkIHdoaWxlIHdlIGFyZSBwYXJzaW5nIHRoZSBlcnJvciByZXNwb25zZVxuICAgICAgICB9XG4gICAgICAgIGxldCBtZXNzYWdlID0gYE5ldHdvcmsgcmVxdWVzdCBlcnJvci4gUmVjZWl2ZWQgc3RhdHVzICR7cmVzLnN0YXR1c30gKCR7cmVzLnN0YXR1c1RleHR9KWA7XG4gICAgICAgIGlmIChib2R5RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9IGA6ICR7Ym9keUVycm9yTWVzc2FnZX1gO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVUkxUb2tlbkJhc2VIVFRQRXJyb3IobWVzc2FnZSwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHN0YXR1czogcmVzLnN0YXR1cyxcbiAgICAgICAgICAgIGhlYWRlcnM6IFVSTFRva2VuQmFzZUhUVFBDbGllbnQuZm9ybWF0RmV0Y2hSZXNwb25zZUhlYWRlcnMocmVzLmhlYWRlcnMpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGZvcm1hdEZldGNoUmVzcG9uc2UocmVzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2hlY2tIdHRwRXJyb3IocmVzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJvZHk6IG5ldyBVaW50OEFycmF5KGF3YWl0IHJlcy5hcnJheUJ1ZmZlcigpKSxcbiAgICAgICAgICAgIHN0YXR1czogcmVzLnN0YXR1cyxcbiAgICAgICAgICAgIGhlYWRlcnM6IFVSTFRva2VuQmFzZUhUVFBDbGllbnQuZm9ybWF0RmV0Y2hSZXNwb25zZUhlYWRlcnMocmVzLmhlYWRlcnMpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBnZXQocmVsYXRpdmVQYXRoLCBxdWVyeSwgcmVxdWVzdEhlYWRlcnMgPSB7fSkge1xuICAgICAgICAvLyBFeHBhbmQgaGVhZGVycyBmb3IgdXNlIGluIGZldGNoXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLnRva2VuSGVhZGVyLFxuICAgICAgICAgICAgLi4udGhpcy5kZWZhdWx0SGVhZGVycyxcbiAgICAgICAgICAgIC4uLnJlcXVlc3RIZWFkZXJzLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh0aGlzLmdldFVSTChyZWxhdGl2ZVBhdGgsIHF1ZXJ5KSwge1xuICAgICAgICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBVUkxUb2tlbkJhc2VIVFRQQ2xpZW50LmZvcm1hdEZldGNoUmVzcG9uc2UocmVzKTtcbiAgICB9XG4gICAgYXN5bmMgcG9zdChyZWxhdGl2ZVBhdGgsIGRhdGEsIHF1ZXJ5LCByZXF1ZXN0SGVhZGVycyA9IHt9KSB7XG4gICAgICAgIC8vIEV4cGFuZCBoZWFkZXJzIGZvciB1c2UgaW4gZmV0Y2hcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMudG9rZW5IZWFkZXIsXG4gICAgICAgICAgICAuLi50aGlzLmRlZmF1bHRIZWFkZXJzLFxuICAgICAgICAgICAgLi4ucmVxdWVzdEhlYWRlcnMsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHRoaXMuZ2V0VVJMKHJlbGF0aXZlUGF0aCwgcXVlcnkpLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFVSTFRva2VuQmFzZUhUVFBDbGllbnQuZm9ybWF0RmV0Y2hSZXNwb25zZShyZXMpO1xuICAgIH1cbiAgICBhc3luYyBkZWxldGUocmVsYXRpdmVQYXRoLCBkYXRhLCBxdWVyeSwgcmVxdWVzdEhlYWRlcnMgPSB7fSkge1xuICAgICAgICAvLyBFeHBhbmQgaGVhZGVycyBmb3IgdXNlIGluIGZldGNoXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLnRva2VuSGVhZGVyLFxuICAgICAgICAgICAgLi4udGhpcy5kZWZhdWx0SGVhZGVycyxcbiAgICAgICAgICAgIC4uLnJlcXVlc3RIZWFkZXJzLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh0aGlzLmdldFVSTChyZWxhdGl2ZVBhdGgsIHF1ZXJ5KSwge1xuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFVSTFRva2VuQmFzZUhUVFBDbGllbnQuZm9ybWF0RmV0Y2hSZXNwb25zZShyZXMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVybFRva2VuQmFzZUhUVFBDbGllbnQuanMubWFwIl0sIm5hbWVzIjpbImZldGNoIiwiVVJMVG9rZW5CYXNlSFRUUEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJyZXNwb25zZSIsIm5hbWUiLCJVUkxUb2tlbkJhc2VIVFRQQ2xpZW50IiwidG9rZW5IZWFkZXIiLCJiYXNlU2VydmVyIiwicG9ydCIsImRlZmF1bHRIZWFkZXJzIiwiZml4ZWRCYXNlU2VydmVyIiwiZW5kc1dpdGgiLCJiYXNlU2VydmVyVVJMIiwiVVJMIiwidG9TdHJpbmciLCJwcm90b2NvbCIsImxlbmd0aCIsImJhc2VVUkwiLCJnZXRVUkwiLCJyZWxhdGl2ZVBhdGgiLCJxdWVyeSIsImZpeGVkUmVsYXRpdmVQYXRoIiwic3RhcnRzV2l0aCIsImFkZHJlc3MiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJmb3JtYXRGZXRjaFJlc3BvbnNlSGVhZGVycyIsImhlYWRlcnMiLCJoZWFkZXJzT2JqIiwiZm9yRWFjaCIsImNoZWNrSHR0cEVycm9yIiwicmVzIiwib2siLCJib2R5IiwiYm9keUVycm9yTWVzc2FnZSIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsImRlY29kZWQiLCJKU09OIiwicGFyc2UiLCJCdWZmZXIiLCJmcm9tIiwiXyIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJmb3JtYXRGZXRjaFJlc3BvbnNlIiwiZ2V0IiwicmVxdWVzdEhlYWRlcnMiLCJtb2RlIiwicG9zdCIsImRhdGEiLCJtZXRob2QiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/urlTokenBaseHTTPClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountApplicationInformation.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountApplicationInformation.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AccountApplicationInformation)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass AccountApplicationInformation extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, account, applicationID){\n        super(c, intDecoding);\n        this.account = account;\n        this.applicationID = applicationID;\n        this.account = account;\n        this.applicationID = applicationID;\n    }\n    path() {\n        return `/v2/accounts/${this.account}/applications/${this.applicationID}`;\n    }\n} //# sourceMappingURL=accountApplicationInformation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2FjY291bnRBcHBsaWNhdGlvbkluZm9ybWF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQzFCLE1BQU1DLHNDQUFzQ0Qsb0RBQVdBO0lBQ2xFRSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFFQyxhQUFhLENBQUU7UUFDaEQsS0FBSyxDQUFDSCxHQUFHQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNELE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLGFBQWEsR0FBR0E7SUFDekI7SUFDQUMsT0FBTztRQUNILE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQ0MsYUFBYSxDQUFDLENBQUM7SUFDNUU7QUFDSixFQUNBLHlEQUF5RCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2FjY291bnRBcHBsaWNhdGlvbkluZm9ybWF0aW9uLmpzPzE2MmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY291bnRBcHBsaWNhdGlvbkluZm9ybWF0aW9uIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBhY2NvdW50LCBhcHBsaWNhdGlvbklEKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbklEID0gYXBwbGljYXRpb25JRDtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbklEID0gYXBwbGljYXRpb25JRDtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYWNjb3VudHMvJHt0aGlzLmFjY291bnR9L2FwcGxpY2F0aW9ucy8ke3RoaXMuYXBwbGljYXRpb25JRH1gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY291bnRBcHBsaWNhdGlvbkluZm9ybWF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIkFjY291bnRBcHBsaWNhdGlvbkluZm9ybWF0aW9uIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJhY2NvdW50IiwiYXBwbGljYXRpb25JRCIsInBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountApplicationInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountAssetInformation.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountAssetInformation.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AccountAssetInformation)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass AccountAssetInformation extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, account, assetID){\n        super(c, intDecoding);\n        this.account = account;\n        this.assetID = assetID;\n        this.account = account;\n        this.assetID = assetID;\n    }\n    path() {\n        return `/v2/accounts/${this.account}/assets/${this.assetID}`;\n    }\n} //# sourceMappingURL=accountAssetInformation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2FjY291bnRBc3NldEluZm9ybWF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQzFCLE1BQU1DLGdDQUFnQ0Qsb0RBQVdBO0lBQzVERSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFFQyxPQUFPLENBQUU7UUFDMUMsS0FBSyxDQUFDSCxHQUFHQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0QsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNuQjtJQUNBQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUNGLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUNoRTtBQUNKLEVBQ0EsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvYWNjb3VudEFzc2V0SW5mb3JtYXRpb24uanM/ZjNiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3VudEFzc2V0SW5mb3JtYXRpb24gZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFjY291bnQsIGFzc2V0SUQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFzc2V0SUQgPSBhc3NldElEO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFzc2V0SUQgPSBhc3NldElEO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH0vYXNzZXRzLyR7dGhpcy5hc3NldElEfWA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3VudEFzc2V0SW5mb3JtYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiQWNjb3VudEFzc2V0SW5mb3JtYXRpb24iLCJjb25zdHJ1Y3RvciIsImMiLCJpbnREZWNvZGluZyIsImFjY291bnQiLCJhc3NldElEIiwicGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountAssetInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountInformation.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountInformation.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AccountInformation)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass AccountInformation extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, account){\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    path() {\n        return `/v2/accounts/${this.account}`;\n    }\n    /**\n     * Exclude assets and application data from results\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await algodClient.accountInformation(address)\n     *        .exclude('all')\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n} //# sourceMappingURL=accountInformation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2FjY291bnRJbmZvcm1hdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQywyQkFBMkJELG9EQUFXQTtJQUN2REUsWUFBWUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLE9BQU8sQ0FBRTtRQUNqQyxLQUFLLENBQUNGLEdBQUdDO1FBQ1QsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ25CO0lBQ0FDLE9BQU87UUFDSCxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDekM7SUFDQTs7Ozs7Ozs7Ozs7OztLQWFDLEdBQ0RFLFFBQVFBLE9BQU8sRUFBRTtRQUNiLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxPQUFPLEdBQUdBO1FBQ3JCLE9BQU8sSUFBSTtJQUNmO0FBQ0osRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9hY2NvdW50SW5mb3JtYXRpb24uanM/OWJmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3VudEluZm9ybWF0aW9uIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBhY2NvdW50KSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYWNjb3VudHMvJHt0aGlzLmFjY291bnR9YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhjbHVkZSBhc3NldHMgYW5kIGFwcGxpY2F0aW9uIGRhdGEgZnJvbSByZXN1bHRzXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgYWxnb2RDbGllbnQuYWNjb3VudEluZm9ybWF0aW9uKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5leGNsdWRlKCdhbGwnKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGV4Y2x1ZGUoZXhjbHVkZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmV4Y2x1ZGUgPSBleGNsdWRlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2NvdW50SW5mb3JtYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiQWNjb3VudEluZm9ybWF0aW9uIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJhY2NvdW50IiwicGF0aCIsImV4Y2x1ZGUiLCJxdWVyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/algod.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/algod.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AlgodClient)\n/* harmony export */ });\n/* harmony import */ var _serviceClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serviceClient */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/serviceClient.js\");\n/* harmony import */ var _accountInformation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accountInformation */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountInformation.js\");\n/* harmony import */ var _accountAssetInformation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./accountAssetInformation */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountAssetInformation.js\");\n/* harmony import */ var _accountApplicationInformation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./accountApplicationInformation */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/accountApplicationInformation.js\");\n/* harmony import */ var _block__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./block */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/block.js\");\n/* harmony import */ var _compile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./compile */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/compile.js\");\n/* harmony import */ var _dryrun__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dryrun */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/dryrun.js\");\n/* harmony import */ var _genesis__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./genesis */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/genesis.js\");\n/* harmony import */ var _getAssetByID__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getAssetByID */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getAssetByID.js\");\n/* harmony import */ var _getApplicationByID__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getApplicationByID */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationByID.js\");\n/* harmony import */ var _getBlockHash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./getBlockHash */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getBlockHash.js\");\n/* harmony import */ var _getApplicationBoxByName__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./getApplicationBoxByName */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxByName.js\");\n/* harmony import */ var _getApplicationBoxes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./getApplicationBoxes */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxes.js\");\n/* harmony import */ var _healthCheck__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./healthCheck */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/healthCheck.js\");\n/* harmony import */ var _pendingTransactionInformation__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pendingTransactionInformation */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionInformation.js\");\n/* harmony import */ var _pendingTransactions__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./pendingTransactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactions.js\");\n/* harmony import */ var _pendingTransactionsByAddress__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./pendingTransactionsByAddress */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionsByAddress.js\");\n/* harmony import */ var _getTransactionProof__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./getTransactionProof */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getTransactionProof.js\");\n/* harmony import */ var _sendRawTransaction__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./sendRawTransaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js\");\n/* harmony import */ var _status__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./status */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/status.js\");\n/* harmony import */ var _statusAfterBlock__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./statusAfterBlock */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/statusAfterBlock.js\");\n/* harmony import */ var _suggestedParams__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./suggestedParams */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/suggestedParams.js\");\n/* harmony import */ var _supply__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./supply */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/supply.js\");\n/* harmony import */ var _versions__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./versions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/versions.js\");\n/* harmony import */ var _lightBlockHeaderProof__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./lightBlockHeaderProof */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/lightBlockHeaderProof.js\");\n/* harmony import */ var _stateproof__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./stateproof */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/stateproof.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Algod client connects an application to the Algorand blockchain. The algod client requires a valid algod REST endpoint IP address and algod token from an Algorand node that is connected to the network you plan to interact with.\n *\n * Algod is the main Algorand process for handling the blockchain. Messages between nodes are processed, the protocol steps are executed, and the blocks are written to disk. The algod process also exposes a REST API server that developers can use to communicate with the node and the network. Algod uses the data directory for storage and configuration information.\n *\n * #### Relevant Information\n * [How do I obtain an algod address and token?](https://developer.algorand.org/docs/archive/build-apps/setup/?from_query=algod#how-do-i-obtain-an-algod-address-and-token)\n *\n * [Run Algod in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/?from_query=algod#algod-indexer-and-kmd-rest-endpoints)\n */ class AlgodClient extends _serviceClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Create an AlgodClient from\n     * * either a token, baseServer, port, and optional headers\n     * * or a base client server for interoperability with external dApp wallets\n     *\n     * #### Example\n     * ```typescript\n     * const token  = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n     * const server = \"http://localhost\";\n     * const port   = 4001;\n     * const algodClient = new algosdk.Algodv2(token, server, port);\n     * ```\n     * @remarks\n     * The above configuration is for a sandbox private network.\n     * For applications on production, you are encouraged to run your own node, or use an Algorand REST API provider with a dedicated API key.\n     *\n     * @param tokenOrBaseClient - The algod token from the Algorand node you are interacting with\n     * @param baseServer - REST endpoint\n     * @param port - Port number if specifically configured by the server\n     * @param headers - Optional headers\n     */ constructor(tokenOrBaseClient, baseServer = \"http://r2.algorand.network\", port = 4180, headers = {}){\n        super(\"X-Algo-API-Token\", tokenOrBaseClient, baseServer, port, headers);\n    }\n    /**\n     * Returns OK if healthy.\n     *\n     * #### Example\n     * ```typescript\n     * const health = await algodClient.healthCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-health)\n     * @category GET\n     */ healthCheck() {\n        return new _healthCheck__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this.c);\n    }\n    /**\n     * Retrieves the supported API versions, binary build versions, and genesis information.\n     *\n     * #### Example\n     * ```typescript\n     * const versionsDetails = await algodClient.versionsCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-versions)\n     * @category GET\n     */ versionsCheck() {\n        return new _versions__WEBPACK_IMPORTED_MODULE_23__[\"default\"](this.c);\n    }\n    /**\n     * Broadcasts a raw transaction to the network.\n     *\n     * #### Example\n     * ```typescript\n     * const { txId } = await algodClient.sendRawTransaction(signedTxns).do();\n     * const result = await waitForConfirmation(algodClient, txid, 3);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2transactions)\n     *\n     * @remarks\n     * Often used with {@linkcode waitForConfirmation}\n     * @param stxOrStxs - Signed transactions\n     * @category POST\n     */ sendRawTransaction(stxOrStxs) {\n        return new _sendRawTransaction__WEBPACK_IMPORTED_MODULE_18__[\"default\"](this.c, stxOrStxs);\n    }\n    /**\n     * Returns the given account's status, balance and spendable amounts.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await algodClient.accountInformation(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ accountInformation(account) {\n        return new _accountInformation__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns the given account's asset information for a specific asset.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const index = 60553466;\n     * const accountAssetInfo = await algodClient.accountAssetInformation(address, index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @param index - The asset ID to look up.\n     * @category GET\n     */ accountAssetInformation(account, index) {\n        return new _accountAssetInformation__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.c, this.intDecoding, account, index);\n    }\n    /**\n     * Returns the given account's application information for a specific application.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const index = 60553466;\n     * const accountInfo = await algodClient.accountApplicationInformation(address, index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @param index - The application ID to look up.\n     * @category GET\n     */ accountApplicationInformation(account, index) {\n        return new _accountApplicationInformation__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.c, this.intDecoding, account, index);\n    }\n    /**\n     * Gets the block info for the given round.\n     *\n     * #### Example\n     * ```typescript\n     * const roundNumber = 18038133;\n     * const block = await algodClient.block(roundNumber).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksround)\n     * @param roundNumber - The round number of the block to get.\n     * @category GET\n     */ block(roundNumber) {\n        return new _block__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.c, roundNumber);\n    }\n    /**\n     * Get the block hash for the block on the given round.\n     *\n     * #### Example\n     * ```typescript\n     * const roundNumber = 18038133;\n     * const block = await algodClient.getBlockHash(roundNumber).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksroundhash)\n     * @param roundNumber - The round number of the block to get.\n     * @category GET\n     */ getBlockHash(roundNumber) {\n        return new _getBlockHash__WEBPACK_IMPORTED_MODULE_10__[\"default\"](this.c, this.intDecoding, roundNumber);\n    }\n    /**\n     * Returns the transaction information for a specific pending transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"DRJS6R745A7GFVMXEXWP4TGVDGKW7VILFTA7HC2BR2GRLHNY5CTA\";\n     * const pending = await algodClient.pendingTransactionInformation(txId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2transactionspendingtxid)\n     *\n     * @remarks\n     * <br><br>\n     * There are several cases when this might succeed:\n     * - transaction committed (committed round > 0)\n     * - transaction still in the pool (committed round = 0, pool error = \"\")\n     * - transaction removed from pool due to error (committed round = 0, pool error != \"\")\n     *\n     * Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n     *\n     * @param txid - The TxID string of the pending transaction to look up.\n     * @category GET\n     */ pendingTransactionInformation(txid) {\n        return new _pendingTransactionInformation__WEBPACK_IMPORTED_MODULE_14__[\"default\"](this.c, txid);\n    }\n    /**\n     * Returns the list of pending transactions in the pool, sorted by priority, in decreasing order, truncated at the end at MAX.\n     * If MAX = 0, returns all pending transactions.\n     *\n     * #### Example 1\n     * ```typescript\n     * const pendingTxns = await algodClient.pendingTransactionsInformation().do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const maxTxns = 5;\n     * const pendingTxns = await algodClient\n     *     .pendingTransactionsInformation()\n     *     .max(maxTxns)\n     *     .do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2transactionspending)\n     * @category GET\n     */ pendingTransactionsInformation() {\n        return new _pendingTransactions__WEBPACK_IMPORTED_MODULE_15__[\"default\"](this.c);\n    }\n    /**\n     * Returns the list of pending transactions sent by the address, sorted by priority, in decreasing order, truncated at the end at MAX.\n     * If MAX = 0, returns all pending transactions.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const pendingTxnsByAddr = await algodClient.pendingTransactionByAddress(address).do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const maxTxns = 5;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const pendingTxns = await algodClient\n     *     .pendingTransactionByAddress(address)\n     *     .max(maxTxns)\n     *     .do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2accountsaddresstransactionspending)\n     * @param address - The address of the sender.\n     * @category GET\n     */ pendingTransactionByAddress(address) {\n        return new _pendingTransactionsByAddress__WEBPACK_IMPORTED_MODULE_16__[\"default\"](this.c, address);\n    }\n    /**\n     * Retrieves the StatusResponse from the running node.\n     *\n     * #### Example\n     * ```typescript\n     * const status = await algodClient.status().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2status)\n     * @category GET\n     */ status() {\n        return new _status__WEBPACK_IMPORTED_MODULE_19__[\"default\"](this.c, this.intDecoding);\n    }\n    /**\n     * Waits for a specific round to occur then returns the `StatusResponse` for that round.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 18038133;\n     * const statusAfterBlock = await algodClient.statusAfterBlock(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2statuswait-for-block-afterround)\n     * @param round - The number of the round to wait for.\n     * @category GET\n     */ statusAfterBlock(round) {\n        return new _statusAfterBlock__WEBPACK_IMPORTED_MODULE_20__[\"default\"](this.c, this.intDecoding, round);\n    }\n    /**\n     * Returns the common needed parameters for a new transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const suggestedParams = await algodClient.getTransactionParams().do();\n     * const amountInMicroAlgos = algosdk.algosToMicroalgos(2); // 2 Algos\n     * const unsignedTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n     *   from: senderAddress,\n     *   to: receiverAddress,\n     *   amount: amountInMicroAlgos,\n     *   suggestedParams: suggestedParams,\n     * });\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2transactionsparams)\n     *\n     * @remarks\n     * Often used with\n     * {@linkcode makePaymentTxnWithSuggestedParamsFromObject}, {@linkcode algosToMicroalgos}\n     * @category GET\n     */ getTransactionParams() {\n        return new _suggestedParams__WEBPACK_IMPORTED_MODULE_21__[\"default\"](this.c);\n    }\n    /**\n     * Returns the supply details for the specified node's ledger.\n     *\n     * #### Example\n     * ```typescript\n     * const supplyDetails = await algodClient.supply().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2ledgersupply)\n     * @category GET\n     */ supply() {\n        return new _supply__WEBPACK_IMPORTED_MODULE_22__[\"default\"](this.c, this.intDecoding);\n    }\n    /**\n     * Compiles TEAL source code to binary, returns base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).\n     *\n     * #### Example\n     * ```typescript\n     * const source = \"TEAL SOURCE CODE\";\n     * const compiledSmartContract = await algodClient.compile(source).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2tealcompile)\n     * @remarks\n     * This endpoint is only enabled when a node's configuration file sets `EnableDeveloperAPI` to true.\n     * @param source\n     * @category POST\n     */ compile(source) {\n        return new _compile__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.c, source);\n    }\n    /**\n     * Provides debugging information for a transaction (or group).\n     *\n     * Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configureation file sets `EnableDeveloperAPI` to true.\n     *\n     * #### Example\n     * ```typescript\n     * const dryRunResult = await algodClient.dryrun(dr).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#post-v2tealdryrun)\n     * @param dr\n     * @category POST\n     */ dryrun(dr) {\n        return new _dryrun__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.c, dr);\n    }\n    /**\n     * Given an asset ID, return asset information including creator, name, total supply and\n     * special addresses.\n     *\n     * #### Example\n     * ```typescript\n     * const asset_id = 163650;\n     * const asset = await algodClient.getAssetByID(asset_id).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2assetsasset-id)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */ getAssetByID(index) {\n        return new _getAssetByID__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.c, this.intDecoding, index);\n    }\n    /**\n     * Given an application ID, return the application information including creator, approval\n     * and clear programs, global and local schemas, and global state.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const app = await algodClient.getApplicationByID(index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2applicationsapplication-id)\n     * @param index - The application ID to look up.\n     * @category GET\n     */ getApplicationByID(index) {\n        return new _getApplicationByID__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.c, this.intDecoding, index);\n    }\n    /**\n     * Given an application ID and the box name (key), return the value stored in the box.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2applicationsapplication-idbox)\n     * @param index - The application ID to look up.\n     * @category GET\n     */ getApplicationBoxByName(index, boxName) {\n        return new _getApplicationBoxByName__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.c, this.intDecoding, index, boxName);\n    }\n    /**\n     * Given an application ID, return all the box names associated with the app.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n     * const boxNames = boxesResponse.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2applicationsapplication-idboxes)\n     * @param index - The application ID to look up.\n     * @category GET\n     */ getApplicationBoxes(index) {\n        return new _getApplicationBoxes__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns the entire genesis file.\n     *\n     * #### Example\n     * ```typescript\n     * const genesis = await algodClient.genesis().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-genesis)\n     * @category GET\n     */ genesis() {\n        return new _genesis__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.c, this.intDecoding);\n    }\n    /**\n     * Returns a Merkle proof for a given transaction in a block.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 18038133;\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const proof = await algodClient.getTransactionProof(round, txId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2blocksroundtransactionstxidproof)\n     * @param round - The round in which the transaction appears.\n     * @param txID - The transaction ID for which to generate a proof.\n     * @category GET\n     */ getTransactionProof(round, txID) {\n        return new _getTransactionProof__WEBPACK_IMPORTED_MODULE_17__[\"default\"](this.c, this.intDecoding, round, txID);\n    }\n    /**\n     * Gets a proof for a given light block header inside a state proof commitment.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 11111111;\n     * const lightBlockHeaderProof = await algodClient.getLightBlockHeaderProof(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2blocksroundlightheaderproof)\n     * @param round\n     */ getLightBlockHeaderProof(round) {\n        return new _lightBlockHeaderProof__WEBPACK_IMPORTED_MODULE_24__[\"default\"](this.c, this.intDecoding, round);\n    }\n    /**\n     * Gets a state proof that covers a given round.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 11111111;\n     * const stateProof = await algodClient.getStateProof(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2stateproofsround)\n     * @param round\n     */ getStateProof(round) {\n        return new _stateproof__WEBPACK_IMPORTED_MODULE_25__[\"default\"](this.c, this.intDecoding, round);\n    }\n} //# sourceMappingURL=algod.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/algod.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/block.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/block.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Block)\n/* harmony export */ });\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n\n/**\n * block gets the block info for the given round. this call may block\n */ class Block extends _jsonrequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(c, roundNumber){\n        super(c);\n        if (!Number.isInteger(roundNumber)) throw Error(\"roundNumber should be an integer\");\n        this.round = roundNumber;\n        this.query = {\n            format: \"msgpack\"\n        };\n    }\n    path() {\n        return `/v2/blocks/${this.round}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        if (body && body.byteLength > 0) {\n            return _encoding_encoding__WEBPACK_IMPORTED_MODULE_0__.decode(body);\n        }\n        return undefined;\n    }\n} //# sourceMappingURL=block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2Jsb2NrLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RDtBQUNkO0FBQ3pDOztDQUVDLEdBQ2MsTUFBTUUsY0FBY0Qsb0RBQVdBO0lBQzFDRSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsQ0FBRTtRQUN4QixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDRSxPQUFPQyxTQUFTLENBQUNGLGNBQ2xCLE1BQU1HLE1BQU07UUFDaEIsSUFBSSxDQUFDQyxLQUFLLEdBQUdKO1FBQ2IsSUFBSSxDQUFDSyxLQUFLLEdBQUc7WUFBRUMsUUFBUTtRQUFVO0lBQ3JDO0lBQ0FDLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0gsS0FBSyxDQUFDLENBQUM7SUFDckM7SUFDQSxrREFBa0Q7SUFDbERJLFFBQVFDLElBQUksRUFBRTtRQUNWLElBQUlBLFFBQVFBLEtBQUtDLFVBQVUsR0FBRyxHQUFHO1lBQzdCLE9BQU9mLHNEQUFlLENBQUNjO1FBQzNCO1FBQ0EsT0FBT0c7SUFDWDtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvYmxvY2suanM/N2Q4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZyc7XG5pbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuLyoqXG4gKiBibG9jayBnZXRzIHRoZSBibG9jayBpbmZvIGZvciB0aGUgZ2l2ZW4gcm91bmQuIHRoaXMgY2FsbCBtYXkgYmxvY2tcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxvY2sgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgcm91bmROdW1iZXIpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihyb3VuZE51bWJlcikpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcigncm91bmROdW1iZXIgc2hvdWxkIGJlIGFuIGludGVnZXInKTtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kTnVtYmVyO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0geyBmb3JtYXQ6ICdtc2dwYWNrJyB9O1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9ibG9ja3MvJHt0aGlzLnJvdW5kfWA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShib2R5KSB7XG4gICAgICAgIGlmIChib2R5ICYmIGJvZHkuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGluZy5kZWNvZGUoYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibG9jay5qcy5tYXAiXSwibmFtZXMiOlsiZW5jb2RpbmciLCJKU09OUmVxdWVzdCIsIkJsb2NrIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmROdW1iZXIiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJFcnJvciIsInJvdW5kIiwicXVlcnkiLCJmb3JtYXQiLCJwYXRoIiwicHJlcGFyZSIsImJvZHkiLCJieXRlTGVuZ3RoIiwiZGVjb2RlIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/compile.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/compile.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Compile),\n/* harmony export */   setHeaders: () => (/* binding */ setHeaders)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * Sets the default header (if not previously set)\n * @param headers - A headers object\n */ function setHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key)=>key.toLowerCase() !== \"content-type\")) {\n        hdrs = {\n            ...headers\n        };\n        hdrs[\"Content-Type\"] = \"text/plain\";\n    }\n    return hdrs;\n}\n/**\n * Executes compile\n */ class Compile extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, source){\n        super(c);\n        this.source = source;\n        this.source = source;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/teal/compile`;\n    }\n    sourcemap(map = true) {\n        this.query.sourcemap = map;\n        return this;\n    }\n    /**\n     * Executes compile\n     * @param headers - A headers object\n     */ async do(headers = {}) {\n        const txHeaders = setHeaders(headers);\n        const res = await this.c.post(this.path(), Buffer.from(this.source), txHeaders, this.query);\n        return res.body;\n    }\n} //# sourceMappingURL=compile.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2NvbXBpbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ3pDOzs7Q0FHQyxHQUNNLFNBQVNDLFdBQVdDLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLElBQUlDLE9BQU9EO0lBQ1gsSUFBSUUsT0FBT0MsSUFBSSxDQUFDRixNQUFNRyxLQUFLLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsV0FBVyxPQUFPLGlCQUFpQjtRQUN4RUwsT0FBTztZQUFFLEdBQUdELE9BQU87UUFBQztRQUNwQkMsSUFBSSxDQUFDLGVBQWUsR0FBRztJQUMzQjtJQUNBLE9BQU9BO0FBQ1g7QUFDQTs7Q0FFQyxHQUNjLE1BQU1NLGdCQUFnQlQsb0RBQVdBO0lBQzVDVSxZQUFZQyxDQUFDLEVBQUVDLE1BQU0sQ0FBRTtRQUNuQixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0lBQ2xCO0lBQ0Esa0RBQWtEO0lBQ2xEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0lBQzdCO0lBQ0FDLFVBQVVDLE1BQU0sSUFBSSxFQUFFO1FBQ2xCLElBQUksQ0FBQ0MsS0FBSyxDQUFDRixTQUFTLEdBQUdDO1FBQ3ZCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7OztLQUdDLEdBQ0QsTUFBTUUsR0FBR2YsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNuQixNQUFNZ0IsWUFBWWpCLFdBQVdDO1FBQzdCLE1BQU1pQixNQUFNLE1BQU0sSUFBSSxDQUFDUixDQUFDLENBQUNTLElBQUksQ0FBQyxJQUFJLENBQUNQLElBQUksSUFBSVEsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ1YsTUFBTSxHQUFHTSxXQUFXLElBQUksQ0FBQ0YsS0FBSztRQUMxRixPQUFPRyxJQUFJSSxJQUFJO0lBQ25CO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9jb21waWxlLmpzPzU2MmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0Jztcbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCBoZWFkZXIgKGlmIG5vdCBwcmV2aW91c2x5IHNldClcbiAqIEBwYXJhbSBoZWFkZXJzIC0gQSBoZWFkZXJzIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SGVhZGVycyhoZWFkZXJzID0ge30pIHtcbiAgICBsZXQgaGRycyA9IGhlYWRlcnM7XG4gICAgaWYgKE9iamVjdC5rZXlzKGhkcnMpLmV2ZXJ5KChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpICE9PSAnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaGRycyA9IHsgLi4uaGVhZGVycyB9O1xuICAgICAgICBoZHJzWydDb250ZW50LVR5cGUnXSA9ICd0ZXh0L3BsYWluJztcbiAgICB9XG4gICAgcmV0dXJuIGhkcnM7XG59XG4vKipcbiAqIEV4ZWN1dGVzIGNvbXBpbGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGlsZSBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBzb3VyY2UpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi90ZWFsL2NvbXBpbGVgO1xuICAgIH1cbiAgICBzb3VyY2VtYXAobWFwID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnNvdXJjZW1hcCA9IG1hcDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIGNvbXBpbGVcbiAgICAgKiBAcGFyYW0gaGVhZGVycyAtIEEgaGVhZGVycyBvYmplY3RcbiAgICAgKi9cbiAgICBhc3luYyBkbyhoZWFkZXJzID0ge30pIHtcbiAgICAgICAgY29uc3QgdHhIZWFkZXJzID0gc2V0SGVhZGVycyhoZWFkZXJzKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jLnBvc3QodGhpcy5wYXRoKCksIEJ1ZmZlci5mcm9tKHRoaXMuc291cmNlKSwgdHhIZWFkZXJzLCB0aGlzLnF1ZXJ5KTtcbiAgICAgICAgcmV0dXJuIHJlcy5ib2R5O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBpbGUuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0Iiwic2V0SGVhZGVycyIsImhlYWRlcnMiLCJoZHJzIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5Iiwia2V5IiwidG9Mb3dlckNhc2UiLCJDb21waWxlIiwiY29uc3RydWN0b3IiLCJjIiwic291cmNlIiwicGF0aCIsInNvdXJjZW1hcCIsIm1hcCIsInF1ZXJ5IiwiZG8iLCJ0eEhlYWRlcnMiLCJyZXMiLCJwb3N0IiwiQnVmZmVyIiwiZnJvbSIsImJvZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/dryrun.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/dryrun.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Dryrun)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _compile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compile */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/compile.js\");\n\n\n\nclass Dryrun extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, dr){\n        super(c);\n        this.blob = _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__.encode(dr.get_obj_for_encoding(true));\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/teal/dryrun\";\n    }\n    /**\n     * Executes dryrun\n     * @param headers - A headers object\n     */ async do(headers = {}) {\n        const txHeaders = (0,_compile__WEBPACK_IMPORTED_MODULE_2__.setHeaders)(headers);\n        const res = await this.c.post(this.path(), Buffer.from(this.blob), txHeaders);\n        return res.body;\n    }\n} //# sourceMappingURL=dryrun.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2RyeXJ1bi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBQ2M7QUFDaEI7QUFDeEIsTUFBTUcsZUFBZUgsb0RBQVdBO0lBQzNDSSxZQUFZQyxDQUFDLEVBQUVDLEVBQUUsQ0FBRTtRQUNmLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNFLElBQUksR0FBR04sc0RBQWUsQ0FBQ0ssR0FBR0csb0JBQW9CLENBQUM7SUFDeEQ7SUFDQSxrREFBa0Q7SUFDbERDLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQTs7O0tBR0MsR0FDRCxNQUFNQyxHQUFHQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ25CLE1BQU1DLFlBQVlYLG9EQUFVQSxDQUFDVTtRQUM3QixNQUFNRSxNQUFNLE1BQU0sSUFBSSxDQUFDVCxDQUFDLENBQUNVLElBQUksQ0FBQyxJQUFJLENBQUNMLElBQUksSUFBSU0sT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ1YsSUFBSSxHQUFHTTtRQUNuRSxPQUFPQyxJQUFJSSxJQUFJO0lBQ25CO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9kcnlydW4uanM/NmY5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcnO1xuaW1wb3J0IHsgc2V0SGVhZGVycyB9IGZyb20gJy4vY29tcGlsZSc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcnlydW4gZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgZHIpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuYmxvYiA9IGVuY29kaW5nLmVuY29kZShkci5nZXRfb2JqX2Zvcl9lbmNvZGluZyh0cnVlKSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuICcvdjIvdGVhbC9kcnlydW4nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyBkcnlydW5cbiAgICAgKiBAcGFyYW0gaGVhZGVycyAtIEEgaGVhZGVycyBvYmplY3RcbiAgICAgKi9cbiAgICBhc3luYyBkbyhoZWFkZXJzID0ge30pIHtcbiAgICAgICAgY29uc3QgdHhIZWFkZXJzID0gc2V0SGVhZGVycyhoZWFkZXJzKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jLnBvc3QodGhpcy5wYXRoKCksIEJ1ZmZlci5mcm9tKHRoaXMuYmxvYiksIHR4SGVhZGVycyk7XG4gICAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcnlydW4uanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZW5jb2RpbmciLCJzZXRIZWFkZXJzIiwiRHJ5cnVuIiwiY29uc3RydWN0b3IiLCJjIiwiZHIiLCJibG9iIiwiZW5jb2RlIiwiZ2V0X29ial9mb3JfZW5jb2RpbmciLCJwYXRoIiwiZG8iLCJoZWFkZXJzIiwidHhIZWFkZXJzIiwicmVzIiwicG9zdCIsIkJ1ZmZlciIsImZyb20iLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/dryrun.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/genesis.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/genesis.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Genesis)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass Genesis extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/genesis\";\n    }\n} //# sourceMappingURL=genesis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dlbmVzaXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDMUIsTUFBTUMsZ0JBQWdCRCxvREFBV0E7SUFDNUMsa0RBQWtEO0lBQ2xERSxPQUFPO1FBQ0gsT0FBTztJQUNYO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9nZW5lc2lzLmpzPzM0ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlbmVzaXMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy9nZW5lc2lzJztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lc2lzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIkdlbmVzaXMiLCJwYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/genesis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxByName.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxByName.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetApplicationBoxByName)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n/**\n * Given an application ID and the box name (key), return the value stored in the box.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxName = Buffer.from(\"foo\");\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n * const boxValue = boxResponse.value;\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2applicationsapplication-idbox)\n * @param index - The application ID to look up.\n * @category GET\n */ class GetApplicationBoxByName extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, index, name){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n        // Encode name in base64 format and append the encoding prefix.\n        const encodedName = Buffer.from(name).toString(\"base64\");\n        this.query.name = encodeURI(`b64:${encodedName}`);\n    }\n    /**\n     * @returns `/v2/applications/${index}/box`\n     */ path() {\n        return `/v2/applications/${this.index}/box`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return _models_types__WEBPACK_IMPORTED_MODULE_1__.Box.from_obj_for_encoding(body);\n    }\n} //# sourceMappingURL=getApplicationBoxByName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEFwcGxpY2F0aW9uQm94QnlOYW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5QztBQUNKO0FBQ3JDOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ2MsTUFBTUUsZ0NBQWdDRixvREFBV0E7SUFDNURHLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxLQUFLLEVBQUVDLElBQUksQ0FBRTtRQUNyQyxLQUFLLENBQUNILEdBQUdDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO1FBQ2IsK0RBQStEO1FBQy9ELE1BQU1FLGNBQWNDLE9BQU9DLElBQUksQ0FBQ0gsTUFBTUksUUFBUSxDQUFDO1FBQy9DLElBQUksQ0FBQ0MsS0FBSyxDQUFDTCxJQUFJLEdBQUdNLFVBQVUsQ0FBQyxJQUFJLEVBQUVMLFlBQVksQ0FBQztJQUNwRDtJQUNBOztLQUVDLEdBQ0RNLE9BQU87UUFDSCxPQUFPLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDUixLQUFLLENBQUMsSUFBSSxDQUFDO0lBQy9DO0lBQ0Esa0RBQWtEO0lBQ2xEUyxRQUFRQyxJQUFJLEVBQUU7UUFDVixPQUFPZiw4Q0FBR0EsQ0FBQ2dCLHFCQUFxQixDQUFDRDtJQUNyQztBQUNKLEVBQ0EsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25Cb3hCeU5hbWUuanM/MjJkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuaW1wb3J0IHsgQm94IH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMnO1xuLyoqXG4gKiBHaXZlbiBhbiBhcHBsaWNhdGlvbiBJRCBhbmQgdGhlIGJveCBuYW1lIChrZXkpLCByZXR1cm4gdGhlIHZhbHVlIHN0b3JlZCBpbiB0aGUgYm94LlxuICpcbiAqICMjIyMgRXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgaW5kZXggPSA2MDU1MzQ2NjtcbiAqIGNvbnN0IGJveE5hbWUgPSBCdWZmZXIuZnJvbShcImZvb1wiKTtcbiAqIGNvbnN0IGJveFJlc3BvbnNlID0gYXdhaXQgYWxnb2RDbGllbnQuZ2V0QXBwbGljYXRpb25Cb3hCeU5hbWUoaW5kZXgsIGJveE5hbWUpLmRvKCk7XG4gKiBjb25zdCBib3hWYWx1ZSA9IGJveFJlc3BvbnNlLnZhbHVlO1xuICogYGBgXG4gKlxuICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9hbGdvZC92Mi8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWRib3gpXG4gKiBAcGFyYW0gaW5kZXggLSBUaGUgYXBwbGljYXRpb24gSUQgdG8gbG9vayB1cC5cbiAqIEBjYXRlZ29yeSBHRVRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2V0QXBwbGljYXRpb25Cb3hCeU5hbWUgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGluZGV4LCBuYW1lKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIC8vIEVuY29kZSBuYW1lIGluIGJhc2U2NCBmb3JtYXQgYW5kIGFwcGVuZCB0aGUgZW5jb2RpbmcgcHJlZml4LlxuICAgICAgICBjb25zdCBlbmNvZGVkTmFtZSA9IEJ1ZmZlci5mcm9tKG5hbWUpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgdGhpcy5xdWVyeS5uYW1lID0gZW5jb2RlVVJJKGBiNjQ6JHtlbmNvZGVkTmFtZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hcHBsaWNhdGlvbnMvJHtpbmRleH0vYm94YFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FwcGxpY2F0aW9ucy8ke3RoaXMuaW5kZXh9L2JveGA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShib2R5KSB7XG4gICAgICAgIHJldHVybiBCb3guZnJvbV9vYmpfZm9yX2VuY29kaW5nKGJvZHkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEFwcGxpY2F0aW9uQm94QnlOYW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIkJveCIsIkdldEFwcGxpY2F0aW9uQm94QnlOYW1lIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJpbmRleCIsIm5hbWUiLCJlbmNvZGVkTmFtZSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsInF1ZXJ5IiwiZW5jb2RlVVJJIiwicGF0aCIsInByZXBhcmUiLCJib2R5IiwiZnJvbV9vYmpfZm9yX2VuY29kaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxByName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxes.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxes.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetApplicationBoxes)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n/**\n * Given an application ID, return all the box names associated with the app.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n * const boxNames = boxesResponse.boxes.map(box => box.name);\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2applicationsapplication-idboxes)\n * @param index - The application ID to look up.\n * @category GET\n */ class GetApplicationBoxes extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, index){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n        this.query.max = 0;\n    }\n    /**\n     * @returns `/v2/applications/${index}/boxes`\n     */ path() {\n        return `/v2/applications/${this.index}/boxes`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const boxesResult = await algodClient\n     *        .GetApplicationBoxes(1234)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ max(max) {\n        this.query.max = max;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return _models_types__WEBPACK_IMPORTED_MODULE_1__.BoxesResponse.from_obj_for_encoding(body);\n    }\n} //# sourceMappingURL=getApplicationBoxes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEFwcGxpY2F0aW9uQm94ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ007QUFDL0M7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNjLE1BQU1FLDRCQUE0QkYsb0RBQVdBO0lBQ3hERyxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsS0FBSyxDQUFFO1FBQy9CLEtBQUssQ0FBQ0YsR0FBR0M7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNBLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLEtBQUssQ0FBQ0MsR0FBRyxHQUFHO0lBQ3JCO0lBQ0E7O0tBRUMsR0FDREMsT0FBTztRQUNILE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUNILEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDakQ7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERSxJQUFJQSxHQUFHLEVBQUU7UUFDTCxJQUFJLENBQUNELEtBQUssQ0FBQ0MsR0FBRyxHQUFHQTtRQUNqQixPQUFPLElBQUk7SUFDZjtJQUNBLGtEQUFrRDtJQUNsREUsUUFBUUMsSUFBSSxFQUFFO1FBQ1YsT0FBT1Ysd0RBQWFBLENBQUNXLHFCQUFxQixDQUFDRDtJQUMvQztBQUNKLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25Cb3hlcy5qcz9hMWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdCc7XG5pbXBvcnQgeyBCb3hlc1Jlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMnO1xuLyoqXG4gKiBHaXZlbiBhbiBhcHBsaWNhdGlvbiBJRCwgcmV0dXJuIGFsbCB0aGUgYm94IG5hbWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXBwLlxuICpcbiAqICMjIyMgRXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgaW5kZXggPSA2MDU1MzQ2NjtcbiAqIGNvbnN0IGJveGVzUmVzcG9uc2UgPSBhd2FpdCBhbGdvZENsaWVudC5nZXRBcHBsaWNhdGlvbkJveGVzKGluZGV4KS5tYXgoMykuZG8oKTtcbiAqIGNvbnN0IGJveE5hbWVzID0gYm94ZXNSZXNwb25zZS5ib3hlcy5tYXAoYm94ID0+IGJveC5uYW1lKTtcbiAqIGBgYFxuICpcbiAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvYWxnb2QvdjIvI2dldC12MmFwcGxpY2F0aW9uc2FwcGxpY2F0aW9uLWlkYm94ZXMpXG4gKiBAcGFyYW0gaW5kZXggLSBUaGUgYXBwbGljYXRpb24gSUQgdG8gbG9vayB1cC5cbiAqIEBjYXRlZ29yeSBHRVRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2V0QXBwbGljYXRpb25Cb3hlcyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgaW5kZXgpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5xdWVyeS5tYXggPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9ucy8ke2luZGV4fS9ib3hlc2BcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hcHBsaWNhdGlvbnMvJHt0aGlzLmluZGV4fS9ib3hlc2A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbWl0IHJlc3VsdHMgZm9yIHBhZ2luYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGJveGVzUmVzdWx0ID0gYXdhaXQgYWxnb2RDbGllbnRcbiAgICAgKiAgICAgICAgLkdldEFwcGxpY2F0aW9uQm94ZXMoMTIzNClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbWF4KG1heCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm1heCA9IG1heDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShib2R5KSB7XG4gICAgICAgIHJldHVybiBCb3hlc1Jlc3BvbnNlLmZyb21fb2JqX2Zvcl9lbmNvZGluZyhib2R5KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBcHBsaWNhdGlvbkJveGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIkJveGVzUmVzcG9uc2UiLCJHZXRBcHBsaWNhdGlvbkJveGVzIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJpbmRleCIsInF1ZXJ5IiwibWF4IiwicGF0aCIsInByZXBhcmUiLCJib2R5IiwiZnJvbV9vYmpfZm9yX2VuY29kaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationByID.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationByID.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetApplicationByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass GetApplicationByID extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, index){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    path() {\n        return `/v2/applications/${this.index}`;\n    }\n} //# sourceMappingURL=getApplicationByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEFwcGxpY2F0aW9uQnlJRC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQywyQkFBMkJELG9EQUFXQTtJQUN2REUsWUFBWUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLEtBQUssQ0FBRTtRQUMvQixLQUFLLENBQUNGLEdBQUdDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO0lBQ2pCO0lBQ0FDLE9BQU87UUFDSCxPQUFPLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDRCxLQUFLLENBQUMsQ0FBQztJQUMzQztBQUNKLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25CeUlELmpzP2ZlNGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdldEFwcGxpY2F0aW9uQnlJRCBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgaW5kZXgpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXBwbGljYXRpb25zLyR7dGhpcy5pbmRleH1gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEFwcGxpY2F0aW9uQnlJRC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJHZXRBcHBsaWNhdGlvbkJ5SUQiLCJjb25zdHJ1Y3RvciIsImMiLCJpbnREZWNvZGluZyIsImluZGV4IiwicGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getApplicationByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getAssetByID.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getAssetByID.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetAssetByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass GetAssetByID extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, index){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    path() {\n        return `/v2/assets/${this.index}`;\n    }\n} //# sourceMappingURL=getAssetByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEFzc2V0QnlJRC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQyxxQkFBcUJELG9EQUFXQTtJQUNqREUsWUFBWUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLEtBQUssQ0FBRTtRQUMvQixLQUFLLENBQUNGLEdBQUdDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO0lBQ2pCO0lBQ0FDLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQUM7SUFDckM7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEFzc2V0QnlJRC5qcz8zNDZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdCc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRBc3NldEJ5SUQgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2Fzc2V0cy8ke3RoaXMuaW5kZXh9YDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBc3NldEJ5SUQuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiR2V0QXNzZXRCeUlEIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJpbmRleCIsInBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getAssetByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getBlockHash.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getBlockHash.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetBlockHash)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass GetBlockHash extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, roundNumber){\n        super(c, intDecoding);\n        if (!Number.isInteger(roundNumber)) throw Error(\"roundNumber should be an integer\");\n        this.round = roundNumber;\n    }\n    path() {\n        return `/v2/blocks/${this.round}/hash`;\n    }\n} //# sourceMappingURL=getBlockHash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEJsb2NrSGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQyxxQkFBcUJELG9EQUFXQTtJQUNqREUsWUFBWUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLFdBQVcsQ0FBRTtRQUNyQyxLQUFLLENBQUNGLEdBQUdDO1FBQ1QsSUFBSSxDQUFDRSxPQUFPQyxTQUFTLENBQUNGLGNBQ2xCLE1BQU1HLE1BQU07UUFDaEIsSUFBSSxDQUFDQyxLQUFLLEdBQUdKO0lBQ2pCO0lBQ0FLLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMxQztBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QmxvY2tIYXNoLmpzPzYzOGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdldEJsb2NrSGFzaCBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgcm91bmROdW1iZXIpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocm91bmROdW1iZXIpKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ3JvdW5kTnVtYmVyIHNob3VsZCBiZSBhbiBpbnRlZ2VyJyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZE51bWJlcjtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH0vaGFzaGA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0QmxvY2tIYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIkdldEJsb2NrSGFzaCIsImNvbnN0cnVjdG9yIiwiYyIsImludERlY29kaW5nIiwicm91bmROdW1iZXIiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJFcnJvciIsInJvdW5kIiwicGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getBlockHash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getTransactionProof.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getTransactionProof.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetTransactionProof)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass GetTransactionProof extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, round, txID){\n        super(c, intDecoding);\n        this.round = round;\n        this.txID = txID;\n        this.round = round;\n        this.txID = txID;\n    }\n    path() {\n        return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;\n    }\n    /**\n     * Exclude assets and application data from results\n     * The type of hash function used to create the proof, must be one of: \"sha512_256\", \"sha256\"\n     *\n     * #### Example\n     * ```typescript\n     * const hashType = \"sha256\";\n     * const round = 123456;\n     * const txId = \"abc123;\n     * const txProof = await algodClient.getTransactionProof(round, txId)\n     *        .hashType(hashType)\n     *        .do();\n     * ```\n     *\n     * @param hashType\n     * @category query\n     */ hashType(hashType) {\n        this.query.hashtype = hashType;\n        return this;\n    }\n} //# sourceMappingURL=getTransactionProof.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldFRyYW5zYWN0aW9uUHJvb2YuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDMUIsTUFBTUMsNEJBQTRCRCxvREFBV0E7SUFDeERFLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxLQUFLLEVBQUVDLElBQUksQ0FBRTtRQUNyQyxLQUFLLENBQUNILEdBQUdDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDRCxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO0lBQ2hCO0lBQ0FDLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUNDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckU7SUFDQTs7Ozs7Ozs7Ozs7Ozs7OztLQWdCQyxHQUNERSxTQUFTQSxRQUFRLEVBQUU7UUFDZixJQUFJLENBQUNDLEtBQUssQ0FBQ0MsUUFBUSxHQUFHRjtRQUN0QixPQUFPLElBQUk7SUFDZjtBQUNKLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0VHJhbnNhY3Rpb25Qcm9vZi5qcz8wMzNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdCc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRUcmFuc2FjdGlvblByb29mIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCByb3VuZCwgdHhJRCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZDtcbiAgICAgICAgdGhpcy50eElEID0gdHhJRDtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgICAgICB0aGlzLnR4SUQgPSB0eElEO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9ibG9ja3MvJHt0aGlzLnJvdW5kfS90cmFuc2FjdGlvbnMvJHt0aGlzLnR4SUR9L3Byb29mYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhjbHVkZSBhc3NldHMgYW5kIGFwcGxpY2F0aW9uIGRhdGEgZnJvbSByZXN1bHRzXG4gICAgICogVGhlIHR5cGUgb2YgaGFzaCBmdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSB0aGUgcHJvb2YsIG11c3QgYmUgb25lIG9mOiBcInNoYTUxMl8yNTZcIiwgXCJzaGEyNTZcIlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGhhc2hUeXBlID0gXCJzaGEyNTZcIjtcbiAgICAgKiBjb25zdCByb3VuZCA9IDEyMzQ1NjtcbiAgICAgKiBjb25zdCB0eElkID0gXCJhYmMxMjM7XG4gICAgICogY29uc3QgdHhQcm9vZiA9IGF3YWl0IGFsZ29kQ2xpZW50LmdldFRyYW5zYWN0aW9uUHJvb2Yocm91bmQsIHR4SWQpXG4gICAgICogICAgICAgIC5oYXNoVHlwZShoYXNoVHlwZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFzaFR5cGVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBoYXNoVHlwZShoYXNoVHlwZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lmhhc2h0eXBlID0gaGFzaFR5cGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFRyYW5zYWN0aW9uUHJvb2YuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiR2V0VHJhbnNhY3Rpb25Qcm9vZiIsImNvbnN0cnVjdG9yIiwiYyIsImludERlY29kaW5nIiwicm91bmQiLCJ0eElEIiwicGF0aCIsImhhc2hUeXBlIiwicXVlcnkiLCJoYXNodHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/getTransactionProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/healthCheck.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/healthCheck.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HealthCheck)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * healthCheck returns an empty object iff the node is running\n */ class HealthCheck extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/health\";\n    }\n    async do(headers = {}) {\n        const res = await this.c.get(this.path(), {}, headers);\n        if (!res.ok) {\n            throw new Error(`Health response: ${res.status}`);\n        }\n        return {};\n    }\n} //# sourceMappingURL=healthCheck.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2hlYWx0aENoZWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDOztDQUVDLEdBQ2MsTUFBTUMsb0JBQW9CRCxvREFBV0E7SUFDaEQsa0RBQWtEO0lBQ2xERSxPQUFPO1FBQ0gsT0FBTztJQUNYO0lBQ0EsTUFBTUMsR0FBR0MsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNuQixNQUFNQyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxDQUFDLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNMLElBQUksSUFBSSxDQUFDLEdBQUdFO1FBQzlDLElBQUksQ0FBQ0MsSUFBSUcsRUFBRSxFQUFFO1lBQ1QsTUFBTSxJQUFJQyxNQUFNLENBQUMsaUJBQWlCLEVBQUVKLElBQUlLLE1BQU0sQ0FBQyxDQUFDO1FBQ3BEO1FBQ0EsT0FBTyxDQUFDO0lBQ1o7QUFDSixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2hlYWx0aENoZWNrLmpzPzcwZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0Jztcbi8qKlxuICogaGVhbHRoQ2hlY2sgcmV0dXJucyBhbiBlbXB0eSBvYmplY3QgaWZmIHRoZSBub2RlIGlzIHJ1bm5pbmdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhbHRoQ2hlY2sgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy9oZWFsdGgnO1xuICAgIH1cbiAgICBhc3luYyBkbyhoZWFkZXJzID0ge30pIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jLmdldCh0aGlzLnBhdGgoKSwge30sIGhlYWRlcnMpO1xuICAgICAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIZWFsdGggcmVzcG9uc2U6ICR7cmVzLnN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVhbHRoQ2hlY2suanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiSGVhbHRoQ2hlY2siLCJwYXRoIiwiZG8iLCJoZWFkZXJzIiwicmVzIiwiYyIsImdldCIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/healthCheck.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/lightBlockHeaderProof.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/lightBlockHeaderProof.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LightBlockHeaderProof)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LightBlockHeaderProof extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, round){\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n    }\n    path() {\n        return `/v2/blocks/${this.round}/lightheader/proof`;\n    }\n} //# sourceMappingURL=lightBlockHeaderProof.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2xpZ2h0QmxvY2tIZWFkZXJQcm9vZi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQyw4QkFBOEJELG9EQUFXQTtJQUMxREUsWUFBWUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLEtBQUssQ0FBRTtRQUMvQixLQUFLLENBQUNGLEdBQUdDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO0lBQ2pCO0lBQ0FDLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLGtCQUFrQixDQUFDO0lBQ3ZEO0FBQ0osRUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9saWdodEJsb2NrSGVhZGVyUHJvb2YuanM/NjAzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHRCbG9ja0hlYWRlclByb29mIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCByb3VuZCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZDtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9ibG9ja3MvJHt0aGlzLnJvdW5kfS9saWdodGhlYWRlci9wcm9vZmA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlnaHRCbG9ja0hlYWRlclByb29mLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIkxpZ2h0QmxvY2tIZWFkZXJQcm9vZiIsImNvbnN0cnVjdG9yIiwiYyIsImludERlY29kaW5nIiwicm91bmQiLCJwYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/lightBlockHeaderProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/models/types.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/models/types.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AccountApplicationResponse: () => (/* binding */ AccountApplicationResponse),\n/* harmony export */   AccountAssetResponse: () => (/* binding */ AccountAssetResponse),\n/* harmony export */   AccountParticipation: () => (/* binding */ AccountParticipation),\n/* harmony export */   AccountStateDelta: () => (/* binding */ AccountStateDelta),\n/* harmony export */   Application: () => (/* binding */ Application),\n/* harmony export */   ApplicationLocalState: () => (/* binding */ ApplicationLocalState),\n/* harmony export */   ApplicationParams: () => (/* binding */ ApplicationParams),\n/* harmony export */   ApplicationStateSchema: () => (/* binding */ ApplicationStateSchema),\n/* harmony export */   Asset: () => (/* binding */ Asset),\n/* harmony export */   AssetHolding: () => (/* binding */ AssetHolding),\n/* harmony export */   AssetParams: () => (/* binding */ AssetParams),\n/* harmony export */   BlockHashResponse: () => (/* binding */ BlockHashResponse),\n/* harmony export */   BlockResponse: () => (/* binding */ BlockResponse),\n/* harmony export */   Box: () => (/* binding */ Box),\n/* harmony export */   BoxDescriptor: () => (/* binding */ BoxDescriptor),\n/* harmony export */   BoxesResponse: () => (/* binding */ BoxesResponse),\n/* harmony export */   BuildVersion: () => (/* binding */ BuildVersion),\n/* harmony export */   CatchpointAbortResponse: () => (/* binding */ CatchpointAbortResponse),\n/* harmony export */   CatchpointStartResponse: () => (/* binding */ CatchpointStartResponse),\n/* harmony export */   CompileResponse: () => (/* binding */ CompileResponse),\n/* harmony export */   DisassembleResponse: () => (/* binding */ DisassembleResponse),\n/* harmony export */   DryrunRequest: () => (/* binding */ DryrunRequest),\n/* harmony export */   DryrunResponse: () => (/* binding */ DryrunResponse),\n/* harmony export */   DryrunSource: () => (/* binding */ DryrunSource),\n/* harmony export */   DryrunState: () => (/* binding */ DryrunState),\n/* harmony export */   DryrunTxnResult: () => (/* binding */ DryrunTxnResult),\n/* harmony export */   ErrorResponse: () => (/* binding */ ErrorResponse),\n/* harmony export */   EvalDelta: () => (/* binding */ EvalDelta),\n/* harmony export */   EvalDeltaKeyValue: () => (/* binding */ EvalDeltaKeyValue),\n/* harmony export */   LightBlockHeaderProof: () => (/* binding */ LightBlockHeaderProof),\n/* harmony export */   NodeStatusResponse: () => (/* binding */ NodeStatusResponse),\n/* harmony export */   PendingTransactionResponse: () => (/* binding */ PendingTransactionResponse),\n/* harmony export */   PendingTransactionsResponse: () => (/* binding */ PendingTransactionsResponse),\n/* harmony export */   PostTransactionsResponse: () => (/* binding */ PostTransactionsResponse),\n/* harmony export */   StateProof: () => (/* binding */ StateProof),\n/* harmony export */   StateProofMessage: () => (/* binding */ StateProofMessage),\n/* harmony export */   SupplyResponse: () => (/* binding */ SupplyResponse),\n/* harmony export */   TealKeyValue: () => (/* binding */ TealKeyValue),\n/* harmony export */   TealValue: () => (/* binding */ TealValue),\n/* harmony export */   TransactionParametersResponse: () => (/* binding */ TransactionParametersResponse),\n/* harmony export */   TransactionProofResponse: () => (/* binding */ TransactionProofResponse),\n/* harmony export */   Version: () => (/* binding */ Version)\n/* harmony export */ });\n/* harmony import */ var _basemodel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basemodel */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/basemodel.js\");\n/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */ /* eslint-disable no-use-before-define */ \n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */ class Account extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Account` object.\n     * @param address - the account public key\n     * @param amount - (algo) total number of MicroAlgos in the account\n     * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n     * @param minBalance - MicroAlgo balance required by the account.\n     * The requirement grows based on asset and application usage.\n     * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n     * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n     * rewards.\n     * @param round - The round for which this information is relevant.\n     * @param status - (onl) delegation status of the account's MicroAlgos\n     * * Offline - indicates that the associated account is delegated.\n     * * Online - indicates that the associated account used as part of the delegation\n     * pool.\n     * * NotParticipating - indicates that the associated account is neither a\n     * delegator nor a delegate.\n     * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n     * of application local data (AppLocalState objects) stored in this account.\n     * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n     * AssetHolding objects held by this account.\n     * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n     * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n     * @param appsLocalState - (appl) applications local data stored in this account.\n     * Note the raw object uses `map[int] -> AppLocalState` for this type.\n     * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n     * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n     * account.\n     * Note: the raw account uses `StateSchema` for this type.\n     * @param assets - (asset) assets held by this account.\n     * Note the raw object uses `map[int] -> AssetHolding` for this type.\n     * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n     * address of the current account is used. This field can be updated in any\n     * transaction by setting the RekeyTo field.\n     * @param createdApps - (appp) parameters of applications created by this account including app global\n     * data.\n     * Note: the raw account uses `map[int] -> AppParams` for this type.\n     * @param createdAssets - (apar) parameters of assets created by this account.\n     * Note: the raw account uses `map[int] -> Asset` for this type.\n     * @param participation - AccountParticipation describes the parameters used by this account in consensus\n     * protocol.\n     * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n     * which are participating.\n     * @param sigType - Indicates what type of signature is used by this account, must be one of:\n     * * sig\n     * * msig\n     * * lsig\n     * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n     * values.\n     * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n     */ constructor({ address, amount, amountWithoutPendingRewards, minBalance, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, createdApps, createdAssets, participation, rewardBase, sigType, totalBoxBytes, totalBoxes }){\n        super();\n        this.address = address;\n        this.amount = amount;\n        this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n        this.minBalance = minBalance;\n        this.pendingRewards = pendingRewards;\n        this.rewards = rewards;\n        this.round = round;\n        this.status = status;\n        this.totalAppsOptedIn = totalAppsOptedIn;\n        this.totalAssetsOptedIn = totalAssetsOptedIn;\n        this.totalCreatedApps = totalCreatedApps;\n        this.totalCreatedAssets = totalCreatedAssets;\n        this.appsLocalState = appsLocalState;\n        this.appsTotalExtraPages = appsTotalExtraPages;\n        this.appsTotalSchema = appsTotalSchema;\n        this.assets = assets;\n        this.authAddr = authAddr;\n        this.createdApps = createdApps;\n        this.createdAssets = createdAssets;\n        this.participation = participation;\n        this.rewardBase = rewardBase;\n        this.sigType = sigType;\n        this.totalBoxBytes = totalBoxBytes;\n        this.totalBoxes = totalBoxes;\n        this.attribute_map = {\n            address: \"address\",\n            amount: \"amount\",\n            amountWithoutPendingRewards: \"amount-without-pending-rewards\",\n            minBalance: \"min-balance\",\n            pendingRewards: \"pending-rewards\",\n            rewards: \"rewards\",\n            round: \"round\",\n            status: \"status\",\n            totalAppsOptedIn: \"total-apps-opted-in\",\n            totalAssetsOptedIn: \"total-assets-opted-in\",\n            totalCreatedApps: \"total-created-apps\",\n            totalCreatedAssets: \"total-created-assets\",\n            appsLocalState: \"apps-local-state\",\n            appsTotalExtraPages: \"apps-total-extra-pages\",\n            appsTotalSchema: \"apps-total-schema\",\n            assets: \"assets\",\n            authAddr: \"auth-addr\",\n            createdApps: \"created-apps\",\n            createdAssets: \"created-assets\",\n            participation: \"participation\",\n            rewardBase: \"reward-base\",\n            sigType: \"sig-type\",\n            totalBoxBytes: \"total-box-bytes\",\n            totalBoxes: \"total-boxes\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"address\"] === \"undefined\") throw new Error(`Response is missing required field 'address': ${data}`);\n        if (typeof data[\"amount\"] === \"undefined\") throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data[\"amount-without-pending-rewards\"] === \"undefined\") throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n        if (typeof data[\"min-balance\"] === \"undefined\") throw new Error(`Response is missing required field 'min-balance': ${data}`);\n        if (typeof data[\"pending-rewards\"] === \"undefined\") throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n        if (typeof data[\"rewards\"] === \"undefined\") throw new Error(`Response is missing required field 'rewards': ${data}`);\n        if (typeof data[\"round\"] === \"undefined\") throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data[\"status\"] === \"undefined\") throw new Error(`Response is missing required field 'status': ${data}`);\n        if (typeof data[\"total-apps-opted-in\"] === \"undefined\") throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n        if (typeof data[\"total-assets-opted-in\"] === \"undefined\") throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n        if (typeof data[\"total-created-apps\"] === \"undefined\") throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n        if (typeof data[\"total-created-assets\"] === \"undefined\") throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n        return new Account({\n            address: data[\"address\"],\n            amount: data[\"amount\"],\n            amountWithoutPendingRewards: data[\"amount-without-pending-rewards\"],\n            minBalance: data[\"min-balance\"],\n            pendingRewards: data[\"pending-rewards\"],\n            rewards: data[\"rewards\"],\n            round: data[\"round\"],\n            status: data[\"status\"],\n            totalAppsOptedIn: data[\"total-apps-opted-in\"],\n            totalAssetsOptedIn: data[\"total-assets-opted-in\"],\n            totalCreatedApps: data[\"total-created-apps\"],\n            totalCreatedAssets: data[\"total-created-assets\"],\n            appsLocalState: typeof data[\"apps-local-state\"] !== \"undefined\" ? data[\"apps-local-state\"].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n            appsTotalExtraPages: data[\"apps-total-extra-pages\"],\n            appsTotalSchema: typeof data[\"apps-total-schema\"] !== \"undefined\" ? ApplicationStateSchema.from_obj_for_encoding(data[\"apps-total-schema\"]) : undefined,\n            assets: typeof data[\"assets\"] !== \"undefined\" ? data[\"assets\"].map(AssetHolding.from_obj_for_encoding) : undefined,\n            authAddr: data[\"auth-addr\"],\n            createdApps: typeof data[\"created-apps\"] !== \"undefined\" ? data[\"created-apps\"].map(Application.from_obj_for_encoding) : undefined,\n            createdAssets: typeof data[\"created-assets\"] !== \"undefined\" ? data[\"created-assets\"].map(Asset.from_obj_for_encoding) : undefined,\n            participation: typeof data[\"participation\"] !== \"undefined\" ? AccountParticipation.from_obj_for_encoding(data[\"participation\"]) : undefined,\n            rewardBase: data[\"reward-base\"],\n            sigType: data[\"sig-type\"],\n            totalBoxBytes: data[\"total-box-bytes\"],\n            totalBoxes: data[\"total-boxes\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */ class AccountApplicationResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AccountApplicationResponse` object.\n     * @param round - The round for which this information is relevant.\n     * @param appLocalState - (appl) the application local data stored in this account.\n     * The raw account uses `AppLocalState` for this type.\n     * @param createdApp - (appp) parameters of the application created by this account including app\n     * global data.\n     * The raw account uses `AppParams` for this type.\n     */ constructor(round, appLocalState, createdApp){\n        super();\n        this.round = round;\n        this.appLocalState = appLocalState;\n        this.createdApp = createdApp;\n        this.attribute_map = {\n            round: \"round\",\n            appLocalState: \"app-local-state\",\n            createdApp: \"created-app\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"round\"] === \"undefined\") throw new Error(`Response is missing required field 'round': ${data}`);\n        return new AccountApplicationResponse(data[\"round\"], typeof data[\"app-local-state\"] !== \"undefined\" ? ApplicationLocalState.from_obj_for_encoding(data[\"app-local-state\"]) : undefined, typeof data[\"created-app\"] !== \"undefined\" ? ApplicationParams.from_obj_for_encoding(data[\"created-app\"]) : undefined);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */ class AccountAssetResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AccountAssetResponse` object.\n     * @param round - The round for which this information is relevant.\n     * @param assetHolding - (asset) Details about the asset held by this account.\n     * The raw account uses `AssetHolding` for this type.\n     * @param createdAsset - (apar) parameters of the asset created by this account.\n     * The raw account uses `AssetParams` for this type.\n     */ constructor(round, assetHolding, createdAsset){\n        super();\n        this.round = round;\n        this.assetHolding = assetHolding;\n        this.createdAsset = createdAsset;\n        this.attribute_map = {\n            round: \"round\",\n            assetHolding: \"asset-holding\",\n            createdAsset: \"created-asset\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"round\"] === \"undefined\") throw new Error(`Response is missing required field 'round': ${data}`);\n        return new AccountAssetResponse(data[\"round\"], typeof data[\"asset-holding\"] !== \"undefined\" ? AssetHolding.from_obj_for_encoding(data[\"asset-holding\"]) : undefined, typeof data[\"created-asset\"] !== \"undefined\" ? AssetParams.from_obj_for_encoding(data[\"created-asset\"]) : undefined);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */ class AccountParticipation extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AccountParticipation` object.\n     * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n     * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n     * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n     * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n     * round.\n     * @param stateProofKey - (stprf) Root of the state proof key (if any)\n     */ constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey }){\n        super();\n        this.selectionParticipationKey = typeof selectionParticipationKey === \"string\" ? new Uint8Array(Buffer.from(selectionParticipationKey, \"base64\")) : selectionParticipationKey;\n        this.voteFirstValid = voteFirstValid;\n        this.voteKeyDilution = voteKeyDilution;\n        this.voteLastValid = voteLastValid;\n        this.voteParticipationKey = typeof voteParticipationKey === \"string\" ? new Uint8Array(Buffer.from(voteParticipationKey, \"base64\")) : voteParticipationKey;\n        this.stateProofKey = typeof stateProofKey === \"string\" ? new Uint8Array(Buffer.from(stateProofKey, \"base64\")) : stateProofKey;\n        this.attribute_map = {\n            selectionParticipationKey: \"selection-participation-key\",\n            voteFirstValid: \"vote-first-valid\",\n            voteKeyDilution: \"vote-key-dilution\",\n            voteLastValid: \"vote-last-valid\",\n            voteParticipationKey: \"vote-participation-key\",\n            stateProofKey: \"state-proof-key\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"selection-participation-key\"] === \"undefined\") throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n        if (typeof data[\"vote-first-valid\"] === \"undefined\") throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n        if (typeof data[\"vote-key-dilution\"] === \"undefined\") throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n        if (typeof data[\"vote-last-valid\"] === \"undefined\") throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n        if (typeof data[\"vote-participation-key\"] === \"undefined\") throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n        return new AccountParticipation({\n            selectionParticipationKey: data[\"selection-participation-key\"],\n            voteFirstValid: data[\"vote-first-valid\"],\n            voteKeyDilution: data[\"vote-key-dilution\"],\n            voteLastValid: data[\"vote-last-valid\"],\n            voteParticipationKey: data[\"vote-participation-key\"],\n            stateProofKey: data[\"state-proof-key\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Application state delta.\n */ class AccountStateDelta extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AccountStateDelta` object.\n     * @param address -\n     * @param delta - Application state delta.\n     */ constructor(address, delta){\n        super();\n        this.address = address;\n        this.delta = delta;\n        this.attribute_map = {\n            address: \"address\",\n            delta: \"delta\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"address\"] === \"undefined\") throw new Error(`Response is missing required field 'address': ${data}`);\n        if (!Array.isArray(data[\"delta\"])) throw new Error(`Response is missing required array field 'delta': ${data}`);\n        return new AccountStateDelta(data[\"address\"], data[\"delta\"].map(EvalDeltaKeyValue.from_obj_for_encoding));\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Application index and its parameters\n */ class Application extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Application` object.\n     * @param id - (appidx) application index.\n     * @param params - (appparams) application parameters.\n     */ constructor(id, params){\n        super();\n        this.id = id;\n        this.params = params;\n        this.attribute_map = {\n            id: \"id\",\n            params: \"params\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"id\"] === \"undefined\") throw new Error(`Response is missing required field 'id': ${data}`);\n        if (typeof data[\"params\"] === \"undefined\") throw new Error(`Response is missing required field 'params': ${data}`);\n        return new Application(data[\"id\"], ApplicationParams.from_obj_for_encoding(data[\"params\"]));\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Stores local state associated with an application.\n */ class ApplicationLocalState extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationLocalState` object.\n     * @param id - The application which this local state is for.\n     * @param schema - (hsch) schema.\n     * @param keyValue - (tkv) storage.\n     */ constructor(id, schema, keyValue){\n        super();\n        this.id = id;\n        this.schema = schema;\n        this.keyValue = keyValue;\n        this.attribute_map = {\n            id: \"id\",\n            schema: \"schema\",\n            keyValue: \"key-value\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"id\"] === \"undefined\") throw new Error(`Response is missing required field 'id': ${data}`);\n        if (typeof data[\"schema\"] === \"undefined\") throw new Error(`Response is missing required field 'schema': ${data}`);\n        return new ApplicationLocalState(data[\"id\"], ApplicationStateSchema.from_obj_for_encoding(data[\"schema\"]), typeof data[\"key-value\"] !== \"undefined\" ? data[\"key-value\"].map(TealKeyValue.from_obj_for_encoding) : undefined);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Stores the global information associated with an application.\n */ class ApplicationParams extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationParams` object.\n     * @param approvalProgram - (approv) approval program.\n     * @param clearStateProgram - (clearp) approval program.\n     * @param creator - The address that created this application. This is the address where the\n     * parameters and global state for this application can be found.\n     * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n     * @param globalState - [\\gs) global schema\n     * @param globalStateSchema - [\\gsch) global schema\n     * @param localStateSchema - [\\lsch) local schema\n     */ constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema }){\n        super();\n        this.approvalProgram = typeof approvalProgram === \"string\" ? new Uint8Array(Buffer.from(approvalProgram, \"base64\")) : approvalProgram;\n        this.clearStateProgram = typeof clearStateProgram === \"string\" ? new Uint8Array(Buffer.from(clearStateProgram, \"base64\")) : clearStateProgram;\n        this.creator = creator;\n        this.extraProgramPages = extraProgramPages;\n        this.globalState = globalState;\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.attribute_map = {\n            approvalProgram: \"approval-program\",\n            clearStateProgram: \"clear-state-program\",\n            creator: \"creator\",\n            extraProgramPages: \"extra-program-pages\",\n            globalState: \"global-state\",\n            globalStateSchema: \"global-state-schema\",\n            localStateSchema: \"local-state-schema\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"approval-program\"] === \"undefined\") throw new Error(`Response is missing required field 'approval-program': ${data}`);\n        if (typeof data[\"clear-state-program\"] === \"undefined\") throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n        if (typeof data[\"creator\"] === \"undefined\") throw new Error(`Response is missing required field 'creator': ${data}`);\n        return new ApplicationParams({\n            approvalProgram: data[\"approval-program\"],\n            clearStateProgram: data[\"clear-state-program\"],\n            creator: data[\"creator\"],\n            extraProgramPages: data[\"extra-program-pages\"],\n            globalState: typeof data[\"global-state\"] !== \"undefined\" ? data[\"global-state\"].map(TealKeyValue.from_obj_for_encoding) : undefined,\n            globalStateSchema: typeof data[\"global-state-schema\"] !== \"undefined\" ? ApplicationStateSchema.from_obj_for_encoding(data[\"global-state-schema\"]) : undefined,\n            localStateSchema: typeof data[\"local-state-schema\"] !== \"undefined\" ? ApplicationStateSchema.from_obj_for_encoding(data[\"local-state-schema\"]) : undefined\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */ class ApplicationStateSchema extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationStateSchema` object.\n     * @param numUint - (nui) num of uints.\n     * @param numByteSlice - (nbs) num of byte slices.\n     */ constructor(numUint, numByteSlice){\n        super();\n        this.numUint = numUint;\n        this.numByteSlice = numByteSlice;\n        this.attribute_map = {\n            numUint: \"num-uint\",\n            numByteSlice: \"num-byte-slice\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"num-uint\"] === \"undefined\") throw new Error(`Response is missing required field 'num-uint': ${data}`);\n        if (typeof data[\"num-byte-slice\"] === \"undefined\") throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n        return new ApplicationStateSchema(data[\"num-uint\"], data[\"num-byte-slice\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */ class Asset extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Asset` object.\n     * @param index - unique asset identifier\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     */ constructor(index, params){\n        super();\n        this.index = index;\n        this.params = params;\n        this.attribute_map = {\n            index: \"index\",\n            params: \"params\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"index\"] === \"undefined\") throw new Error(`Response is missing required field 'index': ${data}`);\n        if (typeof data[\"params\"] === \"undefined\") throw new Error(`Response is missing required field 'params': ${data}`);\n        return new Asset(data[\"index\"], AssetParams.from_obj_for_encoding(data[\"params\"]));\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */ class AssetHolding extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AssetHolding` object.\n     * @param amount - (a) number of units held.\n     * @param assetId - Asset ID of the holding.\n     * @param isFrozen - (f) whether or not the holding is frozen.\n     */ constructor(amount, assetId, isFrozen){\n        super();\n        this.amount = amount;\n        this.assetId = assetId;\n        this.isFrozen = isFrozen;\n        this.attribute_map = {\n            amount: \"amount\",\n            assetId: \"asset-id\",\n            isFrozen: \"is-frozen\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"amount\"] === \"undefined\") throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data[\"asset-id\"] === \"undefined\") throw new Error(`Response is missing required field 'asset-id': ${data}`);\n        if (typeof data[\"is-frozen\"] === \"undefined\") throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n        return new AssetHolding(data[\"amount\"], data[\"asset-id\"], data[\"is-frozen\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */ class AssetParams extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AssetParams` object.\n     * @param creator - The address that created this asset. This is the address where the parameters\n     * for this asset can be found, and also the address where unwanted asset units can\n     * be sent in the worst case.\n     * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n     * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n     * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n     * must be between 0 and 19 (inclusive).\n     * @param total - (t) The total number of units of this asset.\n     * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n     * clawback is not permitted.\n     * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n     * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n     * is not permitted.\n     * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n     * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n     * metadata is up to the application.\n     * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n     * asset name is composed of printable utf-8 characters.\n     * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n     * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n     * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n     * when the name of a unit of this asset is composed of printable utf-8 characters.\n     * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n     * @param url - (au) URL where more information about the asset can be retrieved. Included only\n     * when the URL is composed of printable utf-8 characters.\n     * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n     */ constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64 }){\n        super();\n        this.creator = creator;\n        this.decimals = decimals;\n        this.total = total;\n        this.clawback = clawback;\n        this.defaultFrozen = defaultFrozen;\n        this.freeze = freeze;\n        this.manager = manager;\n        this.metadataHash = typeof metadataHash === \"string\" ? new Uint8Array(Buffer.from(metadataHash, \"base64\")) : metadataHash;\n        this.name = name;\n        this.nameB64 = typeof nameB64 === \"string\" ? new Uint8Array(Buffer.from(nameB64, \"base64\")) : nameB64;\n        this.reserve = reserve;\n        this.unitName = unitName;\n        this.unitNameB64 = typeof unitNameB64 === \"string\" ? new Uint8Array(Buffer.from(unitNameB64, \"base64\")) : unitNameB64;\n        this.url = url;\n        this.urlB64 = typeof urlB64 === \"string\" ? new Uint8Array(Buffer.from(urlB64, \"base64\")) : urlB64;\n        this.attribute_map = {\n            creator: \"creator\",\n            decimals: \"decimals\",\n            total: \"total\",\n            clawback: \"clawback\",\n            defaultFrozen: \"default-frozen\",\n            freeze: \"freeze\",\n            manager: \"manager\",\n            metadataHash: \"metadata-hash\",\n            name: \"name\",\n            nameB64: \"name-b64\",\n            reserve: \"reserve\",\n            unitName: \"unit-name\",\n            unitNameB64: \"unit-name-b64\",\n            url: \"url\",\n            urlB64: \"url-b64\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"creator\"] === \"undefined\") throw new Error(`Response is missing required field 'creator': ${data}`);\n        if (typeof data[\"decimals\"] === \"undefined\") throw new Error(`Response is missing required field 'decimals': ${data}`);\n        if (typeof data[\"total\"] === \"undefined\") throw new Error(`Response is missing required field 'total': ${data}`);\n        return new AssetParams({\n            creator: data[\"creator\"],\n            decimals: data[\"decimals\"],\n            total: data[\"total\"],\n            clawback: data[\"clawback\"],\n            defaultFrozen: data[\"default-frozen\"],\n            freeze: data[\"freeze\"],\n            manager: data[\"manager\"],\n            metadataHash: data[\"metadata-hash\"],\n            name: data[\"name\"],\n            nameB64: data[\"name-b64\"],\n            reserve: data[\"reserve\"],\n            unitName: data[\"unit-name\"],\n            unitNameB64: data[\"unit-name-b64\"],\n            url: data[\"url\"],\n            urlB64: data[\"url-b64\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Hash of a block header.\n */ class BlockHashResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BlockHashResponse` object.\n     * @param blockhash - Block header hash.\n     */ constructor(blockhash){\n        super();\n        this.blockhash = blockhash;\n        this.attribute_map = {\n            blockhash: \"blockHash\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"blockHash\"] === \"undefined\") throw new Error(`Response is missing required field 'blockHash': ${data}`);\n        return new BlockHashResponse(data[\"blockHash\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Encoded block object.\n */ class BlockResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BlockResponse` object.\n     * @param block - Block header data.\n     * @param cert - Optional certificate object. This is only included when the format is set to\n     * message pack.\n     */ constructor(block, cert){\n        super();\n        this.block = block;\n        this.cert = cert;\n        this.attribute_map = {\n            block: \"block\",\n            cert: \"cert\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"block\"] === \"undefined\") throw new Error(`Response is missing required field 'block': ${data}`);\n        return new BlockResponse(data[\"block\"], data[\"cert\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Box name and its content.\n */ class Box extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Box` object.\n     * @param name - (name) box name, base64 encoded\n     * @param value - (value) box value, base64 encoded.\n     */ constructor(name, value){\n        super();\n        this.name = typeof name === \"string\" ? new Uint8Array(Buffer.from(name, \"base64\")) : name;\n        this.value = typeof value === \"string\" ? new Uint8Array(Buffer.from(value, \"base64\")) : value;\n        this.attribute_map = {\n            name: \"name\",\n            value: \"value\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"name\"] === \"undefined\") throw new Error(`Response is missing required field 'name': ${data}`);\n        if (typeof data[\"value\"] === \"undefined\") throw new Error(`Response is missing required field 'value': ${data}`);\n        return new Box(data[\"name\"], data[\"value\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Box descriptor describes a Box.\n */ class BoxDescriptor extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BoxDescriptor` object.\n     * @param name - Base64 encoded box name\n     */ constructor(name){\n        super();\n        this.name = typeof name === \"string\" ? new Uint8Array(Buffer.from(name, \"base64\")) : name;\n        this.attribute_map = {\n            name: \"name\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"name\"] === \"undefined\") throw new Error(`Response is missing required field 'name': ${data}`);\n        return new BoxDescriptor(data[\"name\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Box names of an application\n */ class BoxesResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BoxesResponse` object.\n     * @param boxes -\n     */ constructor(boxes){\n        super();\n        this.boxes = boxes;\n        this.attribute_map = {\n            boxes: \"boxes\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"boxes\"])) throw new Error(`Response is missing required array field 'boxes': ${data}`);\n        return new BoxesResponse(data[\"boxes\"].map(BoxDescriptor.from_obj_for_encoding));\n    /* eslint-enable dot-notation */ }\n}\nclass BuildVersion extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BuildVersion` object.\n     * @param branch -\n     * @param buildNumber -\n     * @param channel -\n     * @param commitHash -\n     * @param major -\n     * @param minor -\n     */ constructor({ branch, buildNumber, channel, commitHash, major, minor }){\n        super();\n        this.branch = branch;\n        this.buildNumber = buildNumber;\n        this.channel = channel;\n        this.commitHash = commitHash;\n        this.major = major;\n        this.minor = minor;\n        this.attribute_map = {\n            branch: \"branch\",\n            buildNumber: \"build_number\",\n            channel: \"channel\",\n            commitHash: \"commit_hash\",\n            major: \"major\",\n            minor: \"minor\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"branch\"] === \"undefined\") throw new Error(`Response is missing required field 'branch': ${data}`);\n        if (typeof data[\"build_number\"] === \"undefined\") throw new Error(`Response is missing required field 'build_number': ${data}`);\n        if (typeof data[\"channel\"] === \"undefined\") throw new Error(`Response is missing required field 'channel': ${data}`);\n        if (typeof data[\"commit_hash\"] === \"undefined\") throw new Error(`Response is missing required field 'commit_hash': ${data}`);\n        if (typeof data[\"major\"] === \"undefined\") throw new Error(`Response is missing required field 'major': ${data}`);\n        if (typeof data[\"minor\"] === \"undefined\") throw new Error(`Response is missing required field 'minor': ${data}`);\n        return new BuildVersion({\n            branch: data[\"branch\"],\n            buildNumber: data[\"build_number\"],\n            channel: data[\"channel\"],\n            commitHash: data[\"commit_hash\"],\n            major: data[\"major\"],\n            minor: data[\"minor\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class CatchpointAbortResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `CatchpointAbortResponse` object.\n     * @param catchupMessage - Catchup abort response string\n     */ constructor(catchupMessage){\n        super();\n        this.catchupMessage = catchupMessage;\n        this.attribute_map = {\n            catchupMessage: \"catchup-message\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"catchup-message\"] === \"undefined\") throw new Error(`Response is missing required field 'catchup-message': ${data}`);\n        return new CatchpointAbortResponse(data[\"catchup-message\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class CatchpointStartResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `CatchpointStartResponse` object.\n     * @param catchupMessage - Catchup start response string\n     */ constructor(catchupMessage){\n        super();\n        this.catchupMessage = catchupMessage;\n        this.attribute_map = {\n            catchupMessage: \"catchup-message\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"catchup-message\"] === \"undefined\") throw new Error(`Response is missing required field 'catchup-message': ${data}`);\n        return new CatchpointStartResponse(data[\"catchup-message\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Teal compile Result\n */ class CompileResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `CompileResponse` object.\n     * @param hash - base32 SHA512_256 of program bytes (Address style)\n     * @param result - base64 encoded program bytes\n     * @param sourcemap - JSON of the source map\n     */ constructor(hash, result, sourcemap){\n        super();\n        this.hash = hash;\n        this.result = result;\n        this.sourcemap = sourcemap;\n        this.attribute_map = {\n            hash: \"hash\",\n            result: \"result\",\n            sourcemap: \"sourcemap\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"hash\"] === \"undefined\") throw new Error(`Response is missing required field 'hash': ${data}`);\n        if (typeof data[\"result\"] === \"undefined\") throw new Error(`Response is missing required field 'result': ${data}`);\n        return new CompileResponse(data[\"hash\"], data[\"result\"], data[\"sourcemap\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Teal disassembly Result\n */ class DisassembleResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `DisassembleResponse` object.\n     * @param result - disassembled Teal code\n     */ constructor(result){\n        super();\n        this.result = result;\n        this.attribute_map = {\n            result: \"result\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"result\"] === \"undefined\") throw new Error(`Response is missing required field 'result': ${data}`);\n        return new DisassembleResponse(data[\"result\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */ class DryrunRequest extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `DryrunRequest` object.\n     * @param accounts -\n     * @param apps -\n     * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n     * confirmed timestamp this algod is attached to.\n     * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n     * whatever the current protocol of the network this algod is running in.\n     * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n     * network this algod is attached to.\n     * @param sources -\n     * @param txns -\n     */ constructor({ accounts, apps, latestTimestamp, protocolVersion, round, sources, txns }){\n        super();\n        this.accounts = accounts;\n        this.apps = apps;\n        this.latestTimestamp = latestTimestamp;\n        this.protocolVersion = protocolVersion;\n        this.round = round;\n        this.sources = sources;\n        this.txns = txns;\n        this.attribute_map = {\n            accounts: \"accounts\",\n            apps: \"apps\",\n            latestTimestamp: \"latest-timestamp\",\n            protocolVersion: \"protocol-version\",\n            round: \"round\",\n            sources: \"sources\",\n            txns: \"txns\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"accounts\"])) throw new Error(`Response is missing required array field 'accounts': ${data}`);\n        if (!Array.isArray(data[\"apps\"])) throw new Error(`Response is missing required array field 'apps': ${data}`);\n        if (typeof data[\"latest-timestamp\"] === \"undefined\") throw new Error(`Response is missing required field 'latest-timestamp': ${data}`);\n        if (typeof data[\"protocol-version\"] === \"undefined\") throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n        if (typeof data[\"round\"] === \"undefined\") throw new Error(`Response is missing required field 'round': ${data}`);\n        if (!Array.isArray(data[\"sources\"])) throw new Error(`Response is missing required array field 'sources': ${data}`);\n        if (!Array.isArray(data[\"txns\"])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n        return new DryrunRequest({\n            accounts: data[\"accounts\"].map(Account.from_obj_for_encoding),\n            apps: data[\"apps\"].map(Application.from_obj_for_encoding),\n            latestTimestamp: data[\"latest-timestamp\"],\n            protocolVersion: data[\"protocol-version\"],\n            round: data[\"round\"],\n            sources: data[\"sources\"].map(DryrunSource.from_obj_for_encoding),\n            txns: data[\"txns\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */ class DryrunResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `DryrunResponse` object.\n     * @param error -\n     * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n     * @param txns -\n     */ constructor(error, protocolVersion, txns){\n        super();\n        this.error = error;\n        this.protocolVersion = protocolVersion;\n        this.txns = txns;\n        this.attribute_map = {\n            error: \"error\",\n            protocolVersion: \"protocol-version\",\n            txns: \"txns\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"error\"] === \"undefined\") throw new Error(`Response is missing required field 'error': ${data}`);\n        if (typeof data[\"protocol-version\"] === \"undefined\") throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n        if (!Array.isArray(data[\"txns\"])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n        return new DryrunResponse(data[\"error\"], data[\"protocol-version\"], data[\"txns\"].map(DryrunTxnResult.from_obj_for_encoding));\n    /* eslint-enable dot-notation */ }\n}\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */ class DryrunSource extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `DryrunSource` object.\n     * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n     * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n     * Approval Program or Clear State Program of application[this.AppIndex].\n     * @param source -\n     * @param txnIndex -\n     * @param appIndex -\n     */ constructor(fieldName, source, txnIndex, appIndex){\n        super();\n        this.fieldName = fieldName;\n        this.source = source;\n        this.txnIndex = txnIndex;\n        this.appIndex = appIndex;\n        this.attribute_map = {\n            fieldName: \"field-name\",\n            source: \"source\",\n            txnIndex: \"txn-index\",\n            appIndex: \"app-index\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"field-name\"] === \"undefined\") throw new Error(`Response is missing required field 'field-name': ${data}`);\n        if (typeof data[\"source\"] === \"undefined\") throw new Error(`Response is missing required field 'source': ${data}`);\n        if (typeof data[\"txn-index\"] === \"undefined\") throw new Error(`Response is missing required field 'txn-index': ${data}`);\n        if (typeof data[\"app-index\"] === \"undefined\") throw new Error(`Response is missing required field 'app-index': ${data}`);\n        return new DryrunSource(data[\"field-name\"], data[\"source\"], data[\"txn-index\"], data[\"app-index\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Stores the TEAL eval step data\n */ class DryrunState extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `DryrunState` object.\n     * @param line - Line number\n     * @param pc - Program counter\n     * @param stack -\n     * @param error - Evaluation error if any\n     * @param scratch -\n     */ constructor({ line, pc, stack, error, scratch }){\n        super();\n        this.line = line;\n        this.pc = pc;\n        this.stack = stack;\n        this.error = error;\n        this.scratch = scratch;\n        this.attribute_map = {\n            line: \"line\",\n            pc: \"pc\",\n            stack: \"stack\",\n            error: \"error\",\n            scratch: \"scratch\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"line\"] === \"undefined\") throw new Error(`Response is missing required field 'line': ${data}`);\n        if (typeof data[\"pc\"] === \"undefined\") throw new Error(`Response is missing required field 'pc': ${data}`);\n        if (!Array.isArray(data[\"stack\"])) throw new Error(`Response is missing required array field 'stack': ${data}`);\n        return new DryrunState({\n            line: data[\"line\"],\n            pc: data[\"pc\"],\n            stack: data[\"stack\"].map(TealValue.from_obj_for_encoding),\n            error: data[\"error\"],\n            scratch: typeof data[\"scratch\"] !== \"undefined\" ? data[\"scratch\"].map(TealValue.from_obj_for_encoding) : undefined\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */ class DryrunTxnResult extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `DryrunTxnResult` object.\n     * @param disassembly - Disassembled program line by line.\n     * @param appCallMessages -\n     * @param appCallTrace -\n     * @param budgetAdded - Budget added during execution of app call transaction.\n     * @param budgetConsumed - Budget consumed during execution of app call transaction.\n     * @param cost - Net cost of app execution. Field is DEPRECATED and is subject for removal.\n     * Instead, use `budget-added` and `budget-consumed.\n     * @param globalDelta - Application state delta.\n     * @param localDeltas -\n     * @param logicSigDisassembly - Disassembled lsig program line by line.\n     * @param logicSigMessages -\n     * @param logicSigTrace -\n     * @param logs -\n     */ constructor({ disassembly, appCallMessages, appCallTrace, budgetAdded, budgetConsumed, cost, globalDelta, localDeltas, logicSigDisassembly, logicSigMessages, logicSigTrace, logs }){\n        super();\n        this.disassembly = disassembly;\n        this.appCallMessages = appCallMessages;\n        this.appCallTrace = appCallTrace;\n        this.budgetAdded = budgetAdded;\n        this.budgetConsumed = budgetConsumed;\n        this.cost = cost;\n        this.globalDelta = globalDelta;\n        this.localDeltas = localDeltas;\n        this.logicSigDisassembly = logicSigDisassembly;\n        this.logicSigMessages = logicSigMessages;\n        this.logicSigTrace = logicSigTrace;\n        this.logs = logs;\n        this.attribute_map = {\n            disassembly: \"disassembly\",\n            appCallMessages: \"app-call-messages\",\n            appCallTrace: \"app-call-trace\",\n            budgetAdded: \"budget-added\",\n            budgetConsumed: \"budget-consumed\",\n            cost: \"cost\",\n            globalDelta: \"global-delta\",\n            localDeltas: \"local-deltas\",\n            logicSigDisassembly: \"logic-sig-disassembly\",\n            logicSigMessages: \"logic-sig-messages\",\n            logicSigTrace: \"logic-sig-trace\",\n            logs: \"logs\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"disassembly\"])) throw new Error(`Response is missing required array field 'disassembly': ${data}`);\n        return new DryrunTxnResult({\n            disassembly: data[\"disassembly\"],\n            appCallMessages: data[\"app-call-messages\"],\n            appCallTrace: typeof data[\"app-call-trace\"] !== \"undefined\" ? data[\"app-call-trace\"].map(DryrunState.from_obj_for_encoding) : undefined,\n            budgetAdded: data[\"budget-added\"],\n            budgetConsumed: data[\"budget-consumed\"],\n            cost: data[\"cost\"],\n            globalDelta: typeof data[\"global-delta\"] !== \"undefined\" ? data[\"global-delta\"].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n            localDeltas: typeof data[\"local-deltas\"] !== \"undefined\" ? data[\"local-deltas\"].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n            logicSigDisassembly: data[\"logic-sig-disassembly\"],\n            logicSigMessages: data[\"logic-sig-messages\"],\n            logicSigTrace: typeof data[\"logic-sig-trace\"] !== \"undefined\" ? data[\"logic-sig-trace\"].map(DryrunState.from_obj_for_encoding) : undefined,\n            logs: data[\"logs\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * An error response with optional data field.\n */ class ErrorResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ErrorResponse` object.\n     * @param message -\n     * @param data -\n     */ constructor(message, data){\n        super();\n        this.message = message;\n        this.data = data;\n        this.attribute_map = {\n            message: \"message\",\n            data: \"data\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"message\"] === \"undefined\") throw new Error(`Response is missing required field 'message': ${data}`);\n        return new ErrorResponse(data[\"message\"], data[\"data\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents a TEAL value delta.\n */ class EvalDelta extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `EvalDelta` object.\n     * @param action - (at) delta action.\n     * @param bytes - (bs) bytes value.\n     * @param uint - (ui) uint value.\n     */ constructor(action, bytes, uint){\n        super();\n        this.action = action;\n        this.bytes = bytes;\n        this.uint = uint;\n        this.attribute_map = {\n            action: \"action\",\n            bytes: \"bytes\",\n            uint: \"uint\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"action\"] === \"undefined\") throw new Error(`Response is missing required field 'action': ${data}`);\n        return new EvalDelta(data[\"action\"], data[\"bytes\"], data[\"uint\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Key-value pairs for StateDelta.\n */ class EvalDeltaKeyValue extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `EvalDeltaKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value delta.\n     */ constructor(key, value){\n        super();\n        this.key = key;\n        this.value = value;\n        this.attribute_map = {\n            key: \"key\",\n            value: \"value\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"key\"] === \"undefined\") throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data[\"value\"] === \"undefined\") throw new Error(`Response is missing required field 'value': ${data}`);\n        return new EvalDeltaKeyValue(data[\"key\"], EvalDelta.from_obj_for_encoding(data[\"value\"]));\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Proof of membership and position of a light block header.\n */ class LightBlockHeaderProof extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `LightBlockHeaderProof` object.\n     * @param index - The index of the light block header in the vector commitment tree\n     * @param proof - The encoded proof.\n     * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n     * from a leaf to the root.\n     */ constructor(index, proof, treedepth){\n        super();\n        this.index = index;\n        this.proof = typeof proof === \"string\" ? new Uint8Array(Buffer.from(proof, \"base64\")) : proof;\n        this.treedepth = treedepth;\n        this.attribute_map = {\n            index: \"index\",\n            proof: \"proof\",\n            treedepth: \"treedepth\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"index\"] === \"undefined\") throw new Error(`Response is missing required field 'index': ${data}`);\n        if (typeof data[\"proof\"] === \"undefined\") throw new Error(`Response is missing required field 'proof': ${data}`);\n        if (typeof data[\"treedepth\"] === \"undefined\") throw new Error(`Response is missing required field 'treedepth': ${data}`);\n        return new LightBlockHeaderProof(data[\"index\"], data[\"proof\"], data[\"treedepth\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class NodeStatusResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `NodeStatusResponse` object.\n     * @param catchupTime - CatchupTime in nanoseconds\n     * @param lastRound - LastRound indicates the last round seen\n     * @param lastVersion - LastVersion indicates the last consensus version supported\n     * @param nextVersion - NextVersion of consensus protocol to use\n     * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n     * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n     * by this node\n     * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n     * rounds and has stopped making progress\n     * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n     * @param catchpoint - The current catchpoint that is being caught up to\n     * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n     * catchup\n     * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n     * far as part of the catchup\n     * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n     * processed so far as part of the catchup\n     * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n     * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n     * catchup\n     * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n     * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n     * far as part of the catchup\n     * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n     * verified so far as part of the catchup\n     * @param lastCatchpoint - The last catchpoint seen by the node\n     */ constructor({ catchupTime, lastRound, lastVersion, nextVersion, nextVersionRound, nextVersionSupported, stoppedAtUnsupportedRound, timeSinceLastRound, catchpoint, catchpointAcquiredBlocks, catchpointProcessedAccounts, catchpointProcessedKvs, catchpointTotalAccounts, catchpointTotalBlocks, catchpointTotalKvs, catchpointVerifiedAccounts, catchpointVerifiedKvs, lastCatchpoint }){\n        super();\n        this.catchupTime = catchupTime;\n        this.lastRound = lastRound;\n        this.lastVersion = lastVersion;\n        this.nextVersion = nextVersion;\n        this.nextVersionRound = nextVersionRound;\n        this.nextVersionSupported = nextVersionSupported;\n        this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n        this.timeSinceLastRound = timeSinceLastRound;\n        this.catchpoint = catchpoint;\n        this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\n        this.catchpointProcessedAccounts = catchpointProcessedAccounts;\n        this.catchpointProcessedKvs = catchpointProcessedKvs;\n        this.catchpointTotalAccounts = catchpointTotalAccounts;\n        this.catchpointTotalBlocks = catchpointTotalBlocks;\n        this.catchpointTotalKvs = catchpointTotalKvs;\n        this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\n        this.catchpointVerifiedKvs = catchpointVerifiedKvs;\n        this.lastCatchpoint = lastCatchpoint;\n        this.attribute_map = {\n            catchupTime: \"catchup-time\",\n            lastRound: \"last-round\",\n            lastVersion: \"last-version\",\n            nextVersion: \"next-version\",\n            nextVersionRound: \"next-version-round\",\n            nextVersionSupported: \"next-version-supported\",\n            stoppedAtUnsupportedRound: \"stopped-at-unsupported-round\",\n            timeSinceLastRound: \"time-since-last-round\",\n            catchpoint: \"catchpoint\",\n            catchpointAcquiredBlocks: \"catchpoint-acquired-blocks\",\n            catchpointProcessedAccounts: \"catchpoint-processed-accounts\",\n            catchpointProcessedKvs: \"catchpoint-processed-kvs\",\n            catchpointTotalAccounts: \"catchpoint-total-accounts\",\n            catchpointTotalBlocks: \"catchpoint-total-blocks\",\n            catchpointTotalKvs: \"catchpoint-total-kvs\",\n            catchpointVerifiedAccounts: \"catchpoint-verified-accounts\",\n            catchpointVerifiedKvs: \"catchpoint-verified-kvs\",\n            lastCatchpoint: \"last-catchpoint\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"catchup-time\"] === \"undefined\") throw new Error(`Response is missing required field 'catchup-time': ${data}`);\n        if (typeof data[\"last-round\"] === \"undefined\") throw new Error(`Response is missing required field 'last-round': ${data}`);\n        if (typeof data[\"last-version\"] === \"undefined\") throw new Error(`Response is missing required field 'last-version': ${data}`);\n        if (typeof data[\"next-version\"] === \"undefined\") throw new Error(`Response is missing required field 'next-version': ${data}`);\n        if (typeof data[\"next-version-round\"] === \"undefined\") throw new Error(`Response is missing required field 'next-version-round': ${data}`);\n        if (typeof data[\"next-version-supported\"] === \"undefined\") throw new Error(`Response is missing required field 'next-version-supported': ${data}`);\n        if (typeof data[\"stopped-at-unsupported-round\"] === \"undefined\") throw new Error(`Response is missing required field 'stopped-at-unsupported-round': ${data}`);\n        if (typeof data[\"time-since-last-round\"] === \"undefined\") throw new Error(`Response is missing required field 'time-since-last-round': ${data}`);\n        return new NodeStatusResponse({\n            catchupTime: data[\"catchup-time\"],\n            lastRound: data[\"last-round\"],\n            lastVersion: data[\"last-version\"],\n            nextVersion: data[\"next-version\"],\n            nextVersionRound: data[\"next-version-round\"],\n            nextVersionSupported: data[\"next-version-supported\"],\n            stoppedAtUnsupportedRound: data[\"stopped-at-unsupported-round\"],\n            timeSinceLastRound: data[\"time-since-last-round\"],\n            catchpoint: data[\"catchpoint\"],\n            catchpointAcquiredBlocks: data[\"catchpoint-acquired-blocks\"],\n            catchpointProcessedAccounts: data[\"catchpoint-processed-accounts\"],\n            catchpointProcessedKvs: data[\"catchpoint-processed-kvs\"],\n            catchpointTotalAccounts: data[\"catchpoint-total-accounts\"],\n            catchpointTotalBlocks: data[\"catchpoint-total-blocks\"],\n            catchpointTotalKvs: data[\"catchpoint-total-kvs\"],\n            catchpointVerifiedAccounts: data[\"catchpoint-verified-accounts\"],\n            catchpointVerifiedKvs: data[\"catchpoint-verified-kvs\"],\n            lastCatchpoint: data[\"last-catchpoint\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */ class PendingTransactionResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `PendingTransactionResponse` object.\n     * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n     * (and specifies why that happened). An empty string indicates the transaction\n     * wasn't kicked out of this node's txpool due to an error.\n     * @param txn - The raw signed transaction.\n     * @param applicationIndex - The application index if the transaction was found and it created an\n     * application.\n     * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n     * @param assetIndex - The asset index if the transaction was found and it created an asset.\n     * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n     * @param closingAmount - Closing amount for the transaction.\n     * @param confirmedRound - The round where this transaction was confirmed, if present.\n     * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n     * transaction.\n     * @param innerTxns - Inner transactions produced by application execution.\n     * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n     * transaction.\n     * @param logs - (lg) Logs for the application being executed by this transaction.\n     * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n     * @param senderRewards - Rewards in microalgos applied to the sender account.\n     */ constructor({ poolError, txn, applicationIndex, assetClosingAmount, assetIndex, closeRewards, closingAmount, confirmedRound, globalStateDelta, innerTxns, localStateDelta, logs, receiverRewards, senderRewards }){\n        super();\n        this.poolError = poolError;\n        this.txn = txn;\n        this.applicationIndex = applicationIndex;\n        this.assetClosingAmount = assetClosingAmount;\n        this.assetIndex = assetIndex;\n        this.closeRewards = closeRewards;\n        this.closingAmount = closingAmount;\n        this.confirmedRound = confirmedRound;\n        this.globalStateDelta = globalStateDelta;\n        this.innerTxns = innerTxns;\n        this.localStateDelta = localStateDelta;\n        this.logs = logs;\n        this.receiverRewards = receiverRewards;\n        this.senderRewards = senderRewards;\n        this.attribute_map = {\n            poolError: \"pool-error\",\n            txn: \"txn\",\n            applicationIndex: \"application-index\",\n            assetClosingAmount: \"asset-closing-amount\",\n            assetIndex: \"asset-index\",\n            closeRewards: \"close-rewards\",\n            closingAmount: \"closing-amount\",\n            confirmedRound: \"confirmed-round\",\n            globalStateDelta: \"global-state-delta\",\n            innerTxns: \"inner-txns\",\n            localStateDelta: \"local-state-delta\",\n            logs: \"logs\",\n            receiverRewards: \"receiver-rewards\",\n            senderRewards: \"sender-rewards\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"pool-error\"] === \"undefined\") throw new Error(`Response is missing required field 'pool-error': ${data}`);\n        if (typeof data[\"txn\"] === \"undefined\") throw new Error(`Response is missing required field 'txn': ${data}`);\n        return new PendingTransactionResponse({\n            poolError: data[\"pool-error\"],\n            txn: data[\"txn\"],\n            applicationIndex: data[\"application-index\"],\n            assetClosingAmount: data[\"asset-closing-amount\"],\n            assetIndex: data[\"asset-index\"],\n            closeRewards: data[\"close-rewards\"],\n            closingAmount: data[\"closing-amount\"],\n            confirmedRound: data[\"confirmed-round\"],\n            globalStateDelta: typeof data[\"global-state-delta\"] !== \"undefined\" ? data[\"global-state-delta\"].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n            innerTxns: typeof data[\"inner-txns\"] !== \"undefined\" ? data[\"inner-txns\"].map(PendingTransactionResponse.from_obj_for_encoding) : undefined,\n            localStateDelta: typeof data[\"local-state-delta\"] !== \"undefined\" ? data[\"local-state-delta\"].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n            logs: data[\"logs\"],\n            receiverRewards: data[\"receiver-rewards\"],\n            senderRewards: data[\"sender-rewards\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */ class PendingTransactionsResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `PendingTransactionsResponse` object.\n     * @param topTransactions - An array of signed transaction objects.\n     * @param totalTransactions - Total number of transactions in the pool.\n     */ constructor(topTransactions, totalTransactions){\n        super();\n        this.topTransactions = topTransactions;\n        this.totalTransactions = totalTransactions;\n        this.attribute_map = {\n            topTransactions: \"top-transactions\",\n            totalTransactions: \"total-transactions\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"top-transactions\"])) throw new Error(`Response is missing required array field 'top-transactions': ${data}`);\n        if (typeof data[\"total-transactions\"] === \"undefined\") throw new Error(`Response is missing required field 'total-transactions': ${data}`);\n        return new PendingTransactionsResponse(data[\"top-transactions\"], data[\"total-transactions\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Transaction ID of the submission.\n */ class PostTransactionsResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `PostTransactionsResponse` object.\n     * @param txid - encoding of the transaction hash.\n     */ constructor(txid){\n        super();\n        this.txid = txid;\n        this.attribute_map = {\n            txid: \"txId\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"txId\"] === \"undefined\") throw new Error(`Response is missing required field 'txId': ${data}`);\n        return new PostTransactionsResponse(data[\"txId\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents a state proof and its corresponding message\n */ class StateProof extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProof` object.\n     * @param message - Represents the message that the state proofs are attesting to.\n     * @param stateproof - The encoded StateProof for the message.\n     */ constructor(message, stateproof){\n        super();\n        this.message = message;\n        this.stateproof = typeof stateproof === \"string\" ? new Uint8Array(Buffer.from(stateproof, \"base64\")) : stateproof;\n        this.attribute_map = {\n            message: \"Message\",\n            stateproof: \"StateProof\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"Message\"] === \"undefined\") throw new Error(`Response is missing required field 'Message': ${data}`);\n        if (typeof data[\"StateProof\"] === \"undefined\") throw new Error(`Response is missing required field 'StateProof': ${data}`);\n        return new StateProof(StateProofMessage.from_obj_for_encoding(data[\"Message\"]), data[\"StateProof\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents the message that the state proofs are attesting to.\n */ class StateProofMessage extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProofMessage` object.\n     * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n     * interval.\n     * @param firstattestedround - The first round the message attests to.\n     * @param lastattestedround - The last round the message attests to.\n     * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n     * of precision. This value would be used to verify the next state proof.\n     * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n     */ constructor({ blockheaderscommitment, firstattestedround, lastattestedround, lnprovenweight, voterscommitment }){\n        super();\n        this.blockheaderscommitment = typeof blockheaderscommitment === \"string\" ? new Uint8Array(Buffer.from(blockheaderscommitment, \"base64\")) : blockheaderscommitment;\n        this.firstattestedround = firstattestedround;\n        this.lastattestedround = lastattestedround;\n        this.lnprovenweight = lnprovenweight;\n        this.voterscommitment = typeof voterscommitment === \"string\" ? new Uint8Array(Buffer.from(voterscommitment, \"base64\")) : voterscommitment;\n        this.attribute_map = {\n            blockheaderscommitment: \"BlockHeadersCommitment\",\n            firstattestedround: \"FirstAttestedRound\",\n            lastattestedround: \"LastAttestedRound\",\n            lnprovenweight: \"LnProvenWeight\",\n            voterscommitment: \"VotersCommitment\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"BlockHeadersCommitment\"] === \"undefined\") throw new Error(`Response is missing required field 'BlockHeadersCommitment': ${data}`);\n        if (typeof data[\"FirstAttestedRound\"] === \"undefined\") throw new Error(`Response is missing required field 'FirstAttestedRound': ${data}`);\n        if (typeof data[\"LastAttestedRound\"] === \"undefined\") throw new Error(`Response is missing required field 'LastAttestedRound': ${data}`);\n        if (typeof data[\"LnProvenWeight\"] === \"undefined\") throw new Error(`Response is missing required field 'LnProvenWeight': ${data}`);\n        if (typeof data[\"VotersCommitment\"] === \"undefined\") throw new Error(`Response is missing required field 'VotersCommitment': ${data}`);\n        return new StateProofMessage({\n            blockheaderscommitment: data[\"BlockHeadersCommitment\"],\n            firstattestedround: data[\"FirstAttestedRound\"],\n            lastattestedround: data[\"LastAttestedRound\"],\n            lnprovenweight: data[\"LnProvenWeight\"],\n            voterscommitment: data[\"VotersCommitment\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */ class SupplyResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `SupplyResponse` object.\n     * @param currentRound - Round\n     * @param onlineMoney - OnlineMoney\n     * @param totalMoney - TotalMoney\n     */ constructor(currentRound, onlineMoney, totalMoney){\n        super();\n        this.currentRound = currentRound;\n        this.onlineMoney = onlineMoney;\n        this.totalMoney = totalMoney;\n        this.attribute_map = {\n            currentRound: \"current_round\",\n            onlineMoney: \"online-money\",\n            totalMoney: \"total-money\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"current_round\"] === \"undefined\") throw new Error(`Response is missing required field 'current_round': ${data}`);\n        if (typeof data[\"online-money\"] === \"undefined\") throw new Error(`Response is missing required field 'online-money': ${data}`);\n        if (typeof data[\"total-money\"] === \"undefined\") throw new Error(`Response is missing required field 'total-money': ${data}`);\n        return new SupplyResponse(data[\"current_round\"], data[\"online-money\"], data[\"total-money\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents a key-value pair in an application store.\n */ class TealKeyValue extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TealKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value.\n     */ constructor(key, value){\n        super();\n        this.key = key;\n        this.value = value;\n        this.attribute_map = {\n            key: \"key\",\n            value: \"value\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"key\"] === \"undefined\") throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data[\"value\"] === \"undefined\") throw new Error(`Response is missing required field 'value': ${data}`);\n        return new TealKeyValue(data[\"key\"], TealValue.from_obj_for_encoding(data[\"value\"]));\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents a TEAL value.\n */ class TealValue extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TealValue` object.\n     * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n     * @param bytes - (tb) bytes value.\n     * @param uint - (ui) uint value.\n     */ constructor(type, bytes, uint){\n        super();\n        this.type = type;\n        this.bytes = bytes;\n        this.uint = uint;\n        this.attribute_map = {\n            type: \"type\",\n            bytes: \"bytes\",\n            uint: \"uint\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"type\"] === \"undefined\") throw new Error(`Response is missing required field 'type': ${data}`);\n        if (typeof data[\"bytes\"] === \"undefined\") throw new Error(`Response is missing required field 'bytes': ${data}`);\n        if (typeof data[\"uint\"] === \"undefined\") throw new Error(`Response is missing required field 'uint': ${data}`);\n        return new TealValue(data[\"type\"], data[\"bytes\"], data[\"uint\"]);\n    /* eslint-enable dot-notation */ }\n}\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */ class TransactionParametersResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionParametersResponse` object.\n     * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n     * as of LastRound.\n     * @param fee - Fee is the suggested transaction fee\n     * Fee is in units of micro-Algos per byte.\n     * Fee may fall to zero but transactions must still have a fee of\n     * at least MinTxnFee for the current network protocol.\n     * @param genesisHash - GenesisHash is the hash of the genesis block.\n     * @param genesisId - GenesisID is an ID listed in the genesis block.\n     * @param lastRound - LastRound indicates the last round seen\n     * @param minFee - The minimum transaction fee (not per byte) required for the\n     * txn to validate for the current network protocol.\n     */ constructor({ consensusVersion, fee, genesisHash, genesisId, lastRound, minFee }){\n        super();\n        this.consensusVersion = consensusVersion;\n        this.fee = fee;\n        this.genesisHash = typeof genesisHash === \"string\" ? new Uint8Array(Buffer.from(genesisHash, \"base64\")) : genesisHash;\n        this.genesisId = genesisId;\n        this.lastRound = lastRound;\n        this.minFee = minFee;\n        this.attribute_map = {\n            consensusVersion: \"consensus-version\",\n            fee: \"fee\",\n            genesisHash: \"genesis-hash\",\n            genesisId: \"genesis-id\",\n            lastRound: \"last-round\",\n            minFee: \"min-fee\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"consensus-version\"] === \"undefined\") throw new Error(`Response is missing required field 'consensus-version': ${data}`);\n        if (typeof data[\"fee\"] === \"undefined\") throw new Error(`Response is missing required field 'fee': ${data}`);\n        if (typeof data[\"genesis-hash\"] === \"undefined\") throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n        if (typeof data[\"genesis-id\"] === \"undefined\") throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n        if (typeof data[\"last-round\"] === \"undefined\") throw new Error(`Response is missing required field 'last-round': ${data}`);\n        if (typeof data[\"min-fee\"] === \"undefined\") throw new Error(`Response is missing required field 'min-fee': ${data}`);\n        return new TransactionParametersResponse({\n            consensusVersion: data[\"consensus-version\"],\n            fee: data[\"fee\"],\n            genesisHash: data[\"genesis-hash\"],\n            genesisId: data[\"genesis-id\"],\n            lastRound: data[\"last-round\"],\n            minFee: data[\"min-fee\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Proof of transaction in a block.\n */ class TransactionProofResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionProofResponse` object.\n     * @param idx - Index of the transaction in the block's payset.\n     * @param proof - Proof of transaction membership.\n     * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n     * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n     * from a leaf to the root.\n     * @param hashtype - The type of hash function used to create the proof, must be one of:\n     * * sha512_256\n     * * sha256\n     */ constructor({ idx, proof, stibhash, treedepth, hashtype }){\n        super();\n        this.idx = idx;\n        this.proof = typeof proof === \"string\" ? new Uint8Array(Buffer.from(proof, \"base64\")) : proof;\n        this.stibhash = typeof stibhash === \"string\" ? new Uint8Array(Buffer.from(stibhash, \"base64\")) : stibhash;\n        this.treedepth = treedepth;\n        this.hashtype = hashtype;\n        this.attribute_map = {\n            idx: \"idx\",\n            proof: \"proof\",\n            stibhash: \"stibhash\",\n            treedepth: \"treedepth\",\n            hashtype: \"hashtype\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"idx\"] === \"undefined\") throw new Error(`Response is missing required field 'idx': ${data}`);\n        if (typeof data[\"proof\"] === \"undefined\") throw new Error(`Response is missing required field 'proof': ${data}`);\n        if (typeof data[\"stibhash\"] === \"undefined\") throw new Error(`Response is missing required field 'stibhash': ${data}`);\n        if (typeof data[\"treedepth\"] === \"undefined\") throw new Error(`Response is missing required field 'treedepth': ${data}`);\n        return new TransactionProofResponse({\n            idx: data[\"idx\"],\n            proof: data[\"proof\"],\n            stibhash: data[\"stibhash\"],\n            treedepth: data[\"treedepth\"],\n            hashtype: data[\"hashtype\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * algod version information.\n */ class Version extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Version` object.\n     * @param build -\n     * @param genesisHashB64 -\n     * @param genesisId -\n     * @param versions -\n     */ constructor(build, genesisHashB64, genesisId, versions){\n        super();\n        this.build = build;\n        this.genesisHashB64 = typeof genesisHashB64 === \"string\" ? new Uint8Array(Buffer.from(genesisHashB64, \"base64\")) : genesisHashB64;\n        this.genesisId = genesisId;\n        this.versions = versions;\n        this.attribute_map = {\n            build: \"build\",\n            genesisHashB64: \"genesis_hash_b64\",\n            genesisId: \"genesis_id\",\n            versions: \"versions\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"build\"] === \"undefined\") throw new Error(`Response is missing required field 'build': ${data}`);\n        if (typeof data[\"genesis_hash_b64\"] === \"undefined\") throw new Error(`Response is missing required field 'genesis_hash_b64': ${data}`);\n        if (typeof data[\"genesis_id\"] === \"undefined\") throw new Error(`Response is missing required field 'genesis_id': ${data}`);\n        if (!Array.isArray(data[\"versions\"])) throw new Error(`Response is missing required array field 'versions': ${data}`);\n        return new Version(BuildVersion.from_obj_for_encoding(data[\"build\"]), data[\"genesis_hash_b64\"], data[\"genesis_id\"], data[\"versions\"]);\n    /* eslint-enable dot-notation */ }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionInformation.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionInformation.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PendingTransactionInformation)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n\n/**\n * returns the transaction information for a specific txid of a pending transaction\n */ class PendingTransactionInformation extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, txid){\n        super(c);\n        this.txid = txid;\n        this.txid = txid;\n        this.query.format = \"msgpack\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        if (body && body.byteLength > 0) {\n            return _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__.decode(body);\n        }\n        return undefined;\n    }\n    path() {\n        return `/v2/transactions/pending/${this.txid}`;\n    }\n    // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n} //# sourceMappingURL=pendingTransactionInformation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3BlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5QztBQUNjO0FBQ3ZEOztDQUVDLEdBQ2MsTUFBTUUsc0NBQXNDRixvREFBV0E7SUFDbEVHLFlBQVlDLENBQUMsRUFBRUMsSUFBSSxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNBLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLEtBQUssQ0FBQ0MsTUFBTSxHQUFHO0lBQ3hCO0lBQ0Esa0RBQWtEO0lBQ2xEQyxRQUFRQyxJQUFJLEVBQUU7UUFDVixJQUFJQSxRQUFRQSxLQUFLQyxVQUFVLEdBQUcsR0FBRztZQUM3QixPQUFPVCxzREFBZSxDQUFDUTtRQUMzQjtRQUNBLE9BQU9HO0lBQ1g7SUFDQUMsT0FBTztRQUNILE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUNSLElBQUksQ0FBQyxDQUFDO0lBQ2xEO0lBQ0EsK0NBQStDO0lBQy9DUyxJQUFJQSxHQUFHLEVBQUU7UUFDTCxJQUFJLENBQUNSLEtBQUssQ0FBQ1EsR0FBRyxHQUFHQTtRQUNqQixPQUFPLElBQUk7SUFDZjtBQUNKLEVBQ0EseURBQXlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9uSW5mb3JtYXRpb24uanM/MGY2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcnO1xuLyoqXG4gKiByZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBpbmZvcm1hdGlvbiBmb3IgYSBzcGVjaWZpYyB0eGlkIG9mIGEgcGVuZGluZyB0cmFuc2FjdGlvblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbiBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCB0eGlkKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnR4aWQgPSB0eGlkO1xuICAgICAgICB0aGlzLnR4aWQgPSB0eGlkO1xuICAgICAgICB0aGlzLnF1ZXJ5LmZvcm1hdCA9ICdtc2dwYWNrJztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgaWYgKGJvZHkgJiYgYm9keS5ieXRlTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kaW5nLmRlY29kZShib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi90cmFuc2FjdGlvbnMvcGVuZGluZy8ke3RoaXMudHhpZH1gO1xuICAgIH1cbiAgICAvLyBtYXggc2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgdHhzIHRvIHJldHVyblxuICAgIG1heChtYXgpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5tYXggPSBtYXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImVuY29kaW5nIiwiUGVuZGluZ1RyYW5zYWN0aW9uSW5mb3JtYXRpb24iLCJjb25zdHJ1Y3RvciIsImMiLCJ0eGlkIiwicXVlcnkiLCJmb3JtYXQiLCJwcmVwYXJlIiwiYm9keSIsImJ5dGVMZW5ndGgiLCJkZWNvZGUiLCJ1bmRlZmluZWQiLCJwYXRoIiwibWF4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactions.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactions.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PendingTransactions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n\n/**\n * pendingTransactionsInformation returns transactions that are pending in the pool\n */ class PendingTransactions extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c){\n        super(c);\n        this.query.format = \"msgpack\";\n    }\n    /* eslint-disable class-methods-use-this */ path() {\n        return \"/v2/transactions/pending\";\n    }\n    prepare(body) {\n        if (body && body.byteLength > 0) {\n            return _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__.decode(body);\n        }\n        return undefined;\n    }\n    /* eslint-enable class-methods-use-this */ // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n} //# sourceMappingURL=pendingTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3BlbmRpbmdUcmFuc2FjdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ2M7QUFDdkQ7O0NBRUMsR0FDYyxNQUFNRSw0QkFBNEJGLG9EQUFXQTtJQUN4REcsWUFBWUMsQ0FBQyxDQUFFO1FBQ1gsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxNQUFNLEdBQUc7SUFDeEI7SUFDQSx5Q0FBeUMsR0FDekNDLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQUMsUUFBUUMsSUFBSSxFQUFFO1FBQ1YsSUFBSUEsUUFBUUEsS0FBS0MsVUFBVSxHQUFHLEdBQUc7WUFDN0IsT0FBT1Qsc0RBQWUsQ0FBQ1E7UUFDM0I7UUFDQSxPQUFPRztJQUNYO0lBQ0Esd0NBQXdDLEdBQ3hDLCtDQUErQztJQUMvQ0MsSUFBSUEsR0FBRyxFQUFFO1FBQ0wsSUFBSSxDQUFDUixLQUFLLENBQUNRLEdBQUcsR0FBR0E7UUFDakIsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3BlbmRpbmdUcmFuc2FjdGlvbnMuanM/OGUxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcnO1xuLyoqXG4gKiBwZW5kaW5nVHJhbnNhY3Rpb25zSW5mb3JtYXRpb24gcmV0dXJucyB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgcGVuZGluZyBpbiB0aGUgcG9vbFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZW5kaW5nVHJhbnNhY3Rpb25zIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMucXVlcnkuZm9ybWF0ID0gJ21zZ3BhY2snO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuICcvdjIvdHJhbnNhY3Rpb25zL3BlbmRpbmcnO1xuICAgIH1cbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgaWYgKGJvZHkgJiYgYm9keS5ieXRlTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kaW5nLmRlY29kZShib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbiAgICAvLyBtYXggc2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgdHhzIHRvIHJldHVyblxuICAgIG1heChtYXgpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5tYXggPSBtYXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlbmRpbmdUcmFuc2FjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZW5jb2RpbmciLCJQZW5kaW5nVHJhbnNhY3Rpb25zIiwiY29uc3RydWN0b3IiLCJjIiwicXVlcnkiLCJmb3JtYXQiLCJwYXRoIiwicHJlcGFyZSIsImJvZHkiLCJieXRlTGVuZ3RoIiwiZGVjb2RlIiwidW5kZWZpbmVkIiwibWF4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionsByAddress.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionsByAddress.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PendingTransactionsByAddress)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n\n/**\n * returns all transactions for a PK [addr] in the [first, last] rounds range.\n */ class PendingTransactionsByAddress extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, address){\n        super(c);\n        this.address = address;\n        this.address = address;\n        this.query.format = \"msgpack\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        if (body && body.byteLength > 0) {\n            return _encoding_encoding__WEBPACK_IMPORTED_MODULE_1__.decode(body);\n        }\n        return undefined;\n    }\n    path() {\n        return `/v2/accounts/${this.address}/transactions/pending`;\n    }\n    // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n} //# sourceMappingURL=pendingTransactionsByAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3BlbmRpbmdUcmFuc2FjdGlvbnNCeUFkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ2M7QUFDdkQ7O0NBRUMsR0FDYyxNQUFNRSxxQ0FBcUNGLG9EQUFXQTtJQUNqRUcsWUFBWUMsQ0FBQyxFQUFFQyxPQUFPLENBQUU7UUFDcEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxNQUFNLEdBQUc7SUFDeEI7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLElBQUksRUFBRTtRQUNWLElBQUlBLFFBQVFBLEtBQUtDLFVBQVUsR0FBRyxHQUFHO1lBQzdCLE9BQU9ULHNEQUFlLENBQUNRO1FBQzNCO1FBQ0EsT0FBT0c7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUNSLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztJQUM5RDtJQUNBLCtDQUErQztJQUMvQ1MsSUFBSUEsR0FBRyxFQUFFO1FBQ0wsSUFBSSxDQUFDUixLQUFLLENBQUNRLEdBQUcsR0FBR0E7UUFDakIsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLHdEQUF3RCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3BlbmRpbmdUcmFuc2FjdGlvbnNCeUFkZHJlc3MuanM/Nzk5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcnO1xuLyoqXG4gKiByZXR1cm5zIGFsbCB0cmFuc2FjdGlvbnMgZm9yIGEgUEsgW2FkZHJdIGluIHRoZSBbZmlyc3QsIGxhc3RdIHJvdW5kcyByYW5nZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVuZGluZ1RyYW5zYWN0aW9uc0J5QWRkcmVzcyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBhZGRyZXNzKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLnF1ZXJ5LmZvcm1hdCA9ICdtc2dwYWNrJztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgaWYgKGJvZHkgJiYgYm9keS5ieXRlTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kaW5nLmRlY29kZShib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWRkcmVzc30vdHJhbnNhY3Rpb25zL3BlbmRpbmdgO1xuICAgIH1cbiAgICAvLyBtYXggc2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgdHhzIHRvIHJldHVyblxuICAgIG1heChtYXgpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5tYXggPSBtYXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlbmRpbmdUcmFuc2FjdGlvbnNCeUFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZW5jb2RpbmciLCJQZW5kaW5nVHJhbnNhY3Rpb25zQnlBZGRyZXNzIiwiY29uc3RydWN0b3IiLCJjIiwiYWRkcmVzcyIsInF1ZXJ5IiwiZm9ybWF0IiwicHJlcGFyZSIsImJvZHkiLCJieXRlTGVuZ3RoIiwiZGVjb2RlIiwidW5kZWZpbmVkIiwicGF0aCIsIm1heCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionsByAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SendRawTransaction),\n/* harmony export */   setSendTransactionHeaders: () => (/* binding */ setSendTransactionHeaders)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n/**\n * Sets the default header (if not previously set) for sending a raw\n * transaction.\n * @param headers - A headers object\n */ function setSendTransactionHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key)=>key.toLowerCase() !== \"content-type\")) {\n        hdrs = {\n            ...headers\n        };\n        hdrs[\"Content-Type\"] = \"application/x-binary\";\n    }\n    return hdrs;\n}\nfunction isByteArray(array) {\n    return array && array.byteLength !== undefined;\n}\n/**\n * broadcasts the passed signed txns to the network\n */ class SendRawTransaction extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, stxOrStxs){\n        super(c);\n        let forPosting = stxOrStxs;\n        if (Array.isArray(stxOrStxs)) {\n            if (!stxOrStxs.every(isByteArray)) {\n                throw new TypeError(\"Array elements must be byte arrays\");\n            }\n            // Flatten into a single Uint8Array\n            forPosting = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.concatArrays)(...stxOrStxs);\n        } else if (!isByteArray(forPosting)) {\n            throw new TypeError(\"Argument must be byte array\");\n        }\n        this.txnBytesToPost = forPosting;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/transactions\";\n    }\n    async do(headers = {}) {\n        const txHeaders = setSendTransactionHeaders(headers);\n        const res = await this.c.post(this.path(), Buffer.from(this.txnBytesToPost), txHeaders);\n        return res.body;\n    }\n} //# sourceMappingURL=sendRawTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3NlbmRSYXdUcmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBQ1c7QUFDcEQ7Ozs7Q0FJQyxHQUNNLFNBQVNFLDBCQUEwQkMsVUFBVSxDQUFDLENBQUM7SUFDbEQsSUFBSUMsT0FBT0Q7SUFDWCxJQUFJRSxPQUFPQyxJQUFJLENBQUNGLE1BQU1HLEtBQUssQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxXQUFXLE9BQU8saUJBQWlCO1FBQ3hFTCxPQUFPO1lBQUUsR0FBR0QsT0FBTztRQUFDO1FBQ3BCQyxJQUFJLENBQUMsZUFBZSxHQUFHO0lBQzNCO0lBQ0EsT0FBT0E7QUFDWDtBQUNBLFNBQVNNLFlBQVlDLEtBQUs7SUFDdEIsT0FBT0EsU0FBU0EsTUFBTUMsVUFBVSxLQUFLQztBQUN6QztBQUNBOztDQUVDLEdBQ2MsTUFBTUMsMkJBQTJCZCxvREFBV0E7SUFDdkRlLFlBQVlDLENBQUMsRUFBRUMsU0FBUyxDQUFFO1FBQ3RCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJRSxhQUFhRDtRQUNqQixJQUFJRSxNQUFNQyxPQUFPLENBQUNILFlBQVk7WUFDMUIsSUFBSSxDQUFDQSxVQUFVVixLQUFLLENBQUNHLGNBQWM7Z0JBQy9CLE1BQU0sSUFBSVcsVUFBVTtZQUN4QjtZQUNBLG1DQUFtQztZQUNuQ0gsYUFBYWpCLDBEQUFZQSxJQUFJZ0I7UUFDakMsT0FDSyxJQUFJLENBQUNQLFlBQVlRLGFBQWE7WUFDL0IsTUFBTSxJQUFJRyxVQUFVO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDQyxjQUFjLEdBQUdKO0lBQzFCO0lBQ0Esa0RBQWtEO0lBQ2xESyxPQUFPO1FBQ0gsT0FBTztJQUNYO0lBQ0EsTUFBTUMsR0FBR3JCLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDbkIsTUFBTXNCLFlBQVl2QiwwQkFBMEJDO1FBQzVDLE1BQU11QixNQUFNLE1BQU0sSUFBSSxDQUFDVixDQUFDLENBQUNXLElBQUksQ0FBQyxJQUFJLENBQUNKLElBQUksSUFBSUssT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ1AsY0FBYyxHQUFHRztRQUM3RSxPQUFPQyxJQUFJSSxJQUFJO0lBQ25CO0FBQ0osRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9zZW5kUmF3VHJhbnNhY3Rpb24uanM/YWQ1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuaW1wb3J0IHsgY29uY2F0QXJyYXlzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuLyoqXG4gKiBTZXRzIHRoZSBkZWZhdWx0IGhlYWRlciAoaWYgbm90IHByZXZpb3VzbHkgc2V0KSBmb3Igc2VuZGluZyBhIHJhd1xuICogdHJhbnNhY3Rpb24uXG4gKiBAcGFyYW0gaGVhZGVycyAtIEEgaGVhZGVycyBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFNlbmRUcmFuc2FjdGlvbkhlYWRlcnMoaGVhZGVycyA9IHt9KSB7XG4gICAgbGV0IGhkcnMgPSBoZWFkZXJzO1xuICAgIGlmIChPYmplY3Qua2V5cyhoZHJzKS5ldmVyeSgoa2V5KSA9PiBrZXkudG9Mb3dlckNhc2UoKSAhPT0gJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGhkcnMgPSB7IC4uLmhlYWRlcnMgfTtcbiAgICAgICAgaGRyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24veC1iaW5hcnknO1xuICAgIH1cbiAgICByZXR1cm4gaGRycztcbn1cbmZ1bmN0aW9uIGlzQnl0ZUFycmF5KGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5ICYmIGFycmF5LmJ5dGVMZW5ndGggIT09IHVuZGVmaW5lZDtcbn1cbi8qKlxuICogYnJvYWRjYXN0cyB0aGUgcGFzc2VkIHNpZ25lZCB0eG5zIHRvIHRoZSBuZXR3b3JrXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbmRSYXdUcmFuc2FjdGlvbiBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBzdHhPclN0eHMpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIGxldCBmb3JQb3N0aW5nID0gc3R4T3JTdHhzO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHhPclN0eHMpKSB7XG4gICAgICAgICAgICBpZiAoIXN0eE9yU3R4cy5ldmVyeShpc0J5dGVBcnJheSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheSBlbGVtZW50cyBtdXN0IGJlIGJ5dGUgYXJyYXlzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGbGF0dGVuIGludG8gYSBzaW5nbGUgVWludDhBcnJheVxuICAgICAgICAgICAgZm9yUG9zdGluZyA9IGNvbmNhdEFycmF5cyguLi5zdHhPclN0eHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpc0J5dGVBcnJheShmb3JQb3N0aW5nKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBieXRlIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50eG5CeXRlc1RvUG9zdCA9IGZvclBvc3Rpbmc7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuICcvdjIvdHJhbnNhY3Rpb25zJztcbiAgICB9XG4gICAgYXN5bmMgZG8oaGVhZGVycyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHR4SGVhZGVycyA9IHNldFNlbmRUcmFuc2FjdGlvbkhlYWRlcnMoaGVhZGVycyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYy5wb3N0KHRoaXMucGF0aCgpLCBCdWZmZXIuZnJvbSh0aGlzLnR4bkJ5dGVzVG9Qb3N0KSwgdHhIZWFkZXJzKTtcbiAgICAgICAgcmV0dXJuIHJlcy5ib2R5O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbmRSYXdUcmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJjb25jYXRBcnJheXMiLCJzZXRTZW5kVHJhbnNhY3Rpb25IZWFkZXJzIiwiaGVhZGVycyIsImhkcnMiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsImlzQnl0ZUFycmF5IiwiYXJyYXkiLCJieXRlTGVuZ3RoIiwidW5kZWZpbmVkIiwiU2VuZFJhd1RyYW5zYWN0aW9uIiwiY29uc3RydWN0b3IiLCJjIiwic3R4T3JTdHhzIiwiZm9yUG9zdGluZyIsIkFycmF5IiwiaXNBcnJheSIsIlR5cGVFcnJvciIsInR4bkJ5dGVzVG9Qb3N0IiwicGF0aCIsImRvIiwidHhIZWFkZXJzIiwicmVzIiwicG9zdCIsIkJ1ZmZlciIsImZyb20iLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/stateproof.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/stateproof.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StateProof)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass StateProof extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, round){\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n    }\n    path() {\n        return `/v2/stateproofs/${this.round}`;\n    }\n} //# sourceMappingURL=stateproof.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N0YXRlcHJvb2YuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDMUIsTUFBTUMsbUJBQW1CRCxvREFBV0E7SUFDL0NFLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxLQUFLLENBQUU7UUFDL0IsS0FBSyxDQUFDRixHQUFHQztRQUNULElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtJQUNqQjtJQUNBQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQUM7SUFDMUM7QUFDSixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N0YXRlcHJvb2YuanM/N2IxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGVQcm9vZiBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgcm91bmQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZDtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvc3RhdGVwcm9vZnMvJHt0aGlzLnJvdW5kfWA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGVwcm9vZi5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJTdGF0ZVByb29mIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJyb3VuZCIsInBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/stateproof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/status.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/status.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Status)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass Status extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/status\";\n    }\n} //# sourceMappingURL=status.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N0YXR1cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQyxlQUFlRCxvREFBV0E7SUFDM0Msa0RBQWtEO0lBQ2xERSxPQUFPO1FBQ0gsT0FBTztJQUNYO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9zdGF0dXMuanM/ODhiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdHVzIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuICcvdjIvc3RhdHVzJztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiU3RhdHVzIiwicGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/status.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/statusAfterBlock.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/statusAfterBlock.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StatusAfterBlock)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass StatusAfterBlock extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, intDecoding, round){\n        super(c, intDecoding);\n        this.round = round;\n        if (!Number.isInteger(round)) throw Error(\"round should be an integer\");\n        this.round = round;\n    }\n    path() {\n        return `/v2/status/wait-for-block-after/${this.round}`;\n    }\n} //# sourceMappingURL=statusAfterBlock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N0YXR1c0FmdGVyQmxvY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDMUIsTUFBTUMseUJBQXlCRCxvREFBV0E7SUFDckRFLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxLQUFLLENBQUU7UUFDL0IsS0FBSyxDQUFDRixHQUFHQztRQUNULElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsT0FBT0MsU0FBUyxDQUFDRixRQUNsQixNQUFNRyxNQUFNO1FBQ2hCLElBQUksQ0FBQ0gsS0FBSyxHQUFHQTtJQUNqQjtJQUNBSSxPQUFPO1FBQ0gsT0FBTyxDQUFDLGdDQUFnQyxFQUFFLElBQUksQ0FBQ0osS0FBSyxDQUFDLENBQUM7SUFDMUQ7QUFDSixFQUNBLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N0YXR1c0FmdGVyQmxvY2suanM/ZDA3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdHVzQWZ0ZXJCbG9jayBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgcm91bmQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLnJvdW5kID0gcm91bmQ7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihyb3VuZCkpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcigncm91bmQgc2hvdWxkIGJlIGFuIGludGVnZXInKTtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9zdGF0dXMvd2FpdC1mb3ItYmxvY2stYWZ0ZXIvJHt0aGlzLnJvdW5kfWA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHVzQWZ0ZXJCbG9jay5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJTdGF0dXNBZnRlckJsb2NrIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJyb3VuZCIsIk51bWJlciIsImlzSW50ZWdlciIsIkVycm9yIiwicGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/statusAfterBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/suggestedParams.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/suggestedParams.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SuggestedParamsRequest)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * Returns the common needed parameters for a new transaction, in a format the transaction builder expects\n */ class SuggestedParamsRequest extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /* eslint-disable class-methods-use-this */ path() {\n        return \"/v2/transactions/params\";\n    }\n    prepare(body) {\n        return {\n            flatFee: false,\n            fee: body.fee,\n            firstRound: body[\"last-round\"],\n            lastRound: body[\"last-round\"] + 1000,\n            genesisID: body[\"genesis-id\"],\n            genesisHash: body[\"genesis-hash\"]\n        };\n    }\n} //# sourceMappingURL=suggestedParams.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N1Z2dlc3RlZFBhcmFtcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUN6Qzs7Q0FFQyxHQUNjLE1BQU1DLCtCQUErQkQsb0RBQVdBO0lBQzNELHlDQUF5QyxHQUN6Q0UsT0FBTztRQUNILE9BQU87SUFDWDtJQUNBQyxRQUFRQyxJQUFJLEVBQUU7UUFDVixPQUFPO1lBQ0hDLFNBQVM7WUFDVEMsS0FBS0YsS0FBS0UsR0FBRztZQUNiQyxZQUFZSCxJQUFJLENBQUMsYUFBYTtZQUM5QkksV0FBV0osSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNoQ0ssV0FBV0wsSUFBSSxDQUFDLGFBQWE7WUFDN0JNLGFBQWFOLElBQUksQ0FBQyxlQUFlO1FBQ3JDO0lBQ0o7QUFDSixFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N1Z2dlc3RlZFBhcmFtcy5qcz84OWI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdCc7XG4vKipcbiAqIFJldHVybnMgdGhlIGNvbW1vbiBuZWVkZWQgcGFyYW1ldGVycyBmb3IgYSBuZXcgdHJhbnNhY3Rpb24sIGluIGEgZm9ybWF0IHRoZSB0cmFuc2FjdGlvbiBidWlsZGVyIGV4cGVjdHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VnZ2VzdGVkUGFyYW1zUmVxdWVzdCBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuICcvdjIvdHJhbnNhY3Rpb25zL3BhcmFtcyc7XG4gICAgfVxuICAgIHByZXBhcmUoYm9keSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmxhdEZlZTogZmFsc2UsXG4gICAgICAgICAgICBmZWU6IGJvZHkuZmVlLFxuICAgICAgICAgICAgZmlyc3RSb3VuZDogYm9keVsnbGFzdC1yb3VuZCddLFxuICAgICAgICAgICAgbGFzdFJvdW5kOiBib2R5WydsYXN0LXJvdW5kJ10gKyAxMDAwLFxuICAgICAgICAgICAgZ2VuZXNpc0lEOiBib2R5WydnZW5lc2lzLWlkJ10sXG4gICAgICAgICAgICBnZW5lc2lzSGFzaDogYm9keVsnZ2VuZXNpcy1oYXNoJ10sXG4gICAgICAgIH07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3VnZ2VzdGVkUGFyYW1zLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIlN1Z2dlc3RlZFBhcmFtc1JlcXVlc3QiLCJwYXRoIiwicHJlcGFyZSIsImJvZHkiLCJmbGF0RmVlIiwiZmVlIiwiZmlyc3RSb3VuZCIsImxhc3RSb3VuZCIsImdlbmVzaXNJRCIsImdlbmVzaXNIYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/suggestedParams.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/supply.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/supply.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Supply)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass Supply extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/ledger/supply\";\n    }\n} //# sourceMappingURL=supply.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N1cHBseS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQyxlQUFlRCxvREFBV0E7SUFDM0Msa0RBQWtEO0lBQ2xERSxPQUFPO1FBQ0gsT0FBTztJQUNYO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9zdXBwbHkuanM/MjIxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VwcGx5IGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuICcvdjIvbGVkZ2VyL3N1cHBseSc7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3VwcGx5LmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIlN1cHBseSIsInBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/supply.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/versions.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/versions.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Versions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * retrieves the VersionResponse from the running node\n */ class Versions extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/versions\";\n    }\n} //# sourceMappingURL=versions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3ZlcnNpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDOztDQUVDLEdBQ2MsTUFBTUMsaUJBQWlCRCxvREFBV0E7SUFDN0Msa0RBQWtEO0lBQ2xERSxPQUFPO1FBQ0gsT0FBTztJQUNYO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC92ZXJzaW9ucy5qcz9lZDAxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdCc7XG4vKipcbiAqIHJldHJpZXZlcyB0aGUgVmVyc2lvblJlc3BvbnNlIGZyb20gdGhlIHJ1bm5pbmcgbm9kZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJzaW9ucyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3ZlcnNpb25zJztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJWZXJzaW9ucyIsInBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/versions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/basemodel.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/basemodel.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BaseModel)\n/* harmony export */ });\n/**\n * Base class for models\n */ /* eslint-disable no-underscore-dangle,camelcase */ function _is_primitive(val) {\n    /* eslint-enable no-underscore-dangle,camelcase */ return val === undefined || val == null || typeof val !== \"object\" && typeof val !== \"function\";\n}\nfunction _get_obj_for_encoding(val, binary) {\n    /* eslint-enable no-underscore-dangle,camelcase,no-redeclare,no-unused-vars */ let targetPropValue;\n    if (val instanceof Uint8Array) {\n        targetPropValue = binary ? val : Buffer.from(val).toString(\"base64\");\n    } else if (typeof val.get_obj_for_encoding === \"function\") {\n        targetPropValue = val.get_obj_for_encoding(binary);\n    } else if (Array.isArray(val)) {\n        targetPropValue = [];\n        for (const elem of val){\n            targetPropValue.push(_get_obj_for_encoding(elem, binary));\n        }\n    } else if (typeof val === \"object\") {\n        const obj = {};\n        for (const prop of Object.keys(val)){\n            obj[prop] = _get_obj_for_encoding(val[prop], binary);\n        }\n        targetPropValue = obj;\n    } else if (_is_primitive(val)) {\n        targetPropValue = val;\n    } else {\n        throw new Error(`Unsupported value: ${String(val)}`);\n    }\n    return targetPropValue;\n}\nclass BaseModel {\n    /**\n     * Get an object ready for encoding to either JSON or msgpack.\n     * @param binary - Use true to indicate that the encoding can handle raw binary objects\n     *   (Uint8Arrays). Use false to indicate that raw binary objects should be converted to base64\n     *   strings. True should be used for objects that will be encoded with msgpack, and false should\n     *   be used for objects that will be encoded with JSON.\n     */ get_obj_for_encoding(binary = false) {\n        /* eslint-enable no-underscore-dangle,camelcase */ const obj = {};\n        for (const prop of Object.keys(this.attribute_map)){\n            const name = this.attribute_map[prop];\n            const value = this[prop];\n            if (typeof value !== \"undefined\") {\n                obj[name] = value === null ? null : _get_obj_for_encoding(value, binary);\n            }\n        }\n        return obj;\n    }\n} //# sourceMappingURL=basemodel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2Jhc2Vtb2RlbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxpREFBaUQsR0FDakQsU0FBU0EsY0FBY0MsR0FBRztJQUN0QixnREFBZ0QsR0FDaEQsT0FBUUEsUUFBUUMsYUFDWkQsT0FBTyxRQUNOLE9BQU9BLFFBQVEsWUFBWSxPQUFPQSxRQUFRO0FBQ25EO0FBQ0EsU0FBU0Usc0JBQXNCRixHQUFHLEVBQUVHLE1BQU07SUFDdEMsNEVBQTRFLEdBQzVFLElBQUlDO0lBQ0osSUFBSUosZUFBZUssWUFBWTtRQUMzQkQsa0JBQWtCRCxTQUFTSCxNQUFNTSxPQUFPQyxJQUFJLENBQUNQLEtBQUtRLFFBQVEsQ0FBQztJQUMvRCxPQUNLLElBQUksT0FBT1IsSUFBSVMsb0JBQW9CLEtBQUssWUFBWTtRQUNyREwsa0JBQWtCSixJQUFJUyxvQkFBb0IsQ0FBQ047SUFDL0MsT0FDSyxJQUFJTyxNQUFNQyxPQUFPLENBQUNYLE1BQU07UUFDekJJLGtCQUFrQixFQUFFO1FBQ3BCLEtBQUssTUFBTVEsUUFBUVosSUFBSztZQUNwQkksZ0JBQWdCUyxJQUFJLENBQUNYLHNCQUFzQlUsTUFBTVQ7UUFDckQ7SUFDSixPQUNLLElBQUksT0FBT0gsUUFBUSxVQUFVO1FBQzlCLE1BQU1jLE1BQU0sQ0FBQztRQUNiLEtBQUssTUFBTUMsUUFBUUMsT0FBT0MsSUFBSSxDQUFDakIsS0FBTTtZQUNqQ2MsR0FBRyxDQUFDQyxLQUFLLEdBQUdiLHNCQUFzQkYsR0FBRyxDQUFDZSxLQUFLLEVBQUVaO1FBQ2pEO1FBQ0FDLGtCQUFrQlU7SUFDdEIsT0FDSyxJQUFJZixjQUFjQyxNQUFNO1FBQ3pCSSxrQkFBa0JKO0lBQ3RCLE9BQ0s7UUFDRCxNQUFNLElBQUlrQixNQUFNLENBQUMsbUJBQW1CLEVBQUVDLE9BQU9uQixLQUFLLENBQUM7SUFDdkQ7SUFDQSxPQUFPSTtBQUNYO0FBQ2UsTUFBTWdCO0lBQ2pCOzs7Ozs7S0FNQyxHQUNEWCxxQkFBcUJOLFNBQVMsS0FBSyxFQUFFO1FBQ2pDLGdEQUFnRCxHQUNoRCxNQUFNVyxNQUFNLENBQUM7UUFDYixLQUFLLE1BQU1DLFFBQVFDLE9BQU9DLElBQUksQ0FBQyxJQUFJLENBQUNJLGFBQWEsRUFBRztZQUNoRCxNQUFNQyxPQUFPLElBQUksQ0FBQ0QsYUFBYSxDQUFDTixLQUFLO1lBQ3JDLE1BQU1RLFFBQVEsSUFBSSxDQUFDUixLQUFLO1lBQ3hCLElBQUksT0FBT1EsVUFBVSxhQUFhO2dCQUM5QlQsR0FBRyxDQUFDUSxLQUFLLEdBQ0xDLFVBQVUsT0FBTyxPQUFPckIsc0JBQXNCcUIsT0FBT3BCO1lBQzdEO1FBQ0o7UUFDQSxPQUFPVztJQUNYO0FBQ0osRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9iYXNlbW9kZWwuanM/ZGJjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2UgY2xhc3MgZm9yIG1vZGVsc1xuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSxjYW1lbGNhc2UgKi9cbmZ1bmN0aW9uIF9pc19wcmltaXRpdmUodmFsKSB7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSxjYW1lbGNhc2UgKi9cbiAgICByZXR1cm4gKHZhbCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIHZhbCA9PSBudWxsIHx8XG4gICAgICAgICh0eXBlb2YgdmFsICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsICE9PSAnZnVuY3Rpb24nKSk7XG59XG5mdW5jdGlvbiBfZ2V0X29ial9mb3JfZW5jb2RpbmcodmFsLCBiaW5hcnkpIHtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLGNhbWVsY2FzZSxuby1yZWRlY2xhcmUsbm8tdW51c2VkLXZhcnMgKi9cbiAgICBsZXQgdGFyZ2V0UHJvcFZhbHVlO1xuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHRhcmdldFByb3BWYWx1ZSA9IGJpbmFyeSA/IHZhbCA6IEJ1ZmZlci5mcm9tKHZhbCkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsLmdldF9vYmpfZm9yX2VuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRhcmdldFByb3BWYWx1ZSA9IHZhbC5nZXRfb2JqX2Zvcl9lbmNvZGluZyhiaW5hcnkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdGFyZ2V0UHJvcFZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiB2YWwpIHtcbiAgICAgICAgICAgIHRhcmdldFByb3BWYWx1ZS5wdXNoKF9nZXRfb2JqX2Zvcl9lbmNvZGluZyhlbGVtLCBiaW5hcnkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIE9iamVjdC5rZXlzKHZhbCkpIHtcbiAgICAgICAgICAgIG9ialtwcm9wXSA9IF9nZXRfb2JqX2Zvcl9lbmNvZGluZyh2YWxbcHJvcF0sIGJpbmFyeSk7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0UHJvcFZhbHVlID0gb2JqO1xuICAgIH1cbiAgICBlbHNlIGlmIChfaXNfcHJpbWl0aXZlKHZhbCkpIHtcbiAgICAgICAgdGFyZ2V0UHJvcFZhbHVlID0gdmFsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCB2YWx1ZTogJHtTdHJpbmcodmFsKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFByb3BWYWx1ZTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VNb2RlbCB7XG4gICAgLyoqXG4gICAgICogR2V0IGFuIG9iamVjdCByZWFkeSBmb3IgZW5jb2RpbmcgdG8gZWl0aGVyIEpTT04gb3IgbXNncGFjay5cbiAgICAgKiBAcGFyYW0gYmluYXJ5IC0gVXNlIHRydWUgdG8gaW5kaWNhdGUgdGhhdCB0aGUgZW5jb2RpbmcgY2FuIGhhbmRsZSByYXcgYmluYXJ5IG9iamVjdHNcbiAgICAgKiAgIChVaW50OEFycmF5cykuIFVzZSBmYWxzZSB0byBpbmRpY2F0ZSB0aGF0IHJhdyBiaW5hcnkgb2JqZWN0cyBzaG91bGQgYmUgY29udmVydGVkIHRvIGJhc2U2NFxuICAgICAqICAgc3RyaW5ncy4gVHJ1ZSBzaG91bGQgYmUgdXNlZCBmb3Igb2JqZWN0cyB0aGF0IHdpbGwgYmUgZW5jb2RlZCB3aXRoIG1zZ3BhY2ssIGFuZCBmYWxzZSBzaG91bGRcbiAgICAgKiAgIGJlIHVzZWQgZm9yIG9iamVjdHMgdGhhdCB3aWxsIGJlIGVuY29kZWQgd2l0aCBKU09OLlxuICAgICAqL1xuICAgIGdldF9vYmpfZm9yX2VuY29kaW5nKGJpbmFyeSA9IGZhbHNlKSB7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUsY2FtZWxjYXNlICovXG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2YgT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVfbWFwKSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuYXR0cmlidXRlX21hcFtwcm9wXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1twcm9wXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgb2JqW25hbWVdID1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT09IG51bGwgPyBudWxsIDogX2dldF9vYmpfZm9yX2VuY29kaW5nKHZhbHVlLCBiaW5hcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZW1vZGVsLmpzLm1hcCJdLCJuYW1lcyI6WyJfaXNfcHJpbWl0aXZlIiwidmFsIiwidW5kZWZpbmVkIiwiX2dldF9vYmpfZm9yX2VuY29kaW5nIiwiYmluYXJ5IiwidGFyZ2V0UHJvcFZhbHVlIiwiVWludDhBcnJheSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImdldF9vYmpfZm9yX2VuY29kaW5nIiwiQXJyYXkiLCJpc0FycmF5IiwiZWxlbSIsInB1c2giLCJvYmoiLCJwcm9wIiwiT2JqZWN0Iiwia2V5cyIsIkVycm9yIiwiU3RyaW5nIiwiQmFzZU1vZGVsIiwiYXR0cmlidXRlX21hcCIsIm5hbWUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/basemodel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/indexer.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/indexer.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IndexerClient)\n/* harmony export */ });\n/* harmony import */ var _serviceClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serviceClient */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/serviceClient.js\");\n/* harmony import */ var _makeHealthCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./makeHealthCheck */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/makeHealthCheck.js\");\n/* harmony import */ var _lookupAssetBalances__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lookupAssetBalances */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetBalances.js\");\n/* harmony import */ var _lookupAssetTransactions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lookupAssetTransactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetTransactions.js\");\n/* harmony import */ var _lookupAccountTransactions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lookupAccountTransactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js\");\n/* harmony import */ var _lookupBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lookupBlock */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupBlock.js\");\n/* harmony import */ var _lookupTransactionByID__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lookupTransactionByID */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupTransactionByID.js\");\n/* harmony import */ var _lookupAccountByID__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lookupAccountByID */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountByID.js\");\n/* harmony import */ var _lookupAccountAssets__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lookupAccountAssets */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAssets.js\");\n/* harmony import */ var _lookupAccountCreatedAssets__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lookupAccountCreatedAssets */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedAssets.js\");\n/* harmony import */ var _lookupAccountAppLocalStates__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lookupAccountAppLocalStates */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAppLocalStates.js\");\n/* harmony import */ var _lookupAccountCreatedApplications__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lookupAccountCreatedApplications */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedApplications.js\");\n/* harmony import */ var _lookupAssetByID__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lookupAssetByID */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetByID.js\");\n/* harmony import */ var _lookupApplications__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lookupApplications */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplications.js\");\n/* harmony import */ var _lookupApplicationLogs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lookupApplicationLogs */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationLogs.js\");\n/* harmony import */ var _lookupApplicationBoxByIDandName__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./lookupApplicationBoxByIDandName */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationBoxByIDandName.js\");\n/* harmony import */ var _searchAccounts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./searchAccounts */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchAccounts.js\");\n/* harmony import */ var _searchForTransactions__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./searchForTransactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForTransactions.js\");\n/* harmony import */ var _searchForAssets__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./searchForAssets */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForAssets.js\");\n/* harmony import */ var _searchForApplications__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./searchForApplications */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplications.js\");\n/* harmony import */ var _searchForApplicationBoxes__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./searchForApplicationBoxes */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplicationBoxes.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The Indexer provides a REST API interface of API calls to support searching the Algorand Blockchain.\n *\n * The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated.\n *\n * This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data.\n *\n * This node must also be an Archival node to make searching the entire blockchain possible.\n *\n * #### Relevant Information\n * [Learn more about Indexer](https://developer.algorand.org/docs/get-details/indexer/)\n *\n * [Run Indexer in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/#algod-indexer-and-kmd-rest-endpoints)\n */ class IndexerClient extends _serviceClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Create an IndexerClient from\n     * * either a token, baseServer, port, and optional headers\n     * * or a base client server for interoperability with external dApp wallets\n     *\n     * #### Example\n     * ```typescript\n     * const token  = \"\";\n     * const server = \"http://localhost\";\n     * const port   = 8980;\n     * const indexerClient = new algosdk.Indexer(token, server, port);\n     * ```\n     * @remarks\n     * The above configuration is for a sandbox private network.\n     * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.\n     *\n     * @param tokenOrBaseClient - The API token for the Indexer API\n     * @param baseServer - REST endpoint\n     * @param port - Port number if specifically configured by the server\n     * @param headers - Optional headers\n     */ constructor(tokenOrBaseClient, baseServer = \"http://127.0.0.1\", port = 8080, headers = {}){\n        super(\"X-Indexer-API-Token\", tokenOrBaseClient, baseServer, port, headers);\n    }\n    /**\n     * Returns the health object for the service.\n     * Returns 200 if healthy.\n     *\n     * #### Example\n     * ```typescript\n     * const health = await indexerClient.makeHealthCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\n     * @category GET\n     */ makeHealthCheck() {\n        return new _makeHealthCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.c, this.intDecoding);\n    }\n    /**\n     * Returns the list of accounts who hold the given asset and their balance.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */ lookupAssetBalances(index) {\n        return new _lookupAssetBalances__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns transactions relating to the given asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */ lookupAssetTransactions(index) {\n        return new _lookupAssetTransactions__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns transactions relating to the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\n     * @param account - The address of the account.\n     * @category GET\n     */ lookupAccountTransactions(account) {\n        return new _lookupAccountTransactions__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns the block for the passed round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\n     * @param round - The number of the round to look up.\n     * @category GET\n     */ lookupBlock(round) {\n        return new _lookupBlock__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.c, this.intDecoding, round);\n    }\n    /**\n     * Returns information about the given transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\n     * @param txID - The ID of the transaction to look up.\n     * @category GET\n     */ lookupTransactionByID(txID) {\n        return new _lookupTransactionByID__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.c, this.intDecoding, txID);\n    }\n    /**\n     * Returns information about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient.lookupAccountByID(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountByID(account) {\n        return new _lookupAccountByID__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns asset about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountAssets(account) {\n        return new _lookupAccountAssets__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns asset information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountCreatedAssets(account) {\n        return new _lookupAccountCreatedAssets__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns application local state about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountAppLocalStates(account) {\n        return new _lookupAccountAppLocalStates__WEBPACK_IMPORTED_MODULE_10__[\"default\"](this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns application information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountCreatedApplications(account) {\n        return new _lookupAccountCreatedApplications__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns information about the passed asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\n     * @param index - The ID of the asset ot look up.\n     * @category GET\n     */ lookupAssetByID(index) {\n        return new _lookupAssetByID__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns information about the passed application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient.lookupApplications(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\n     * @param index - The ID of the application to look up.\n     * @category GET\n     */ lookupApplications(index) {\n        return new _lookupApplications__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns log messages generated by the passed in application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n     * @param appID - The ID of the application which generated the logs.\n     * @category GET\n     */ lookupApplicationLogs(appID) {\n        return new _lookupApplicationLogs__WEBPACK_IMPORTED_MODULE_14__[\"default\"](this.c, this.intDecoding, appID);\n    }\n    /**\n     * Returns information about indexed accounts.\n     *\n     * #### Example\n     * ```typescript\n     * const accounts = await indexerClient.searchAccounts().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n     * @category GET\n     */ searchAccounts() {\n        return new _searchAccounts__WEBPACK_IMPORTED_MODULE_16__[\"default\"](this.c, this.intDecoding);\n    }\n    /**\n     * Returns information about indexed transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient.searchForTransactions().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n     * @category GET\n     */ searchForTransactions() {\n        return new _searchForTransactions__WEBPACK_IMPORTED_MODULE_17__[\"default\"](this.c, this.intDecoding);\n    }\n    /**\n     * Returns information about indexed assets.\n     *\n     * #### Example\n     * ```typescript\n     * const assets = await indexerClient.searchForAssets().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n     * @category GET\n     */ searchForAssets() {\n        return new _searchForAssets__WEBPACK_IMPORTED_MODULE_18__[\"default\"](this.c, this.intDecoding);\n    }\n    /**\n     * Returns information about indexed applications.\n     *\n     * #### Example\n     * ```typescript\n     * const apps = await indexerClient.searchForApplications().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\n     * @category GET\n     */ searchForApplications() {\n        return new _searchForApplications__WEBPACK_IMPORTED_MODULE_19__[\"default\"](this.c, this.intDecoding);\n    }\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\n     * @param appID - The ID of the application with boxes.\n     * @category GET\n     */ searchForApplicationBoxes(appID) {\n        return new _searchForApplicationBoxes__WEBPACK_IMPORTED_MODULE_20__[\"default\"](this.c, this.intDecoding, appID);\n    }\n    /**\n     * Returns information about the application box given its name.\n     *\n     * #### Example\n     * ```typescript\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await indexerClient\n     *        .LookupApplicationBoxByIDandName(1234, boxName)\n     *        .do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n     * @param appID - The ID of the application with boxes.\n     * @category GET\n     */ lookupApplicationBoxByIDandName(appID, boxName) {\n        return new _lookupApplicationBoxByIDandName__WEBPACK_IMPORTED_MODULE_15__[\"default\"](this.c, this.intDecoding, appID, boxName);\n    }\n} //# sourceMappingURL=indexer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/indexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAppLocalStates.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAppLocalStates.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountAppLocalStates)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupAccountAppLocalStates extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns application local state about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, intDecoding, account){\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/apps-local-state`\n     */ path() {\n        return `/v2/accounts/${this.account}/apps-local-state`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Specify an applicationID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const applicationID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountApplications = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .applicationID(applicationID)\n     *        .do();\n     * ```\n     * @param index - the applicationID\n     * @category query\n     */ applicationID(index) {\n        this.query[\"application-id\"] = index;\n        return this;\n    }\n} //# sourceMappingURL=lookupAccountAppLocalStates.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQzFCLE1BQU1DLG9DQUFvQ0Qsb0RBQVdBO0lBQ2hFOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNERSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxDQUFFO1FBQ2pDLEtBQUssQ0FBQ0YsR0FBR0M7UUFDVCxJQUFJLENBQUNDLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNBLE9BQU8sR0FBR0E7SUFDbkI7SUFDQTs7S0FFQyxHQUNEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUNELE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUMxRDtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7S0FlQyxHQUNERSxNQUFNQSxLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsS0FBSyxHQUFHQTtRQUNuQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RFLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0QsS0FBSyxDQUFDQyxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBb0JDLEdBQ0RDLFVBQVVBLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNGLEtBQUssQ0FBQ0csSUFBSSxHQUFHRDtRQUNsQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREUsV0FBV0MsUUFBUSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDTCxLQUFLLENBQUMsY0FBYyxHQUFHSztRQUM1QixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLGNBQWNDLEtBQUssRUFBRTtRQUNqQixJQUFJLENBQUNQLEtBQUssQ0FBQyxpQkFBaUIsR0FBR087UUFDL0IsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLHVEQUF1RCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzLmpzPzNiMDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFwcGxpY2F0aW9uIGxvY2FsIHN0YXRlIGFib3V0IHRoZSBnaXZlbiBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXBwTG9jYWxTdGF0ZXMgPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWRhcHBzLWxvY2FsLXN0YXRlKVxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFjY291bnQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FjY291bnRzLyR7YWNjb3VudH0vYXBwcy1sb2NhbC1zdGF0ZWBcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH0vYXBwcy1sb2NhbC1zdGF0ZWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGxpbWl0IGZvciBmaWx0ZXIuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaW1pdCAtIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubGltaXQgPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgcm91bmQgdG8gZmlsdGVyIHdpdGguXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IHRhcmdldEJsb2NrID0gMTgzMDk5MTc7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKVxuICAgICAqICAgICAgICAucm91bmQodGFyZ2V0QmxvY2spXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnkucm91bmQgPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqXG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0c1BhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dChhY2NvdW50QXNzZXRzUGFnZTFbXCJuZXh0LXRva2VuXCJdKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbmV4dFRva2VuIC0gcHJvdmlkZWQgYnkgdGhlIHByZXZpb3VzIHJlc3VsdHMuXG4gICAgICovXG4gICAgbmV4dFRva2VuKG5leHRUb2tlbikge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5leHQgPSBuZXh0VG9rZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlc1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGFuIGFwcGxpY2F0aW9uSUQgdG8gc2VhcmNoIGZvci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBsaWNhdGlvbklEID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXBwbGljYXRpb25zID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5hcHBsaWNhdGlvbklEKGFwcGxpY2F0aW9uSUQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBhcHBsaWNhdGlvbklEXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgYXBwbGljYXRpb25JRChpbmRleCkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydhcHBsaWNhdGlvbi1pZCddID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJMb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMiLCJjb25zdHJ1Y3RvciIsImMiLCJpbnREZWNvZGluZyIsImFjY291bnQiLCJwYXRoIiwibGltaXQiLCJxdWVyeSIsInJvdW5kIiwibmV4dFRva2VuIiwibmV4dCIsImluY2x1ZGVBbGwiLCJ2YWx1ZSIsImFwcGxpY2F0aW9uSUQiLCJpbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAppLocalStates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAssets.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAssets.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountAssets)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupAccountAssets extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns asset about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, intDecoding, account){\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/assets`\n     */ path() {\n        return `/v2/accounts/${this.account}/assets`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Specify an assetID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .assetId(assetId)\n     *        .do();\n     * ```\n     * @param index - the assetID\n     * @category query\n     */ assetId(index) {\n        this.query[\"asset-id\"] = index;\n        return this;\n    }\n} //# sourceMappingURL=lookupAccountAssets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudEFzc2V0cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQyw0QkFBNEJELG9EQUFXQTtJQUN4RDs7Ozs7Ozs7Ozs7O0tBWUMsR0FDREUsWUFBWUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLE9BQU8sQ0FBRTtRQUNqQyxLQUFLLENBQUNGLEdBQUdDO1FBQ1QsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ25CO0lBQ0E7O0tBRUMsR0FDREMsT0FBTztRQUNILE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDRCxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQ2hEO0lBQ0E7Ozs7Ozs7Ozs7Ozs7OztLQWVDLEdBQ0RFLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREUsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDRCxLQUFLLENBQUNDLEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBcUJDLEdBQ0RDLFVBQVVBLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNGLEtBQUssQ0FBQ0csSUFBSSxHQUFHRDtRQUNsQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREUsV0FBV0MsUUFBUSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDTCxLQUFLLENBQUMsY0FBYyxHQUFHSztRQUM1QixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLFFBQVFDLEtBQUssRUFBRTtRQUNYLElBQUksQ0FBQ1AsS0FBSyxDQUFDLFdBQVcsR0FBR087UUFDekIsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudEFzc2V0cy5qcz9iY2YwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdCc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb29rdXBBY2NvdW50QXNzZXRzIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXNzZXQgYWJvdXQgdGhlIGdpdmVuIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcykuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYWNjb3VudHNhY2NvdW50LWlkYXNzZXRzKVxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFjY291bnQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FjY291bnRzLyR7YWNjb3VudH0vYXNzZXRzYFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FjY291bnRzLyR7dGhpcy5hY2NvdW50fS9hc3NldHNgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBsaW1pdCBmb3IgZmlsdGVyLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSByb3VuZCB0byBmaWx0ZXIgd2l0aC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgdGFyZ2V0QmxvY2sgPSAxODMwOTkxNztcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAucm91bmQodGFyZ2V0QmxvY2spXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnkucm91bmQgPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHNQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0KGFjY291bnRBc3NldHNQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dFRva2VuKSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHRUb2tlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGUgYWxsIGl0ZW1zIGluY2x1ZGluZyBjbG9zZWQgYWNjb3VudHMsIGRlbGV0ZWQgYXBwbGljYXRpb25zLCBkZXN0cm95ZWQgYXNzZXRzLCBvcHRlZC1vdXQgYXNzZXQgaG9sZGluZ3MsIGFuZCBjbG9zZWQtb3V0IGFwcGxpY2F0aW9uIGxvY2Fsc3RhdGVzXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGFuIGFzc2V0SUQgdG8gc2VhcmNoIGZvci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhc3NldEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmFzc2V0SWQoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGluZGV4IC0gdGhlIGFzc2V0SURcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBhc3NldElkKGluZGV4KSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2Fzc2V0LWlkJ10gPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQWNjb3VudEFzc2V0cy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJMb29rdXBBY2NvdW50QXNzZXRzIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJhY2NvdW50IiwicGF0aCIsImxpbWl0IiwicXVlcnkiLCJyb3VuZCIsIm5leHRUb2tlbiIsIm5leHQiLCJpbmNsdWRlQWxsIiwidmFsdWUiLCJhc3NldElkIiwiaW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountByID.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountByID.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupAccountByID extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient.lookupAccountByID(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, intDecoding, account){\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}`\n     */ path() {\n        return `/v2/accounts/${this.account}`;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .includeAll()\n     *        .do();\n     * ```\n     * @param value\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .exclude(\"all\")\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .exclude(\"assets,created-assets\")\n     *        .do();\n     * ```\n     * @remarks By default, it behaves as exclude=none\n     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\n     * @category query\n     */ exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n} //# sourceMappingURL=lookupAccountByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudEJ5SUQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDMUIsTUFBTUMsMEJBQTBCRCxvREFBV0E7SUFDdEQ7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RFLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLENBQUU7UUFDakMsS0FBSyxDQUFDRixHQUFHQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNuQjtJQUNBOztLQUVDLEdBQ0RDLE9BQU87UUFDSCxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDekM7SUFDQTs7Ozs7Ozs7Ozs7OztLQWFDLEdBQ0RFLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXFCQyxHQUNERSxXQUFXQyxRQUFRLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNGLEtBQUssQ0FBQyxjQUFjLEdBQUdFO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBdUJDLEdBQ0RDLFFBQVFBLE9BQU8sRUFBRTtRQUNiLElBQUksQ0FBQ0gsS0FBSyxDQUFDRyxPQUFPLEdBQUdBO1FBQ3JCLE9BQU8sSUFBSTtJQUNmO0FBQ0osRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cEFjY291bnRCeUlELmpzP2U0ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2t1cEFjY291bnRCeUlEIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGdpdmVuIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50QnlJRChhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWQpXG4gICAgICogQHBhcmFtIGFjY291bnQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgYWNjb3VudCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYWNjb3VudHMvJHthY2NvdW50fWBcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHJvdW5kIHRvIGZpbHRlciB3aXRoLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCB0YXJnZXRCbG9jayA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEJ5SUQoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLnJvdW5kKHRhcmdldEJsb2NrKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKi9cbiAgICByb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlcy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRCeUlEKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRCeUlEKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhjbHVkZSBhZGRpdGlvbmFsIGl0ZW1zIHN1Y2ggYXMgYXNzZXQgaG9sZGluZ3MsIGFwcGxpY2F0aW9uIGxvY2FsIGRhdGEgc3RvcmVkIGZvciB0aGlzIGFjY291bnQsIGFzc2V0IHBhcmFtZXRlcnMgY3JlYXRlZCBieSB0aGlzIGFjY291bnQsIGFuZCBhcHBsaWNhdGlvbiBwYXJhbWV0ZXJzIGNyZWF0ZWQgYnkgdGhpcyBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDFcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEJ5SUQoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmV4Y2x1ZGUoXCJhbGxcIilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QnlJRChhZGRyZXNzKVxuICAgICAqICAgICAgICAuZXhjbHVkZShcImFzc2V0cyxjcmVhdGVkLWFzc2V0c1wiKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcmVtYXJrcyBCeSBkZWZhdWx0LCBpdCBiZWhhdmVzIGFzIGV4Y2x1ZGU9bm9uZVxuICAgICAqIEBwYXJhbSBleGNsdWRlIC0gQXJyYXkgb2YgYGFsbGAsIGBhc3NldHNgLCBgY3JlYXRlZC1hc3NldHNgLCBgYXBwcy1sb2NhbC1zdGF0ZWAsIGBjcmVhdGVkLWFwcHNgLCBgbm9uZWBcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBleGNsdWRlKGV4Y2x1ZGUpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5leGNsdWRlID0gZXhjbHVkZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQWNjb3VudEJ5SUQuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiTG9va3VwQWNjb3VudEJ5SUQiLCJjb25zdHJ1Y3RvciIsImMiLCJpbnREZWNvZGluZyIsImFjY291bnQiLCJwYXRoIiwicm91bmQiLCJxdWVyeSIsImluY2x1ZGVBbGwiLCJ2YWx1ZSIsImV4Y2x1ZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedApplications.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedApplications.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountCreatedApplications)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupAccountCreatedApplications extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns application information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, intDecoding, account){\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/created-applications`\n     */ path() {\n        return `/v2/accounts/${this.account}/created-applications`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Specify an applicationID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const applicationID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountApplications = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .applicationID(applicationID)\n     *        .do();\n     * ```\n     * @param index - the applicationID\n     * @category query\n     */ applicationID(index) {\n        this.query[\"application-id\"] = index;\n        return this;\n    }\n} //# sourceMappingURL=lookupAccountCreatedApplications.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDMUIsTUFBTUMseUNBQXlDRCxvREFBV0E7SUFDckU7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RFLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLENBQUU7UUFDakMsS0FBSyxDQUFDRixHQUFHQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNuQjtJQUNBOztLQUVDLEdBQ0RDLE9BQU87UUFDSCxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQ0QsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0lBQzlEO0lBQ0E7Ozs7Ozs7Ozs7Ozs7OztLQWVDLEdBQ0RFLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREUsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDRCxLQUFLLENBQUNDLEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBcUJDLEdBQ0RDLFVBQVVBLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNGLEtBQUssQ0FBQ0csSUFBSSxHQUFHRDtRQUNsQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREUsV0FBV0MsUUFBUSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDTCxLQUFLLENBQUMsY0FBYyxHQUFHSztRQUM1QixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLGNBQWNDLEtBQUssRUFBRTtRQUNqQixJQUFJLENBQUNQLEtBQUssQ0FBQyxpQkFBaUIsR0FBR087UUFDL0IsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLDREQUE0RCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMuanM/OWQ0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcHBsaWNhdGlvbiBpbmZvcm1hdGlvbiBjcmVhdGVkIGJ5IHRoZSBnaXZlbiBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50Q3JlYXRlZEFwcHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zKGFkZHJlc3MpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFjY291bnRzYWNjb3VudC1pZGNyZWF0ZWQtYXBwbGljYXRpb25zKVxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFjY291bnQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FjY291bnRzLyR7YWNjb3VudH0vY3JlYXRlZC1hcHBsaWNhdGlvbnNgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYWNjb3VudHMvJHt0aGlzLmFjY291bnR9L2NyZWF0ZWQtYXBwbGljYXRpb25zYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbGltaXQgZm9yIGZpbHRlci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHJvdW5kIHRvIGZpbHRlciB3aXRoLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCB0YXJnZXRCbG9jayA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAucm91bmQodGFyZ2V0QmxvY2spXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnkucm91bmQgPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHQoYWNjb3VudEFzc2V0c1BhZ2UxW1wibmV4dC10b2tlblwiXSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0VG9rZW4pIHtcbiAgICAgICAgdGhpcy5xdWVyeS5uZXh0ID0gbmV4dFRva2VuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZSBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGFuIGFwcGxpY2F0aW9uSUQgdG8gc2VhcmNoIGZvci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBsaWNhdGlvbklEID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXBwbGljYXRpb25zID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5hcHBsaWNhdGlvbklEKGFwcGxpY2F0aW9uSUQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBhcHBsaWNhdGlvbklEXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgYXBwbGljYXRpb25JRChpbmRleCkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydhcHBsaWNhdGlvbi1pZCddID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIkxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJhY2NvdW50IiwicGF0aCIsImxpbWl0IiwicXVlcnkiLCJyb3VuZCIsIm5leHRUb2tlbiIsIm5leHQiLCJpbmNsdWRlQWxsIiwidmFsdWUiLCJhcHBsaWNhdGlvbklEIiwiaW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedAssets.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedAssets.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountCreatedAssets)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupAccountCreatedAssets extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns asset information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, intDecoding, account){\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/created-assets`\n     */ path() {\n        return `/v2/accounts/${this.account}/created-assets`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Specify an assetID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     * @param index - the assetID\n     * @category query\n     */ assetID(index) {\n        this.query[\"asset-id\"] = index;\n        return this;\n    }\n} //# sourceMappingURL=lookupAccountCreatedAssets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDMUIsTUFBTUMsbUNBQW1DRCxvREFBV0E7SUFDL0Q7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RFLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLENBQUU7UUFDakMsS0FBSyxDQUFDRixHQUFHQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNuQjtJQUNBOztLQUVDLEdBQ0RDLE9BQU87UUFDSCxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQ0QsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUN4RDtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7S0FlQyxHQUNERSxNQUFNQSxLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsS0FBSyxHQUFHQTtRQUNuQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RFLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0QsS0FBSyxDQUFDQyxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FzQkMsR0FDREMsVUFBVUEsU0FBUyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxJQUFJLEdBQUdEO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7S0FhQyxHQUNERSxXQUFXQyxRQUFRLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNMLEtBQUssQ0FBQyxjQUFjLEdBQUdLO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsUUFBUUMsS0FBSyxFQUFFO1FBQ1gsSUFBSSxDQUFDUCxLQUFLLENBQUMsV0FBVyxHQUFHTztRQUN6QixPQUFPLElBQUk7SUFDZjtBQUNKLEVBQ0Esc0RBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cy5qcz8yYzE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdCc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFzc2V0IGluZm9ybWF0aW9uIGNyZWF0ZWQgYnkgdGhlIGdpdmVuIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRDcmVhdGVkQXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyhhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWRjcmVhdGVkLWFzc2V0cylcbiAgICAgKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBhY2NvdW50KSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hY2NvdW50cy8ke2FjY291bnR9L2NyZWF0ZWQtYXNzZXRzYFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FjY291bnRzLyR7dGhpcy5hY2NvdW50fS9jcmVhdGVkLWFzc2V0c2A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGxpbWl0IGZvciBmaWx0ZXIuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSByb3VuZCB0byBmaWx0ZXIgd2l0aC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgdGFyZ2V0QmxvY2sgPSAxODMwOTkxNztcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLnJvdW5kKHRhcmdldEJsb2NrKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICByb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqXG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0c1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0c1BhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0KGFjY291bnRBc3NldHNQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dFRva2VuKSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHRUb2tlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGUgYWxsIGl0ZW1zIGluY2x1ZGluZyBjbG9zZWQgYWNjb3VudHMsIGRlbGV0ZWQgYXBwbGljYXRpb25zLCBkZXN0cm95ZWQgYXNzZXRzLCBvcHRlZC1vdXQgYXNzZXQgaG9sZGluZ3MsIGFuZCBjbG9zZWQtb3V0IGFwcGxpY2F0aW9uIGxvY2Fsc3RhdGVzXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbChmYWxzZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBhbiBhc3NldElEIHRvIHNlYXJjaCBmb3IuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJRCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYXNzZXRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAuYXNzZXRJRChhc3NldElEKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgYXNzZXRJRFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGFzc2V0SUQoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnYXNzZXQtaWQnXSA9IGluZGV4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJMb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyIsImNvbnN0cnVjdG9yIiwiYyIsImludERlY29kaW5nIiwiYWNjb3VudCIsInBhdGgiLCJsaW1pdCIsInF1ZXJ5Iiwicm91bmQiLCJuZXh0VG9rZW4iLCJuZXh0IiwiaW5jbHVkZUFsbCIsInZhbHVlIiwiYXNzZXRJRCIsImluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64StringFunnel: () => (/* binding */ base64StringFunnel),\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountTransactions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * Accept base64 string or Uint8Array and output base64 string\n * @param data - Base64 string or Uint8Array\n * @returns The inputted base64 string, or a base64 string representation of the Uint8Array\n */ function base64StringFunnel(data) {\n    if (typeof data === \"string\") {\n        return data;\n    }\n    return Buffer.from(data).toString(\"base64\");\n}\nclass LookupAccountTransactions extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns transactions relating to the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\n     * @param account - The address of the account.\n     */ constructor(c, intDecoding, account){\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/transactions`\n     */ path() {\n        return `/v2/accounts/${this.account}/transactions`;\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */ notePrefix(prefix) {\n        this.query[\"note-prefix\"] = base64StringFunnel(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .txType(\"appl\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\n     * @category query\n     */ txType(type) {\n        this.query[\"tx-type\"] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .sigType(\"msig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */ sigType(type) {\n        this.query[\"sig-type\"] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\n     * @param txid\n     * @category query\n     */ txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     *\n     * @param id\n     * @category query\n     */ assetID(id) {\n        this.query[\"asset-id\"] = id;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string\n     * @category query\n     */ beforeTime(before) {\n        this.query[\"before-time\"] = before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string\n     * @category query\n     */ afterTime(after) {\n        this.query[\"after-time\"] = after;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     * @remarks\n     * If you are looking for transactions with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude transactions with a 0 amount.\n     *\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        this.query[\"currency-greater-than\"] = greater;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * The next page of results. Use the next token provided by the previous results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     *\n     * const accountTxnsPage1 = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountTxnsPage2 = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .nextToken(accountTxnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */ rekeyTo(rekeyTo) {\n        this.query[\"rekey-to\"] = rekeyTo;\n        return this;\n    }\n} //# sourceMappingURL=lookupAccountTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationBoxByIDandName.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationBoxByIDandName.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupApplicationBoxByIDandName)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\nclass LookupApplicationBoxByIDandName extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await indexerClient\n     *        .LookupApplicationBoxByIDandName(1234, boxName)\n     *        .do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n     * @oaram index - application index.\n     * @category GET\n     */ constructor(c, intDecoding, index, boxName){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n        // Encode query in base64 format and append the encoding prefix.\n        const encodedName = Buffer.from(boxName).toString(\"base64\");\n        this.query.name = encodeURI(`b64:${encodedName}`);\n    }\n    /**\n     * @returns `/v2/applications/${index}/box`\n     */ path() {\n        return `/v2/applications/${this.index}/box`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return _models_types__WEBPACK_IMPORTED_MODULE_1__.Box.from_obj_for_encoding(body);\n    }\n} //# sourceMappingURL=lookupApplicationBoxByIDandName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXBwbGljYXRpb25Cb3hCeUlEYW5kTmFtZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDSjtBQUN0QixNQUFNRSx3Q0FBd0NGLG9EQUFXQTtJQUNwRTs7Ozs7Ozs7Ozs7Ozs7O0tBZUMsR0FDREcsWUFBWUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxDQUFFO1FBQ3hDLEtBQUssQ0FBQ0gsR0FBR0M7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNBLEtBQUssR0FBR0E7UUFDYixnRUFBZ0U7UUFDaEUsTUFBTUUsY0FBY0MsT0FBT0MsSUFBSSxDQUFDSCxTQUFTSSxRQUFRLENBQUM7UUFDbEQsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUksR0FBR0MsVUFBVSxDQUFDLElBQUksRUFBRU4sWUFBWSxDQUFDO0lBQ3BEO0lBQ0E7O0tBRUMsR0FDRE8sT0FBTztRQUNILE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUNULEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDL0M7SUFDQSxrREFBa0Q7SUFDbERVLFFBQVFDLElBQUksRUFBRTtRQUNWLE9BQU9oQiw4Q0FBR0EsQ0FBQ2lCLHFCQUFxQixDQUFDRDtJQUNyQztBQUNKLEVBQ0EsMkRBQTJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lLmpzPzFhZTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0JztcbmltcG9ydCB7IEJveCB9IGZyb20gJy4vbW9kZWxzL3R5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2t1cEFwcGxpY2F0aW9uQm94QnlJRGFuZE5hbWUgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBpbmRleGVkIGFwcGxpY2F0aW9uIGJveGVzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGJveE5hbWUgPSBCdWZmZXIuZnJvbShcImZvb1wiKTtcbiAgICAgKiBjb25zdCBib3hSZXNwb25zZSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLkxvb2t1cEFwcGxpY2F0aW9uQm94QnlJRGFuZE5hbWUoMTIzNCwgYm94TmFtZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogY29uc3QgYm94VmFsdWUgPSBib3hSZXNwb25zZS52YWx1ZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWRib3gpXG4gICAgICogQG9hcmFtIGluZGV4IC0gYXBwbGljYXRpb24gaW5kZXguXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBpbmRleCwgYm94TmFtZSkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICAvLyBFbmNvZGUgcXVlcnkgaW4gYmFzZTY0IGZvcm1hdCBhbmQgYXBwZW5kIHRoZSBlbmNvZGluZyBwcmVmaXguXG4gICAgICAgIGNvbnN0IGVuY29kZWROYW1lID0gQnVmZmVyLmZyb20oYm94TmFtZSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5hbWUgPSBlbmNvZGVVUkkoYGI2NDoke2VuY29kZWROYW1lfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9ucy8ke2luZGV4fS9ib3hgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXBwbGljYXRpb25zLyR7dGhpcy5pbmRleH0vYm94YDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIEJveC5mcm9tX29ial9mb3JfZW5jb2RpbmcoYm9keSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQXBwbGljYXRpb25Cb3hCeUlEYW5kTmFtZS5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJCb3giLCJMb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJpbmRleCIsImJveE5hbWUiLCJlbmNvZGVkTmFtZSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsInF1ZXJ5IiwibmFtZSIsImVuY29kZVVSSSIsInBhdGgiLCJwcmVwYXJlIiwiYm9keSIsImZyb21fb2JqX2Zvcl9lbmNvZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationBoxByIDandName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationLogs.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationLogs.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupApplicationLogs)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupApplicationLogs extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns log messages generated by the passed in application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n     * @param appID - The ID of the application which generated the logs.\n     * @category GET\n     */ constructor(c, intDecoding, appID){\n        super(c, intDecoding);\n        this.appID = appID;\n        this.appID = appID;\n    }\n    /**\n     * @returns `/v2/applications/${appID}/logs`\n     */ path() {\n        return `/v2/applications/${this.appID}/logs`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const appLogsPage1 = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const appLogsPage2 = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .nextToken(appLogsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Only include transactions with this sender address.\n     *\n     * #### Example\n     * ```typescript\n     * const sender = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .sender(sender)\n     *        .do();\n     * ```\n     *\n     * @param senderAddress\n     * @category query\n     */ sender(senderAddress) {\n        this.query[\"sender-address\"] = senderAddress;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     *\n     * @param txid\n     * @category query\n     */ txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n} //# sourceMappingURL=lookupApplicationLogs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXBwbGljYXRpb25Mb2dzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQzFCLE1BQU1DLDhCQUE4QkQsb0RBQVdBO0lBQzFEOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNERSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsS0FBSyxDQUFFO1FBQy9CLEtBQUssQ0FBQ0YsR0FBR0M7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNBLEtBQUssR0FBR0E7SUFDakI7SUFDQTs7S0FFQyxHQUNEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNoRDtJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREUsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLENBQUNELEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERSxTQUFTQyxLQUFLLEVBQUU7UUFDWixJQUFJLENBQUNGLEtBQUssQ0FBQyxZQUFZLEdBQUdFO1FBQzFCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsU0FBU0QsS0FBSyxFQUFFO1FBQ1osSUFBSSxDQUFDRixLQUFLLENBQUMsWUFBWSxHQUFHRTtRQUMxQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FxQkMsR0FDREUsVUFBVUEsU0FBUyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxJQUFJLEdBQUdEO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREUsT0FBT0MsYUFBYSxFQUFFO1FBQ2xCLElBQUksQ0FBQ1AsS0FBSyxDQUFDLGlCQUFpQixHQUFHTztRQUMvQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLEtBQUtBLElBQUksRUFBRTtRQUNQLElBQUksQ0FBQ1IsS0FBSyxDQUFDUSxJQUFJLEdBQUdBO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0FBQ0osRUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cEFwcGxpY2F0aW9uTG9ncy5qcz83ZDc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdCc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb29rdXBBcHBsaWNhdGlvbkxvZ3MgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBsb2cgbWVzc2FnZXMgZ2VuZXJhdGVkIGJ5IHRoZSBwYXNzZWQgaW4gYXBwbGljYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwSWQgPSA2MDU1MzQ2NjtcbiAgICAgKiBjb25zdCBhcHBMb2dzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBcHBsaWNhdGlvbkxvZ3MoYXBwSWQpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFwcGxpY2F0aW9uc2FwcGxpY2F0aW9uLWlkbG9ncylcbiAgICAgKiBAcGFyYW0gYXBwSUQgLSBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uIHdoaWNoIGdlbmVyYXRlZCB0aGUgbG9ncy5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFwcElEKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5hcHBJRCA9IGFwcElEO1xuICAgICAgICB0aGlzLmFwcElEID0gYXBwSUQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYXBwbGljYXRpb25zLyR7YXBwSUR9L2xvZ3NgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXBwbGljYXRpb25zLyR7dGhpcy5hcHBJRH0vbG9nc2A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbWl0IHJlc3VsdHMgZm9yIHBhZ2luYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFwcExvZ3MgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbkxvZ3MoYXBwSWQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaW1pdCAtIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqL1xuICAgIGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubGltaXQgPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGUgcmVzdWx0cyBhdCBvciBhZnRlciB0aGUgc3BlY2lmaWVkIG1pbi1yb3VuZC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtaW5Sb3VuZCA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFwcExvZ3MgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbkxvZ3MoYXBwSWQpXG4gICAgICogICAgICAgIC5taW5Sb3VuZChtaW5Sb3VuZClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBtaW5Sb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydtaW4tcm91bmQnXSA9IHJvdW5kO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZSByZXN1bHRzIGF0IG9yIGJlZm9yZSB0aGUgc3BlY2lmaWVkIG1heC1yb3VuZC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSb3VuZCA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFwcExvZ3MgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbkxvZ3MoYXBwSWQpXG4gICAgICogICAgICAgIC5tYXhSb3VuZChtYXhSb3VuZClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBtYXhSb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydtYXgtcm91bmQnXSA9IHJvdW5kO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyNTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFwcExvZ3NQYWdlMSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9uTG9ncyhhcHBJZClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqXG4gICAgICogY29uc3QgYXBwTG9nc1BhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHRUb2tlbihhcHBMb2dzUGFnZTFbXCJuZXh0LXRva2VuXCJdKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dFRva2VuKSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHRUb2tlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9ubHkgaW5jbHVkZSB0cmFuc2FjdGlvbnMgd2l0aCB0aGlzIHNlbmRlciBhZGRyZXNzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHNlbmRlciA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFwcExvZ3MgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbkxvZ3MoYXBwSWQpXG4gICAgICogICAgICAgIC5zZW5kZXIoc2VuZGVyKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZW5kZXJBZGRyZXNzXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgc2VuZGVyKHNlbmRlckFkZHJlc3MpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnc2VuZGVyLWFkZHJlc3MnXSA9IHNlbmRlckFkZHJlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb29rdXAgdGhlIHNwZWNpZmljIHRyYW5zYWN0aW9uIGJ5IElELlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHR4SWQgPSBcIk1FVU9DNFJRSkIyM0NRWlJGUktZRUk2V0JPNzNWVFRQU1Q1QTdCM1M1T0tCVVk2TEZVREFcIjtcbiAgICAgKiBjb25zdCBhcHBMb2dzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKVxuICAgICAqICAgICAgICAudHhpZCh0eElkKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eGlkXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgdHhpZCh0eGlkKSB7XG4gICAgICAgIHRoaXMucXVlcnkudHhpZCA9IHR4aWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFwcGxpY2F0aW9uTG9ncy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJMb29rdXBBcHBsaWNhdGlvbkxvZ3MiLCJjb25zdHJ1Y3RvciIsImMiLCJpbnREZWNvZGluZyIsImFwcElEIiwicGF0aCIsImxpbWl0IiwicXVlcnkiLCJtaW5Sb3VuZCIsInJvdW5kIiwibWF4Um91bmQiLCJuZXh0VG9rZW4iLCJuZXh0Iiwic2VuZGVyIiwic2VuZGVyQWRkcmVzcyIsInR4aWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationLogs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplications.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplications.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupApplications)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupApplications extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about the passed application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient.lookupApplications(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\n     * @param index - The ID of the application to look up.\n     * @category GET\n     */ constructor(c, intDecoding, index){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/applications/${index}`\n     */ path() {\n        return `/v2/applications/${this.index}`;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient\n     *        .lookupApplications(appId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient\n     *        .lookupApplications(appId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n} //# sourceMappingURL=lookupApplications.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXBwbGljYXRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQzFCLE1BQU1DLDJCQUEyQkQsb0RBQVdBO0lBQ3ZEOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNERSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsS0FBSyxDQUFFO1FBQy9CLEtBQUssQ0FBQ0YsR0FBR0M7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNBLEtBQUssR0FBR0E7SUFDakI7SUFDQTs7S0FFQyxHQUNEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQUM7SUFDM0M7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F1QkMsR0FDREUsV0FBV0MsUUFBUSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDQyxLQUFLLENBQUMsY0FBYyxHQUFHRDtRQUM1QixPQUFPLElBQUk7SUFDZjtBQUNKLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbnMuanM/NzY2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQXBwbGljYXRpb25zIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBhc3NlZCBhcHBsaWNhdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBJZCA9IDYwNTUzNDY2O1xuICAgICAqIGNvbnN0IGFwcEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFwcGxpY2F0aW9ucyhhcHBJZCkuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWQpXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgaW5kZXgpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hcHBsaWNhdGlvbnMvJHtpbmRleH1gXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXBwbGljYXRpb25zLyR7dGhpcy5pbmRleH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlcyBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwSW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9ucyhhcHBJZClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoZmFsc2UpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwSWQgPSA2MDU1MzQ2NjtcbiAgICAgKiBjb25zdCBhcHBJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25zKGFwcElkKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbCgpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gZGVmYXVsdCB0cnVlIHdoZW4gY2FsbGVkIHdpdGhvdXQgcGFzc2luZyBhIHZhbHVlXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBBcHBsaWNhdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiTG9va3VwQXBwbGljYXRpb25zIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJpbmRleCIsInBhdGgiLCJpbmNsdWRlQWxsIiwidmFsdWUiLCJxdWVyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetBalances.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetBalances.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAssetBalances)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupAssetBalances extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns the list of accounts which hold the given asset and their balance.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\n     * @param index - The asset ID to look up.\n     */ constructor(c, intDecoding, index){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/assets/${index}/balances`\n     */ path() {\n        return `/v2/assets/${this.index}/balances`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxResults = 20;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Filtered results should have an asset balance greater than this value.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const minBalance = 1000000;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .currencyGreaterThan(minBalance)\n     *        .do();\n     * ```\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        this.query[\"currency-greater-than\"] = greater;\n        return this;\n    }\n    /**\n     * Filtered results should have an asset balance less than this value.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxBalance = 2000000;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .currencyLessThan(maxBalance)\n     *        .do();\n     * ```\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxResults = 20;\n     *\n     * const assetBalancesPage1 = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetBalancesPage2 = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .nextToken(assetBalancesPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n} //# sourceMappingURL=lookupAssetBalances.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXNzZXRCYWxhbmNlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUMxQixNQUFNQyw0QkFBNEJELG9EQUFXQTtJQUN4RDs7Ozs7Ozs7Ozs7S0FXQyxHQUNERSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsS0FBSyxDQUFFO1FBQy9CLEtBQUssQ0FBQ0YsR0FBR0M7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNBLEtBQUssR0FBR0E7SUFDakI7SUFDQTs7S0FFQyxHQUNEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNELEtBQUssQ0FBQyxTQUFTLENBQUM7SUFDOUM7SUFDQTs7Ozs7Ozs7Ozs7Ozs7O0tBZUMsR0FDREUsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLENBQUNELEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERSxvQkFBb0JDLE9BQU8sRUFBRTtRQUN6QixJQUFJLENBQUNGLEtBQUssQ0FBQyx3QkFBd0IsR0FBR0U7UUFDdEMsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNEQyxpQkFBaUJDLE1BQU0sRUFBRTtRQUNyQixJQUFJLENBQUNKLEtBQUssQ0FBQyxxQkFBcUIsR0FBR0k7UUFDbkMsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBcUJDLEdBQ0RDLFVBQVVBLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNMLEtBQUssQ0FBQ00sSUFBSSxHQUFHRDtRQUNsQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXVCQyxHQUNERSxXQUFXQyxRQUFRLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNSLEtBQUssQ0FBQyxjQUFjLEdBQUdRO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0FBQ0osRUFDQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cEFzc2V0QmFsYW5jZXMuanM/MTAwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQXNzZXRCYWxhbmNlcyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGFjY291bnRzIHdoaWNoIGhvbGQgdGhlIGdpdmVuIGFzc2V0IGFuZCB0aGVpciBiYWxhbmNlLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlcyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQXNzZXRCYWxhbmNlcyhhc3NldElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhc3NldHNhc3NldC1pZGJhbGFuY2VzKVxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBhc3NldCBJRCB0byBsb29rIHVwLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBpbmRleCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2Fzc2V0cy8ke2luZGV4fS9iYWxhbmNlc2BcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hc3NldHMvJHt0aGlzLmluZGV4fS9iYWxhbmNlc2A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbWl0IHJlc3VsdHMgZm9yIHBhZ2luYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVyZWQgcmVzdWx0cyBzaG91bGQgaGF2ZSBhbiBhc3NldCBiYWxhbmNlIGdyZWF0ZXIgdGhhbiB0aGlzIHZhbHVlLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgbWluQmFsYW5jZSA9IDEwMDAwMDA7XG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmN1cnJlbmN5R3JlYXRlclRoYW4obWluQmFsYW5jZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGdyZWF0ZXJcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBjdXJyZW5jeUdyZWF0ZXJUaGFuKGdyZWF0ZXIpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnY3VycmVuY3ktZ3JlYXRlci10aGFuJ10gPSBncmVhdGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVyZWQgcmVzdWx0cyBzaG91bGQgaGF2ZSBhbiBhc3NldCBiYWxhbmNlIGxlc3MgdGhhbiB0aGlzIHZhbHVlLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgbWF4QmFsYW5jZSA9IDIwMDAwMDA7XG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmN1cnJlbmN5TGVzc1RoYW4obWF4QmFsYW5jZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGxlc3NlclxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGN1cnJlbmN5TGVzc1RoYW4obGVzc2VyKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2N1cnJlbmN5LWxlc3MtdGhhbiddID0gbGVzc2VyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhc3NldEJhbGFuY2VzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFzc2V0QmFsYW5jZXNQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0VG9rZW4oYXNzZXRCYWxhbmNlc1BhZ2UxW1wibmV4dC10b2tlblwiXSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0VG9rZW4pIHtcbiAgICAgICAgdGhpcy5xdWVyeS5uZXh0ID0gbmV4dFRva2VuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZSBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXMuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFzc2V0QmFsYW5jZXMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGluY2x1ZGVBbGwodmFsdWUgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2luY2x1ZGUtYWxsJ10gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQXNzZXRCYWxhbmNlcy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJMb29rdXBBc3NldEJhbGFuY2VzIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJpbmRleCIsInBhdGgiLCJsaW1pdCIsInF1ZXJ5IiwiY3VycmVuY3lHcmVhdGVyVGhhbiIsImdyZWF0ZXIiLCJjdXJyZW5jeUxlc3NUaGFuIiwibGVzc2VyIiwibmV4dFRva2VuIiwibmV4dCIsImluY2x1ZGVBbGwiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetBalances.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetByID.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetByID.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAssetByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupAssetByID extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns asset information of the queried asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\n     * @param index - The asset ID to look up.\n     */ constructor(c, intDecoding, index){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/assets/${index}`\n     */ path() {\n        return `/v2/assets/${this.index}`;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient\n     *        .lookupAssetByID(assetId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient\n     *        .lookupAssetByID(assetId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n} //# sourceMappingURL=lookupAssetByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXNzZXRCeUlELmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQzFCLE1BQU1DLHdCQUF3QkQsb0RBQVdBO0lBQ3BEOzs7Ozs7Ozs7OztLQVdDLEdBQ0RFLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxLQUFLLENBQUU7UUFDL0IsS0FBSyxDQUFDRixHQUFHQztRQUNULElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtJQUNqQjtJQUNBOztLQUVDLEdBQ0RDLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQUM7SUFDckM7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F1QkMsR0FDREUsV0FBV0MsUUFBUSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDQyxLQUFLLENBQUMsY0FBYyxHQUFHRDtRQUM1QixPQUFPLElBQUk7SUFDZjtBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBc3NldEJ5SUQuanM/MTM0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQXNzZXRCeUlEIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXNzZXQgaW5mb3JtYXRpb24gb2YgdGhlIHF1ZXJpZWQgYXNzZXQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhc3NldEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFzc2V0QnlJRChhc3NldElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhc3NldHNhc3NldC1pZClcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgYXNzZXQgSUQgdG8gbG9vayB1cC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgaW5kZXgpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hc3NldHMvJHtpbmRleH1gXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXNzZXRzLyR7dGhpcy5pbmRleH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlcyBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBkZWZhdWx0IHRydWUgd2hlbiBjYWxsZWQgd2l0aG91dCBwYXNzaW5nIGEgdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFzc2V0QnlJRC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJMb29rdXBBc3NldEJ5SUQiLCJjb25zdHJ1Y3RvciIsImMiLCJpbnREZWNvZGluZyIsImluZGV4IiwicGF0aCIsImluY2x1ZGVBbGwiLCJ2YWx1ZSIsInF1ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetTransactions.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetTransactions.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAssetTransactions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _lookupAccountTransactions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lookupAccountTransactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js\");\n\n\nclass LookupAssetTransactions extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns transactions relating to the given asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\n     * @param index - The asset ID to look up.\n     */ constructor(c, intDecoding, index){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/assets/${index}/transactions`\n     */ path() {\n        return `/v2/assets/${this.index}/transactions`;\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */ notePrefix(prefix) {\n        this.query[\"note-prefix\"] = (0,_lookupAccountTransactions__WEBPACK_IMPORTED_MODULE_1__.base64StringFunnel)(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .txType(\"axfer\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`\n     * @category query\n     */ txType(type) {\n        this.query[\"tx-type\"] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .sigType(\"lsig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */ sigType(type) {\n        this.query[\"sig-type\"] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     *\n     * @param txid\n     * @category query\n     */ txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * @deprecated Redundant query parameter. Asset ID is already passed into the method.\n     */ assetID(id) {\n        this.query[\"asset-id\"] = id;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string\n     * @category query\n     */ beforeTime(before) {\n        this.query[\"before-time\"] = before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string\n     * @category query\n     */ afterTime(after) {\n        this.query[\"after-time\"] = after;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing asset units.\n     *\n     * #### Example\n     * ```typescript\n     * const minBalance = 300000;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * @remarks\n     * If you are looking for transactions with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude transactions with a 0 amount.\n     *\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        this.query[\"currency-greater-than\"] = greater;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing asset units.\n     *\n     * #### Example\n     * ```typescript\n     * const maxBalance = 500000;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * Combined with address, defines what address to filter on, as string.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const role = \"sender\";\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .address(address)\n     *        .addressRole(role)\n     *        .do();\n     * ```\n     *\n     * @param role - one of `sender`, `receiver`, `freeze-target`\n     * @category query\n     */ addressRole(role) {\n        this.query[\"address-role\"] = role;\n        return this;\n    }\n    /**\n     * Only include transactions with this address in one of the transaction fields.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .address(address)\n     *        .do();\n     * ```\n     *\n     * @param address\n     * @category query\n     */ address(address) {\n        this.query.address = address;\n        return this;\n    }\n    /**\n     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .excludeCloseTo(true)\n     *        .do();\n     * ```\n     *\n     * @param exclude\n     * @category query\n     */ excludeCloseTo(exclude) {\n        this.query[\"exclude-close-to\"] = exclude;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const assetId = 163650;\n     *\n     * const assetTxnsPage1 = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetTxnsPage2 = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .nextToken(assetTxnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */ rekeyTo(rekeyTo) {\n        this.query[\"rekey-to\"] = rekeyTo;\n        return this;\n    }\n} //# sourceMappingURL=lookupAssetTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupBlock.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupBlock.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupBlock)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupBlock extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns the block for the passed round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\n     * @param round - The number of the round to look up.\n     * @category GET\n     */ constructor(c, intDecoding, round){\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n    }\n    /**\n     * @returns `/v2/blocks/${round}`\n     */ path() {\n        return `/v2/blocks/${this.round}`;\n    }\n    /**\n     * Header only flag. When this is set to true, returned block does not contain the\n     * transactions.\n     */ headerOnly(headerOnly) {\n        this.query[\"header-only\"] = headerOnly;\n        return this;\n    }\n} //# sourceMappingURL=lookupBlock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQmxvY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDMUIsTUFBTUMsb0JBQW9CRCxvREFBV0E7SUFDaEQ7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RFLFlBQVlDLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxLQUFLLENBQUU7UUFDL0IsS0FBSyxDQUFDRixHQUFHQztRQUNULElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtJQUNqQjtJQUNBOztLQUVDLEdBQ0RDLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQUM7SUFDckM7SUFDQTs7O0tBR0MsR0FDREUsV0FBV0EsVUFBVSxFQUFFO1FBQ25CLElBQUksQ0FBQ0MsS0FBSyxDQUFDLGNBQWMsR0FBR0Q7UUFDNUIsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQmxvY2suanM/MDg2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQmxvY2sgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYmxvY2sgZm9yIHRoZSBwYXNzZWQgcm91bmQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdGFyZ2V0QmxvY2sgPSAxODMwOTkxNztcbiAgICAgKiBjb25zdCBibG9ja0luZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEJsb2NrKHRhcmdldEJsb2NrKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJibG9ja3Nyb3VuZC1udW1iZXIpXG4gICAgICogQHBhcmFtIHJvdW5kIC0gVGhlIG51bWJlciBvZiB0aGUgcm91bmQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgICAgICB0aGlzLnJvdW5kID0gcm91bmQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYmxvY2tzLyR7cm91bmR9YFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2Jsb2Nrcy8ke3RoaXMucm91bmR9YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVhZGVyIG9ubHkgZmxhZy4gV2hlbiB0aGlzIGlzIHNldCB0byB0cnVlLCByZXR1cm5lZCBibG9jayBkb2VzIG5vdCBjb250YWluIHRoZVxuICAgICAqIHRyYW5zYWN0aW9ucy5cbiAgICAgKi9cbiAgICBoZWFkZXJPbmx5KGhlYWRlck9ubHkpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaGVhZGVyLW9ubHknXSA9IGhlYWRlck9ubHk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEJsb2NrLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIkxvb2t1cEJsb2NrIiwiY29uc3RydWN0b3IiLCJjIiwiaW50RGVjb2RpbmciLCJyb3VuZCIsInBhdGgiLCJoZWFkZXJPbmx5IiwicXVlcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupTransactionByID.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupTransactionByID.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupTransactionByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass LookupTransactionByID extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about the given transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\n     * @param txID - The ID of the transaction to look up.\n     * @category GET\n     */ constructor(c, intDecoding, txID){\n        super(c, intDecoding);\n        this.txID = txID;\n        this.txID = txID;\n    }\n    /**\n     * @returns `/v2/transactions/${txID}`\n     */ path() {\n        return `/v2/transactions/${this.txID}`;\n    }\n} //# sourceMappingURL=lookupTransactionByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwVHJhbnNhY3Rpb25CeUlELmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQzFCLE1BQU1DLDhCQUE4QkQsb0RBQVdBO0lBQzFEOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNERSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsSUFBSSxDQUFFO1FBQzlCLEtBQUssQ0FBQ0YsR0FBR0M7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNBLElBQUksR0FBR0E7SUFDaEI7SUFDQTs7S0FFQyxHQUNEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUM7SUFDMUM7QUFDSixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwVHJhbnNhY3Rpb25CeUlELmpzP2E2MzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2t1cFRyYW5zYWN0aW9uQnlJRCBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBnaXZlbiB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB0eG5JZCA9IFwiTUVVT0M0UlFKQjIzQ1FaUkZSS1lFSTZXQk83M1ZUVFBTVDVBN0IzUzVPS0JVWTZMRlVEQVwiO1xuICAgICAqIGNvbnN0IHR4bkluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cFRyYW5zYWN0aW9uQnlJRCh0eG5JZCkuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYydHJhbnNhY3Rpb25zdHhpZClcbiAgICAgKiBAcGFyYW0gdHhJRCAtIFRoZSBJRCBvZiB0aGUgdHJhbnNhY3Rpb24gdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIHR4SUQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLnR4SUQgPSB0eElEO1xuICAgICAgICB0aGlzLnR4SUQgPSB0eElEO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL3RyYW5zYWN0aW9ucy8ke3R4SUR9YFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL3RyYW5zYWN0aW9ucy8ke3RoaXMudHhJRH1gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cFRyYW5zYWN0aW9uQnlJRC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJMb29rdXBUcmFuc2FjdGlvbkJ5SUQiLCJjb25zdHJ1Y3RvciIsImMiLCJpbnREZWNvZGluZyIsInR4SUQiLCJwYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupTransactionByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/makeHealthCheck.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/makeHealthCheck.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MakeHealthCheck)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * Returns the health object for the service.\n * Returns 200 if healthy.\n *\n * #### Example\n * ```typescript\n * const health = await indexerClient.makeHealthCheck().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\n * @category GET\n */ class MakeHealthCheck extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/health`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/health\";\n    }\n} //# sourceMappingURL=makeHealthCheck.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbWFrZUhlYWx0aENoZWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDOzs7Ozs7Ozs7OztDQVdDLEdBQ2MsTUFBTUMsd0JBQXdCRCxvREFBV0E7SUFDcEQ7O0tBRUMsR0FDRCxrREFBa0Q7SUFDbERFLE9BQU87UUFDSCxPQUFPO0lBQ1g7QUFDSixFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbWFrZUhlYWx0aENoZWNrLmpzPzVjYmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0Jztcbi8qKlxuICogUmV0dXJucyB0aGUgaGVhbHRoIG9iamVjdCBmb3IgdGhlIHNlcnZpY2UuXG4gKiBSZXR1cm5zIDIwMCBpZiBoZWFsdGh5LlxuICpcbiAqICMjIyMgRXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgaGVhbHRoID0gYXdhaXQgaW5kZXhlckNsaWVudC5tYWtlSGVhbHRoQ2hlY2soKS5kbygpO1xuICogYGBgXG4gKlxuICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtaGVhbHRoKVxuICogQGNhdGVnb3J5IEdFVFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWtlSGVhbHRoQ2hlY2sgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC9oZWFsdGhgXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy9oZWFsdGgnO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ha2VIZWFsdGhDaGVjay5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJNYWtlSGVhbHRoQ2hlY2siLCJwYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/makeHealthCheck.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AccountParticipation: () => (/* binding */ AccountParticipation),\n/* harmony export */   AccountResponse: () => (/* binding */ AccountResponse),\n/* harmony export */   AccountStateDelta: () => (/* binding */ AccountStateDelta),\n/* harmony export */   AccountsResponse: () => (/* binding */ AccountsResponse),\n/* harmony export */   Application: () => (/* binding */ Application),\n/* harmony export */   ApplicationLocalState: () => (/* binding */ ApplicationLocalState),\n/* harmony export */   ApplicationLocalStatesResponse: () => (/* binding */ ApplicationLocalStatesResponse),\n/* harmony export */   ApplicationLogData: () => (/* binding */ ApplicationLogData),\n/* harmony export */   ApplicationLogsResponse: () => (/* binding */ ApplicationLogsResponse),\n/* harmony export */   ApplicationParams: () => (/* binding */ ApplicationParams),\n/* harmony export */   ApplicationResponse: () => (/* binding */ ApplicationResponse),\n/* harmony export */   ApplicationStateSchema: () => (/* binding */ ApplicationStateSchema),\n/* harmony export */   ApplicationsResponse: () => (/* binding */ ApplicationsResponse),\n/* harmony export */   Asset: () => (/* binding */ Asset),\n/* harmony export */   AssetBalancesResponse: () => (/* binding */ AssetBalancesResponse),\n/* harmony export */   AssetHolding: () => (/* binding */ AssetHolding),\n/* harmony export */   AssetHoldingsResponse: () => (/* binding */ AssetHoldingsResponse),\n/* harmony export */   AssetParams: () => (/* binding */ AssetParams),\n/* harmony export */   AssetResponse: () => (/* binding */ AssetResponse),\n/* harmony export */   AssetsResponse: () => (/* binding */ AssetsResponse),\n/* harmony export */   Block: () => (/* binding */ Block),\n/* harmony export */   BlockRewards: () => (/* binding */ BlockRewards),\n/* harmony export */   BlockUpgradeState: () => (/* binding */ BlockUpgradeState),\n/* harmony export */   BlockUpgradeVote: () => (/* binding */ BlockUpgradeVote),\n/* harmony export */   Box: () => (/* binding */ Box),\n/* harmony export */   BoxDescriptor: () => (/* binding */ BoxDescriptor),\n/* harmony export */   BoxesResponse: () => (/* binding */ BoxesResponse),\n/* harmony export */   ErrorResponse: () => (/* binding */ ErrorResponse),\n/* harmony export */   EvalDelta: () => (/* binding */ EvalDelta),\n/* harmony export */   EvalDeltaKeyValue: () => (/* binding */ EvalDeltaKeyValue),\n/* harmony export */   HashFactory: () => (/* binding */ HashFactory),\n/* harmony export */   HealthCheck: () => (/* binding */ HealthCheck),\n/* harmony export */   IndexerStateProofMessage: () => (/* binding */ IndexerStateProofMessage),\n/* harmony export */   MerkleArrayProof: () => (/* binding */ MerkleArrayProof),\n/* harmony export */   MiniAssetHolding: () => (/* binding */ MiniAssetHolding),\n/* harmony export */   ParticipationUpdates: () => (/* binding */ ParticipationUpdates),\n/* harmony export */   StateProofFields: () => (/* binding */ StateProofFields),\n/* harmony export */   StateProofParticipant: () => (/* binding */ StateProofParticipant),\n/* harmony export */   StateProofReveal: () => (/* binding */ StateProofReveal),\n/* harmony export */   StateProofSigSlot: () => (/* binding */ StateProofSigSlot),\n/* harmony export */   StateProofSignature: () => (/* binding */ StateProofSignature),\n/* harmony export */   StateProofTracking: () => (/* binding */ StateProofTracking),\n/* harmony export */   StateProofVerifier: () => (/* binding */ StateProofVerifier),\n/* harmony export */   StateSchema: () => (/* binding */ StateSchema),\n/* harmony export */   TealKeyValue: () => (/* binding */ TealKeyValue),\n/* harmony export */   TealValue: () => (/* binding */ TealValue),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   TransactionApplication: () => (/* binding */ TransactionApplication),\n/* harmony export */   TransactionAssetConfig: () => (/* binding */ TransactionAssetConfig),\n/* harmony export */   TransactionAssetFreeze: () => (/* binding */ TransactionAssetFreeze),\n/* harmony export */   TransactionAssetTransfer: () => (/* binding */ TransactionAssetTransfer),\n/* harmony export */   TransactionKeyreg: () => (/* binding */ TransactionKeyreg),\n/* harmony export */   TransactionPayment: () => (/* binding */ TransactionPayment),\n/* harmony export */   TransactionResponse: () => (/* binding */ TransactionResponse),\n/* harmony export */   TransactionSignature: () => (/* binding */ TransactionSignature),\n/* harmony export */   TransactionSignatureLogicsig: () => (/* binding */ TransactionSignatureLogicsig),\n/* harmony export */   TransactionSignatureMultisig: () => (/* binding */ TransactionSignatureMultisig),\n/* harmony export */   TransactionSignatureMultisigSubsignature: () => (/* binding */ TransactionSignatureMultisigSubsignature),\n/* harmony export */   TransactionStateProof: () => (/* binding */ TransactionStateProof),\n/* harmony export */   TransactionsResponse: () => (/* binding */ TransactionsResponse)\n/* harmony export */ });\n/* harmony import */ var _basemodel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../basemodel */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/basemodel.js\");\n/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */ /* eslint-disable no-use-before-define */ \n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */ class Account extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Account` object.\n     * @param address - the account public key\n     * @param amount - (algo) total number of MicroAlgos in the account\n     * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n     * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n     * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n     * rewards.\n     * @param round - The round for which this information is relevant.\n     * @param status - (onl) delegation status of the account's MicroAlgos\n     * * Offline - indicates that the associated account is delegated.\n     * * Online - indicates that the associated account used as part of the delegation\n     * pool.\n     * * NotParticipating - indicates that the associated account is neither a\n     * delegator nor a delegate.\n     * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n     * of application local data (AppLocalState objects) stored in this account.\n     * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n     * AssetHolding objects held by this account.\n     * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n     * values of boxes which belong to the associated application.\n     * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n     * application.\n     * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n     * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n     * @param appsLocalState - (appl) applications local data stored in this account.\n     * Note the raw object uses `map[int] -> AppLocalState` for this type.\n     * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n     * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n     * account.\n     * Note: the raw account uses `StateSchema` for this type.\n     * @param assets - (asset) assets held by this account.\n     * Note the raw object uses `map[int] -> AssetHolding` for this type.\n     * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n     * address of the current account is used. This field can be updated in any\n     * transaction by setting the RekeyTo field.\n     * @param closedAtRound - Round during which this account was most recently closed.\n     * @param createdApps - (appp) parameters of applications created by this account including app global\n     * data.\n     * Note: the raw account uses `map[int] -> AppParams` for this type.\n     * @param createdAssets - (apar) parameters of assets created by this account.\n     * Note: the raw account uses `map[int] -> Asset` for this type.\n     * @param createdAtRound - Round during which this account first appeared in a transaction.\n     * @param deleted - Whether or not this account is currently closed.\n     * @param participation - AccountParticipation describes the parameters used by this account in consensus\n     * protocol.\n     * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n     * which are participating.\n     * @param sigType - Indicates what type of signature is used by this account, must be one of:\n     * * sig\n     * * msig\n     * * lsig\n     * * or null if unknown\n     */ constructor({ address, amount, amountWithoutPendingRewards, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalBoxBytes, totalBoxes, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, closedAtRound, createdApps, createdAssets, createdAtRound, deleted, participation, rewardBase, sigType }){\n        super();\n        this.address = address;\n        this.amount = amount;\n        this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n        this.pendingRewards = pendingRewards;\n        this.rewards = rewards;\n        this.round = round;\n        this.status = status;\n        this.totalAppsOptedIn = totalAppsOptedIn;\n        this.totalAssetsOptedIn = totalAssetsOptedIn;\n        this.totalBoxBytes = totalBoxBytes;\n        this.totalBoxes = totalBoxes;\n        this.totalCreatedApps = totalCreatedApps;\n        this.totalCreatedAssets = totalCreatedAssets;\n        this.appsLocalState = appsLocalState;\n        this.appsTotalExtraPages = appsTotalExtraPages;\n        this.appsTotalSchema = appsTotalSchema;\n        this.assets = assets;\n        this.authAddr = authAddr;\n        this.closedAtRound = closedAtRound;\n        this.createdApps = createdApps;\n        this.createdAssets = createdAssets;\n        this.createdAtRound = createdAtRound;\n        this.deleted = deleted;\n        this.participation = participation;\n        this.rewardBase = rewardBase;\n        this.sigType = sigType;\n        this.attribute_map = {\n            address: \"address\",\n            amount: \"amount\",\n            amountWithoutPendingRewards: \"amount-without-pending-rewards\",\n            pendingRewards: \"pending-rewards\",\n            rewards: \"rewards\",\n            round: \"round\",\n            status: \"status\",\n            totalAppsOptedIn: \"total-apps-opted-in\",\n            totalAssetsOptedIn: \"total-assets-opted-in\",\n            totalBoxBytes: \"total-box-bytes\",\n            totalBoxes: \"total-boxes\",\n            totalCreatedApps: \"total-created-apps\",\n            totalCreatedAssets: \"total-created-assets\",\n            appsLocalState: \"apps-local-state\",\n            appsTotalExtraPages: \"apps-total-extra-pages\",\n            appsTotalSchema: \"apps-total-schema\",\n            assets: \"assets\",\n            authAddr: \"auth-addr\",\n            closedAtRound: \"closed-at-round\",\n            createdApps: \"created-apps\",\n            createdAssets: \"created-assets\",\n            createdAtRound: \"created-at-round\",\n            deleted: \"deleted\",\n            participation: \"participation\",\n            rewardBase: \"reward-base\",\n            sigType: \"sig-type\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"address\"] === \"undefined\") throw new Error(`Response is missing required field 'address': ${data}`);\n        if (typeof data[\"amount\"] === \"undefined\") throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data[\"amount-without-pending-rewards\"] === \"undefined\") throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n        if (typeof data[\"pending-rewards\"] === \"undefined\") throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n        if (typeof data[\"rewards\"] === \"undefined\") throw new Error(`Response is missing required field 'rewards': ${data}`);\n        if (typeof data[\"round\"] === \"undefined\") throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data[\"status\"] === \"undefined\") throw new Error(`Response is missing required field 'status': ${data}`);\n        if (typeof data[\"total-apps-opted-in\"] === \"undefined\") throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n        if (typeof data[\"total-assets-opted-in\"] === \"undefined\") throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n        if (typeof data[\"total-box-bytes\"] === \"undefined\") throw new Error(`Response is missing required field 'total-box-bytes': ${data}`);\n        if (typeof data[\"total-boxes\"] === \"undefined\") throw new Error(`Response is missing required field 'total-boxes': ${data}`);\n        if (typeof data[\"total-created-apps\"] === \"undefined\") throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n        if (typeof data[\"total-created-assets\"] === \"undefined\") throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n        return new Account({\n            address: data[\"address\"],\n            amount: data[\"amount\"],\n            amountWithoutPendingRewards: data[\"amount-without-pending-rewards\"],\n            pendingRewards: data[\"pending-rewards\"],\n            rewards: data[\"rewards\"],\n            round: data[\"round\"],\n            status: data[\"status\"],\n            totalAppsOptedIn: data[\"total-apps-opted-in\"],\n            totalAssetsOptedIn: data[\"total-assets-opted-in\"],\n            totalBoxBytes: data[\"total-box-bytes\"],\n            totalBoxes: data[\"total-boxes\"],\n            totalCreatedApps: data[\"total-created-apps\"],\n            totalCreatedAssets: data[\"total-created-assets\"],\n            appsLocalState: typeof data[\"apps-local-state\"] !== \"undefined\" ? data[\"apps-local-state\"].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n            appsTotalExtraPages: data[\"apps-total-extra-pages\"],\n            appsTotalSchema: typeof data[\"apps-total-schema\"] !== \"undefined\" ? ApplicationStateSchema.from_obj_for_encoding(data[\"apps-total-schema\"]) : undefined,\n            assets: typeof data[\"assets\"] !== \"undefined\" ? data[\"assets\"].map(AssetHolding.from_obj_for_encoding) : undefined,\n            authAddr: data[\"auth-addr\"],\n            closedAtRound: data[\"closed-at-round\"],\n            createdApps: typeof data[\"created-apps\"] !== \"undefined\" ? data[\"created-apps\"].map(Application.from_obj_for_encoding) : undefined,\n            createdAssets: typeof data[\"created-assets\"] !== \"undefined\" ? data[\"created-assets\"].map(Asset.from_obj_for_encoding) : undefined,\n            createdAtRound: data[\"created-at-round\"],\n            deleted: data[\"deleted\"],\n            participation: typeof data[\"participation\"] !== \"undefined\" ? AccountParticipation.from_obj_for_encoding(data[\"participation\"]) : undefined,\n            rewardBase: data[\"reward-base\"],\n            sigType: data[\"sig-type\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */ class AccountParticipation extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AccountParticipation` object.\n     * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n     * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n     * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n     * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n     * round.\n     * @param stateProofKey - (stprf) Root of the state proof key (if any)\n     */ constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey }){\n        super();\n        this.selectionParticipationKey = typeof selectionParticipationKey === \"string\" ? new Uint8Array(Buffer.from(selectionParticipationKey, \"base64\")) : selectionParticipationKey;\n        this.voteFirstValid = voteFirstValid;\n        this.voteKeyDilution = voteKeyDilution;\n        this.voteLastValid = voteLastValid;\n        this.voteParticipationKey = typeof voteParticipationKey === \"string\" ? new Uint8Array(Buffer.from(voteParticipationKey, \"base64\")) : voteParticipationKey;\n        this.stateProofKey = typeof stateProofKey === \"string\" ? new Uint8Array(Buffer.from(stateProofKey, \"base64\")) : stateProofKey;\n        this.attribute_map = {\n            selectionParticipationKey: \"selection-participation-key\",\n            voteFirstValid: \"vote-first-valid\",\n            voteKeyDilution: \"vote-key-dilution\",\n            voteLastValid: \"vote-last-valid\",\n            voteParticipationKey: \"vote-participation-key\",\n            stateProofKey: \"state-proof-key\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"selection-participation-key\"] === \"undefined\") throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n        if (typeof data[\"vote-first-valid\"] === \"undefined\") throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n        if (typeof data[\"vote-key-dilution\"] === \"undefined\") throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n        if (typeof data[\"vote-last-valid\"] === \"undefined\") throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n        if (typeof data[\"vote-participation-key\"] === \"undefined\") throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n        return new AccountParticipation({\n            selectionParticipationKey: data[\"selection-participation-key\"],\n            voteFirstValid: data[\"vote-first-valid\"],\n            voteKeyDilution: data[\"vote-key-dilution\"],\n            voteLastValid: data[\"vote-last-valid\"],\n            voteParticipationKey: data[\"vote-participation-key\"],\n            stateProofKey: data[\"state-proof-key\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class AccountResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AccountResponse` object.\n     * @param account - Account information at a given round.\n     * Definition:\n     * data/basics/userBalance.go : AccountData\n     * @param currentRound - Round at which the results were computed.\n     */ constructor({ account, currentRound }){\n        super();\n        this.account = account;\n        this.currentRound = currentRound;\n        this.attribute_map = {\n            account: \"account\",\n            currentRound: \"current-round\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"account\"] === \"undefined\") throw new Error(`Response is missing required field 'account': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AccountResponse({\n            account: Account.from_obj_for_encoding(data[\"account\"]),\n            currentRound: data[\"current-round\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Application state delta.\n */ class AccountStateDelta extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AccountStateDelta` object.\n     * @param address -\n     * @param delta - Application state delta.\n     */ constructor({ address, delta }){\n        super();\n        this.address = address;\n        this.delta = delta;\n        this.attribute_map = {\n            address: \"address\",\n            delta: \"delta\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"address\"] === \"undefined\") throw new Error(`Response is missing required field 'address': ${data}`);\n        if (!Array.isArray(data[\"delta\"])) throw new Error(`Response is missing required array field 'delta': ${data}`);\n        return new AccountStateDelta({\n            address: data[\"address\"],\n            delta: data[\"delta\"].map(EvalDeltaKeyValue.from_obj_for_encoding)\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class AccountsResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AccountsResponse` object.\n     * @param accounts -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ accounts, currentRound, nextToken }){\n        super();\n        this.accounts = accounts;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            accounts: \"accounts\",\n            currentRound: \"current-round\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"accounts\"])) throw new Error(`Response is missing required array field 'accounts': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AccountsResponse({\n            accounts: data[\"accounts\"].map(Account.from_obj_for_encoding),\n            currentRound: data[\"current-round\"],\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Application index and its parameters\n */ class Application extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Application` object.\n     * @param id - (appidx) application index.\n     * @param params - (appparams) application parameters.\n     * @param createdAtRound - Round when this application was created.\n     * @param deleted - Whether or not this application is currently deleted.\n     * @param deletedAtRound - Round when this application was deleted.\n     */ constructor({ id, params, createdAtRound, deleted, deletedAtRound }){\n        super();\n        this.id = id;\n        this.params = params;\n        this.createdAtRound = createdAtRound;\n        this.deleted = deleted;\n        this.deletedAtRound = deletedAtRound;\n        this.attribute_map = {\n            id: \"id\",\n            params: \"params\",\n            createdAtRound: \"created-at-round\",\n            deleted: \"deleted\",\n            deletedAtRound: \"deleted-at-round\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"id\"] === \"undefined\") throw new Error(`Response is missing required field 'id': ${data}`);\n        if (typeof data[\"params\"] === \"undefined\") throw new Error(`Response is missing required field 'params': ${data}`);\n        return new Application({\n            id: data[\"id\"],\n            params: ApplicationParams.from_obj_for_encoding(data[\"params\"]),\n            createdAtRound: data[\"created-at-round\"],\n            deleted: data[\"deleted\"],\n            deletedAtRound: data[\"deleted-at-round\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Stores local state associated with an application.\n */ class ApplicationLocalState extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationLocalState` object.\n     * @param id - The application which this local state is for.\n     * @param schema - (hsch) schema.\n     * @param closedOutAtRound - Round when account closed out of the application.\n     * @param deleted - Whether or not the application local state is currently deleted from its\n     * account.\n     * @param keyValue - (tkv) storage.\n     * @param optedInAtRound - Round when the account opted into the application.\n     */ constructor({ id, schema, closedOutAtRound, deleted, keyValue, optedInAtRound }){\n        super();\n        this.id = id;\n        this.schema = schema;\n        this.closedOutAtRound = closedOutAtRound;\n        this.deleted = deleted;\n        this.keyValue = keyValue;\n        this.optedInAtRound = optedInAtRound;\n        this.attribute_map = {\n            id: \"id\",\n            schema: \"schema\",\n            closedOutAtRound: \"closed-out-at-round\",\n            deleted: \"deleted\",\n            keyValue: \"key-value\",\n            optedInAtRound: \"opted-in-at-round\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"id\"] === \"undefined\") throw new Error(`Response is missing required field 'id': ${data}`);\n        if (typeof data[\"schema\"] === \"undefined\") throw new Error(`Response is missing required field 'schema': ${data}`);\n        return new ApplicationLocalState({\n            id: data[\"id\"],\n            schema: ApplicationStateSchema.from_obj_for_encoding(data[\"schema\"]),\n            closedOutAtRound: data[\"closed-out-at-round\"],\n            deleted: data[\"deleted\"],\n            keyValue: typeof data[\"key-value\"] !== \"undefined\" ? data[\"key-value\"].map(TealKeyValue.from_obj_for_encoding) : undefined,\n            optedInAtRound: data[\"opted-in-at-round\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class ApplicationLocalStatesResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationLocalStatesResponse` object.\n     * @param appsLocalStates -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ appsLocalStates, currentRound, nextToken }){\n        super();\n        this.appsLocalStates = appsLocalStates;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            appsLocalStates: \"apps-local-states\",\n            currentRound: \"current-round\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"apps-local-states\"])) throw new Error(`Response is missing required array field 'apps-local-states': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new ApplicationLocalStatesResponse({\n            appsLocalStates: data[\"apps-local-states\"].map(ApplicationLocalState.from_obj_for_encoding),\n            currentRound: data[\"current-round\"],\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Stores the global information associated with an application.\n */ class ApplicationLogData extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationLogData` object.\n     * @param logs - (lg) Logs for the application being executed by the transaction.\n     * @param txid - Transaction ID\n     */ constructor({ logs, txid }){\n        super();\n        this.logs = logs;\n        this.txid = txid;\n        this.attribute_map = {\n            logs: \"logs\",\n            txid: \"txid\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"logs\"])) throw new Error(`Response is missing required array field 'logs': ${data}`);\n        if (typeof data[\"txid\"] === \"undefined\") throw new Error(`Response is missing required field 'txid': ${data}`);\n        return new ApplicationLogData({\n            logs: data[\"logs\"],\n            txid: data[\"txid\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class ApplicationLogsResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationLogsResponse` object.\n     * @param applicationId - (appidx) application index.\n     * @param currentRound - Round at which the results were computed.\n     * @param logData -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ applicationId, currentRound, logData, nextToken }){\n        super();\n        this.applicationId = applicationId;\n        this.currentRound = currentRound;\n        this.logData = logData;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            applicationId: \"application-id\",\n            currentRound: \"current-round\",\n            logData: \"log-data\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"application-id\"] === \"undefined\") throw new Error(`Response is missing required field 'application-id': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new ApplicationLogsResponse({\n            applicationId: data[\"application-id\"],\n            currentRound: data[\"current-round\"],\n            logData: typeof data[\"log-data\"] !== \"undefined\" ? data[\"log-data\"].map(ApplicationLogData.from_obj_for_encoding) : undefined,\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Stores the global information associated with an application.\n */ class ApplicationParams extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationParams` object.\n     * @param approvalProgram - (approv) approval program.\n     * @param clearStateProgram - (clearp) approval program.\n     * @param creator - The address that created this application. This is the address where the\n     * parameters and global state for this application can be found.\n     * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n     * @param globalState - [\\gs) global schema\n     * @param globalStateSchema - [\\gsch) global schema\n     * @param localStateSchema - [\\lsch) local schema\n     */ constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema }){\n        super();\n        this.approvalProgram = typeof approvalProgram === \"string\" ? new Uint8Array(Buffer.from(approvalProgram, \"base64\")) : approvalProgram;\n        this.clearStateProgram = typeof clearStateProgram === \"string\" ? new Uint8Array(Buffer.from(clearStateProgram, \"base64\")) : clearStateProgram;\n        this.creator = creator;\n        this.extraProgramPages = extraProgramPages;\n        this.globalState = globalState;\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.attribute_map = {\n            approvalProgram: \"approval-program\",\n            clearStateProgram: \"clear-state-program\",\n            creator: \"creator\",\n            extraProgramPages: \"extra-program-pages\",\n            globalState: \"global-state\",\n            globalStateSchema: \"global-state-schema\",\n            localStateSchema: \"local-state-schema\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"approval-program\"] === \"undefined\") throw new Error(`Response is missing required field 'approval-program': ${data}`);\n        if (typeof data[\"clear-state-program\"] === \"undefined\") throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n        return new ApplicationParams({\n            approvalProgram: data[\"approval-program\"],\n            clearStateProgram: data[\"clear-state-program\"],\n            creator: data[\"creator\"],\n            extraProgramPages: data[\"extra-program-pages\"],\n            globalState: typeof data[\"global-state\"] !== \"undefined\" ? data[\"global-state\"].map(TealKeyValue.from_obj_for_encoding) : undefined,\n            globalStateSchema: typeof data[\"global-state-schema\"] !== \"undefined\" ? ApplicationStateSchema.from_obj_for_encoding(data[\"global-state-schema\"]) : undefined,\n            localStateSchema: typeof data[\"local-state-schema\"] !== \"undefined\" ? ApplicationStateSchema.from_obj_for_encoding(data[\"local-state-schema\"]) : undefined\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class ApplicationResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param application - Application index and its parameters\n     */ constructor({ currentRound, application }){\n        super();\n        this.currentRound = currentRound;\n        this.application = application;\n        this.attribute_map = {\n            currentRound: \"current-round\",\n            application: \"application\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new ApplicationResponse({\n            currentRound: data[\"current-round\"],\n            application: typeof data[\"application\"] !== \"undefined\" ? Application.from_obj_for_encoding(data[\"application\"]) : undefined\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */ class ApplicationStateSchema extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationStateSchema` object.\n     * @param numByteSlice - (nbs) num of byte slices.\n     * @param numUint - (nui) num of uints.\n     */ constructor({ numByteSlice, numUint }){\n        super();\n        this.numByteSlice = numByteSlice;\n        this.numUint = numUint;\n        this.attribute_map = {\n            numByteSlice: \"num-byte-slice\",\n            numUint: \"num-uint\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"num-byte-slice\"] === \"undefined\") throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n        if (typeof data[\"num-uint\"] === \"undefined\") throw new Error(`Response is missing required field 'num-uint': ${data}`);\n        return new ApplicationStateSchema({\n            numByteSlice: data[\"num-byte-slice\"],\n            numUint: data[\"num-uint\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class ApplicationsResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ApplicationsResponse` object.\n     * @param applications -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ applications, currentRound, nextToken }){\n        super();\n        this.applications = applications;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            applications: \"applications\",\n            currentRound: \"current-round\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"applications\"])) throw new Error(`Response is missing required array field 'applications': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new ApplicationsResponse({\n            applications: data[\"applications\"].map(Application.from_obj_for_encoding),\n            currentRound: data[\"current-round\"],\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */ class Asset extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Asset` object.\n     * @param index - unique asset identifier\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     * @param createdAtRound - Round during which this asset was created.\n     * @param deleted - Whether or not this asset is currently deleted.\n     * @param destroyedAtRound - Round during which this asset was destroyed.\n     */ constructor({ index, params, createdAtRound, deleted, destroyedAtRound }){\n        super();\n        this.index = index;\n        this.params = params;\n        this.createdAtRound = createdAtRound;\n        this.deleted = deleted;\n        this.destroyedAtRound = destroyedAtRound;\n        this.attribute_map = {\n            index: \"index\",\n            params: \"params\",\n            createdAtRound: \"created-at-round\",\n            deleted: \"deleted\",\n            destroyedAtRound: \"destroyed-at-round\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"index\"] === \"undefined\") throw new Error(`Response is missing required field 'index': ${data}`);\n        if (typeof data[\"params\"] === \"undefined\") throw new Error(`Response is missing required field 'params': ${data}`);\n        return new Asset({\n            index: data[\"index\"],\n            params: AssetParams.from_obj_for_encoding(data[\"params\"]),\n            createdAtRound: data[\"created-at-round\"],\n            deleted: data[\"deleted\"],\n            destroyedAtRound: data[\"destroyed-at-round\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class AssetBalancesResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AssetBalancesResponse` object.\n     * @param balances -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ balances, currentRound, nextToken }){\n        super();\n        this.balances = balances;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            balances: \"balances\",\n            currentRound: \"current-round\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"balances\"])) throw new Error(`Response is missing required array field 'balances': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AssetBalancesResponse({\n            balances: data[\"balances\"].map(MiniAssetHolding.from_obj_for_encoding),\n            currentRound: data[\"current-round\"],\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */ class AssetHolding extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AssetHolding` object.\n     * @param amount - (a) number of units held.\n     * @param assetId - Asset ID of the holding.\n     * @param isFrozen - (f) whether or not the holding is frozen.\n     * @param deleted - Whether or not the asset holding is currently deleted from its account.\n     * @param optedInAtRound - Round during which the account opted into this asset holding.\n     * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n     */ constructor({ amount, assetId, isFrozen, deleted, optedInAtRound, optedOutAtRound }){\n        super();\n        this.amount = amount;\n        this.assetId = assetId;\n        this.isFrozen = isFrozen;\n        this.deleted = deleted;\n        this.optedInAtRound = optedInAtRound;\n        this.optedOutAtRound = optedOutAtRound;\n        this.attribute_map = {\n            amount: \"amount\",\n            assetId: \"asset-id\",\n            isFrozen: \"is-frozen\",\n            deleted: \"deleted\",\n            optedInAtRound: \"opted-in-at-round\",\n            optedOutAtRound: \"opted-out-at-round\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"amount\"] === \"undefined\") throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data[\"asset-id\"] === \"undefined\") throw new Error(`Response is missing required field 'asset-id': ${data}`);\n        if (typeof data[\"is-frozen\"] === \"undefined\") throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n        return new AssetHolding({\n            amount: data[\"amount\"],\n            assetId: data[\"asset-id\"],\n            isFrozen: data[\"is-frozen\"],\n            deleted: data[\"deleted\"],\n            optedInAtRound: data[\"opted-in-at-round\"],\n            optedOutAtRound: data[\"opted-out-at-round\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class AssetHoldingsResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AssetHoldingsResponse` object.\n     * @param assets -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ assets, currentRound, nextToken }){\n        super();\n        this.assets = assets;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            assets: \"assets\",\n            currentRound: \"current-round\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"assets\"])) throw new Error(`Response is missing required array field 'assets': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AssetHoldingsResponse({\n            assets: data[\"assets\"].map(AssetHolding.from_obj_for_encoding),\n            currentRound: data[\"current-round\"],\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */ class AssetParams extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AssetParams` object.\n     * @param creator - The address that created this asset. This is the address where the parameters\n     * for this asset can be found, and also the address where unwanted asset units can\n     * be sent in the worst case.\n     * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n     * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n     * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n     * must be between 0 and 19 (inclusive).\n     * @param total - (t) The total number of units of this asset.\n     * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n     * clawback is not permitted.\n     * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n     * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n     * is not permitted.\n     * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n     * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n     * metadata is up to the application.\n     * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n     * asset name is composed of printable utf-8 characters.\n     * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n     * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n     * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n     * when the name of a unit of this asset is composed of printable utf-8 characters.\n     * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n     * @param url - (au) URL where more information about the asset can be retrieved. Included only\n     * when the URL is composed of printable utf-8 characters.\n     * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n     */ constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64 }){\n        super();\n        this.creator = creator;\n        this.decimals = decimals;\n        this.total = total;\n        this.clawback = clawback;\n        this.defaultFrozen = defaultFrozen;\n        this.freeze = freeze;\n        this.manager = manager;\n        this.metadataHash = typeof metadataHash === \"string\" ? new Uint8Array(Buffer.from(metadataHash, \"base64\")) : metadataHash;\n        this.name = name;\n        this.nameB64 = typeof nameB64 === \"string\" ? new Uint8Array(Buffer.from(nameB64, \"base64\")) : nameB64;\n        this.reserve = reserve;\n        this.unitName = unitName;\n        this.unitNameB64 = typeof unitNameB64 === \"string\" ? new Uint8Array(Buffer.from(unitNameB64, \"base64\")) : unitNameB64;\n        this.url = url;\n        this.urlB64 = typeof urlB64 === \"string\" ? new Uint8Array(Buffer.from(urlB64, \"base64\")) : urlB64;\n        this.attribute_map = {\n            creator: \"creator\",\n            decimals: \"decimals\",\n            total: \"total\",\n            clawback: \"clawback\",\n            defaultFrozen: \"default-frozen\",\n            freeze: \"freeze\",\n            manager: \"manager\",\n            metadataHash: \"metadata-hash\",\n            name: \"name\",\n            nameB64: \"name-b64\",\n            reserve: \"reserve\",\n            unitName: \"unit-name\",\n            unitNameB64: \"unit-name-b64\",\n            url: \"url\",\n            urlB64: \"url-b64\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"creator\"] === \"undefined\") throw new Error(`Response is missing required field 'creator': ${data}`);\n        if (typeof data[\"decimals\"] === \"undefined\") throw new Error(`Response is missing required field 'decimals': ${data}`);\n        if (typeof data[\"total\"] === \"undefined\") throw new Error(`Response is missing required field 'total': ${data}`);\n        return new AssetParams({\n            creator: data[\"creator\"],\n            decimals: data[\"decimals\"],\n            total: data[\"total\"],\n            clawback: data[\"clawback\"],\n            defaultFrozen: data[\"default-frozen\"],\n            freeze: data[\"freeze\"],\n            manager: data[\"manager\"],\n            metadataHash: data[\"metadata-hash\"],\n            name: data[\"name\"],\n            nameB64: data[\"name-b64\"],\n            reserve: data[\"reserve\"],\n            unitName: data[\"unit-name\"],\n            unitNameB64: data[\"unit-name-b64\"],\n            url: data[\"url\"],\n            urlB64: data[\"url-b64\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class AssetResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AssetResponse` object.\n     * @param asset - Specifies both the unique identifier and the parameters for an asset\n     * @param currentRound - Round at which the results were computed.\n     */ constructor({ asset, currentRound }){\n        super();\n        this.asset = asset;\n        this.currentRound = currentRound;\n        this.attribute_map = {\n            asset: \"asset\",\n            currentRound: \"current-round\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"asset\"] === \"undefined\") throw new Error(`Response is missing required field 'asset': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AssetResponse({\n            asset: Asset.from_obj_for_encoding(data[\"asset\"]),\n            currentRound: data[\"current-round\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class AssetsResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `AssetsResponse` object.\n     * @param assets -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ assets, currentRound, nextToken }){\n        super();\n        this.assets = assets;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            assets: \"assets\",\n            currentRound: \"current-round\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (!Array.isArray(data[\"assets\"])) throw new Error(`Response is missing required array field 'assets': ${data}`);\n        if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AssetsResponse({\n            assets: data[\"assets\"].map(Asset.from_obj_for_encoding),\n            currentRound: data[\"current-round\"],\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */ class Block extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Block` object.\n     * @param genesisHash - (gh) hash to which this block belongs.\n     * @param genesisId - (gen) ID to which this block belongs.\n     * @param previousBlockHash - (prev) Previous block hash.\n     * @param round - (rnd) Current round on which this block was appended to the chain.\n     * @param seed - (seed) Sortition seed.\n     * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n     * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n     * block. More specifically, it's the root of a merkle tree whose leaves are the\n     * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n     * the TxnRoot does not authenticate the signatures on the transactions, only the\n     * transactions themselves. Two blocks with the same transactions but in a\n     * different order and with different signatures will have the same TxnRoot.\n     * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n     * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n     * the default SHA512_256. This commitment can be used on environments where only\n     * the SHA256 function exists.\n     * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n     * @param rewards - Fields relating to rewards,\n     * @param stateProofTracking - Tracks the status of state proofs.\n     * @param transactions - (txns) list of transactions corresponding to a given round.\n     * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n     * the time at which support for this feature was introduced.\n     * Specifically, TxnCounter is the number of the next transaction that will be\n     * committed after this block. It is 0 when no transactions have ever been\n     * committed (since TxnCounter started being supported).\n     * @param upgradeState - Fields relating to a protocol upgrade.\n     * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n     */ constructor({ genesisHash, genesisId, previousBlockHash, round, seed, timestamp, transactionsRoot, transactionsRootSha256, participationUpdates, rewards, stateProofTracking, transactions, txnCounter, upgradeState, upgradeVote }){\n        super();\n        this.genesisHash = typeof genesisHash === \"string\" ? new Uint8Array(Buffer.from(genesisHash, \"base64\")) : genesisHash;\n        this.genesisId = genesisId;\n        this.previousBlockHash = typeof previousBlockHash === \"string\" ? new Uint8Array(Buffer.from(previousBlockHash, \"base64\")) : previousBlockHash;\n        this.round = round;\n        this.seed = typeof seed === \"string\" ? new Uint8Array(Buffer.from(seed, \"base64\")) : seed;\n        this.timestamp = timestamp;\n        this.transactionsRoot = typeof transactionsRoot === \"string\" ? new Uint8Array(Buffer.from(transactionsRoot, \"base64\")) : transactionsRoot;\n        this.transactionsRootSha256 = typeof transactionsRootSha256 === \"string\" ? new Uint8Array(Buffer.from(transactionsRootSha256, \"base64\")) : transactionsRootSha256;\n        this.participationUpdates = participationUpdates;\n        this.rewards = rewards;\n        this.stateProofTracking = stateProofTracking;\n        this.transactions = transactions;\n        this.txnCounter = txnCounter;\n        this.upgradeState = upgradeState;\n        this.upgradeVote = upgradeVote;\n        this.attribute_map = {\n            genesisHash: \"genesis-hash\",\n            genesisId: \"genesis-id\",\n            previousBlockHash: \"previous-block-hash\",\n            round: \"round\",\n            seed: \"seed\",\n            timestamp: \"timestamp\",\n            transactionsRoot: \"transactions-root\",\n            transactionsRootSha256: \"transactions-root-sha256\",\n            participationUpdates: \"participation-updates\",\n            rewards: \"rewards\",\n            stateProofTracking: \"state-proof-tracking\",\n            transactions: \"transactions\",\n            txnCounter: \"txn-counter\",\n            upgradeState: \"upgrade-state\",\n            upgradeVote: \"upgrade-vote\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"genesis-hash\"] === \"undefined\") throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n        if (typeof data[\"genesis-id\"] === \"undefined\") throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n        if (typeof data[\"previous-block-hash\"] === \"undefined\") throw new Error(`Response is missing required field 'previous-block-hash': ${data}`);\n        if (typeof data[\"round\"] === \"undefined\") throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data[\"seed\"] === \"undefined\") throw new Error(`Response is missing required field 'seed': ${data}`);\n        if (typeof data[\"timestamp\"] === \"undefined\") throw new Error(`Response is missing required field 'timestamp': ${data}`);\n        if (typeof data[\"transactions-root\"] === \"undefined\") throw new Error(`Response is missing required field 'transactions-root': ${data}`);\n        if (typeof data[\"transactions-root-sha256\"] === \"undefined\") throw new Error(`Response is missing required field 'transactions-root-sha256': ${data}`);\n        return new Block({\n            genesisHash: data[\"genesis-hash\"],\n            genesisId: data[\"genesis-id\"],\n            previousBlockHash: data[\"previous-block-hash\"],\n            round: data[\"round\"],\n            seed: data[\"seed\"],\n            timestamp: data[\"timestamp\"],\n            transactionsRoot: data[\"transactions-root\"],\n            transactionsRootSha256: data[\"transactions-root-sha256\"],\n            participationUpdates: typeof data[\"participation-updates\"] !== \"undefined\" ? ParticipationUpdates.from_obj_for_encoding(data[\"participation-updates\"]) : undefined,\n            rewards: typeof data[\"rewards\"] !== \"undefined\" ? BlockRewards.from_obj_for_encoding(data[\"rewards\"]) : undefined,\n            stateProofTracking: typeof data[\"state-proof-tracking\"] !== \"undefined\" ? data[\"state-proof-tracking\"].map(StateProofTracking.from_obj_for_encoding) : undefined,\n            transactions: typeof data[\"transactions\"] !== \"undefined\" ? data[\"transactions\"].map(Transaction.from_obj_for_encoding) : undefined,\n            txnCounter: data[\"txn-counter\"],\n            upgradeState: typeof data[\"upgrade-state\"] !== \"undefined\" ? BlockUpgradeState.from_obj_for_encoding(data[\"upgrade-state\"]) : undefined,\n            upgradeVote: typeof data[\"upgrade-vote\"] !== \"undefined\" ? BlockUpgradeVote.from_obj_for_encoding(data[\"upgrade-vote\"]) : undefined\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields relating to rewards,\n */ class BlockRewards extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BlockRewards` object.\n     * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n     * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n     * MicroAlgos for every reward unit in the next round.\n     * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n     * of MicroAlgos since genesis.\n     * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n     * redistributes them as rewards.\n     * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n     * the next round.\n     * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n     * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n     */ constructor({ feeSink, rewardsCalculationRound, rewardsLevel, rewardsPool, rewardsRate, rewardsResidue }){\n        super();\n        this.feeSink = feeSink;\n        this.rewardsCalculationRound = rewardsCalculationRound;\n        this.rewardsLevel = rewardsLevel;\n        this.rewardsPool = rewardsPool;\n        this.rewardsRate = rewardsRate;\n        this.rewardsResidue = rewardsResidue;\n        this.attribute_map = {\n            feeSink: \"fee-sink\",\n            rewardsCalculationRound: \"rewards-calculation-round\",\n            rewardsLevel: \"rewards-level\",\n            rewardsPool: \"rewards-pool\",\n            rewardsRate: \"rewards-rate\",\n            rewardsResidue: \"rewards-residue\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"fee-sink\"] === \"undefined\") throw new Error(`Response is missing required field 'fee-sink': ${data}`);\n        if (typeof data[\"rewards-calculation-round\"] === \"undefined\") throw new Error(`Response is missing required field 'rewards-calculation-round': ${data}`);\n        if (typeof data[\"rewards-level\"] === \"undefined\") throw new Error(`Response is missing required field 'rewards-level': ${data}`);\n        if (typeof data[\"rewards-pool\"] === \"undefined\") throw new Error(`Response is missing required field 'rewards-pool': ${data}`);\n        if (typeof data[\"rewards-rate\"] === \"undefined\") throw new Error(`Response is missing required field 'rewards-rate': ${data}`);\n        if (typeof data[\"rewards-residue\"] === \"undefined\") throw new Error(`Response is missing required field 'rewards-residue': ${data}`);\n        return new BlockRewards({\n            feeSink: data[\"fee-sink\"],\n            rewardsCalculationRound: data[\"rewards-calculation-round\"],\n            rewardsLevel: data[\"rewards-level\"],\n            rewardsPool: data[\"rewards-pool\"],\n            rewardsRate: data[\"rewards-rate\"],\n            rewardsResidue: data[\"rewards-residue\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields relating to a protocol upgrade.\n */ class BlockUpgradeState extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BlockUpgradeState` object.\n     * @param currentProtocol - (proto) The current protocol version.\n     * @param nextProtocol - (nextproto) The next proposed protocol version.\n     * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n     * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n     * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n     * after this round).\n     */ constructor({ currentProtocol, nextProtocol, nextProtocolApprovals, nextProtocolSwitchOn, nextProtocolVoteBefore }){\n        super();\n        this.currentProtocol = currentProtocol;\n        this.nextProtocol = nextProtocol;\n        this.nextProtocolApprovals = nextProtocolApprovals;\n        this.nextProtocolSwitchOn = nextProtocolSwitchOn;\n        this.nextProtocolVoteBefore = nextProtocolVoteBefore;\n        this.attribute_map = {\n            currentProtocol: \"current-protocol\",\n            nextProtocol: \"next-protocol\",\n            nextProtocolApprovals: \"next-protocol-approvals\",\n            nextProtocolSwitchOn: \"next-protocol-switch-on\",\n            nextProtocolVoteBefore: \"next-protocol-vote-before\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"current-protocol\"] === \"undefined\") throw new Error(`Response is missing required field 'current-protocol': ${data}`);\n        return new BlockUpgradeState({\n            currentProtocol: data[\"current-protocol\"],\n            nextProtocol: data[\"next-protocol\"],\n            nextProtocolApprovals: data[\"next-protocol-approvals\"],\n            nextProtocolSwitchOn: data[\"next-protocol-switch-on\"],\n            nextProtocolVoteBefore: data[\"next-protocol-vote-before\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields relating to voting for a protocol upgrade.\n */ class BlockUpgradeVote extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BlockUpgradeVote` object.\n     * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n     * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n     * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n     */ constructor({ upgradeApprove, upgradeDelay, upgradePropose }){\n        super();\n        this.upgradeApprove = upgradeApprove;\n        this.upgradeDelay = upgradeDelay;\n        this.upgradePropose = upgradePropose;\n        this.attribute_map = {\n            upgradeApprove: \"upgrade-approve\",\n            upgradeDelay: \"upgrade-delay\",\n            upgradePropose: \"upgrade-propose\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new BlockUpgradeVote({\n            upgradeApprove: data[\"upgrade-approve\"],\n            upgradeDelay: data[\"upgrade-delay\"],\n            upgradePropose: data[\"upgrade-propose\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Box name and its content.\n */ class Box extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Box` object.\n     * @param name - (name) box name, base64 encoded\n     * @param value - (value) box value, base64 encoded.\n     */ constructor({ name, value }){\n        super();\n        this.name = typeof name === \"string\" ? new Uint8Array(Buffer.from(name, \"base64\")) : name;\n        this.value = typeof value === \"string\" ? new Uint8Array(Buffer.from(value, \"base64\")) : value;\n        this.attribute_map = {\n            name: \"name\",\n            value: \"value\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"name\"] === \"undefined\") throw new Error(`Response is missing required field 'name': ${data}`);\n        if (typeof data[\"value\"] === \"undefined\") throw new Error(`Response is missing required field 'value': ${data}`);\n        return new Box({\n            name: data[\"name\"],\n            value: data[\"value\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Box descriptor describes an app box without a value.\n */ class BoxDescriptor extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BoxDescriptor` object.\n     * @param name - Base64 encoded box name\n     */ constructor({ name }){\n        super();\n        this.name = typeof name === \"string\" ? new Uint8Array(Buffer.from(name, \"base64\")) : name;\n        this.attribute_map = {\n            name: \"name\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"name\"] === \"undefined\") throw new Error(`Response is missing required field 'name': ${data}`);\n        return new BoxDescriptor({\n            name: data[\"name\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Box names of an application\n */ class BoxesResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `BoxesResponse` object.\n     * @param applicationId - (appidx) application index.\n     * @param boxes -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ applicationId, boxes, nextToken }){\n        super();\n        this.applicationId = applicationId;\n        this.boxes = boxes;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            applicationId: \"application-id\",\n            boxes: \"boxes\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"application-id\"] === \"undefined\") throw new Error(`Response is missing required field 'application-id': ${data}`);\n        if (!Array.isArray(data[\"boxes\"])) throw new Error(`Response is missing required array field 'boxes': ${data}`);\n        return new BoxesResponse({\n            applicationId: data[\"application-id\"],\n            boxes: data[\"boxes\"].map(BoxDescriptor.from_obj_for_encoding),\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Response for errors\n */ class ErrorResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ErrorResponse` object.\n     * @param message -\n     * @param data -\n     */ constructor({ message, data }){\n        super();\n        this.message = message;\n        this.data = data;\n        this.attribute_map = {\n            message: \"message\",\n            data: \"data\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"message\"] === \"undefined\") throw new Error(`Response is missing required field 'message': ${data}`);\n        return new ErrorResponse({\n            message: data[\"message\"],\n            data: data[\"data\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents a TEAL value delta.\n */ class EvalDelta extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `EvalDelta` object.\n     * @param action - (at) delta action.\n     * @param bytes - (bs) bytes value.\n     * @param uint - (ui) uint value.\n     */ constructor({ action, bytes, uint }){\n        super();\n        this.action = action;\n        this.bytes = bytes;\n        this.uint = uint;\n        this.attribute_map = {\n            action: \"action\",\n            bytes: \"bytes\",\n            uint: \"uint\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"action\"] === \"undefined\") throw new Error(`Response is missing required field 'action': ${data}`);\n        return new EvalDelta({\n            action: data[\"action\"],\n            bytes: data[\"bytes\"],\n            uint: data[\"uint\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Key-value pairs for StateDelta.\n */ class EvalDeltaKeyValue extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `EvalDeltaKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value delta.\n     */ constructor({ key, value }){\n        super();\n        this.key = key;\n        this.value = value;\n        this.attribute_map = {\n            key: \"key\",\n            value: \"value\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"key\"] === \"undefined\") throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data[\"value\"] === \"undefined\") throw new Error(`Response is missing required field 'value': ${data}`);\n        return new EvalDeltaKeyValue({\n            key: data[\"key\"],\n            value: EvalDelta.from_obj_for_encoding(data[\"value\"])\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass HashFactory extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `HashFactory` object.\n     * @param hashType - (t)\n     */ constructor({ hashType }){\n        super();\n        this.hashType = hashType;\n        this.attribute_map = {\n            hashType: \"hash-type\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new HashFactory({\n            hashType: data[\"hash-type\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * A health check response.\n */ class HealthCheck extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `HealthCheck` object.\n     * @param dbAvailable -\n     * @param isMigrating -\n     * @param message -\n     * @param round -\n     * @param version - Current version.\n     * @param data -\n     * @param errors -\n     */ constructor({ dbAvailable, isMigrating, message, round, version, data, errors }){\n        super();\n        this.dbAvailable = dbAvailable;\n        this.isMigrating = isMigrating;\n        this.message = message;\n        this.round = round;\n        this.version = version;\n        this.data = data;\n        this.errors = errors;\n        this.attribute_map = {\n            dbAvailable: \"db-available\",\n            isMigrating: \"is-migrating\",\n            message: \"message\",\n            round: \"round\",\n            version: \"version\",\n            data: \"data\",\n            errors: \"errors\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"db-available\"] === \"undefined\") throw new Error(`Response is missing required field 'db-available': ${data}`);\n        if (typeof data[\"is-migrating\"] === \"undefined\") throw new Error(`Response is missing required field 'is-migrating': ${data}`);\n        if (typeof data[\"message\"] === \"undefined\") throw new Error(`Response is missing required field 'message': ${data}`);\n        if (typeof data[\"round\"] === \"undefined\") throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data[\"version\"] === \"undefined\") throw new Error(`Response is missing required field 'version': ${data}`);\n        return new HealthCheck({\n            dbAvailable: data[\"db-available\"],\n            isMigrating: data[\"is-migrating\"],\n            message: data[\"message\"],\n            round: data[\"round\"],\n            version: data[\"version\"],\n            data: data[\"data\"],\n            errors: data[\"errors\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass IndexerStateProofMessage extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `IndexerStateProofMessage` object.\n     * @param blockHeadersCommitment - (b)\n     * @param firstAttestedRound - (f)\n     * @param latestAttestedRound - (l)\n     * @param lnProvenWeight - (P)\n     * @param votersCommitment - (v)\n     */ constructor({ blockHeadersCommitment, firstAttestedRound, latestAttestedRound, lnProvenWeight, votersCommitment }){\n        super();\n        this.blockHeadersCommitment = typeof blockHeadersCommitment === \"string\" ? new Uint8Array(Buffer.from(blockHeadersCommitment, \"base64\")) : blockHeadersCommitment;\n        this.firstAttestedRound = firstAttestedRound;\n        this.latestAttestedRound = latestAttestedRound;\n        this.lnProvenWeight = lnProvenWeight;\n        this.votersCommitment = typeof votersCommitment === \"string\" ? new Uint8Array(Buffer.from(votersCommitment, \"base64\")) : votersCommitment;\n        this.attribute_map = {\n            blockHeadersCommitment: \"block-headers-commitment\",\n            firstAttestedRound: \"first-attested-round\",\n            latestAttestedRound: \"latest-attested-round\",\n            lnProvenWeight: \"ln-proven-weight\",\n            votersCommitment: \"voters-commitment\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new IndexerStateProofMessage({\n            blockHeadersCommitment: data[\"block-headers-commitment\"],\n            firstAttestedRound: data[\"first-attested-round\"],\n            latestAttestedRound: data[\"latest-attested-round\"],\n            lnProvenWeight: data[\"ln-proven-weight\"],\n            votersCommitment: data[\"voters-commitment\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass MerkleArrayProof extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `MerkleArrayProof` object.\n     * @param hashFactory -\n     * @param path - (pth)\n     * @param treeDepth - (td)\n     */ constructor({ hashFactory, path, treeDepth }){\n        super();\n        this.hashFactory = hashFactory;\n        this.path = path;\n        this.treeDepth = treeDepth;\n        this.attribute_map = {\n            hashFactory: \"hash-factory\",\n            path: \"path\",\n            treeDepth: \"tree-depth\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new MerkleArrayProof({\n            hashFactory: typeof data[\"hash-factory\"] !== \"undefined\" ? HashFactory.from_obj_for_encoding(data[\"hash-factory\"]) : undefined,\n            path: data[\"path\"],\n            treeDepth: data[\"tree-depth\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * A simplified version of AssetHolding\n */ class MiniAssetHolding extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `MiniAssetHolding` object.\n     * @param address -\n     * @param amount -\n     * @param isFrozen -\n     * @param deleted - Whether or not this asset holding is currently deleted from its account.\n     * @param optedInAtRound - Round during which the account opted into the asset.\n     * @param optedOutAtRound - Round during which the account opted out of the asset.\n     */ constructor({ address, amount, isFrozen, deleted, optedInAtRound, optedOutAtRound }){\n        super();\n        this.address = address;\n        this.amount = amount;\n        this.isFrozen = isFrozen;\n        this.deleted = deleted;\n        this.optedInAtRound = optedInAtRound;\n        this.optedOutAtRound = optedOutAtRound;\n        this.attribute_map = {\n            address: \"address\",\n            amount: \"amount\",\n            isFrozen: \"is-frozen\",\n            deleted: \"deleted\",\n            optedInAtRound: \"opted-in-at-round\",\n            optedOutAtRound: \"opted-out-at-round\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"address\"] === \"undefined\") throw new Error(`Response is missing required field 'address': ${data}`);\n        if (typeof data[\"amount\"] === \"undefined\") throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data[\"is-frozen\"] === \"undefined\") throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n        return new MiniAssetHolding({\n            address: data[\"address\"],\n            amount: data[\"amount\"],\n            isFrozen: data[\"is-frozen\"],\n            deleted: data[\"deleted\"],\n            optedInAtRound: data[\"opted-in-at-round\"],\n            optedOutAtRound: data[\"opted-out-at-round\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */ class ParticipationUpdates extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `ParticipationUpdates` object.\n     * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n     * since their participation key expired.\n     */ constructor({ expiredParticipationAccounts }){\n        super();\n        this.expiredParticipationAccounts = expiredParticipationAccounts;\n        this.attribute_map = {\n            expiredParticipationAccounts: \"expired-participation-accounts\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new ParticipationUpdates({\n            expiredParticipationAccounts: data[\"expired-participation-accounts\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */ class StateProofFields extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProofFields` object.\n     * @param partProofs - (P)\n     * @param positionsToReveal - (pr) Sequence of reveal positions.\n     * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n     * msgp\n     * @param saltVersion - (v) Salt version of the merkle signature.\n     * @param sigCommit - (c)\n     * @param sigProofs - (S)\n     * @param signedWeight - (w)\n     */ constructor({ partProofs, positionsToReveal, reveals, saltVersion, sigCommit, sigProofs, signedWeight }){\n        super();\n        this.partProofs = partProofs;\n        this.positionsToReveal = positionsToReveal;\n        this.reveals = reveals;\n        this.saltVersion = saltVersion;\n        this.sigCommit = typeof sigCommit === \"string\" ? new Uint8Array(Buffer.from(sigCommit, \"base64\")) : sigCommit;\n        this.sigProofs = sigProofs;\n        this.signedWeight = signedWeight;\n        this.attribute_map = {\n            partProofs: \"part-proofs\",\n            positionsToReveal: \"positions-to-reveal\",\n            reveals: \"reveals\",\n            saltVersion: \"salt-version\",\n            sigCommit: \"sig-commit\",\n            sigProofs: \"sig-proofs\",\n            signedWeight: \"signed-weight\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new StateProofFields({\n            partProofs: typeof data[\"part-proofs\"] !== \"undefined\" ? MerkleArrayProof.from_obj_for_encoding(data[\"part-proofs\"]) : undefined,\n            positionsToReveal: data[\"positions-to-reveal\"],\n            reveals: typeof data[\"reveals\"] !== \"undefined\" ? data[\"reveals\"].map(StateProofReveal.from_obj_for_encoding) : undefined,\n            saltVersion: data[\"salt-version\"],\n            sigCommit: data[\"sig-commit\"],\n            sigProofs: typeof data[\"sig-proofs\"] !== \"undefined\" ? MerkleArrayProof.from_obj_for_encoding(data[\"sig-proofs\"]) : undefined,\n            signedWeight: data[\"signed-weight\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass StateProofParticipant extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProofParticipant` object.\n     * @param verifier - (p)\n     * @param weight - (w)\n     */ constructor({ verifier, weight }){\n        super();\n        this.verifier = verifier;\n        this.weight = weight;\n        this.attribute_map = {\n            verifier: \"verifier\",\n            weight: \"weight\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new StateProofParticipant({\n            verifier: typeof data[\"verifier\"] !== \"undefined\" ? StateProofVerifier.from_obj_for_encoding(data[\"verifier\"]) : undefined,\n            weight: data[\"weight\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass StateProofReveal extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProofReveal` object.\n     * @param participant - (p)\n     * @param position - The position in the signature and participants arrays corresponding to this\n     * entry.\n     * @param sigSlot - (s)\n     */ constructor({ participant, position, sigSlot }){\n        super();\n        this.participant = participant;\n        this.position = position;\n        this.sigSlot = sigSlot;\n        this.attribute_map = {\n            participant: \"participant\",\n            position: \"position\",\n            sigSlot: \"sig-slot\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new StateProofReveal({\n            participant: typeof data[\"participant\"] !== \"undefined\" ? StateProofParticipant.from_obj_for_encoding(data[\"participant\"]) : undefined,\n            position: data[\"position\"],\n            sigSlot: typeof data[\"sig-slot\"] !== \"undefined\" ? StateProofSigSlot.from_obj_for_encoding(data[\"sig-slot\"]) : undefined\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass StateProofSigSlot extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProofSigSlot` object.\n     * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n     * @param signature -\n     */ constructor({ lowerSigWeight, signature }){\n        super();\n        this.lowerSigWeight = lowerSigWeight;\n        this.signature = signature;\n        this.attribute_map = {\n            lowerSigWeight: \"lower-sig-weight\",\n            signature: \"signature\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new StateProofSigSlot({\n            lowerSigWeight: data[\"lower-sig-weight\"],\n            signature: typeof data[\"signature\"] !== \"undefined\" ? StateProofSignature.from_obj_for_encoding(data[\"signature\"]) : undefined\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass StateProofSignature extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProofSignature` object.\n     * @param falconSignature -\n     * @param merkleArrayIndex -\n     * @param proof -\n     * @param verifyingKey - (vkey)\n     */ constructor({ falconSignature, merkleArrayIndex, proof, verifyingKey }){\n        super();\n        this.falconSignature = typeof falconSignature === \"string\" ? new Uint8Array(Buffer.from(falconSignature, \"base64\")) : falconSignature;\n        this.merkleArrayIndex = merkleArrayIndex;\n        this.proof = proof;\n        this.verifyingKey = typeof verifyingKey === \"string\" ? new Uint8Array(Buffer.from(verifyingKey, \"base64\")) : verifyingKey;\n        this.attribute_map = {\n            falconSignature: \"falcon-signature\",\n            merkleArrayIndex: \"merkle-array-index\",\n            proof: \"proof\",\n            verifyingKey: \"verifying-key\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new StateProofSignature({\n            falconSignature: data[\"falcon-signature\"],\n            merkleArrayIndex: data[\"merkle-array-index\"],\n            proof: typeof data[\"proof\"] !== \"undefined\" ? MerkleArrayProof.from_obj_for_encoding(data[\"proof\"]) : undefined,\n            verifyingKey: data[\"verifying-key\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass StateProofTracking extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProofTracking` object.\n     * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n     * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n     * StateProof round.\n     * @param type - State Proof Type. Note the raw object uses map with this as key.\n     * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n     * the proof.\n     */ constructor({ nextRound, onlineTotalWeight, type, votersCommitment }){\n        super();\n        this.nextRound = nextRound;\n        this.onlineTotalWeight = onlineTotalWeight;\n        this.type = type;\n        this.votersCommitment = typeof votersCommitment === \"string\" ? new Uint8Array(Buffer.from(votersCommitment, \"base64\")) : votersCommitment;\n        this.attribute_map = {\n            nextRound: \"next-round\",\n            onlineTotalWeight: \"online-total-weight\",\n            type: \"type\",\n            votersCommitment: \"voters-commitment\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new StateProofTracking({\n            nextRound: data[\"next-round\"],\n            onlineTotalWeight: data[\"online-total-weight\"],\n            type: data[\"type\"],\n            votersCommitment: data[\"voters-commitment\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass StateProofVerifier extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateProofVerifier` object.\n     * @param commitment - (cmt) Represents the root of the vector commitment tree.\n     * @param keyLifetime - (lf) Key lifetime.\n     */ constructor({ commitment, keyLifetime }){\n        super();\n        this.commitment = typeof commitment === \"string\" ? new Uint8Array(Buffer.from(commitment, \"base64\")) : commitment;\n        this.keyLifetime = keyLifetime;\n        this.attribute_map = {\n            commitment: \"commitment\",\n            keyLifetime: \"key-lifetime\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new StateProofVerifier({\n            commitment: data[\"commitment\"],\n            keyLifetime: data[\"key-lifetime\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */ class StateSchema extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `StateSchema` object.\n     * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n     * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n     */ constructor({ numByteSlice, numUint }){\n        super();\n        this.numByteSlice = numByteSlice;\n        this.numUint = numUint;\n        this.attribute_map = {\n            numByteSlice: \"num-byte-slice\",\n            numUint: \"num-uint\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"num-byte-slice\"] === \"undefined\") throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n        if (typeof data[\"num-uint\"] === \"undefined\") throw new Error(`Response is missing required field 'num-uint': ${data}`);\n        return new StateSchema({\n            numByteSlice: data[\"num-byte-slice\"],\n            numUint: data[\"num-uint\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents a key-value pair in an application store.\n */ class TealKeyValue extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TealKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value.\n     */ constructor({ key, value }){\n        super();\n        this.key = key;\n        this.value = value;\n        this.attribute_map = {\n            key: \"key\",\n            value: \"value\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"key\"] === \"undefined\") throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data[\"value\"] === \"undefined\") throw new Error(`Response is missing required field 'value': ${data}`);\n        return new TealKeyValue({\n            key: data[\"key\"],\n            value: TealValue.from_obj_for_encoding(data[\"value\"])\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Represents a TEAL value.\n */ class TealValue extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TealValue` object.\n     * @param bytes - (tb) bytes value.\n     * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n     * @param uint - (ui) uint value.\n     */ constructor({ bytes, type, uint }){\n        super();\n        this.bytes = bytes;\n        this.type = type;\n        this.uint = uint;\n        this.attribute_map = {\n            bytes: \"bytes\",\n            type: \"type\",\n            uint: \"uint\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"bytes\"] === \"undefined\") throw new Error(`Response is missing required field 'bytes': ${data}`);\n        if (typeof data[\"type\"] === \"undefined\") throw new Error(`Response is missing required field 'type': ${data}`);\n        if (typeof data[\"uint\"] === \"undefined\") throw new Error(`Response is missing required field 'uint': ${data}`);\n        return new TealValue({\n            bytes: data[\"bytes\"],\n            type: data[\"type\"],\n            uint: data[\"uint\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */ class Transaction extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `Transaction` object.\n     * @param fee - (fee) Transaction fee.\n     * @param firstValid - (fv) First valid round for this transaction.\n     * @param lastValid - (lv) Last valid round for this transaction.\n     * @param sender - (snd) Sender's address.\n     * @param applicationTransaction - Fields for application transactions.\n     * Definition:\n     * data/transactions/application.go : ApplicationCallTxnFields\n     * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n     * A zero value for asset-id indicates asset creation.\n     * A zero value for the params indicates asset destruction.\n     * Definition:\n     * data/transactions/asset.go : AssetConfigTxnFields\n     * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetFreezeTxnFields\n     * @param assetTransferTransaction - Fields for an asset transfer transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetTransferTxnFields\n     * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n     * not equal the sender. The backend can use this to ensure that auth addr is equal\n     * to the accounts auth addr.\n     * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n     * @param closingAmount - (ca) closing amount for transaction.\n     * @param confirmedRound - Round when the transaction was confirmed.\n     * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n     * transaction.\n     * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n     * @param genesisHash - (gh) Hash of genesis block.\n     * @param genesisId - (gen) genesis block ID.\n     * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n     * transaction.\n     * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n     * that this transaction is part of a transaction group and the value is the\n     * sha512/256 hash of the transactions in that group.\n     * @param id - Transaction ID\n     * @param innerTxns - Inner transactions produced by application execution.\n     * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n     * @param keyregTransaction - Fields for a keyreg transaction.\n     * Definition:\n     * data/transactions/keyreg.go : KeyregTxnFields\n     * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n     * transactions. If this field is nonzero, then once the transaction is confirmed,\n     * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n     * until the LastValid round passes. While this transaction possesses the lease, no\n     * other transaction specifying this lease can be confirmed.\n     * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n     * transaction.\n     * @param logs - (lg) Logs for the application being executed by this transaction.\n     * @param note - (note) Free form data.\n     * @param paymentTransaction - Fields for a payment transaction.\n     * Definition:\n     * data/transactions/payment.go : PaymentTxnFields\n     * @param receiverRewards - (rr) rewards applied to receiver account.\n     * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n     * updated with this value and future signatures must be signed with the key\n     * represented by this address.\n     * @param roundTime - Time when the block this transaction is in was confirmed.\n     * @param senderRewards - (rs) rewards applied to sender account.\n     * @param signature - Validation signature associated with some data. Only one of the signatures\n     * should be provided.\n     * @param stateProofTransaction - Fields for a state proof transaction.\n     * Definition:\n     * data/transactions/stateproof.go : StateProofTxnFields\n     * @param txType - (type) Indicates what type of transaction this is. Different types have\n     * different fields.\n     * Valid types, and where their fields are stored:\n     * * (pay) payment-transaction\n     * * (keyreg) keyreg-transaction\n     * * (acfg) asset-config-transaction\n     * * (axfer) asset-transfer-transaction\n     * * (afrz) asset-freeze-transaction\n     * * (appl) application-transaction\n     * * (stpf) state-proof-transaction\n     */ constructor({ fee, firstValid, lastValid, sender, applicationTransaction, assetConfigTransaction, assetFreezeTransaction, assetTransferTransaction, authAddr, closeRewards, closingAmount, confirmedRound, createdApplicationIndex, createdAssetIndex, genesisHash, genesisId, globalStateDelta, group, id, innerTxns, intraRoundOffset, keyregTransaction, lease, localStateDelta, logs, note, paymentTransaction, receiverRewards, rekeyTo, roundTime, senderRewards, signature, stateProofTransaction, txType }){\n        super();\n        this.fee = fee;\n        this.firstValid = firstValid;\n        this.lastValid = lastValid;\n        this.sender = sender;\n        this.applicationTransaction = applicationTransaction;\n        this.assetConfigTransaction = assetConfigTransaction;\n        this.assetFreezeTransaction = assetFreezeTransaction;\n        this.assetTransferTransaction = assetTransferTransaction;\n        this.authAddr = authAddr;\n        this.closeRewards = closeRewards;\n        this.closingAmount = closingAmount;\n        this.confirmedRound = confirmedRound;\n        this.createdApplicationIndex = createdApplicationIndex;\n        this.createdAssetIndex = createdAssetIndex;\n        this.genesisHash = typeof genesisHash === \"string\" ? new Uint8Array(Buffer.from(genesisHash, \"base64\")) : genesisHash;\n        this.genesisId = genesisId;\n        this.globalStateDelta = globalStateDelta;\n        this.group = typeof group === \"string\" ? new Uint8Array(Buffer.from(group, \"base64\")) : group;\n        this.id = id;\n        this.innerTxns = innerTxns;\n        this.intraRoundOffset = intraRoundOffset;\n        this.keyregTransaction = keyregTransaction;\n        this.lease = typeof lease === \"string\" ? new Uint8Array(Buffer.from(lease, \"base64\")) : lease;\n        this.localStateDelta = localStateDelta;\n        this.logs = logs;\n        this.note = typeof note === \"string\" ? new Uint8Array(Buffer.from(note, \"base64\")) : note;\n        this.paymentTransaction = paymentTransaction;\n        this.receiverRewards = receiverRewards;\n        this.rekeyTo = rekeyTo;\n        this.roundTime = roundTime;\n        this.senderRewards = senderRewards;\n        this.signature = signature;\n        this.stateProofTransaction = stateProofTransaction;\n        this.txType = txType;\n        this.attribute_map = {\n            fee: \"fee\",\n            firstValid: \"first-valid\",\n            lastValid: \"last-valid\",\n            sender: \"sender\",\n            applicationTransaction: \"application-transaction\",\n            assetConfigTransaction: \"asset-config-transaction\",\n            assetFreezeTransaction: \"asset-freeze-transaction\",\n            assetTransferTransaction: \"asset-transfer-transaction\",\n            authAddr: \"auth-addr\",\n            closeRewards: \"close-rewards\",\n            closingAmount: \"closing-amount\",\n            confirmedRound: \"confirmed-round\",\n            createdApplicationIndex: \"created-application-index\",\n            createdAssetIndex: \"created-asset-index\",\n            genesisHash: \"genesis-hash\",\n            genesisId: \"genesis-id\",\n            globalStateDelta: \"global-state-delta\",\n            group: \"group\",\n            id: \"id\",\n            innerTxns: \"inner-txns\",\n            intraRoundOffset: \"intra-round-offset\",\n            keyregTransaction: \"keyreg-transaction\",\n            lease: \"lease\",\n            localStateDelta: \"local-state-delta\",\n            logs: \"logs\",\n            note: \"note\",\n            paymentTransaction: \"payment-transaction\",\n            receiverRewards: \"receiver-rewards\",\n            rekeyTo: \"rekey-to\",\n            roundTime: \"round-time\",\n            senderRewards: \"sender-rewards\",\n            signature: \"signature\",\n            stateProofTransaction: \"state-proof-transaction\",\n            txType: \"tx-type\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"fee\"] === \"undefined\") throw new Error(`Response is missing required field 'fee': ${data}`);\n        if (typeof data[\"first-valid\"] === \"undefined\") throw new Error(`Response is missing required field 'first-valid': ${data}`);\n        if (typeof data[\"last-valid\"] === \"undefined\") throw new Error(`Response is missing required field 'last-valid': ${data}`);\n        if (typeof data[\"sender\"] === \"undefined\") throw new Error(`Response is missing required field 'sender': ${data}`);\n        return new Transaction({\n            fee: data[\"fee\"],\n            firstValid: data[\"first-valid\"],\n            lastValid: data[\"last-valid\"],\n            sender: data[\"sender\"],\n            applicationTransaction: typeof data[\"application-transaction\"] !== \"undefined\" ? TransactionApplication.from_obj_for_encoding(data[\"application-transaction\"]) : undefined,\n            assetConfigTransaction: typeof data[\"asset-config-transaction\"] !== \"undefined\" ? TransactionAssetConfig.from_obj_for_encoding(data[\"asset-config-transaction\"]) : undefined,\n            assetFreezeTransaction: typeof data[\"asset-freeze-transaction\"] !== \"undefined\" ? TransactionAssetFreeze.from_obj_for_encoding(data[\"asset-freeze-transaction\"]) : undefined,\n            assetTransferTransaction: typeof data[\"asset-transfer-transaction\"] !== \"undefined\" ? TransactionAssetTransfer.from_obj_for_encoding(data[\"asset-transfer-transaction\"]) : undefined,\n            authAddr: data[\"auth-addr\"],\n            closeRewards: data[\"close-rewards\"],\n            closingAmount: data[\"closing-amount\"],\n            confirmedRound: data[\"confirmed-round\"],\n            createdApplicationIndex: data[\"created-application-index\"],\n            createdAssetIndex: data[\"created-asset-index\"],\n            genesisHash: data[\"genesis-hash\"],\n            genesisId: data[\"genesis-id\"],\n            globalStateDelta: typeof data[\"global-state-delta\"] !== \"undefined\" ? data[\"global-state-delta\"].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n            group: data[\"group\"],\n            id: data[\"id\"],\n            innerTxns: typeof data[\"inner-txns\"] !== \"undefined\" ? data[\"inner-txns\"].map(Transaction.from_obj_for_encoding) : undefined,\n            intraRoundOffset: data[\"intra-round-offset\"],\n            keyregTransaction: typeof data[\"keyreg-transaction\"] !== \"undefined\" ? TransactionKeyreg.from_obj_for_encoding(data[\"keyreg-transaction\"]) : undefined,\n            lease: data[\"lease\"],\n            localStateDelta: typeof data[\"local-state-delta\"] !== \"undefined\" ? data[\"local-state-delta\"].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n            logs: data[\"logs\"],\n            note: data[\"note\"],\n            paymentTransaction: typeof data[\"payment-transaction\"] !== \"undefined\" ? TransactionPayment.from_obj_for_encoding(data[\"payment-transaction\"]) : undefined,\n            receiverRewards: data[\"receiver-rewards\"],\n            rekeyTo: data[\"rekey-to\"],\n            roundTime: data[\"round-time\"],\n            senderRewards: data[\"sender-rewards\"],\n            signature: typeof data[\"signature\"] !== \"undefined\" ? TransactionSignature.from_obj_for_encoding(data[\"signature\"]) : undefined,\n            stateProofTransaction: typeof data[\"state-proof-transaction\"] !== \"undefined\" ? TransactionStateProof.from_obj_for_encoding(data[\"state-proof-transaction\"]) : undefined,\n            txType: data[\"tx-type\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */ class TransactionApplication extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionApplication` object.\n     * @param applicationId - (apid) ID of the application being configured or empty if creating.\n     * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n     * application's approval-program and clear-state-program.\n     * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n     * approval-program and clear-state-program.\n     * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n     * on-completion is set to \"clear\". It can read and write global state for the\n     * application, as well as account-specific local state. Approval programs may\n     * reject the transaction.\n     * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n     * \"clear\". It can read and write global state for the application, as well as\n     * account-specific local state. Clear state programs cannot reject the\n     * transaction.\n     * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n     * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n     * states may be accessed by this application's approval-program and\n     * clear-state-program. The access is read-only.\n     * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n     * ApprovalProgram and ClearStateProgram. The access is read-only.\n     * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n     * determine how much storage may be used in a local-state or global-state for an\n     * application. The more space used, the larger minimum balance must be maintained\n     * in the account holding the data.\n     * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n     * determine how much storage may be used in a local-state or global-state for an\n     * application. The more space used, the larger minimum balance must be maintained\n     * in the account holding the data.\n     * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n     * Valid types:\n     * * noop\n     * * optin\n     * * closeout\n     * * clear\n     * * update\n     * * update\n     * * delete\n     */ constructor({ applicationId, accounts, applicationArgs, approvalProgram, clearStateProgram, extraProgramPages, foreignApps, foreignAssets, globalStateSchema, localStateSchema, onCompletion }){\n        super();\n        this.applicationId = applicationId;\n        this.accounts = accounts;\n        this.applicationArgs = applicationArgs;\n        this.approvalProgram = typeof approvalProgram === \"string\" ? new Uint8Array(Buffer.from(approvalProgram, \"base64\")) : approvalProgram;\n        this.clearStateProgram = typeof clearStateProgram === \"string\" ? new Uint8Array(Buffer.from(clearStateProgram, \"base64\")) : clearStateProgram;\n        this.extraProgramPages = extraProgramPages;\n        this.foreignApps = foreignApps;\n        this.foreignAssets = foreignAssets;\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.onCompletion = onCompletion;\n        this.attribute_map = {\n            applicationId: \"application-id\",\n            accounts: \"accounts\",\n            applicationArgs: \"application-args\",\n            approvalProgram: \"approval-program\",\n            clearStateProgram: \"clear-state-program\",\n            extraProgramPages: \"extra-program-pages\",\n            foreignApps: \"foreign-apps\",\n            foreignAssets: \"foreign-assets\",\n            globalStateSchema: \"global-state-schema\",\n            localStateSchema: \"local-state-schema\",\n            onCompletion: \"on-completion\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"application-id\"] === \"undefined\") throw new Error(`Response is missing required field 'application-id': ${data}`);\n        return new TransactionApplication({\n            applicationId: data[\"application-id\"],\n            accounts: data[\"accounts\"],\n            applicationArgs: data[\"application-args\"],\n            approvalProgram: data[\"approval-program\"],\n            clearStateProgram: data[\"clear-state-program\"],\n            extraProgramPages: data[\"extra-program-pages\"],\n            foreignApps: data[\"foreign-apps\"],\n            foreignAssets: data[\"foreign-assets\"],\n            globalStateSchema: typeof data[\"global-state-schema\"] !== \"undefined\" ? StateSchema.from_obj_for_encoding(data[\"global-state-schema\"]) : undefined,\n            localStateSchema: typeof data[\"local-state-schema\"] !== \"undefined\" ? StateSchema.from_obj_for_encoding(data[\"local-state-schema\"]) : undefined,\n            onCompletion: data[\"on-completion\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */ class TransactionAssetConfig extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionAssetConfig` object.\n     * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     */ constructor({ assetId, params }){\n        super();\n        this.assetId = assetId;\n        this.params = params;\n        this.attribute_map = {\n            assetId: \"asset-id\",\n            params: \"params\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new TransactionAssetConfig({\n            assetId: data[\"asset-id\"],\n            params: typeof data[\"params\"] !== \"undefined\" ? AssetParams.from_obj_for_encoding(data[\"params\"]) : undefined\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */ class TransactionAssetFreeze extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionAssetFreeze` object.\n     * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n     * @param assetId - (faid) ID of the asset being frozen or thawed.\n     * @param newFreezeStatus - (afrz) The new freeze status.\n     */ constructor({ address, assetId, newFreezeStatus }){\n        super();\n        this.address = address;\n        this.assetId = assetId;\n        this.newFreezeStatus = newFreezeStatus;\n        this.attribute_map = {\n            address: \"address\",\n            assetId: \"asset-id\",\n            newFreezeStatus: \"new-freeze-status\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"address\"] === \"undefined\") throw new Error(`Response is missing required field 'address': ${data}`);\n        if (typeof data[\"asset-id\"] === \"undefined\") throw new Error(`Response is missing required field 'asset-id': ${data}`);\n        if (typeof data[\"new-freeze-status\"] === \"undefined\") throw new Error(`Response is missing required field 'new-freeze-status': ${data}`);\n        return new TransactionAssetFreeze({\n            address: data[\"address\"],\n            assetId: data[\"asset-id\"],\n            newFreezeStatus: data[\"new-freeze-status\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */ class TransactionAssetTransfer extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionAssetTransfer` object.\n     * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n     * that asset in the account's Assets map.\n     * @param assetId - (xaid) ID of the asset being transferred.\n     * @param receiver - (arcv) Recipient address of the transfer.\n     * @param closeAmount - Number of assets transfered to the close-to account as part of the transaction.\n     * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n     * map, and specifies where the remaining asset holdings should be transferred.\n     * It's always valid to transfer remaining asset holdings to the creator account.\n     * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n     * zero value, the real transaction sender must be the Clawback address from the\n     * AssetParams.\n     */ constructor({ amount, assetId, receiver, closeAmount, closeTo, sender }){\n        super();\n        this.amount = amount;\n        this.assetId = assetId;\n        this.receiver = receiver;\n        this.closeAmount = closeAmount;\n        this.closeTo = closeTo;\n        this.sender = sender;\n        this.attribute_map = {\n            amount: \"amount\",\n            assetId: \"asset-id\",\n            receiver: \"receiver\",\n            closeAmount: \"close-amount\",\n            closeTo: \"close-to\",\n            sender: \"sender\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"amount\"] === \"undefined\") throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data[\"asset-id\"] === \"undefined\") throw new Error(`Response is missing required field 'asset-id': ${data}`);\n        if (typeof data[\"receiver\"] === \"undefined\") throw new Error(`Response is missing required field 'receiver': ${data}`);\n        return new TransactionAssetTransfer({\n            amount: data[\"amount\"],\n            assetId: data[\"asset-id\"],\n            receiver: data[\"receiver\"],\n            closeAmount: data[\"close-amount\"],\n            closeTo: data[\"close-to\"],\n            sender: data[\"sender\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */ class TransactionKeyreg extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionKeyreg` object.\n     * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n     * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n     * committee selection.\n     * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n     * @param voteFirstValid - (votefst) First round this participation key is valid.\n     * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - (votelst) Last round this participation key is valid.\n     * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n     */ constructor({ nonParticipation, selectionParticipationKey, stateProofKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey }){\n        super();\n        this.nonParticipation = nonParticipation;\n        this.selectionParticipationKey = typeof selectionParticipationKey === \"string\" ? new Uint8Array(Buffer.from(selectionParticipationKey, \"base64\")) : selectionParticipationKey;\n        this.stateProofKey = typeof stateProofKey === \"string\" ? new Uint8Array(Buffer.from(stateProofKey, \"base64\")) : stateProofKey;\n        this.voteFirstValid = voteFirstValid;\n        this.voteKeyDilution = voteKeyDilution;\n        this.voteLastValid = voteLastValid;\n        this.voteParticipationKey = typeof voteParticipationKey === \"string\" ? new Uint8Array(Buffer.from(voteParticipationKey, \"base64\")) : voteParticipationKey;\n        this.attribute_map = {\n            nonParticipation: \"non-participation\",\n            selectionParticipationKey: \"selection-participation-key\",\n            stateProofKey: \"state-proof-key\",\n            voteFirstValid: \"vote-first-valid\",\n            voteKeyDilution: \"vote-key-dilution\",\n            voteLastValid: \"vote-last-valid\",\n            voteParticipationKey: \"vote-participation-key\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new TransactionKeyreg({\n            nonParticipation: data[\"non-participation\"],\n            selectionParticipationKey: data[\"selection-participation-key\"],\n            stateProofKey: data[\"state-proof-key\"],\n            voteFirstValid: data[\"vote-first-valid\"],\n            voteKeyDilution: data[\"vote-key-dilution\"],\n            voteLastValid: data[\"vote-last-valid\"],\n            voteParticipationKey: data[\"vote-participation-key\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */ class TransactionPayment extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionPayment` object.\n     * @param amount - (amt) number of MicroAlgos intended to be transferred.\n     * @param receiver - (rcv) receiver's address.\n     * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n     * closing the sender account.\n     * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n     * remaining funds be transferred to this address.\n     */ constructor({ amount, receiver, closeAmount, closeRemainderTo }){\n        super();\n        this.amount = amount;\n        this.receiver = receiver;\n        this.closeAmount = closeAmount;\n        this.closeRemainderTo = closeRemainderTo;\n        this.attribute_map = {\n            amount: \"amount\",\n            receiver: \"receiver\",\n            closeAmount: \"close-amount\",\n            closeRemainderTo: \"close-remainder-to\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"amount\"] === \"undefined\") throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data[\"receiver\"] === \"undefined\") throw new Error(`Response is missing required field 'receiver': ${data}`);\n        return new TransactionPayment({\n            amount: data[\"amount\"],\n            receiver: data[\"receiver\"],\n            closeAmount: data[\"close-amount\"],\n            closeRemainderTo: data[\"close-remainder-to\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class TransactionResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n     * transactions type. Represents both regular and inner transactions.\n     * Definition:\n     * data/transactions/signedtxn.go : SignedTxn\n     * data/transactions/transaction.go : Transaction\n     */ constructor({ currentRound, transaction }){\n        super();\n        this.currentRound = currentRound;\n        this.transaction = transaction;\n        this.attribute_map = {\n            currentRound: \"current-round\",\n            transaction: \"transaction\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        if (typeof data[\"transaction\"] === \"undefined\") throw new Error(`Response is missing required field 'transaction': ${data}`);\n        return new TransactionResponse({\n            currentRound: data[\"current-round\"],\n            transaction: Transaction.from_obj_for_encoding(data[\"transaction\"])\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */ class TransactionSignature extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionSignature` object.\n     * @param logicsig - (lsig) Programatic transaction signature.\n     * Definition:\n     * data/transactions/logicsig.go\n     * @param multisig - (msig) structure holding multiple subsignatures.\n     * Definition:\n     * crypto/multisig.go : MultisigSig\n     * @param sig - (sig) Standard ed25519 signature.\n     */ constructor({ logicsig, multisig, sig }){\n        super();\n        this.logicsig = logicsig;\n        this.multisig = multisig;\n        this.sig = typeof sig === \"string\" ? new Uint8Array(Buffer.from(sig, \"base64\")) : sig;\n        this.attribute_map = {\n            logicsig: \"logicsig\",\n            multisig: \"multisig\",\n            sig: \"sig\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new TransactionSignature({\n            logicsig: typeof data[\"logicsig\"] !== \"undefined\" ? TransactionSignatureLogicsig.from_obj_for_encoding(data[\"logicsig\"]) : undefined,\n            multisig: typeof data[\"multisig\"] !== \"undefined\" ? TransactionSignatureMultisig.from_obj_for_encoding(data[\"multisig\"]) : undefined,\n            sig: data[\"sig\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */ class TransactionSignatureLogicsig extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionSignatureLogicsig` object.\n     * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n     * address of ana ccount. Base64 encoded TEAL program.\n     * @param args - (arg) Logic arguments, base64 encoded.\n     * @param multisigSignature - (msig) structure holding multiple subsignatures.\n     * Definition:\n     * crypto/multisig.go : MultisigSig\n     * @param signature - (sig) ed25519 signature.\n     */ constructor({ logic, args, multisigSignature, signature }){\n        super();\n        this.logic = typeof logic === \"string\" ? new Uint8Array(Buffer.from(logic, \"base64\")) : logic;\n        this.args = args;\n        this.multisigSignature = multisigSignature;\n        this.signature = typeof signature === \"string\" ? new Uint8Array(Buffer.from(signature, \"base64\")) : signature;\n        this.attribute_map = {\n            logic: \"logic\",\n            args: \"args\",\n            multisigSignature: \"multisig-signature\",\n            signature: \"signature\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"logic\"] === \"undefined\") throw new Error(`Response is missing required field 'logic': ${data}`);\n        return new TransactionSignatureLogicsig({\n            logic: data[\"logic\"],\n            args: data[\"args\"],\n            multisigSignature: typeof data[\"multisig-signature\"] !== \"undefined\" ? TransactionSignatureMultisig.from_obj_for_encoding(data[\"multisig-signature\"]) : undefined,\n            signature: data[\"signature\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * (msig) structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */ class TransactionSignatureMultisig extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionSignatureMultisig` object.\n     * @param subsignature - (subsig) holds pairs of public key and signatures.\n     * @param threshold - (thr)\n     * @param version - (v)\n     */ constructor({ subsignature, threshold, version }){\n        super();\n        this.subsignature = subsignature;\n        this.threshold = threshold;\n        this.version = version;\n        this.attribute_map = {\n            subsignature: \"subsignature\",\n            threshold: \"threshold\",\n            version: \"version\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new TransactionSignatureMultisig({\n            subsignature: typeof data[\"subsignature\"] !== \"undefined\" ? data[\"subsignature\"].map(TransactionSignatureMultisigSubsignature.from_obj_for_encoding) : undefined,\n            threshold: data[\"threshold\"],\n            version: data[\"version\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\nclass TransactionSignatureMultisigSubsignature extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionSignatureMultisigSubsignature` object.\n     * @param publicKey - (pk)\n     * @param signature - (s)\n     */ constructor({ publicKey, signature }){\n        super();\n        this.publicKey = typeof publicKey === \"string\" ? new Uint8Array(Buffer.from(publicKey, \"base64\")) : publicKey;\n        this.signature = typeof signature === \"string\" ? new Uint8Array(Buffer.from(signature, \"base64\")) : signature;\n        this.attribute_map = {\n            publicKey: \"public-key\",\n            signature: \"signature\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new TransactionSignatureMultisigSubsignature({\n            publicKey: data[\"public-key\"],\n            signature: data[\"signature\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */ class TransactionStateProof extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionStateProof` object.\n     * @param message - (spmsg)\n     * @param stateProof - (sp) represents a state proof.\n     * Definition:\n     * crypto/stateproof/structs.go : StateProof\n     * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n     * protocol/stateproof.go\n     */ constructor({ message, stateProof, stateProofType }){\n        super();\n        this.message = message;\n        this.stateProof = stateProof;\n        this.stateProofType = stateProofType;\n        this.attribute_map = {\n            message: \"message\",\n            stateProof: \"state-proof\",\n            stateProofType: \"state-proof-type\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ return new TransactionStateProof({\n            message: typeof data[\"message\"] !== \"undefined\" ? IndexerStateProofMessage.from_obj_for_encoding(data[\"message\"]) : undefined,\n            stateProof: typeof data[\"state-proof\"] !== \"undefined\" ? StateProofFields.from_obj_for_encoding(data[\"state-proof\"]) : undefined,\n            stateProofType: data[\"state-proof-type\"]\n        });\n    /* eslint-enable dot-notation */ }\n}\n/**\n *\n */ class TransactionsResponse extends _basemodel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Creates a new `TransactionsResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param transactions -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ currentRound, transactions, nextToken }){\n        super();\n        this.currentRound = currentRound;\n        this.transactions = transactions;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            currentRound: \"current-round\",\n            transactions: \"transactions\",\n            nextToken: \"next-token\"\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */ if (typeof data[\"current-round\"] === \"undefined\") throw new Error(`Response is missing required field 'current-round': ${data}`);\n        if (!Array.isArray(data[\"transactions\"])) throw new Error(`Response is missing required array field 'transactions': ${data}`);\n        return new TransactionsResponse({\n            currentRound: data[\"current-round\"],\n            transactions: data[\"transactions\"].map(Transaction.from_obj_for_encoding),\n            nextToken: data[\"next-token\"]\n        });\n    /* eslint-enable dot-notation */ }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchAccounts.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchAccounts.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchAccounts)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * Returns information about indexed accounts.\n *\n * #### Example\n * ```typescript\n * const accounts = await indexerClient.searchAccounts().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n * @category GET\n */ class SearchAccounts extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/accounts`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/accounts\";\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     * @remarks\n     * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.\n     *\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        this.query[\"currency-greater-than\"] = greater;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     *\n     * @param id\n     * @category query\n     */ assetID(id) {\n        this.query[\"asset-id\"] = id;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const accountsPage1 = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountsPage2 = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .nextToken(accountsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @remarks For performance reasons, this parameter may be disabled on some configurations.\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include accounts that use this spending key.\n     *\n     * #### Example\n     * ```typescript\n     * const authAddr = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .authAddr(authAddr)\n     *        .do();\n     * ```\n     *\n     * @param authAddr\n     */ authAddr(authAddr) {\n        this.query[\"auth-addr\"] = authAddr;\n        return this;\n    }\n    /**\n     * Filter for this application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .applicationID(appId)\n     *        .do();\n     * ```\n     *\n     * @param applicationID\n     * @category query\n     */ applicationID(applicationID) {\n        this.query[\"application-id\"] = applicationID;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\n     *\n     * #### Example 1\n     * ```typescript\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .exclude(\"all\")\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .exclude(\"assets,created-assets\")\n     *        .do();\n     * ```\n     * @remarks By default, it behaves as exclude=none\n     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\n     * @category query\n     */ exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n} //# sourceMappingURL=searchAccounts.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchAccounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplicationBoxes.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplicationBoxes.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForApplicationBoxes)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\nclass SearchForApplicationBoxes extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\n     * @oaram index - application index.\n     * @category GET\n     */ constructor(c, intDecoding, index){\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/applications/${index}/boxes`\n     */ path() {\n        return `/v2/applications/${this.index}/boxes`;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(next) {\n        this.query.next = next;\n        return this;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const boxesResponse = await indexerClient\n     *        .searchForApplicationBoxes(1234)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return _models_types__WEBPACK_IMPORTED_MODULE_1__.BoxesResponse.from_obj_for_encoding(body);\n    }\n} //# sourceMappingURL=searchForApplicationBoxes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvc2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDTTtBQUNoQyxNQUFNRSxrQ0FBa0NGLG9EQUFXQTtJQUM5RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXlCQyxHQUNERyxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsRUFBRUMsS0FBSyxDQUFFO1FBQy9CLEtBQUssQ0FBQ0YsR0FBR0M7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNBLEtBQUssR0FBR0E7SUFDakI7SUFDQTs7S0FFQyxHQUNEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUNqRDtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXVCQyxHQUNERSxVQUFVQyxJQUFJLEVBQUU7UUFDWixJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxHQUFHQTtRQUNsQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RFLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0QsS0FBSyxDQUFDQyxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0Esa0RBQWtEO0lBQ2xEQyxRQUFRQyxJQUFJLEVBQUU7UUFDVixPQUFPWix3REFBYUEsQ0FBQ2EscUJBQXFCLENBQUNEO0lBQy9DO0FBQ0osRUFDQSxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL3NlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMuanM/ZThmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuaW1wb3J0IHsgQm94ZXNSZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3R5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBpbmRleGVkIGFwcGxpY2F0aW9uIGJveGVzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhcHBJRCA9IDEyMzQ7XG4gICAgICpcbiAgICAgKiBjb25zdCByZXNwb25zZVBhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcyhhcHBJRClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGNvbnN0IGJveE5hbWVzUGFnZTEgPSByZXNwb25zZVBhZ2UxLmJveGVzLm1hcChib3ggPT4gYm94Lm5hbWUpO1xuICAgICAqXG4gICAgICogY29uc3QgcmVzcG9uc2VQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMoYXBwSUQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dFRva2VuKHJlc3BvbnNlUGFnZTEubmV4dFRva2VuKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBjb25zdCBib3hOYW1lc1BhZ2UyID0gcmVzcG9uc2VQYWdlMi5ib3hlcy5tYXAoYm94ID0+IGJveC5uYW1lKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWRib3hlcylcbiAgICAgKiBAb2FyYW0gaW5kZXggLSBhcHBsaWNhdGlvbiBpbmRleC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYXBwbGljYXRpb25zLyR7aW5kZXh9L2JveGVzYFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FwcGxpY2F0aW9ucy8ke3RoaXMuaW5kZXh9L2JveGVzYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFwcElEID0gMTIzNDtcbiAgICAgKlxuICAgICAqIGNvbnN0IHJlc3BvbnNlUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzKGFwcElEKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogY29uc3QgYm94TmFtZXNQYWdlMSA9IHJlc3BvbnNlUGFnZTEuYm94ZXMubWFwKGJveCA9PiBib3gubmFtZSk7XG4gICAgICpcbiAgICAgKiBjb25zdCByZXNwb25zZVBhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcyhhcHBJRClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0VG9rZW4ocmVzcG9uc2VQYWdlMS5uZXh0VG9rZW4pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGNvbnN0IGJveE5hbWVzUGFnZTIgPSByZXNwb25zZVBhZ2UyLmJveGVzLm1hcChib3ggPT4gYm94Lm5hbWUpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5leHQgPSBuZXh0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGltaXQgcmVzdWx0cyBmb3IgcGFnaW5hdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYm94ZXNSZXNwb25zZSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMoMTIzNClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIEJveGVzUmVzcG9uc2UuZnJvbV9vYmpfZm9yX2VuY29kaW5nKGJvZHkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiQm94ZXNSZXNwb25zZSIsIlNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMiLCJjb25zdHJ1Y3RvciIsImMiLCJpbnREZWNvZGluZyIsImluZGV4IiwicGF0aCIsIm5leHRUb2tlbiIsIm5leHQiLCJxdWVyeSIsImxpbWl0IiwicHJlcGFyZSIsImJvZHkiLCJmcm9tX29ial9mb3JfZW5jb2RpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplicationBoxes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplications.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplications.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForApplications)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * Returns information about indexed applications.\n *\n * #### Example\n * ```typescript\n * const apps = await indexerClient.searchForApplications().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\n * @category GET\n */ class SearchForApplications extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/applications`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/applications\";\n    }\n    /**\n     * Application ID for filter, as int\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .index(appId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupApplications(appId).do()`\n     * @param index\n     * @category query\n     */ index(index) {\n        this.query[\"application-id\"] = index;\n        return this;\n    }\n    /**\n     * Creator for filter, as string\n     *\n     * #### Example\n     * ```typescript\n     * const creator = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .creator(creator)\n     *        .do();\n     * ```\n     * @param creator\n     * @category query\n     */ creator(creator) {\n        this.query.creator = creator;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     *\n     * const appsPage1 = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const appsPage2 = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .nextToken(appsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(next) {\n        this.query.next = next;\n        return this;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n} //# sourceMappingURL=searchForApplications.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvc2VhcmNoRm9yQXBwbGljYXRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDOzs7Ozs7Ozs7O0NBVUMsR0FDYyxNQUFNQyw4QkFBOEJELG9EQUFXQTtJQUMxRDs7S0FFQyxHQUNELGtEQUFrRDtJQUNsREUsT0FBTztRQUNILE9BQU87SUFDWDtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0MsS0FBSyxDQUFDLGlCQUFpQixHQUFHRDtRQUMvQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREUsUUFBUUEsT0FBTyxFQUFFO1FBQ2IsSUFBSSxDQUFDRCxLQUFLLENBQUNDLE9BQU8sR0FBR0E7UUFDckIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FvQkMsR0FDREMsVUFBVUMsSUFBSSxFQUFFO1FBQ1osSUFBSSxDQUFDSCxLQUFLLENBQUNHLElBQUksR0FBR0E7UUFDbEIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNEQyxNQUFNQSxLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUNKLEtBQUssQ0FBQ0ksS0FBSyxHQUFHQTtRQUNuQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FxQkMsR0FDREMsV0FBV0MsUUFBUSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDTixLQUFLLENBQUMsY0FBYyxHQUFHTTtRQUM1QixPQUFPLElBQUk7SUFDZjtBQUNKLEVBQ0EsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9zZWFyY2hGb3JBcHBsaWNhdGlvbnMuanM/ZDFkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QnO1xuLyoqXG4gKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGluZGV4ZWQgYXBwbGljYXRpb25zLlxuICpcbiAqICMjIyMgRXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgYXBwcyA9IGF3YWl0IGluZGV4ZXJDbGllbnQuc2VhcmNoRm9yQXBwbGljYXRpb25zKCkuZG8oKTtcbiAqIGBgYFxuICpcbiAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXBwbGljYXRpb25zKVxuICogQGNhdGVnb3J5IEdFVFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGb3JBcHBsaWNhdGlvbnMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hcHBsaWNhdGlvbnNgXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92Mi9hcHBsaWNhdGlvbnMnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWNhdGlvbiBJRCBmb3IgZmlsdGVyLCBhcyBpbnRcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBJZCA9IDYwNTUzNDY2O1xuICAgICAqIGNvbnN0IGFwcHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbnMoKVxuICAgICAqICAgICAgICAuaW5kZXgoYXBwSWQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEByZW1hcmtzIEFsdGVybmF0aXZlbHksIHVzZSBgaW5kZXhlckNsaWVudC5sb29rdXBBcHBsaWNhdGlvbnMoYXBwSWQpLmRvKClgXG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnYXBwbGljYXRpb24taWQnXSA9IGluZGV4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRvciBmb3IgZmlsdGVyLCBhcyBzdHJpbmdcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBjcmVhdG9yID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYXBwcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9ucygpXG4gICAgICogICAgICAgIC5jcmVhdG9yKGNyZWF0b3IpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBjcmVhdG9yXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgY3JlYXRvcihjcmVhdG9yKSB7XG4gICAgICAgIHRoaXMucXVlcnkuY3JlYXRvciA9IGNyZWF0b3I7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhcHBzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbnMoKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBhcHBzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbnMoKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHRUb2tlbihhcHBzUGFnZTFbXCJuZXh0LXRva2VuXCJdKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbmV4dFRva2VuIC0gcHJvdmlkZWQgYnkgdGhlIHByZXZpb3VzIHJlc3VsdHMuXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbmV4dFRva2VuKG5leHQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5uZXh0ID0gbmV4dDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbWl0IHJlc3VsdHMgZm9yIHBhZ2luYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFwcHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbnMoKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlcyBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbnMoKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbChmYWxzZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25zKClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmF1bHQgdHJ1ZSB3aGVuIGNhbGxlZCB3aXRob3V0IHBhc3NpbmcgYSB2YWx1ZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGluY2x1ZGVBbGwodmFsdWUgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2luY2x1ZGUtYWxsJ10gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VhcmNoRm9yQXBwbGljYXRpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIlNlYXJjaEZvckFwcGxpY2F0aW9ucyIsInBhdGgiLCJpbmRleCIsInF1ZXJ5IiwiY3JlYXRvciIsIm5leHRUb2tlbiIsIm5leHQiLCJsaW1pdCIsImluY2x1ZGVBbGwiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForAssets.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForAssets.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForAssets)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * Returns information about indexed assets.\n *\n * #### Example\n * ```typescript\n * const assets = await indexerClient.searchForAssets().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n * @category GET\n */ class SearchForAssets extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/assets`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/assets\";\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Filter just assets with the given creator address.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .creator(address)\n     *        .do();\n     * ```\n     *\n     * @param creator\n     * @category query\n     */ creator(creator) {\n        this.query.creator = creator;\n        return this;\n    }\n    /**\n     * Filter just assets with the given name.\n     *\n     * #### Example\n     * ```typescript\n     * const name = \"Test Token\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .name(name)\n     *        .do();\n     * ```\n     *\n     * @param name\n     * @category query\n     */ name(name) {\n        this.query.name = name;\n        return this;\n    }\n    /**\n     * Filter just assets with the given unit.\n     *\n     * #### Example\n     * ```typescript\n     * const unit = \"test\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .unit(unit)\n     *        .do();\n     * ```\n     *\n     * @param unit\n     * @category query\n     */ unit(unit) {\n        this.query.unit = unit;\n        return this;\n    }\n    /**\n     * Asset ID for filter, as int.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .index(assetId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`\n     * @param index\n     * @category query\n     */ index(index) {\n        this.query[\"asset-id\"] = index;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     *\n     * const assetsPage1 = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetsPage2 = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .nextToken(assetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n} //# sourceMappingURL=searchForAssets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvc2VhcmNoRm9yQXNzZXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDOzs7Ozs7Ozs7O0NBVUMsR0FDYyxNQUFNQyx3QkFBd0JELG9EQUFXQTtJQUNwRDs7S0FFQyxHQUNELGtEQUFrRDtJQUNsREUsT0FBTztRQUNILE9BQU87SUFDWDtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREUsUUFBUUEsT0FBTyxFQUFFO1FBQ2IsSUFBSSxDQUFDRCxLQUFLLENBQUNDLE9BQU8sR0FBR0E7UUFDckIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNEQyxLQUFLQSxJQUFJLEVBQUU7UUFDUCxJQUFJLENBQUNGLEtBQUssQ0FBQ0UsSUFBSSxHQUFHQTtRQUNsQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLEtBQUtBLElBQUksRUFBRTtRQUNQLElBQUksQ0FBQ0gsS0FBSyxDQUFDRyxJQUFJLEdBQUdBO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDSixLQUFLLENBQUMsV0FBVyxHQUFHSTtRQUN6QixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW9CQyxHQUNEQyxVQUFVQSxTQUFTLEVBQUU7UUFDakIsSUFBSSxDQUFDTCxLQUFLLENBQUNNLElBQUksR0FBR0Q7UUFDbEIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBcUJDLEdBQ0RFLFdBQVdDLFFBQVEsSUFBSSxFQUFFO1FBQ3JCLElBQUksQ0FBQ1IsS0FBSyxDQUFDLGNBQWMsR0FBR1E7UUFDNUIsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvc2VhcmNoRm9yQXNzZXRzLmpzPzg0ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0Jztcbi8qKlxuICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBpbmRleGVkIGFzc2V0cy5cbiAqXG4gKiAjIyMjIEV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IGFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnQuc2VhcmNoRm9yQXNzZXRzKCkuZG8oKTtcbiAqIGBgYFxuICpcbiAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXNzZXRzKVxuICogQGNhdGVnb3J5IEdFVFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGb3JBc3NldHMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hc3NldHNgXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92Mi9hc3NldHMnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaW1pdCByZXN1bHRzIGZvciBwYWdpbmF0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBc3NldHMoKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIganVzdCBhc3NldHMgd2l0aCB0aGUgZ2l2ZW4gY3JlYXRvciBhZGRyZXNzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBc3NldHMoKVxuICAgICAqICAgICAgICAuY3JlYXRvcihhZGRyZXNzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjcmVhdG9yXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgY3JlYXRvcihjcmVhdG9yKSB7XG4gICAgICAgIHRoaXMucXVlcnkuY3JlYXRvciA9IGNyZWF0b3I7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIganVzdCBhc3NldHMgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBuYW1lID0gXCJUZXN0IFRva2VuXCI7XG4gICAgICogY29uc3QgYXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXNzZXRzKClcbiAgICAgKiAgICAgICAgLm5hbWUobmFtZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5hbWUobmFtZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5hbWUgPSBuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVyIGp1c3QgYXNzZXRzIHdpdGggdGhlIGdpdmVuIHVuaXQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdW5pdCA9IFwidGVzdFwiO1xuICAgICAqIGNvbnN0IGFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFzc2V0cygpXG4gICAgICogICAgICAgIC51bml0KHVuaXQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHVuaXRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICB1bml0KHVuaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS51bml0ID0gdW5pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzc2V0IElEIGZvciBmaWx0ZXIsIGFzIGludC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFzc2V0cygpXG4gICAgICogICAgICAgIC5pbmRleChhc3NldElkKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcmVtYXJrcyBBbHRlcm5hdGl2ZWx5LCB1c2UgYGluZGV4ZXJDbGllbnQubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpLmRvKCk7YFxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGluZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2Fzc2V0LWlkJ10gPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFzc2V0c1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXNzZXRzKClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqXG4gICAgICogY29uc3QgYXNzZXRzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBc3NldHMoKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHRUb2tlbihhc3NldHNQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dFRva2VuKSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHRUb2tlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGVzIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlc1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDFcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXNzZXRzKClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoZmFsc2UpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXNzZXRzKClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmF1bHQgdHJ1ZSB3aGVuIGNhbGxlZCB3aXRob3V0IHBhc3NpbmcgYSB2YWx1ZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGluY2x1ZGVBbGwodmFsdWUgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2luY2x1ZGUtYWxsJ10gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VhcmNoRm9yQXNzZXRzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsIlNlYXJjaEZvckFzc2V0cyIsInBhdGgiLCJsaW1pdCIsInF1ZXJ5IiwiY3JlYXRvciIsIm5hbWUiLCJ1bml0IiwiaW5kZXgiLCJuZXh0VG9rZW4iLCJuZXh0IiwiaW5jbHVkZUFsbCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForTransactions.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForTransactions.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForTransactions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _lookupAccountTransactions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lookupAccountTransactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js\");\n\n\n/**\n * Returns information about indexed transactions.\n *\n * #### Example\n * ```typescript\n * const txns = await indexerClient.searchForTransactions().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n * @category GET\n */ class SearchForTransactions extends _jsonrequest__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/transactions`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/transactions\";\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */ notePrefix(prefix) {\n        this.query[\"note-prefix\"] = (0,_lookupAccountTransactions__WEBPACK_IMPORTED_MODULE_1__.base64StringFunnel)(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .txType(\"keyreg\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\n     * @category query\n     */ txType(type) {\n        this.query[\"tx-type\"] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .sigType(\"sig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */ sigType(type) {\n        this.query[\"sig-type\"] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .txid(txId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\n     * @param txid\n     * @category query\n     */ txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupBlock(targetBlock).do()`\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAssetTransactions(assetId).do()`\n     * @param id\n     * @category query\n     */ assetID(id) {\n        this.query[\"asset-id\"] = id;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string\n     * @category query\n     */ beforeTime(before) {\n        this.query[\"before-time\"] = before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string\n     * @category query\n     */ afterTime(after) {\n        this.query[\"after-time\"] = after;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     * @remarks\n     * If you are looking for transactions with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude transactions with a 0 amount.\n     *\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        this.query[\"currency-greater-than\"] = greater;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * Combined with address, defines what address to filter on, as string.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const role = \"freeze-target\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .address(address)\n     *        .addressRole(role)\n     *        .do();\n     * ```\n     *\n     * @param role - one of `sender`, `receiver`, `freeze-target`\n     * @category query\n     */ addressRole(role) {\n        this.query[\"address-role\"] = role;\n        return this;\n    }\n    /**\n     * Only include transactions with this address in one of the transaction fields.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .address(address)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAccountTransactions(address).do()`\n     * @param address\n     * @category query\n     */ address(address) {\n        this.query.address = address;\n        return this;\n    }\n    /**\n     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .excludeCloseTo(true)\n     *        .do();\n     * ```\n     *\n     * @param exclude\n     * @category query\n     */ excludeCloseTo(exclude) {\n        this.query[\"exclude-close-to\"] = exclude;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const txnsPage1 = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const txnsPage2 = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .nextToken(txnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */ rekeyTo(rekeyTo) {\n        this.query[\"rekey-to\"] = rekeyTo;\n        return this;\n    }\n    /**\n     * Filter for this application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .applicationID(appId)\n     *        .do();\n     * ```\n     *\n     * @param applicationID\n     * @category query\n     */ applicationID(applicationID) {\n        this.query[\"application-id\"] = applicationID;\n        return this;\n    }\n} //# sourceMappingURL=searchForTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/searchForTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JSONRequest)\n/* harmony export */ });\n/* harmony import */ var _types_intDecoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/intDecoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/intDecoding.js\");\n\n/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */ class JSONRequest {\n    /**\n     * @param client - HTTPClient object.\n     * @param intDecoding - The method to use\n     *   for decoding integers from this request's response. See the setIntDecoding method for more\n     *   details.\n     */ constructor(client, intDecoding){\n        this.c = client;\n        this.query = {};\n        this.intDecoding = intDecoding || _types_intDecoding__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT;\n    }\n    /**\n     * Prepare a JSON response before returning it.\n     *\n     * Use this method to change and restructure response\n     * data as needed after receiving it from the `do()` method.\n     * @param body - Response body received\n     * @category JSONRequest\n     */ // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return body;\n    }\n    /**\n     * Execute the request.\n     * @param headers - Additional headers to send in the request. Optional.\n     * @returns A promise which resolves to the parsed response data.\n     * @category JSONRequest\n     */ async do(headers = {}) {\n        const jsonOptions = {};\n        if (this.intDecoding !== \"default\") {\n            jsonOptions.intDecoding = this.intDecoding;\n        }\n        const res = await this.c.get(this.path(), this.query, headers, jsonOptions);\n        return this.prepare(res.body);\n    }\n    /**\n     * Execute the request, but do not process the response data in any way.\n     * @param headers - Additional headers to send in the request. Optional.\n     * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n     * @category JSONRequest\n     */ async doRaw(headers = {}) {\n        const res = await this.c.get(this.path(), this.query, headers, {}, false);\n        return res.body;\n    }\n    /**\n     * Configure how integers in this request's JSON response will be decoded.\n     *\n     * The options are:\n     * * \"default\": Integers will be decoded according to JSON.parse, meaning they will all be\n     *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.\n     * * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n     *   Number.MAX_SAFE_INTEGER an error will be thrown.\n     * * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n     *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n     * * \"bigint\": All integers will be decoded as BigInts.\n     *\n     * @param method - The method to use when parsing the\n     *   response for this request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\".\n     * @category JSONRequest\n     */ setIntDecoding(method) {\n        if (method !== \"default\" && method !== \"safe\" && method !== \"mixed\" && method !== \"bigint\") throw new Error(`Invalid method for int decoding: ${method}`);\n        this.intDecoding = method;\n        return this;\n    }\n} //# sourceMappingURL=jsonrequest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2pzb25yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEO0FBQ2xEOzs7Ozs7Q0FNQyxHQUNjLE1BQU1DO0lBQ2pCOzs7OztLQUtDLEdBQ0RDLFlBQVlDLE1BQU0sRUFBRUMsV0FBVyxDQUFFO1FBQzdCLElBQUksQ0FBQ0MsQ0FBQyxHQUFHRjtRQUNULElBQUksQ0FBQ0csS0FBSyxHQUFHLENBQUM7UUFDZCxJQUFJLENBQUNGLFdBQVcsR0FBR0EsZUFBZUosMERBQVdBLENBQUNPLE9BQU87SUFDekQ7SUFDQTs7Ozs7OztLQU9DLEdBQ0Qsa0RBQWtEO0lBQ2xEQyxRQUFRQyxJQUFJLEVBQUU7UUFDVixPQUFPQTtJQUNYO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNQyxHQUFHQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ25CLE1BQU1DLGNBQWMsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQ1IsV0FBVyxLQUFLLFdBQVc7WUFDaENRLFlBQVlSLFdBQVcsR0FBRyxJQUFJLENBQUNBLFdBQVc7UUFDOUM7UUFDQSxNQUFNUyxNQUFNLE1BQU0sSUFBSSxDQUFDUixDQUFDLENBQUNTLEdBQUcsQ0FBQyxJQUFJLENBQUNDLElBQUksSUFBSSxJQUFJLENBQUNULEtBQUssRUFBRUssU0FBU0M7UUFDL0QsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSUosSUFBSTtJQUNoQztJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTU8sTUFBTUwsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUN0QixNQUFNRSxNQUFNLE1BQU0sSUFBSSxDQUFDUixDQUFDLENBQUNTLEdBQUcsQ0FBQyxJQUFJLENBQUNDLElBQUksSUFBSSxJQUFJLENBQUNULEtBQUssRUFBRUssU0FBUyxDQUFDLEdBQUc7UUFDbkUsT0FBT0UsSUFBSUosSUFBSTtJQUNuQjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7S0FlQyxHQUNEUSxlQUFlQyxNQUFNLEVBQUU7UUFDbkIsSUFBSUEsV0FBVyxhQUNYQSxXQUFXLFVBQ1hBLFdBQVcsV0FDWEEsV0FBVyxVQUNYLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGlDQUFpQyxFQUFFRCxPQUFPLENBQUM7UUFDaEUsSUFBSSxDQUFDZCxXQUFXLEdBQUdjO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0FBQ0osRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9qc29ucmVxdWVzdC5qcz9jZjY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJbnREZWNvZGluZyBmcm9tICcuLi8uLi90eXBlcy9pbnREZWNvZGluZyc7XG4vKipcbiAqIEJhc2UgYWJzdHJhY3QgY2xhc3MgZm9yIEpTT04gcmVxdWVzdHMuXG4gKlxuICogRGF0YTogVGhlIHR5cGUgcmV0dXJuZWQgZnJvbSB0aGUgYGRvKClgIG1ldGhvZFxuICpcbiAqIEJvZHk6IFRoZSBzdHJ1Y3R1cmUgb2YgdGhlIHJlc3BvbnNlJ3MgYm9keVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNsaWVudCAtIEhUVFBDbGllbnQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBpbnREZWNvZGluZyAtIFRoZSBtZXRob2QgdG8gdXNlXG4gICAgICogICBmb3IgZGVjb2RpbmcgaW50ZWdlcnMgZnJvbSB0aGlzIHJlcXVlc3QncyByZXNwb25zZS4gU2VlIHRoZSBzZXRJbnREZWNvZGluZyBtZXRob2QgZm9yIG1vcmVcbiAgICAgKiAgIGRldGFpbHMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBpbnREZWNvZGluZykge1xuICAgICAgICB0aGlzLmMgPSBjbGllbnQ7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgICAgICAgdGhpcy5pbnREZWNvZGluZyA9IGludERlY29kaW5nIHx8IEludERlY29kaW5nLkRFRkFVTFQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByZXBhcmUgYSBKU09OIHJlc3BvbnNlIGJlZm9yZSByZXR1cm5pbmcgaXQuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gY2hhbmdlIGFuZCByZXN0cnVjdHVyZSByZXNwb25zZVxuICAgICAqIGRhdGEgYXMgbmVlZGVkIGFmdGVyIHJlY2VpdmluZyBpdCBmcm9tIHRoZSBgZG8oKWAgbWV0aG9kLlxuICAgICAqIEBwYXJhbSBib2R5IC0gUmVzcG9uc2UgYm9keSByZWNlaXZlZFxuICAgICAqIEBjYXRlZ29yeSBKU09OUmVxdWVzdFxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShib2R5KSB7XG4gICAgICAgIHJldHVybiBib2R5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBoZWFkZXJzIC0gQWRkaXRpb25hbCBoZWFkZXJzIHRvIHNlbmQgaW4gdGhlIHJlcXVlc3QuIE9wdGlvbmFsLlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byB0aGUgcGFyc2VkIHJlc3BvbnNlIGRhdGEuXG4gICAgICogQGNhdGVnb3J5IEpTT05SZXF1ZXN0XG4gICAgICovXG4gICAgYXN5bmMgZG8oaGVhZGVycyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGpzb25PcHRpb25zID0ge307XG4gICAgICAgIGlmICh0aGlzLmludERlY29kaW5nICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgIGpzb25PcHRpb25zLmludERlY29kaW5nID0gdGhpcy5pbnREZWNvZGluZztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmMuZ2V0KHRoaXMucGF0aCgpLCB0aGlzLnF1ZXJ5LCBoZWFkZXJzLCBqc29uT3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXBhcmUocmVzLmJvZHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSByZXF1ZXN0LCBidXQgZG8gbm90IHByb2Nlc3MgdGhlIHJlc3BvbnNlIGRhdGEgaW4gYW55IHdheS5cbiAgICAgKiBAcGFyYW0gaGVhZGVycyAtIEFkZGl0aW9uYWwgaGVhZGVycyB0byBzZW5kIGluIHRoZSByZXF1ZXN0LiBPcHRpb25hbC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gdGhlIHJhdyByZXNwb25zZSBkYXRhLCBleGFjdGx5IGFzIHJldHVybmVkIGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICogQGNhdGVnb3J5IEpTT05SZXF1ZXN0XG4gICAgICovXG4gICAgYXN5bmMgZG9SYXcoaGVhZGVycyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYy5nZXQodGhpcy5wYXRoKCksIHRoaXMucXVlcnksIGhlYWRlcnMsIHt9LCBmYWxzZSk7XG4gICAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlIGhvdyBpbnRlZ2VycyBpbiB0aGlzIHJlcXVlc3QncyBKU09OIHJlc3BvbnNlIHdpbGwgYmUgZGVjb2RlZC5cbiAgICAgKlxuICAgICAqIFRoZSBvcHRpb25zIGFyZTpcbiAgICAgKiAqIFwiZGVmYXVsdFwiOiBJbnRlZ2VycyB3aWxsIGJlIGRlY29kZWQgYWNjb3JkaW5nIHRvIEpTT04ucGFyc2UsIG1lYW5pbmcgdGhleSB3aWxsIGFsbCBiZVxuICAgICAqICAgTnVtYmVycyBhbmQgYW55IHZhbHVlcyBncmVhdGVyIHRoYW4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgd2lsbCBsb3NlIHByZWNpc2lvbi5cbiAgICAgKiAqIFwic2FmZVwiOiBBbGwgaW50ZWdlcnMgd2lsbCBiZSBkZWNvZGVkIGFzIE51bWJlcnMsIGJ1dCBpZiBhbnkgdmFsdWVzIGFyZSBncmVhdGVyIHRoYW5cbiAgICAgKiAgIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICAgICAqICogXCJtaXhlZFwiOiBJbnRlZ2VycyB3aWxsIGJlIGRlY29kZWQgYXMgTnVtYmVycyBpZiB0aGV5IGFyZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCBvdGhlcndpc2UgdGhleSB3aWxsIGJlIGRlY29kZWQgYXMgQmlnSW50cy5cbiAgICAgKiAqIFwiYmlnaW50XCI6IEFsbCBpbnRlZ2VycyB3aWxsIGJlIGRlY29kZWQgYXMgQmlnSW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXRob2QgLSBUaGUgbWV0aG9kIHRvIHVzZSB3aGVuIHBhcnNpbmcgdGhlXG4gICAgICogICByZXNwb25zZSBmb3IgdGhpcyByZXF1ZXN0LiBNdXN0IGJlIG9uZSBvZiBcImRlZmF1bHRcIiwgXCJzYWZlXCIsIFwibWl4ZWRcIiwgb3IgXCJiaWdpbnRcIi5cbiAgICAgKiBAY2F0ZWdvcnkgSlNPTlJlcXVlc3RcbiAgICAgKi9cbiAgICBzZXRJbnREZWNvZGluZyhtZXRob2QpIHtcbiAgICAgICAgaWYgKG1ldGhvZCAhPT0gJ2RlZmF1bHQnICYmXG4gICAgICAgICAgICBtZXRob2QgIT09ICdzYWZlJyAmJlxuICAgICAgICAgICAgbWV0aG9kICE9PSAnbWl4ZWQnICYmXG4gICAgICAgICAgICBtZXRob2QgIT09ICdiaWdpbnQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1ldGhvZCBmb3IgaW50IGRlY29kaW5nOiAke21ldGhvZH1gKTtcbiAgICAgICAgdGhpcy5pbnREZWNvZGluZyA9IG1ldGhvZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbnJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbIkludERlY29kaW5nIiwiSlNPTlJlcXVlc3QiLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsImludERlY29kaW5nIiwiYyIsInF1ZXJ5IiwiREVGQVVMVCIsInByZXBhcmUiLCJib2R5IiwiZG8iLCJoZWFkZXJzIiwianNvbk9wdGlvbnMiLCJyZXMiLCJnZXQiLCJwYXRoIiwiZG9SYXciLCJzZXRJbnREZWNvZGluZyIsIm1ldGhvZCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/serviceClient.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/serviceClient.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ServiceClient)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/client.js\");\n/* harmony import */ var _types_intDecoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/intDecoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/intDecoding.js\");\n\n\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */ function convertTokenStringToTokenHeader(token = \"\", headerIdentifier) {\n    const tokenHeader = {};\n    tokenHeader[headerIdentifier] = token;\n    return tokenHeader;\n}\nfunction isBaseHTTPClient(tbc) {\n    return typeof tbc.get === \"function\";\n}\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */ class ServiceClient {\n    constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port, defaultHeaders = {}){\n        if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n            // we are using a base client\n            this.c = new _client__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tokenHeaderOrStrOrBaseClient);\n        } else {\n            // Accept token header as string or object\n            // - workaround to allow backwards compatibility for multiple headers\n            let tokenHeader;\n            if (typeof tokenHeaderOrStrOrBaseClient === \"string\") {\n                tokenHeader = convertTokenStringToTokenHeader(tokenHeaderOrStrOrBaseClient, tokenHeaderIdentifier);\n            } else {\n                tokenHeader = tokenHeaderOrStrOrBaseClient;\n            }\n            this.c = new _client__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tokenHeader, baseServer, port, defaultHeaders);\n        }\n        this.intDecoding = _types_intDecoding__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT;\n    }\n    /**\n     * Set the default int decoding method for all JSON requests this client creates.\n     * @param method - \\{\"default\" | \"safe\" | \"mixed\" | \"bigint\"\\} method The method to use when parsing the\n     *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n     *   JSONRequest.setIntDecoding for more details about what each method does.\n     */ setIntEncoding(method) {\n        this.intDecoding = method;\n    }\n    /**\n     * Get the default int decoding method for all JSON requests this client creates.\n     */ getIntEncoding() {\n        return this.intDecoding;\n    }\n} //# sourceMappingURL=serviceClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL3NlcnZpY2VDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ2U7QUFDbEQ7Ozs7Q0FJQyxHQUNELFNBQVNFLGdDQUFnQ0MsUUFBUSxFQUFFLEVBQUVDLGdCQUFnQjtJQUNqRSxNQUFNQyxjQUFjLENBQUM7SUFDckJBLFdBQVcsQ0FBQ0QsaUJBQWlCLEdBQUdEO0lBQ2hDLE9BQU9FO0FBQ1g7QUFDQSxTQUFTQyxpQkFBaUJDLEdBQUc7SUFDekIsT0FBTyxPQUFPQSxJQUFJQyxHQUFHLEtBQUs7QUFDOUI7QUFDQTs7Q0FFQyxHQUNjLE1BQU1DO0lBQ2pCQyxZQUFZQyxxQkFBcUIsRUFBRUMsNEJBQTRCLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUU7UUFDcEcsSUFBSVQsaUJBQWlCTSwrQkFBK0I7WUFDaEQsNkJBQTZCO1lBQzdCLElBQUksQ0FBQ0ksQ0FBQyxHQUFHLElBQUloQiwrQ0FBVUEsQ0FBQ1k7UUFDNUIsT0FDSztZQUNELDBDQUEwQztZQUMxQyxxRUFBcUU7WUFDckUsSUFBSVA7WUFDSixJQUFJLE9BQU9PLGlDQUFpQyxVQUFVO2dCQUNsRFAsY0FBY0gsZ0NBQWdDVSw4QkFBOEJEO1lBQ2hGLE9BQ0s7Z0JBQ0ROLGNBQWNPO1lBQ2xCO1lBQ0EsSUFBSSxDQUFDSSxDQUFDLEdBQUcsSUFBSWhCLCtDQUFVQSxDQUFDSyxhQUFhUSxZQUFZQyxNQUFNQztRQUMzRDtRQUNBLElBQUksQ0FBQ0UsV0FBVyxHQUFHaEIsMERBQVdBLENBQUNpQixPQUFPO0lBQzFDO0lBQ0E7Ozs7O0tBS0MsR0FDREMsZUFBZUMsTUFBTSxFQUFFO1FBQ25CLElBQUksQ0FBQ0gsV0FBVyxHQUFHRztJQUN2QjtJQUNBOztLQUVDLEdBQ0RDLGlCQUFpQjtRQUNiLE9BQU8sSUFBSSxDQUFDSixXQUFXO0lBQzNCO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9zZXJ2aWNlQ2xpZW50LmpzPzc5YzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhUVFBDbGllbnQgZnJvbSAnLi4vY2xpZW50JztcbmltcG9ydCBJbnREZWNvZGluZyBmcm9tICcuLi8uLi90eXBlcy9pbnREZWNvZGluZyc7XG4vKipcbiAqIENvbnZlcnQgYSB0b2tlbiBzdHJpbmcgdG8gYSB0b2tlbiBoZWFkZXJcbiAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiBzdHJpbmdcbiAqIEBwYXJhbSBoZWFkZXJJZGVudGlmaWVyIC0gQW4gaWRlbnRpZmllciBmb3IgdGhlIHRva2VuIGhlYWRlclxuICovXG5mdW5jdGlvbiBjb252ZXJ0VG9rZW5TdHJpbmdUb1Rva2VuSGVhZGVyKHRva2VuID0gJycsIGhlYWRlcklkZW50aWZpZXIpIHtcbiAgICBjb25zdCB0b2tlbkhlYWRlciA9IHt9O1xuICAgIHRva2VuSGVhZGVyW2hlYWRlcklkZW50aWZpZXJdID0gdG9rZW47XG4gICAgcmV0dXJuIHRva2VuSGVhZGVyO1xufVxuZnVuY3Rpb24gaXNCYXNlSFRUUENsaWVudCh0YmMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRiYy5nZXQgPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIEFic3RyYWN0IHNlcnZpY2UgY2xpZW50IHRvIGVuY2Fwc3VsYXRlIHNoYXJlZCBBbGdvZENsaWVudCBhbmQgSW5kZXhlckNsaWVudCBsb2dpY1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2aWNlQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbkhlYWRlcklkZW50aWZpZXIsIHRva2VuSGVhZGVyT3JTdHJPckJhc2VDbGllbnQsIGJhc2VTZXJ2ZXIsIHBvcnQsIGRlZmF1bHRIZWFkZXJzID0ge30pIHtcbiAgICAgICAgaWYgKGlzQmFzZUhUVFBDbGllbnQodG9rZW5IZWFkZXJPclN0ck9yQmFzZUNsaWVudCkpIHtcbiAgICAgICAgICAgIC8vIHdlIGFyZSB1c2luZyBhIGJhc2UgY2xpZW50XG4gICAgICAgICAgICB0aGlzLmMgPSBuZXcgSFRUUENsaWVudCh0b2tlbkhlYWRlck9yU3RyT3JCYXNlQ2xpZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFjY2VwdCB0b2tlbiBoZWFkZXIgYXMgc3RyaW5nIG9yIG9iamVjdFxuICAgICAgICAgICAgLy8gLSB3b3JrYXJvdW5kIHRvIGFsbG93IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGZvciBtdWx0aXBsZSBoZWFkZXJzXG4gICAgICAgICAgICBsZXQgdG9rZW5IZWFkZXI7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuSGVhZGVyT3JTdHJPckJhc2VDbGllbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5IZWFkZXIgPSBjb252ZXJ0VG9rZW5TdHJpbmdUb1Rva2VuSGVhZGVyKHRva2VuSGVhZGVyT3JTdHJPckJhc2VDbGllbnQsIHRva2VuSGVhZGVySWRlbnRpZmllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbkhlYWRlciA9IHRva2VuSGVhZGVyT3JTdHJPckJhc2VDbGllbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmMgPSBuZXcgSFRUUENsaWVudCh0b2tlbkhlYWRlciwgYmFzZVNlcnZlciwgcG9ydCwgZGVmYXVsdEhlYWRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW50RGVjb2RpbmcgPSBJbnREZWNvZGluZy5ERUZBVUxUO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlZmF1bHQgaW50IGRlY29kaW5nIG1ldGhvZCBmb3IgYWxsIEpTT04gcmVxdWVzdHMgdGhpcyBjbGllbnQgY3JlYXRlcy5cbiAgICAgKiBAcGFyYW0gbWV0aG9kIC0gXFx7XCJkZWZhdWx0XCIgfCBcInNhZmVcIiB8IFwibWl4ZWRcIiB8IFwiYmlnaW50XCJcXH0gbWV0aG9kIFRoZSBtZXRob2QgdG8gdXNlIHdoZW4gcGFyc2luZyB0aGVcbiAgICAgKiAgIHJlc3BvbnNlIGZvciByZXF1ZXN0LiBNdXN0IGJlIG9uZSBvZiBcImRlZmF1bHRcIiwgXCJzYWZlXCIsIFwibWl4ZWRcIiwgb3IgXCJiaWdpbnRcIi4gU2VlXG4gICAgICogICBKU09OUmVxdWVzdC5zZXRJbnREZWNvZGluZyBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgZWFjaCBtZXRob2QgZG9lcy5cbiAgICAgKi9cbiAgICBzZXRJbnRFbmNvZGluZyhtZXRob2QpIHtcbiAgICAgICAgdGhpcy5pbnREZWNvZGluZyA9IG1ldGhvZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IGludCBkZWNvZGluZyBtZXRob2QgZm9yIGFsbCBKU09OIHJlcXVlc3RzIHRoaXMgY2xpZW50IGNyZWF0ZXMuXG4gICAgICovXG4gICAgZ2V0SW50RW5jb2RpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludERlY29kaW5nO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZpY2VDbGllbnQuanMubWFwIl0sIm5hbWVzIjpbIkhUVFBDbGllbnQiLCJJbnREZWNvZGluZyIsImNvbnZlcnRUb2tlblN0cmluZ1RvVG9rZW5IZWFkZXIiLCJ0b2tlbiIsImhlYWRlcklkZW50aWZpZXIiLCJ0b2tlbkhlYWRlciIsImlzQmFzZUhUVFBDbGllbnQiLCJ0YmMiLCJnZXQiLCJTZXJ2aWNlQ2xpZW50IiwiY29uc3RydWN0b3IiLCJ0b2tlbkhlYWRlcklkZW50aWZpZXIiLCJ0b2tlbkhlYWRlck9yU3RyT3JCYXNlQ2xpZW50IiwiYmFzZVNlcnZlciIsInBvcnQiLCJkZWZhdWx0SGVhZGVycyIsImMiLCJpbnREZWNvZGluZyIsIkRFRkFVTFQiLCJzZXRJbnRFbmNvZGluZyIsIm1ldGhvZCIsImdldEludEVuY29kaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/serviceClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/composer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/composer.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AtomicTransactionComposer: () => (/* binding */ AtomicTransactionComposer),\n/* harmony export */   AtomicTransactionComposerStatus: () => (/* binding */ AtomicTransactionComposerStatus)\n/* harmony export */ });\n/* harmony import */ var _abi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abi */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/index.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _makeTxn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./makeTxn */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/makeTxn.js\");\n/* harmony import */ var _group__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./group */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/group.js\");\n/* harmony import */ var _wait__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wait */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/wait.js\");\n/* harmony import */ var _signer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/signer.js\");\n/* harmony import */ var _types_transactions_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types/transactions/base */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/base.js\");\n\n\n\n\n\n\n\n// First 4 bytes of SHA-512/256 hash of \"return\"\nconst RETURN_PREFIX = Buffer.from([\n    21,\n    31,\n    124,\n    117\n]);\n// The maximum number of arguments for an application call transaction\nconst MAX_APP_ARGS = 16;\nvar AtomicTransactionComposerStatus;\n(function(AtomicTransactionComposerStatus) {\n    /** The atomic group is still under construction. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"BUILDING\"] = 0] = \"BUILDING\";\n    /** The atomic group has been finalized, but not yet signed. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"BUILT\"] = 1] = \"BUILT\";\n    /** The atomic group has been finalized and signed, but not yet submitted to the network. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"SIGNED\"] = 2] = \"SIGNED\";\n    /** The atomic group has been finalized, signed, and submitted to the network. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"SUBMITTED\"] = 3] = \"SUBMITTED\";\n    /** The atomic group has been finalized, signed, submitted, and successfully committed to a block. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"COMMITTED\"] = 4] = \"COMMITTED\";\n})(AtomicTransactionComposerStatus || (AtomicTransactionComposerStatus = {}));\n/**\n * Add a value to an application call's foreign array. The addition will be as compact as possible,\n * and this function will return an index that can be used to reference `valueToAdd` in `array`.\n *\n * @param valueToAdd - The value to add to the array. If this value is already present in the array,\n *   it will not be added again. Instead, the existing index will be returned.\n * @param array - The existing foreign array. This input may be modified to append `valueToAdd`.\n * @param zeroValue - If provided, this value indicated two things: the 0 value is special for this\n *   array, so all indexes into `array` must start at 1; additionally, if `valueToAdd` equals\n *   `zeroValue`, then `valueToAdd` will not be added to the array, and instead the 0 indexes will\n *   be returned.\n * @returns An index that can be used to reference `valueToAdd` in `array`.\n */ function populateForeignArray(valueToAdd, array, zeroValue) {\n    if (zeroValue != null && valueToAdd === zeroValue) {\n        return 0;\n    }\n    const offset = zeroValue == null ? 0 : 1;\n    for(let i = 0; i < array.length; i++){\n        if (valueToAdd === array[i]) {\n            return i + offset;\n        }\n    }\n    array.push(valueToAdd);\n    return array.length - 1 + offset;\n}\n/** A class used to construct and execute atomic transaction groups */ class AtomicTransactionComposer {\n    constructor(){\n        this.status = AtomicTransactionComposerStatus.BUILDING;\n        this.transactions = [];\n        this.methodCalls = new Map();\n        this.signedTxns = [];\n        this.txIDs = [];\n    }\n    /**\n     * Get the status of this composer's transaction group.\n     */ getStatus() {\n        return this.status;\n    }\n    /**\n     * Get the number of transactions currently in this atomic group.\n     */ count() {\n        return this.transactions.length;\n    }\n    /**\n     * Create a new composer with the same underlying transactions. The new composer's status will be\n     * BUILDING, so additional transactions may be added to it.\n     */ clone() {\n        const theClone = new AtomicTransactionComposer();\n        theClone.transactions = this.transactions.map(({ txn, signer })=>({\n                // not quite a deep copy, but good enough for our purposes (modifying txn.group in buildGroup)\n                txn: _transaction__WEBPACK_IMPORTED_MODULE_1__.Transaction.from_obj_for_encoding({\n                    ...txn.get_obj_for_encoding(),\n                    // erase the group ID\n                    grp: undefined\n                }),\n                signer\n            }));\n        theClone.methodCalls = new Map(this.methodCalls);\n        return theClone;\n    }\n    /**\n     * Add a transaction to this atomic group.\n     *\n     * An error will be thrown if the transaction has a nonzero group ID, the composer's status is\n     * not BUILDING, or if adding this transaction causes the current group to exceed MAX_GROUP_SIZE.\n     */ addTransaction(txnAndSigner) {\n        if (this.status !== AtomicTransactionComposerStatus.BUILDING) {\n            throw new Error(\"Cannot add transactions when composer status is not BUILDING\");\n        }\n        if (this.transactions.length === AtomicTransactionComposer.MAX_GROUP_SIZE) {\n            throw new Error(`Adding an additional transaction exceeds the maximum atomic group size of ${AtomicTransactionComposer.MAX_GROUP_SIZE}`);\n        }\n        if (txnAndSigner.txn.group && txnAndSigner.txn.group.some((v)=>v !== 0)) {\n            throw new Error(\"Cannot add a transaction with nonzero group ID\");\n        }\n        this.transactions.push(txnAndSigner);\n    }\n    /**\n     * Add a smart contract method call to this atomic group.\n     *\n     * An error will be thrown if the composer's status is not BUILDING, if adding this transaction\n     * causes the current group to exceed MAX_GROUP_SIZE, or if the provided arguments are invalid\n     * for the given method.\n     */ addMethodCall({ appID, method, methodArgs, sender, suggestedParams, onComplete, approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages, boxes, note, lease, rekeyTo, signer }) {\n        if (this.status !== AtomicTransactionComposerStatus.BUILDING) {\n            throw new Error(\"Cannot add transactions when composer status is not BUILDING\");\n        }\n        if (this.transactions.length + method.txnCount() > AtomicTransactionComposer.MAX_GROUP_SIZE) {\n            throw new Error(`Adding additional transactions exceeds the maximum atomic group size of ${AtomicTransactionComposer.MAX_GROUP_SIZE}`);\n        }\n        if (appID === 0) {\n            if (approvalProgram == null || clearProgram == null || numGlobalInts == null || numGlobalByteSlices == null || numLocalInts == null || numLocalByteSlices == null) {\n                throw new Error(\"One of the following required parameters for application creation is missing: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices\");\n            }\n        } else if (onComplete === _types_transactions_base__WEBPACK_IMPORTED_MODULE_6__.OnApplicationComplete.UpdateApplicationOC) {\n            if (approvalProgram == null || clearProgram == null) {\n                throw new Error(\"One of the following required parameters for OnApplicationComplete.UpdateApplicationOC is missing: approvalProgram, clearProgram\");\n            }\n            if (numGlobalInts != null || numGlobalByteSlices != null || numLocalInts != null || numLocalByteSlices != null || extraPages != null) {\n                throw new Error(\"One of the following application creation parameters were set on a non-creation call: numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages\");\n            }\n        } else if (approvalProgram != null || clearProgram != null || numGlobalInts != null || numGlobalByteSlices != null || numLocalInts != null || numLocalByteSlices != null || extraPages != null) {\n            throw new Error(\"One of the following application creation parameters were set on a non-creation call: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages\");\n        }\n        if (methodArgs == null) {\n            // eslint-disable-next-line no-param-reassign\n            methodArgs = [];\n        }\n        if (methodArgs.length !== method.args.length) {\n            throw new Error(`Incorrect number of method arguments. Expected ${method.args.length}, got ${methodArgs.length}`);\n        }\n        let basicArgTypes = [];\n        let basicArgValues = [];\n        const txnArgs = [];\n        const refArgTypes = [];\n        const refArgValues = [];\n        const refArgIndexToBasicArgIndex = new Map();\n        // TODO: Box encoding for ABI\n        const boxReferences = !boxes ? [] : boxes;\n        for(let i = 0; i < methodArgs.length; i++){\n            let argType = method.args[i].type;\n            const argValue = methodArgs[i];\n            if ((0,_abi__WEBPACK_IMPORTED_MODULE_0__.abiTypeIsTransaction)(argType)) {\n                if (!(0,_signer__WEBPACK_IMPORTED_MODULE_5__.isTransactionWithSigner)(argValue) || !(0,_abi__WEBPACK_IMPORTED_MODULE_0__.abiCheckTransactionType)(argType, argValue.txn)) {\n                    throw new Error(`Expected ${argType} transaction for argument at index ${i}`);\n                }\n                if (argValue.txn.group && argValue.txn.group.some((v)=>v !== 0)) {\n                    throw new Error(\"Cannot add a transaction with nonzero group ID\");\n                }\n                txnArgs.push(argValue);\n                continue;\n            }\n            if ((0,_signer__WEBPACK_IMPORTED_MODULE_5__.isTransactionWithSigner)(argValue)) {\n                throw new Error(`Expected non-transaction value for argument at index ${i}`);\n            }\n            if ((0,_abi__WEBPACK_IMPORTED_MODULE_0__.abiTypeIsReference)(argType)) {\n                refArgIndexToBasicArgIndex.set(refArgTypes.length, basicArgTypes.length);\n                refArgTypes.push(argType);\n                refArgValues.push(argValue);\n                // treat the reference as a uint8 for encoding purposes\n                argType = new _abi__WEBPACK_IMPORTED_MODULE_0__.ABIUintType(8);\n            }\n            if (typeof argType === \"string\") {\n                throw new Error(`Unknown ABI type: ${argType}`);\n            }\n            basicArgTypes.push(argType);\n            basicArgValues.push(argValue);\n        }\n        const resolvedRefIndexes = [];\n        const foreignAccounts = [];\n        const foreignApps = [];\n        const foreignAssets = [];\n        for(let i = 0; i < refArgTypes.length; i++){\n            const refType = refArgTypes[i];\n            const refValue = refArgValues[i];\n            let resolved = 0;\n            switch(refType){\n                case _abi__WEBPACK_IMPORTED_MODULE_0__.ABIReferenceType.account:\n                    {\n                        const addressType = new _abi__WEBPACK_IMPORTED_MODULE_0__.ABIAddressType();\n                        const address = addressType.decode(addressType.encode(refValue));\n                        resolved = populateForeignArray(address, foreignAccounts, sender);\n                        break;\n                    }\n                case _abi__WEBPACK_IMPORTED_MODULE_0__.ABIReferenceType.application:\n                    {\n                        const uint64Type = new _abi__WEBPACK_IMPORTED_MODULE_0__.ABIUintType(64);\n                        const refAppID = uint64Type.decode(uint64Type.encode(refValue));\n                        if (refAppID > Number.MAX_SAFE_INTEGER) {\n                            throw new Error(`Expected safe integer for application value, got ${refAppID}`);\n                        }\n                        resolved = populateForeignArray(Number(refAppID), foreignApps, appID);\n                        break;\n                    }\n                case _abi__WEBPACK_IMPORTED_MODULE_0__.ABIReferenceType.asset:\n                    {\n                        const uint64Type = new _abi__WEBPACK_IMPORTED_MODULE_0__.ABIUintType(64);\n                        const refAssetID = uint64Type.decode(uint64Type.encode(refValue));\n                        if (refAssetID > Number.MAX_SAFE_INTEGER) {\n                            throw new Error(`Expected safe integer for asset value, got ${refAssetID}`);\n                        }\n                        resolved = populateForeignArray(Number(refAssetID), foreignAssets);\n                        break;\n                    }\n                default:\n                    throw new Error(`Unknown reference type: ${refType}`);\n            }\n            resolvedRefIndexes.push(resolved);\n        }\n        for(let i = 0; i < resolvedRefIndexes.length; i++){\n            const basicArgIndex = refArgIndexToBasicArgIndex.get(i);\n            basicArgValues[basicArgIndex] = resolvedRefIndexes[i];\n        }\n        if (basicArgTypes.length > MAX_APP_ARGS - 1) {\n            const lastArgTupleTypes = basicArgTypes.slice(MAX_APP_ARGS - 2);\n            const lastArgTupleValues = basicArgValues.slice(MAX_APP_ARGS - 2);\n            basicArgTypes = basicArgTypes.slice(0, MAX_APP_ARGS - 2);\n            basicArgValues = basicArgValues.slice(0, MAX_APP_ARGS - 2);\n            basicArgTypes.push(new _abi__WEBPACK_IMPORTED_MODULE_0__.ABITupleType(lastArgTupleTypes));\n            basicArgValues.push(lastArgTupleValues);\n        }\n        const appArgsEncoded = [\n            method.getSelector()\n        ];\n        for(let i = 0; i < basicArgTypes.length; i++){\n            appArgsEncoded.push(basicArgTypes[i].encode(basicArgValues[i]));\n        }\n        const appCall = {\n            txn: (0,_makeTxn__WEBPACK_IMPORTED_MODULE_2__.makeApplicationCallTxnFromObject)({\n                from: sender,\n                appIndex: appID,\n                appArgs: appArgsEncoded,\n                accounts: foreignAccounts,\n                foreignApps,\n                foreignAssets,\n                boxes: boxReferences,\n                onComplete: onComplete == null ? _types_transactions_base__WEBPACK_IMPORTED_MODULE_6__.OnApplicationComplete.NoOpOC : onComplete,\n                approvalProgram,\n                clearProgram,\n                numGlobalInts,\n                numGlobalByteSlices,\n                numLocalInts,\n                numLocalByteSlices,\n                extraPages,\n                lease,\n                note,\n                rekeyTo,\n                suggestedParams\n            }),\n            signer\n        };\n        this.transactions.push(...txnArgs, appCall);\n        this.methodCalls.set(this.transactions.length - 1, method);\n    }\n    /**\n     * Finalize the transaction group and returned the finalized transactions.\n     *\n     * The composer's status will be at least BUILT after executing this method.\n     */ buildGroup() {\n        if (this.status === AtomicTransactionComposerStatus.BUILDING) {\n            if (this.transactions.length === 0) {\n                throw new Error(\"Cannot build a group with 0 transactions\");\n            }\n            if (this.transactions.length > 1) {\n                (0,_group__WEBPACK_IMPORTED_MODULE_3__.assignGroupID)(this.transactions.map((txnWithSigner)=>txnWithSigner.txn));\n            }\n            this.status = AtomicTransactionComposerStatus.BUILT;\n        }\n        return this.transactions;\n    }\n    /**\n     * Obtain signatures for each transaction in this group. If signatures have already been obtained,\n     * this method will return cached versions of the signatures.\n     *\n     * The composer's status will be at least SIGNED after executing this method.\n     *\n     * An error will be thrown if signing any of the transactions fails.\n     *\n     * @returns A promise that resolves to an array of signed transactions.\n     */ async gatherSignatures() {\n        if (this.status >= AtomicTransactionComposerStatus.SIGNED) {\n            return this.signedTxns;\n        }\n        // retrieve built transactions and verify status is BUILT\n        const txnsWithSigners = this.buildGroup();\n        const txnGroup = txnsWithSigners.map((txnWithSigner)=>txnWithSigner.txn);\n        const indexesPerSigner = new Map();\n        for(let i = 0; i < txnsWithSigners.length; i++){\n            const { signer } = txnsWithSigners[i];\n            if (!indexesPerSigner.has(signer)) {\n                indexesPerSigner.set(signer, []);\n            }\n            indexesPerSigner.get(signer).push(i);\n        }\n        const orderedSigners = Array.from(indexesPerSigner);\n        const batchedSigs = await Promise.all(orderedSigners.map(([signer, indexes])=>signer(txnGroup, indexes)));\n        const signedTxns = txnsWithSigners.map(()=>null);\n        for(let signerIndex = 0; signerIndex < orderedSigners.length; signerIndex++){\n            const indexes = orderedSigners[signerIndex][1];\n            const sigs = batchedSigs[signerIndex];\n            for(let i = 0; i < indexes.length; i++){\n                signedTxns[indexes[i]] = sigs[i];\n            }\n        }\n        if (!signedTxns.every((sig)=>sig != null)) {\n            throw new Error(`Missing signatures. Got ${signedTxns}`);\n        }\n        const txIDs = signedTxns.map((stxn, index)=>{\n            try {\n                return (0,_transaction__WEBPACK_IMPORTED_MODULE_1__.decodeSignedTransaction)(stxn).txn.txID();\n            } catch (err) {\n                throw new Error(`Cannot decode signed transaction at index ${index}. ${err}`);\n            }\n        });\n        this.signedTxns = signedTxns;\n        this.txIDs = txIDs;\n        this.status = AtomicTransactionComposerStatus.SIGNED;\n        return signedTxns;\n    }\n    /**\n     * Send the transaction group to the network, but don't wait for it to be committed to a block. An\n     * error will be thrown if submission fails.\n     *\n     * The composer's status must be SUBMITTED or lower before calling this method. If submission is\n     * successful, this composer's status will update to SUBMITTED.\n     *\n     * Note: a group can only be submitted again if it fails.\n     *\n     * @param client - An Algodv2 client\n     *\n     * @returns A promise that, upon success, resolves to a list of TxIDs of the submitted transactions.\n     */ async submit(client) {\n        if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {\n            throw new Error(\"Transaction group cannot be resubmitted\");\n        }\n        const stxns = await this.gatherSignatures();\n        await client.sendRawTransaction(stxns).do();\n        this.status = AtomicTransactionComposerStatus.SUBMITTED;\n        return this.txIDs;\n    }\n    /**\n     * Send the transaction group to the network and wait until it's committed to a block. An error\n     * will be thrown if submission or execution fails.\n     *\n     * The composer's status must be SUBMITTED or lower before calling this method, since execution is\n     * only allowed once. If submission is successful, this composer's status will update to SUBMITTED.\n     * If the execution is also successful, this composer's status will update to COMMITTED.\n     *\n     * Note: a group can only be submitted again if it fails.\n     *\n     * @param client - An Algodv2 client\n     * @param waitRounds - The maximum number of rounds to wait for transaction confirmation\n     *\n     * @returns A promise that, upon success, resolves to an object containing the confirmed round for\n     *   this transaction, the txIDs of the submitted transactions, and an array of results containing\n     *   one element for each method call transaction in this group.\n     */ async execute(client, waitRounds) {\n        if (this.status === AtomicTransactionComposerStatus.COMMITTED) {\n            throw new Error(\"Transaction group has already been executed successfully\");\n        }\n        const txIDs = await this.submit(client);\n        this.status = AtomicTransactionComposerStatus.SUBMITTED;\n        const firstMethodCallIndex = this.transactions.findIndex((_, index)=>this.methodCalls.has(index));\n        const indexToWaitFor = firstMethodCallIndex === -1 ? 0 : firstMethodCallIndex;\n        const confirmedTxnInfo = await (0,_wait__WEBPACK_IMPORTED_MODULE_4__.waitForConfirmation)(client, txIDs[indexToWaitFor], waitRounds);\n        this.status = AtomicTransactionComposerStatus.COMMITTED;\n        const confirmedRound = confirmedTxnInfo[\"confirmed-round\"];\n        const methodResults = [];\n        for (const [txnIndex, method] of this.methodCalls){\n            const txID = txIDs[txnIndex];\n            const methodResult = {\n                txID,\n                rawReturnValue: new Uint8Array(),\n                method\n            };\n            try {\n                const pendingInfo = txnIndex === firstMethodCallIndex ? confirmedTxnInfo : await client.pendingTransactionInformation(txID).do();\n                methodResult.txInfo = pendingInfo;\n                if (method.returns.type !== \"void\") {\n                    const logs = pendingInfo.logs || [];\n                    if (logs.length === 0) {\n                        throw new Error(\"App call transaction did not log a return value\");\n                    }\n                    const lastLog = Buffer.from(logs[logs.length - 1], \"base64\");\n                    if (lastLog.byteLength < 4 || !lastLog.slice(0, 4).equals(RETURN_PREFIX)) {\n                        throw new Error(\"App call transaction did not log a return value\");\n                    }\n                    methodResult.rawReturnValue = new Uint8Array(lastLog.slice(4));\n                    methodResult.returnValue = method.returns.type.decode(methodResult.rawReturnValue);\n                }\n            } catch (err) {\n                methodResult.decodeError = err;\n            }\n            methodResults.push(methodResult);\n        }\n        return {\n            confirmedRound,\n            txIDs,\n            methodResults\n        };\n    }\n}\n/** The maximum size of an atomic transaction group. */ AtomicTransactionComposer.MAX_GROUP_SIZE = 16; //# sourceMappingURL=composer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/composer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/convert.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/convert.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INVALID_MICROALGOS_ERROR_MSG: () => (/* binding */ INVALID_MICROALGOS_ERROR_MSG),\n/* harmony export */   algosToMicroalgos: () => (/* binding */ algosToMicroalgos),\n/* harmony export */   microalgosToAlgos: () => (/* binding */ microalgosToAlgos)\n/* harmony export */ });\nconst MICROALGOS_TO_ALGOS_RATIO = 1e6;\nconst INVALID_MICROALGOS_ERROR_MSG = \"Microalgos should be positive and less than 2^53 - 1.\";\n/**\n * microalgosToAlgos converts microalgos to algos\n * @param microalgos - number\n * @returns number\n */ function microalgosToAlgos(microalgos) {\n    if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {\n        throw new Error(INVALID_MICROALGOS_ERROR_MSG);\n    }\n    return microalgos / MICROALGOS_TO_ALGOS_RATIO;\n}\n/**\n * algosToMicroalgos converts algos to microalgos\n * @param algos - number\n * @returns number\n */ function algosToMicroalgos(algos) {\n    const microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;\n    return Math.round(microalgos);\n} //# sourceMappingURL=convert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY29udmVydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSw0QkFBNEI7QUFDM0IsTUFBTUMsK0JBQStCLHdEQUF3RDtBQUNwRzs7OztDQUlDLEdBQ00sU0FBU0Msa0JBQWtCQyxVQUFVO0lBQ3hDLElBQUlBLGFBQWEsS0FBSyxDQUFDQyxPQUFPQyxhQUFhLENBQUNGLGFBQWE7UUFDckQsTUFBTSxJQUFJRyxNQUFNTDtJQUNwQjtJQUNBLE9BQU9FLGFBQWFIO0FBQ3hCO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNPLGtCQUFrQkMsS0FBSztJQUNuQyxNQUFNTCxhQUFhSyxRQUFRUjtJQUMzQixPQUFPUyxLQUFLQyxLQUFLLENBQUNQO0FBQ3RCLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jb252ZXJ0LmpzPzY0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTUlDUk9BTEdPU19UT19BTEdPU19SQVRJTyA9IDFlNjtcbmV4cG9ydCBjb25zdCBJTlZBTElEX01JQ1JPQUxHT1NfRVJST1JfTVNHID0gJ01pY3JvYWxnb3Mgc2hvdWxkIGJlIHBvc2l0aXZlIGFuZCBsZXNzIHRoYW4gMl41MyAtIDEuJztcbi8qKlxuICogbWljcm9hbGdvc1RvQWxnb3MgY29udmVydHMgbWljcm9hbGdvcyB0byBhbGdvc1xuICogQHBhcmFtIG1pY3JvYWxnb3MgLSBudW1iZXJcbiAqIEByZXR1cm5zIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gbWljcm9hbGdvc1RvQWxnb3MobWljcm9hbGdvcykge1xuICAgIGlmIChtaWNyb2FsZ29zIDwgMCB8fCAhTnVtYmVyLmlzU2FmZUludGVnZXIobWljcm9hbGdvcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfTUlDUk9BTEdPU19FUlJPUl9NU0cpO1xuICAgIH1cbiAgICByZXR1cm4gbWljcm9hbGdvcyAvIE1JQ1JPQUxHT1NfVE9fQUxHT1NfUkFUSU87XG59XG4vKipcbiAqIGFsZ29zVG9NaWNyb2FsZ29zIGNvbnZlcnRzIGFsZ29zIHRvIG1pY3JvYWxnb3NcbiAqIEBwYXJhbSBhbGdvcyAtIG51bWJlclxuICogQHJldHVybnMgbnVtYmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGdvc1RvTWljcm9hbGdvcyhhbGdvcykge1xuICAgIGNvbnN0IG1pY3JvYWxnb3MgPSBhbGdvcyAqIE1JQ1JPQUxHT1NfVE9fQUxHT1NfUkFUSU87XG4gICAgcmV0dXJuIE1hdGgucm91bmQobWljcm9hbGdvcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0LmpzLm1hcCJdLCJuYW1lcyI6WyJNSUNST0FMR09TX1RPX0FMR09TX1JBVElPIiwiSU5WQUxJRF9NSUNST0FMR09TX0VSUk9SX01TRyIsIm1pY3JvYWxnb3NUb0FsZ29zIiwibWljcm9hbGdvcyIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJFcnJvciIsImFsZ29zVG9NaWNyb2FsZ29zIiwiYWxnb3MiLCJNYXRoIiwicm91bmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/convert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/dryrun.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/dryrun.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DryrunResult: () => (/* binding */ DryrunResult),\n/* harmony export */   createDryrun: () => (/* binding */ createDryrun)\n/* harmony export */ });\n/* harmony import */ var _client_v2_algod_models_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client/v2/algod/models/types */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _types_transactions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/transactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/index.js\");\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n\n\n\nconst defaultAppId = 1380011588;\nconst defaultMaxWidth = 30;\nfunction decodePrograms(ap) {\n    // eslint-disable-next-line no-param-reassign\n    ap.params[\"approval-program\"] = Buffer.from(ap.params[\"approval-program\"].toString(), \"base64\");\n    // eslint-disable-next-line no-param-reassign\n    ap.params[\"clear-state-program\"] = Buffer.from(ap.params[\"clear-state-program\"].toString(), \"base64\");\n    return ap;\n}\n/**\n * createDryrun takes an Algod Client (from algod.AlgodV2Client) and an array of Signed Transactions\n * from (transaction.SignedTransaction) and creates a DryrunRequest object with relevant balances\n * @param client - the AlgodClient to make requests against\n * @param txns - the array of SignedTransaction to use for generating the DryrunRequest object\n * @param protocolVersion - the string representing the protocol version to use\n * @param latestTimestamp - the timestamp\n * @returns the DryrunRequest object constructed from the SignedTransactions passed\n */ async function createDryrun({ client, txns, protocolVersion, latestTimestamp, round, sources }) {\n    const appInfos = [];\n    const acctInfos = [];\n    const apps = [];\n    const assets = [];\n    const accts = [];\n    for (const t of txns){\n        if (t.txn.type === _types_transactions__WEBPACK_IMPORTED_MODULE_1__.TransactionType.appl) {\n            accts.push((0,_encoding_address__WEBPACK_IMPORTED_MODULE_2__.encodeAddress)(t.txn.from.publicKey));\n            if (t.txn.appAccounts) accts.push(...t.txn.appAccounts.map((a)=>(0,_encoding_address__WEBPACK_IMPORTED_MODULE_2__.encodeAddress)(a.publicKey)));\n            if (t.txn.appForeignApps) {\n                apps.push(...t.txn.appForeignApps);\n                accts.push(...t.txn.appForeignApps.map((aidx)=>(0,_encoding_address__WEBPACK_IMPORTED_MODULE_2__.getApplicationAddress)(aidx)));\n            }\n            if (t.txn.appForeignAssets) assets.push(...t.txn.appForeignAssets);\n            // Create application,\n            if (t.txn.appIndex === undefined || t.txn.appIndex === 0) {\n                appInfos.push(new _client_v2_algod_models_types__WEBPACK_IMPORTED_MODULE_0__.Application(defaultAppId, new _client_v2_algod_models_types__WEBPACK_IMPORTED_MODULE_0__.ApplicationParams({\n                    creator: (0,_encoding_address__WEBPACK_IMPORTED_MODULE_2__.encodeAddress)(t.txn.from.publicKey),\n                    approvalProgram: t.txn.appApprovalProgram,\n                    clearStateProgram: t.txn.appClearProgram,\n                    localStateSchema: new _client_v2_algod_models_types__WEBPACK_IMPORTED_MODULE_0__.ApplicationStateSchema(t.txn.appLocalInts, t.txn.appLocalByteSlices),\n                    globalStateSchema: new _client_v2_algod_models_types__WEBPACK_IMPORTED_MODULE_0__.ApplicationStateSchema(t.txn.appGlobalInts, t.txn.appGlobalByteSlices)\n                })));\n            } else {\n                apps.push(t.txn.appIndex);\n                accts.push((0,_encoding_address__WEBPACK_IMPORTED_MODULE_2__.getApplicationAddress)(t.txn.appIndex));\n            }\n        }\n    }\n    // Dedupe and add creator to accts array\n    const assetPromises = [];\n    for (const assetId of [\n        ...new Set(assets)\n    ]){\n        assetPromises.push(client.getAssetByID(assetId).do().then((assetInfo)=>{\n            accts.push(assetInfo.params.creator);\n        }));\n    }\n    // Wait for assets to finish since we append to accts array\n    await Promise.all(assetPromises);\n    // Dedupe and get app info for all apps\n    const appPromises = [];\n    for (const appId of [\n        ...new Set(apps)\n    ]){\n        appPromises.push(client.getApplicationByID(appId).do().then((appInfo)=>{\n            const ai = decodePrograms(appInfo);\n            appInfos.push(ai);\n            accts.push(ai.params.creator);\n        }));\n    }\n    await Promise.all(appPromises);\n    const acctPromises = [];\n    for (const acct of [\n        ...new Set(accts)\n    ]){\n        acctPromises.push(client.accountInformation(acct).do().then((acctInfo)=>{\n            if (\"created-apps\" in acctInfo) {\n                // eslint-disable-next-line no-param-reassign\n                acctInfo[\"created-apps\"] = acctInfo[\"created-apps\"].map((app)=>decodePrograms(app));\n            }\n            acctInfos.push(acctInfo);\n        }));\n    }\n    await Promise.all(acctPromises);\n    return new _client_v2_algod_models_types__WEBPACK_IMPORTED_MODULE_0__.DryrunRequest({\n        txns: txns.map((st)=>({\n                ...st,\n                txn: st.txn.get_obj_for_encoding()\n            })),\n        accounts: acctInfos,\n        apps: appInfos,\n        latestTimestamp,\n        round,\n        protocolVersion,\n        sources\n    });\n}\nclass DryrunStackValue {\n    constructor(sv){\n        this.type = 0;\n        this.bytes = \"\";\n        this.uint = 0;\n        this.type = sv.type;\n        this.bytes = sv.bytes;\n        this.uint = sv.uint;\n    }\n    toString() {\n        if (this.type === 1) {\n            return `0x${Buffer.from(this.bytes, \"base64\").toString(\"hex\")}`;\n        }\n        return this.uint.toString();\n    }\n}\nclass DryrunTraceLine {\n    constructor(line){\n        this.error = \"\";\n        this.line = 0;\n        this.pc = 0;\n        this.scratch = [];\n        this.stack = [];\n        this.error = line.error === undefined ? \"\" : line.error;\n        this.line = line.line;\n        this.pc = line.pc;\n        this.scratch = line.scratch;\n        this.stack = line.stack.map((sv)=>new DryrunStackValue(sv));\n    }\n}\nclass DryrunTrace {\n    constructor(t){\n        this.trace = [];\n        if (t == null) return;\n        this.trace = t.map((line)=>new DryrunTraceLine(line));\n    }\n}\nfunction truncate(str, maxValueWidth) {\n    if (str.length > maxValueWidth && maxValueWidth > 0) {\n        return `${str.slice(0, maxValueWidth)}...`;\n    }\n    return str;\n}\nfunction scratchToString(prevScratch, currScratch) {\n    if (currScratch.length === 0) return \"\";\n    let newScratchIdx = null;\n    for(let idx = 0; idx < currScratch.length; idx++){\n        if (idx > prevScratch.length) {\n            newScratchIdx = idx;\n            continue;\n        }\n        if (JSON.stringify(prevScratch[idx]) !== JSON.stringify(currScratch[idx])) {\n            newScratchIdx = idx;\n        }\n    }\n    if (newScratchIdx == null) return \"\";\n    const newScratch = currScratch[newScratchIdx];\n    if (newScratch.bytes.length > 0) {\n        return `${newScratchIdx} = 0x${Buffer.from(newScratch.bytes, \"base64\").toString(\"hex\")}`;\n    }\n    return `${newScratchIdx} = ${newScratch.uint.toString()}`;\n}\nfunction stackToString(stack, reverse) {\n    const svs = reverse ? stack.reverse() : stack;\n    return `[${svs.map((sv)=>{\n        switch(sv.type){\n            case 1:\n                return `0x${Buffer.from(sv.bytes, \"base64\").toString(\"hex\")}`;\n            case 2:\n                return `${sv.uint.toString()}`;\n            default:\n                return \"\";\n        }\n    }).join(\", \")}]`;\n}\nclass DryrunTransactionResult {\n    constructor(dtr){\n        this.disassembly = [];\n        this.appCallMessages = [];\n        this.localDeltas = [];\n        this.globalDelta = [];\n        this.cost = 0;\n        this.logicSigMessages = [];\n        this.logicSigDisassembly = [];\n        this.logs = [];\n        this.appCallTrace = undefined;\n        this.logicSigTrace = undefined;\n        this.required = [\n            \"disassembly\"\n        ];\n        this.optionals = [\n            \"app-call-messages\",\n            \"local-deltas\",\n            \"global-delta\",\n            \"cost\",\n            \"logic-sig-messages\",\n            \"logic-sig-disassembly\",\n            \"logs\"\n        ];\n        this.traces = [\n            \"app-call-trace\",\n            \"logic-sig-trace\"\n        ];\n        this.disassembly = dtr.disassembly;\n        this.appCallMessages = dtr[\"app-call-messages\"];\n        this.localDeltas = dtr[\"local-deltas\"];\n        this.globalDelta = dtr[\"global-delta\"];\n        this.cost = dtr.cost;\n        this.logicSigMessages = dtr[\"logic-sig-messages\"];\n        this.logicSigDisassembly = dtr[\"logic-sig-disassembly\"];\n        this.logs = dtr.logs;\n        this.appCallTrace = new DryrunTrace(dtr[\"app-call-trace\"]);\n        this.logicSigTrace = new DryrunTrace(dtr[\"logic-sig-trace\"]);\n    }\n    appCallRejected() {\n        return this.appCallMessages !== undefined && this.appCallMessages.includes(\"REJECT\");\n    }\n    logicSigRejected() {\n        return this.logicSigMessages !== undefined && this.logicSigMessages.includes(\"REJECT\");\n    }\n    static trace(drt, disassembly, spc) {\n        const maxWidth = spc.maxValueWidth || defaultMaxWidth;\n        // Create the array of arrays, each sub array contains N columns\n        const lines = [\n            [\n                \"pc#\",\n                \"ln#\",\n                \"source\",\n                \"scratch\",\n                \"stack\"\n            ]\n        ];\n        for(let idx = 0; idx < drt.trace.length; idx++){\n            const { line, error, pc, scratch, stack } = drt.trace[idx];\n            const currScratch = scratch !== undefined ? scratch : [];\n            const prevScratch = idx > 0 && drt.trace[idx - 1].scratch !== undefined ? drt.trace[idx - 1].scratch : [];\n            const src = error === \"\" ? disassembly[line] : `!! ${error} !!`;\n            lines.push([\n                pc.toString().padEnd(3, \" \"),\n                line.toString().padEnd(3, \" \"),\n                truncate(src, maxWidth),\n                truncate(scratchToString(prevScratch, currScratch), maxWidth),\n                truncate(stackToString(stack, spc.topOfStackFirst), maxWidth)\n            ]);\n        }\n        // Get the max length for each column\n        const maxLengths = lines.reduce((prev, curr)=>{\n            const newVal = new Array(lines[0].length).fill(0);\n            for(let idx = 0; idx < prev.length; idx++){\n                newVal[idx] = curr[idx].length > prev[idx] ? curr[idx].length : prev[idx];\n            }\n            return newVal;\n        }, new Array(lines[0].length).fill(0));\n        return `${lines.map((line)=>line.map((v, idx)=>v.padEnd(maxLengths[idx] + 1, \" \")).join(\"|\").trim()).join(\"\\n\")}\\n`;\n    }\n    appTrace(spc) {\n        if (this.appCallTrace === undefined || !this.disassembly) return \"\";\n        let conf = spc;\n        if (spc === undefined) conf = {\n            maxValueWidth: defaultMaxWidth,\n            topOfStackFirst: false\n        };\n        return DryrunTransactionResult.trace(this.appCallTrace, this.disassembly, conf);\n    }\n    lsigTrace(spc) {\n        if (this.logicSigTrace === undefined || this.logicSigDisassembly === undefined) return \"\";\n        let conf = spc;\n        if (spc === undefined) conf = {\n            maxValueWidth: defaultMaxWidth,\n            topOfStackFirst: true\n        };\n        return DryrunTransactionResult.trace(this.logicSigTrace, this.logicSigDisassembly, conf);\n    }\n}\nclass DryrunResult {\n    constructor(drrResp){\n        this.error = \"\";\n        this.protocolVersion = \"\";\n        this.txns = [];\n        this.error = drrResp.error;\n        this.protocolVersion = drrResp[\"protocol-version\"];\n        this.txns = drrResp.txns.map((txn)=>new DryrunTransactionResult(txn));\n    }\n} //# sourceMappingURL=dryrun.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/dryrun.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALGORAND_ZERO_ADDRESS_STRING: () => (/* binding */ ALGORAND_ZERO_ADDRESS_STRING),\n/* harmony export */   CHECKSUM_ADDRESS_ERROR_MSG: () => (/* binding */ CHECKSUM_ADDRESS_ERROR_MSG),\n/* harmony export */   INVALID_MSIG_PK_ERROR_MSG: () => (/* binding */ INVALID_MSIG_PK_ERROR_MSG),\n/* harmony export */   INVALID_MSIG_THRESHOLD_ERROR_MSG: () => (/* binding */ INVALID_MSIG_THRESHOLD_ERROR_MSG),\n/* harmony export */   INVALID_MSIG_VERSION_ERROR_MSG: () => (/* binding */ INVALID_MSIG_VERSION_ERROR_MSG),\n/* harmony export */   MALFORMED_ADDRESS_ERROR_MSG: () => (/* binding */ MALFORMED_ADDRESS_ERROR_MSG),\n/* harmony export */   UNEXPECTED_PK_LEN_ERROR_MSG: () => (/* binding */ UNEXPECTED_PK_LEN_ERROR_MSG),\n/* harmony export */   decodeAddress: () => (/* binding */ decodeAddress),\n/* harmony export */   encodeAddress: () => (/* binding */ encodeAddress),\n/* harmony export */   fromMultisigPreImg: () => (/* binding */ fromMultisigPreImg),\n/* harmony export */   fromMultisigPreImgAddrs: () => (/* binding */ fromMultisigPreImgAddrs),\n/* harmony export */   getApplicationAddress: () => (/* binding */ getApplicationAddress),\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress)\n/* harmony export */ });\n/* harmony import */ var hi_base32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hi-base32 */ \"(ssr)/./node_modules/.pnpm/hi-base32@0.5.1/node_modules/hi-base32/src/base32.js\");\n/* harmony import */ var hi_base32__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hi_base32__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _uint64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./uint64 */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/uint64.js\");\n\n\n\n\nconst ALGORAND_ADDRESS_BYTE_LENGTH = 36;\nconst ALGORAND_CHECKSUM_BYTE_LENGTH = 4;\nconst ALGORAND_ADDRESS_LENGTH = 58;\nconst ALGORAND_ZERO_ADDRESS_STRING = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ\";\n// Convert \"MultisigAddr\" UTF-8 to byte array\nconst MULTISIG_PREIMG2ADDR_PREFIX = new Uint8Array([\n    77,\n    117,\n    108,\n    116,\n    105,\n    115,\n    105,\n    103,\n    65,\n    100,\n    100,\n    114\n]);\nconst APP_ID_PREFIX = Buffer.from(\"appID\");\nconst MALFORMED_ADDRESS_ERROR_MSG = \"address seems to be malformed\";\nconst CHECKSUM_ADDRESS_ERROR_MSG = \"wrong checksum for address\";\nconst INVALID_MSIG_VERSION_ERROR_MSG = \"invalid multisig version\";\nconst INVALID_MSIG_THRESHOLD_ERROR_MSG = \"bad multisig threshold\";\nconst INVALID_MSIG_PK_ERROR_MSG = \"bad multisig public key - wrong length\";\nconst UNEXPECTED_PK_LEN_ERROR_MSG = \"nacl public key length is not 32 bytes\";\n/**\n * decodeAddress takes an Algorand address in string form and decodes it into a Uint8Array.\n * @param address - an Algorand address with checksum.\n * @returns the decoded form of the address's public key and checksum\n */ function decodeAddress(address) {\n    if (typeof address !== \"string\" || address.length !== ALGORAND_ADDRESS_LENGTH) throw new Error(MALFORMED_ADDRESS_ERROR_MSG);\n    // try to decode\n    const decoded = hi_base32__WEBPACK_IMPORTED_MODULE_0___default().decode.asBytes(address.toString());\n    // Sanity check\n    if (decoded.length !== ALGORAND_ADDRESS_BYTE_LENGTH) throw new Error(MALFORMED_ADDRESS_ERROR_MSG);\n    // Find publickey and checksum\n    const pk = new Uint8Array(decoded.slice(0, ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH));\n    const cs = new Uint8Array(decoded.slice(_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.PUBLIC_KEY_LENGTH, ALGORAND_ADDRESS_BYTE_LENGTH));\n    // Compute checksum\n    const checksum = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.genericHash(pk).slice(_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.HASH_BYTES_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.HASH_BYTES_LENGTH);\n    // Check if the checksum and the address are equal\n    if (!_utils_utils__WEBPACK_IMPORTED_MODULE_2__.arrayEqual(checksum, cs)) throw new Error(CHECKSUM_ADDRESS_ERROR_MSG);\n    return {\n        publicKey: pk,\n        checksum: cs\n    };\n}\n/**\n * isValidAddress checks if a string is a valid Algorand address.\n * @param address - an Algorand address with checksum.\n * @returns true if valid, false otherwise\n */ function isValidAddress(address) {\n    // Try to decode\n    try {\n        decodeAddress(address);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n/**\n * encodeAddress takes an Algorand address as a Uint8Array and encodes it into a string with checksum.\n * @param address - a raw Algorand address\n * @returns the address and checksum encoded as a string.\n */ function encodeAddress(address) {\n    // compute checksum\n    const checksum = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.genericHash(address).slice(_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.PUBLIC_KEY_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.PUBLIC_KEY_LENGTH);\n    const addr = hi_base32__WEBPACK_IMPORTED_MODULE_0___default().encode(_utils_utils__WEBPACK_IMPORTED_MODULE_2__.concatArrays(address, checksum));\n    return addr.toString().slice(0, ALGORAND_ADDRESS_LENGTH); // removing the extra '===='\n}\n/**\n * fromMultisigPreImg takes multisig parameters and returns a 32 byte typed array public key,\n * representing an address that identifies the \"exact group, version, and public keys\" that are required for signing.\n * Hash(\"MultisigAddr\" || version uint8 || threshold uint8 || PK1 || PK2 || ...)\n * Encoding this output yields a human readable address.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - array of typed array public keys\n */ function fromMultisigPreImg({ version, threshold, pks }) {\n    if (version !== 1 || version > 255 || version < 0) {\n        // ^ a tad redundant, but in case in the future version != 1, still check for uint8\n        throw new Error(INVALID_MSIG_VERSION_ERROR_MSG);\n    }\n    if (threshold === 0 || pks.length === 0 || threshold > pks.length || threshold > 255) {\n        throw new Error(INVALID_MSIG_THRESHOLD_ERROR_MSG);\n    }\n    const pkLen = ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH;\n    if (pkLen !== _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.PUBLIC_KEY_LENGTH) {\n        throw new Error(UNEXPECTED_PK_LEN_ERROR_MSG);\n    }\n    const merged = new Uint8Array(MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + pkLen * pks.length);\n    merged.set(MULTISIG_PREIMG2ADDR_PREFIX, 0);\n    merged.set([\n        version\n    ], MULTISIG_PREIMG2ADDR_PREFIX.length);\n    merged.set([\n        threshold\n    ], MULTISIG_PREIMG2ADDR_PREFIX.length + 1);\n    for(let i = 0; i < pks.length; i++){\n        if (pks[i].length !== pkLen) {\n            throw new Error(INVALID_MSIG_PK_ERROR_MSG);\n        }\n        merged.set(pks[i], MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + i * pkLen);\n    }\n    return new Uint8Array(_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.genericHash(merged));\n}\n/**\n * fromMultisigPreImgAddrs takes multisig parameters and returns a human readable Algorand address.\n * This is equivalent to fromMultisigPreImg, but interfaces with encoded addresses.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - array of encoded addresses\n */ function fromMultisigPreImgAddrs({ version, threshold, addrs }) {\n    const pks = addrs.map((addr)=>decodeAddress(addr).publicKey);\n    return encodeAddress(fromMultisigPreImg({\n        version,\n        threshold,\n        pks\n    }));\n}\n/**\n * Get the escrow address of an application.\n * @param appID - The ID of the application.\n * @returns The address corresponding to that application's escrow account.\n */ function getApplicationAddress(appID) {\n    const toBeSigned = _utils_utils__WEBPACK_IMPORTED_MODULE_2__.concatArrays(APP_ID_PREFIX, (0,_uint64__WEBPACK_IMPORTED_MODULE_3__.encodeUint64)(appID));\n    const hash = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.genericHash(toBeSigned);\n    return encodeAddress(new Uint8Array(hash));\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2RpbmcvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDYztBQUNMO0FBQ0E7QUFDeEMsTUFBTUksK0JBQStCO0FBQ3JDLE1BQU1DLGdDQUFnQztBQUN0QyxNQUFNQywwQkFBMEI7QUFDekIsTUFBTUMsK0JBQStCLDZEQUE2RDtBQUN6Ryw2Q0FBNkM7QUFDN0MsTUFBTUMsOEJBQThCLElBQUlDLFdBQVc7SUFDL0M7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCxNQUFNQyxnQkFBZ0JDLE9BQU9DLElBQUksQ0FBQztBQUMzQixNQUFNQyw4QkFBOEIsZ0NBQWdDO0FBQ3BFLE1BQU1DLDZCQUE2Qiw2QkFBNkI7QUFDaEUsTUFBTUMsaUNBQWlDLDJCQUEyQjtBQUNsRSxNQUFNQyxtQ0FBbUMseUJBQXlCO0FBQ2xFLE1BQU1DLDRCQUE0Qix5Q0FBeUM7QUFDM0UsTUFBTUMsOEJBQThCLHlDQUF5QztBQUNwRjs7OztDQUlDLEdBQ00sU0FBU0MsY0FBY0MsT0FBTztJQUNqQyxJQUFJLE9BQU9BLFlBQVksWUFBWUEsUUFBUUMsTUFBTSxLQUFLZix5QkFDbEQsTUFBTSxJQUFJZ0IsTUFBTVQ7SUFDcEIsZ0JBQWdCO0lBQ2hCLE1BQU1VLFVBQVV2Qix1REFBYSxDQUFDeUIsT0FBTyxDQUFDTCxRQUFRTSxRQUFRO0lBQ3RELGVBQWU7SUFDZixJQUFJSCxRQUFRRixNQUFNLEtBQUtqQiw4QkFDbkIsTUFBTSxJQUFJa0IsTUFBTVQ7SUFDcEIsOEJBQThCO0lBQzlCLE1BQU1jLEtBQUssSUFBSWxCLFdBQVdjLFFBQVFLLEtBQUssQ0FBQyxHQUFHeEIsK0JBQStCQztJQUMxRSxNQUFNd0IsS0FBSyxJQUFJcEIsV0FBV2MsUUFBUUss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K0M7QUFDeEMsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2VuY29kaW5nL2FkZHJlc3MuanM/NDlkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZTMyIGZyb20gJ2hpLWJhc2UzMic7XG5pbXBvcnQgKiBhcyBuYWNsIGZyb20gJy4uL25hY2wvbmFjbFdyYXBwZXJzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IGVuY29kZVVpbnQ2NCB9IGZyb20gJy4vdWludDY0JztcbmNvbnN0IEFMR09SQU5EX0FERFJFU1NfQllURV9MRU5HVEggPSAzNjtcbmNvbnN0IEFMR09SQU5EX0NIRUNLU1VNX0JZVEVfTEVOR1RIID0gNDtcbmNvbnN0IEFMR09SQU5EX0FERFJFU1NfTEVOR1RIID0gNTg7XG5leHBvcnQgY29uc3QgQUxHT1JBTkRfWkVST19BRERSRVNTX1NUUklORyA9ICdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWTVIRktRJztcbi8vIENvbnZlcnQgXCJNdWx0aXNpZ0FkZHJcIiBVVEYtOCB0byBieXRlIGFycmF5XG5jb25zdCBNVUxUSVNJR19QUkVJTUcyQUREUl9QUkVGSVggPSBuZXcgVWludDhBcnJheShbXG4gICAgNzcsXG4gICAgMTE3LFxuICAgIDEwOCxcbiAgICAxMTYsXG4gICAgMTA1LFxuICAgIDExNSxcbiAgICAxMDUsXG4gICAgMTAzLFxuICAgIDY1LFxuICAgIDEwMCxcbiAgICAxMDAsXG4gICAgMTE0LFxuXSk7XG5jb25zdCBBUFBfSURfUFJFRklYID0gQnVmZmVyLmZyb20oJ2FwcElEJyk7XG5leHBvcnQgY29uc3QgTUFMRk9STUVEX0FERFJFU1NfRVJST1JfTVNHID0gJ2FkZHJlc3Mgc2VlbXMgdG8gYmUgbWFsZm9ybWVkJztcbmV4cG9ydCBjb25zdCBDSEVDS1NVTV9BRERSRVNTX0VSUk9SX01TRyA9ICd3cm9uZyBjaGVja3N1bSBmb3IgYWRkcmVzcyc7XG5leHBvcnQgY29uc3QgSU5WQUxJRF9NU0lHX1ZFUlNJT05fRVJST1JfTVNHID0gJ2ludmFsaWQgbXVsdGlzaWcgdmVyc2lvbic7XG5leHBvcnQgY29uc3QgSU5WQUxJRF9NU0lHX1RIUkVTSE9MRF9FUlJPUl9NU0cgPSAnYmFkIG11bHRpc2lnIHRocmVzaG9sZCc7XG5leHBvcnQgY29uc3QgSU5WQUxJRF9NU0lHX1BLX0VSUk9SX01TRyA9ICdiYWQgbXVsdGlzaWcgcHVibGljIGtleSAtIHdyb25nIGxlbmd0aCc7XG5leHBvcnQgY29uc3QgVU5FWFBFQ1RFRF9QS19MRU5fRVJST1JfTVNHID0gJ25hY2wgcHVibGljIGtleSBsZW5ndGggaXMgbm90IDMyIGJ5dGVzJztcbi8qKlxuICogZGVjb2RlQWRkcmVzcyB0YWtlcyBhbiBBbGdvcmFuZCBhZGRyZXNzIGluIHN0cmluZyBmb3JtIGFuZCBkZWNvZGVzIGl0IGludG8gYSBVaW50OEFycmF5LlxuICogQHBhcmFtIGFkZHJlc3MgLSBhbiBBbGdvcmFuZCBhZGRyZXNzIHdpdGggY2hlY2tzdW0uXG4gKiBAcmV0dXJucyB0aGUgZGVjb2RlZCBmb3JtIG9mIHRoZSBhZGRyZXNzJ3MgcHVibGljIGtleSBhbmQgY2hlY2tzdW1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUFkZHJlc3MoYWRkcmVzcykge1xuICAgIGlmICh0eXBlb2YgYWRkcmVzcyAhPT0gJ3N0cmluZycgfHwgYWRkcmVzcy5sZW5ndGggIT09IEFMR09SQU5EX0FERFJFU1NfTEVOR1RIKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTUFMRk9STUVEX0FERFJFU1NfRVJST1JfTVNHKTtcbiAgICAvLyB0cnkgdG8gZGVjb2RlXG4gICAgY29uc3QgZGVjb2RlZCA9IGJhc2UzMi5kZWNvZGUuYXNCeXRlcyhhZGRyZXNzLnRvU3RyaW5nKCkpO1xuICAgIC8vIFNhbml0eSBjaGVja1xuICAgIGlmIChkZWNvZGVkLmxlbmd0aCAhPT0gQUxHT1JBTkRfQUREUkVTU19CWVRFX0xFTkdUSClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1BTEZPUk1FRF9BRERSRVNTX0VSUk9SX01TRyk7XG4gICAgLy8gRmluZCBwdWJsaWNrZXkgYW5kIGNoZWNrc3VtXG4gICAgY29uc3QgcGsgPSBuZXcgVWludDhBcnJheShkZWNvZGVkLnNsaWNlKDAsIEFMR09SQU5EX0FERFJFU1NfQllURV9MRU5HVEggLSBBTEdPUkFORF9DSEVDS1NVTV9CWVRFX0xFTkdUSCkpO1xuICAgIGNvbnN0IGNzID0gbmV3IFVpbnQ4QXJyYXkoZGVjb2RlZC5zbGljZShuYWNsLlBVQkxJQ19LRVlfTEVOR1RILCBBTEdPUkFORF9BRERSRVNTX0JZVEVfTEVOR1RIKSk7XG4gICAgLy8gQ29tcHV0ZSBjaGVja3N1bVxuICAgIGNvbnN0IGNoZWNrc3VtID0gbmFjbFxuICAgICAgICAuZ2VuZXJpY0hhc2gocGspXG4gICAgICAgIC5zbGljZShuYWNsLkhBU0hfQllURVNfTEVOR1RIIC0gQUxHT1JBTkRfQ0hFQ0tTVU1fQllURV9MRU5HVEgsIG5hY2wuSEFTSF9CWVRFU19MRU5HVEgpO1xuICAgIC8vIENoZWNrIGlmIHRoZSBjaGVja3N1bSBhbmQgdGhlIGFkZHJlc3MgYXJlIGVxdWFsXG4gICAgaWYgKCF1dGlscy5hcnJheUVxdWFsKGNoZWNrc3VtLCBjcykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDSEVDS1NVTV9BRERSRVNTX0VSUk9SX01TRyk7XG4gICAgcmV0dXJuIHsgcHVibGljS2V5OiBwaywgY2hlY2tzdW06IGNzIH07XG59XG4vKipcbiAqIGlzVmFsaWRBZGRyZXNzIGNoZWNrcyBpZiBhIHN0cmluZyBpcyBhIHZhbGlkIEFsZ29yYW5kIGFkZHJlc3MuXG4gKiBAcGFyYW0gYWRkcmVzcyAtIGFuIEFsZ29yYW5kIGFkZHJlc3Mgd2l0aCBjaGVja3N1bS5cbiAqIEByZXR1cm5zIHRydWUgaWYgdmFsaWQsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEFkZHJlc3MoYWRkcmVzcykge1xuICAgIC8vIFRyeSB0byBkZWNvZGVcbiAgICB0cnkge1xuICAgICAgICBkZWNvZGVBZGRyZXNzKGFkZHJlc3MpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBlbmNvZGVBZGRyZXNzIHRha2VzIGFuIEFsZ29yYW5kIGFkZHJlc3MgYXMgYSBVaW50OEFycmF5IGFuZCBlbmNvZGVzIGl0IGludG8gYSBzdHJpbmcgd2l0aCBjaGVja3N1bS5cbiAqIEBwYXJhbSBhZGRyZXNzIC0gYSByYXcgQWxnb3JhbmQgYWRkcmVzc1xuICogQHJldHVybnMgdGhlIGFkZHJlc3MgYW5kIGNoZWNrc3VtIGVuY29kZWQgYXMgYSBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICAvLyBjb21wdXRlIGNoZWNrc3VtXG4gICAgY29uc3QgY2hlY2tzdW0gPSBuYWNsXG4gICAgICAgIC5nZW5lcmljSGFzaChhZGRyZXNzKVxuICAgICAgICAuc2xpY2UobmFjbC5QVUJMSUNfS0VZX0xFTkdUSCAtIEFMR09SQU5EX0NIRUNLU1VNX0JZVEVfTEVOR1RILCBuYWNsLlBVQkxJQ19LRVlfTEVOR1RIKTtcbiAgICBjb25zdCBhZGRyID0gYmFzZTMyLmVuY29kZSh1dGlscy5jb25jYXRBcnJheXMoYWRkcmVzcywgY2hlY2tzdW0pKTtcbiAgICByZXR1cm4gYWRkci50b1N0cmluZygpLnNsaWNlKDAsIEFMR09SQU5EX0FERFJFU1NfTEVOR1RIKTsgLy8gcmVtb3ZpbmcgdGhlIGV4dHJhICc9PT09J1xufVxuLyoqXG4gKiBmcm9tTXVsdGlzaWdQcmVJbWcgdGFrZXMgbXVsdGlzaWcgcGFyYW1ldGVycyBhbmQgcmV0dXJucyBhIDMyIGJ5dGUgdHlwZWQgYXJyYXkgcHVibGljIGtleSxcbiAqIHJlcHJlc2VudGluZyBhbiBhZGRyZXNzIHRoYXQgaWRlbnRpZmllcyB0aGUgXCJleGFjdCBncm91cCwgdmVyc2lvbiwgYW5kIHB1YmxpYyBrZXlzXCIgdGhhdCBhcmUgcmVxdWlyZWQgZm9yIHNpZ25pbmcuXG4gKiBIYXNoKFwiTXVsdGlzaWdBZGRyXCIgfHwgdmVyc2lvbiB1aW50OCB8fCB0aHJlc2hvbGQgdWludDggfHwgUEsxIHx8IFBLMiB8fCAuLi4pXG4gKiBFbmNvZGluZyB0aGlzIG91dHB1dCB5aWVsZHMgYSBodW1hbiByZWFkYWJsZSBhZGRyZXNzLlxuICogQHBhcmFtIHZlcnNpb24gLSBtdWx0aXNpZyB2ZXJzaW9uXG4gKiBAcGFyYW0gdGhyZXNob2xkIC0gbXVsdGlzaWcgdGhyZXNob2xkXG4gKiBAcGFyYW0gcGtzIC0gYXJyYXkgb2YgdHlwZWQgYXJyYXkgcHVibGljIGtleXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NdWx0aXNpZ1ByZUltZyh7IHZlcnNpb24sIHRocmVzaG9sZCwgcGtzLCB9KSB7XG4gICAgaWYgKHZlcnNpb24gIT09IDEgfHwgdmVyc2lvbiA+IDI1NSB8fCB2ZXJzaW9uIDwgMCkge1xuICAgICAgICAvLyBeIGEgdGFkIHJlZHVuZGFudCwgYnV0IGluIGNhc2UgaW4gdGhlIGZ1dHVyZSB2ZXJzaW9uICE9IDEsIHN0aWxsIGNoZWNrIGZvciB1aW50OFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9NU0lHX1ZFUlNJT05fRVJST1JfTVNHKTtcbiAgICB9XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gMCB8fFxuICAgICAgICBwa3MubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIHRocmVzaG9sZCA+IHBrcy5sZW5ndGggfHxcbiAgICAgICAgdGhyZXNob2xkID4gMjU1KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX01TSUdfVEhSRVNIT0xEX0VSUk9SX01TRyk7XG4gICAgfVxuICAgIGNvbnN0IHBrTGVuID0gQUxHT1JBTkRfQUREUkVTU19CWVRFX0xFTkdUSCAtIEFMR09SQU5EX0NIRUNLU1VNX0JZVEVfTEVOR1RIO1xuICAgIGlmIChwa0xlbiAhPT0gbmFjbC5QVUJMSUNfS0VZX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoVU5FWFBFQ1RFRF9QS19MRU5fRVJST1JfTVNHKTtcbiAgICB9XG4gICAgY29uc3QgbWVyZ2VkID0gbmV3IFVpbnQ4QXJyYXkoTVVMVElTSUdfUFJFSU1HMkFERFJfUFJFRklYLmxlbmd0aCArIDIgKyBwa0xlbiAqIHBrcy5sZW5ndGgpO1xuICAgIG1lcmdlZC5zZXQoTVVMVElTSUdfUFJFSU1HMkFERFJfUFJFRklYLCAwKTtcbiAgICBtZXJnZWQuc2V0KFt2ZXJzaW9uXSwgTVVMVElTSUdfUFJFSU1HMkFERFJfUFJFRklYLmxlbmd0aCk7XG4gICAgbWVyZ2VkLnNldChbdGhyZXNob2xkXSwgTVVMVElTSUdfUFJFSU1HMkFERFJfUFJFRklYLmxlbmd0aCArIDEpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwa3NbaV0ubGVuZ3RoICE9PSBwa0xlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfTVNJR19QS19FUlJPUl9NU0cpO1xuICAgICAgICB9XG4gICAgICAgIG1lcmdlZC5zZXQocGtzW2ldLCBNVUxUSVNJR19QUkVJTUcyQUREUl9QUkVGSVgubGVuZ3RoICsgMiArIGkgKiBwa0xlbik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuYWNsLmdlbmVyaWNIYXNoKG1lcmdlZCkpO1xufVxuLyoqXG4gKiBmcm9tTXVsdGlzaWdQcmVJbWdBZGRycyB0YWtlcyBtdWx0aXNpZyBwYXJhbWV0ZXJzIGFuZCByZXR1cm5zIGEgaHVtYW4gcmVhZGFibGUgQWxnb3JhbmQgYWRkcmVzcy5cbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byBmcm9tTXVsdGlzaWdQcmVJbWcsIGJ1dCBpbnRlcmZhY2VzIHdpdGggZW5jb2RlZCBhZGRyZXNzZXMuXG4gKiBAcGFyYW0gdmVyc2lvbiAtIG11bHRpc2lnIHZlcnNpb25cbiAqIEBwYXJhbSB0aHJlc2hvbGQgLSBtdWx0aXNpZyB0aHJlc2hvbGRcbiAqIEBwYXJhbSBhZGRycyAtIGFycmF5IG9mIGVuY29kZWQgYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTXVsdGlzaWdQcmVJbWdBZGRycyh7IHZlcnNpb24sIHRocmVzaG9sZCwgYWRkcnMsIH0pIHtcbiAgICBjb25zdCBwa3MgPSBhZGRycy5tYXAoKGFkZHIpID0+IGRlY29kZUFkZHJlc3MoYWRkcikucHVibGljS2V5KTtcbiAgICByZXR1cm4gZW5jb2RlQWRkcmVzcyhmcm9tTXVsdGlzaWdQcmVJbWcoeyB2ZXJzaW9uLCB0aHJlc2hvbGQsIHBrcyB9KSk7XG59XG4vKipcbiAqIEdldCB0aGUgZXNjcm93IGFkZHJlc3Mgb2YgYW4gYXBwbGljYXRpb24uXG4gKiBAcGFyYW0gYXBwSUQgLSBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICogQHJldHVybnMgVGhlIGFkZHJlc3MgY29ycmVzcG9uZGluZyB0byB0aGF0IGFwcGxpY2F0aW9uJ3MgZXNjcm93IGFjY291bnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcHBsaWNhdGlvbkFkZHJlc3MoYXBwSUQpIHtcbiAgICBjb25zdCB0b0JlU2lnbmVkID0gdXRpbHMuY29uY2F0QXJyYXlzKEFQUF9JRF9QUkVGSVgsIGVuY29kZVVpbnQ2NChhcHBJRCkpO1xuICAgIGNvbnN0IGhhc2ggPSBuYWNsLmdlbmVyaWNIYXNoKHRvQmVTaWduZWQpO1xuICAgIHJldHVybiBlbmNvZGVBZGRyZXNzKG5ldyBVaW50OEFycmF5KGhhc2gpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbImJhc2UzMiIsIm5hY2wiLCJ1dGlscyIsImVuY29kZVVpbnQ2NCIsIkFMR09SQU5EX0FERFJFU1NfQllURV9MRU5HVEgiLCJBTEdPUkFORF9DSEVDS1NVTV9CWVRFX0xFTkdUSCIsIkFMR09SQU5EX0FERFJFU1NfTEVOR1RIIiwiQUxHT1JBTkRfWkVST19BRERSRVNTX1NUUklORyIsIk1VTFRJU0lHX1BSRUlNRzJBRERSX1BSRUZJWCIsIlVpbnQ4QXJyYXkiLCJBUFBfSURfUFJFRklYIiwiQnVmZmVyIiwiZnJvbSIsIk1BTEZPUk1FRF9BRERSRVNTX0VSUk9SX01TRyIsIkNIRUNLU1VNX0FERFJFU1NfRVJST1JfTVNHIiwiSU5WQUxJRF9NU0lHX1ZFUlNJT05fRVJST1JfTVNHIiwiSU5WQUxJRF9NU0lHX1RIUkVTSE9MRF9FUlJPUl9NU0ciLCJJTlZBTElEX01TSUdfUEtfRVJST1JfTVNHIiwiVU5FWFBFQ1RFRF9QS19MRU5fRVJST1JfTVNHIiwiZGVjb2RlQWRkcmVzcyIsImFkZHJlc3MiLCJsZW5ndGgiLCJFcnJvciIsImRlY29kZWQiLCJkZWNvZGUiLCJhc0J5dGVzIiwidG9TdHJpbmciLCJwayIsInNsaWNlIiwiY3MiLCJQVUJMSUNfS0VZX0xFTkdUSCIsImNoZWNrc3VtIiwiZ2VuZXJpY0hhc2giLCJIQVNIX0JZVEVTX0xFTkdUSCIsImFycmF5RXF1YWwiLCJwdWJsaWNLZXkiLCJpc1ZhbGlkQWRkcmVzcyIsImUiLCJlbmNvZGVBZGRyZXNzIiwiYWRkciIsImVuY29kZSIsImNvbmNhdEFycmF5cyIsImZyb21NdWx0aXNpZ1ByZUltZyIsInZlcnNpb24iLCJ0aHJlc2hvbGQiLCJwa3MiLCJwa0xlbiIsIm1lcmdlZCIsInNldCIsImkiLCJmcm9tTXVsdGlzaWdQcmVJbWdBZGRycyIsImFkZHJzIiwibWFwIiwiZ2V0QXBwbGljYXRpb25BZGRyZXNzIiwiYXBwSUQiLCJ0b0JlU2lnbmVkIiwiaGFzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/bigint.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/bigint.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bigIntToBytes: () => (/* binding */ bigIntToBytes),\n/* harmony export */   bytesToBigInt: () => (/* binding */ bytesToBigInt)\n/* harmony export */ });\n/**\n * bigIntToBytes converts a BigInt to a big-endian Uint8Array for encoding.\n * @param bi - The bigint to convert.\n * @param size - The size of the resulting byte array.\n * @returns A byte array containing the big-endian encoding of the input bigint\n */ function bigIntToBytes(bi, size) {\n    let hex = bi.toString(16);\n    // Pad the hex with zeros so it matches the size in bytes\n    if (hex.length !== size * 2) {\n        hex = hex.padStart(size * 2, \"0\");\n    }\n    const byteArray = new Uint8Array(hex.length / 2);\n    for(let i = 0, j = 0; i < hex.length / 2; i++, j += 2){\n        byteArray[i] = parseInt(hex.slice(j, j + 2), 16);\n    }\n    return byteArray;\n}\n/**\n * bytesToBigInt produces a bigint from a binary representation.\n *\n * @param bytes - The Uint8Array to convert.\n * @returns The bigint that was encoded in the input data.\n */ function bytesToBigInt(bytes) {\n    let res = BigInt(0);\n    const buf = Buffer.from(bytes);\n    for(let i = 0; i < bytes.length; i++){\n        res = BigInt(Number(buf.readUIntBE(i, 1))) + res * BigInt(256);\n    }\n    return res;\n} //# sourceMappingURL=bigint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2RpbmcvYmlnaW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FDTSxTQUFTQSxjQUFjQyxFQUFFLEVBQUVDLElBQUk7SUFDbEMsSUFBSUMsTUFBTUYsR0FBR0csUUFBUSxDQUFDO0lBQ3RCLHlEQUF5RDtJQUN6RCxJQUFJRCxJQUFJRSxNQUFNLEtBQUtILE9BQU8sR0FBRztRQUN6QkMsTUFBTUEsSUFBSUcsUUFBUSxDQUFDSixPQUFPLEdBQUc7SUFDakM7SUFDQSxNQUFNSyxZQUFZLElBQUlDLFdBQVdMLElBQUlFLE1BQU0sR0FBRztJQUM5QyxJQUFLLElBQUlJLElBQUksR0FBR0MsSUFBSSxHQUFHRCxJQUFJTixJQUFJRSxNQUFNLEdBQUcsR0FBR0ksS0FBS0MsS0FBSyxFQUFHO1FBQ3BESCxTQUFTLENBQUNFLEVBQUUsR0FBR0UsU0FBU1IsSUFBSVMsS0FBSyxDQUFDRixHQUFHQSxJQUFJLElBQUk7SUFDakQ7SUFDQSxPQUFPSDtBQUNYO0FBQ0E7Ozs7O0NBS0MsR0FDTSxTQUFTTSxjQUFjQyxLQUFLO0lBQy9CLElBQUlDLE1BQU1DLE9BQU87SUFDakIsTUFBTUMsTUFBTUMsT0FBT0MsSUFBSSxDQUFDTDtJQUN4QixJQUFLLElBQUlMLElBQUksR0FBR0EsSUFBSUssTUFBTVQsTUFBTSxFQUFFSSxJQUFLO1FBQ25DTSxNQUFNQyxPQUFPSSxPQUFPSCxJQUFJSSxVQUFVLENBQUNaLEdBQUcsT0FBT00sTUFBTUMsT0FBTztJQUM5RDtJQUNBLE9BQU9EO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2VuY29kaW5nL2JpZ2ludC5qcz9lNDNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYmlnSW50VG9CeXRlcyBjb252ZXJ0cyBhIEJpZ0ludCB0byBhIGJpZy1lbmRpYW4gVWludDhBcnJheSBmb3IgZW5jb2RpbmcuXG4gKiBAcGFyYW0gYmkgLSBUaGUgYmlnaW50IHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0gc2l6ZSAtIFRoZSBzaXplIG9mIHRoZSByZXN1bHRpbmcgYnl0ZSBhcnJheS5cbiAqIEByZXR1cm5zIEEgYnl0ZSBhcnJheSBjb250YWluaW5nIHRoZSBiaWctZW5kaWFuIGVuY29kaW5nIG9mIHRoZSBpbnB1dCBiaWdpbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpZ0ludFRvQnl0ZXMoYmksIHNpemUpIHtcbiAgICBsZXQgaGV4ID0gYmkudG9TdHJpbmcoMTYpO1xuICAgIC8vIFBhZCB0aGUgaGV4IHdpdGggemVyb3Mgc28gaXQgbWF0Y2hlcyB0aGUgc2l6ZSBpbiBieXRlc1xuICAgIGlmIChoZXgubGVuZ3RoICE9PSBzaXplICogMikge1xuICAgICAgICBoZXggPSBoZXgucGFkU3RhcnQoc2l6ZSAqIDIsICcwJyk7XG4gICAgfVxuICAgIGNvbnN0IGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCBoZXgubGVuZ3RoIC8gMjsgaSsrLCBqICs9IDIpIHtcbiAgICAgICAgYnl0ZUFycmF5W2ldID0gcGFyc2VJbnQoaGV4LnNsaWNlKGosIGogKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZUFycmF5O1xufVxuLyoqXG4gKiBieXRlc1RvQmlnSW50IHByb2R1Y2VzIGEgYmlnaW50IGZyb20gYSBiaW5hcnkgcmVwcmVzZW50YXRpb24uXG4gKlxuICogQHBhcmFtIGJ5dGVzIC0gVGhlIFVpbnQ4QXJyYXkgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIFRoZSBiaWdpbnQgdGhhdCB3YXMgZW5jb2RlZCBpbiB0aGUgaW5wdXQgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9CaWdJbnQoYnl0ZXMpIHtcbiAgICBsZXQgcmVzID0gQmlnSW50KDApO1xuICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ5dGVzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlcyA9IEJpZ0ludChOdW1iZXIoYnVmLnJlYWRVSW50QkUoaSwgMSkpKSArIHJlcyAqIEJpZ0ludCgyNTYpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmlnaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJiaWdJbnRUb0J5dGVzIiwiYmkiLCJzaXplIiwiaGV4IiwidG9TdHJpbmciLCJsZW5ndGgiLCJwYWRTdGFydCIsImJ5dGVBcnJheSIsIlVpbnQ4QXJyYXkiLCJpIiwiaiIsInBhcnNlSW50Iiwic2xpY2UiLCJieXRlc1RvQmlnSW50IiwiYnl0ZXMiLCJyZXMiLCJCaWdJbnQiLCJidWYiLCJCdWZmZXIiLCJmcm9tIiwiTnVtYmVyIiwicmVhZFVJbnRCRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/bigint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_CONTAINS_EMPTY_STRING: () => (/* binding */ ERROR_CONTAINS_EMPTY_STRING),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var algo_msgpack_with_bigint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! algo-msgpack-with-bigint */ \"(ssr)/./node_modules/.pnpm/algo-msgpack-with-bigint@2.1.1/node_modules/algo-msgpack-with-bigint/dist/index.js\");\n/**\n * This file is a wrapper of msgpack.js.\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\n * Algorand's msgpack encoding follows to following rules -\n *  1. Every integer must be encoded to the smallest type possible (0-255-\\>8bit, 256-65535-\\>16bit, etx)\n *  2. All fields names must be sorted\n *  3. All empty and 0 fields should be omitted\n *  4. Every positive number must be encoded as uint\n *  5. Binary blob should be used for binary data and string for strings\n *  */ \n// Errors\nconst ERROR_CONTAINS_EMPTY_STRING = \"The object contains empty or 0 values. First empty or 0 value encountered during encoding: \";\n/**\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\n * Empty arrays considered empty\n * @param obj - The object to check\n * @returns \\{true, empty key\\} if contains empty, \\{false, undefined\\} otherwise\n */ function containsEmpty(obj) {\n    for(const key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (!obj[key] || obj[key].length === 0) {\n                return {\n                    containsEmpty: true,\n                    firstEmptyKey: key\n                };\n            }\n        }\n    }\n    return {\n        containsEmpty: false,\n        firstEmptyKey: undefined\n    };\n}\n/**\n * encode encodes objects using msgpack\n * @param obj - a dictionary to be encoded. Must not contain empty or 0 values.\n * @returns msgpack representation of the object\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\n */ function encode(obj) {\n    // Check for empty values\n    const emptyCheck = containsEmpty(obj);\n    if (emptyCheck.containsEmpty) {\n        throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);\n    }\n    // enable the canonical option\n    const options = {\n        sortKeys: true\n    };\n    return algo_msgpack_with_bigint__WEBPACK_IMPORTED_MODULE_0__.encode(obj, options);\n}\nfunction decode(buffer) {\n    return algo_msgpack_with_bigint__WEBPACK_IMPORTED_MODULE_0__.decode(buffer);\n} //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2RpbmcvZW5jb2RpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7O0lBVUksR0FDZ0Q7QUFDcEQsU0FBUztBQUNGLE1BQU1DLDhCQUE4Qiw4RkFBOEY7QUFDekk7Ozs7O0NBS0MsR0FDRCxTQUFTQyxjQUFjQyxHQUFHO0lBQ3RCLElBQUssTUFBTUMsT0FBT0QsSUFBSztRQUNuQixJQUFJRSxPQUFPQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDTCxLQUFLQyxNQUFNO1lBQ2hELElBQUksQ0FBQ0QsR0FBRyxDQUFDQyxJQUFJLElBQUlELEdBQUcsQ0FBQ0MsSUFBSSxDQUFDSyxNQUFNLEtBQUssR0FBRztnQkFDcEMsT0FBTztvQkFBRVAsZUFBZTtvQkFBTVEsZUFBZU47Z0JBQUk7WUFDckQ7UUFDSjtJQUNKO0lBQ0EsT0FBTztRQUFFRixlQUFlO1FBQU9RLGVBQWVDO0lBQVU7QUFDNUQ7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLE9BQU9ULEdBQUc7SUFDdEIseUJBQXlCO0lBQ3pCLE1BQU1VLGFBQWFYLGNBQWNDO0lBQ2pDLElBQUlVLFdBQVdYLGFBQWEsRUFBRTtRQUMxQixNQUFNLElBQUlZLE1BQU1iLDhCQUE4QlksV0FBV0gsYUFBYTtJQUMxRTtJQUNBLDhCQUE4QjtJQUM5QixNQUFNSyxVQUFVO1FBQUVDLFVBQVU7SUFBSztJQUNqQyxPQUFPaEIsNERBQWMsQ0FBQ0csS0FBS1k7QUFDL0I7QUFDTyxTQUFTRSxPQUFPQyxNQUFNO0lBQ3pCLE9BQU9sQiw0REFBYyxDQUFDa0I7QUFDMUIsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2VuY29kaW5nL2VuY29kaW5nLmpzP2QyYWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGZpbGUgaXMgYSB3cmFwcGVyIG9mIG1zZ3BhY2suanMuXG4gKiBUaGUgd3JhcHBlciB3YXMgd3JpdHRlbiBpbiBvcmRlciB0byBlbnN1cmUgY29ycmVjdCBlbmNvZGluZyBvZiBBbGdvcmFuZCBUcmFuc2FjdGlvbiBhbmQgb3RoZXIgZm9ybWF0cy5cbiAqIEluIHBhcnRpY3VsYXIsIGl0IG1hdGNoZXMgZ28tYWxnb3JhbmQgYmxvY2tjaGFpbiBjbGllbnQsIHdyaXR0ZW4gaW4gZ28gKGh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vYWxnb3JhbmQvZ28tYWxnb3JhbmQuXG4gKiBBbGdvcmFuZCdzIG1zZ3BhY2sgZW5jb2RpbmcgZm9sbG93cyB0byBmb2xsb3dpbmcgcnVsZXMgLVxuICogIDEuIEV2ZXJ5IGludGVnZXIgbXVzdCBiZSBlbmNvZGVkIHRvIHRoZSBzbWFsbGVzdCB0eXBlIHBvc3NpYmxlICgwLTI1NS1cXD44Yml0LCAyNTYtNjU1MzUtXFw+MTZiaXQsIGV0eClcbiAqICAyLiBBbGwgZmllbGRzIG5hbWVzIG11c3QgYmUgc29ydGVkXG4gKiAgMy4gQWxsIGVtcHR5IGFuZCAwIGZpZWxkcyBzaG91bGQgYmUgb21pdHRlZFxuICogIDQuIEV2ZXJ5IHBvc2l0aXZlIG51bWJlciBtdXN0IGJlIGVuY29kZWQgYXMgdWludFxuICogIDUuIEJpbmFyeSBibG9iIHNob3VsZCBiZSB1c2VkIGZvciBiaW5hcnkgZGF0YSBhbmQgc3RyaW5nIGZvciBzdHJpbmdzXG4gKiAgKi9cbmltcG9ydCAqIGFzIG1zZ3BhY2sgZnJvbSAnYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50Jztcbi8vIEVycm9yc1xuZXhwb3J0IGNvbnN0IEVSUk9SX0NPTlRBSU5TX0VNUFRZX1NUUklORyA9ICdUaGUgb2JqZWN0IGNvbnRhaW5zIGVtcHR5IG9yIDAgdmFsdWVzLiBGaXJzdCBlbXB0eSBvciAwIHZhbHVlIGVuY291bnRlcmVkIGR1cmluZyBlbmNvZGluZzogJztcbi8qKlxuICogY29udGFpbnNFbXB0eSByZXR1cm5zIHRydWUgaWYgYW55IG9mIHRoZSBvYmplY3QncyB2YWx1ZXMgYXJlIGVtcHR5LCBmYWxzZSBvdGhlcndpc2UuXG4gKiBFbXB0eSBhcnJheXMgY29uc2lkZXJlZCBlbXB0eVxuICogQHBhcmFtIG9iaiAtIFRoZSBvYmplY3QgdG8gY2hlY2tcbiAqIEByZXR1cm5zIFxce3RydWUsIGVtcHR5IGtleVxcfSBpZiBjb250YWlucyBlbXB0eSwgXFx7ZmFsc2UsIHVuZGVmaW5lZFxcfSBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gY29udGFpbnNFbXB0eShvYmopIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIGlmICghb2JqW2tleV0gfHwgb2JqW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29udGFpbnNFbXB0eTogdHJ1ZSwgZmlyc3RFbXB0eUtleToga2V5IH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29udGFpbnNFbXB0eTogZmFsc2UsIGZpcnN0RW1wdHlLZXk6IHVuZGVmaW5lZCB9O1xufVxuLyoqXG4gKiBlbmNvZGUgZW5jb2RlcyBvYmplY3RzIHVzaW5nIG1zZ3BhY2tcbiAqIEBwYXJhbSBvYmogLSBhIGRpY3Rpb25hcnkgdG8gYmUgZW5jb2RlZC4gTXVzdCBub3QgY29udGFpbiBlbXB0eSBvciAwIHZhbHVlcy5cbiAqIEByZXR1cm5zIG1zZ3BhY2sgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICogQHRocm93cyBFcnJvciBjb250YWluaW5nIEVSUk9SX0NPTlRBSU5TX0VNUFRZX1NUUklORyBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIGVtcHR5IG9yIHplcm8gdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUob2JqKSB7XG4gICAgLy8gQ2hlY2sgZm9yIGVtcHR5IHZhbHVlc1xuICAgIGNvbnN0IGVtcHR5Q2hlY2sgPSBjb250YWluc0VtcHR5KG9iaik7XG4gICAgaWYgKGVtcHR5Q2hlY2suY29udGFpbnNFbXB0eSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfQ09OVEFJTlNfRU1QVFlfU1RSSU5HICsgZW1wdHlDaGVjay5maXJzdEVtcHR5S2V5KTtcbiAgICB9XG4gICAgLy8gZW5hYmxlIHRoZSBjYW5vbmljYWwgb3B0aW9uXG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgc29ydEtleXM6IHRydWUgfTtcbiAgICByZXR1cm4gbXNncGFjay5lbmNvZGUob2JqLCBvcHRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoYnVmZmVyKSB7XG4gICAgcmV0dXJuIG1zZ3BhY2suZGVjb2RlKGJ1ZmZlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNvZGluZy5qcy5tYXAiXSwibmFtZXMiOlsibXNncGFjayIsIkVSUk9SX0NPTlRBSU5TX0VNUFRZX1NUUklORyIsImNvbnRhaW5zRW1wdHkiLCJvYmoiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJsZW5ndGgiLCJmaXJzdEVtcHR5S2V5IiwidW5kZWZpbmVkIiwiZW5jb2RlIiwiZW1wdHlDaGVjayIsIkVycm9yIiwib3B0aW9ucyIsInNvcnRLZXlzIiwiZGVjb2RlIiwiYnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/uint64.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/uint64.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeUint64: () => (/* binding */ decodeUint64),\n/* harmony export */   encodeUint64: () => (/* binding */ encodeUint64)\n/* harmony export */ });\n/**\n * encodeUint64 converts an integer to its binary representation.\n * @param num - The number to convert. This must be an unsigned integer less than\n *   2^64.\n * @returns An 8-byte typed array containing the big-endian encoding of the input\n *   integer.\n */ function encodeUint64(num) {\n    const isInteger = typeof num === \"bigint\" || Number.isInteger(num);\n    if (!isInteger || num < 0 || num > BigInt(\"0xffffffffffffffff\")) {\n        throw new Error(\"Input is not a 64-bit unsigned integer\");\n    }\n    const buf = Buffer.allocUnsafe(8);\n    buf.writeBigUInt64BE(BigInt(num));\n    return new Uint8Array(buf);\n}\nfunction decodeUint64(data, decodingMode = \"safe\") {\n    if (decodingMode !== \"safe\" && decodingMode !== \"mixed\" && decodingMode !== \"bigint\") {\n        throw new Error(`Unknown decodingMode option: ${decodingMode}`);\n    }\n    if (data.byteLength === 0 || data.byteLength > 8) {\n        throw new Error(`Data has unacceptable length. Expected length is between 1 and 8, got ${data.byteLength}`);\n    }\n    // insert 0s at the beginning if data is smaller than 8 bytes\n    const padding = Buffer.allocUnsafe(8 - data.byteLength);\n    padding.fill(0);\n    const buf = Buffer.concat([\n        padding,\n        Buffer.from(data)\n    ]);\n    const num = buf.readBigUInt64BE();\n    const isBig = num > Number.MAX_SAFE_INTEGER;\n    if (decodingMode === \"safe\") {\n        if (isBig) {\n            throw new Error(`Integer exceeds maximum safe integer: ${num.toString()}. Try decoding with \"mixed\" or \"safe\" decodingMode.`);\n        }\n        return Number(num);\n    }\n    if (decodingMode === \"mixed\" && !isBig) {\n        return Number(num);\n    }\n    return num;\n} //# sourceMappingURL=uint64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2RpbmcvdWludDY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7OztDQU1DLEdBQ00sU0FBU0EsYUFBYUMsR0FBRztJQUM1QixNQUFNQyxZQUFZLE9BQU9ELFFBQVEsWUFBWUUsT0FBT0QsU0FBUyxDQUFDRDtJQUM5RCxJQUFJLENBQUNDLGFBQWFELE1BQU0sS0FBS0EsTUFBTUcsT0FBTyx1QkFBdUI7UUFDN0QsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUMsTUFBTUMsT0FBT0MsV0FBVyxDQUFDO0lBQy9CRixJQUFJRyxnQkFBZ0IsQ0FBQ0wsT0FBT0g7SUFDNUIsT0FBTyxJQUFJUyxXQUFXSjtBQUMxQjtBQUNPLFNBQVNLLGFBQWFDLElBQUksRUFBRUMsZUFBZSxNQUFNO0lBQ3BELElBQUlBLGlCQUFpQixVQUNqQkEsaUJBQWlCLFdBQ2pCQSxpQkFBaUIsVUFBVTtRQUMzQixNQUFNLElBQUlSLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRVEsYUFBYSxDQUFDO0lBQ2xFO0lBQ0EsSUFBSUQsS0FBS0UsVUFBVSxLQUFLLEtBQUtGLEtBQUtFLFVBQVUsR0FBRyxHQUFHO1FBQzlDLE1BQU0sSUFBSVQsTUFBTSxDQUFDLHNFQUFzRSxFQUFFTyxLQUFLRSxVQUFVLENBQUMsQ0FBQztJQUM5RztJQUNBLDZEQUE2RDtJQUM3RCxNQUFNQyxVQUFVUixPQUFPQyxXQUFXLENBQUMsSUFBSUksS0FBS0UsVUFBVTtJQUN0REMsUUFBUUMsSUFBSSxDQUFDO0lBQ2IsTUFBTVYsTUFBTUMsT0FBT1UsTUFBTSxDQUFDO1FBQUNGO1FBQVNSLE9BQU9XLElBQUksQ0FBQ047S0FBTTtJQUN0RCxNQUFNWCxNQUFNSyxJQUFJYSxlQUFlO0lBQy9CLE1BQU1DLFFBQVFuQixNQUFNRSxPQUFPa0IsZ0JBQWdCO0lBQzNDLElBQUlSLGlCQUFpQixRQUFRO1FBQ3pCLElBQUlPLE9BQU87WUFDUCxNQUFNLElBQUlmLE1BQU0sQ0FBQyxzQ0FBc0MsRUFBRUosSUFBSXFCLFFBQVEsR0FBRyxtREFBbUQsQ0FBQztRQUNoSTtRQUNBLE9BQU9uQixPQUFPRjtJQUNsQjtJQUNBLElBQUlZLGlCQUFpQixXQUFXLENBQUNPLE9BQU87UUFDcEMsT0FBT2pCLE9BQU9GO0lBQ2xCO0lBQ0EsT0FBT0E7QUFDWCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2RpbmcvdWludDY0LmpzPzJhM2EiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBlbmNvZGVVaW50NjQgY29udmVydHMgYW4gaW50ZWdlciB0byBpdHMgYmluYXJ5IHJlcHJlc2VudGF0aW9uLlxuICogQHBhcmFtIG51bSAtIFRoZSBudW1iZXIgdG8gY29udmVydC4gVGhpcyBtdXN0IGJlIGFuIHVuc2lnbmVkIGludGVnZXIgbGVzcyB0aGFuXG4gKiAgIDJeNjQuXG4gKiBAcmV0dXJucyBBbiA4LWJ5dGUgdHlwZWQgYXJyYXkgY29udGFpbmluZyB0aGUgYmlnLWVuZGlhbiBlbmNvZGluZyBvZiB0aGUgaW5wdXRcbiAqICAgaW50ZWdlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVVpbnQ2NChudW0pIHtcbiAgICBjb25zdCBpc0ludGVnZXIgPSB0eXBlb2YgbnVtID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKG51bSk7XG4gICAgaWYgKCFpc0ludGVnZXIgfHwgbnVtIDwgMCB8fCBudW0gPiBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgaXMgbm90IGEgNjQtYml0IHVuc2lnbmVkIGludGVnZXInKTtcbiAgICB9XG4gICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDgpO1xuICAgIGJ1Zi53cml0ZUJpZ1VJbnQ2NEJFKEJpZ0ludChudW0pKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVVaW50NjQoZGF0YSwgZGVjb2RpbmdNb2RlID0gJ3NhZmUnKSB7XG4gICAgaWYgKGRlY29kaW5nTW9kZSAhPT0gJ3NhZmUnICYmXG4gICAgICAgIGRlY29kaW5nTW9kZSAhPT0gJ21peGVkJyAmJlxuICAgICAgICBkZWNvZGluZ01vZGUgIT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBkZWNvZGluZ01vZGUgb3B0aW9uOiAke2RlY29kaW5nTW9kZX1gKTtcbiAgICB9XG4gICAgaWYgKGRhdGEuYnl0ZUxlbmd0aCA9PT0gMCB8fCBkYXRhLmJ5dGVMZW5ndGggPiA4KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRGF0YSBoYXMgdW5hY2NlcHRhYmxlIGxlbmd0aC4gRXhwZWN0ZWQgbGVuZ3RoIGlzIGJldHdlZW4gMSBhbmQgOCwgZ290ICR7ZGF0YS5ieXRlTGVuZ3RofWApO1xuICAgIH1cbiAgICAvLyBpbnNlcnQgMHMgYXQgdGhlIGJlZ2lubmluZyBpZiBkYXRhIGlzIHNtYWxsZXIgdGhhbiA4IGJ5dGVzXG4gICAgY29uc3QgcGFkZGluZyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg4IC0gZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICBwYWRkaW5nLmZpbGwoMCk7XG4gICAgY29uc3QgYnVmID0gQnVmZmVyLmNvbmNhdChbcGFkZGluZywgQnVmZmVyLmZyb20oZGF0YSldKTtcbiAgICBjb25zdCBudW0gPSBidWYucmVhZEJpZ1VJbnQ2NEJFKCk7XG4gICAgY29uc3QgaXNCaWcgPSBudW0gPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBpZiAoZGVjb2RpbmdNb2RlID09PSAnc2FmZScpIHtcbiAgICAgICAgaWYgKGlzQmlnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVnZXIgZXhjZWVkcyBtYXhpbXVtIHNhZmUgaW50ZWdlcjogJHtudW0udG9TdHJpbmcoKX0uIFRyeSBkZWNvZGluZyB3aXRoIFwibWl4ZWRcIiBvciBcInNhZmVcIiBkZWNvZGluZ01vZGUuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE51bWJlcihudW0pO1xuICAgIH1cbiAgICBpZiAoZGVjb2RpbmdNb2RlID09PSAnbWl4ZWQnICYmICFpc0JpZykge1xuICAgICAgICByZXR1cm4gTnVtYmVyKG51bSk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11aW50NjQuanMubWFwIl0sIm5hbWVzIjpbImVuY29kZVVpbnQ2NCIsIm51bSIsImlzSW50ZWdlciIsIk51bWJlciIsIkJpZ0ludCIsIkVycm9yIiwiYnVmIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJ3cml0ZUJpZ1VJbnQ2NEJFIiwiVWludDhBcnJheSIsImRlY29kZVVpbnQ2NCIsImRhdGEiLCJkZWNvZGluZ01vZGUiLCJieXRlTGVuZ3RoIiwicGFkZGluZyIsImZpbGwiLCJjb25jYXQiLCJmcm9tIiwicmVhZEJpZ1VJbnQ2NEJFIiwiaXNCaWciLCJNQVhfU0FGRV9JTlRFR0VSIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/uint64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/group.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/group.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TxGroup: () => (/* binding */ TxGroup),\n/* harmony export */   assignGroupID: () => (/* binding */ assignGroupID),\n/* harmony export */   computeGroupID: () => (/* binding */ computeGroupID),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\n\n\nconst ALGORAND_MAX_TX_GROUP_SIZE = 16;\n/**\n * Aux class for group id calculation of a group of transactions\n */ class TxGroup {\n    constructor(hashes){\n        this.name = \"Transaction group\";\n        this.tag = Buffer.from(\"TG\");\n        if (hashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {\n            const errorMsg = `${hashes.length.toString()} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE.toString()}`;\n            throw Error(errorMsg);\n        }\n        this.txGroupHashes = hashes;\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        const txgroup = {\n            txlist: this.txGroupHashes\n        };\n        return txgroup;\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(txgroupForEnc) {\n        const txn = Object.create(this.prototype);\n        txn.name = \"Transaction group\";\n        txn.tag = Buffer.from(\"TG\");\n        txn.txGroupHashes = [];\n        for (const hash of txgroupForEnc.txlist){\n            txn.txGroupHashes.push(Buffer.from(hash));\n        }\n        return txn;\n    }\n    toByte() {\n        return _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(this.get_obj_for_encoding());\n    }\n}\n/**\n * computeGroupID returns group ID for a group of transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @returns Buffer\n */ function computeGroupID(txns) {\n    const hashes = [];\n    for (const txn of txns){\n        const tx = _transaction__WEBPACK_IMPORTED_MODULE_0__.instantiateTxnIfNeeded(txn);\n        hashes.push(tx.rawTxID());\n    }\n    const txgroup = new TxGroup(hashes);\n    const bytes = txgroup.toByte();\n    const toBeHashed = Buffer.from(_utils_utils__WEBPACK_IMPORTED_MODULE_4__.concatArrays(txgroup.tag, bytes));\n    const gid = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.genericHash(toBeHashed);\n    return Buffer.from(gid);\n}\n/**\n * assignGroupID assigns group id to a given list of unsigned transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @param from - optional sender address specifying which transaction return\n * @returns possible list of matching transactions\n */ function assignGroupID(txns, from) {\n    const gid = computeGroupID(txns);\n    const result = [];\n    for (const txn of txns){\n        const tx = _transaction__WEBPACK_IMPORTED_MODULE_0__.instantiateTxnIfNeeded(txn);\n        if (!from || _encoding_address__WEBPACK_IMPORTED_MODULE_3__.encodeAddress(tx.from.publicKey) === from) {\n            tx.group = gid;\n            result.push(tx);\n        }\n    }\n    return result;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TxGroup); //# sourceMappingURL=group.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZ3JvdXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQTRDO0FBQ0E7QUFDSTtBQUNGO0FBQ1A7QUFDdkMsTUFBTUssNkJBQTZCO0FBQ25DOztDQUVDLEdBQ00sTUFBTUM7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxHQUFHLEdBQUdDLE9BQU9DLElBQUksQ0FBQztRQUN2QixJQUFJSixPQUFPSyxNQUFNLEdBQUdSLDRCQUE0QjtZQUM1QyxNQUFNUyxXQUFXLENBQUMsRUFBRU4sT0FBT0ssTUFBTSxDQUFDRSxRQUFRLEdBQUcscURBQXFELEVBQUVWLDJCQUEyQlUsUUFBUSxHQUFHLENBQUM7WUFDM0ksTUFBTUMsTUFBTUY7UUFDaEI7UUFDQSxJQUFJLENBQUNHLGFBQWEsR0FBR1Q7SUFDekI7SUFDQSxxQ0FBcUM7SUFDckNVLHVCQUF1QjtRQUNuQixNQUFNQyxVQUFVO1lBQ1pDLFFBQVEsSUFBSSxDQUFDSCxhQUFhO1FBQzlCO1FBQ0EsT0FBT0U7SUFDWDtJQUNBLHFDQUFxQztJQUNyQyxPQUFPRSxzQkFBc0JDLGFBQWEsRUFBRTtRQUN4QyxNQUFNQyxNQUFNQyxPQUFPQyxNQUFNLENBQUMsSUFBSSxDQUFDQyxTQUFTO1FBQ3hDSCxJQUFJZCxJQUFJLEdBQUc7UUFDWGMsSUFBSWIsR0FBRyxHQUFHQyxPQUFPQyxJQUFJLENBQUM7UUFDdEJXLElBQUlOLGFBQWEsR0FBRyxFQUFFO1FBQ3RCLEtBQUssTUFBTVUsUUFBUUwsY0FBY0YsTUFBTSxDQUFFO1lBQ3JDRyxJQUFJTixhQUFhLENBQUNXLElBQUksQ0FBQ2pCLE9BQU9DLElBQUksQ0FBQ2U7UUFDdkM7UUFDQSxPQUFPSjtJQUNYO0lBQ0FNLFNBQVM7UUFDTCxPQUFPM0Isc0RBQWUsQ0FBQyxJQUFJLENBQUNnQixvQkFBb0I7SUFDcEQ7QUFDSjtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTYSxlQUFlQyxJQUFJO0lBQy9CLE1BQU14QixTQUFTLEVBQUU7SUFDakIsS0FBSyxNQUFNZSxPQUFPUyxLQUFNO1FBQ3BCLE1BQU1DLEtBQUtqQyxnRUFBaUMsQ0FBQ3VCO1FBQzdDZixPQUFPb0IsSUFBSSxDQUFDSyxHQUFHRSxPQUFPO0lBQzFCO0lBQ0EsTUFBTWhCLFVBQVUsSUFBSWIsUUFBUUU7SUFDNUIsTUFBTTRCLFFBQVFqQixRQUFRVSxNQUFNO0lBQzVCLE1BQU1RLGFBQWExQixPQUFPQyxJQUFJLENBQUNSLHNEQUFrQixDQUFDZSxRQUFRVCxHQUFHLEVBQUUwQjtJQUMvRCxNQUFNRyxNQUFNdEMsMkRBQWdCLENBQUNvQztJQUM3QixPQUFPMUIsT0FBT0MsSUFBSSxDQUFDMkI7QUFDdkI7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNFLGNBQWNULElBQUksRUFBRXBCLElBQUk7SUFDcEMsTUFBTTJCLE1BQU1SLGVBQWVDO0lBQzNCLE1BQU1VLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU1uQixPQUFPUyxLQUFNO1FBQ3BCLE1BQU1DLEtBQUtqQyxnRUFBaUMsQ0FBQ3VCO1FBQzdDLElBQUksQ0FBQ1gsUUFBUVQsNERBQXFCLENBQUM4QixHQUFHckIsSUFBSSxDQUFDZ0MsU0FBUyxNQUFNaEMsTUFBTTtZQUM1RHFCLEdBQUdZLEtBQUssR0FBR047WUFDWEcsT0FBT2QsSUFBSSxDQUFDSztRQUNoQjtJQUNKO0lBQ0EsT0FBT1M7QUFDWDtBQUNBLGlFQUFlcEMsT0FBT0EsRUFBQyxDQUN2QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2dyb3VwLmpzPzljNzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHhuQnVpbGRlciBmcm9tICcuL3RyYW5zYWN0aW9uJztcbmltcG9ydCAqIGFzIG5hY2wgZnJvbSAnLi9uYWNsL25hY2xXcmFwcGVycyc7XG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICcuL2VuY29kaW5nL2VuY29kaW5nJztcbmltcG9ydCAqIGFzIGFkZHJlc3MgZnJvbSAnLi9lbmNvZGluZy9hZGRyZXNzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMvdXRpbHMnO1xuY29uc3QgQUxHT1JBTkRfTUFYX1RYX0dST1VQX1NJWkUgPSAxNjtcbi8qKlxuICogQXV4IGNsYXNzIGZvciBncm91cCBpZCBjYWxjdWxhdGlvbiBvZiBhIGdyb3VwIG9mIHRyYW5zYWN0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgVHhHcm91cCB7XG4gICAgY29uc3RydWN0b3IoaGFzaGVzKSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUcmFuc2FjdGlvbiBncm91cCc7XG4gICAgICAgIHRoaXMudGFnID0gQnVmZmVyLmZyb20oJ1RHJyk7XG4gICAgICAgIGlmIChoYXNoZXMubGVuZ3RoID4gQUxHT1JBTkRfTUFYX1RYX0dST1VQX1NJWkUpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTXNnID0gYCR7aGFzaGVzLmxlbmd0aC50b1N0cmluZygpfSB0cmFuc2FjdGlvbnMgZ3JvdXBlZCB0b2dldGhlciBidXQgbWF4IGdyb3VwIHNpemUgaXMgJHtBTEdPUkFORF9NQVhfVFhfR1JPVVBfU0laRS50b1N0cmluZygpfWA7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihlcnJvck1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50eEdyb3VwSGFzaGVzID0gaGFzaGVzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgZ2V0X29ial9mb3JfZW5jb2RpbmcoKSB7XG4gICAgICAgIGNvbnN0IHR4Z3JvdXAgPSB7XG4gICAgICAgICAgICB0eGxpc3Q6IHRoaXMudHhHcm91cEhhc2hlcyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHR4Z3JvdXA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICBzdGF0aWMgZnJvbV9vYmpfZm9yX2VuY29kaW5nKHR4Z3JvdXBGb3JFbmMpIHtcbiAgICAgICAgY29uc3QgdHhuID0gT2JqZWN0LmNyZWF0ZSh0aGlzLnByb3RvdHlwZSk7XG4gICAgICAgIHR4bi5uYW1lID0gJ1RyYW5zYWN0aW9uIGdyb3VwJztcbiAgICAgICAgdHhuLnRhZyA9IEJ1ZmZlci5mcm9tKCdURycpO1xuICAgICAgICB0eG4udHhHcm91cEhhc2hlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGhhc2ggb2YgdHhncm91cEZvckVuYy50eGxpc3QpIHtcbiAgICAgICAgICAgIHR4bi50eEdyb3VwSGFzaGVzLnB1c2goQnVmZmVyLmZyb20oaGFzaCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eG47XG4gICAgfVxuICAgIHRvQnl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kaW5nLmVuY29kZSh0aGlzLmdldF9vYmpfZm9yX2VuY29kaW5nKCkpO1xuICAgIH1cbn1cbi8qKlxuICogY29tcHV0ZUdyb3VwSUQgcmV0dXJucyBncm91cCBJRCBmb3IgYSBncm91cCBvZiB0cmFuc2FjdGlvbnNcbiAqIEBwYXJhbSB0eG5zIC0gYXJyYXkgb2YgdHJhbnNhY3Rpb25zIChldmVyeSBlbGVtZW50IGlzIGEgZGljdCBvciBUcmFuc2FjdGlvbilcbiAqIEByZXR1cm5zIEJ1ZmZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUdyb3VwSUQodHhucykge1xuICAgIGNvbnN0IGhhc2hlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgdHhuIG9mIHR4bnMpIHtcbiAgICAgICAgY29uc3QgdHggPSB0eG5CdWlsZGVyLmluc3RhbnRpYXRlVHhuSWZOZWVkZWQodHhuKTtcbiAgICAgICAgaGFzaGVzLnB1c2godHgucmF3VHhJRCgpKTtcbiAgICB9XG4gICAgY29uc3QgdHhncm91cCA9IG5ldyBUeEdyb3VwKGhhc2hlcyk7XG4gICAgY29uc3QgYnl0ZXMgPSB0eGdyb3VwLnRvQnl0ZSgpO1xuICAgIGNvbnN0IHRvQmVIYXNoZWQgPSBCdWZmZXIuZnJvbSh1dGlscy5jb25jYXRBcnJheXModHhncm91cC50YWcsIGJ5dGVzKSk7XG4gICAgY29uc3QgZ2lkID0gbmFjbC5nZW5lcmljSGFzaCh0b0JlSGFzaGVkKTtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oZ2lkKTtcbn1cbi8qKlxuICogYXNzaWduR3JvdXBJRCBhc3NpZ25zIGdyb3VwIGlkIHRvIGEgZ2l2ZW4gbGlzdCBvZiB1bnNpZ25lZCB0cmFuc2FjdGlvbnNcbiAqIEBwYXJhbSB0eG5zIC0gYXJyYXkgb2YgdHJhbnNhY3Rpb25zIChldmVyeSBlbGVtZW50IGlzIGEgZGljdCBvciBUcmFuc2FjdGlvbilcbiAqIEBwYXJhbSBmcm9tIC0gb3B0aW9uYWwgc2VuZGVyIGFkZHJlc3Mgc3BlY2lmeWluZyB3aGljaCB0cmFuc2FjdGlvbiByZXR1cm5cbiAqIEByZXR1cm5zIHBvc3NpYmxlIGxpc3Qgb2YgbWF0Y2hpbmcgdHJhbnNhY3Rpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25Hcm91cElEKHR4bnMsIGZyb20pIHtcbiAgICBjb25zdCBnaWQgPSBjb21wdXRlR3JvdXBJRCh0eG5zKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHR4biBvZiB0eG5zKSB7XG4gICAgICAgIGNvbnN0IHR4ID0gdHhuQnVpbGRlci5pbnN0YW50aWF0ZVR4bklmTmVlZGVkKHR4bik7XG4gICAgICAgIGlmICghZnJvbSB8fCBhZGRyZXNzLmVuY29kZUFkZHJlc3ModHguZnJvbS5wdWJsaWNLZXkpID09PSBmcm9tKSB7XG4gICAgICAgICAgICB0eC5ncm91cCA9IGdpZDtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHR4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGRlZmF1bHQgVHhHcm91cDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb3VwLmpzLm1hcCJdLCJuYW1lcyI6WyJ0eG5CdWlsZGVyIiwibmFjbCIsImVuY29kaW5nIiwiYWRkcmVzcyIsInV0aWxzIiwiQUxHT1JBTkRfTUFYX1RYX0dST1VQX1NJWkUiLCJUeEdyb3VwIiwiY29uc3RydWN0b3IiLCJoYXNoZXMiLCJuYW1lIiwidGFnIiwiQnVmZmVyIiwiZnJvbSIsImxlbmd0aCIsImVycm9yTXNnIiwidG9TdHJpbmciLCJFcnJvciIsInR4R3JvdXBIYXNoZXMiLCJnZXRfb2JqX2Zvcl9lbmNvZGluZyIsInR4Z3JvdXAiLCJ0eGxpc3QiLCJmcm9tX29ial9mb3JfZW5jb2RpbmciLCJ0eGdyb3VwRm9yRW5jIiwidHhuIiwiT2JqZWN0IiwiY3JlYXRlIiwicHJvdG90eXBlIiwiaGFzaCIsInB1c2giLCJ0b0J5dGUiLCJlbmNvZGUiLCJjb21wdXRlR3JvdXBJRCIsInR4bnMiLCJ0eCIsImluc3RhbnRpYXRlVHhuSWZOZWVkZWQiLCJyYXdUeElEIiwiYnl0ZXMiLCJ0b0JlSGFzaGVkIiwiY29uY2F0QXJyYXlzIiwiZ2lkIiwiZ2VuZXJpY0hhc2giLCJhc3NpZ25Hcm91cElEIiwicmVzdWx0IiwiZW5jb2RlQWRkcmVzcyIsInB1YmxpY0tleSIsImdyb3VwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/group.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/main.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _main__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _main__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_main__WEBPACK_IMPORTED_MODULE_0__); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBa0M7QUFDWDtBQUN2QixpRUFBZUEsa0NBQU9BLEVBQUMsQ0FDdkIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9pbmRleC5qcz8yOGFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFsZ29zZGsgZnJvbSAnLi9tYWluJztcbmV4cG9ydCAqIGZyb20gJy4vbWFpbic7XG5leHBvcnQgZGVmYXVsdCBhbGdvc2RrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImFsZ29zZGsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/logic.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/logic.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkByteConstBlock: () => (/* binding */ checkByteConstBlock),\n/* harmony export */   checkIntConstBlock: () => (/* binding */ checkIntConstBlock),\n/* harmony export */   checkProgram: () => (/* binding */ checkProgram),\n/* harmony export */   checkPushByteOp: () => (/* binding */ checkPushByteOp),\n/* harmony export */   checkPushIntOp: () => (/* binding */ checkPushIntOp),\n/* harmony export */   langspecEvalMaxVersion: () => (/* binding */ langspecEvalMaxVersion),\n/* harmony export */   langspecLogicSigVersion: () => (/* binding */ langspecLogicSigVersion),\n/* harmony export */   parseUvarint: () => (/* binding */ parseUvarint),\n/* harmony export */   readProgram: () => (/* binding */ readProgram)\n/* harmony export */ });\n/* harmony import */ var _langspec_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langspec.json */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/langspec.json\");\n/* eslint-disable no-bitwise */ /**\n * Utilities for working with program bytes.\n */ /** @deprecated langspec.json is deprecated aross all SDKs */ \n/** @deprecated for langspec.json is deprecated aross all SDKs */ let opcodes;\n/** @deprecated for langspec.json is deprecated aross all SDKs */ const maxCost = 20000;\n/** @deprecated for langspec.json is deprecated aross all SDKs */ const maxLength = 1000;\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function parseUvarint(array) {\n    let x = 0;\n    let s = 0;\n    for(let i = 0; i < array.length; i++){\n        const b = array[i];\n        if (b < 0x80) {\n            if (i > 9 || i === 9 && b > 1) {\n                return [\n                    0,\n                    -(i + 1)\n                ];\n            }\n            return [\n                x | b << s,\n                i + 1\n            ];\n        }\n        x += (b & 0x7f) << s;\n        s += 7;\n    }\n    return [\n        0,\n        0\n    ];\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function readIntConstBlock(program, pc) {\n    let size = 1;\n    const parsed = parseUvarint(program.slice(pc + size));\n    const numInts = parsed[0];\n    let bytesUsed = parsed[1];\n    if (bytesUsed <= 0) {\n        throw new Error(`could not decode int const block size at pc=${pc + size}`);\n    }\n    const ints = [];\n    size += bytesUsed;\n    for(let i = 0; i < numInts; i++){\n        if (pc + size >= program.length) {\n            throw new Error(\"intcblock ran past end of program\");\n        }\n        let numberFound;\n        [numberFound, bytesUsed] = parseUvarint(program.slice(pc + size));\n        if (bytesUsed <= 0) {\n            throw new Error(`could not decode int const[${i}] block size at pc=${pc + size}`);\n        }\n        ints.push(numberFound);\n        size += bytesUsed;\n    }\n    return [\n        size,\n        ints\n    ];\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function readByteConstBlock(program, pc) {\n    let size = 1;\n    const parsed = parseUvarint(program.slice(pc + size));\n    const numInts = parsed[0];\n    let bytesUsed = parsed[1];\n    if (bytesUsed <= 0) {\n        throw new Error(`could not decode []byte const block size at pc=${pc + size}`);\n    }\n    const byteArrays = [];\n    size += bytesUsed;\n    for(let i = 0; i < numInts; i++){\n        if (pc + size >= program.length) {\n            throw new Error(\"bytecblock ran past end of program\");\n        }\n        let itemLen;\n        [itemLen, bytesUsed] = parseUvarint(program.slice(pc + size));\n        if (bytesUsed <= 0) {\n            throw new Error(`could not decode []byte] const[${i}] block size at pc=${pc + size}`);\n        }\n        size += bytesUsed;\n        if (pc + size + itemLen > program.length) {\n            throw new Error(\"bytecblock ran past end of program\");\n        }\n        const byteArray = program.slice(pc + size, pc + size + itemLen);\n        byteArrays.push(byteArray);\n        size += itemLen;\n    }\n    return [\n        size,\n        byteArrays\n    ];\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function readPushIntOp(program, pc) {\n    let size = 1;\n    const [numberFound, bytesUsed] = parseUvarint(program.slice(pc + size));\n    if (bytesUsed <= 0) {\n        throw new Error(`could not decode push int const at pc=${pc + size}`);\n    }\n    size += bytesUsed;\n    return [\n        size,\n        numberFound\n    ];\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function readPushByteOp(program, pc) {\n    let size = 1;\n    const [itemLen, bytesUsed] = parseUvarint(program.slice(pc + size));\n    if (bytesUsed <= 0) {\n        throw new Error(`could not decode push []byte const size at pc=${pc + size}`);\n    }\n    size += bytesUsed;\n    if (pc + size + itemLen > program.length) {\n        throw new Error(\"pushbytes ran past end of program\");\n    }\n    const byteArray = program.slice(pc + size, pc + size + itemLen);\n    size += itemLen;\n    return [\n        size,\n        byteArray\n    ];\n}\n/** readProgram validates program for length and running cost,\n * and additionally provides the found int variables and byte blocks\n *\n * @deprecated Validation relies on metadata (`langspec.json`) that\n * does not accurately represent opcode behavior across program versions.\n * The behavior of `readProgram` relies on `langspec.json`.\n * Thus, this method is being deprecated.\n *\n * @param program - Program to check\n * @param args - Program arguments as array of Uint8Array arrays\n * @throws\n * @returns\n */ function readProgram(program, args) {\n    const intcblockOpcode = 32;\n    const bytecblockOpcode = 38;\n    const pushbytesOpcode = 128;\n    const pushintOpcode = 129;\n    if (!program) {\n        throw new Error(\"empty program\");\n    }\n    if (typeof args === \"undefined\") {\n        // eslint-disable-next-line no-param-reassign\n        args = [];\n    }\n    if (!Array.isArray(args)) {\n        throw new Error(\"invalid arguments\");\n    }\n    const [version, vlen] = parseUvarint(program);\n    if (vlen <= 0) {\n        throw new Error(\"version parsing error\");\n    }\n    if (version > _langspec_json__WEBPACK_IMPORTED_MODULE_0__.EvalMaxVersion) {\n        throw new Error(\"unsupported version\");\n    }\n    let cost = 0;\n    let { length } = program;\n    for (const arg of args){\n        length += arg.length;\n    }\n    if (length > maxLength) {\n        throw new Error(\"program too long\");\n    }\n    if (!opcodes) {\n        opcodes = {};\n        for (const op of _langspec_json__WEBPACK_IMPORTED_MODULE_0__.Ops){\n            opcodes[op.Opcode] = op;\n        }\n    }\n    let pc = vlen;\n    let ints = [];\n    let byteArrays = [];\n    while(pc < program.length){\n        const op = opcodes[program[pc]];\n        if (op === undefined) {\n            throw new Error(\"invalid instruction\");\n        }\n        cost += op.Cost;\n        let size = op.Size;\n        if (size === 0) {\n            switch(op.Opcode){\n                case intcblockOpcode:\n                    {\n                        let foundInts;\n                        [size, foundInts] = readIntConstBlock(program, pc);\n                        ints = ints.concat(foundInts);\n                        break;\n                    }\n                case bytecblockOpcode:\n                    {\n                        let foundByteArrays;\n                        [size, foundByteArrays] = readByteConstBlock(program, pc);\n                        byteArrays = byteArrays.concat(foundByteArrays);\n                        break;\n                    }\n                case pushintOpcode:\n                    {\n                        let foundInt;\n                        [size, foundInt] = readPushIntOp(program, pc);\n                        ints.push(foundInt);\n                        break;\n                    }\n                case pushbytesOpcode:\n                    {\n                        let foundByteArray;\n                        [size, foundByteArray] = readPushByteOp(program, pc);\n                        byteArrays.push(foundByteArray);\n                        break;\n                    }\n                default:\n                    {\n                        throw new Error(\"invalid instruction\");\n                    }\n            }\n        }\n        pc += size;\n    }\n    // costs calculated dynamically starting in v4\n    if (version < 4 && cost > maxCost) {\n        throw new Error(\"program too costly for version < 4. consider using v4.\");\n    }\n    return [\n        ints,\n        byteArrays,\n        true\n    ];\n}\n/**\n * checkProgram validates program for length and running cost\n *\n * @deprecated Validation relies on metadata (`langspec.json`) that\n * does not accurately represent opcode behavior across program versions.\n * The behavior of `checkProgram` relies on `langspec.json`.\n * Thus, this method is being deprecated.\n *\n * @param program - Program to check\n * @param args - Program arguments as array of Uint8Array arrays\n * @throws\n * @returns true if success\n */ function checkProgram(program, args) {\n    const [, , success] = readProgram(program, args);\n    return success;\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function checkIntConstBlock(program, pc) {\n    const [size] = readIntConstBlock(program, pc);\n    return size;\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function checkByteConstBlock(program, pc) {\n    const [size] = readByteConstBlock(program, pc);\n    return size;\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function checkPushIntOp(program, pc) {\n    const [size] = readPushIntOp(program, pc);\n    return size;\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ function checkPushByteOp(program, pc) {\n    const [size] = readPushByteOp(program, pc);\n    return size;\n}\n/** @deprecated for langspec.json is deprecated aross all SDKs */ const langspecEvalMaxVersion = _langspec_json__WEBPACK_IMPORTED_MODULE_0__.EvalMaxVersion;\n/** @deprecated for langspec.json is deprecated aross all SDKs */ const langspecLogicSigVersion = _langspec_json__WEBPACK_IMPORTED_MODULE_0__.LogicSigVersion; //# sourceMappingURL=logic.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbG9naWMvbG9naWMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUE2QixHQUM3Qjs7Q0FFQyxHQUNELDJEQUEyRCxHQUNwQjtBQUN2QywrREFBK0QsR0FDL0QsSUFBSUM7QUFDSiwrREFBK0QsR0FDL0QsTUFBTUMsVUFBVTtBQUNoQiwrREFBK0QsR0FDL0QsTUFBTUMsWUFBWTtBQUNsQiwrREFBK0QsR0FDeEQsU0FBU0MsYUFBYUMsS0FBSztJQUM5QixJQUFJQyxJQUFJO0lBQ1IsSUFBSUMsSUFBSTtJQUNSLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxNQUFNSSxNQUFNLEVBQUVELElBQUs7UUFDbkMsTUFBTUUsSUFBSUwsS0FBSyxDQUFDRyxFQUFFO1FBQ2xCLElBQUlFLElBQUksTUFBTTtZQUNWLElBQUlGLElBQUksS0FBTUEsTUFBTSxLQUFLRSxJQUFJLEdBQUk7Z0JBQzdCLE9BQU87b0JBQUM7b0JBQUcsQ0FBRUYsQ0FBQUEsSUFBSTtpQkFBRztZQUN4QjtZQUNBLE9BQU87Z0JBQUNGLElBQUtJLEtBQUtIO2dCQUFJQyxJQUFJO2FBQUU7UUFDaEM7UUFDQUYsS0FBSyxDQUFDSSxJQUFJLElBQUcsS0FBTUg7UUFDbkJBLEtBQUs7SUFDVDtJQUNBLE9BQU87UUFBQztRQUFHO0tBQUU7QUFDakI7QUFDQSwrREFBK0QsR0FDL0QsU0FBU0ksa0JBQWtCQyxPQUFPLEVBQUVDLEVBQUU7SUFDbEMsSUFBSUMsT0FBTztJQUNYLE1BQU1DLFNBQVNYLGFBQWFRLFFBQVFJLEtBQUssQ0FBQ0gsS0FBS0M7SUFDL0MsTUFBTUcsVUFBVUYsTUFBTSxDQUFDLEVBQUU7SUFDekIsSUFBSUcsWUFBWUgsTUFBTSxDQUFDLEVBQUU7SUFDekIsSUFBSUcsYUFBYSxHQUFHO1FBQ2hCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLDRDQUE0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Q0FZQyxHQUNNLFNBQVM2QixhQUFhekMsT0FBTyxFQUFFa0IsSUFBSTtJQUN0QyxNQUFNLEtBQUt3QixRQUFRLEdBQUd6QixZQUFZakIsU0FBU2tCO0lBQzNDLE9BQU93QjtBQUNYO0FBQ0EsK0RBQStELEdBQ3hELFNBQVNDLG1CQUFtQjNDLE9BQU8sRUFBRUMsRUFBRTtJQUMxQyxNQUFNLENBQUNDLEtBQUssR0FBR0gsa0JBQWtCQyxTQUFTQztJQUMxQyxPQUFPQztBQUNYO0FBQ0EsK0RBQStELEdBQ3hELFNBQVMwQyxvQkFBb0I1QyxPQUFPLEVBQUVDLEVBQUU7SUFDM0MsTUFBTSxDQUFDQyxLQUFLLEdBQUdTLG1CQUFtQlgsU0FBU0M7SUFDM0MsT0FBT0M7QUFDWDtBQUNBLCtEQUErRCxHQUN4RCxTQUFTMkMsZUFBZTdDLE9BQU8sRUFBRUMsRUFBRTtJQUN0QyxNQUFNLENBQUNDLEtBQUssR0FBR2EsY0FBY2YsU0FBU0M7SUFDdEMsT0FBT0M7QUFDWDtBQUNBLCtEQUErRCxHQUN4RCxTQUFTNEMsZ0JBQWdCOUMsT0FBTyxFQUFFQyxFQUFFO0lBQ3ZDLE1BQU0sQ0FBQ0MsS0FBSyxHQUFHYyxlQUFlaEIsU0FBU0M7SUFDdkMsT0FBT0M7QUFDWDtBQUNBLCtEQUErRCxHQUN4RCxNQUFNNkMseUJBQXlCM0QsMERBQXVCLENBQUM7QUFDOUQsK0RBQStELEdBQ3hELE1BQU00RCwwQkFBMEI1RCwyREFBd0IsQ0FBQyxDQUNoRSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2xvZ2ljL2xvZ2ljLmpzP2UzYjciXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIHdvcmtpbmcgd2l0aCBwcm9ncmFtIGJ5dGVzLlxuICovXG4vKiogQGRlcHJlY2F0ZWQgbGFuZ3NwZWMuanNvbiBpcyBkZXByZWNhdGVkIGFyb3NzIGFsbCBTREtzICovXG5pbXBvcnQgbGFuZ3NwZWMgZnJvbSAnLi9sYW5nc3BlYy5qc29uJztcbi8qKiBAZGVwcmVjYXRlZCBmb3IgbGFuZ3NwZWMuanNvbiBpcyBkZXByZWNhdGVkIGFyb3NzIGFsbCBTREtzICovXG5sZXQgb3Bjb2Rlcztcbi8qKiBAZGVwcmVjYXRlZCBmb3IgbGFuZ3NwZWMuanNvbiBpcyBkZXByZWNhdGVkIGFyb3NzIGFsbCBTREtzICovXG5jb25zdCBtYXhDb3N0ID0gMjAwMDA7XG4vKiogQGRlcHJlY2F0ZWQgZm9yIGxhbmdzcGVjLmpzb24gaXMgZGVwcmVjYXRlZCBhcm9zcyBhbGwgU0RLcyAqL1xuY29uc3QgbWF4TGVuZ3RoID0gMTAwMDtcbi8qKiBAZGVwcmVjYXRlZCBmb3IgbGFuZ3NwZWMuanNvbiBpcyBkZXByZWNhdGVkIGFyb3NzIGFsbCBTREtzICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVdmFyaW50KGFycmF5KSB7XG4gICAgbGV0IHggPSAwO1xuICAgIGxldCBzID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGIgPSBhcnJheVtpXTtcbiAgICAgICAgaWYgKGIgPCAweDgwKSB7XG4gICAgICAgICAgICBpZiAoaSA+IDkgfHwgKGkgPT09IDkgJiYgYiA+IDEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLCAtKGkgKyAxKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW3ggfCAoYiA8PCBzKSwgaSArIDFdO1xuICAgICAgICB9XG4gICAgICAgIHggKz0gKGIgJiAweDdmKSA8PCBzO1xuICAgICAgICBzICs9IDc7XG4gICAgfVxuICAgIHJldHVybiBbMCwgMF07XG59XG4vKiogQGRlcHJlY2F0ZWQgZm9yIGxhbmdzcGVjLmpzb24gaXMgZGVwcmVjYXRlZCBhcm9zcyBhbGwgU0RLcyAqL1xuZnVuY3Rpb24gcmVhZEludENvbnN0QmxvY2socHJvZ3JhbSwgcGMpIHtcbiAgICBsZXQgc2l6ZSA9IDE7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VVdmFyaW50KHByb2dyYW0uc2xpY2UocGMgKyBzaXplKSk7XG4gICAgY29uc3QgbnVtSW50cyA9IHBhcnNlZFswXTtcbiAgICBsZXQgYnl0ZXNVc2VkID0gcGFyc2VkWzFdO1xuICAgIGlmIChieXRlc1VzZWQgPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvdWxkIG5vdCBkZWNvZGUgaW50IGNvbnN0IGJsb2NrIHNpemUgYXQgcGM9JHtwYyArIHNpemV9YCk7XG4gICAgfVxuICAgIGNvbnN0IGludHMgPSBbXTtcbiAgICBzaXplICs9IGJ5dGVzVXNlZDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUludHM7IGkrKykge1xuICAgICAgICBpZiAocGMgKyBzaXplID49IHByb2dyYW0ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludGNibG9jayByYW4gcGFzdCBlbmQgb2YgcHJvZ3JhbScpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBudW1iZXJGb3VuZDtcbiAgICAgICAgW251bWJlckZvdW5kLCBieXRlc1VzZWRdID0gcGFyc2VVdmFyaW50KHByb2dyYW0uc2xpY2UocGMgKyBzaXplKSk7XG4gICAgICAgIGlmIChieXRlc1VzZWQgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb3VsZCBub3QgZGVjb2RlIGludCBjb25zdFske2l9XSBibG9jayBzaXplIGF0IHBjPSR7cGMgKyBzaXplfWApO1xuICAgICAgICB9XG4gICAgICAgIGludHMucHVzaChudW1iZXJGb3VuZCk7XG4gICAgICAgIHNpemUgKz0gYnl0ZXNVc2VkO1xuICAgIH1cbiAgICByZXR1cm4gW3NpemUsIGludHNdO1xufVxuLyoqIEBkZXByZWNhdGVkIGZvciBsYW5nc3BlYy5qc29uIGlzIGRlcHJlY2F0ZWQgYXJvc3MgYWxsIFNES3MgKi9cbmZ1bmN0aW9uIHJlYWRCeXRlQ29uc3RCbG9jayhwcm9ncmFtLCBwYykge1xuICAgIGxldCBzaXplID0gMTtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZVV2YXJpbnQocHJvZ3JhbS5zbGljZShwYyArIHNpemUpKTtcbiAgICBjb25zdCBudW1JbnRzID0gcGFyc2VkWzBdO1xuICAgIGxldCBieXRlc1VzZWQgPSBwYXJzZWRbMV07XG4gICAgaWYgKGJ5dGVzVXNlZCA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY291bGQgbm90IGRlY29kZSBbXWJ5dGUgY29uc3QgYmxvY2sgc2l6ZSBhdCBwYz0ke3BjICsgc2l6ZX1gKTtcbiAgICB9XG4gICAgY29uc3QgYnl0ZUFycmF5cyA9IFtdO1xuICAgIHNpemUgKz0gYnl0ZXNVc2VkO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtSW50czsgaSsrKSB7XG4gICAgICAgIGlmIChwYyArIHNpemUgPj0gcHJvZ3JhbS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYnl0ZWNibG9jayByYW4gcGFzdCBlbmQgb2YgcHJvZ3JhbScpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpdGVtTGVuO1xuICAgICAgICBbaXRlbUxlbiwgYnl0ZXNVc2VkXSA9IHBhcnNlVXZhcmludChwcm9ncmFtLnNsaWNlKHBjICsgc2l6ZSkpO1xuICAgICAgICBpZiAoYnl0ZXNVc2VkIDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY291bGQgbm90IGRlY29kZSBbXWJ5dGVdIGNvbnN0WyR7aX1dIGJsb2NrIHNpemUgYXQgcGM9JHtwYyArIHNpemV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgc2l6ZSArPSBieXRlc1VzZWQ7XG4gICAgICAgIGlmIChwYyArIHNpemUgKyBpdGVtTGVuID4gcHJvZ3JhbS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYnl0ZWNibG9jayByYW4gcGFzdCBlbmQgb2YgcHJvZ3JhbScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVBcnJheSA9IHByb2dyYW0uc2xpY2UocGMgKyBzaXplLCBwYyArIHNpemUgKyBpdGVtTGVuKTtcbiAgICAgICAgYnl0ZUFycmF5cy5wdXNoKGJ5dGVBcnJheSk7XG4gICAgICAgIHNpemUgKz0gaXRlbUxlbjtcbiAgICB9XG4gICAgcmV0dXJuIFtzaXplLCBieXRlQXJyYXlzXTtcbn1cbi8qKiBAZGVwcmVjYXRlZCBmb3IgbGFuZ3NwZWMuanNvbiBpcyBkZXByZWNhdGVkIGFyb3NzIGFsbCBTREtzICovXG5mdW5jdGlvbiByZWFkUHVzaEludE9wKHByb2dyYW0sIHBjKSB7XG4gICAgbGV0IHNpemUgPSAxO1xuICAgIGNvbnN0IFtudW1iZXJGb3VuZCwgYnl0ZXNVc2VkXSA9IHBhcnNlVXZhcmludChwcm9ncmFtLnNsaWNlKHBjICsgc2l6ZSkpO1xuICAgIGlmIChieXRlc1VzZWQgPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvdWxkIG5vdCBkZWNvZGUgcHVzaCBpbnQgY29uc3QgYXQgcGM9JHtwYyArIHNpemV9YCk7XG4gICAgfVxuICAgIHNpemUgKz0gYnl0ZXNVc2VkO1xuICAgIHJldHVybiBbc2l6ZSwgbnVtYmVyRm91bmRdO1xufVxuLyoqIEBkZXByZWNhdGVkIGZvciBsYW5nc3BlYy5qc29uIGlzIGRlcHJlY2F0ZWQgYXJvc3MgYWxsIFNES3MgKi9cbmZ1bmN0aW9uIHJlYWRQdXNoQnl0ZU9wKHByb2dyYW0sIHBjKSB7XG4gICAgbGV0IHNpemUgPSAxO1xuICAgIGNvbnN0IFtpdGVtTGVuLCBieXRlc1VzZWRdID0gcGFyc2VVdmFyaW50KHByb2dyYW0uc2xpY2UocGMgKyBzaXplKSk7XG4gICAgaWYgKGJ5dGVzVXNlZCA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY291bGQgbm90IGRlY29kZSBwdXNoIFtdYnl0ZSBjb25zdCBzaXplIGF0IHBjPSR7cGMgKyBzaXplfWApO1xuICAgIH1cbiAgICBzaXplICs9IGJ5dGVzVXNlZDtcbiAgICBpZiAocGMgKyBzaXplICsgaXRlbUxlbiA+IHByb2dyYW0ubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHVzaGJ5dGVzIHJhbiBwYXN0IGVuZCBvZiBwcm9ncmFtJyk7XG4gICAgfVxuICAgIGNvbnN0IGJ5dGVBcnJheSA9IHByb2dyYW0uc2xpY2UocGMgKyBzaXplLCBwYyArIHNpemUgKyBpdGVtTGVuKTtcbiAgICBzaXplICs9IGl0ZW1MZW47XG4gICAgcmV0dXJuIFtzaXplLCBieXRlQXJyYXldO1xufVxuLyoqIHJlYWRQcm9ncmFtIHZhbGlkYXRlcyBwcm9ncmFtIGZvciBsZW5ndGggYW5kIHJ1bm5pbmcgY29zdCxcbiAqIGFuZCBhZGRpdGlvbmFsbHkgcHJvdmlkZXMgdGhlIGZvdW5kIGludCB2YXJpYWJsZXMgYW5kIGJ5dGUgYmxvY2tzXG4gKlxuICogQGRlcHJlY2F0ZWQgVmFsaWRhdGlvbiByZWxpZXMgb24gbWV0YWRhdGEgKGBsYW5nc3BlYy5qc29uYCkgdGhhdFxuICogZG9lcyBub3QgYWNjdXJhdGVseSByZXByZXNlbnQgb3Bjb2RlIGJlaGF2aW9yIGFjcm9zcyBwcm9ncmFtIHZlcnNpb25zLlxuICogVGhlIGJlaGF2aW9yIG9mIGByZWFkUHJvZ3JhbWAgcmVsaWVzIG9uIGBsYW5nc3BlYy5qc29uYC5cbiAqIFRodXMsIHRoaXMgbWV0aG9kIGlzIGJlaW5nIGRlcHJlY2F0ZWQuXG4gKlxuICogQHBhcmFtIHByb2dyYW0gLSBQcm9ncmFtIHRvIGNoZWNrXG4gKiBAcGFyYW0gYXJncyAtIFByb2dyYW0gYXJndW1lbnRzIGFzIGFycmF5IG9mIFVpbnQ4QXJyYXkgYXJyYXlzXG4gKiBAdGhyb3dzXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZFByb2dyYW0ocHJvZ3JhbSwgYXJncykge1xuICAgIGNvbnN0IGludGNibG9ja09wY29kZSA9IDMyO1xuICAgIGNvbnN0IGJ5dGVjYmxvY2tPcGNvZGUgPSAzODtcbiAgICBjb25zdCBwdXNoYnl0ZXNPcGNvZGUgPSAxMjg7XG4gICAgY29uc3QgcHVzaGludE9wY29kZSA9IDEyOTtcbiAgICBpZiAoIXByb2dyYW0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlbXB0eSBwcm9ncmFtJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJncyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGFyZ3MgPSBbXTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFyZ3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhcmd1bWVudHMnKTtcbiAgICB9XG4gICAgY29uc3QgW3ZlcnNpb24sIHZsZW5dID0gcGFyc2VVdmFyaW50KHByb2dyYW0pO1xuICAgIGlmICh2bGVuIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZXJzaW9uIHBhcnNpbmcgZXJyb3InKTtcbiAgICB9XG4gICAgaWYgKHZlcnNpb24gPiBsYW5nc3BlYy5FdmFsTWF4VmVyc2lvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIHZlcnNpb24nKTtcbiAgICB9XG4gICAgbGV0IGNvc3QgPSAwO1xuICAgIGxldCB7IGxlbmd0aCB9ID0gcHJvZ3JhbTtcbiAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgICAgIGxlbmd0aCArPSBhcmcubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvZ3JhbSB0b28gbG9uZycpO1xuICAgIH1cbiAgICBpZiAoIW9wY29kZXMpIHtcbiAgICAgICAgb3Bjb2RlcyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IG9wIG9mIGxhbmdzcGVjLk9wcykge1xuICAgICAgICAgICAgb3Bjb2Rlc1tvcC5PcGNvZGVdID0gb3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHBjID0gdmxlbjtcbiAgICBsZXQgaW50cyA9IFtdO1xuICAgIGxldCBieXRlQXJyYXlzID0gW107XG4gICAgd2hpbGUgKHBjIDwgcHJvZ3JhbS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qgb3AgPSBvcGNvZGVzW3Byb2dyYW1bcGNdXTtcbiAgICAgICAgaWYgKG9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbnN0cnVjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvc3QgKz0gb3AuQ29zdDtcbiAgICAgICAgbGV0IHNpemUgPSBvcC5TaXplO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgc3dpdGNoIChvcC5PcGNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIGludGNibG9ja09wY29kZToge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm91bmRJbnRzO1xuICAgICAgICAgICAgICAgICAgICBbc2l6ZSwgZm91bmRJbnRzXSA9IHJlYWRJbnRDb25zdEJsb2NrKHByb2dyYW0sIHBjKTtcbiAgICAgICAgICAgICAgICAgICAgaW50cyA9IGludHMuY29uY2F0KGZvdW5kSW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIGJ5dGVjYmxvY2tPcGNvZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kQnl0ZUFycmF5cztcbiAgICAgICAgICAgICAgICAgICAgW3NpemUsIGZvdW5kQnl0ZUFycmF5c10gPSByZWFkQnl0ZUNvbnN0QmxvY2socHJvZ3JhbSwgcGMpO1xuICAgICAgICAgICAgICAgICAgICBieXRlQXJyYXlzID0gYnl0ZUFycmF5cy5jb25jYXQoZm91bmRCeXRlQXJyYXlzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgcHVzaGludE9wY29kZToge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm91bmRJbnQ7XG4gICAgICAgICAgICAgICAgICAgIFtzaXplLCBmb3VuZEludF0gPSByZWFkUHVzaEludE9wKHByb2dyYW0sIHBjKTtcbiAgICAgICAgICAgICAgICAgICAgaW50cy5wdXNoKGZvdW5kSW50KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgcHVzaGJ5dGVzT3Bjb2RlOiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3VuZEJ5dGVBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgW3NpemUsIGZvdW5kQnl0ZUFycmF5XSA9IHJlYWRQdXNoQnl0ZU9wKHByb2dyYW0sIHBjKTtcbiAgICAgICAgICAgICAgICAgICAgYnl0ZUFycmF5cy5wdXNoKGZvdW5kQnl0ZUFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGluc3RydWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBjICs9IHNpemU7XG4gICAgfVxuICAgIC8vIGNvc3RzIGNhbGN1bGF0ZWQgZHluYW1pY2FsbHkgc3RhcnRpbmcgaW4gdjRcbiAgICBpZiAodmVyc2lvbiA8IDQgJiYgY29zdCA+IG1heENvc3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9ncmFtIHRvbyBjb3N0bHkgZm9yIHZlcnNpb24gPCA0LiBjb25zaWRlciB1c2luZyB2NC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIFtpbnRzLCBieXRlQXJyYXlzLCB0cnVlXTtcbn1cbi8qKlxuICogY2hlY2tQcm9ncmFtIHZhbGlkYXRlcyBwcm9ncmFtIGZvciBsZW5ndGggYW5kIHJ1bm5pbmcgY29zdFxuICpcbiAqIEBkZXByZWNhdGVkIFZhbGlkYXRpb24gcmVsaWVzIG9uIG1ldGFkYXRhIChgbGFuZ3NwZWMuanNvbmApIHRoYXRcbiAqIGRvZXMgbm90IGFjY3VyYXRlbHkgcmVwcmVzZW50IG9wY29kZSBiZWhhdmlvciBhY3Jvc3MgcHJvZ3JhbSB2ZXJzaW9ucy5cbiAqIFRoZSBiZWhhdmlvciBvZiBgY2hlY2tQcm9ncmFtYCByZWxpZXMgb24gYGxhbmdzcGVjLmpzb25gLlxuICogVGh1cywgdGhpcyBtZXRob2QgaXMgYmVpbmcgZGVwcmVjYXRlZC5cbiAqXG4gKiBAcGFyYW0gcHJvZ3JhbSAtIFByb2dyYW0gdG8gY2hlY2tcbiAqIEBwYXJhbSBhcmdzIC0gUHJvZ3JhbSBhcmd1bWVudHMgYXMgYXJyYXkgb2YgVWludDhBcnJheSBhcnJheXNcbiAqIEB0aHJvd3NcbiAqIEByZXR1cm5zIHRydWUgaWYgc3VjY2Vzc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQcm9ncmFtKHByb2dyYW0sIGFyZ3MpIHtcbiAgICBjb25zdCBbLCAsIHN1Y2Nlc3NdID0gcmVhZFByb2dyYW0ocHJvZ3JhbSwgYXJncyk7XG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG59XG4vKiogQGRlcHJlY2F0ZWQgZm9yIGxhbmdzcGVjLmpzb24gaXMgZGVwcmVjYXRlZCBhcm9zcyBhbGwgU0RLcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSW50Q29uc3RCbG9jayhwcm9ncmFtLCBwYykge1xuICAgIGNvbnN0IFtzaXplXSA9IHJlYWRJbnRDb25zdEJsb2NrKHByb2dyYW0sIHBjKTtcbiAgICByZXR1cm4gc2l6ZTtcbn1cbi8qKiBAZGVwcmVjYXRlZCBmb3IgbGFuZ3NwZWMuanNvbiBpcyBkZXByZWNhdGVkIGFyb3NzIGFsbCBTREtzICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tCeXRlQ29uc3RCbG9jayhwcm9ncmFtLCBwYykge1xuICAgIGNvbnN0IFtzaXplXSA9IHJlYWRCeXRlQ29uc3RCbG9jayhwcm9ncmFtLCBwYyk7XG4gICAgcmV0dXJuIHNpemU7XG59XG4vKiogQGRlcHJlY2F0ZWQgZm9yIGxhbmdzcGVjLmpzb24gaXMgZGVwcmVjYXRlZCBhcm9zcyBhbGwgU0RLcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUHVzaEludE9wKHByb2dyYW0sIHBjKSB7XG4gICAgY29uc3QgW3NpemVdID0gcmVhZFB1c2hJbnRPcChwcm9ncmFtLCBwYyk7XG4gICAgcmV0dXJuIHNpemU7XG59XG4vKiogQGRlcHJlY2F0ZWQgZm9yIGxhbmdzcGVjLmpzb24gaXMgZGVwcmVjYXRlZCBhcm9zcyBhbGwgU0RLcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUHVzaEJ5dGVPcChwcm9ncmFtLCBwYykge1xuICAgIGNvbnN0IFtzaXplXSA9IHJlYWRQdXNoQnl0ZU9wKHByb2dyYW0sIHBjKTtcbiAgICByZXR1cm4gc2l6ZTtcbn1cbi8qKiBAZGVwcmVjYXRlZCBmb3IgbGFuZ3NwZWMuanNvbiBpcyBkZXByZWNhdGVkIGFyb3NzIGFsbCBTREtzICovXG5leHBvcnQgY29uc3QgbGFuZ3NwZWNFdmFsTWF4VmVyc2lvbiA9IGxhbmdzcGVjLkV2YWxNYXhWZXJzaW9uO1xuLyoqIEBkZXByZWNhdGVkIGZvciBsYW5nc3BlYy5qc29uIGlzIGRlcHJlY2F0ZWQgYXJvc3MgYWxsIFNES3MgKi9cbmV4cG9ydCBjb25zdCBsYW5nc3BlY0xvZ2ljU2lnVmVyc2lvbiA9IGxhbmdzcGVjLkxvZ2ljU2lnVmVyc2lvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2ljLmpzLm1hcCJdLCJuYW1lcyI6WyJsYW5nc3BlYyIsIm9wY29kZXMiLCJtYXhDb3N0IiwibWF4TGVuZ3RoIiwicGFyc2VVdmFyaW50IiwiYXJyYXkiLCJ4IiwicyIsImkiLCJsZW5ndGgiLCJiIiwicmVhZEludENvbnN0QmxvY2siLCJwcm9ncmFtIiwicGMiLCJzaXplIiwicGFyc2VkIiwic2xpY2UiLCJudW1JbnRzIiwiYnl0ZXNVc2VkIiwiRXJyb3IiLCJpbnRzIiwibnVtYmVyRm91bmQiLCJwdXNoIiwicmVhZEJ5dGVDb25zdEJsb2NrIiwiYnl0ZUFycmF5cyIsIml0ZW1MZW4iLCJieXRlQXJyYXkiLCJyZWFkUHVzaEludE9wIiwicmVhZFB1c2hCeXRlT3AiLCJyZWFkUHJvZ3JhbSIsImFyZ3MiLCJpbnRjYmxvY2tPcGNvZGUiLCJieXRlY2Jsb2NrT3Bjb2RlIiwicHVzaGJ5dGVzT3Bjb2RlIiwicHVzaGludE9wY29kZSIsIkFycmF5IiwiaXNBcnJheSIsInZlcnNpb24iLCJ2bGVuIiwiRXZhbE1heFZlcnNpb24iLCJjb3N0IiwiYXJnIiwib3AiLCJPcHMiLCJPcGNvZGUiLCJ1bmRlZmluZWQiLCJDb3N0IiwiU2l6ZSIsImZvdW5kSW50cyIsImNvbmNhdCIsImZvdW5kQnl0ZUFycmF5cyIsImZvdW5kSW50IiwiZm91bmRCeXRlQXJyYXkiLCJjaGVja1Byb2dyYW0iLCJzdWNjZXNzIiwiY2hlY2tJbnRDb25zdEJsb2NrIiwiY2hlY2tCeXRlQ29uc3RCbG9jayIsImNoZWNrUHVzaEludE9wIiwiY2hlY2tQdXNoQnl0ZU9wIiwibGFuZ3NwZWNFdmFsTWF4VmVyc2lvbiIsImxhbmdzcGVjTG9naWNTaWdWZXJzaW9uIiwiTG9naWNTaWdWZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/logic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/sourcemap.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/sourcemap.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SourceMap: () => (/* binding */ SourceMap)\n/* harmony export */ });\n/* harmony import */ var vlq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vlq */ \"(ssr)/./node_modules/.pnpm/vlq@2.0.4/node_modules/vlq/src/index.js\");\n\nclass SourceMap {\n    constructor({ version, sources, names, mappings }){\n        this.version = version;\n        this.sources = sources;\n        this.names = names;\n        this.mappings = mappings;\n        if (this.version !== 3) throw new Error(`Only version 3 is supported, got ${this.version}`);\n        if (this.mappings === undefined) throw new Error(\"mapping undefined, cannot build source map without `mapping`\");\n        const pcList = this.mappings.split(\";\").map((m)=>{\n            const decoded = vlq__WEBPACK_IMPORTED_MODULE_0__.decode(m);\n            if (decoded.length > 2) return decoded[2];\n            return undefined;\n        });\n        this.pcToLine = {};\n        this.lineToPc = {};\n        let lastLine = 0;\n        for (const [pc, lineDelta] of pcList.entries()){\n            // If the delta is not undefined, the lastLine should be updated with\n            // lastLine + the delta\n            if (lineDelta !== undefined) {\n                lastLine += lineDelta;\n            }\n            if (!(lastLine in this.lineToPc)) this.lineToPc[lastLine] = [];\n            this.lineToPc[lastLine].push(pc);\n            this.pcToLine[pc] = lastLine;\n        }\n    }\n    getLineForPc(pc) {\n        return this.pcToLine[pc];\n    }\n    getPcsForLine(line) {\n        return this.lineToPc[line];\n    }\n} //# sourceMappingURL=sourcemap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbG9naWMvc291cmNlbWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJCO0FBQ3BCLE1BQU1DO0lBQ1RDLFlBQVksRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFHLENBQUU7UUFDaEQsSUFBSSxDQUFDSCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO1FBQ2hCLElBQUksSUFBSSxDQUFDSCxPQUFPLEtBQUssR0FDakIsTUFBTSxJQUFJSSxNQUFNLENBQUMsaUNBQWlDLEVBQUUsSUFBSSxDQUFDSixPQUFPLENBQUMsQ0FBQztRQUN0RSxJQUFJLElBQUksQ0FBQ0csUUFBUSxLQUFLRSxXQUNsQixNQUFNLElBQUlELE1BQU07UUFDcEIsTUFBTUUsU0FBUyxJQUFJLENBQUNILFFBQVEsQ0FBQ0ksS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQyxDQUFDQztZQUN6QyxNQUFNQyxVQUFVYix1Q0FBVSxDQUFDWTtZQUMzQixJQUFJQyxRQUFRRSxNQUFNLEdBQUcsR0FDakIsT0FBT0YsT0FBTyxDQUFDLEVBQUU7WUFDckIsT0FBT0w7UUFDWDtRQUNBLElBQUksQ0FBQ1EsUUFBUSxHQUFHLENBQUM7UUFDakIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBQztRQUNqQixJQUFJQyxXQUFXO1FBQ2YsS0FBSyxNQUFNLENBQUNDLElBQUlDLFVBQVUsSUFBSVgsT0FBT1ksT0FBTyxHQUFJO1lBQzVDLHFFQUFxRTtZQUNyRSx1QkFBdUI7WUFDdkIsSUFBSUQsY0FBY1osV0FBVztnQkFDekJVLFlBQVlFO1lBQ2hCO1lBQ0EsSUFBSSxDQUFFRixDQUFBQSxZQUFZLElBQUksQ0FBQ0QsUUFBUSxHQUMzQixJQUFJLENBQUNBLFFBQVEsQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDRCxRQUFRLENBQUNDLFNBQVMsQ0FBQ0ksSUFBSSxDQUFDSDtZQUM3QixJQUFJLENBQUNILFFBQVEsQ0FBQ0csR0FBRyxHQUFHRDtRQUN4QjtJQUNKO0lBQ0FLLGFBQWFKLEVBQUUsRUFBRTtRQUNiLE9BQU8sSUFBSSxDQUFDSCxRQUFRLENBQUNHLEdBQUc7SUFDNUI7SUFDQUssY0FBY0MsSUFBSSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDUixRQUFRLENBQUNRLEtBQUs7SUFDOUI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbG9naWMvc291cmNlbWFwLmpzP2Y0ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdmxxIGZyb20gJ3ZscSc7XG5leHBvcnQgY2xhc3MgU291cmNlTWFwIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHZlcnNpb24sIHNvdXJjZXMsIG5hbWVzLCBtYXBwaW5ncywgfSkge1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLnNvdXJjZXMgPSBzb3VyY2VzO1xuICAgICAgICB0aGlzLm5hbWVzID0gbmFtZXM7XG4gICAgICAgIHRoaXMubWFwcGluZ3MgPSBtYXBwaW5ncztcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gMylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT25seSB2ZXJzaW9uIDMgaXMgc3VwcG9ydGVkLCBnb3QgJHt0aGlzLnZlcnNpb259YCk7XG4gICAgICAgIGlmICh0aGlzLm1hcHBpbmdzID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcHBpbmcgdW5kZWZpbmVkLCBjYW5ub3QgYnVpbGQgc291cmNlIG1hcCB3aXRob3V0IGBtYXBwaW5nYCcpO1xuICAgICAgICBjb25zdCBwY0xpc3QgPSB0aGlzLm1hcHBpbmdzLnNwbGl0KCc7JykubWFwKChtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZWNvZGVkID0gdmxxLmRlY29kZShtKTtcbiAgICAgICAgICAgIGlmIChkZWNvZGVkLmxlbmd0aCA+IDIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZWRbMl07XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wY1RvTGluZSA9IHt9O1xuICAgICAgICB0aGlzLmxpbmVUb1BjID0ge307XG4gICAgICAgIGxldCBsYXN0TGluZSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgW3BjLCBsaW5lRGVsdGFdIG9mIHBjTGlzdC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBkZWx0YSBpcyBub3QgdW5kZWZpbmVkLCB0aGUgbGFzdExpbmUgc2hvdWxkIGJlIHVwZGF0ZWQgd2l0aFxuICAgICAgICAgICAgLy8gbGFzdExpbmUgKyB0aGUgZGVsdGFcbiAgICAgICAgICAgIGlmIChsaW5lRGVsdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxhc3RMaW5lICs9IGxpbmVEZWx0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGxhc3RMaW5lIGluIHRoaXMubGluZVRvUGMpKVxuICAgICAgICAgICAgICAgIHRoaXMubGluZVRvUGNbbGFzdExpbmVdID0gW107XG4gICAgICAgICAgICB0aGlzLmxpbmVUb1BjW2xhc3RMaW5lXS5wdXNoKHBjKTtcbiAgICAgICAgICAgIHRoaXMucGNUb0xpbmVbcGNdID0gbGFzdExpbmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TGluZUZvclBjKHBjKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBjVG9MaW5lW3BjXTtcbiAgICB9XG4gICAgZ2V0UGNzRm9yTGluZShsaW5lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVUb1BjW2xpbmVdO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvdXJjZW1hcC5qcy5tYXAiXSwibmFtZXMiOlsidmxxIiwiU291cmNlTWFwIiwiY29uc3RydWN0b3IiLCJ2ZXJzaW9uIiwic291cmNlcyIsIm5hbWVzIiwibWFwcGluZ3MiLCJFcnJvciIsInVuZGVmaW5lZCIsInBjTGlzdCIsInNwbGl0IiwibWFwIiwibSIsImRlY29kZWQiLCJkZWNvZGUiLCJsZW5ndGgiLCJwY1RvTGluZSIsImxpbmVUb1BjIiwibGFzdExpbmUiLCJwYyIsImxpbmVEZWx0YSIsImVudHJpZXMiLCJwdXNoIiwiZ2V0TGluZUZvclBjIiwiZ2V0UGNzRm9yTGluZSIsImxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/sourcemap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/dynamicfee.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/dynamicfee.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst address = __webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\nconst encoding = __webpack_require__(/*! ../encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\nconst group = __webpack_require__(/*! ../group */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/group.js\");\nconst logic = __webpack_require__(/*! ../logic/logic */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/logic.js\");\nconst logicSig = __webpack_require__(/*! ../logicsig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js\");\nconst nacl = __webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\nconst templates = __webpack_require__(/*! ./templates */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/templates.js\");\nconst transaction = __webpack_require__(/*! ../transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\nclass DynamicFee {\n    /**\n     * DynamicFee contract allows you to create a transaction without\n     * specifying the fee. The fee will be determined at the moment of\n     * transfer.\n     *\n     * @deprecated This feature will be removed in v2.\n     *\n     * Constructor Parameters:\n     * @param {string} receiver: address to receive the assets\n     * @param {int} amount: amount of assets to transfer\n     * @param {int} firstValid: first valid round for the transaction\n     * @param {int} lastValid:  last valid round for the transaction\n     * @param {string} closeRemainder: if you would like to close the account after the transfer, specify the address that would recieve the remainder, else leave undefined\n     * @param {string} lease: leave undefined to generate a random lease, or supply a lease as base64\n     * @returns {DynamicFee}\n     */ constructor(receiver, amount, firstValid, lastValid, closeRemainder, lease){\n        // don't need to validate receiver, closeremainderto - insert will handle that\n        if (!Number.isSafeInteger(amount) || amount < 0) throw Error(\"amount must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(firstValid) || firstValid < 0) throw Error(\"firstValid must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(lastValid) || lastValid < 0) throw Error(\"lastValid must be a positive number and smaller than 2^53-1\");\n        if (typeof closeRemainder === \"undefined\") {\n            // eslint-disable-next-line no-param-reassign\n            closeRemainder = address.ALGORAND_ZERO_ADDRESS_STRING;\n        }\n        if (typeof lease === \"undefined\") {\n            const leaseBytes = nacl.randomBytes(32);\n            // eslint-disable-next-line no-param-reassign\n            lease = Buffer.from(leaseBytes).toString(\"base64\");\n        }\n        const referenceProgramB64 = \"ASAFAgEHBgUmAyD+vKC7FEpaTqe0OKRoGsgObKEFvLYH/FZTJclWlfaiEyDmmpYeby1feshmB5JlUr6YI17TM2PKiJGLuck4qRW2+SB/g7Flf/H8U7ktwYFIodZd/C1LH6PWdyhK3dIAEm2QaTIEIhIzABAjEhAzAAcxABIQMwAIMQESEDEWIxIQMRAjEhAxBygSEDEJKRIQMQgkEhAxAiUSEDEEIQQSEDEGKhIQ\";\n        const referenceProgramBytes = Buffer.from(referenceProgramB64, \"base64\");\n        const referenceOffsets = [\n            5 /* firstValid */ ,\n            6 /* lastValid */ ,\n            7 /* receiver */ ,\n            11 /* closeRemainder */ ,\n            44 /* lease */ ,\n            76\n        ];\n        const injectionVector = [\n            amount,\n            firstValid,\n            lastValid,\n            receiver,\n            closeRemainder,\n            lease\n        ];\n        const injectionTypes = [\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.ADDRESS,\n            templates.valTypes.ADDRESS,\n            templates.valTypes.BASE64\n        ];\n        const injectedBytes = templates.inject(referenceProgramBytes, referenceOffsets, injectionVector, injectionTypes);\n        this.programBytes = injectedBytes;\n        const lsig = new logicSig.LogicSig(injectedBytes, undefined);\n        this.address = lsig.address();\n    }\n    /**\n     * returns the program bytes\n     * @returns {Uint8Array}\n     */ getProgram() {\n        return this.programBytes;\n    }\n    /**\n     * returns the string address of the contract\n     * @returns {string}\n     */ getAddress() {\n        return this.address;\n    }\n}\n/**\n * signDynamicFee returns the main transaction and signed logic needed to complete the transfer.\n * These should be sent to the fee payer, who can use GetDynamicFeeTransactions\n *\n * @deprecated This feature will be removed in v2.\n *\n * @param {Uint8Array} contract: the bytearray representing the contract\n * @param {Uint8Array} secretKey: the secret key for building the logic sig\n * @param {string} genesisHash: the genesisHash to use for the txn\n * @returns {Object} object containing json of txnbuilder constructor arguments under \"txn\" and signed logicsig under \"lsig\"\n */ function signDynamicFee(contract, secretKey, genesisHash) {\n    const programOutputs = logic.readProgram(contract, undefined);\n    const ints = programOutputs[0];\n    const byteArrays = programOutputs[1];\n    const keys = nacl.keyPairFromSecretKey(secretKey);\n    const from = address.encodeAddress(keys.publicKey);\n    const to = address.encodeAddress(byteArrays[0]);\n    const fee = 0;\n    const amount = ints[2];\n    const closeRemainderTo = address.encodeAddress(byteArrays[1]);\n    const firstRound = ints[3];\n    const lastRound = ints[4];\n    const lease = new Uint8Array(byteArrays[2]);\n    const txn = {\n        from,\n        to,\n        fee,\n        amount,\n        closeRemainderTo,\n        firstRound,\n        lastRound,\n        genesisHash,\n        type: \"pay\",\n        lease\n    };\n    const lsig = new logicSig.LogicSig(contract, undefined);\n    lsig.sign(secretKey);\n    return {\n        txn,\n        lsig\n    };\n}\n/**\n * getDynamicFeeTransactions creates and signs the secondary dynamic fee transaction, updates\n * transaction fields, and signs as the fee payer; it returns both\n * transactions as bytes suitable for sendRaw.\n *\n * @deprecated This feature will be removed in v2.\n *\n * Parameters:\n * @param {dict} txn - main transaction from payer's signDynamicFee output (a dict of constructor arguments, NOT a transaction.Transaction)\n * @param {LogicSig} lsig - the signed logic received from the payer's signDynamicFee output\n * @param {Uint8Array} privateKey - the private key for the account that pays the fee\n * @param {int} fee - fee per byte for both transactions\n *\n * @throws on invalid lsig\n */ /* eslint-disable no-param-reassign */ function getDynamicFeeTransactions(txn, lsig, privateKey, fee) {\n    if (!lsig.verify(address.decodeAddress(txn.from).publicKey)) {\n        throw new Error(\"invalid signature\");\n    }\n    txn.fee = fee;\n    if (txn.fee < transaction.ALGORAND_MIN_TX_FEE) {\n        txn.fee = transaction.ALGORAND_MIN_TX_FEE;\n    }\n    const keys = nacl.keyPairFromSecretKey(privateKey);\n    const from = address.encodeAddress(keys.publicKey);\n    // must remove lease and re-add using addLease so that fee calculation will match other SDKs\n    const { lease } = txn;\n    delete txn.lease;\n    const txnObj = new transaction.Transaction(txn);\n    txnObj.addLease(lease, fee);\n    const feePayTxn = {\n        from,\n        to: txn.from,\n        fee,\n        amount: txnObj.fee,\n        firstRound: txn.firstRound,\n        lastRound: txn.lastRound,\n        genesisHash: txn.genesisHash,\n        type: \"pay\"\n    };\n    const feePayTxnObj = new transaction.Transaction(feePayTxn);\n    feePayTxnObj.addLease(lease, fee);\n    const txnGroup = group.assignGroupID([\n        feePayTxnObj,\n        txnObj\n    ], undefined);\n    const feePayTxnWithGroup = txnGroup[0];\n    const txnObjWithGroup = txnGroup[1];\n    const lstx = {\n        lsig: lsig.get_obj_for_encoding(),\n        txn: txnObjWithGroup.get_obj_for_encoding()\n    };\n    const stx1 = feePayTxnWithGroup.signTxn(privateKey);\n    const stx2 = encoding.encode(lstx);\n    const concatStx = new Uint8Array(stx1.length + stx2.length);\n    concatStx.set(stx1);\n    concatStx.set(stx2, stx1.length);\n    return concatStx;\n}\n/* eslint-enable no-param-reassign */ module.exports = {\n    DynamicFee,\n    getDynamicFeeTransactions,\n    signDynamicFee\n}; //# sourceMappingURL=dynamicfee.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/dynamicfee.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/htlc.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/htlc.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst sha256 = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/.pnpm/js-sha256@0.9.0/node_modules/js-sha256/src/sha256.js\");\nconst { keccak256 } = __webpack_require__(/*! js-sha3 */ \"(ssr)/./node_modules/.pnpm/js-sha3@0.8.0/node_modules/js-sha3/src/sha3.js\");\nconst logic = __webpack_require__(/*! ../logic/logic */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/logic.js\");\nconst logicSig = __webpack_require__(/*! ../logicsig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js\");\nconst templates = __webpack_require__(/*! ./templates */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/templates.js\");\nconst transaction = __webpack_require__(/*! ../transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\nclass HTLC {\n    /**\n     * HTLC allows a user to receive the Algo prior to a deadline (in terms of a round) by proving a knowledge\n     * of a special value or to forfeit the ability to claim, returning it to the payer.\n     * This contract is usually used to perform cross-chained atomic swaps\n     *\n     * More formally -\n     * Algos can be transferred under only two circumstances:\n     * 1. To receiver if hash_function(arg_0) = hash_value\n     * 2. To owner if txn.FirstValid > expiry_round\n     * ...\n     *\n     * @deprecated This feature will be removed in v2.\n     *\n     *Parameters\n     *----------\n     * @param {string} owner: an address that can receive the asset after the expiry round\n     * @param {string} receiver: address to receive Algos\n     * @param {string} hashFunction: the hash function to be used (must be either sha256 or keccak256)\n     * @param {string} hashImage: the hash image in base64\n     * @param {int} expiryRound: the round on which the assets can be transferred back to owner\n     * @param {int} maxFee: the maximum fee that can be paid to the network by the account\n     * @returns {HTLC}\n     */ constructor(owner, receiver, hashFunction, hashImage, expiryRound, maxFee){\n        // don't need to validate owner, receiver - they'll be validated by template.insert\n        if (!Number.isSafeInteger(expiryRound) || expiryRound < 0) throw Error(\"expiryRound must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(maxFee) || maxFee < 0) throw Error(\"maxFee must be a positive number and smaller than 2^53-1\");\n        let referenceProgramB64 = \"\";\n        if (hashFunction === \"sha256\") {\n            referenceProgramB64 = \"ASAECAEACSYDIOaalh5vLV96yGYHkmVSvpgjXtMzY8qIkYu5yTipFbb5IH+DsWV/8fxTuS3BgUih1l38LUsfo9Z3KErd0gASbZBpIP68oLsUSlpOp7Q4pGgayA5soQW8tgf8VlMlyVaV9qITMQEiDjEQIxIQMQcyAxIQMQgkEhAxCSgSLQEpEhAxCSoSMQIlDRAREA==\";\n        } else if (hashFunction === \"keccak256\") {\n            referenceProgramB64 = \"ASAECAEACSYDIOaalh5vLV96yGYHkmVSvpgjXtMzY8qIkYu5yTipFbb5IH+DsWV/8fxTuS3BgUih1l38LUsfo9Z3KErd0gASbZBpIP68oLsUSlpOp7Q4pGgayA5soQW8tgf8VlMlyVaV9qITMQEiDjEQIxIQMQcyAxIQMQgkEhAxCSgSLQIpEhAxCSoSMQIlDRAREA==\";\n        } else {\n            throw Error(\"hash function unrecognized\");\n        }\n        // validate hashImage length\n        const hashImageBytes = Buffer.from(hashImage, \"base64\");\n        if (hashImageBytes.length !== 32) throw Error(\"hash image must be 32 bytes\");\n        const referenceProgramBytes = Buffer.from(referenceProgramB64, \"base64\");\n        const referenceOffsets = [\n            3 /* expiryRound */ ,\n            6 /* receiver */ ,\n            10 /* hashImage */ ,\n            42 /* owner */ ,\n            76\n        ];\n        const injectionVector = [\n            maxFee,\n            expiryRound,\n            receiver,\n            hashImage,\n            owner\n        ];\n        const injectionTypes = [\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.ADDRESS,\n            templates.valTypes.BASE64,\n            templates.valTypes.ADDRESS\n        ];\n        const injectedBytes = templates.inject(referenceProgramBytes, referenceOffsets, injectionVector, injectionTypes);\n        this.programBytes = injectedBytes;\n        const lsig = new logicSig.LogicSig(injectedBytes, undefined);\n        this.address = lsig.address();\n    }\n    /**\n     * returns the program bytes\n     * @returns {Uint8Array}\n     */ getProgram() {\n        return this.programBytes;\n    }\n    /**\n     * returns the string address of the contract\n     * @returns {string}\n     */ getAddress() {\n        return this.address;\n    }\n}\n/**\n *  signTransactionWithHTLCUnlock accepts a transaction, such as a payment, and builds the HTLC-unlocking signature around that transaction\n *\n * @deprecated This feature will be removed in v2.\n *\n * @param {Uint8Array} contract : byte representation of the HTLC\n * @param {Object} txn dictionary containing constructor arguments for a transaction\n * @param {string} preImageAsBase64 : preimage of the hash as base64 string\n *\n * @returns {Object} Object containing txID and blob representing signed transaction.\n * @throws error on validation failure\n */ function signTransactionWithHTLCUnlock(contract, txn, preImageAsBase64) {\n    const preImageBytes = Buffer.from(preImageAsBase64, \"base64\");\n    // hash validation\n    const readResult = logic.readProgram(contract, undefined);\n    const ints = readResult[0];\n    const byteArrays = readResult[1];\n    const expectedHashedOutput = byteArrays[1];\n    const hashFunction = contract[contract.length - 15];\n    if (hashFunction === 1) {\n        const hash = sha256.create();\n        hash.update(preImageBytes);\n        const actualHashedOutput = Buffer.from(hash.hex(), \"hex\");\n        if (!actualHashedOutput.equals(expectedHashedOutput)) {\n            throw new Error(\"sha256 hash of preimage did not match stored contract hash\");\n        }\n    } else if (hashFunction === 2) {\n        const hash = keccak256.create();\n        hash.update(preImageBytes);\n        const actualHashedOutput = Buffer.from(hash.hex(), \"hex\");\n        if (!actualHashedOutput.equals(expectedHashedOutput)) {\n            throw new Error(\"keccak256 hash of preimage did not match stored contract hash\");\n        }\n    } else {\n        throw new Error(\"hash function in contract unrecognized\");\n    }\n    const args = [\n        preImageBytes\n    ]; // array of one element, the Uint8Array preimage\n    const lsig = new logicSig.LogicSig(contract, args);\n    // clear out receiver just in case\n    // eslint-disable-next-line no-param-reassign\n    delete txn.to;\n    const maxFee = ints[0];\n    // check fee\n    const tempTxn = new transaction.Transaction(txn);\n    if (tempTxn.fee > maxFee) {\n        throw new Error(`final fee of payment transaction${tempTxn.fee.toString()}greater than transaction max fee${maxFee.toString()}`);\n    }\n    return logicSig.signLogicSigTransaction(txn, lsig);\n}\nmodule.exports = {\n    HTLC,\n    signTransactionWithHTLCUnlock\n}; //# sourceMappingURL=htlc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/htlc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/index.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst dynamicFeeTemplate = __webpack_require__(/*! ./dynamicfee */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/dynamicfee.js\");\nconst htlcTemplate = __webpack_require__(/*! ./htlc */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/htlc.js\");\nconst limitOrderTemplate = __webpack_require__(/*! ./limitorder */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/limitorder.js\");\nconst splitTemplate = __webpack_require__(/*! ./split */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/split.js\");\nconst periodicPayTemplate = __webpack_require__(/*! ./periodicpayment */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/periodicpayment.js\");\nmodule.exports = {\n    DynamicFee: dynamicFeeTemplate.DynamicFee,\n    getDynamicFeeTransactions: dynamicFeeTemplate.getDynamicFeeTransactions,\n    signDynamicFee: dynamicFeeTemplate.signDynamicFee,\n    HTLC: htlcTemplate.HTLC,\n    signTransactionWithHTLCUnlock: htlcTemplate.signTransactionWithHTLCUnlock,\n    LimitOrder: limitOrderTemplate.LimitOrder,\n    getSwapAssetsTransaction: limitOrderTemplate.getSwapAssetsTransaction,\n    Split: splitTemplate.Split,\n    getSplitFundsTransaction: splitTemplate.getSplitFundsTransaction,\n    PeriodicPayment: periodicPayTemplate.PeriodicPayment,\n    getPeriodicPaymentWithdrawalTransaction: periodicPayTemplate.getPeriodicPaymentWithdrawalTransaction\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbG9naWNUZW1wbGF0ZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLHFCQUFxQkMsbUJBQU9BLENBQUM7QUFDbkMsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUM7QUFDN0IsTUFBTUUscUJBQXFCRixtQkFBT0EsQ0FBQztBQUNuQyxNQUFNRyxnQkFBZ0JILG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1JLHNCQUFzQkosbUJBQU9BLENBQUM7QUFDcENLLE9BQU9DLE9BQU8sR0FBRztJQUNiQyxZQUFZUixtQkFBbUJRLFVBQVU7SUFDekNDLDJCQUEyQlQsbUJBQW1CUyx5QkFBeUI7SUFDdkVDLGdCQUFnQlYsbUJBQW1CVSxjQUFjO0lBQ2pEQyxNQUFNVCxhQUFhUyxJQUFJO0lBQ3ZCQywrQkFBK0JWLGFBQWFVLDZCQUE2QjtJQUN6RUMsWUFBWVYsbUJBQW1CVSxVQUFVO0lBQ3pDQywwQkFBMEJYLG1CQUFtQlcsd0JBQXdCO0lBQ3JFQyxPQUFPWCxjQUFjVyxLQUFLO0lBQzFCQywwQkFBMEJaLGNBQWNZLHdCQUF3QjtJQUNoRUMsaUJBQWlCWixvQkFBb0JZLGVBQWU7SUFDcERDLHlDQUF5Q2Isb0JBQW9CYSx1Q0FBdUM7QUFDeEcsR0FDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2xvZ2ljVGVtcGxhdGVzL2luZGV4LmpzPzkyMWYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZHluYW1pY0ZlZVRlbXBsYXRlID0gcmVxdWlyZSgnLi9keW5hbWljZmVlJyk7XG5jb25zdCBodGxjVGVtcGxhdGUgPSByZXF1aXJlKCcuL2h0bGMnKTtcbmNvbnN0IGxpbWl0T3JkZXJUZW1wbGF0ZSA9IHJlcXVpcmUoJy4vbGltaXRvcmRlcicpO1xuY29uc3Qgc3BsaXRUZW1wbGF0ZSA9IHJlcXVpcmUoJy4vc3BsaXQnKTtcbmNvbnN0IHBlcmlvZGljUGF5VGVtcGxhdGUgPSByZXF1aXJlKCcuL3BlcmlvZGljcGF5bWVudCcpO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRHluYW1pY0ZlZTogZHluYW1pY0ZlZVRlbXBsYXRlLkR5bmFtaWNGZWUsXG4gICAgZ2V0RHluYW1pY0ZlZVRyYW5zYWN0aW9uczogZHluYW1pY0ZlZVRlbXBsYXRlLmdldER5bmFtaWNGZWVUcmFuc2FjdGlvbnMsXG4gICAgc2lnbkR5bmFtaWNGZWU6IGR5bmFtaWNGZWVUZW1wbGF0ZS5zaWduRHluYW1pY0ZlZSxcbiAgICBIVExDOiBodGxjVGVtcGxhdGUuSFRMQyxcbiAgICBzaWduVHJhbnNhY3Rpb25XaXRoSFRMQ1VubG9jazogaHRsY1RlbXBsYXRlLnNpZ25UcmFuc2FjdGlvbldpdGhIVExDVW5sb2NrLFxuICAgIExpbWl0T3JkZXI6IGxpbWl0T3JkZXJUZW1wbGF0ZS5MaW1pdE9yZGVyLFxuICAgIGdldFN3YXBBc3NldHNUcmFuc2FjdGlvbjogbGltaXRPcmRlclRlbXBsYXRlLmdldFN3YXBBc3NldHNUcmFuc2FjdGlvbixcbiAgICBTcGxpdDogc3BsaXRUZW1wbGF0ZS5TcGxpdCxcbiAgICBnZXRTcGxpdEZ1bmRzVHJhbnNhY3Rpb246IHNwbGl0VGVtcGxhdGUuZ2V0U3BsaXRGdW5kc1RyYW5zYWN0aW9uLFxuICAgIFBlcmlvZGljUGF5bWVudDogcGVyaW9kaWNQYXlUZW1wbGF0ZS5QZXJpb2RpY1BheW1lbnQsXG4gICAgZ2V0UGVyaW9kaWNQYXltZW50V2l0aGRyYXdhbFRyYW5zYWN0aW9uOiBwZXJpb2RpY1BheVRlbXBsYXRlLmdldFBlcmlvZGljUGF5bWVudFdpdGhkcmF3YWxUcmFuc2FjdGlvbixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiZHluYW1pY0ZlZVRlbXBsYXRlIiwicmVxdWlyZSIsImh0bGNUZW1wbGF0ZSIsImxpbWl0T3JkZXJUZW1wbGF0ZSIsInNwbGl0VGVtcGxhdGUiLCJwZXJpb2RpY1BheVRlbXBsYXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkR5bmFtaWNGZWUiLCJnZXREeW5hbWljRmVlVHJhbnNhY3Rpb25zIiwic2lnbkR5bmFtaWNGZWUiLCJIVExDIiwic2lnblRyYW5zYWN0aW9uV2l0aEhUTENVbmxvY2siLCJMaW1pdE9yZGVyIiwiZ2V0U3dhcEFzc2V0c1RyYW5zYWN0aW9uIiwiU3BsaXQiLCJnZXRTcGxpdEZ1bmRzVHJhbnNhY3Rpb24iLCJQZXJpb2RpY1BheW1lbnQiLCJnZXRQZXJpb2RpY1BheW1lbnRXaXRoZHJhd2FsVHJhbnNhY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/limitorder.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/limitorder.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst address = __webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\nconst makeTxn = __webpack_require__(/*! ../makeTxn */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/makeTxn.js\");\nconst group = __webpack_require__(/*! ../group */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/group.js\");\nconst logic = __webpack_require__(/*! ../logic/logic */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/logic.js\");\nconst logicSig = __webpack_require__(/*! ../logicsig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js\");\nconst nacl = __webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\nconst templates = __webpack_require__(/*! ./templates */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/templates.js\");\nconst utils = __webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\nclass LimitOrder {\n    /**\n     * MakeLimitOrder allows a user to exchange some number of assets for some number of algos.\n     * Fund the contract with some number of Algos to limit the maximum number of\n     * Algos you're willing to trade for some other asset.\n     *\n     * Works on two cases:\n     * * trading Algos for some other asset\n     * * closing out Algos back to the originator after a timeout\n     *\n     * trade case, a 2 transaction group:\n     * gtxn[0] (this txn) Algos from Me to Other\n     * gtxn[1] asset from Other to Me\n     *\n     * We want to get _at least_ some amount of the other asset per our Algos\n     * gtxn[1].AssetAmount / gtxn[0].Amount >= N / D\n     * ===\n     * gtxn[1].AssetAmount * D >= gtxn[0].Amount * N\n     *\n     * close-out case:\n     * txn alone, close out value after timeout\n     *\n     * @deprecated This class will be removed in v2.\n     *\n     * Constructor Parameters:\n     * @param {string} owner: the address to refund funds to on timeout\n     * @param {int} assetid: the ID of the transferred asset\n     * @param {int} ratn: exchange rate (N asset per D Algos, or better)\n     * @param {int} ratd: exchange rate (N asset per D Algos, or better)\n     * @param {int} expiryRound: the round at which the account expires\n     * @param {int} minTrade: the minimum amount (of Algos) to be traded away\n     * @param {int} maxFee: maximum fee used by the limit order transaction\n     * @returns {LimitOrder}\n     */ constructor(owner, assetid, ratn, ratd, expiryRound, minTrade, maxFee){\n        // don't need to validate owner - it will be validated by template.insert\n        if (!Number.isSafeInteger(assetid) || assetid < 0) throw Error(\"assetid must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(ratn) || ratn < 0) throw Error(\"ratn must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(ratd) || ratd < 0) throw Error(\"ratd must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(expiryRound) || expiryRound < 0) throw Error(\"expiryRound must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(minTrade) || minTrade < 0) throw Error(\"minTrade must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(maxFee) || maxFee < 0) throw Error(\"maxFee must be a positive number and smaller than 2^53-1\");\n        const referenceProgramB64 = \"ASAKAAEFAgYEBwgJCiYBIP68oLsUSlpOp7Q4pGgayA5soQW8tgf8VlMlyVaV9qITMRYiEjEQIxIQMQEkDhAyBCMSQABVMgQlEjEIIQQNEDEJMgMSEDMBECEFEhAzAREhBhIQMwEUKBIQMwETMgMSEDMBEiEHHTUCNQExCCEIHTUENQM0ATQDDUAAJDQBNAMSNAI0BA8QQAAWADEJKBIxAiEJDRAxBzIDEhAxCCISEBA=\";\n        const referenceProgramBytes = Buffer.from(referenceProgramB64, \"base64\");\n        const referenceOffsets = [\n            5 /* minTrade */ ,\n            7 /* assetID */ ,\n            9 /* ratd */ ,\n            10 /* ratn */ ,\n            11 /* expiryRound */ ,\n            12 /* owner */ ,\n            16\n        ];\n        const injectionVector = [\n            maxFee,\n            minTrade,\n            assetid,\n            ratd,\n            ratn,\n            expiryRound,\n            owner\n        ];\n        const injectionTypes = [\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.ADDRESS\n        ];\n        const injectedBytes = templates.inject(referenceProgramBytes, referenceOffsets, injectionVector, injectionTypes);\n        this.programBytes = injectedBytes;\n        const lsig = new logicSig.LogicSig(injectedBytes, undefined);\n        this.address = lsig.address();\n        this.owner = owner;\n        this.assetid = assetid;\n    }\n    /**\n     * returns the program bytes\n     * @returns {Uint8Array}\n     */ getProgram() {\n        return this.programBytes;\n    }\n    /**\n     * returns the string address of the contract\n     * @returns {string}\n     */ getAddress() {\n        return this.address;\n    }\n}\n/**\n * returns a group transactions array which transfer funds according to the contract's ratio\n *\n * @deprecated This feature will be removed in v2.\n *\n * @param {Uint8Array} contract: byteform of the contract from the payer\n * @param {int} assetAmount: the amount of assets to be sent\n * @param {int} microAlgoAmount: number of microAlgos to transfer\n * @param {Uint8Array} secretKey: secret key for signing transaction\n * @param {int} fee: the fee per byte to pay in microAlgos\n * @param {int} firstRound: the first round on which these txns will be valid\n * @param {int} lastRound: the last round on which these txns will be valid\n * @param {string} genesisHash: the b64-encoded genesis hash indicating the network for this transaction\n * @returns {Uint8Array}\n * the first payment sends money (Algos) from contract to the recipient (we'll call him Buyer), closing the rest of the account to Owner\n * the second payment sends money (the asset) from Buyer to the Owner\n * these transactions will be rejected if they do not meet the restrictions set by the contract\n * @throws error if arguments fail contract validation\n */ function getSwapAssetsTransaction(contract, assetAmount, microAlgoAmount, secretKey, fee, firstRound, lastRound, genesisHash) {\n    const buyerKeyPair = nacl.keyPairFromSecretKey(secretKey);\n    const buyerAddr = address.encodeAddress(buyerKeyPair.publicKey);\n    const programOutputs = logic.readProgram(contract, undefined);\n    const ints = programOutputs[0];\n    const byteArrays = programOutputs[1];\n    let noCloseRemainder;\n    let noAssetRevocationTarget;\n    const contractAssetID = ints[6];\n    const contractOwner = address.encodeAddress(byteArrays[0]);\n    const lsig = logicSig.makeLogicSig(contract, undefined);\n    const contractAddress = lsig.address();\n    const algosForAssets = makeTxn.makePaymentTxn(contractAddress, buyerAddr, fee, microAlgoAmount, noCloseRemainder, firstRound, lastRound, undefined, genesisHash, undefined);\n    const assetsForAlgos = makeTxn.makeAssetTransferTxn(buyerAddr, contractOwner, noCloseRemainder, noAssetRevocationTarget, fee, assetAmount, firstRound, lastRound, undefined, genesisHash, undefined, contractAssetID);\n    const txns = [\n        algosForAssets,\n        assetsForAlgos\n    ];\n    const txGroup = group.assignGroupID(txns);\n    const ratd = ints[7];\n    const ratn = ints[8];\n    if (assetAmount * ratd < microAlgoAmount * ratn) {\n        throw new Error(`bad payment ratio, ${assetAmount.toString()}*${ratd.toString()} !>= ${microAlgoAmount.toString()}*${ratn.toString()}`);\n    }\n    const minTrade = ints[4];\n    if (microAlgoAmount < minTrade) {\n        throw new Error(`payment amount ${microAlgoAmount.toString()} less than minimum trade ${minTrade.toString()}`);\n    }\n    const maxFee = ints[2];\n    if (txGroup[0].fee > maxFee) {\n        throw new Error(`final fee of payment transaction ${txGroup[0].fee.toString()} greater than transaction max fee ${maxFee.toString()}`);\n    }\n    if (txGroup[1].fee > maxFee) {\n        throw new Error(`final fee of asset transaction ${txGroup[1].fee.toString()} greater than transaction max fee ${maxFee.toString()}`);\n    }\n    const algosForAssetsSigned = logicSig.signLogicSigTransactionObject(txGroup[0], lsig);\n    const assetsForAlgosSigned = txGroup[1].signTxn(secretKey);\n    return utils.concatArrays(algosForAssetsSigned.blob, assetsForAlgosSigned);\n}\nmodule.exports = {\n    LimitOrder,\n    getSwapAssetsTransaction\n}; //# sourceMappingURL=limitorder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/limitorder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/periodicpayment.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/periodicpayment.js ***!
  \***********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst address = __webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\nconst makeTxn = __webpack_require__(/*! ../makeTxn */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/makeTxn.js\");\nconst logic = __webpack_require__(/*! ../logic/logic */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/logic.js\");\nconst logicSig = __webpack_require__(/*! ../logicsig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js\");\nconst nacl = __webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\nconst templates = __webpack_require__(/*! ./templates */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/templates.js\");\nclass PeriodicPayment {\n    /**\n     * MakePeriodicPayment allows some account to execute periodic withdrawal of funds.\n     * This is a contract account.\n     *\n     * This allows receiver to withdraw amount every\n     * period rounds for withdrawWindow after every multiple\n     * of period.\n     *\n     * After expiryRound, all remaining funds in the escrow\n     * are available to receiver.\n     *\n     * @deprecated This class will be removed in v2.\n     *\n     * Constructor Parameters:\n     * @param {string} receiver: address which is authorized to receive withdrawals\n     * @param {int} amount: the amount to send each period\n     * @param {int} withdrawalWindow: the duration of a withdrawal period\n     * @param {int} period: the time between a pair of withdrawal periods\n     * @param {int} expiryRound: the round at which the account expires\n     * @param {int} maxFee: maximum fee used by the withdrawal transaction\n     * @param {string} lease: b64 representation of lease to use, or leave undefined to generate one\n     * @returns {PeriodicPayment}\n     */ constructor(receiver, amount, withdrawalWindow, period, expiryRound, maxFee, lease){\n        // don't need to validate receiver or lease, it's validated by template insert\n        this.receiver = receiver;\n        if (!Number.isSafeInteger(amount) || amount < 0) throw Error(\"amount must be a positive number and smaller than 2^53-1\");\n        this.amount = amount;\n        if (!Number.isSafeInteger(withdrawalWindow) || withdrawalWindow < 0) throw Error(\"withdrawalWindow must be a positive number and smaller than 2^53-1\");\n        this.withdrawalWindow = withdrawalWindow;\n        if (!Number.isSafeInteger(period) || period < 0) throw Error(\"period must be a positive number and smaller than 2^53-1\");\n        this.period = period;\n        if (!Number.isSafeInteger(expiryRound) || expiryRound < 0) throw Error(\"expiryRound must be a positive number and smaller than 2^53-1\");\n        this.expiryRound = expiryRound;\n        if (!Number.isSafeInteger(maxFee) || maxFee < 0) throw Error(\"maxFee must be a positive number and smaller than 2^53-1\");\n        this.maxFee = maxFee;\n        if (lease === undefined) {\n            const leaseBytes = nacl.randomBytes(32);\n            this.lease = Buffer.from(leaseBytes).toString(\"base64\");\n        } else {\n            this.lease = lease;\n        }\n        this.programBytes = this.getProgram();\n        const lsig = new logicSig.LogicSig(this.programBytes, undefined);\n        this.address = lsig.address();\n    }\n    /**\n     * returns the program bytes\n     * @returns {Uint8Array}\n     */ getProgram() {\n        const referenceProgramB64 = \"ASAHAQYFAAQDByYCIAECAwQFBgcIAQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIIJKvkYTkEzwJf2arzJOxERsSogG9nQzKPkpIoc4TzPTFMRAiEjEBIw4QMQIkGCUSEDEEIQQxAggSEDEGKBIQMQkyAxIxBykSEDEIIQUSEDEJKRIxBzIDEhAxAiEGDRAxCCUSEBEQ\";\n        const referenceProgramBytes = Buffer.from(referenceProgramB64, \"base64\");\n        const referenceOffsets = [\n            4 /* period */ ,\n            5 /* withdrawWindow */ ,\n            7 /* amount */ ,\n            8 /* expiryRound */ ,\n            9 /* lease */ ,\n            12 /* receiver */ ,\n            46\n        ];\n        const injectionVector = [\n            this.maxFee,\n            this.period,\n            this.withdrawalWindow,\n            this.amount,\n            this.expiryRound,\n            this.lease,\n            this.receiver\n        ];\n        const injectionTypes = [\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.BASE64,\n            templates.valTypes.ADDRESS\n        ];\n        return templates.inject(referenceProgramBytes, referenceOffsets, injectionVector, injectionTypes);\n    }\n    /**\n     * returns the string address of the contract\n     * @returns {string}\n     */ getAddress() {\n        return this.address;\n    }\n}\n/**\n * getPeriodicPaymentWithdrawalTransaction returns a signed transaction extracting funds form the contract\n *\n * @deprecated This feature will be removed in v2.\n *\n * @param {Uint8Array} contract: the bytearray defining the contract, received from the payer\n * @param {int} fee: the fee per byte for the transaction\n * @param {int} firstValid: the first round on which the txn will be valid\n * @param {string} genesisHash: the hash representing the network for the txn\n * @returns {Object} Object containing txID and blob representing signed transaction\n * @throws error on failure\n */ function getPeriodicPaymentWithdrawalTransaction(contract, fee, firstValid, genesisHash) {\n    const readResult = logic.readProgram(contract, undefined);\n    const ints = readResult[0];\n    const byteArrays = readResult[1];\n    const period = ints[2];\n    const duration = ints[4];\n    const amount = ints[5];\n    if (firstValid % period !== 0) {\n        throw new Error(`firstValid round ${firstValid.toString()} was not a multiple of contract period ${period.toString()}`);\n    }\n    // extract receiver and convert as needed\n    const receiverBytes = byteArrays[1];\n    const receiver = address.encodeAddress(receiverBytes);\n    // extract lease and convert\n    const leaseBuffer = byteArrays[0];\n    const lease = new Uint8Array(leaseBuffer);\n    const lastValid = firstValid + duration;\n    const to = receiver;\n    let noCloseRemainder;\n    let noNote;\n    const lsig = logicSig.makeLogicSig(contract, undefined);\n    const from = lsig.address();\n    const txn = {\n        from,\n        to,\n        fee,\n        amount,\n        closeRemainderTo: noCloseRemainder,\n        firstRound: firstValid,\n        lastRound: lastValid,\n        note: noNote,\n        genesisHash,\n        genesisID: \"\",\n        type: \"pay\",\n        lease\n    };\n    // check fee\n    const tempTxn = makeTxn.makePaymentTxn(from, to, fee, amount, noCloseRemainder, firstValid, lastValid, noNote, genesisHash, \"\");\n    if (tempTxn.fee > ints[1]) {\n        throw new Error(`final fee of payment transaction${tempTxn.fee.toString()}greater than transaction max fee${ints[1].toString()}`);\n    }\n    return logicSig.signLogicSigTransaction(txn, lsig);\n}\nmodule.exports = {\n    PeriodicPayment,\n    getPeriodicPaymentWithdrawalTransaction\n}; //# sourceMappingURL=periodicpayment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/periodicpayment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/split.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/split.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst address = __webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\nconst makeTxn = __webpack_require__(/*! ../makeTxn */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/makeTxn.js\");\nconst group = __webpack_require__(/*! ../group */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/group.js\");\nconst logicsig = __webpack_require__(/*! ../logicsig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js\");\nconst logic = __webpack_require__(/*! ../logic/logic */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/logic.js\");\nconst templates = __webpack_require__(/*! ./templates */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/templates.js\");\nconst utils = __webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\nclass Split {\n    /**\n     * Split splits money sent to some account to two recipients at some ratio.\n     * This is a contract account.\n     *\n     * This allows either a two-transaction group, for executing a\n     * split, or single transaction, for closing the account.\n     *\n     * Withdrawals from this account are allowed as a group transaction which\n     * sends receiverOne and receiverTwo amounts with exactly the specified ratio:\n     * (rat1*amountForReceiverOne) = (rat2*amountForReceiverTwo)\n     * At least minPay must be sent to receiverOne.\n     * (CloseRemainderTo must be zero.)\n     *\n     * After expiryRound passes, all funds can be refunded to owner.\n     *\n     * @deprecated This feature will be removed in v2.\n     *\n     * Constructor Parameters:\n     * @param {string} owner: the address to refund funds to on timeout\n     * @param {string} receiverOne: the first recipient in the split account\n     * @param {string} receiverTwo: the second recipient in the split account\n     * @param {int} rat1: fraction of money to be paid to the 1st recipient\n     * @param {int} rat2: fraction of money to be paid to the 2nd recipient\n     * @param {int} expiryRound: the round at which the account expires\n     * @param {int} minPay: minimum amount to be paid out of the account\n     * @param {int} maxFee: half of the maximum fee used by each split forwarding group transaction\n     * @returns {Split}\n     */ constructor(owner, receiverOne, receiverTwo, rat1, rat2, expiryRound, minPay, maxFee){\n        // don't need to validate owner, receiverone, receivertwo - they'll be validated by template.insert\n        if (!Number.isSafeInteger(rat2) || rat2 < 0) throw Error(\"rat2 must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(rat1) || rat1 < 0) throw Error(\"rat1 must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(expiryRound) || expiryRound < 0) throw Error(\"expiryRound must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(minPay) || minPay < 0) throw Error(\"minPay must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(maxFee) || maxFee < 0) throw Error(\"maxFee must be a positive number and smaller than 2^53-1\");\n        const referenceProgramB64 = \"ASAIAQUCAAYHCAkmAyCztwQn0+DycN+vsk+vJWcsoz/b7NDS6i33HOkvTpf+YiC3qUpIgHGWE8/1LPh9SGCalSN7IaITeeWSXbfsS5wsXyC4kBQ38Z8zcwWVAym4S8vpFB/c0XC6R4mnPi9EBADsPDEQIhIxASMMEDIEJBJAABkxCSgSMQcyAxIQMQglEhAxAiEEDRAiQAAuMwAAMwEAEjEJMgMSEDMABykSEDMBByoSEDMACCEFCzMBCCEGCxIQMwAIIQcPEBA=\";\n        const referenceProgramBytes = Buffer.from(referenceProgramB64, \"base64\");\n        const referenceOffsets = [\n            4 /* timeout */ ,\n            7 /* rat2 */ ,\n            8 /* rat1 */ ,\n            9 /* minPay */ ,\n            10 /* owner */ ,\n            14 /* receiver1 */ ,\n            47 /* receiver2 */ ,\n            80\n        ];\n        const injectionVector = [\n            maxFee,\n            expiryRound,\n            rat2,\n            rat1,\n            minPay,\n            owner,\n            receiverOne,\n            receiverTwo\n        ];\n        const injectionTypes = [\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.INT,\n            templates.valTypes.ADDRESS,\n            templates.valTypes.ADDRESS,\n            templates.valTypes.ADDRESS\n        ];\n        const injectedBytes = templates.inject(referenceProgramBytes, referenceOffsets, injectionVector, injectionTypes);\n        this.programBytes = injectedBytes;\n        const lsig = logicsig.makeLogicSig(injectedBytes, undefined);\n        this.address = lsig.address();\n    }\n    /**\n     * returns the program bytes\n     * @returns {Uint8Array}\n     */ getProgram() {\n        return this.programBytes;\n    }\n    /**\n     * returns the string address of the contract\n     * @returns {string}\n     */ getAddress() {\n        return this.address;\n    }\n}\n/**\n * returns a group transactions array which transfer funds according to the contract's ratio\n *\n * @deprecated This feature will be removed in v2.\n *\n * @param {Uint8Array} contract: bytes representing the contract in question\n * @param {int} amount: the amount to be transferred\n * @param {int} firstRound: the first round on which the transaction group will be valid\n * @param {int} lastRound: the last round on which the transaction group will be valid\n * @param {int} fee: the fee to pay in microAlgos\n * @param {string} genesisHash: the b64-encoded genesis hash indicating the network for this transaction\n * @returns {Uint8Array}\n */ function getSplitFundsTransaction(contract, amount, firstRound, lastRound, fee, genesisHash) {\n    const programOutputs = logic.readProgram(contract, undefined);\n    const ints = programOutputs[0];\n    const byteArrays = programOutputs[1];\n    let rat2 = ints[6];\n    let rat1 = ints[5];\n    let amountForReceiverOne = 0;\n    // reduce fractions\n    const gcdFn = (a, b)=>{\n        if (typeof a !== \"number\" || typeof b !== \"number\") throw new Error(\"gcd operates only on positive integers\");\n        if (!b) {\n            return a;\n        }\n        return gcdFn(b, a % b);\n    };\n    const gcd = gcdFn(rat2, rat1);\n    rat2 = Math.floor(rat2 / gcd);\n    rat1 = Math.floor(rat1 / gcd);\n    const ratio = rat1 / rat2;\n    amountForReceiverOne = Math.round(amount / (1 + ratio));\n    const amountForReceiverTwo = amount - amountForReceiverOne;\n    if (rat1 * amountForReceiverOne !== rat2 * amountForReceiverTwo) {\n        throw Error(\"could not split funds in a way that satisfied the contract ratio\");\n    }\n    const logicSig = logicsig.makeLogicSig(contract, undefined); // no args\n    const from = logicSig.address();\n    const receiverOne = address.encodeAddress(byteArrays[1]);\n    const receiverTwo = address.encodeAddress(byteArrays[2]);\n    const tx1 = makeTxn.makePaymentTxn(from, receiverOne, fee, amountForReceiverOne, undefined, firstRound, lastRound, undefined, genesisHash);\n    const tx2 = makeTxn.makePaymentTxn(from, receiverTwo, fee, amountForReceiverTwo, undefined, firstRound, lastRound, undefined, genesisHash);\n    const txns = [\n        tx1,\n        tx2\n    ];\n    const txGroup = group.assignGroupID(txns);\n    const signedTxns = txGroup.map((txn)=>logicsig.signLogicSigTransactionObject(txn, logicsig).blob);\n    return utils.concatArrays(signedTxns[0], signedTxns[1]);\n}\nmodule.exports = {\n    Split,\n    getSplitFundsTransaction\n}; //# sourceMappingURL=split.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/split.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/templates.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/templates.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-bitwise */ \nconst address = __webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\nfunction putUvarint(buf, x) {\n    let i = 0;\n    while(x > 0x80){\n        buf.push(x & 0xff | 0x80);\n        // eslint-disable-next-line no-param-reassign\n        x >>= 7;\n        i += 1;\n    }\n    buf.push(x & 0xff);\n    return i + 1;\n}\nconst valTypes = {\n    INT: 1,\n    ADDRESS: 2,\n    BASE64: 3\n};\nfunction inject(orig, offsets, values, valueTypes) {\n    if (offsets.length !== values.length || offsets.length !== valueTypes.length) {\n        throw new Error(\"Lengths do not match\");\n    }\n    let res = orig;\n    function replace(arr, newVal, offset, placeholderLength) {\n        const beforeReplacement = arr.slice(0, offset);\n        const afterReplacement = arr.slice(offset + placeholderLength, arr.length);\n        const chunks = [\n            beforeReplacement,\n            Buffer.from(newVal),\n            afterReplacement\n        ];\n        return Buffer.concat(chunks);\n    }\n    for(let i = 0; i < offsets.length; i++){\n        let decodedLength = 0;\n        let val = values[i];\n        const valType = valueTypes[i];\n        switch(valType){\n            case valTypes.INT:\n                // eslint-disable-next-line no-case-declarations\n                const intBuf = [];\n                decodedLength = putUvarint(intBuf, val);\n                res = replace(res, intBuf, offsets[i], 1);\n                break;\n            case valTypes.ADDRESS:\n                val = address.decodeAddress(val);\n                res = replace(res, val.publicKey, offsets[i], 32);\n                break;\n            case valTypes.BASE64:\n                // eslint-disable-next-line no-case-declarations\n                const lenBuf = [];\n                val = Buffer.from(val, \"base64\");\n                putUvarint(lenBuf, val.length);\n                val = Buffer.concat([\n                    Buffer.from(lenBuf),\n                    val\n                ]);\n                res = replace(res, val, offsets[i], 33);\n                break;\n            default:\n                throw new Error(\"unrecognized value type\");\n        }\n        if (decodedLength !== 0) {\n            for(let o = 0; o < offsets.length; o++){\n                // eslint-disable-next-line no-param-reassign\n                offsets[o] += decodedLength - 1;\n            }\n        }\n    }\n    return res;\n}\nmodule.exports = {\n    inject,\n    valTypes\n}; //# sourceMappingURL=templates.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbG9naWNUZW1wbGF0ZXMvdGVtcGxhdGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QjtBQUM3QixNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN4QixTQUFTQyxXQUFXQyxHQUFHLEVBQUVDLENBQUM7SUFDdEIsSUFBSUMsSUFBSTtJQUNSLE1BQU9ELElBQUksS0FBTTtRQUNiRCxJQUFJRyxJQUFJLENBQUMsSUFBSyxPQUFRO1FBQ3RCLDZDQUE2QztRQUM3Q0YsTUFBTTtRQUNOQyxLQUFLO0lBQ1Q7SUFDQUYsSUFBSUcsSUFBSSxDQUFDRixJQUFJO0lBQ2IsT0FBT0MsSUFBSTtBQUNmO0FBQ0EsTUFBTUUsV0FBVztJQUNiQyxLQUFLO0lBQ0xDLFNBQVM7SUFDVEMsUUFBUTtBQUNaO0FBQ0EsU0FBU0MsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsVUFBVTtJQUM3QyxJQUFJRixRQUFRRyxNQUFNLEtBQUtGLE9BQU9FLE1BQU0sSUFDaENILFFBQVFHLE1BQU0sS0FBS0QsV0FBV0MsTUFBTSxFQUFFO1FBQ3RDLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLElBQUlDLE1BQU1OO0lBQ1YsU0FBU08sUUFBUUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsaUJBQWlCO1FBQ25ELE1BQU1DLG9CQUFvQkosSUFBSUssS0FBSyxDQUFDLEdBQUdIO1FBQ3ZDLE1BQU1JLG1CQUFtQk4sSUFBSUssS0FBSyxDQUFDSCxTQUFTQyxtQkFBbUJILElBQUlKLE1BQU07UUFDekUsTUFBTVcsU0FBUztZQUFDSDtZQUFtQkksT0FBT0MsSUFBSSxDQUFDUjtZQUFTSztTQUFpQjtRQUN6RSxPQUFPRSxPQUFPRSxNQUFNLENBQUNIO0lBQ3pCO0lBQ0EsSUFBSyxJQUFJdEIsSUFBSSxHQUFHQSxJQUFJUSxRQUFRRyxNQUFNLEVBQUVYLElBQUs7UUFDckMsSUFBSTBCLGdCQUFnQjtRQUNwQixJQUFJQyxNQUFNbEIsTUFBTSxDQUFDVCxFQUFFO1FBQ25CLE1BQU00QixVQUFVbEIsVUFBVSxDQUFDVixFQUFFO1FBQzdCLE9BQVE0QjtZQUNKLEtBQUsxQixTQUFTQyxHQUFHO2dCQUNiLGdEQUFnRDtnQkFDaEQsTUFBTTBCLFNBQVMsRUFBRTtnQkFDakJILGdCQUFnQjdCLFdBQVdnQyxRQUFRRjtnQkFDbkNkLE1BQU1DLFFBQVFELEtBQUtnQixRQUFRckIsT0FBTyxDQUFDUixFQUFFLEVBQUU7Z0JBQ3ZDO1lBQ0osS0FBS0UsU0FBU0UsT0FBTztnQkFDakJ1QixNQUFNaEMsUUFBUW1DLGFBQWEsQ0FBQ0g7Z0JBQzVCZCxNQUFNQyxRQUFRRCxLQUFLYyxJQUFJSSxTQUFTLEVBQUV2QixPQUFPLENBQUNSLEVBQUUsRUFBRTtnQkFDOUM7WUFDSixLQUFLRSxTQUFTRyxNQUFNO2dCQUNoQixnREFBZ0Q7Z0JBQ2hELE1BQU0yQixTQUFTLEVBQUU7Z0JBQ2pCTCxNQUFNSixPQUFPQyxJQUFJLENBQUNHLEtBQUs7Z0JBQ3ZCOUIsV0FBV21DLFFBQVFMLElBQUloQixNQUFNO2dCQUM3QmdCLE1BQU1KLE9BQU9FLE1BQU0sQ0FBQztvQkFBQ0YsT0FBT0MsSUFBSSxDQUFDUTtvQkFBU0w7aUJBQUk7Z0JBQzlDZCxNQUFNQyxRQUFRRCxLQUFLYyxLQUFLbkIsT0FBTyxDQUFDUixFQUFFLEVBQUU7Z0JBQ3BDO1lBQ0o7Z0JBQ0ksTUFBTSxJQUFJWSxNQUFNO1FBQ3hCO1FBQ0EsSUFBSWMsa0JBQWtCLEdBQUc7WUFDckIsSUFBSyxJQUFJTyxJQUFJLEdBQUdBLElBQUl6QixRQUFRRyxNQUFNLEVBQUVzQixJQUFLO2dCQUNyQyw2Q0FBNkM7Z0JBQzdDekIsT0FBTyxDQUFDeUIsRUFBRSxJQUFJUCxnQkFBZ0I7WUFDbEM7UUFDSjtJQUNKO0lBQ0EsT0FBT2I7QUFDWDtBQUNBcUIsT0FBT0MsT0FBTyxHQUFHO0lBQUU3QjtJQUFRSjtBQUFTLEdBQ3BDLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbG9naWNUZW1wbGF0ZXMvdGVtcGxhdGVzLmpzPzg4ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuY29uc3QgYWRkcmVzcyA9IHJlcXVpcmUoJy4uL2VuY29kaW5nL2FkZHJlc3MnKTtcbmZ1bmN0aW9uIHB1dFV2YXJpbnQoYnVmLCB4KSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlICh4ID4gMHg4MCkge1xuICAgICAgICBidWYucHVzaCgoeCAmIDB4ZmYpIHwgMHg4MCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB4ID4+PSA3O1xuICAgICAgICBpICs9IDE7XG4gICAgfVxuICAgIGJ1Zi5wdXNoKHggJiAweGZmKTtcbiAgICByZXR1cm4gaSArIDE7XG59XG5jb25zdCB2YWxUeXBlcyA9IHtcbiAgICBJTlQ6IDEsXG4gICAgQUREUkVTUzogMixcbiAgICBCQVNFNjQ6IDMsXG59O1xuZnVuY3Rpb24gaW5qZWN0KG9yaWcsIG9mZnNldHMsIHZhbHVlcywgdmFsdWVUeXBlcykge1xuICAgIGlmIChvZmZzZXRzLmxlbmd0aCAhPT0gdmFsdWVzLmxlbmd0aCB8fFxuICAgICAgICBvZmZzZXRzLmxlbmd0aCAhPT0gdmFsdWVUeXBlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMZW5ndGhzIGRvIG5vdCBtYXRjaCcpO1xuICAgIH1cbiAgICBsZXQgcmVzID0gb3JpZztcbiAgICBmdW5jdGlvbiByZXBsYWNlKGFyciwgbmV3VmFsLCBvZmZzZXQsIHBsYWNlaG9sZGVyTGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGJlZm9yZVJlcGxhY2VtZW50ID0gYXJyLnNsaWNlKDAsIG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGFmdGVyUmVwbGFjZW1lbnQgPSBhcnIuc2xpY2Uob2Zmc2V0ICsgcGxhY2Vob2xkZXJMZW5ndGgsIGFyci5sZW5ndGgpO1xuICAgICAgICBjb25zdCBjaHVua3MgPSBbYmVmb3JlUmVwbGFjZW1lbnQsIEJ1ZmZlci5mcm9tKG5ld1ZhbCksIGFmdGVyUmVwbGFjZW1lbnRdO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChjaHVua3MpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9mZnNldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGRlY29kZWRMZW5ndGggPSAwO1xuICAgICAgICBsZXQgdmFsID0gdmFsdWVzW2ldO1xuICAgICAgICBjb25zdCB2YWxUeXBlID0gdmFsdWVUeXBlc1tpXTtcbiAgICAgICAgc3dpdGNoICh2YWxUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIHZhbFR5cGVzLklOVDpcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY2FzZS1kZWNsYXJhdGlvbnNcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRCdWYgPSBbXTtcbiAgICAgICAgICAgICAgICBkZWNvZGVkTGVuZ3RoID0gcHV0VXZhcmludChpbnRCdWYsIHZhbCk7XG4gICAgICAgICAgICAgICAgcmVzID0gcmVwbGFjZShyZXMsIGludEJ1Ziwgb2Zmc2V0c1tpXSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHZhbFR5cGVzLkFERFJFU1M6XG4gICAgICAgICAgICAgICAgdmFsID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKHZhbCk7XG4gICAgICAgICAgICAgICAgcmVzID0gcmVwbGFjZShyZXMsIHZhbC5wdWJsaWNLZXksIG9mZnNldHNbaV0sIDMyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdmFsVHlwZXMuQkFTRTY0OlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbkJ1ZiA9IFtdO1xuICAgICAgICAgICAgICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgICAgIHB1dFV2YXJpbnQobGVuQnVmLCB2YWwubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB2YWwgPSBCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShsZW5CdWYpLCB2YWxdKTtcbiAgICAgICAgICAgICAgICByZXMgPSByZXBsYWNlKHJlcywgdmFsLCBvZmZzZXRzW2ldLCAzMyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHZhbHVlIHR5cGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVjb2RlZExlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgbyA9IDA7IG8gPCBvZmZzZXRzLmxlbmd0aDsgbysrKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgb2Zmc2V0c1tvXSArPSBkZWNvZGVkTGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxubW9kdWxlLmV4cG9ydHMgPSB7IGluamVjdCwgdmFsVHlwZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlcy5qcy5tYXAiXSwibmFtZXMiOlsiYWRkcmVzcyIsInJlcXVpcmUiLCJwdXRVdmFyaW50IiwiYnVmIiwieCIsImkiLCJwdXNoIiwidmFsVHlwZXMiLCJJTlQiLCJBRERSRVNTIiwiQkFTRTY0IiwiaW5qZWN0Iiwib3JpZyIsIm9mZnNldHMiLCJ2YWx1ZXMiLCJ2YWx1ZVR5cGVzIiwibGVuZ3RoIiwiRXJyb3IiLCJyZXMiLCJyZXBsYWNlIiwiYXJyIiwibmV3VmFsIiwib2Zmc2V0IiwicGxhY2Vob2xkZXJMZW5ndGgiLCJiZWZvcmVSZXBsYWNlbWVudCIsInNsaWNlIiwiYWZ0ZXJSZXBsYWNlbWVudCIsImNodW5rcyIsIkJ1ZmZlciIsImZyb20iLCJjb25jYXQiLCJkZWNvZGVkTGVuZ3RoIiwidmFsIiwidmFsVHlwZSIsImludEJ1ZiIsImRlY29kZUFkZHJlc3MiLCJwdWJsaWNLZXkiLCJsZW5CdWYiLCJvIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/templates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogicSig: () => (/* binding */ LogicSig),\n/* harmony export */   LogicSigAccount: () => (/* binding */ LogicSigAccount),\n/* harmony export */   logicSigFromByte: () => (/* binding */ logicSigFromByte),\n/* harmony export */   makeLogicSig: () => (/* binding */ makeLogicSig),\n/* harmony export */   sanityCheckProgram: () => (/* binding */ sanityCheckProgram),\n/* harmony export */   signLogicSigTransaction: () => (/* binding */ signLogicSigTransaction),\n/* harmony export */   signLogicSigTransactionObject: () => (/* binding */ signLogicSigTransactionObject),\n/* harmony export */   tealSign: () => (/* binding */ tealSign),\n/* harmony export */   tealSignFromProgram: () => (/* binding */ tealSignFromProgram)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _multisig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/multisig.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\n\n\n\n\n\n\n\n/** sanityCheckProgram performs heuristic program validation:\n * check if passed in bytes are Algorand address or is B64 encoded, rather than Teal bytes\n *\n * @param program - Program bytes to check\n */ function sanityCheckProgram(program) {\n    if (!program || program.length === 0) throw new Error(\"empty program\");\n    const lineBreakOrd = \"\\n\".charCodeAt(0);\n    const blankSpaceOrd = \" \".charCodeAt(0);\n    const tildeOrd = \"~\".charCodeAt(0);\n    const isPrintable = (x)=>blankSpaceOrd <= x && x <= tildeOrd;\n    const isAsciiPrintable = program.every((x)=>x === lineBreakOrd || isPrintable(x));\n    if (isAsciiPrintable) {\n        const programStr = Buffer.from(program).toString();\n        if ((0,_encoding_address__WEBPACK_IMPORTED_MODULE_1__.isValidAddress)(programStr)) throw new Error(\"requesting program bytes, get Algorand address\");\n        if (Buffer.from(programStr, \"base64\").toString(\"base64\") === programStr) throw new Error(\"program should not be b64 encoded\");\n        throw new Error(\"program bytes are all ASCII printable characters, not looking like Teal byte code\");\n    }\n}\n/**\n LogicSig implementation\n */ class LogicSig {\n    constructor(program, programArgs){\n        this.tag = Buffer.from(\"Program\");\n        if (programArgs && (!Array.isArray(programArgs) || !programArgs.every((arg)=>arg.constructor === Uint8Array || Buffer.isBuffer(arg)))) {\n            throw new TypeError(\"Invalid arguments\");\n        }\n        let args;\n        if (programArgs != null) args = programArgs.map((arg)=>new Uint8Array(arg));\n        sanityCheckProgram(program);\n        this.logic = program;\n        this.args = args;\n        this.sig = undefined;\n        this.msig = undefined;\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        const obj = {\n            l: this.logic\n        };\n        if (this.args) {\n            obj.arg = this.args;\n        }\n        if (this.sig) {\n            obj.sig = this.sig;\n        } else if (this.msig) {\n            obj.msig = this.msig;\n        }\n        return obj;\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(encoded) {\n        const lsig = new LogicSig(encoded.l, encoded.arg);\n        lsig.sig = encoded.sig;\n        lsig.msig = encoded.msig;\n        return lsig;\n    }\n    /**\n     * Performs signature verification\n     * @param publicKey - Verification key (derived from sender address or escrow address)\n     */ verify(publicKey) {\n        if (this.sig && this.msig) {\n            return false;\n        }\n        try {\n            sanityCheckProgram(this.logic);\n        } catch (e) {\n            return false;\n        }\n        const toBeSigned = _utils_utils__WEBPACK_IMPORTED_MODULE_4__.concatArrays(this.tag, this.logic);\n        if (!this.sig && !this.msig) {\n            const hash = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.genericHash(toBeSigned);\n            return _utils_utils__WEBPACK_IMPORTED_MODULE_4__.arrayEqual(hash, publicKey);\n        }\n        if (this.sig) {\n            return _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.verify(toBeSigned, this.sig, publicKey);\n        }\n        return (0,_multisig__WEBPACK_IMPORTED_MODULE_3__.verifyMultisig)(toBeSigned, this.msig, publicKey);\n    }\n    /**\n     * Compute hash of the logic sig program (that is the same as escrow account address) as string address\n     * @returns String representation of the address\n     */ address() {\n        const toBeSigned = _utils_utils__WEBPACK_IMPORTED_MODULE_4__.concatArrays(this.tag, this.logic);\n        const hash = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.genericHash(toBeSigned);\n        return _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(hash));\n    }\n    /**\n     * Creates signature (if no msig provided) or multi signature otherwise\n     * @param secretKey - Secret key to sign with\n     * @param msig - Multisig account as \\{version, threshold, addrs\\}\n     */ sign(secretKey, msig) {\n        if (msig == null) {\n            this.sig = this.signProgram(secretKey);\n        } else {\n            const subsigs = msig.addrs.map((addr)=>({\n                    pk: _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(addr).publicKey\n                }));\n            this.msig = {\n                v: msig.version,\n                thr: msig.threshold,\n                subsig: subsigs\n            };\n            const [sig, index] = this.singleSignMultisig(secretKey, this.msig);\n            this.msig.subsig[index].s = sig;\n        }\n    }\n    /**\n     * Appends a signature to multi signature\n     * @param secretKey - Secret key to sign with\n     */ appendToMultisig(secretKey) {\n        if (this.msig === undefined) {\n            throw new Error(\"no multisig present\");\n        }\n        const [sig, index] = this.singleSignMultisig(secretKey, this.msig);\n        this.msig.subsig[index].s = sig;\n    }\n    signProgram(secretKey) {\n        const toBeSigned = _utils_utils__WEBPACK_IMPORTED_MODULE_4__.concatArrays(this.tag, this.logic);\n        const sig = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.sign(toBeSigned, secretKey);\n        return sig;\n    }\n    singleSignMultisig(secretKey, msig) {\n        let index = -1;\n        const myPk = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.keyPairFromSecretKey(secretKey).publicKey;\n        for(let i = 0; i < msig.subsig.length; i++){\n            const { pk } = msig.subsig[i];\n            if (_utils_utils__WEBPACK_IMPORTED_MODULE_4__.arrayEqual(pk, myPk)) {\n                index = i;\n                break;\n            }\n        }\n        if (index === -1) {\n            throw new Error(\"invalid secret key\");\n        }\n        const sig = this.signProgram(secretKey);\n        return [\n            sig,\n            index\n        ];\n    }\n    toByte() {\n        return _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(this.get_obj_for_encoding());\n    }\n    static fromByte(encoded) {\n        const decodedObj = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(encoded);\n        return LogicSig.from_obj_for_encoding(decodedObj);\n    }\n}\n/**\n * Represents an account that can sign with a LogicSig program.\n */ class LogicSigAccount {\n    /**\n     * Create a new LogicSigAccount. By default this will create an escrow\n     * LogicSig account. Call `sign` or `signMultisig` on the newly created\n     * LogicSigAccount to make it a delegated account.\n     *\n     * @param program - The compiled TEAL program which contains the logic for\n     *   this LogicSig.\n     * @param args - An optional array of arguments for the program.\n     */ constructor(program, args){\n        this.lsig = new LogicSig(program, args);\n        this.sigkey = undefined;\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        const obj = {\n            lsig: this.lsig.get_obj_for_encoding()\n        };\n        if (this.sigkey) {\n            obj.sigkey = this.sigkey;\n        }\n        return obj;\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(encoded) {\n        const lsigAccount = new LogicSigAccount(encoded.lsig.l, encoded.lsig.arg);\n        lsigAccount.lsig = LogicSig.from_obj_for_encoding(encoded.lsig);\n        lsigAccount.sigkey = encoded.sigkey;\n        return lsigAccount;\n    }\n    /**\n     * Encode this object into msgpack.\n     */ toByte() {\n        return _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(this.get_obj_for_encoding());\n    }\n    /**\n     * Decode a msgpack object into a LogicSigAccount.\n     * @param encoded - The encoded LogicSigAccount.\n     */ static fromByte(encoded) {\n        const decodedObj = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(encoded);\n        return LogicSigAccount.from_obj_for_encoding(decodedObj);\n    }\n    /**\n     * Check if this LogicSigAccount has been delegated to another account with a\n     * signature.\n     *\n     * Note this function only checks for the presence of a delegation signature.\n     * To verify the delegation signature, use `verify`.\n     */ isDelegated() {\n        return !!(this.lsig.sig || this.lsig.msig);\n    }\n    /**\n     * Verifies this LogicSig's program and signatures.\n     * @returns true if and only if the LogicSig program and signatures are valid.\n     */ verify() {\n        const addr = this.address();\n        return this.lsig.verify(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(addr).publicKey);\n    }\n    /**\n     * Get the address of this LogicSigAccount.\n     *\n     * If the LogicSig is delegated to another account, this will return the\n     * address of that account.\n     *\n     * If the LogicSig is not delegated to another account, this will return an\n     *  escrow address that is the hash of the LogicSig's program code.\n     */ address() {\n        if (this.lsig.sig && this.lsig.msig) {\n            throw new Error(\"LogicSig has too many signatures. At most one of sig or msig may be present\");\n        }\n        if (this.lsig.sig) {\n            if (!this.sigkey) {\n                throw new Error(\"Signing key for delegated account is missing\");\n            }\n            return _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(this.sigkey);\n        }\n        if (this.lsig.msig) {\n            const msigMetadata = {\n                version: this.lsig.msig.v,\n                threshold: this.lsig.msig.thr,\n                pks: this.lsig.msig.subsig.map((subsig)=>subsig.pk)\n            };\n            return _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImg(msigMetadata));\n        }\n        return this.lsig.address();\n    }\n    /**\n     * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig\n     * has the authority to sign transactions on behalf of another account, called\n     * the delegating account. Use this function if the delegating account is a\n     * multisig account.\n     *\n     * @param msig - The multisig delegating account\n     * @param secretKey - The secret key of one of the members of the delegating\n     *   multisig account. Use `appendToMultisig` to add additional signatures\n     *   from other members.\n     */ signMultisig(msig, secretKey) {\n        this.lsig.sign(secretKey, msig);\n    }\n    /**\n     * Adds an additional signature from a member of the delegating multisig\n     * account.\n     *\n     * @param secretKey - The secret key of one of the members of the delegating\n     *   multisig account.\n     */ appendToMultisig(secretKey) {\n        this.lsig.appendToMultisig(secretKey);\n    }\n    /**\n     * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig\n     * has the authority to sign transactions on behalf of another account, called\n     * the delegating account. If the delegating account is a multisig account,\n     * use `signMultisig` instead.\n     *\n     * @param secretKey - The secret key of the delegating account.\n     */ sign(secretKey) {\n        this.lsig.sign(secretKey);\n        this.sigkey = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.keyPairFromSecretKey(secretKey).publicKey;\n    }\n}\n/**\n * makeLogicSig creates LogicSig object from program and arguments\n *\n * @deprecated Use new LogicSigAccount(...) instead\n *\n * @param program - Program to make LogicSig from\n * @param args - Arguments as array of Uint8Array\n * @returns LogicSig object\n */ function makeLogicSig(program, args) {\n    return new LogicSig(program, args);\n}\nfunction signLogicSigTransactionWithAddress(txn, lsig, lsigAddress) {\n    if (!lsig.verify(lsigAddress)) {\n        throw new Error(\"Logic signature verification failed. Ensure the program and signature are valid.\");\n    }\n    const signedTxn = {\n        lsig: lsig.get_obj_for_encoding(),\n        txn: txn.get_obj_for_encoding()\n    };\n    if (!_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.bytesEqual(lsigAddress, txn.from.publicKey)) {\n        signedTxn.sgnr = Buffer.from(lsigAddress);\n    }\n    return {\n        txID: txn.txID().toString(),\n        blob: _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(signedTxn)\n    };\n}\n/**\n * signLogicSigTransactionObject takes a transaction and a LogicSig object and\n * returns a signed transaction.\n *\n * @param txn - The transaction to sign.\n * @param lsigObject - The LogicSig object that will sign the transaction.\n *\n * @returns Object containing txID and blob representing signed transaction.\n */ function signLogicSigTransactionObject(txn, lsigObject) {\n    let lsig;\n    let lsigAddress;\n    if (lsigObject instanceof LogicSigAccount) {\n        lsig = lsigObject.lsig;\n        lsigAddress = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(lsigObject.address()).publicKey;\n    } else {\n        lsig = lsigObject;\n        if (lsig.sig) {\n            // For a LogicSig with a non-multisig delegating account, we cannot derive\n            // the address of that account from only its signature, so assume the\n            // delegating account is the sender. If that's not the case, the signing\n            // will fail.\n            lsigAddress = txn.from.publicKey;\n        } else if (lsig.msig) {\n            const msigMetadata = {\n                version: lsig.msig.v,\n                threshold: lsig.msig.thr,\n                pks: lsig.msig.subsig.map((subsig)=>subsig.pk)\n            };\n            lsigAddress = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImg(msigMetadata);\n        } else {\n            lsigAddress = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(lsig.address()).publicKey;\n        }\n    }\n    return signLogicSigTransactionWithAddress(txn, lsig, lsigAddress);\n}\n/**\n * signLogicSigTransaction takes a transaction and a LogicSig object and returns\n * a signed transaction.\n *\n * @param txn - The transaction to sign.\n * @param lsigObject - The LogicSig object that will sign the transaction.\n *\n * @returns Object containing txID and blob representing signed transaction.\n * @throws error on failure\n */ function signLogicSigTransaction(txn, lsigObject) {\n    const algoTxn = _transaction__WEBPACK_IMPORTED_MODULE_5__.instantiateTxnIfNeeded(txn);\n    return signLogicSigTransactionObject(algoTxn, lsigObject);\n}\n/**\n * logicSigFromByte accepts encoded logic sig bytes and attempts to call logicsig.fromByte on it,\n * returning the result\n */ function logicSigFromByte(encoded) {\n    return LogicSig.fromByte(encoded);\n}\nconst SIGN_PROGRAM_DATA_PREFIX = Buffer.from(\"ProgData\");\n/**\n * tealSign creates a signature compatible with ed25519verify opcode from program hash\n * @param sk - uint8array with secret key\n * @param data - buffer with data to sign\n * @param programHash - string representation of teal program hash (= contract address for LogicSigs)\n */ function tealSign(sk, data, programHash) {\n    const parts = _utils_utils__WEBPACK_IMPORTED_MODULE_4__.concatArrays(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(programHash).publicKey, data);\n    const toBeSigned = Buffer.from(_utils_utils__WEBPACK_IMPORTED_MODULE_4__.concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts));\n    return _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.sign(toBeSigned, sk);\n}\n/**\n * tealSignFromProgram creates a signature compatible with ed25519verify opcode from raw program bytes\n * @param sk - uint8array with secret key\n * @param data - buffer with data to sign\n * @param program - buffer with teal program\n */ function tealSignFromProgram(sk, data, program) {\n    const lsig = new LogicSig(program);\n    const contractAddress = lsig.address();\n    return tealSign(sk, data, contractAddress);\n} //# sourceMappingURL=logicsig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbG9naWNzaWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRDO0FBQ0U7QUFDRTtBQUNKO0FBQ0w7QUFDSztBQUNRO0FBQ3BEOzs7O0NBSUMsR0FDTSxTQUFTTyxtQkFBbUJDLE9BQU87SUFDdEMsSUFBSSxDQUFDQSxXQUFXQSxRQUFRQyxNQUFNLEtBQUssR0FDL0IsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCLE1BQU1DLGVBQWUsS0FBS0MsVUFBVSxDQUFDO0lBQ3JDLE1BQU1DLGdCQUFnQixJQUFJRCxVQUFVLENBQUM7SUFDckMsTUFBTUUsV0FBVyxJQUFJRixVQUFVLENBQUM7SUFDaEMsTUFBTUcsY0FBYyxDQUFDQyxJQUFNSCxpQkFBaUJHLEtBQUtBLEtBQUtGO0lBQ3RELE1BQU1HLG1CQUFtQlQsUUFBUVUsS0FBSyxDQUFDLENBQUNGLElBQU1BLE1BQU1MLGdCQUFnQkksWUFBWUM7SUFDaEYsSUFBSUMsa0JBQWtCO1FBQ2xCLE1BQU1FLGFBQWFDLE9BQU9DLElBQUksQ0FBQ2IsU0FBU2MsUUFBUTtRQUNoRCxJQUFJaEIsaUVBQWNBLENBQUNhLGFBQ2YsTUFBTSxJQUFJVCxNQUFNO1FBQ3BCLElBQUlVLE9BQU9DLElBQUksQ0FBQ0YsWUFBWSxVQUFVRyxRQUFRLENBQUMsY0FBY0gsWUFDekQsTUFBTSxJQUFJVCxNQUFNO1FBQ3BCLE1BQU0sSUFBSUEsTUFBTTtJQUNwQjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNYTtJQUNUQyxZQUFZaEIsT0FBTyxFQUFFaUIsV0FBVyxDQUFFO1FBQzlCLElBQUksQ0FBQ0MsR0FBRyxHQUFHTixPQUFPQyxJQUFJLENBQUM7UUFDdkIsSUFBSUksZUFDQyxFQUFDRSxNQUFNQyxPQUFPLENBQUNILGdCQUNaLENBQUNBLFlBQVlQLEtBQUssQ0FBQyxDQUFDVyxNQUFRQSxJQUFJTCxXQUFXLEtBQUtNLGNBQWNWLE9BQU9XLFFBQVEsQ0FBQ0YsS0FBSSxHQUFJO1lBQzFGLE1BQU0sSUFBSUcsVUFBVTtRQUN4QjtRQUNBLElBQUlDO1FBQ0osSUFBSVIsZUFBZSxNQUNmUSxPQUFPUixZQUFZUyxHQUFHLENBQUMsQ0FBQ0wsTUFBUSxJQUFJQyxXQUFXRDtRQUNuRHRCLG1CQUFtQkM7UUFDbkIsSUFBSSxDQUFDMkIsS0FBSyxHQUFHM0I7UUFDYixJQUFJLENBQUN5QixJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDRyxHQUFHLEdBQUdDO1FBQ1gsSUFBSSxDQUFDQyxJQUFJLEdBQUdEO0lBQ2hCO0lBQ0EscUNBQXFDO0lBQ3JDRSx1QkFBdUI7UUFDbkIsTUFBTUMsTUFBTTtZQUNSQyxHQUFHLElBQUksQ0FBQ04sS0FBSztRQUNqQjtRQUNBLElBQUksSUFBSSxDQUFDRixJQUFJLEVBQUU7WUFDWE8sSUFBSVgsR0FBRyxHQUFHLElBQUksQ0FBQ0ksSUFBSTtRQUN2QjtRQUNBLElBQUksSUFBSSxDQUFDRyxHQUFHLEVBQUU7WUFDVkksSUFBSUosR0FBRyxHQUFHLElBQUksQ0FBQ0EsR0FBRztRQUN0QixPQUNLLElBQUksSUFBSSxDQUFDRSxJQUFJLEVBQUU7WUFDaEJFLElBQUlGLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUk7UUFDeEI7UUFDQSxPQUFPRTtJQUNYO0lBQ0EscUNBQXFDO0lBQ3JDLE9BQU9FLHNCQUFzQkMsT0FBTyxFQUFFO1FBQ2xDLE1BQU1DLE9BQU8sSUFBSXJCLFNBQVNvQixRQUFRRixDQUFDLEVBQUVFLFFBQVFkLEdBQUc7UUFDaERlLEtBQUtSLEdBQUcsR0FBR08sUUFBUVAsR0FBRztRQUN0QlEsS0FBS04sSUFBSSxHQUFHSyxRQUFRTCxJQUFJO1FBQ3hCLE9BQU9NO0lBQ1g7SUFDQTs7O0tBR0MsR0FDREMsT0FBT0MsU0FBUyxFQUFFO1FBQ2QsSUFBSSxJQUFJLENBQUNWLEdBQUcsSUFBSSxJQUFJLENBQUNFLElBQUksRUFBRTtZQUN2QixPQUFPO1FBQ1g7UUFDQSxJQUFJO1lBQ0EvQixtQkFBbUIsSUFBSSxDQUFDNEIsS0FBSztRQUNqQyxFQUNBLE9BQU9ZLEdBQUc7WUFDTixPQUFPO1FBQ1g7UUFDQSxNQUFNQyxhQUFhNUMsc0RBQWtCLENBQUMsSUFBSSxDQUFDc0IsR0FBRyxFQUFFLElBQUksQ0FBQ1MsS0FBSztRQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUNFLElBQUksRUFBRTtZQUN6QixNQUFNWSxPQUFPbEQsMkRBQWdCLENBQUNnRDtZQUM5QixPQUFPNUMsb0RBQWdCLENBQUM4QyxNQUFNSjtRQUNsQztRQUNBLElBQUksSUFBSSxDQUFDVixHQUFHLEVBQUU7WUFDVixPQUFPcEMsc0RBQVcsQ0FBQ2dELFlBQVksSUFBSSxDQUFDWixHQUFHLEVBQUVVO1FBQzdDO1FBQ0EsT0FBTzNDLHlEQUFjQSxDQUFDNkMsWUFBWSxJQUFJLENBQUNWLElBQUksRUFBRVE7SUFDakQ7SUFDQTs7O0tBR0MsR0FDRDdDLFVBQVU7UUFDTixNQUFNK0MsYUFBYTVDLHNEQUFrQixDQUFDLElBQUksQ0FBQ3NCLEdBQUcsRUFBRSxJQUFJLENBQUNTLEtBQUs7UUFDMUQsTUFBTWUsT0FBT2xELDJEQUFnQixDQUFDZ0Q7UUFDOUIsT0FBTy9DLDREQUFxQixDQUFDLElBQUk2QixXQUFXb0I7SUFDaEQ7SUFDQTs7OztLQUlDLEdBQ0RJLEtBQUtDLFNBQVMsRUFBRWpCLElBQUksRUFBRTtRQUNsQixJQUFJQSxRQUFRLE1BQU07WUFDZCxJQUFJLENBQUNGLEdBQUcsR0FBRyxJQUFJLENBQUNvQixXQUFXLENBQUNEO1FBQ2hDLE9BQ0s7WUFDRCxNQUFNRSxVQUFVbkIsS0FBS29CLEtBQUssQ0FBQ3hCLEdBQUcsQ0FBQyxDQUFDeUIsT0FBVTtvQkFDdENDLElBQUkzRCw0REFBcUIsQ0FBQzBELE1BQU1iLFNBQVM7Z0JBQzdDO1lBQ0EsSUFBSSxDQUFDUixJQUFJLEdBQUc7Z0JBQ1J3QixHQUFHeEIsS0FBS3lCLE9BQU87Z0JBQ2ZDLEtBQUsxQixLQUFLMkIsU0FBUztnQkFDbkJDLFFBQVFUO1lBQ1o7WUFDQSxNQUFNLENBQUNyQixLQUFLK0IsTUFBTSxHQUFHLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNiLFdBQVcsSUFBSSxDQUFDakIsSUFBSTtZQUNqRSxJQUFJLENBQUNBLElBQUksQ0FBQzRCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDRSxDQUFDLEdBQUdqQztRQUNoQztJQUNKO0lBQ0E7OztLQUdDLEdBQ0RrQyxpQkFBaUJmLFNBQVMsRUFBRTtRQUN4QixJQUFJLElBQUksQ0FBQ2pCLElBQUksS0FBS0QsV0FBVztZQUN6QixNQUFNLElBQUkzQixNQUFNO1FBQ3BCO1FBQ0EsTUFBTSxDQUFDMEIsS0FBSytCLE1BQU0sR0FBRyxJQUFJLENBQUNDLGtCQUFrQixDQUFDYixXQUFXLElBQUksQ0FBQ2pCLElBQUk7UUFDakUsSUFBSSxDQUFDQSxJQUFJLENBQUM0QixNQUFNLENBQUNDLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHakM7SUFDaEM7SUFDQW9CLFlBQVlELFNBQVMsRUFBRTtRQUNuQixNQUFNUCxhQUFhNUMsc0RBQWtCLENBQUMsSUFBSSxDQUFDc0IsR0FBRyxFQUFFLElBQUksQ0FBQ1MsS0FBSztRQUMxRCxNQUFNQyxNQUFNcEMsb0RBQVMsQ0FBQ2dELFlBQVlPO1FBQ2xDLE9BQU9uQjtJQUNYO0lBQ0FnQyxtQkFBbUJiLFNBQVMsRUFBRWpCLElBQUksRUFBRTtRQUNoQyxJQUFJNkIsUUFBUSxDQUFDO1FBQ2IsTUFBTUksT0FBT3ZFLG9FQUF5QixDQUFDdUQsV0FBV1QsU0FBUztRQUMzRCxJQUFLLElBQUkyQixJQUFJLEdBQUdBLElBQUluQyxLQUFLNEIsTUFBTSxDQUFDekQsTUFBTSxFQUFFZ0UsSUFBSztZQUN6QyxNQUFNLEVBQUViLEVBQUUsRUFBRSxHQUFHdEIsS0FBSzRCLE1BQU0sQ0FBQ08sRUFBRTtZQUM3QixJQUFJckUsb0RBQWdCLENBQUN3RCxJQUFJVyxPQUFPO2dCQUM1QkosUUFBUU07Z0JBQ1I7WUFDSjtRQUNKO1FBQ0EsSUFBSU4sVUFBVSxDQUFDLEdBQUc7WUFDZCxNQUFNLElBQUl6RCxNQUFNO1FBQ3BCO1FBQ0EsTUFBTTBCLE1BQU0sSUFBSSxDQUFDb0IsV0FBVyxDQUFDRDtRQUM3QixPQUFPO1lBQUNuQjtZQUFLK0I7U0FBTTtJQUN2QjtJQUNBTyxTQUFTO1FBQ0wsT0FBT3hFLHNEQUFlLENBQUMsSUFBSSxDQUFDcUMsb0JBQW9CO0lBQ3BEO0lBQ0EsT0FBT3FDLFNBQVNqQyxPQUFPLEVBQUU7UUFDckIsTUFBTWtDLGFBQWEzRSxzREFBZSxDQUFDeUM7UUFDbkMsT0FBT3BCLFNBQVNtQixxQkFBcUIsQ0FBQ21DO0lBQzFDO0FBQ0o7QUFDQTs7Q0FFQyxHQUNNLE1BQU1FO0lBQ1Q7Ozs7Ozs7O0tBUUMsR0FDRHZELFlBQVloQixPQUFPLEVBQUV5QixJQUFJLENBQUU7UUFDdkIsSUFBSSxDQUFDVyxJQUFJLEdBQUcsSUFBSXJCLFNBQVNmLFNBQVN5QjtRQUNsQyxJQUFJLENBQUMrQyxNQUFNLEdBQUczQztJQUNsQjtJQUNBLHFDQUFxQztJQUNyQ0UsdUJBQXVCO1FBQ25CLE1BQU1DLE1BQU07WUFDUkksTUFBTSxJQUFJLENBQUNBLElBQUksQ0FBQ0wsb0JBQW9CO1FBQ3hDO1FBQ0EsSUFBSSxJQUFJLENBQUN5QyxNQUFNLEVBQUU7WUFDYnhDLElBQUl3QyxNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNO1FBQzVCO1FBQ0EsT0FBT3hDO0lBQ1g7SUFDQSxxQ0FBcUM7SUFDckMsT0FBT0Usc0JBQXNCQyxPQUFPLEVBQUU7UUFDbEMsTUFBTXNDLGNBQWMsSUFBSUYsZ0JBQWdCcEMsUUFBUUMsSUFBSSxDQUFDSCxDQUFDLEVBQUVFLFFBQVFDLElBQUksQ0FBQ2YsR0FBRztRQUN4RW9ELFlBQVlyQyxJQUFJLEdBQUdyQixTQUFTbUIscUJBQXFCLENBQUNDLFFBQVFDLElBQUk7UUFDOURxQyxZQUFZRCxNQUFNLEdBQUdyQyxRQUFRcUMsTUFBTTtRQUNuQyxPQUFPQztJQUNYO0lBQ0E7O0tBRUMsR0FDRFAsU0FBUztRQUNMLE9BQU94RSxzREFBZSxDQUFDLElBQUksQ0FBQ3FDLG9CQUFvQjtJQUNwRDtJQUNBOzs7S0FHQyxHQUNELE9BQU9xQyxTQUFTakMsT0FBTyxFQUFFO1FBQ3JCLE1BQU1rQyxhQUFhM0Usc0RBQWUsQ0FBQ3lDO1FBQ25DLE9BQU9vQyxnQkFBZ0JyQyxxQkFBcUIsQ0FBQ21DO0lBQ2pEO0lBQ0E7Ozs7OztLQU1DLEdBQ0RLLGNBQWM7UUFDVixPQUFPLENBQUMsQ0FBRSxLQUFJLENBQUN0QyxJQUFJLENBQUNSLEdBQUcsSUFBSSxJQUFJLENBQUNRLElBQUksQ0FBQ04sSUFBSTtJQUM3QztJQUNBOzs7S0FHQyxHQUNETyxTQUFTO1FBQ0wsTUFBTWMsT0FBTyxJQUFJLENBQUMxRCxPQUFPO1FBQ3pCLE9BQU8sSUFBSSxDQUFDMkMsSUFBSSxDQUFDQyxNQUFNLENBQUM1Qyw0REFBcUIsQ0FBQzBELE1BQU1iLFNBQVM7SUFDakU7SUFDQTs7Ozs7Ozs7S0FRQyxHQUNEN0MsVUFBVTtRQUNOLElBQUksSUFBSSxDQUFDMkMsSUFBSSxDQUFDUixHQUFHLElBQUksSUFBSSxDQUFDUSxJQUFJLENBQUNOLElBQUksRUFBRTtZQUNqQyxNQUFNLElBQUk1QixNQUFNO1FBQ3BCO1FBQ0EsSUFBSSxJQUFJLENBQUNrQyxJQUFJLENBQUNSLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQyxJQUFJLENBQUM0QyxNQUFNLEVBQUU7Z0JBQ2QsTUFBTSxJQUFJdEUsTUFBTTtZQUNwQjtZQUNBLE9BQU9ULDREQUFxQixDQUFDLElBQUksQ0FBQytFLE1BQU07UUFDNUM7UUFDQSxJQUFJLElBQUksQ0FBQ3BDLElBQUksQ0FBQ04sSUFBSSxFQUFFO1lBQ2hCLE1BQU02QyxlQUFlO2dCQUNqQnBCLFNBQVMsSUFBSSxDQUFDbkIsSUFBSSxDQUFDTixJQUFJLENBQUN3QixDQUFDO2dCQUN6QkcsV0FBVyxJQUFJLENBQUNyQixJQUFJLENBQUNOLElBQUksQ0FBQzBCLEdBQUc7Z0JBQzdCb0IsS0FBSyxJQUFJLENBQUN4QyxJQUFJLENBQUNOLElBQUksQ0FBQzRCLE1BQU0sQ0FBQ2hDLEdBQUcsQ0FBQyxDQUFDZ0MsU0FBV0EsT0FBT04sRUFBRTtZQUN4RDtZQUNBLE9BQU8zRCw0REFBcUIsQ0FBQ0EsaUVBQTBCLENBQUNrRjtRQUM1RDtRQUNBLE9BQU8sSUFBSSxDQUFDdkMsSUFBSSxDQUFDM0MsT0FBTztJQUM1QjtJQUNBOzs7Ozs7Ozs7O0tBVUMsR0FDRHFGLGFBQWFoRCxJQUFJLEVBQUVpQixTQUFTLEVBQUU7UUFDMUIsSUFBSSxDQUFDWCxJQUFJLENBQUNVLElBQUksQ0FBQ0MsV0FBV2pCO0lBQzlCO0lBQ0E7Ozs7OztLQU1DLEdBQ0RnQyxpQkFBaUJmLFNBQVMsRUFBRTtRQUN4QixJQUFJLENBQUNYLElBQUksQ0FBQzBCLGdCQUFnQixDQUFDZjtJQUMvQjtJQUNBOzs7Ozs7O0tBT0MsR0FDREQsS0FBS0MsU0FBUyxFQUFFO1FBQ1osSUFBSSxDQUFDWCxJQUFJLENBQUNVLElBQUksQ0FBQ0M7UUFDZixJQUFJLENBQUN5QixNQUFNLEdBQUdoRixvRUFBeUIsQ0FBQ3VELFdBQVdULFNBQVM7SUFDaEU7QUFDSjtBQUNBOzs7Ozs7OztDQVFDLEdBQ00sU0FBU3lDLGFBQWEvRSxPQUFPLEVBQUV5QixJQUFJO0lBQ3RDLE9BQU8sSUFBSVYsU0FBU2YsU0FBU3lCO0FBQ2pDO0FBQ0EsU0FBU3VELG1DQUFtQ0MsR0FBRyxFQUFFN0MsSUFBSSxFQUFFOEMsV0FBVztJQUM5RCxJQUFJLENBQUM5QyxLQUFLQyxNQUFNLENBQUM2QyxjQUFjO1FBQzNCLE1BQU0sSUFBSWhGLE1BQU07SUFDcEI7SUFDQSxNQUFNaUYsWUFBWTtRQUNkL0MsTUFBTUEsS0FBS0wsb0JBQW9CO1FBQy9Ca0QsS0FBS0EsSUFBSWxELG9CQUFvQjtJQUNqQztJQUNBLElBQUksQ0FBQ3ZDLDBEQUFlLENBQUMwRixhQUFhRCxJQUFJcEUsSUFBSSxDQUFDeUIsU0FBUyxHQUFHO1FBQ25ENkMsVUFBVUUsSUFBSSxHQUFHekUsT0FBT0MsSUFBSSxDQUFDcUU7SUFDakM7SUFDQSxPQUFPO1FBQ0hJLE1BQU1MLElBQUlLLElBQUksR0FBR3hFLFFBQVE7UUFDekJ5RSxNQUFNN0Ysc0RBQWUsQ0FBQ3lGO0lBQzFCO0FBQ0o7QUFDQTs7Ozs7Ozs7Q0FRQyxHQUNNLFNBQVNLLDhCQUE4QlAsR0FBRyxFQUFFUSxVQUFVO0lBQ3pELElBQUlyRDtJQUNKLElBQUk4QztJQUNKLElBQUlPLHNCQUFzQmxCLGlCQUFpQjtRQUN2Q25DLE9BQU9xRCxXQUFXckQsSUFBSTtRQUN0QjhDLGNBQWN6Riw0REFBcUIsQ0FBQ2dHLFdBQVdoRyxPQUFPLElBQUk2QyxTQUFTO0lBQ3ZFLE9BQ0s7UUFDREYsT0FBT3FEO1FBQ1AsSUFBSXJELEtBQUtSLEdBQUcsRUFBRTtZQUNWLDBFQUEwRTtZQUMxRSxxRUFBcUU7WUFDckUsd0VBQXdFO1lBQ3hFLGFBQWE7WUFDYnNELGNBQWNELElBQUlwRSxJQUFJLENBQUN5QixTQUFTO1FBQ3BDLE9BQ0ssSUFBSUYsS0FBS04sSUFBSSxFQUFFO1lBQ2hCLE1BQU02QyxlQUFlO2dCQUNqQnBCLFNBQVNuQixLQUFLTixJQUFJLENBQUN3QixDQUFDO2dCQUNwQkcsV0FBV3JCLEtBQUtOLElBQUksQ0FBQzBCLEdBQUc7Z0JBQ3hCb0IsS0FBS3hDLEtBQUtOLElBQUksQ0FBQzRCLE1BQU0sQ0FBQ2hDLEdBQUcsQ0FBQyxDQUFDZ0MsU0FBV0EsT0FBT04sRUFBRTtZQUNuRDtZQUNBOEIsY0FBY3pGLGlFQUEwQixDQUFDa0Y7UUFDN0MsT0FDSztZQUNETyxjQUFjekYsNERBQXFCLENBQUMyQyxLQUFLM0MsT0FBTyxJQUFJNkMsU0FBUztRQUNqRTtJQUNKO0lBQ0EsT0FBTzBDLG1DQUFtQ0MsS0FBSzdDLE1BQU04QztBQUN6RDtBQUNBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNRLHdCQUF3QlQsR0FBRyxFQUFFUSxVQUFVO0lBQ25ELE1BQU1FLFVBQVU5RixnRUFBaUMsQ0FBQ29GO0lBQ2xELE9BQU9PLDhCQUE4QkcsU0FBU0Y7QUFDbEQ7QUFDQTs7O0NBR0MsR0FDTSxTQUFTSSxpQkFBaUIxRCxPQUFPO0lBQ3BDLE9BQU9wQixTQUFTcUQsUUFBUSxDQUFDakM7QUFDN0I7QUFDQSxNQUFNMkQsMkJBQTJCbEYsT0FBT0MsSUFBSSxDQUFDO0FBQzdDOzs7OztDQUtDLEdBQ00sU0FBU2tGLFNBQVNDLEVBQUUsRUFBRUMsSUFBSSxFQUFFQyxXQUFXO0lBQzFDLE1BQU1DLFFBQVF2RyxzREFBa0IsQ0FBQ0gsNERBQXFCLENBQUN5RyxhQUFhNUQsU0FBUyxFQUFFMkQ7SUFDL0UsTUFBTXpELGFBQWE1QixPQUFPQyxJQUFJLENBQUNqQixzREFBa0IsQ0FBQ2tHLDBCQUEwQks7SUFDNUUsT0FBTzNHLG9EQUFTLENBQUNnRCxZQUFZd0Q7QUFDakM7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNJLG9CQUFvQkosRUFBRSxFQUFFQyxJQUFJLEVBQUVqRyxPQUFPO0lBQ2pELE1BQU1vQyxPQUFPLElBQUlyQixTQUFTZjtJQUMxQixNQUFNcUcsa0JBQWtCakUsS0FBSzNDLE9BQU87SUFDcEMsT0FBT3NHLFNBQVNDLElBQUlDLE1BQU1JO0FBQzlCLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9sb2dpY3NpZy5qcz9lY2ZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5hY2wgZnJvbSAnLi9uYWNsL25hY2xXcmFwcGVycyc7XG5pbXBvcnQgKiBhcyBhZGRyZXNzIGZyb20gJy4vZW5jb2RpbmcvYWRkcmVzcyc7XG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICcuL2VuY29kaW5nL2VuY29kaW5nJztcbmltcG9ydCB7IHZlcmlmeU11bHRpc2lnIH0gZnJvbSAnLi9tdWx0aXNpZyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzL3V0aWxzJztcbmltcG9ydCAqIGFzIHR4bkJ1aWxkZXIgZnJvbSAnLi90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBpc1ZhbGlkQWRkcmVzcyB9IGZyb20gJy4vZW5jb2RpbmcvYWRkcmVzcyc7XG4vKiogc2FuaXR5Q2hlY2tQcm9ncmFtIHBlcmZvcm1zIGhldXJpc3RpYyBwcm9ncmFtIHZhbGlkYXRpb246XG4gKiBjaGVjayBpZiBwYXNzZWQgaW4gYnl0ZXMgYXJlIEFsZ29yYW5kIGFkZHJlc3Mgb3IgaXMgQjY0IGVuY29kZWQsIHJhdGhlciB0aGFuIFRlYWwgYnl0ZXNcbiAqXG4gKiBAcGFyYW0gcHJvZ3JhbSAtIFByb2dyYW0gYnl0ZXMgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhbml0eUNoZWNrUHJvZ3JhbShwcm9ncmFtKSB7XG4gICAgaWYgKCFwcm9ncmFtIHx8IHByb2dyYW0ubGVuZ3RoID09PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VtcHR5IHByb2dyYW0nKTtcbiAgICBjb25zdCBsaW5lQnJlYWtPcmQgPSAnXFxuJy5jaGFyQ29kZUF0KDApO1xuICAgIGNvbnN0IGJsYW5rU3BhY2VPcmQgPSAnICcuY2hhckNvZGVBdCgwKTtcbiAgICBjb25zdCB0aWxkZU9yZCA9ICd+Jy5jaGFyQ29kZUF0KDApO1xuICAgIGNvbnN0IGlzUHJpbnRhYmxlID0gKHgpID0+IGJsYW5rU3BhY2VPcmQgPD0geCAmJiB4IDw9IHRpbGRlT3JkO1xuICAgIGNvbnN0IGlzQXNjaWlQcmludGFibGUgPSBwcm9ncmFtLmV2ZXJ5KCh4KSA9PiB4ID09PSBsaW5lQnJlYWtPcmQgfHwgaXNQcmludGFibGUoeCkpO1xuICAgIGlmIChpc0FzY2lpUHJpbnRhYmxlKSB7XG4gICAgICAgIGNvbnN0IHByb2dyYW1TdHIgPSBCdWZmZXIuZnJvbShwcm9ncmFtKS50b1N0cmluZygpO1xuICAgICAgICBpZiAoaXNWYWxpZEFkZHJlc3MocHJvZ3JhbVN0cikpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVlc3RpbmcgcHJvZ3JhbSBieXRlcywgZ2V0IEFsZ29yYW5kIGFkZHJlc3MnKTtcbiAgICAgICAgaWYgKEJ1ZmZlci5mcm9tKHByb2dyYW1TdHIsICdiYXNlNjQnKS50b1N0cmluZygnYmFzZTY0JykgPT09IHByb2dyYW1TdHIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2dyYW0gc2hvdWxkIG5vdCBiZSBiNjQgZW5jb2RlZCcpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2dyYW0gYnl0ZXMgYXJlIGFsbCBBU0NJSSBwcmludGFibGUgY2hhcmFjdGVycywgbm90IGxvb2tpbmcgbGlrZSBUZWFsIGJ5dGUgY29kZScpO1xuICAgIH1cbn1cbi8qKlxuIExvZ2ljU2lnIGltcGxlbWVudGF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dpY1NpZyB7XG4gICAgY29uc3RydWN0b3IocHJvZ3JhbSwgcHJvZ3JhbUFyZ3MpIHtcbiAgICAgICAgdGhpcy50YWcgPSBCdWZmZXIuZnJvbSgnUHJvZ3JhbScpO1xuICAgICAgICBpZiAocHJvZ3JhbUFyZ3MgJiZcbiAgICAgICAgICAgICghQXJyYXkuaXNBcnJheShwcm9ncmFtQXJncykgfHxcbiAgICAgICAgICAgICAgICAhcHJvZ3JhbUFyZ3MuZXZlcnkoKGFyZykgPT4gYXJnLmNvbnN0cnVjdG9yID09PSBVaW50OEFycmF5IHx8IEJ1ZmZlci5pc0J1ZmZlcihhcmcpKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFyZ3M7XG4gICAgICAgIGlmIChwcm9ncmFtQXJncyAhPSBudWxsKVxuICAgICAgICAgICAgYXJncyA9IHByb2dyYW1BcmdzLm1hcCgoYXJnKSA9PiBuZXcgVWludDhBcnJheShhcmcpKTtcbiAgICAgICAgc2FuaXR5Q2hlY2tQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICB0aGlzLmxvZ2ljID0gcHJvZ3JhbTtcbiAgICAgICAgdGhpcy5hcmdzID0gYXJncztcbiAgICAgICAgdGhpcy5zaWcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubXNpZyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIGdldF9vYmpfZm9yX2VuY29kaW5nKCkge1xuICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICBsOiB0aGlzLmxvZ2ljLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5hcmdzKSB7XG4gICAgICAgICAgICBvYmouYXJnID0gdGhpcy5hcmdzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNpZykge1xuICAgICAgICAgICAgb2JqLnNpZyA9IHRoaXMuc2lnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubXNpZykge1xuICAgICAgICAgICAgb2JqLm1zaWcgPSB0aGlzLm1zaWc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIHN0YXRpYyBmcm9tX29ial9mb3JfZW5jb2RpbmcoZW5jb2RlZCkge1xuICAgICAgICBjb25zdCBsc2lnID0gbmV3IExvZ2ljU2lnKGVuY29kZWQubCwgZW5jb2RlZC5hcmcpO1xuICAgICAgICBsc2lnLnNpZyA9IGVuY29kZWQuc2lnO1xuICAgICAgICBsc2lnLm1zaWcgPSBlbmNvZGVkLm1zaWc7XG4gICAgICAgIHJldHVybiBsc2lnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBzaWduYXR1cmUgdmVyaWZpY2F0aW9uXG4gICAgICogQHBhcmFtIHB1YmxpY0tleSAtIFZlcmlmaWNhdGlvbiBrZXkgKGRlcml2ZWQgZnJvbSBzZW5kZXIgYWRkcmVzcyBvciBlc2Nyb3cgYWRkcmVzcylcbiAgICAgKi9cbiAgICB2ZXJpZnkocHVibGljS2V5KSB7XG4gICAgICAgIGlmICh0aGlzLnNpZyAmJiB0aGlzLm1zaWcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2FuaXR5Q2hlY2tQcm9ncmFtKHRoaXMubG9naWMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9CZVNpZ25lZCA9IHV0aWxzLmNvbmNhdEFycmF5cyh0aGlzLnRhZywgdGhpcy5sb2dpYyk7XG4gICAgICAgIGlmICghdGhpcy5zaWcgJiYgIXRoaXMubXNpZykge1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IG5hY2wuZ2VuZXJpY0hhc2godG9CZVNpZ25lZCk7XG4gICAgICAgICAgICByZXR1cm4gdXRpbHMuYXJyYXlFcXVhbChoYXNoLCBwdWJsaWNLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNpZykge1xuICAgICAgICAgICAgcmV0dXJuIG5hY2wudmVyaWZ5KHRvQmVTaWduZWQsIHRoaXMuc2lnLCBwdWJsaWNLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2ZXJpZnlNdWx0aXNpZyh0b0JlU2lnbmVkLCB0aGlzLm1zaWcsIHB1YmxpY0tleSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgaGFzaCBvZiB0aGUgbG9naWMgc2lnIHByb2dyYW0gKHRoYXQgaXMgdGhlIHNhbWUgYXMgZXNjcm93IGFjY291bnQgYWRkcmVzcykgYXMgc3RyaW5nIGFkZHJlc3NcbiAgICAgKiBAcmV0dXJucyBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFkZHJlc3NcbiAgICAgKi9cbiAgICBhZGRyZXNzKCkge1xuICAgICAgICBjb25zdCB0b0JlU2lnbmVkID0gdXRpbHMuY29uY2F0QXJyYXlzKHRoaXMudGFnLCB0aGlzLmxvZ2ljKTtcbiAgICAgICAgY29uc3QgaGFzaCA9IG5hY2wuZ2VuZXJpY0hhc2godG9CZVNpZ25lZCk7XG4gICAgICAgIHJldHVybiBhZGRyZXNzLmVuY29kZUFkZHJlc3MobmV3IFVpbnQ4QXJyYXkoaGFzaCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHNpZ25hdHVyZSAoaWYgbm8gbXNpZyBwcm92aWRlZCkgb3IgbXVsdGkgc2lnbmF0dXJlIG90aGVyd2lzZVxuICAgICAqIEBwYXJhbSBzZWNyZXRLZXkgLSBTZWNyZXQga2V5IHRvIHNpZ24gd2l0aFxuICAgICAqIEBwYXJhbSBtc2lnIC0gTXVsdGlzaWcgYWNjb3VudCBhcyBcXHt2ZXJzaW9uLCB0aHJlc2hvbGQsIGFkZHJzXFx9XG4gICAgICovXG4gICAgc2lnbihzZWNyZXRLZXksIG1zaWcpIHtcbiAgICAgICAgaWYgKG1zaWcgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zaWcgPSB0aGlzLnNpZ25Qcm9ncmFtKHNlY3JldEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdWJzaWdzID0gbXNpZy5hZGRycy5tYXAoKGFkZHIpID0+ICh7XG4gICAgICAgICAgICAgICAgcGs6IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhhZGRyKS5wdWJsaWNLZXksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB0aGlzLm1zaWcgPSB7XG4gICAgICAgICAgICAgICAgdjogbXNpZy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHRocjogbXNpZy50aHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgc3Vic2lnOiBzdWJzaWdzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IFtzaWcsIGluZGV4XSA9IHRoaXMuc2luZ2xlU2lnbk11bHRpc2lnKHNlY3JldEtleSwgdGhpcy5tc2lnKTtcbiAgICAgICAgICAgIHRoaXMubXNpZy5zdWJzaWdbaW5kZXhdLnMgPSBzaWc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBhIHNpZ25hdHVyZSB0byBtdWx0aSBzaWduYXR1cmVcbiAgICAgKiBAcGFyYW0gc2VjcmV0S2V5IC0gU2VjcmV0IGtleSB0byBzaWduIHdpdGhcbiAgICAgKi9cbiAgICBhcHBlbmRUb011bHRpc2lnKHNlY3JldEtleSkge1xuICAgICAgICBpZiAodGhpcy5tc2lnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gbXVsdGlzaWcgcHJlc2VudCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtzaWcsIGluZGV4XSA9IHRoaXMuc2luZ2xlU2lnbk11bHRpc2lnKHNlY3JldEtleSwgdGhpcy5tc2lnKTtcbiAgICAgICAgdGhpcy5tc2lnLnN1YnNpZ1tpbmRleF0ucyA9IHNpZztcbiAgICB9XG4gICAgc2lnblByb2dyYW0oc2VjcmV0S2V5KSB7XG4gICAgICAgIGNvbnN0IHRvQmVTaWduZWQgPSB1dGlscy5jb25jYXRBcnJheXModGhpcy50YWcsIHRoaXMubG9naWMpO1xuICAgICAgICBjb25zdCBzaWcgPSBuYWNsLnNpZ24odG9CZVNpZ25lZCwgc2VjcmV0S2V5KTtcbiAgICAgICAgcmV0dXJuIHNpZztcbiAgICB9XG4gICAgc2luZ2xlU2lnbk11bHRpc2lnKHNlY3JldEtleSwgbXNpZykge1xuICAgICAgICBsZXQgaW5kZXggPSAtMTtcbiAgICAgICAgY29uc3QgbXlQayA9IG5hY2wua2V5UGFpckZyb21TZWNyZXRLZXkoc2VjcmV0S2V5KS5wdWJsaWNLZXk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXNpZy5zdWJzaWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGsgfSA9IG1zaWcuc3Vic2lnW2ldO1xuICAgICAgICAgICAgaWYgKHV0aWxzLmFycmF5RXF1YWwocGssIG15UGspKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzZWNyZXQga2V5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lnID0gdGhpcy5zaWduUHJvZ3JhbShzZWNyZXRLZXkpO1xuICAgICAgICByZXR1cm4gW3NpZywgaW5kZXhdO1xuICAgIH1cbiAgICB0b0J5dGUoKSB7XG4gICAgICAgIHJldHVybiBlbmNvZGluZy5lbmNvZGUodGhpcy5nZXRfb2JqX2Zvcl9lbmNvZGluZygpKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CeXRlKGVuY29kZWQpIHtcbiAgICAgICAgY29uc3QgZGVjb2RlZE9iaiA9IGVuY29kaW5nLmRlY29kZShlbmNvZGVkKTtcbiAgICAgICAgcmV0dXJuIExvZ2ljU2lnLmZyb21fb2JqX2Zvcl9lbmNvZGluZyhkZWNvZGVkT2JqKTtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYWNjb3VudCB0aGF0IGNhbiBzaWduIHdpdGggYSBMb2dpY1NpZyBwcm9ncmFtLlxuICovXG5leHBvcnQgY2xhc3MgTG9naWNTaWdBY2NvdW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgTG9naWNTaWdBY2NvdW50LiBCeSBkZWZhdWx0IHRoaXMgd2lsbCBjcmVhdGUgYW4gZXNjcm93XG4gICAgICogTG9naWNTaWcgYWNjb3VudC4gQ2FsbCBgc2lnbmAgb3IgYHNpZ25NdWx0aXNpZ2Agb24gdGhlIG5ld2x5IGNyZWF0ZWRcbiAgICAgKiBMb2dpY1NpZ0FjY291bnQgdG8gbWFrZSBpdCBhIGRlbGVnYXRlZCBhY2NvdW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb2dyYW0gLSBUaGUgY29tcGlsZWQgVEVBTCBwcm9ncmFtIHdoaWNoIGNvbnRhaW5zIHRoZSBsb2dpYyBmb3JcbiAgICAgKiAgIHRoaXMgTG9naWNTaWcuXG4gICAgICogQHBhcmFtIGFyZ3MgLSBBbiBvcHRpb25hbCBhcnJheSBvZiBhcmd1bWVudHMgZm9yIHRoZSBwcm9ncmFtLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb2dyYW0sIGFyZ3MpIHtcbiAgICAgICAgdGhpcy5sc2lnID0gbmV3IExvZ2ljU2lnKHByb2dyYW0sIGFyZ3MpO1xuICAgICAgICB0aGlzLnNpZ2tleSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIGdldF9vYmpfZm9yX2VuY29kaW5nKCkge1xuICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICBsc2lnOiB0aGlzLmxzaWcuZ2V0X29ial9mb3JfZW5jb2RpbmcoKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuc2lna2V5KSB7XG4gICAgICAgICAgICBvYmouc2lna2V5ID0gdGhpcy5zaWdrZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIHN0YXRpYyBmcm9tX29ial9mb3JfZW5jb2RpbmcoZW5jb2RlZCkge1xuICAgICAgICBjb25zdCBsc2lnQWNjb3VudCA9IG5ldyBMb2dpY1NpZ0FjY291bnQoZW5jb2RlZC5sc2lnLmwsIGVuY29kZWQubHNpZy5hcmcpO1xuICAgICAgICBsc2lnQWNjb3VudC5sc2lnID0gTG9naWNTaWcuZnJvbV9vYmpfZm9yX2VuY29kaW5nKGVuY29kZWQubHNpZyk7XG4gICAgICAgIGxzaWdBY2NvdW50LnNpZ2tleSA9IGVuY29kZWQuc2lna2V5O1xuICAgICAgICByZXR1cm4gbHNpZ0FjY291bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSB0aGlzIG9iamVjdCBpbnRvIG1zZ3BhY2suXG4gICAgICovXG4gICAgdG9CeXRlKCkge1xuICAgICAgICByZXR1cm4gZW5jb2RpbmcuZW5jb2RlKHRoaXMuZ2V0X29ial9mb3JfZW5jb2RpbmcoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZSBhIG1zZ3BhY2sgb2JqZWN0IGludG8gYSBMb2dpY1NpZ0FjY291bnQuXG4gICAgICogQHBhcmFtIGVuY29kZWQgLSBUaGUgZW5jb2RlZCBMb2dpY1NpZ0FjY291bnQuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21CeXRlKGVuY29kZWQpIHtcbiAgICAgICAgY29uc3QgZGVjb2RlZE9iaiA9IGVuY29kaW5nLmRlY29kZShlbmNvZGVkKTtcbiAgICAgICAgcmV0dXJuIExvZ2ljU2lnQWNjb3VudC5mcm9tX29ial9mb3JfZW5jb2RpbmcoZGVjb2RlZE9iaik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoaXMgTG9naWNTaWdBY2NvdW50IGhhcyBiZWVuIGRlbGVnYXRlZCB0byBhbm90aGVyIGFjY291bnQgd2l0aCBhXG4gICAgICogc2lnbmF0dXJlLlxuICAgICAqXG4gICAgICogTm90ZSB0aGlzIGZ1bmN0aW9uIG9ubHkgY2hlY2tzIGZvciB0aGUgcHJlc2VuY2Ugb2YgYSBkZWxlZ2F0aW9uIHNpZ25hdHVyZS5cbiAgICAgKiBUbyB2ZXJpZnkgdGhlIGRlbGVnYXRpb24gc2lnbmF0dXJlLCB1c2UgYHZlcmlmeWAuXG4gICAgICovXG4gICAgaXNEZWxlZ2F0ZWQoKSB7XG4gICAgICAgIHJldHVybiAhISh0aGlzLmxzaWcuc2lnIHx8IHRoaXMubHNpZy5tc2lnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgdGhpcyBMb2dpY1NpZydzIHByb2dyYW0gYW5kIHNpZ25hdHVyZXMuXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBhbmQgb25seSBpZiB0aGUgTG9naWNTaWcgcHJvZ3JhbSBhbmQgc2lnbmF0dXJlcyBhcmUgdmFsaWQuXG4gICAgICovXG4gICAgdmVyaWZ5KCkge1xuICAgICAgICBjb25zdCBhZGRyID0gdGhpcy5hZGRyZXNzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmxzaWcudmVyaWZ5KGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhhZGRyKS5wdWJsaWNLZXkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFkZHJlc3Mgb2YgdGhpcyBMb2dpY1NpZ0FjY291bnQuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgTG9naWNTaWcgaXMgZGVsZWdhdGVkIHRvIGFub3RoZXIgYWNjb3VudCwgdGhpcyB3aWxsIHJldHVybiB0aGVcbiAgICAgKiBhZGRyZXNzIG9mIHRoYXQgYWNjb3VudC5cbiAgICAgKlxuICAgICAqIElmIHRoZSBMb2dpY1NpZyBpcyBub3QgZGVsZWdhdGVkIHRvIGFub3RoZXIgYWNjb3VudCwgdGhpcyB3aWxsIHJldHVybiBhblxuICAgICAqICBlc2Nyb3cgYWRkcmVzcyB0aGF0IGlzIHRoZSBoYXNoIG9mIHRoZSBMb2dpY1NpZydzIHByb2dyYW0gY29kZS5cbiAgICAgKi9cbiAgICBhZGRyZXNzKCkge1xuICAgICAgICBpZiAodGhpcy5sc2lnLnNpZyAmJiB0aGlzLmxzaWcubXNpZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dpY1NpZyBoYXMgdG9vIG1hbnkgc2lnbmF0dXJlcy4gQXQgbW9zdCBvbmUgb2Ygc2lnIG9yIG1zaWcgbWF5IGJlIHByZXNlbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sc2lnLnNpZykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNpZ2tleSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2lnbmluZyBrZXkgZm9yIGRlbGVnYXRlZCBhY2NvdW50IGlzIG1pc3NpbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhZGRyZXNzLmVuY29kZUFkZHJlc3ModGhpcy5zaWdrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxzaWcubXNpZykge1xuICAgICAgICAgICAgY29uc3QgbXNpZ01ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMubHNpZy5tc2lnLnYsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkOiB0aGlzLmxzaWcubXNpZy50aHIsXG4gICAgICAgICAgICAgICAgcGtzOiB0aGlzLmxzaWcubXNpZy5zdWJzaWcubWFwKChzdWJzaWcpID0+IHN1YnNpZy5wayksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhhZGRyZXNzLmZyb21NdWx0aXNpZ1ByZUltZyhtc2lnTWV0YWRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sc2lnLmFkZHJlc3MoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHVybnMgdGhpcyBMb2dpY1NpZ0FjY291bnQgaW50byBhIGRlbGVnYXRlZCBMb2dpY1NpZy4gVGhpcyB0eXBlIG9mIExvZ2ljU2lnXG4gICAgICogaGFzIHRoZSBhdXRob3JpdHkgdG8gc2lnbiB0cmFuc2FjdGlvbnMgb24gYmVoYWxmIG9mIGFub3RoZXIgYWNjb3VudCwgY2FsbGVkXG4gICAgICogdGhlIGRlbGVnYXRpbmcgYWNjb3VudC4gVXNlIHRoaXMgZnVuY3Rpb24gaWYgdGhlIGRlbGVnYXRpbmcgYWNjb3VudCBpcyBhXG4gICAgICogbXVsdGlzaWcgYWNjb3VudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtc2lnIC0gVGhlIG11bHRpc2lnIGRlbGVnYXRpbmcgYWNjb3VudFxuICAgICAqIEBwYXJhbSBzZWNyZXRLZXkgLSBUaGUgc2VjcmV0IGtleSBvZiBvbmUgb2YgdGhlIG1lbWJlcnMgb2YgdGhlIGRlbGVnYXRpbmdcbiAgICAgKiAgIG11bHRpc2lnIGFjY291bnQuIFVzZSBgYXBwZW5kVG9NdWx0aXNpZ2AgdG8gYWRkIGFkZGl0aW9uYWwgc2lnbmF0dXJlc1xuICAgICAqICAgZnJvbSBvdGhlciBtZW1iZXJzLlxuICAgICAqL1xuICAgIHNpZ25NdWx0aXNpZyhtc2lnLCBzZWNyZXRLZXkpIHtcbiAgICAgICAgdGhpcy5sc2lnLnNpZ24oc2VjcmV0S2V5LCBtc2lnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBhZGRpdGlvbmFsIHNpZ25hdHVyZSBmcm9tIGEgbWVtYmVyIG9mIHRoZSBkZWxlZ2F0aW5nIG11bHRpc2lnXG4gICAgICogYWNjb3VudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZWNyZXRLZXkgLSBUaGUgc2VjcmV0IGtleSBvZiBvbmUgb2YgdGhlIG1lbWJlcnMgb2YgdGhlIGRlbGVnYXRpbmdcbiAgICAgKiAgIG11bHRpc2lnIGFjY291bnQuXG4gICAgICovXG4gICAgYXBwZW5kVG9NdWx0aXNpZyhzZWNyZXRLZXkpIHtcbiAgICAgICAgdGhpcy5sc2lnLmFwcGVuZFRvTXVsdGlzaWcoc2VjcmV0S2V5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHVybnMgdGhpcyBMb2dpY1NpZ0FjY291bnQgaW50byBhIGRlbGVnYXRlZCBMb2dpY1NpZy4gVGhpcyB0eXBlIG9mIExvZ2ljU2lnXG4gICAgICogaGFzIHRoZSBhdXRob3JpdHkgdG8gc2lnbiB0cmFuc2FjdGlvbnMgb24gYmVoYWxmIG9mIGFub3RoZXIgYWNjb3VudCwgY2FsbGVkXG4gICAgICogdGhlIGRlbGVnYXRpbmcgYWNjb3VudC4gSWYgdGhlIGRlbGVnYXRpbmcgYWNjb3VudCBpcyBhIG11bHRpc2lnIGFjY291bnQsXG4gICAgICogdXNlIGBzaWduTXVsdGlzaWdgIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VjcmV0S2V5IC0gVGhlIHNlY3JldCBrZXkgb2YgdGhlIGRlbGVnYXRpbmcgYWNjb3VudC5cbiAgICAgKi9cbiAgICBzaWduKHNlY3JldEtleSkge1xuICAgICAgICB0aGlzLmxzaWcuc2lnbihzZWNyZXRLZXkpO1xuICAgICAgICB0aGlzLnNpZ2tleSA9IG5hY2wua2V5UGFpckZyb21TZWNyZXRLZXkoc2VjcmV0S2V5KS5wdWJsaWNLZXk7XG4gICAgfVxufVxuLyoqXG4gKiBtYWtlTG9naWNTaWcgY3JlYXRlcyBMb2dpY1NpZyBvYmplY3QgZnJvbSBwcm9ncmFtIGFuZCBhcmd1bWVudHNcbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgbmV3IExvZ2ljU2lnQWNjb3VudCguLi4pIGluc3RlYWRcbiAqXG4gKiBAcGFyYW0gcHJvZ3JhbSAtIFByb2dyYW0gdG8gbWFrZSBMb2dpY1NpZyBmcm9tXG4gKiBAcGFyYW0gYXJncyAtIEFyZ3VtZW50cyBhcyBhcnJheSBvZiBVaW50OEFycmF5XG4gKiBAcmV0dXJucyBMb2dpY1NpZyBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VMb2dpY1NpZyhwcm9ncmFtLCBhcmdzKSB7XG4gICAgcmV0dXJuIG5ldyBMb2dpY1NpZyhwcm9ncmFtLCBhcmdzKTtcbn1cbmZ1bmN0aW9uIHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uV2l0aEFkZHJlc3ModHhuLCBsc2lnLCBsc2lnQWRkcmVzcykge1xuICAgIGlmICghbHNpZy52ZXJpZnkobHNpZ0FkZHJlc3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTG9naWMgc2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWQuIEVuc3VyZSB0aGUgcHJvZ3JhbSBhbmQgc2lnbmF0dXJlIGFyZSB2YWxpZC4nKTtcbiAgICB9XG4gICAgY29uc3Qgc2lnbmVkVHhuID0ge1xuICAgICAgICBsc2lnOiBsc2lnLmdldF9vYmpfZm9yX2VuY29kaW5nKCksXG4gICAgICAgIHR4bjogdHhuLmdldF9vYmpfZm9yX2VuY29kaW5nKCksXG4gICAgfTtcbiAgICBpZiAoIW5hY2wuYnl0ZXNFcXVhbChsc2lnQWRkcmVzcywgdHhuLmZyb20ucHVibGljS2V5KSkge1xuICAgICAgICBzaWduZWRUeG4uc2duciA9IEJ1ZmZlci5mcm9tKGxzaWdBZGRyZXNzKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHhJRDogdHhuLnR4SUQoKS50b1N0cmluZygpLFxuICAgICAgICBibG9iOiBlbmNvZGluZy5lbmNvZGUoc2lnbmVkVHhuKSxcbiAgICB9O1xufVxuLyoqXG4gKiBzaWduTG9naWNTaWdUcmFuc2FjdGlvbk9iamVjdCB0YWtlcyBhIHRyYW5zYWN0aW9uIGFuZCBhIExvZ2ljU2lnIG9iamVjdCBhbmRcbiAqIHJldHVybnMgYSBzaWduZWQgdHJhbnNhY3Rpb24uXG4gKlxuICogQHBhcmFtIHR4biAtIFRoZSB0cmFuc2FjdGlvbiB0byBzaWduLlxuICogQHBhcmFtIGxzaWdPYmplY3QgLSBUaGUgTG9naWNTaWcgb2JqZWN0IHRoYXQgd2lsbCBzaWduIHRoZSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyBPYmplY3QgY29udGFpbmluZyB0eElEIGFuZCBibG9iIHJlcHJlc2VudGluZyBzaWduZWQgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduTG9naWNTaWdUcmFuc2FjdGlvbk9iamVjdCh0eG4sIGxzaWdPYmplY3QpIHtcbiAgICBsZXQgbHNpZztcbiAgICBsZXQgbHNpZ0FkZHJlc3M7XG4gICAgaWYgKGxzaWdPYmplY3QgaW5zdGFuY2VvZiBMb2dpY1NpZ0FjY291bnQpIHtcbiAgICAgICAgbHNpZyA9IGxzaWdPYmplY3QubHNpZztcbiAgICAgICAgbHNpZ0FkZHJlc3MgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3MobHNpZ09iamVjdC5hZGRyZXNzKCkpLnB1YmxpY0tleTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxzaWcgPSBsc2lnT2JqZWN0O1xuICAgICAgICBpZiAobHNpZy5zaWcpIHtcbiAgICAgICAgICAgIC8vIEZvciBhIExvZ2ljU2lnIHdpdGggYSBub24tbXVsdGlzaWcgZGVsZWdhdGluZyBhY2NvdW50LCB3ZSBjYW5ub3QgZGVyaXZlXG4gICAgICAgICAgICAvLyB0aGUgYWRkcmVzcyBvZiB0aGF0IGFjY291bnQgZnJvbSBvbmx5IGl0cyBzaWduYXR1cmUsIHNvIGFzc3VtZSB0aGVcbiAgICAgICAgICAgIC8vIGRlbGVnYXRpbmcgYWNjb3VudCBpcyB0aGUgc2VuZGVyLiBJZiB0aGF0J3Mgbm90IHRoZSBjYXNlLCB0aGUgc2lnbmluZ1xuICAgICAgICAgICAgLy8gd2lsbCBmYWlsLlxuICAgICAgICAgICAgbHNpZ0FkZHJlc3MgPSB0eG4uZnJvbS5wdWJsaWNLZXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobHNpZy5tc2lnKSB7XG4gICAgICAgICAgICBjb25zdCBtc2lnTWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbjogbHNpZy5tc2lnLnYsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkOiBsc2lnLm1zaWcudGhyLFxuICAgICAgICAgICAgICAgIHBrczogbHNpZy5tc2lnLnN1YnNpZy5tYXAoKHN1YnNpZykgPT4gc3Vic2lnLnBrKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsc2lnQWRkcmVzcyA9IGFkZHJlc3MuZnJvbU11bHRpc2lnUHJlSW1nKG1zaWdNZXRhZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsc2lnQWRkcmVzcyA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhsc2lnLmFkZHJlc3MoKSkucHVibGljS2V5O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaWduTG9naWNTaWdUcmFuc2FjdGlvbldpdGhBZGRyZXNzKHR4biwgbHNpZywgbHNpZ0FkZHJlc3MpO1xufVxuLyoqXG4gKiBzaWduTG9naWNTaWdUcmFuc2FjdGlvbiB0YWtlcyBhIHRyYW5zYWN0aW9uIGFuZCBhIExvZ2ljU2lnIG9iamVjdCBhbmQgcmV0dXJuc1xuICogYSBzaWduZWQgdHJhbnNhY3Rpb24uXG4gKlxuICogQHBhcmFtIHR4biAtIFRoZSB0cmFuc2FjdGlvbiB0byBzaWduLlxuICogQHBhcmFtIGxzaWdPYmplY3QgLSBUaGUgTG9naWNTaWcgb2JqZWN0IHRoYXQgd2lsbCBzaWduIHRoZSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyBPYmplY3QgY29udGFpbmluZyB0eElEIGFuZCBibG9iIHJlcHJlc2VudGluZyBzaWduZWQgdHJhbnNhY3Rpb24uXG4gKiBAdGhyb3dzIGVycm9yIG9uIGZhaWx1cmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uKHR4biwgbHNpZ09iamVjdCkge1xuICAgIGNvbnN0IGFsZ29UeG4gPSB0eG5CdWlsZGVyLmluc3RhbnRpYXRlVHhuSWZOZWVkZWQodHhuKTtcbiAgICByZXR1cm4gc2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb25PYmplY3QoYWxnb1R4biwgbHNpZ09iamVjdCk7XG59XG4vKipcbiAqIGxvZ2ljU2lnRnJvbUJ5dGUgYWNjZXB0cyBlbmNvZGVkIGxvZ2ljIHNpZyBieXRlcyBhbmQgYXR0ZW1wdHMgdG8gY2FsbCBsb2dpY3NpZy5mcm9tQnl0ZSBvbiBpdCxcbiAqIHJldHVybmluZyB0aGUgcmVzdWx0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2dpY1NpZ0Zyb21CeXRlKGVuY29kZWQpIHtcbiAgICByZXR1cm4gTG9naWNTaWcuZnJvbUJ5dGUoZW5jb2RlZCk7XG59XG5jb25zdCBTSUdOX1BST0dSQU1fREFUQV9QUkVGSVggPSBCdWZmZXIuZnJvbSgnUHJvZ0RhdGEnKTtcbi8qKlxuICogdGVhbFNpZ24gY3JlYXRlcyBhIHNpZ25hdHVyZSBjb21wYXRpYmxlIHdpdGggZWQyNTUxOXZlcmlmeSBvcGNvZGUgZnJvbSBwcm9ncmFtIGhhc2hcbiAqIEBwYXJhbSBzayAtIHVpbnQ4YXJyYXkgd2l0aCBzZWNyZXQga2V5XG4gKiBAcGFyYW0gZGF0YSAtIGJ1ZmZlciB3aXRoIGRhdGEgdG8gc2lnblxuICogQHBhcmFtIHByb2dyYW1IYXNoIC0gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRlYWwgcHJvZ3JhbSBoYXNoICg9IGNvbnRyYWN0IGFkZHJlc3MgZm9yIExvZ2ljU2lncylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlYWxTaWduKHNrLCBkYXRhLCBwcm9ncmFtSGFzaCkge1xuICAgIGNvbnN0IHBhcnRzID0gdXRpbHMuY29uY2F0QXJyYXlzKGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhwcm9ncmFtSGFzaCkucHVibGljS2V5LCBkYXRhKTtcbiAgICBjb25zdCB0b0JlU2lnbmVkID0gQnVmZmVyLmZyb20odXRpbHMuY29uY2F0QXJyYXlzKFNJR05fUFJPR1JBTV9EQVRBX1BSRUZJWCwgcGFydHMpKTtcbiAgICByZXR1cm4gbmFjbC5zaWduKHRvQmVTaWduZWQsIHNrKTtcbn1cbi8qKlxuICogdGVhbFNpZ25Gcm9tUHJvZ3JhbSBjcmVhdGVzIGEgc2lnbmF0dXJlIGNvbXBhdGlibGUgd2l0aCBlZDI1NTE5dmVyaWZ5IG9wY29kZSBmcm9tIHJhdyBwcm9ncmFtIGJ5dGVzXG4gKiBAcGFyYW0gc2sgLSB1aW50OGFycmF5IHdpdGggc2VjcmV0IGtleVxuICogQHBhcmFtIGRhdGEgLSBidWZmZXIgd2l0aCBkYXRhIHRvIHNpZ25cbiAqIEBwYXJhbSBwcm9ncmFtIC0gYnVmZmVyIHdpdGggdGVhbCBwcm9ncmFtXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZWFsU2lnbkZyb21Qcm9ncmFtKHNrLCBkYXRhLCBwcm9ncmFtKSB7XG4gICAgY29uc3QgbHNpZyA9IG5ldyBMb2dpY1NpZyhwcm9ncmFtKTtcbiAgICBjb25zdCBjb250cmFjdEFkZHJlc3MgPSBsc2lnLmFkZHJlc3MoKTtcbiAgICByZXR1cm4gdGVhbFNpZ24oc2ssIGRhdGEsIGNvbnRyYWN0QWRkcmVzcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dpY3NpZy5qcy5tYXAiXSwibmFtZXMiOlsibmFjbCIsImFkZHJlc3MiLCJlbmNvZGluZyIsInZlcmlmeU11bHRpc2lnIiwidXRpbHMiLCJ0eG5CdWlsZGVyIiwiaXNWYWxpZEFkZHJlc3MiLCJzYW5pdHlDaGVja1Byb2dyYW0iLCJwcm9ncmFtIiwibGVuZ3RoIiwiRXJyb3IiLCJsaW5lQnJlYWtPcmQiLCJjaGFyQ29kZUF0IiwiYmxhbmtTcGFjZU9yZCIsInRpbGRlT3JkIiwiaXNQcmludGFibGUiLCJ4IiwiaXNBc2NpaVByaW50YWJsZSIsImV2ZXJ5IiwicHJvZ3JhbVN0ciIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsIkxvZ2ljU2lnIiwiY29uc3RydWN0b3IiLCJwcm9ncmFtQXJncyIsInRhZyIsIkFycmF5IiwiaXNBcnJheSIsImFyZyIsIlVpbnQ4QXJyYXkiLCJpc0J1ZmZlciIsIlR5cGVFcnJvciIsImFyZ3MiLCJtYXAiLCJsb2dpYyIsInNpZyIsInVuZGVmaW5lZCIsIm1zaWciLCJnZXRfb2JqX2Zvcl9lbmNvZGluZyIsIm9iaiIsImwiLCJmcm9tX29ial9mb3JfZW5jb2RpbmciLCJlbmNvZGVkIiwibHNpZyIsInZlcmlmeSIsInB1YmxpY0tleSIsImUiLCJ0b0JlU2lnbmVkIiwiY29uY2F0QXJyYXlzIiwiaGFzaCIsImdlbmVyaWNIYXNoIiwiYXJyYXlFcXVhbCIsImVuY29kZUFkZHJlc3MiLCJzaWduIiwic2VjcmV0S2V5Iiwic2lnblByb2dyYW0iLCJzdWJzaWdzIiwiYWRkcnMiLCJhZGRyIiwicGsiLCJkZWNvZGVBZGRyZXNzIiwidiIsInZlcnNpb24iLCJ0aHIiLCJ0aHJlc2hvbGQiLCJzdWJzaWciLCJpbmRleCIsInNpbmdsZVNpZ25NdWx0aXNpZyIsInMiLCJhcHBlbmRUb011bHRpc2lnIiwibXlQayIsImtleVBhaXJGcm9tU2VjcmV0S2V5IiwiaSIsInRvQnl0ZSIsImVuY29kZSIsImZyb21CeXRlIiwiZGVjb2RlZE9iaiIsImRlY29kZSIsIkxvZ2ljU2lnQWNjb3VudCIsInNpZ2tleSIsImxzaWdBY2NvdW50IiwiaXNEZWxlZ2F0ZWQiLCJtc2lnTWV0YWRhdGEiLCJwa3MiLCJmcm9tTXVsdGlzaWdQcmVJbWciLCJzaWduTXVsdGlzaWciLCJtYWtlTG9naWNTaWciLCJzaWduTG9naWNTaWdUcmFuc2FjdGlvbldpdGhBZGRyZXNzIiwidHhuIiwibHNpZ0FkZHJlc3MiLCJzaWduZWRUeG4iLCJieXRlc0VxdWFsIiwic2duciIsInR4SUQiLCJibG9iIiwic2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb25PYmplY3QiLCJsc2lnT2JqZWN0Iiwic2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb24iLCJhbGdvVHhuIiwiaW5zdGFudGlhdGVUeG5JZk5lZWRlZCIsImxvZ2ljU2lnRnJvbUJ5dGUiLCJTSUdOX1BST0dSQU1fREFUQV9QUkVGSVgiLCJ0ZWFsU2lnbiIsInNrIiwiZGF0YSIsInByb2dyYW1IYXNoIiwicGFydHMiLCJ0ZWFsU2lnbkZyb21Qcm9ncmFtIiwiY29udHJhY3RBZGRyZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/main.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/main.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIAddressType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIAddressType),\n/* harmony export */   ABIArrayDynamicType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIArrayDynamicType),\n/* harmony export */   ABIArrayStaticType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIArrayStaticType),\n/* harmony export */   ABIBoolType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIBoolType),\n/* harmony export */   ABIByteType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIByteType),\n/* harmony export */   ABIContract: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIContract),\n/* harmony export */   ABIInterface: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIInterface),\n/* harmony export */   ABIMethod: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIMethod),\n/* harmony export */   ABIReferenceType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIReferenceType),\n/* harmony export */   ABIStringType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIStringType),\n/* harmony export */   ABITransactionType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABITransactionType),\n/* harmony export */   ABITupleType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABITupleType),\n/* harmony export */   ABIType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIType),\n/* harmony export */   ABIUfixedType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIUfixedType),\n/* harmony export */   ABIUintType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ABIUintType),\n/* harmony export */   ADDR_BYTE_SIZE: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.ADDR_BYTE_SIZE),\n/* harmony export */   ALGORAND_MIN_TX_FEE: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_3__.ALGORAND_MIN_TX_FEE),\n/* harmony export */   Algodv2: () => (/* reexport safe */ _client_v2_algod_algod__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   AtomicTransactionComposer: () => (/* reexport safe */ _composer__WEBPACK_IMPORTED_MODULE_27__.AtomicTransactionComposer),\n/* harmony export */   AtomicTransactionComposerStatus: () => (/* reexport safe */ _composer__WEBPACK_IMPORTED_MODULE_27__.AtomicTransactionComposerStatus),\n/* harmony export */   DryrunResult: () => (/* reexport safe */ _dryrun__WEBPACK_IMPORTED_MODULE_24__.DryrunResult),\n/* harmony export */   ERROR_INVALID_MICROALGOS: () => (/* binding */ ERROR_INVALID_MICROALGOS),\n/* harmony export */   ERROR_MULTISIG_BAD_SENDER: () => (/* binding */ ERROR_MULTISIG_BAD_SENDER),\n/* harmony export */   INVALID_MICROALGOS_ERROR_MSG: () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_6__.INVALID_MICROALGOS_ERROR_MSG),\n/* harmony export */   Indexer: () => (/* reexport safe */ _client_v2_indexer_indexer__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   IntDecoding: () => (/* reexport safe */ _types_intDecoding__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   Kmd: () => (/* reexport safe */ _client_kmd__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   LENGTH_ENCODE_BYTE_SIZE: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.LENGTH_ENCODE_BYTE_SIZE),\n/* harmony export */   LogicSigAccount: () => (/* reexport safe */ _logicsig__WEBPACK_IMPORTED_MODULE_21__.LogicSigAccount),\n/* harmony export */   LogicTemplates: () => (/* binding */ LogicTemplates),\n/* harmony export */   MAX_LEN: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.MAX_LEN),\n/* harmony export */   MULTISIG_BAD_SENDER_ERROR_MSG: () => (/* binding */ MULTISIG_BAD_SENDER_ERROR_MSG),\n/* harmony export */   OnApplicationComplete: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.OnApplicationComplete),\n/* harmony export */   SINGLE_BOOL_SIZE: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.SINGLE_BOOL_SIZE),\n/* harmony export */   SINGLE_BYTE_SIZE: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.SINGLE_BYTE_SIZE),\n/* harmony export */   SourceMap: () => (/* reexport safe */ _logic_sourcemap__WEBPACK_IMPORTED_MODULE_23__.SourceMap),\n/* harmony export */   Transaction: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_3__.Transaction),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_28__.TransactionType),\n/* harmony export */   abiCheckTransactionType: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.abiCheckTransactionType),\n/* harmony export */   abiTypeIsReference: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.abiTypeIsReference),\n/* harmony export */   abiTypeIsTransaction: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.abiTypeIsTransaction),\n/* harmony export */   algosToMicroalgos: () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_6__.algosToMicroalgos),\n/* harmony export */   appendSignMultisigTransaction: () => (/* reexport safe */ _multisig__WEBPACK_IMPORTED_MODULE_22__.appendSignMultisigTransaction),\n/* harmony export */   appendSignRawMultisigSignature: () => (/* reexport safe */ _multisig__WEBPACK_IMPORTED_MODULE_22__.appendSignRawMultisigSignature),\n/* harmony export */   assignGroupID: () => (/* reexport safe */ _group__WEBPACK_IMPORTED_MODULE_20__.assignGroupID),\n/* harmony export */   bigIntToBytes: () => (/* reexport safe */ _encoding_bigint__WEBPACK_IMPORTED_MODULE_14__.bigIntToBytes),\n/* harmony export */   bytesToBigInt: () => (/* reexport safe */ _encoding_bigint__WEBPACK_IMPORTED_MODULE_14__.bytesToBigInt),\n/* harmony export */   computeGroupID: () => (/* reexport safe */ _group__WEBPACK_IMPORTED_MODULE_20__.computeGroupID),\n/* harmony export */   createDryrun: () => (/* reexport safe */ _dryrun__WEBPACK_IMPORTED_MODULE_24__.createDryrun),\n/* harmony export */   createMultisigTransaction: () => (/* reexport safe */ _multisig__WEBPACK_IMPORTED_MODULE_22__.createMultisigTransaction),\n/* harmony export */   decodeAddress: () => (/* reexport safe */ _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress),\n/* harmony export */   decodeObj: () => (/* binding */ decodeObj),\n/* harmony export */   decodeSignedTransaction: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_3__.decodeSignedTransaction),\n/* harmony export */   decodeUint64: () => (/* reexport safe */ _encoding_uint64__WEBPACK_IMPORTED_MODULE_15__.decodeUint64),\n/* harmony export */   decodeUnsignedTransaction: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_3__.decodeUnsignedTransaction),\n/* harmony export */   encodeAddress: () => (/* reexport safe */ _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress),\n/* harmony export */   encodeObj: () => (/* binding */ encodeObj),\n/* harmony export */   encodeUint64: () => (/* reexport safe */ _encoding_uint64__WEBPACK_IMPORTED_MODULE_15__.encodeUint64),\n/* harmony export */   encodeUnsignedTransaction: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_3__.encodeUnsignedTransaction),\n/* harmony export */   generateAccount: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_16__[\"default\"]),\n/* harmony export */   getApplicationAddress: () => (/* reexport safe */ _encoding_address__WEBPACK_IMPORTED_MODULE_1__.getApplicationAddress),\n/* harmony export */   getMethodByName: () => (/* reexport safe */ _abi__WEBPACK_IMPORTED_MODULE_29__.getMethodByName),\n/* harmony export */   indexerModels: () => (/* reexport module object */ _client_v2_indexer_models_types__WEBPACK_IMPORTED_MODULE_18__),\n/* harmony export */   instantiateTxnIfNeeded: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_3__.instantiateTxnIfNeeded),\n/* harmony export */   isTransactionWithSigner: () => (/* reexport safe */ _signer__WEBPACK_IMPORTED_MODULE_26__.isTransactionWithSigner),\n/* harmony export */   isValidAddress: () => (/* reexport safe */ _encoding_address__WEBPACK_IMPORTED_MODULE_1__.isValidAddress),\n/* harmony export */   logicSigFromByte: () => (/* reexport safe */ _logicsig__WEBPACK_IMPORTED_MODULE_21__.logicSigFromByte),\n/* harmony export */   makeApplicationCallTxnFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationCallTxnFromObject),\n/* harmony export */   makeApplicationClearStateTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationClearStateTxn),\n/* harmony export */   makeApplicationClearStateTxnFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationClearStateTxnFromObject),\n/* harmony export */   makeApplicationCloseOutTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationCloseOutTxn),\n/* harmony export */   makeApplicationCloseOutTxnFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationCloseOutTxnFromObject),\n/* harmony export */   makeApplicationCreateTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationCreateTxn),\n/* harmony export */   makeApplicationCreateTxnFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationCreateTxnFromObject),\n/* harmony export */   makeApplicationDeleteTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationDeleteTxn),\n/* harmony export */   makeApplicationDeleteTxnFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationDeleteTxnFromObject),\n/* harmony export */   makeApplicationNoOpTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationNoOpTxn),\n/* harmony export */   makeApplicationNoOpTxnFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationNoOpTxnFromObject),\n/* harmony export */   makeApplicationOptInTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationOptInTxn),\n/* harmony export */   makeApplicationOptInTxnFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationOptInTxnFromObject),\n/* harmony export */   makeApplicationUpdateTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationUpdateTxn),\n/* harmony export */   makeApplicationUpdateTxnFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeApplicationUpdateTxnFromObject),\n/* harmony export */   makeAssetConfigTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetConfigTxn),\n/* harmony export */   makeAssetConfigTxnWithSuggestedParams: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetConfigTxnWithSuggestedParams),\n/* harmony export */   makeAssetConfigTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetConfigTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetCreateTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetCreateTxn),\n/* harmony export */   makeAssetCreateTxnWithSuggestedParams: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetCreateTxnWithSuggestedParams),\n/* harmony export */   makeAssetCreateTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetCreateTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetDestroyTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetDestroyTxn),\n/* harmony export */   makeAssetDestroyTxnWithSuggestedParams: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetDestroyTxnWithSuggestedParams),\n/* harmony export */   makeAssetDestroyTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetDestroyTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetFreezeTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetFreezeTxn),\n/* harmony export */   makeAssetFreezeTxnWithSuggestedParams: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetFreezeTxnWithSuggestedParams),\n/* harmony export */   makeAssetFreezeTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetFreezeTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetTransferTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetTransferTxn),\n/* harmony export */   makeAssetTransferTxnWithSuggestedParams: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetTransferTxnWithSuggestedParams),\n/* harmony export */   makeAssetTransferTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeAssetTransferTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeBasicAccountTransactionSigner: () => (/* reexport safe */ _signer__WEBPACK_IMPORTED_MODULE_26__.makeBasicAccountTransactionSigner),\n/* harmony export */   makeKeyRegistrationTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeKeyRegistrationTxn),\n/* harmony export */   makeKeyRegistrationTxnWithSuggestedParams: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeKeyRegistrationTxnWithSuggestedParams),\n/* harmony export */   makeKeyRegistrationTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makeKeyRegistrationTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeLogicSig: () => (/* reexport safe */ _logicsig__WEBPACK_IMPORTED_MODULE_21__.makeLogicSig),\n/* harmony export */   makeLogicSigAccountTransactionSigner: () => (/* reexport safe */ _signer__WEBPACK_IMPORTED_MODULE_26__.makeLogicSigAccountTransactionSigner),\n/* harmony export */   makeMultiSigAccountTransactionSigner: () => (/* reexport safe */ _signer__WEBPACK_IMPORTED_MODULE_26__.makeMultiSigAccountTransactionSigner),\n/* harmony export */   makePaymentTxn: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makePaymentTxn),\n/* harmony export */   makePaymentTxnWithSuggestedParams: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makePaymentTxnWithSuggestedParams),\n/* harmony export */   makePaymentTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn__WEBPACK_IMPORTED_MODULE_25__.makePaymentTxnWithSuggestedParamsFromObject),\n/* harmony export */   masterDerivationKeyToMnemonic: () => (/* reexport safe */ _mnemonic_mnemonic__WEBPACK_IMPORTED_MODULE_19__.masterDerivationKeyToMnemonic),\n/* harmony export */   mergeMultisigTransactions: () => (/* reexport safe */ _multisig__WEBPACK_IMPORTED_MODULE_22__.mergeMultisigTransactions),\n/* harmony export */   microalgosToAlgos: () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_6__.microalgosToAlgos),\n/* harmony export */   mnemonicFromSeed: () => (/* reexport safe */ _mnemonic_mnemonic__WEBPACK_IMPORTED_MODULE_19__.mnemonicFromSeed),\n/* harmony export */   mnemonicToMasterDerivationKey: () => (/* reexport safe */ _mnemonic_mnemonic__WEBPACK_IMPORTED_MODULE_19__.mnemonicToMasterDerivationKey),\n/* harmony export */   mnemonicToSecretKey: () => (/* reexport safe */ _mnemonic_mnemonic__WEBPACK_IMPORTED_MODULE_19__.mnemonicToSecretKey),\n/* harmony export */   modelsv2: () => (/* reexport module object */ _client_v2_algod_models_types__WEBPACK_IMPORTED_MODULE_17__),\n/* harmony export */   multisigAddress: () => (/* reexport safe */ _multisig__WEBPACK_IMPORTED_MODULE_22__.multisigAddress),\n/* harmony export */   secretKeyToMnemonic: () => (/* reexport safe */ _mnemonic_mnemonic__WEBPACK_IMPORTED_MODULE_19__.secretKeyToMnemonic),\n/* harmony export */   seedFromMnemonic: () => (/* reexport safe */ _mnemonic_mnemonic__WEBPACK_IMPORTED_MODULE_19__.seedFromMnemonic),\n/* harmony export */   signBid: () => (/* binding */ signBid),\n/* harmony export */   signBytes: () => (/* binding */ signBytes),\n/* harmony export */   signLogicSigTransaction: () => (/* reexport safe */ _logicsig__WEBPACK_IMPORTED_MODULE_21__.signLogicSigTransaction),\n/* harmony export */   signLogicSigTransactionObject: () => (/* reexport safe */ _logicsig__WEBPACK_IMPORTED_MODULE_21__.signLogicSigTransactionObject),\n/* harmony export */   signMultisigTransaction: () => (/* reexport safe */ _multisig__WEBPACK_IMPORTED_MODULE_22__.signMultisigTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   tealSign: () => (/* reexport safe */ _logicsig__WEBPACK_IMPORTED_MODULE_21__.tealSign),\n/* harmony export */   tealSignFromProgram: () => (/* reexport safe */ _logicsig__WEBPACK_IMPORTED_MODULE_21__.tealSignFromProgram),\n/* harmony export */   verifyBytes: () => (/* binding */ verifyBytes),\n/* harmony export */   verifyMultisig: () => (/* reexport safe */ _multisig__WEBPACK_IMPORTED_MODULE_22__.verifyMultisig),\n/* harmony export */   waitForConfirmation: () => (/* reexport safe */ _wait__WEBPACK_IMPORTED_MODULE_13__.waitForConfirmation)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _logicTemplates__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logicTemplates */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicTemplates/index.js\");\n/* harmony import */ var _logicTemplates__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_logicTemplates__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _bid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bid */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/bid.js\");\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./convert */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/convert.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _client_algod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./client/algod */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/algod.js\");\n/* harmony import */ var _client_algod__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_client_algod__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _client_algod__WEBPACK_IMPORTED_MODULE_8__) if([\"default\",\"MULTISIG_BAD_SENDER_ERROR_MSG\",\"signTransaction\",\"signBid\",\"signBytes\",\"verifyBytes\",\"encodeObj\",\"decodeObj\",\"ERROR_MULTISIG_BAD_SENDER\",\"ERROR_INVALID_MICROALGOS\",\"Algodv2\",\"Kmd\",\"IntDecoding\",\"Indexer\",\"waitForConfirmation\",\"isValidAddress\",\"encodeAddress\",\"decodeAddress\",\"getApplicationAddress\",\"bytesToBigInt\",\"bigIntToBytes\",\"encodeUint64\",\"decodeUint64\",\"generateAccount\",\"modelsv2\",\"indexerModels\",\"mnemonicToMasterDerivationKey\",\"masterDerivationKeyToMnemonic\",\"secretKeyToMnemonic\",\"mnemonicToSecretKey\",\"seedFromMnemonic\",\"mnemonicFromSeed\",\"microalgosToAlgos\",\"algosToMicroalgos\",\"INVALID_MICROALGOS_ERROR_MSG\",\"computeGroupID\",\"assignGroupID\",\"LogicSigAccount\",\"makeLogicSig\",\"signLogicSigTransaction\",\"signLogicSigTransactionObject\",\"logicSigFromByte\",\"tealSign\",\"tealSignFromProgram\",\"signMultisigTransaction\",\"mergeMultisigTransactions\",\"appendSignMultisigTransaction\",\"createMultisigTransaction\",\"appendSignRawMultisigSignature\",\"verifyMultisig\",\"multisigAddress\",\"SourceMap\",\"LogicTemplates\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _client_algod__WEBPACK_IMPORTED_MODULE_8__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _client_v2_algod_algod__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./client/v2/algod/algod */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/algod.js\");\n/* harmony import */ var _client_kmd__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./client/kmd */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/kmd.js\");\n/* harmony import */ var _types_intDecoding__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./types/intDecoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/intDecoding.js\");\n/* harmony import */ var _client_v2_indexer_indexer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./client/v2/indexer/indexer */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/indexer.js\");\n/* harmony import */ var _wait__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./wait */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/wait.js\");\n/* harmony import */ var _encoding_bigint__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./encoding/bigint */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/bigint.js\");\n/* harmony import */ var _encoding_uint64__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./encoding/uint64 */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/uint64.js\");\n/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/account.js\");\n/* harmony import */ var _client_v2_algod_models_types__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./client/v2/algod/models/types */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _client_v2_indexer_models_types__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./client/v2/indexer/models/types */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n/* harmony import */ var _mnemonic_mnemonic__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./mnemonic/mnemonic */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/mnemonic/mnemonic.js\");\n/* harmony import */ var _group__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./group */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/group.js\");\n/* harmony import */ var _logicsig__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./logicsig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js\");\n/* harmony import */ var _multisig__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/multisig.js\");\n/* harmony import */ var _logic_sourcemap__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./logic/sourcemap */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/sourcemap.js\");\n/* harmony import */ var _dryrun__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./dryrun */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/dryrun.js\");\n/* harmony import */ var _makeTxn__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./makeTxn */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/makeTxn.js\");\n/* harmony import */ var _signer__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/signer.js\");\n/* harmony import */ var _composer__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./composer */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/composer.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/index.js\");\n/* harmony import */ var _abi__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./abi */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/abi/index.js\");\n\n\n\n\n\n\n\n\nconst SIGN_BYTES_PREFIX = Buffer.from([\n    77,\n    88\n]); // \"MX\"\n// Errors\nconst MULTISIG_BAD_SENDER_ERROR_MSG = \"The transaction sender address and multisig preimage do not match.\";\n/**\n * signTransaction takes an object with either payment or key registration fields and\n * a secret key and returns a signed blob.\n *\n * Payment transaction fields: from, to, amount, fee, firstRound, lastRound, genesisHash,\n * note(optional), GenesisID(optional), closeRemainderTo(optional)\n *\n * Key registration fields: fee, firstRound, lastRound, voteKey, selectionKey, voteFirst,\n * voteLast, voteKeyDilution, genesisHash, note(optional), GenesisID(optional)\n *\n * If flatFee is not set and the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param txn - object with either payment or key registration fields\n * @param sk - Algorand Secret Key\n * @returns object contains the binary signed transaction and its txID\n */ function signTransaction(txn, sk) {\n    if (typeof txn.from === \"undefined\") {\n        // Get pk from sk if no sender specified\n        const key = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.keyPairFromSecretKey(sk);\n        // eslint-disable-next-line no-param-reassign\n        txn.from = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(key.publicKey);\n    }\n    const algoTxn = _transaction__WEBPACK_IMPORTED_MODULE_3__.instantiateTxnIfNeeded(txn);\n    return {\n        txID: algoTxn.txID().toString(),\n        blob: algoTxn.signTxn(sk)\n    };\n}\n/**\n * signBid takes an object with the following fields: bidder key, bid amount, max price, bid ID, auctionKey, auction ID,\n * and a secret key and returns a signed blob to be inserted into a transaction Algorand note field.\n * @param bid - Algorand Bid\n * @param sk - Algorand secret key\n * @returns Uint8Array binary signed bid\n */ function signBid(bid, sk) {\n    const signedBid = new _bid__WEBPACK_IMPORTED_MODULE_5__[\"default\"](bid);\n    return signedBid.signBid(sk);\n}\n/**\n * signBytes takes arbitrary bytes and a secret key, prepends the bytes with \"MX\" for domain separation, signs the bytes\n * with the private key, and returns the signature.\n * @param bytes - Uint8array\n * @param sk - Algorand secret key\n * @returns binary signature\n */ function signBytes(bytes, sk) {\n    const toBeSigned = Buffer.from(_utils_utils__WEBPACK_IMPORTED_MODULE_7__.concatArrays(SIGN_BYTES_PREFIX, bytes));\n    const sig = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.sign(toBeSigned, sk);\n    return sig;\n}\n/**\n * verifyBytes takes array of bytes, an address, and a signature and verifies if the signature is correct for the public\n * key and the bytes (the bytes should have been signed with \"MX\" prepended for domain separation).\n * @param bytes - Uint8Array\n * @param signature - binary signature\n * @param addr - string address\n * @returns bool\n */ function verifyBytes(bytes, signature, addr) {\n    const toBeVerified = Buffer.from(_utils_utils__WEBPACK_IMPORTED_MODULE_7__.concatArrays(SIGN_BYTES_PREFIX, bytes));\n    const pk = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(addr).publicKey;\n    return _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.verify(toBeVerified, signature, pk);\n}\n/**\n * encodeObj takes a javascript object and returns its msgpack encoding\n * Note that the encoding sorts the fields alphabetically\n * @param o - js obj\n * @returns Uint8Array binary representation\n */ function encodeObj(o) {\n    return new Uint8Array(_encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(o));\n}\n/**\n * decodeObj takes a Uint8Array and returns its javascript obj\n * @param o - Uint8Array to decode\n * @returns object\n */ function decodeObj(o) {\n    return _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(o);\n}\nconst ERROR_MULTISIG_BAD_SENDER = new Error(MULTISIG_BAD_SENDER_ERROR_MSG);\nconst ERROR_INVALID_MICROALGOS = new Error(_convert__WEBPACK_IMPORTED_MODULE_6__.INVALID_MICROALGOS_ERROR_MSG);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst LogicTemplates = (_logicTemplates__WEBPACK_IMPORTED_MODULE_4___default());\n\n\n\n\n\n\n //# sourceMappingURL=main.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/main.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/makeTxn.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/makeTxn.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnApplicationComplete: () => (/* reexport safe */ _types_transactions_base__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete),\n/* harmony export */   makeApplicationCallTxnFromObject: () => (/* binding */ makeApplicationCallTxnFromObject),\n/* harmony export */   makeApplicationClearStateTxn: () => (/* binding */ makeApplicationClearStateTxn),\n/* harmony export */   makeApplicationClearStateTxnFromObject: () => (/* binding */ makeApplicationClearStateTxnFromObject),\n/* harmony export */   makeApplicationCloseOutTxn: () => (/* binding */ makeApplicationCloseOutTxn),\n/* harmony export */   makeApplicationCloseOutTxnFromObject: () => (/* binding */ makeApplicationCloseOutTxnFromObject),\n/* harmony export */   makeApplicationCreateTxn: () => (/* binding */ makeApplicationCreateTxn),\n/* harmony export */   makeApplicationCreateTxnFromObject: () => (/* binding */ makeApplicationCreateTxnFromObject),\n/* harmony export */   makeApplicationDeleteTxn: () => (/* binding */ makeApplicationDeleteTxn),\n/* harmony export */   makeApplicationDeleteTxnFromObject: () => (/* binding */ makeApplicationDeleteTxnFromObject),\n/* harmony export */   makeApplicationNoOpTxn: () => (/* binding */ makeApplicationNoOpTxn),\n/* harmony export */   makeApplicationNoOpTxnFromObject: () => (/* binding */ makeApplicationNoOpTxnFromObject),\n/* harmony export */   makeApplicationOptInTxn: () => (/* binding */ makeApplicationOptInTxn),\n/* harmony export */   makeApplicationOptInTxnFromObject: () => (/* binding */ makeApplicationOptInTxnFromObject),\n/* harmony export */   makeApplicationUpdateTxn: () => (/* binding */ makeApplicationUpdateTxn),\n/* harmony export */   makeApplicationUpdateTxnFromObject: () => (/* binding */ makeApplicationUpdateTxnFromObject),\n/* harmony export */   makeAssetConfigTxn: () => (/* binding */ makeAssetConfigTxn),\n/* harmony export */   makeAssetConfigTxnWithSuggestedParams: () => (/* binding */ makeAssetConfigTxnWithSuggestedParams),\n/* harmony export */   makeAssetConfigTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetConfigTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetCreateTxn: () => (/* binding */ makeAssetCreateTxn),\n/* harmony export */   makeAssetCreateTxnWithSuggestedParams: () => (/* binding */ makeAssetCreateTxnWithSuggestedParams),\n/* harmony export */   makeAssetCreateTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetCreateTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetDestroyTxn: () => (/* binding */ makeAssetDestroyTxn),\n/* harmony export */   makeAssetDestroyTxnWithSuggestedParams: () => (/* binding */ makeAssetDestroyTxnWithSuggestedParams),\n/* harmony export */   makeAssetDestroyTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetDestroyTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetFreezeTxn: () => (/* binding */ makeAssetFreezeTxn),\n/* harmony export */   makeAssetFreezeTxnWithSuggestedParams: () => (/* binding */ makeAssetFreezeTxnWithSuggestedParams),\n/* harmony export */   makeAssetFreezeTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetFreezeTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetTransferTxn: () => (/* binding */ makeAssetTransferTxn),\n/* harmony export */   makeAssetTransferTxnWithSuggestedParams: () => (/* binding */ makeAssetTransferTxnWithSuggestedParams),\n/* harmony export */   makeAssetTransferTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetTransferTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeKeyRegistrationTxn: () => (/* binding */ makeKeyRegistrationTxn),\n/* harmony export */   makeKeyRegistrationTxnWithSuggestedParams: () => (/* binding */ makeKeyRegistrationTxnWithSuggestedParams),\n/* harmony export */   makeKeyRegistrationTxnWithSuggestedParamsFromObject: () => (/* binding */ makeKeyRegistrationTxnWithSuggestedParamsFromObject),\n/* harmony export */   makePaymentTxn: () => (/* binding */ makePaymentTxn),\n/* harmony export */   makePaymentTxnWithSuggestedParams: () => (/* binding */ makePaymentTxnWithSuggestedParams),\n/* harmony export */   makePaymentTxnWithSuggestedParamsFromObject: () => (/* binding */ makePaymentTxnWithSuggestedParamsFromObject)\n/* harmony export */ });\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _types_transactions_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/transactions/base */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/base.js\");\n/* harmony import */ var _types_transactions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/transactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/index.js\");\n\n\n\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */ function makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo) {\n    const o = {\n        from,\n        to,\n        amount,\n        closeRemainderTo,\n        note,\n        suggestedParams,\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.pay,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n/**\n * makePaymentTxn takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */ function makePaymentTxn(from, to, fee, amount, closeRemainderTo, firstRound, lastRound, note, genesisHash, genesisID, rekeyTo) {\n    const suggestedParams = {\n        genesisHash,\n        genesisID,\n        firstRound,\n        lastRound,\n        fee\n    };\n    return makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo);\n}\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nfunction makePaymentTxnWithSuggestedParamsFromObject(o) {\n    return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);\n}\nfunction makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo, nonParticipation = false, stateProofKey = undefined) {\n    const o = {\n        from,\n        note,\n        voteKey,\n        selectionKey,\n        voteFirst,\n        voteLast,\n        voteKeyDilution,\n        suggestedParams,\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.keyreg,\n        reKeyTo: rekeyTo,\n        nonParticipation,\n        stateProofKey\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\nfunction makeKeyRegistrationTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, rekeyTo, nonParticipation = false, stateProofKey = undefined) {\n    const suggestedParams = {\n        genesisHash,\n        genesisID,\n        firstRound,\n        lastRound,\n        fee\n    };\n    return makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo, nonParticipation, stateProofKey);\n}\nfunction makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n    return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo, o.nonParticipation, o.stateProofKey);\n}\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */ function makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo) {\n    const o = {\n        from,\n        note,\n        suggestedParams,\n        assetTotal: total,\n        assetDecimals: decimals,\n        assetDefaultFrozen: defaultFrozen,\n        assetUnitName: unitName,\n        assetName,\n        assetURL,\n        assetMetadataHash,\n        assetManager: manager,\n        assetReserve: reserve,\n        assetFreeze: freeze,\n        assetClawback: clawback,\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.acfg,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n/** makeAssetCreateTxn takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */ function makeAssetCreateTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, rekeyTo) {\n    const suggestedParams = {\n        genesisHash,\n        genesisID,\n        firstRound,\n        lastRound,\n        fee\n    };\n    return makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo);\n}\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */ function makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking = true, rekeyTo) {\n    if (strictEmptyAddressChecking && (manager === undefined || reserve === undefined || freeze === undefined || clawback === undefined)) {\n        throw Error(\"strict empty address checking was turned on, but at least one empty address was provided\");\n    }\n    const o = {\n        from,\n        suggestedParams,\n        assetIndex,\n        assetManager: manager,\n        assetReserve: reserve,\n        assetFreeze: freeze,\n        assetClawback: clawback,\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.acfg,\n        note,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n/** makeAssetConfigTxn can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */ function makeAssetConfigTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, manager, reserve, freeze, clawback, strictEmptyAddressChecking = true, rekeyTo) {\n    const suggestedParams = {\n        genesisHash,\n        genesisID,\n        firstRound,\n        lastRound,\n        fee\n    };\n    return makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking, rekeyTo);\n}\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);\n}\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */ function makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo) {\n    const o = {\n        from,\n        suggestedParams,\n        assetIndex,\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.acfg,\n        note,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n/** makeAssetDestroyTxn will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */ function makeAssetDestroyTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo) {\n    const suggestedParams = {\n        genesisHash,\n        genesisID,\n        firstRound,\n        lastRound,\n        fee\n    };\n    return makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo);\n}\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */ function makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo) {\n    const o = {\n        from,\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.afrz,\n        freezeAccount: freezeTarget,\n        assetIndex,\n        freezeState,\n        note,\n        suggestedParams,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n/** makeAssetFreezeTxn will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */ function makeAssetFreezeTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, freezeTarget, freezeState, rekeyTo) {\n    const suggestedParams = {\n        genesisHash,\n        genesisID,\n        firstRound,\n        lastRound,\n        fee\n    };\n    return makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo);\n}\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */ function makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.axfer,\n        from,\n        to,\n        amount,\n        suggestedParams,\n        assetIndex,\n        note,\n        assetRevocationTarget: revocationTarget,\n        closeRemainderTo,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n/** makeAssetTransferTxn allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount of assets to send\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */ function makeAssetTransferTxn(from, to, closeRemainderTo, revocationTarget, fee, amount, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo) {\n    const suggestedParams = {\n        genesisHash,\n        genesisID,\n        firstRound,\n        lastRound,\n        fee\n    };\n    return makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo);\n}\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param extraPages - integer extra pages of memory to rent on creation of application\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */ function makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, extraPages, boxes) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex: 0,\n        appOnComplete: onComplete,\n        appLocalInts: numLocalInts,\n        appLocalByteSlices: numLocalByteSlices,\n        appGlobalInts: numGlobalInts,\n        appGlobalByteSlices: numGlobalByteSlices,\n        appApprovalProgram: approvalProgram,\n        appClearProgram: clearProgram,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo,\n        extraPages\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nfunction makeApplicationCreateTxnFromObject(o) {\n    return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.extraPages, o.boxes);\n}\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */ function makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appApprovalProgram: approvalProgram,\n        appOnComplete: _types_transactions_base__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.UpdateApplicationOC,\n        appClearProgram: clearProgram,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nfunction makeApplicationUpdateTxnFromObject(o) {\n    return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */ function makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: _types_transactions_base__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.DeleteApplicationOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nfunction makeApplicationDeleteTxnFromObject(o) {\n    return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */ function makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: _types_transactions_base__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.OptInOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nfunction makeApplicationOptInTxnFromObject(o) {\n    return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */ function makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: _types_transactions_base__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.CloseOutOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nfunction makeApplicationCloseOutTxnFromObject(o) {\n    return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */ function makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: _types_transactions_base__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.ClearStateOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nfunction makeApplicationClearStateTxnFromObject(o) {\n    return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */ function makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: _types_transactions_base__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.NoOpOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n}\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nfunction makeApplicationNoOpTxnFromObject(o) {\n    return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n\n/**\n * Generic function for creating any application call transaction.\n */ function makeApplicationCallTxnFromObject(options) {\n    const o = {\n        type: _types_transactions__WEBPACK_IMPORTED_MODULE_2__.TransactionType.appl,\n        from: options.from,\n        suggestedParams: options.suggestedParams,\n        appIndex: options.appIndex,\n        appOnComplete: options.onComplete,\n        appLocalInts: options.numLocalInts,\n        appLocalByteSlices: options.numLocalByteSlices,\n        appGlobalInts: options.numGlobalInts,\n        appGlobalByteSlices: options.numGlobalByteSlices,\n        appApprovalProgram: options.approvalProgram,\n        appClearProgram: options.clearProgram,\n        appArgs: options.appArgs,\n        appAccounts: options.accounts,\n        appForeignApps: options.foreignApps,\n        appForeignAssets: options.foreignAssets,\n        boxes: options.boxes,\n        note: options.note,\n        lease: options.lease,\n        reKeyTo: options.rekeyTo,\n        extraPages: options.extraPages\n    };\n    return new _transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction(o);\n} //# sourceMappingURL=makeTxn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/makeTxn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/mnemonic/mnemonic.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/mnemonic/mnemonic.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FAIL_TO_DECODE_MNEMONIC_ERROR_MSG: () => (/* binding */ FAIL_TO_DECODE_MNEMONIC_ERROR_MSG),\n/* harmony export */   NOT_IN_WORDS_LIST_ERROR_MSG: () => (/* binding */ NOT_IN_WORDS_LIST_ERROR_MSG),\n/* harmony export */   masterDerivationKeyToMnemonic: () => (/* binding */ masterDerivationKeyToMnemonic),\n/* harmony export */   mnemonicFromSeed: () => (/* binding */ mnemonicFromSeed),\n/* harmony export */   mnemonicToMasterDerivationKey: () => (/* binding */ mnemonicToMasterDerivationKey),\n/* harmony export */   mnemonicToSecretKey: () => (/* binding */ mnemonicToSecretKey),\n/* harmony export */   secretKeyToMnemonic: () => (/* binding */ secretKeyToMnemonic),\n/* harmony export */   seedFromMnemonic: () => (/* binding */ seedFromMnemonic)\n/* harmony export */ });\n/* harmony import */ var _wordlists_english__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlists/english */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/mnemonic/wordlists/english.js\");\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n/* eslint-disable no-bitwise */ \n\n\nconst FAIL_TO_DECODE_MNEMONIC_ERROR_MSG = \"failed to decode mnemonic\";\nconst NOT_IN_WORDS_LIST_ERROR_MSG = \"the mnemonic contains a word that is not in the wordlist\";\n// https://stackoverflow.com/a/51452614\nfunction toUint11Array(buffer8) {\n    const buffer11 = [];\n    let acc = 0;\n    let accBits = 0;\n    function add(octet) {\n        acc |= octet << accBits;\n        accBits += 8;\n        if (accBits >= 11) {\n            buffer11.push(acc & 0x7ff);\n            acc >>= 11;\n            accBits -= 11;\n        }\n    }\n    function flush() {\n        if (accBits) {\n            buffer11.push(acc);\n        }\n    }\n    buffer8.forEach(add);\n    flush();\n    return buffer11;\n}\nfunction applyWords(nums) {\n    return nums.map((n)=>_wordlists_english__WEBPACK_IMPORTED_MODULE_0__[\"default\"][n]);\n}\nfunction computeChecksum(seed) {\n    const hashBuffer = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.genericHash(seed);\n    const uint11Hash = toUint11Array(hashBuffer);\n    const words = applyWords(uint11Hash);\n    return words[0];\n}\n/**\n * mnemonicFromSeed converts a 32-byte key into a 25 word mnemonic. The generated mnemonic includes a checksum.\n * Each word in the mnemonic represents 11 bits of data, and the last 11 bits are reserved for the checksum.\n * @param seed - 32 bytes long seed\n * @returns 25 words mnemonic\n */ function mnemonicFromSeed(seed) {\n    // Sanity length check\n    if (seed.length !== _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.SEED_BTYES_LENGTH) {\n        throw new RangeError(`Seed length must be ${_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.SEED_BTYES_LENGTH}`);\n    }\n    const uint11Array = toUint11Array(seed);\n    const words = applyWords(uint11Array);\n    const checksumWord = computeChecksum(seed);\n    return `${words.join(\" \")} ${checksumWord}`;\n}\n// from Uint11Array\n// https://stackoverflow.com/a/51452614\nfunction toUint8Array(buffer11) {\n    const buffer8 = [];\n    let acc = 0;\n    let accBits = 0;\n    function add(ui11) {\n        acc |= ui11 << accBits;\n        accBits += 11;\n        while(accBits >= 8){\n            buffer8.push(acc & 0xff);\n            acc >>= 8;\n            accBits -= 8;\n        }\n    }\n    function flush() {\n        if (accBits) {\n            buffer8.push(acc);\n        }\n    }\n    buffer11.forEach(add);\n    flush();\n    return new Uint8Array(buffer8);\n}\n/**\n * seedFromMnemonic converts a mnemonic generated using this library into the source key used to create it.\n * It returns an error if the passed mnemonic has an incorrect checksum, if the number of words is unexpected, or if one\n * of the passed words is not found in the words list.\n * @param mnemonic - 25 words mnemonic\n * @returns 32 bytes long seed\n */ function seedFromMnemonic(mnemonic) {\n    const words = mnemonic.split(\" \");\n    const key = words.slice(0, 24);\n    // Check that all words are in list\n    for (const w of key){\n        if (_wordlists_english__WEBPACK_IMPORTED_MODULE_0__[\"default\"].indexOf(w) === -1) throw new Error(NOT_IN_WORDS_LIST_ERROR_MSG);\n    }\n    const checksum = words[words.length - 1];\n    const uint11Array = key.map((word)=>_wordlists_english__WEBPACK_IMPORTED_MODULE_0__[\"default\"].indexOf(word));\n    // Convert the key to uint8Array\n    let uint8Array = toUint8Array(uint11Array);\n    // We need to chop the last byte -\n    // the short explanation - Since 256 is not divisible by 11, we have an extra 0x0 byte.\n    // The longer explanation - When splitting the 256 bits to chunks of 11, we get 23 words and a left over of 3 bits.\n    // This left gets padded with another 8 bits to the create the 24th word.\n    // While converting back to byte array, our new 264 bits array is divisible by 8 but the last byte is just the padding.\n    // check that we have 33 bytes long array as expected\n    if (uint8Array.length !== 33) throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n    // check that the last byte is actually 0x0\n    if (uint8Array[uint8Array.length - 1] !== 0x0) throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n    // chop it !\n    uint8Array = uint8Array.slice(0, uint8Array.length - 1);\n    // compute checksum\n    const cs = computeChecksum(uint8Array);\n    // success!\n    if (cs === checksum) return uint8Array;\n    throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n}\n/**\n * mnemonicToSecretKey takes a mnemonic string and returns the corresponding Algorand address and its secret key.\n * @param mn - 25 words Algorand mnemonic\n * @throws error if fails to decode the mnemonic\n */ function mnemonicToSecretKey(mn) {\n    const seed = seedFromMnemonic(mn);\n    const keys = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.keyPairFromSeed(seed);\n    const encodedPk = _encoding_address__WEBPACK_IMPORTED_MODULE_2__.encodeAddress(keys.publicKey);\n    return {\n        addr: encodedPk,\n        sk: keys.secretKey\n    };\n}\n/**\n * secretKeyToMnemonic takes an Algorand secret key and returns the corresponding mnemonic.\n * @param sk - Algorand secret key\n * @returns Secret key's associated mnemonic\n */ function secretKeyToMnemonic(sk) {\n    // get the seed from the sk\n    const seed = sk.slice(0, _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_1__.SEED_BTYES_LENGTH);\n    return mnemonicFromSeed(seed);\n}\n/**\n * mnemonicToMasterDerivationKey takes a mnemonic string and returns the corresponding master derivation key.\n * @param mn - 25 words Algorand mnemonic\n * @returns Uint8Array\n * @throws error if fails to decode the mnemonic\n */ function mnemonicToMasterDerivationKey(mn) {\n    return seedFromMnemonic(mn);\n}\n/**\n * masterDerivationKeyToMnemonic takes a master derivation key and returns the corresponding mnemonic.\n * @param mdk - Uint8Array\n * @returns string mnemonic\n */ function masterDerivationKeyToMnemonic(mdk) {\n    return mnemonicFromSeed(mdk);\n} //# sourceMappingURL=mnemonic.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/mnemonic/mnemonic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/mnemonic/wordlists/english.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/mnemonic/wordlists/english.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst english = [\n    \"abandon\",\n    \"ability\",\n    \"able\",\n    \"about\",\n    \"above\",\n    \"absent\",\n    \"absorb\",\n    \"abstract\",\n    \"absurd\",\n    \"abuse\",\n    \"access\",\n    \"accident\",\n    \"account\",\n    \"accuse\",\n    \"achieve\",\n    \"acid\",\n    \"acoustic\",\n    \"acquire\",\n    \"across\",\n    \"act\",\n    \"action\",\n    \"actor\",\n    \"actress\",\n    \"actual\",\n    \"adapt\",\n    \"add\",\n    \"addict\",\n    \"address\",\n    \"adjust\",\n    \"admit\",\n    \"adult\",\n    \"advance\",\n    \"advice\",\n    \"aerobic\",\n    \"affair\",\n    \"afford\",\n    \"afraid\",\n    \"again\",\n    \"age\",\n    \"agent\",\n    \"agree\",\n    \"ahead\",\n    \"aim\",\n    \"air\",\n    \"airport\",\n    \"aisle\",\n    \"alarm\",\n    \"album\",\n    \"alcohol\",\n    \"alert\",\n    \"alien\",\n    \"all\",\n    \"alley\",\n    \"allow\",\n    \"almost\",\n    \"alone\",\n    \"alpha\",\n    \"already\",\n    \"also\",\n    \"alter\",\n    \"always\",\n    \"amateur\",\n    \"amazing\",\n    \"among\",\n    \"amount\",\n    \"amused\",\n    \"analyst\",\n    \"anchor\",\n    \"ancient\",\n    \"anger\",\n    \"angle\",\n    \"angry\",\n    \"animal\",\n    \"ankle\",\n    \"announce\",\n    \"annual\",\n    \"another\",\n    \"answer\",\n    \"antenna\",\n    \"antique\",\n    \"anxiety\",\n    \"any\",\n    \"apart\",\n    \"apology\",\n    \"appear\",\n    \"apple\",\n    \"approve\",\n    \"april\",\n    \"arch\",\n    \"arctic\",\n    \"area\",\n    \"arena\",\n    \"argue\",\n    \"arm\",\n    \"armed\",\n    \"armor\",\n    \"army\",\n    \"around\",\n    \"arrange\",\n    \"arrest\",\n    \"arrive\",\n    \"arrow\",\n    \"art\",\n    \"artefact\",\n    \"artist\",\n    \"artwork\",\n    \"ask\",\n    \"aspect\",\n    \"assault\",\n    \"asset\",\n    \"assist\",\n    \"assume\",\n    \"asthma\",\n    \"athlete\",\n    \"atom\",\n    \"attack\",\n    \"attend\",\n    \"attitude\",\n    \"attract\",\n    \"auction\",\n    \"audit\",\n    \"august\",\n    \"aunt\",\n    \"author\",\n    \"auto\",\n    \"autumn\",\n    \"average\",\n    \"avocado\",\n    \"avoid\",\n    \"awake\",\n    \"aware\",\n    \"away\",\n    \"awesome\",\n    \"awful\",\n    \"awkward\",\n    \"axis\",\n    \"baby\",\n    \"bachelor\",\n    \"bacon\",\n    \"badge\",\n    \"bag\",\n    \"balance\",\n    \"balcony\",\n    \"ball\",\n    \"bamboo\",\n    \"banana\",\n    \"banner\",\n    \"bar\",\n    \"barely\",\n    \"bargain\",\n    \"barrel\",\n    \"base\",\n    \"basic\",\n    \"basket\",\n    \"battle\",\n    \"beach\",\n    \"bean\",\n    \"beauty\",\n    \"because\",\n    \"become\",\n    \"beef\",\n    \"before\",\n    \"begin\",\n    \"behave\",\n    \"behind\",\n    \"believe\",\n    \"below\",\n    \"belt\",\n    \"bench\",\n    \"benefit\",\n    \"best\",\n    \"betray\",\n    \"better\",\n    \"between\",\n    \"beyond\",\n    \"bicycle\",\n    \"bid\",\n    \"bike\",\n    \"bind\",\n    \"biology\",\n    \"bird\",\n    \"birth\",\n    \"bitter\",\n    \"black\",\n    \"blade\",\n    \"blame\",\n    \"blanket\",\n    \"blast\",\n    \"bleak\",\n    \"bless\",\n    \"blind\",\n    \"blood\",\n    \"blossom\",\n    \"blouse\",\n    \"blue\",\n    \"blur\",\n    \"blush\",\n    \"board\",\n    \"boat\",\n    \"body\",\n    \"boil\",\n    \"bomb\",\n    \"bone\",\n    \"bonus\",\n    \"book\",\n    \"boost\",\n    \"border\",\n    \"boring\",\n    \"borrow\",\n    \"boss\",\n    \"bottom\",\n    \"bounce\",\n    \"box\",\n    \"boy\",\n    \"bracket\",\n    \"brain\",\n    \"brand\",\n    \"brass\",\n    \"brave\",\n    \"bread\",\n    \"breeze\",\n    \"brick\",\n    \"bridge\",\n    \"brief\",\n    \"bright\",\n    \"bring\",\n    \"brisk\",\n    \"broccoli\",\n    \"broken\",\n    \"bronze\",\n    \"broom\",\n    \"brother\",\n    \"brown\",\n    \"brush\",\n    \"bubble\",\n    \"buddy\",\n    \"budget\",\n    \"buffalo\",\n    \"build\",\n    \"bulb\",\n    \"bulk\",\n    \"bullet\",\n    \"bundle\",\n    \"bunker\",\n    \"burden\",\n    \"burger\",\n    \"burst\",\n    \"bus\",\n    \"business\",\n    \"busy\",\n    \"butter\",\n    \"buyer\",\n    \"buzz\",\n    \"cabbage\",\n    \"cabin\",\n    \"cable\",\n    \"cactus\",\n    \"cage\",\n    \"cake\",\n    \"call\",\n    \"calm\",\n    \"camera\",\n    \"camp\",\n    \"can\",\n    \"canal\",\n    \"cancel\",\n    \"candy\",\n    \"cannon\",\n    \"canoe\",\n    \"canvas\",\n    \"canyon\",\n    \"capable\",\n    \"capital\",\n    \"captain\",\n    \"car\",\n    \"carbon\",\n    \"card\",\n    \"cargo\",\n    \"carpet\",\n    \"carry\",\n    \"cart\",\n    \"case\",\n    \"cash\",\n    \"casino\",\n    \"castle\",\n    \"casual\",\n    \"cat\",\n    \"catalog\",\n    \"catch\",\n    \"category\",\n    \"cattle\",\n    \"caught\",\n    \"cause\",\n    \"caution\",\n    \"cave\",\n    \"ceiling\",\n    \"celery\",\n    \"cement\",\n    \"census\",\n    \"century\",\n    \"cereal\",\n    \"certain\",\n    \"chair\",\n    \"chalk\",\n    \"champion\",\n    \"change\",\n    \"chaos\",\n    \"chapter\",\n    \"charge\",\n    \"chase\",\n    \"chat\",\n    \"cheap\",\n    \"check\",\n    \"cheese\",\n    \"chef\",\n    \"cherry\",\n    \"chest\",\n    \"chicken\",\n    \"chief\",\n    \"child\",\n    \"chimney\",\n    \"choice\",\n    \"choose\",\n    \"chronic\",\n    \"chuckle\",\n    \"chunk\",\n    \"churn\",\n    \"cigar\",\n    \"cinnamon\",\n    \"circle\",\n    \"citizen\",\n    \"city\",\n    \"civil\",\n    \"claim\",\n    \"clap\",\n    \"clarify\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"clerk\",\n    \"clever\",\n    \"click\",\n    \"client\",\n    \"cliff\",\n    \"climb\",\n    \"clinic\",\n    \"clip\",\n    \"clock\",\n    \"clog\",\n    \"close\",\n    \"cloth\",\n    \"cloud\",\n    \"clown\",\n    \"club\",\n    \"clump\",\n    \"cluster\",\n    \"clutch\",\n    \"coach\",\n    \"coast\",\n    \"coconut\",\n    \"code\",\n    \"coffee\",\n    \"coil\",\n    \"coin\",\n    \"collect\",\n    \"color\",\n    \"column\",\n    \"combine\",\n    \"come\",\n    \"comfort\",\n    \"comic\",\n    \"common\",\n    \"company\",\n    \"concert\",\n    \"conduct\",\n    \"confirm\",\n    \"congress\",\n    \"connect\",\n    \"consider\",\n    \"control\",\n    \"convince\",\n    \"cook\",\n    \"cool\",\n    \"copper\",\n    \"copy\",\n    \"coral\",\n    \"core\",\n    \"corn\",\n    \"correct\",\n    \"cost\",\n    \"cotton\",\n    \"couch\",\n    \"country\",\n    \"couple\",\n    \"course\",\n    \"cousin\",\n    \"cover\",\n    \"coyote\",\n    \"crack\",\n    \"cradle\",\n    \"craft\",\n    \"cram\",\n    \"crane\",\n    \"crash\",\n    \"crater\",\n    \"crawl\",\n    \"crazy\",\n    \"cream\",\n    \"credit\",\n    \"creek\",\n    \"crew\",\n    \"cricket\",\n    \"crime\",\n    \"crisp\",\n    \"critic\",\n    \"crop\",\n    \"cross\",\n    \"crouch\",\n    \"crowd\",\n    \"crucial\",\n    \"cruel\",\n    \"cruise\",\n    \"crumble\",\n    \"crunch\",\n    \"crush\",\n    \"cry\",\n    \"crystal\",\n    \"cube\",\n    \"culture\",\n    \"cup\",\n    \"cupboard\",\n    \"curious\",\n    \"current\",\n    \"curtain\",\n    \"curve\",\n    \"cushion\",\n    \"custom\",\n    \"cute\",\n    \"cycle\",\n    \"dad\",\n    \"damage\",\n    \"damp\",\n    \"dance\",\n    \"danger\",\n    \"daring\",\n    \"dash\",\n    \"daughter\",\n    \"dawn\",\n    \"day\",\n    \"deal\",\n    \"debate\",\n    \"debris\",\n    \"decade\",\n    \"december\",\n    \"decide\",\n    \"decline\",\n    \"decorate\",\n    \"decrease\",\n    \"deer\",\n    \"defense\",\n    \"define\",\n    \"defy\",\n    \"degree\",\n    \"delay\",\n    \"deliver\",\n    \"demand\",\n    \"demise\",\n    \"denial\",\n    \"dentist\",\n    \"deny\",\n    \"depart\",\n    \"depend\",\n    \"deposit\",\n    \"depth\",\n    \"deputy\",\n    \"derive\",\n    \"describe\",\n    \"desert\",\n    \"design\",\n    \"desk\",\n    \"despair\",\n    \"destroy\",\n    \"detail\",\n    \"detect\",\n    \"develop\",\n    \"device\",\n    \"devote\",\n    \"diagram\",\n    \"dial\",\n    \"diamond\",\n    \"diary\",\n    \"dice\",\n    \"diesel\",\n    \"diet\",\n    \"differ\",\n    \"digital\",\n    \"dignity\",\n    \"dilemma\",\n    \"dinner\",\n    \"dinosaur\",\n    \"direct\",\n    \"dirt\",\n    \"disagree\",\n    \"discover\",\n    \"disease\",\n    \"dish\",\n    \"dismiss\",\n    \"disorder\",\n    \"display\",\n    \"distance\",\n    \"divert\",\n    \"divide\",\n    \"divorce\",\n    \"dizzy\",\n    \"doctor\",\n    \"document\",\n    \"dog\",\n    \"doll\",\n    \"dolphin\",\n    \"domain\",\n    \"donate\",\n    \"donkey\",\n    \"donor\",\n    \"door\",\n    \"dose\",\n    \"double\",\n    \"dove\",\n    \"draft\",\n    \"dragon\",\n    \"drama\",\n    \"drastic\",\n    \"draw\",\n    \"dream\",\n    \"dress\",\n    \"drift\",\n    \"drill\",\n    \"drink\",\n    \"drip\",\n    \"drive\",\n    \"drop\",\n    \"drum\",\n    \"dry\",\n    \"duck\",\n    \"dumb\",\n    \"dune\",\n    \"during\",\n    \"dust\",\n    \"dutch\",\n    \"duty\",\n    \"dwarf\",\n    \"dynamic\",\n    \"eager\",\n    \"eagle\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"easily\",\n    \"east\",\n    \"easy\",\n    \"echo\",\n    \"ecology\",\n    \"economy\",\n    \"edge\",\n    \"edit\",\n    \"educate\",\n    \"effort\",\n    \"egg\",\n    \"eight\",\n    \"either\",\n    \"elbow\",\n    \"elder\",\n    \"electric\",\n    \"elegant\",\n    \"element\",\n    \"elephant\",\n    \"elevator\",\n    \"elite\",\n    \"else\",\n    \"embark\",\n    \"embody\",\n    \"embrace\",\n    \"emerge\",\n    \"emotion\",\n    \"employ\",\n    \"empower\",\n    \"empty\",\n    \"enable\",\n    \"enact\",\n    \"end\",\n    \"endless\",\n    \"endorse\",\n    \"enemy\",\n    \"energy\",\n    \"enforce\",\n    \"engage\",\n    \"engine\",\n    \"enhance\",\n    \"enjoy\",\n    \"enlist\",\n    \"enough\",\n    \"enrich\",\n    \"enroll\",\n    \"ensure\",\n    \"enter\",\n    \"entire\",\n    \"entry\",\n    \"envelope\",\n    \"episode\",\n    \"equal\",\n    \"equip\",\n    \"era\",\n    \"erase\",\n    \"erode\",\n    \"erosion\",\n    \"error\",\n    \"erupt\",\n    \"escape\",\n    \"essay\",\n    \"essence\",\n    \"estate\",\n    \"eternal\",\n    \"ethics\",\n    \"evidence\",\n    \"evil\",\n    \"evoke\",\n    \"evolve\",\n    \"exact\",\n    \"example\",\n    \"excess\",\n    \"exchange\",\n    \"excite\",\n    \"exclude\",\n    \"excuse\",\n    \"execute\",\n    \"exercise\",\n    \"exhaust\",\n    \"exhibit\",\n    \"exile\",\n    \"exist\",\n    \"exit\",\n    \"exotic\",\n    \"expand\",\n    \"expect\",\n    \"expire\",\n    \"explain\",\n    \"expose\",\n    \"express\",\n    \"extend\",\n    \"extra\",\n    \"eye\",\n    \"eyebrow\",\n    \"fabric\",\n    \"face\",\n    \"faculty\",\n    \"fade\",\n    \"faint\",\n    \"faith\",\n    \"fall\",\n    \"false\",\n    \"fame\",\n    \"family\",\n    \"famous\",\n    \"fan\",\n    \"fancy\",\n    \"fantasy\",\n    \"farm\",\n    \"fashion\",\n    \"fat\",\n    \"fatal\",\n    \"father\",\n    \"fatigue\",\n    \"fault\",\n    \"favorite\",\n    \"feature\",\n    \"february\",\n    \"federal\",\n    \"fee\",\n    \"feed\",\n    \"feel\",\n    \"female\",\n    \"fence\",\n    \"festival\",\n    \"fetch\",\n    \"fever\",\n    \"few\",\n    \"fiber\",\n    \"fiction\",\n    \"field\",\n    \"figure\",\n    \"file\",\n    \"film\",\n    \"filter\",\n    \"final\",\n    \"find\",\n    \"fine\",\n    \"finger\",\n    \"finish\",\n    \"fire\",\n    \"firm\",\n    \"first\",\n    \"fiscal\",\n    \"fish\",\n    \"fit\",\n    \"fitness\",\n    \"fix\",\n    \"flag\",\n    \"flame\",\n    \"flash\",\n    \"flat\",\n    \"flavor\",\n    \"flee\",\n    \"flight\",\n    \"flip\",\n    \"float\",\n    \"flock\",\n    \"floor\",\n    \"flower\",\n    \"fluid\",\n    \"flush\",\n    \"fly\",\n    \"foam\",\n    \"focus\",\n    \"fog\",\n    \"foil\",\n    \"fold\",\n    \"follow\",\n    \"food\",\n    \"foot\",\n    \"force\",\n    \"forest\",\n    \"forget\",\n    \"fork\",\n    \"fortune\",\n    \"forum\",\n    \"forward\",\n    \"fossil\",\n    \"foster\",\n    \"found\",\n    \"fox\",\n    \"fragile\",\n    \"frame\",\n    \"frequent\",\n    \"fresh\",\n    \"friend\",\n    \"fringe\",\n    \"frog\",\n    \"front\",\n    \"frost\",\n    \"frown\",\n    \"frozen\",\n    \"fruit\",\n    \"fuel\",\n    \"fun\",\n    \"funny\",\n    \"furnace\",\n    \"fury\",\n    \"future\",\n    \"gadget\",\n    \"gain\",\n    \"galaxy\",\n    \"gallery\",\n    \"game\",\n    \"gap\",\n    \"garage\",\n    \"garbage\",\n    \"garden\",\n    \"garlic\",\n    \"garment\",\n    \"gas\",\n    \"gasp\",\n    \"gate\",\n    \"gather\",\n    \"gauge\",\n    \"gaze\",\n    \"general\",\n    \"genius\",\n    \"genre\",\n    \"gentle\",\n    \"genuine\",\n    \"gesture\",\n    \"ghost\",\n    \"giant\",\n    \"gift\",\n    \"giggle\",\n    \"ginger\",\n    \"giraffe\",\n    \"girl\",\n    \"give\",\n    \"glad\",\n    \"glance\",\n    \"glare\",\n    \"glass\",\n    \"glide\",\n    \"glimpse\",\n    \"globe\",\n    \"gloom\",\n    \"glory\",\n    \"glove\",\n    \"glow\",\n    \"glue\",\n    \"goat\",\n    \"goddess\",\n    \"gold\",\n    \"good\",\n    \"goose\",\n    \"gorilla\",\n    \"gospel\",\n    \"gossip\",\n    \"govern\",\n    \"gown\",\n    \"grab\",\n    \"grace\",\n    \"grain\",\n    \"grant\",\n    \"grape\",\n    \"grass\",\n    \"gravity\",\n    \"great\",\n    \"green\",\n    \"grid\",\n    \"grief\",\n    \"grit\",\n    \"grocery\",\n    \"group\",\n    \"grow\",\n    \"grunt\",\n    \"guard\",\n    \"guess\",\n    \"guide\",\n    \"guilt\",\n    \"guitar\",\n    \"gun\",\n    \"gym\",\n    \"habit\",\n    \"hair\",\n    \"half\",\n    \"hammer\",\n    \"hamster\",\n    \"hand\",\n    \"happy\",\n    \"harbor\",\n    \"hard\",\n    \"harsh\",\n    \"harvest\",\n    \"hat\",\n    \"have\",\n    \"hawk\",\n    \"hazard\",\n    \"head\",\n    \"health\",\n    \"heart\",\n    \"heavy\",\n    \"hedgehog\",\n    \"height\",\n    \"hello\",\n    \"helmet\",\n    \"help\",\n    \"hen\",\n    \"hero\",\n    \"hidden\",\n    \"high\",\n    \"hill\",\n    \"hint\",\n    \"hip\",\n    \"hire\",\n    \"history\",\n    \"hobby\",\n    \"hockey\",\n    \"hold\",\n    \"hole\",\n    \"holiday\",\n    \"hollow\",\n    \"home\",\n    \"honey\",\n    \"hood\",\n    \"hope\",\n    \"horn\",\n    \"horror\",\n    \"horse\",\n    \"hospital\",\n    \"host\",\n    \"hotel\",\n    \"hour\",\n    \"hover\",\n    \"hub\",\n    \"huge\",\n    \"human\",\n    \"humble\",\n    \"humor\",\n    \"hundred\",\n    \"hungry\",\n    \"hunt\",\n    \"hurdle\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"hybrid\",\n    \"ice\",\n    \"icon\",\n    \"idea\",\n    \"identify\",\n    \"idle\",\n    \"ignore\",\n    \"ill\",\n    \"illegal\",\n    \"illness\",\n    \"image\",\n    \"imitate\",\n    \"immense\",\n    \"immune\",\n    \"impact\",\n    \"impose\",\n    \"improve\",\n    \"impulse\",\n    \"inch\",\n    \"include\",\n    \"income\",\n    \"increase\",\n    \"index\",\n    \"indicate\",\n    \"indoor\",\n    \"industry\",\n    \"infant\",\n    \"inflict\",\n    \"inform\",\n    \"inhale\",\n    \"inherit\",\n    \"initial\",\n    \"inject\",\n    \"injury\",\n    \"inmate\",\n    \"inner\",\n    \"innocent\",\n    \"input\",\n    \"inquiry\",\n    \"insane\",\n    \"insect\",\n    \"inside\",\n    \"inspire\",\n    \"install\",\n    \"intact\",\n    \"interest\",\n    \"into\",\n    \"invest\",\n    \"invite\",\n    \"involve\",\n    \"iron\",\n    \"island\",\n    \"isolate\",\n    \"issue\",\n    \"item\",\n    \"ivory\",\n    \"jacket\",\n    \"jaguar\",\n    \"jar\",\n    \"jazz\",\n    \"jealous\",\n    \"jeans\",\n    \"jelly\",\n    \"jewel\",\n    \"job\",\n    \"join\",\n    \"joke\",\n    \"journey\",\n    \"joy\",\n    \"judge\",\n    \"juice\",\n    \"jump\",\n    \"jungle\",\n    \"junior\",\n    \"junk\",\n    \"just\",\n    \"kangaroo\",\n    \"keen\",\n    \"keep\",\n    \"ketchup\",\n    \"key\",\n    \"kick\",\n    \"kid\",\n    \"kidney\",\n    \"kind\",\n    \"kingdom\",\n    \"kiss\",\n    \"kit\",\n    \"kitchen\",\n    \"kite\",\n    \"kitten\",\n    \"kiwi\",\n    \"knee\",\n    \"knife\",\n    \"knock\",\n    \"know\",\n    \"lab\",\n    \"label\",\n    \"labor\",\n    \"ladder\",\n    \"lady\",\n    \"lake\",\n    \"lamp\",\n    \"language\",\n    \"laptop\",\n    \"large\",\n    \"later\",\n    \"latin\",\n    \"laugh\",\n    \"laundry\",\n    \"lava\",\n    \"law\",\n    \"lawn\",\n    \"lawsuit\",\n    \"layer\",\n    \"lazy\",\n    \"leader\",\n    \"leaf\",\n    \"learn\",\n    \"leave\",\n    \"lecture\",\n    \"left\",\n    \"leg\",\n    \"legal\",\n    \"legend\",\n    \"leisure\",\n    \"lemon\",\n    \"lend\",\n    \"length\",\n    \"lens\",\n    \"leopard\",\n    \"lesson\",\n    \"letter\",\n    \"level\",\n    \"liar\",\n    \"liberty\",\n    \"library\",\n    \"license\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"like\",\n    \"limb\",\n    \"limit\",\n    \"link\",\n    \"lion\",\n    \"liquid\",\n    \"list\",\n    \"little\",\n    \"live\",\n    \"lizard\",\n    \"load\",\n    \"loan\",\n    \"lobster\",\n    \"local\",\n    \"lock\",\n    \"logic\",\n    \"lonely\",\n    \"long\",\n    \"loop\",\n    \"lottery\",\n    \"loud\",\n    \"lounge\",\n    \"love\",\n    \"loyal\",\n    \"lucky\",\n    \"luggage\",\n    \"lumber\",\n    \"lunar\",\n    \"lunch\",\n    \"luxury\",\n    \"lyrics\",\n    \"machine\",\n    \"mad\",\n    \"magic\",\n    \"magnet\",\n    \"maid\",\n    \"mail\",\n    \"main\",\n    \"major\",\n    \"make\",\n    \"mammal\",\n    \"man\",\n    \"manage\",\n    \"mandate\",\n    \"mango\",\n    \"mansion\",\n    \"manual\",\n    \"maple\",\n    \"marble\",\n    \"march\",\n    \"margin\",\n    \"marine\",\n    \"market\",\n    \"marriage\",\n    \"mask\",\n    \"mass\",\n    \"master\",\n    \"match\",\n    \"material\",\n    \"math\",\n    \"matrix\",\n    \"matter\",\n    \"maximum\",\n    \"maze\",\n    \"meadow\",\n    \"mean\",\n    \"measure\",\n    \"meat\",\n    \"mechanic\",\n    \"medal\",\n    \"media\",\n    \"melody\",\n    \"melt\",\n    \"member\",\n    \"memory\",\n    \"mention\",\n    \"menu\",\n    \"mercy\",\n    \"merge\",\n    \"merit\",\n    \"merry\",\n    \"mesh\",\n    \"message\",\n    \"metal\",\n    \"method\",\n    \"middle\",\n    \"midnight\",\n    \"milk\",\n    \"million\",\n    \"mimic\",\n    \"mind\",\n    \"minimum\",\n    \"minor\",\n    \"minute\",\n    \"miracle\",\n    \"mirror\",\n    \"misery\",\n    \"miss\",\n    \"mistake\",\n    \"mix\",\n    \"mixed\",\n    \"mixture\",\n    \"mobile\",\n    \"model\",\n    \"modify\",\n    \"mom\",\n    \"moment\",\n    \"monitor\",\n    \"monkey\",\n    \"monster\",\n    \"month\",\n    \"moon\",\n    \"moral\",\n    \"more\",\n    \"morning\",\n    \"mosquito\",\n    \"mother\",\n    \"motion\",\n    \"motor\",\n    \"mountain\",\n    \"mouse\",\n    \"move\",\n    \"movie\",\n    \"much\",\n    \"muffin\",\n    \"mule\",\n    \"multiply\",\n    \"muscle\",\n    \"museum\",\n    \"mushroom\",\n    \"music\",\n    \"must\",\n    \"mutual\",\n    \"myself\",\n    \"mystery\",\n    \"myth\",\n    \"naive\",\n    \"name\",\n    \"napkin\",\n    \"narrow\",\n    \"nasty\",\n    \"nation\",\n    \"nature\",\n    \"near\",\n    \"neck\",\n    \"need\",\n    \"negative\",\n    \"neglect\",\n    \"neither\",\n    \"nephew\",\n    \"nerve\",\n    \"nest\",\n    \"net\",\n    \"network\",\n    \"neutral\",\n    \"never\",\n    \"news\",\n    \"next\",\n    \"nice\",\n    \"night\",\n    \"noble\",\n    \"noise\",\n    \"nominee\",\n    \"noodle\",\n    \"normal\",\n    \"north\",\n    \"nose\",\n    \"notable\",\n    \"note\",\n    \"nothing\",\n    \"notice\",\n    \"novel\",\n    \"now\",\n    \"nuclear\",\n    \"number\",\n    \"nurse\",\n    \"nut\",\n    \"oak\",\n    \"obey\",\n    \"object\",\n    \"oblige\",\n    \"obscure\",\n    \"observe\",\n    \"obtain\",\n    \"obvious\",\n    \"occur\",\n    \"ocean\",\n    \"october\",\n    \"odor\",\n    \"off\",\n    \"offer\",\n    \"office\",\n    \"often\",\n    \"oil\",\n    \"okay\",\n    \"old\",\n    \"olive\",\n    \"olympic\",\n    \"omit\",\n    \"once\",\n    \"one\",\n    \"onion\",\n    \"online\",\n    \"only\",\n    \"open\",\n    \"opera\",\n    \"opinion\",\n    \"oppose\",\n    \"option\",\n    \"orange\",\n    \"orbit\",\n    \"orchard\",\n    \"order\",\n    \"ordinary\",\n    \"organ\",\n    \"orient\",\n    \"original\",\n    \"orphan\",\n    \"ostrich\",\n    \"other\",\n    \"outdoor\",\n    \"outer\",\n    \"output\",\n    \"outside\",\n    \"oval\",\n    \"oven\",\n    \"over\",\n    \"own\",\n    \"owner\",\n    \"oxygen\",\n    \"oyster\",\n    \"ozone\",\n    \"pact\",\n    \"paddle\",\n    \"page\",\n    \"pair\",\n    \"palace\",\n    \"palm\",\n    \"panda\",\n    \"panel\",\n    \"panic\",\n    \"panther\",\n    \"paper\",\n    \"parade\",\n    \"parent\",\n    \"park\",\n    \"parrot\",\n    \"party\",\n    \"pass\",\n    \"patch\",\n    \"path\",\n    \"patient\",\n    \"patrol\",\n    \"pattern\",\n    \"pause\",\n    \"pave\",\n    \"payment\",\n    \"peace\",\n    \"peanut\",\n    \"pear\",\n    \"peasant\",\n    \"pelican\",\n    \"pen\",\n    \"penalty\",\n    \"pencil\",\n    \"people\",\n    \"pepper\",\n    \"perfect\",\n    \"permit\",\n    \"person\",\n    \"pet\",\n    \"phone\",\n    \"photo\",\n    \"phrase\",\n    \"physical\",\n    \"piano\",\n    \"picnic\",\n    \"picture\",\n    \"piece\",\n    \"pig\",\n    \"pigeon\",\n    \"pill\",\n    \"pilot\",\n    \"pink\",\n    \"pioneer\",\n    \"pipe\",\n    \"pistol\",\n    \"pitch\",\n    \"pizza\",\n    \"place\",\n    \"planet\",\n    \"plastic\",\n    \"plate\",\n    \"play\",\n    \"please\",\n    \"pledge\",\n    \"pluck\",\n    \"plug\",\n    \"plunge\",\n    \"poem\",\n    \"poet\",\n    \"point\",\n    \"polar\",\n    \"pole\",\n    \"police\",\n    \"pond\",\n    \"pony\",\n    \"pool\",\n    \"popular\",\n    \"portion\",\n    \"position\",\n    \"possible\",\n    \"post\",\n    \"potato\",\n    \"pottery\",\n    \"poverty\",\n    \"powder\",\n    \"power\",\n    \"practice\",\n    \"praise\",\n    \"predict\",\n    \"prefer\",\n    \"prepare\",\n    \"present\",\n    \"pretty\",\n    \"prevent\",\n    \"price\",\n    \"pride\",\n    \"primary\",\n    \"print\",\n    \"priority\",\n    \"prison\",\n    \"private\",\n    \"prize\",\n    \"problem\",\n    \"process\",\n    \"produce\",\n    \"profit\",\n    \"program\",\n    \"project\",\n    \"promote\",\n    \"proof\",\n    \"property\",\n    \"prosper\",\n    \"protect\",\n    \"proud\",\n    \"provide\",\n    \"public\",\n    \"pudding\",\n    \"pull\",\n    \"pulp\",\n    \"pulse\",\n    \"pumpkin\",\n    \"punch\",\n    \"pupil\",\n    \"puppy\",\n    \"purchase\",\n    \"purity\",\n    \"purpose\",\n    \"purse\",\n    \"push\",\n    \"put\",\n    \"puzzle\",\n    \"pyramid\",\n    \"quality\",\n    \"quantum\",\n    \"quarter\",\n    \"question\",\n    \"quick\",\n    \"quit\",\n    \"quiz\",\n    \"quote\",\n    \"rabbit\",\n    \"raccoon\",\n    \"race\",\n    \"rack\",\n    \"radar\",\n    \"radio\",\n    \"rail\",\n    \"rain\",\n    \"raise\",\n    \"rally\",\n    \"ramp\",\n    \"ranch\",\n    \"random\",\n    \"range\",\n    \"rapid\",\n    \"rare\",\n    \"rate\",\n    \"rather\",\n    \"raven\",\n    \"raw\",\n    \"razor\",\n    \"ready\",\n    \"real\",\n    \"reason\",\n    \"rebel\",\n    \"rebuild\",\n    \"recall\",\n    \"receive\",\n    \"recipe\",\n    \"record\",\n    \"recycle\",\n    \"reduce\",\n    \"reflect\",\n    \"reform\",\n    \"refuse\",\n    \"region\",\n    \"regret\",\n    \"regular\",\n    \"reject\",\n    \"relax\",\n    \"release\",\n    \"relief\",\n    \"rely\",\n    \"remain\",\n    \"remember\",\n    \"remind\",\n    \"remove\",\n    \"render\",\n    \"renew\",\n    \"rent\",\n    \"reopen\",\n    \"repair\",\n    \"repeat\",\n    \"replace\",\n    \"report\",\n    \"require\",\n    \"rescue\",\n    \"resemble\",\n    \"resist\",\n    \"resource\",\n    \"response\",\n    \"result\",\n    \"retire\",\n    \"retreat\",\n    \"return\",\n    \"reunion\",\n    \"reveal\",\n    \"review\",\n    \"reward\",\n    \"rhythm\",\n    \"rib\",\n    \"ribbon\",\n    \"rice\",\n    \"rich\",\n    \"ride\",\n    \"ridge\",\n    \"rifle\",\n    \"right\",\n    \"rigid\",\n    \"ring\",\n    \"riot\",\n    \"ripple\",\n    \"risk\",\n    \"ritual\",\n    \"rival\",\n    \"river\",\n    \"road\",\n    \"roast\",\n    \"robot\",\n    \"robust\",\n    \"rocket\",\n    \"romance\",\n    \"roof\",\n    \"rookie\",\n    \"room\",\n    \"rose\",\n    \"rotate\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"royal\",\n    \"rubber\",\n    \"rude\",\n    \"rug\",\n    \"rule\",\n    \"run\",\n    \"runway\",\n    \"rural\",\n    \"sad\",\n    \"saddle\",\n    \"sadness\",\n    \"safe\",\n    \"sail\",\n    \"salad\",\n    \"salmon\",\n    \"salon\",\n    \"salt\",\n    \"salute\",\n    \"same\",\n    \"sample\",\n    \"sand\",\n    \"satisfy\",\n    \"satoshi\",\n    \"sauce\",\n    \"sausage\",\n    \"save\",\n    \"say\",\n    \"scale\",\n    \"scan\",\n    \"scare\",\n    \"scatter\",\n    \"scene\",\n    \"scheme\",\n    \"school\",\n    \"science\",\n    \"scissors\",\n    \"scorpion\",\n    \"scout\",\n    \"scrap\",\n    \"screen\",\n    \"script\",\n    \"scrub\",\n    \"sea\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"section\",\n    \"security\",\n    \"seed\",\n    \"seek\",\n    \"segment\",\n    \"select\",\n    \"sell\",\n    \"seminar\",\n    \"senior\",\n    \"sense\",\n    \"sentence\",\n    \"series\",\n    \"service\",\n    \"session\",\n    \"settle\",\n    \"setup\",\n    \"seven\",\n    \"shadow\",\n    \"shaft\",\n    \"shallow\",\n    \"share\",\n    \"shed\",\n    \"shell\",\n    \"sheriff\",\n    \"shield\",\n    \"shift\",\n    \"shine\",\n    \"ship\",\n    \"shiver\",\n    \"shock\",\n    \"shoe\",\n    \"shoot\",\n    \"shop\",\n    \"short\",\n    \"shoulder\",\n    \"shove\",\n    \"shrimp\",\n    \"shrug\",\n    \"shuffle\",\n    \"shy\",\n    \"sibling\",\n    \"sick\",\n    \"side\",\n    \"siege\",\n    \"sight\",\n    \"sign\",\n    \"silent\",\n    \"silk\",\n    \"silly\",\n    \"silver\",\n    \"similar\",\n    \"simple\",\n    \"since\",\n    \"sing\",\n    \"siren\",\n    \"sister\",\n    \"situate\",\n    \"six\",\n    \"size\",\n    \"skate\",\n    \"sketch\",\n    \"ski\",\n    \"skill\",\n    \"skin\",\n    \"skirt\",\n    \"skull\",\n    \"slab\",\n    \"slam\",\n    \"sleep\",\n    \"slender\",\n    \"slice\",\n    \"slide\",\n    \"slight\",\n    \"slim\",\n    \"slogan\",\n    \"slot\",\n    \"slow\",\n    \"slush\",\n    \"small\",\n    \"smart\",\n    \"smile\",\n    \"smoke\",\n    \"smooth\",\n    \"snack\",\n    \"snake\",\n    \"snap\",\n    \"sniff\",\n    \"snow\",\n    \"soap\",\n    \"soccer\",\n    \"social\",\n    \"sock\",\n    \"soda\",\n    \"soft\",\n    \"solar\",\n    \"soldier\",\n    \"solid\",\n    \"solution\",\n    \"solve\",\n    \"someone\",\n    \"song\",\n    \"soon\",\n    \"sorry\",\n    \"sort\",\n    \"soul\",\n    \"sound\",\n    \"soup\",\n    \"source\",\n    \"south\",\n    \"space\",\n    \"spare\",\n    \"spatial\",\n    \"spawn\",\n    \"speak\",\n    \"special\",\n    \"speed\",\n    \"spell\",\n    \"spend\",\n    \"sphere\",\n    \"spice\",\n    \"spider\",\n    \"spike\",\n    \"spin\",\n    \"spirit\",\n    \"split\",\n    \"spoil\",\n    \"sponsor\",\n    \"spoon\",\n    \"sport\",\n    \"spot\",\n    \"spray\",\n    \"spread\",\n    \"spring\",\n    \"spy\",\n    \"square\",\n    \"squeeze\",\n    \"squirrel\",\n    \"stable\",\n    \"stadium\",\n    \"staff\",\n    \"stage\",\n    \"stairs\",\n    \"stamp\",\n    \"stand\",\n    \"start\",\n    \"state\",\n    \"stay\",\n    \"steak\",\n    \"steel\",\n    \"stem\",\n    \"step\",\n    \"stereo\",\n    \"stick\",\n    \"still\",\n    \"sting\",\n    \"stock\",\n    \"stomach\",\n    \"stone\",\n    \"stool\",\n    \"story\",\n    \"stove\",\n    \"strategy\",\n    \"street\",\n    \"strike\",\n    \"strong\",\n    \"struggle\",\n    \"student\",\n    \"stuff\",\n    \"stumble\",\n    \"style\",\n    \"subject\",\n    \"submit\",\n    \"subway\",\n    \"success\",\n    \"such\",\n    \"sudden\",\n    \"suffer\",\n    \"sugar\",\n    \"suggest\",\n    \"suit\",\n    \"summer\",\n    \"sun\",\n    \"sunny\",\n    \"sunset\",\n    \"super\",\n    \"supply\",\n    \"supreme\",\n    \"sure\",\n    \"surface\",\n    \"surge\",\n    \"surprise\",\n    \"surround\",\n    \"survey\",\n    \"suspect\",\n    \"sustain\",\n    \"swallow\",\n    \"swamp\",\n    \"swap\",\n    \"swarm\",\n    \"swear\",\n    \"sweet\",\n    \"swift\",\n    \"swim\",\n    \"swing\",\n    \"switch\",\n    \"sword\",\n    \"symbol\",\n    \"symptom\",\n    \"syrup\",\n    \"system\",\n    \"table\",\n    \"tackle\",\n    \"tag\",\n    \"tail\",\n    \"talent\",\n    \"talk\",\n    \"tank\",\n    \"tape\",\n    \"target\",\n    \"task\",\n    \"taste\",\n    \"tattoo\",\n    \"taxi\",\n    \"teach\",\n    \"team\",\n    \"tell\",\n    \"ten\",\n    \"tenant\",\n    \"tennis\",\n    \"tent\",\n    \"term\",\n    \"test\",\n    \"text\",\n    \"thank\",\n    \"that\",\n    \"theme\",\n    \"then\",\n    \"theory\",\n    \"there\",\n    \"they\",\n    \"thing\",\n    \"this\",\n    \"thought\",\n    \"three\",\n    \"thrive\",\n    \"throw\",\n    \"thumb\",\n    \"thunder\",\n    \"ticket\",\n    \"tide\",\n    \"tiger\",\n    \"tilt\",\n    \"timber\",\n    \"time\",\n    \"tiny\",\n    \"tip\",\n    \"tired\",\n    \"tissue\",\n    \"title\",\n    \"toast\",\n    \"tobacco\",\n    \"today\",\n    \"toddler\",\n    \"toe\",\n    \"together\",\n    \"toilet\",\n    \"token\",\n    \"tomato\",\n    \"tomorrow\",\n    \"tone\",\n    \"tongue\",\n    \"tonight\",\n    \"tool\",\n    \"tooth\",\n    \"top\",\n    \"topic\",\n    \"topple\",\n    \"torch\",\n    \"tornado\",\n    \"tortoise\",\n    \"toss\",\n    \"total\",\n    \"tourist\",\n    \"toward\",\n    \"tower\",\n    \"town\",\n    \"toy\",\n    \"track\",\n    \"trade\",\n    \"traffic\",\n    \"tragic\",\n    \"train\",\n    \"transfer\",\n    \"trap\",\n    \"trash\",\n    \"travel\",\n    \"tray\",\n    \"treat\",\n    \"tree\",\n    \"trend\",\n    \"trial\",\n    \"tribe\",\n    \"trick\",\n    \"trigger\",\n    \"trim\",\n    \"trip\",\n    \"trophy\",\n    \"trouble\",\n    \"truck\",\n    \"true\",\n    \"truly\",\n    \"trumpet\",\n    \"trust\",\n    \"truth\",\n    \"try\",\n    \"tube\",\n    \"tuition\",\n    \"tumble\",\n    \"tuna\",\n    \"tunnel\",\n    \"turkey\",\n    \"turn\",\n    \"turtle\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"twin\",\n    \"twist\",\n    \"two\",\n    \"type\",\n    \"typical\",\n    \"ugly\",\n    \"umbrella\",\n    \"unable\",\n    \"unaware\",\n    \"uncle\",\n    \"uncover\",\n    \"under\",\n    \"undo\",\n    \"unfair\",\n    \"unfold\",\n    \"unhappy\",\n    \"uniform\",\n    \"unique\",\n    \"unit\",\n    \"universe\",\n    \"unknown\",\n    \"unlock\",\n    \"until\",\n    \"unusual\",\n    \"unveil\",\n    \"update\",\n    \"upgrade\",\n    \"uphold\",\n    \"upon\",\n    \"upper\",\n    \"upset\",\n    \"urban\",\n    \"urge\",\n    \"usage\",\n    \"use\",\n    \"used\",\n    \"useful\",\n    \"useless\",\n    \"usual\",\n    \"utility\",\n    \"vacant\",\n    \"vacuum\",\n    \"vague\",\n    \"valid\",\n    \"valley\",\n    \"valve\",\n    \"van\",\n    \"vanish\",\n    \"vapor\",\n    \"various\",\n    \"vast\",\n    \"vault\",\n    \"vehicle\",\n    \"velvet\",\n    \"vendor\",\n    \"venture\",\n    \"venue\",\n    \"verb\",\n    \"verify\",\n    \"version\",\n    \"very\",\n    \"vessel\",\n    \"veteran\",\n    \"viable\",\n    \"vibrant\",\n    \"vicious\",\n    \"victory\",\n    \"video\",\n    \"view\",\n    \"village\",\n    \"vintage\",\n    \"violin\",\n    \"virtual\",\n    \"virus\",\n    \"visa\",\n    \"visit\",\n    \"visual\",\n    \"vital\",\n    \"vivid\",\n    \"vocal\",\n    \"voice\",\n    \"void\",\n    \"volcano\",\n    \"volume\",\n    \"vote\",\n    \"voyage\",\n    \"wage\",\n    \"wagon\",\n    \"wait\",\n    \"walk\",\n    \"wall\",\n    \"walnut\",\n    \"want\",\n    \"warfare\",\n    \"warm\",\n    \"warrior\",\n    \"wash\",\n    \"wasp\",\n    \"waste\",\n    \"water\",\n    \"wave\",\n    \"way\",\n    \"wealth\",\n    \"weapon\",\n    \"wear\",\n    \"weasel\",\n    \"weather\",\n    \"web\",\n    \"wedding\",\n    \"weekend\",\n    \"weird\",\n    \"welcome\",\n    \"west\",\n    \"wet\",\n    \"whale\",\n    \"what\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"where\",\n    \"whip\",\n    \"whisper\",\n    \"wide\",\n    \"width\",\n    \"wife\",\n    \"wild\",\n    \"will\",\n    \"win\",\n    \"window\",\n    \"wine\",\n    \"wing\",\n    \"wink\",\n    \"winner\",\n    \"winter\",\n    \"wire\",\n    \"wisdom\",\n    \"wise\",\n    \"wish\",\n    \"witness\",\n    \"wolf\",\n    \"woman\",\n    \"wonder\",\n    \"wood\",\n    \"wool\",\n    \"word\",\n    \"work\",\n    \"world\",\n    \"worry\",\n    \"worth\",\n    \"wrap\",\n    \"wreck\",\n    \"wrestle\",\n    \"wrist\",\n    \"write\",\n    \"wrong\",\n    \"yard\",\n    \"year\",\n    \"yellow\",\n    \"you\",\n    \"young\",\n    \"youth\",\n    \"zebra\",\n    \"zero\",\n    \"zone\",\n    \"zoo\"\n];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (english); //# sourceMappingURL=english.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/mnemonic/wordlists/english.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/multisig.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/multisig.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG: () => (/* binding */ MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG),\n/* harmony export */   MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG: () => (/* binding */ MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG),\n/* harmony export */   MULTISIG_MERGE_MISMATCH_ERROR_MSG: () => (/* binding */ MULTISIG_MERGE_MISMATCH_ERROR_MSG),\n/* harmony export */   MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG: () => (/* binding */ MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG),\n/* harmony export */   MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG: () => (/* binding */ MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG),\n/* harmony export */   MULTISIG_NO_MUTATE_ERROR_MSG: () => (/* binding */ MULTISIG_NO_MUTATE_ERROR_MSG),\n/* harmony export */   MULTISIG_SIGNATURE_LENGTH_ERROR_MSG: () => (/* binding */ MULTISIG_SIGNATURE_LENGTH_ERROR_MSG),\n/* harmony export */   MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG: () => (/* binding */ MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG),\n/* harmony export */   MultisigTransaction: () => (/* binding */ MultisigTransaction),\n/* harmony export */   appendSignMultisigTransaction: () => (/* binding */ appendSignMultisigTransaction),\n/* harmony export */   appendSignRawMultisigSignature: () => (/* binding */ appendSignRawMultisigSignature),\n/* harmony export */   createMultisigTransaction: () => (/* binding */ createMultisigTransaction),\n/* harmony export */   mergeMultisigTransactions: () => (/* binding */ mergeMultisigTransactions),\n/* harmony export */   multisigAddress: () => (/* binding */ multisigAddress),\n/* harmony export */   signMultisigTransaction: () => (/* binding */ signMultisigTransaction),\n/* harmony export */   verifyMultisig: () => (/* binding */ verifyMultisig)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\n\n\n/**\n Utilities for manipulating multisig transaction blobs.\n */ const MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG = \"Not enough multisig transactions to merge. Need at least two\";\nconst MULTISIG_MERGE_MISMATCH_ERROR_MSG = \"Cannot merge txs. txIDs differ\";\nconst MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG = \"Cannot merge txs. Auth addrs differ\";\nconst MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG = \"Cannot merge txs. Multisig preimages differ\";\nconst MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG = \"Cannot merge txs. subsigs are mismatched.\";\nconst MULTISIG_KEY_NOT_EXIST_ERROR_MSG = \"Key does not exist\";\nconst MULTISIG_NO_MUTATE_ERROR_MSG = \"Cannot mutate a multisig field as it would invalidate all existing signatures.\";\nconst MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG = \"Cannot sign a multisig transaction using `signTxn`. Use `partialSignTxn` instead.\";\nconst MULTISIG_SIGNATURE_LENGTH_ERROR_MSG = \"Cannot add multisig signature. Signature is not of the correct length.\";\n/**\n * createMultisigTransaction creates a raw, unsigned multisig transaction blob.\n * @param txn - the actual transaction.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - ordered list of public keys in this multisig\n * @returns encoded multisig blob\n */ function createMultisigTransaction(txn, { version, threshold, addrs }) {\n    // construct the appendable multisigned transaction format\n    const pks = addrs.map((addr)=>_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(addr).publicKey);\n    const subsigs = pks.map((pk)=>({\n            pk: Buffer.from(pk)\n        }));\n    const msig = {\n        v: version,\n        thr: threshold,\n        subsig: subsigs\n    };\n    const txnForEncoding = txn.get_obj_for_encoding();\n    const signedTxn = {\n        msig,\n        txn: txnForEncoding\n    };\n    // if the address of this multisig is different from the transaction sender,\n    // we need to add the auth-addr field\n    const msigAddr = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImg({\n        version,\n        threshold,\n        pks\n    });\n    if (_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(txnForEncoding.snd) !== _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(msigAddr)) {\n        signedTxn.sgnr = Buffer.from(msigAddr);\n    }\n    return new Uint8Array(_encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(signedTxn));\n}\n/**\n * createMultisigTransactionWithSignature creates a multisig transaction blob with an included signature.\n * @param txn - the actual transaction to sign.\n * @param rawSig - a Buffer raw signature of that transaction\n * @param myPk - a public key that corresponds with rawSig\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - ordered list of public keys in this multisig\n * @returns encoded multisig blob\n */ function createMultisigTransactionWithSignature(txn, { rawSig, myPk }, { version, threshold, pks }) {\n    // Create an empty encoded multisig transaction\n    const encodedMsig = createMultisigTransaction(txn, {\n        version,\n        threshold,\n        addrs: pks.map((pk)=>_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(pk))\n    });\n    // note: this is not signed yet, but will be shortly\n    const signedTxn = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(encodedMsig);\n    let keyExist = false;\n    // append the multisig signature to the corresponding public key in the multisig blob\n    signedTxn.msig.subsig.forEach((subsig, i)=>{\n        if (_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.bytesEqual(subsig.pk, myPk)) {\n            keyExist = true;\n            signedTxn.msig.subsig[i].s = rawSig;\n        }\n    });\n    if (keyExist === false) {\n        throw new Error(MULTISIG_KEY_NOT_EXIST_ERROR_MSG);\n    }\n    // if the address of this multisig is different from the transaction sender,\n    // we need to add the auth-addr field\n    const msigAddr = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImg({\n        version,\n        threshold,\n        pks\n    });\n    if (_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(signedTxn.txn.snd) !== _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(msigAddr)) {\n        signedTxn.sgnr = Buffer.from(msigAddr);\n    }\n    return new Uint8Array(_encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(signedTxn));\n}\n/**\n * MultisigTransaction is a Transaction that also supports creating partially-signed multisig transactions.\n */ class MultisigTransaction extends _transaction__WEBPACK_IMPORTED_MODULE_3__.Transaction {\n    /* eslint-disable class-methods-use-this,@typescript-eslint/no-unused-vars,no-dupe-class-members */ /**\n     * Override inherited method to throw an error, as mutating transactions are prohibited in this context\n     */ addLease() {\n        throw new Error(MULTISIG_NO_MUTATE_ERROR_MSG);\n    }\n    /**\n     * Override inherited method to throw an error, as mutating transactions are prohibited in this context\n     */ addRekey() {\n        throw new Error(MULTISIG_NO_MUTATE_ERROR_MSG);\n    }\n    signTxn(sk) {\n        throw new Error(MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG);\n    }\n    /* eslint-enable class-methods-use-this,@typescript-eslint/no-unused-vars,no-dupe-class-members */ /**\n     * partialSignTxn partially signs this transaction and returns a partially-signed multisig transaction,\n     * encoded with msgpack as a typed array.\n     * @param version - multisig version\n     * @param threshold - multisig threshold\n     * @param pks - multisig public key list, order is important.\n     * @param sk - an Algorand secret key to sign with.\n     * @returns an encoded, partially signed multisig transaction.\n     */ partialSignTxn({ version, threshold, pks }, sk) {\n        // get signature verifier\n        const myPk = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.keyPairFromSecretKey(sk).publicKey;\n        return createMultisigTransactionWithSignature(this, {\n            rawSig: this.rawSignTxn(sk),\n            myPk\n        }, {\n            version,\n            threshold,\n            pks\n        });\n    }\n    /**\n     * partialSignWithMultisigSignature partially signs this transaction with an external raw multisig signature and returns\n     * a partially-signed multisig transaction, encoded with msgpack as a typed array.\n     * @param metadata - multisig metadata\n     * @param signerAddr - address of the signer\n     * @param signature - raw multisig signature\n     * @returns an encoded, partially signed multisig transaction.\n     */ partialSignWithMultisigSignature(metadata, signerAddr, signature) {\n        if (!_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.isValidSignatureLength(signature.length)) {\n            throw new Error(MULTISIG_SIGNATURE_LENGTH_ERROR_MSG);\n        }\n        return createMultisigTransactionWithSignature(this, {\n            rawSig: signature,\n            myPk: _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(signerAddr).publicKey\n        }, metadata);\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(txnForEnc) {\n        return super.from_obj_for_encoding(txnForEnc);\n    }\n}\n/**\n * mergeMultisigTransactions takes a list of multisig transaction blobs, and merges them.\n * @param multisigTxnBlobs - a list of blobs representing encoded multisig txns\n * @returns typed array msg-pack encoded multisig txn\n */ function mergeMultisigTransactions(multisigTxnBlobs) {\n    if (multisigTxnBlobs.length < 2) {\n        throw new Error(MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG);\n    }\n    const refSigTx = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(multisigTxnBlobs[0]);\n    const refTxID = MultisigTransaction.from_obj_for_encoding(refSigTx.txn).txID();\n    const refAuthAddr = refSigTx.sgnr ? _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(refSigTx.sgnr) : undefined;\n    const refPreImage = {\n        version: refSigTx.msig.v,\n        threshold: refSigTx.msig.thr,\n        pks: refSigTx.msig.subsig.map((subsig)=>subsig.pk)\n    };\n    const refMsigAddr = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImg(refPreImage));\n    const newSubsigs = refSigTx.msig.subsig.map((sig)=>({\n            ...sig\n        }));\n    for(let i = 1; i < multisigTxnBlobs.length; i++){\n        const unisig = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(multisigTxnBlobs[i]);\n        const unisigAlgoTxn = MultisigTransaction.from_obj_for_encoding(unisig.txn);\n        if (unisigAlgoTxn.txID() !== refTxID) {\n            throw new Error(MULTISIG_MERGE_MISMATCH_ERROR_MSG);\n        }\n        const authAddr = unisig.sgnr ? _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(unisig.sgnr) : undefined;\n        if (refAuthAddr !== authAddr) {\n            throw new Error(MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG);\n        }\n        // check multisig has same preimage as reference\n        if (unisig.msig.subsig.length !== refSigTx.msig.subsig.length) {\n            throw new Error(MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);\n        }\n        const preimg = {\n            version: unisig.msig.v,\n            threshold: unisig.msig.thr,\n            pks: unisig.msig.subsig.map((subsig)=>subsig.pk)\n        };\n        const msgigAddr = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImg(preimg));\n        if (refMsigAddr !== msgigAddr) {\n            throw new Error(MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);\n        }\n        // now, we can merge\n        unisig.msig.subsig.forEach((uniSubsig, index)=>{\n            if (!uniSubsig.s) return;\n            const current = newSubsigs[index];\n            // we convert the Uint8Arrays uniSubsig.s and current.s to Buffers here because (as\n            // of Dec 2020) React overrides the buffer package with an older version that does\n            // not support Uint8Arrays in the comparison function. See this thread for more\n            // info: https://github.com/algorand/js-algorand-sdk/issues/252\n            if (current.s && Buffer.compare(Buffer.from(uniSubsig.s), Buffer.from(current.s)) !== 0) {\n                // mismatch\n                throw new Error(MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG);\n            }\n            current.s = uniSubsig.s;\n        });\n    }\n    const msig = {\n        v: refSigTx.msig.v,\n        thr: refSigTx.msig.thr,\n        subsig: newSubsigs\n    };\n    const signedTxn = {\n        msig,\n        txn: refSigTx.txn\n    };\n    if (typeof refAuthAddr !== \"undefined\") {\n        signedTxn.sgnr = Buffer.from(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(refAuthAddr).publicKey);\n    }\n    return new Uint8Array(_encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(signedTxn));\n}\nfunction verifyMultisig(toBeVerified, msig, publicKey) {\n    const version = msig.v;\n    const threshold = msig.thr;\n    const subsigs = msig.subsig;\n    const pks = subsigs.map((subsig)=>subsig.pk);\n    if (msig.subsig.length < threshold) {\n        return false;\n    }\n    let pk;\n    try {\n        pk = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImg({\n            version,\n            threshold,\n            pks\n        });\n    } catch (e) {\n        return false;\n    }\n    if (!_utils_utils__WEBPACK_IMPORTED_MODULE_4__.arrayEqual(pk, publicKey)) {\n        return false;\n    }\n    let counter = 0;\n    for (const subsig of subsigs){\n        if (subsig.s !== undefined) {\n            counter += 1;\n        }\n    }\n    if (counter < threshold) {\n        return false;\n    }\n    let verifiedCounter = 0;\n    for (const subsig of subsigs){\n        if (subsig.s !== undefined) {\n            if (_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_0__.verify(toBeVerified, subsig.s, subsig.pk)) {\n                verifiedCounter += 1;\n            }\n        }\n    }\n    if (verifiedCounter < threshold) {\n        return false;\n    }\n    return true;\n}\n/**\n * signMultisigTransaction takes a raw transaction (see signTransaction), a multisig preimage, a secret key, and returns\n * a multisig transaction, which is a blob representing a transaction and multisignature account preimage. The returned\n * multisig txn can accumulate additional signatures through mergeMultisigTransactions or appendSignMultisigTransaction.\n * @param txn - object with either payment or key registration fields\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param sk - Algorand secret key. The corresponding pk should be in the pre image.\n * @returns object containing txID, and blob of partially signed multisig transaction (with multisig preimage information)\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n */ function signMultisigTransaction(txn, { version, threshold, addrs }, sk) {\n    // check that the from field matches the mSigPreImage. If from field is not populated, fill it in.\n    const expectedFromRaw = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImgAddrs({\n        version,\n        threshold,\n        addrs\n    });\n    if (!Object.prototype.hasOwnProperty.call(txn, \"from\")) {\n        // eslint-disable-next-line no-param-reassign\n        txn.from = expectedFromRaw;\n    }\n    // build pks for partialSign\n    const pks = addrs.map((addr)=>_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(addr).publicKey);\n    // `txn` needs to be handled differently if it's a constructed `Transaction` vs a dict of constructor args\n    const txnAlreadyBuilt = txn instanceof _transaction__WEBPACK_IMPORTED_MODULE_3__.Transaction;\n    let algoTxn;\n    let blob;\n    if (txnAlreadyBuilt) {\n        algoTxn = txn;\n        blob = MultisigTransaction.prototype.partialSignTxn.call(algoTxn, {\n            version,\n            threshold,\n            pks\n        }, sk);\n    } else {\n        algoTxn = new MultisigTransaction(txn);\n        blob = algoTxn.partialSignTxn({\n            version,\n            threshold,\n            pks\n        }, sk);\n    }\n    return {\n        txID: algoTxn.txID().toString(),\n        blob\n    };\n}\n/**\n * appendSignMultisigTransaction takes a multisig transaction blob, and appends our signature to it.\n * While we could derive public key preimagery from the partially-signed multisig transaction,\n * we ask the caller to pass it back in, to ensure they know what they are signing.\n * @param multisigTxnBlob - an encoded multisig txn. Supports non-payment txn types.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param sk - Algorand secret key\n * @returns object containing txID, and blob representing encoded multisig txn\n */ function appendSignMultisigTransaction(multisigTxnBlob, { version, threshold, addrs }, sk) {\n    const pks = addrs.map((addr)=>_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(addr).publicKey);\n    // obtain underlying txn, sign it, and merge it\n    const multisigTxObj = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(multisigTxnBlob);\n    const msigTxn = MultisigTransaction.from_obj_for_encoding(multisigTxObj.txn);\n    const partialSignedBlob = msigTxn.partialSignTxn({\n        version,\n        threshold,\n        pks\n    }, sk);\n    return {\n        txID: msigTxn.txID().toString(),\n        blob: mergeMultisigTransactions([\n            multisigTxnBlob,\n            partialSignedBlob\n        ])\n    };\n}\n/**\n * appendMultisigTransactionSignature takes a multisig transaction blob, and appends a given raw signature to it.\n * This makes it possible to compile a multisig signature using only raw signatures from external methods.\n * @param multisigTxnBlob - an encoded multisig txn. Supports non-payment txn types.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param signerAddr - address of the signer\n * @param signature - raw multisig signature\n * @returns object containing txID, and blob representing encoded multisig txn\n */ function appendSignRawMultisigSignature(multisigTxnBlob, { version, threshold, addrs }, signerAddr, signature) {\n    const pks = addrs.map((addr)=>_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(addr).publicKey);\n    // obtain underlying txn, sign it, and merge it\n    const multisigTxObj = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(multisigTxnBlob);\n    const msigTxn = MultisigTransaction.from_obj_for_encoding(multisigTxObj.txn);\n    const partialSignedBlob = msigTxn.partialSignWithMultisigSignature({\n        version,\n        threshold,\n        pks\n    }, signerAddr, signature);\n    return {\n        txID: msigTxn.txID().toString(),\n        blob: mergeMultisigTransactions([\n            multisigTxnBlob,\n            partialSignedBlob\n        ])\n    };\n}\n/**\n * multisigAddress takes multisig metadata (preimage) and returns the corresponding human readable Algorand address.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - list of Algorand addresses\n */ function multisigAddress({ version, threshold, addrs }) {\n    return _encoding_address__WEBPACK_IMPORTED_MODULE_1__.fromMultisigPreImgAddrs({\n        version,\n        threshold,\n        addrs\n    });\n} //# sourceMappingURL=multisig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HASH_BYTES_LENGTH: () => (/* binding */ HASH_BYTES_LENGTH),\n/* harmony export */   PUBLIC_KEY_LENGTH: () => (/* binding */ PUBLIC_KEY_LENGTH),\n/* harmony export */   SECRET_KEY_LENGTH: () => (/* binding */ SECRET_KEY_LENGTH),\n/* harmony export */   SEED_BTYES_LENGTH: () => (/* binding */ SEED_BTYES_LENGTH),\n/* harmony export */   bytesEqual: () => (/* binding */ bytesEqual),\n/* harmony export */   genericHash: () => (/* binding */ genericHash),\n/* harmony export */   isValidSignatureLength: () => (/* binding */ isValidSignatureLength),\n/* harmony export */   keyPair: () => (/* binding */ keyPair),\n/* harmony export */   keyPairFromSecretKey: () => (/* binding */ keyPairFromSecretKey),\n/* harmony export */   keyPairFromSeed: () => (/* binding */ keyPairFromSeed),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js\");\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tweetnacl__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var js_sha512__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-sha512 */ \"(ssr)/./node_modules/.pnpm/js-sha512@0.8.0/node_modules/js-sha512/src/sha512.js\");\n/* harmony import */ var js_sha512__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_sha512__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction genericHash(arr) {\n    return js_sha512__WEBPACK_IMPORTED_MODULE_1___default().sha512_256.array(arr);\n}\nfunction randomBytes(length) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(length);\n}\nfunction keyPairFromSeed(seed) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign.keyPair.fromSeed(seed);\n}\nfunction keyPair() {\n    const seed = randomBytes((tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().box).secretKeyLength);\n    return keyPairFromSeed(seed);\n}\nfunction isValidSignatureLength(len) {\n    return len === (tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign).signatureLength;\n}\nfunction keyPairFromSecretKey(sk) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign.keyPair.fromSecretKey(sk);\n}\nfunction sign(msg, secretKey) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign.detached(msg, secretKey);\n}\nfunction bytesEqual(a, b) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().verify(a, b);\n}\nfunction verify(message, signature, verifyKey) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign.detached.verify(message, signature, verifyKey);\n}\n// constants\nconst PUBLIC_KEY_LENGTH = (tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign).publicKeyLength;\nconst SECRET_KEY_LENGTH = (tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().sign).secretKeyLength;\nconst HASH_BYTES_LENGTH = 32;\nconst SEED_BTYES_LENGTH = 32; //# sourceMappingURL=naclWrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbmFjbC9uYWNsV3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDRTtBQUN4QixTQUFTRSxZQUFZQyxHQUFHO0lBQzNCLE9BQU9GLDJEQUFpQixDQUFDSSxLQUFLLENBQUNGO0FBQ25DO0FBQ08sU0FBU0csWUFBWUMsTUFBTTtJQUM5QixPQUFPUCw0REFBZ0IsQ0FBQ087QUFDNUI7QUFDTyxTQUFTQyxnQkFBZ0JDLElBQUk7SUFDaEMsT0FBT1QscURBQVMsQ0FBQ1csT0FBTyxDQUFDQyxRQUFRLENBQUNIO0FBQ3RDO0FBQ08sU0FBU0U7SUFDWixNQUFNRixPQUFPSCxZQUFZTixzREFBUSxDQUFDYyxlQUFlO0lBQ2pELE9BQU9OLGdCQUFnQkM7QUFDM0I7QUFDTyxTQUFTTSx1QkFBdUJDLEdBQUc7SUFDdEMsT0FBT0EsUUFBUWhCLHVEQUFTLENBQUNpQixlQUFlO0FBQzVDO0FBQ08sU0FBU0MscUJBQXFCQyxFQUFFO0lBQ25DLE9BQU9uQixxREFBUyxDQUFDVyxPQUFPLENBQUNTLGFBQWEsQ0FBQ0Q7QUFDM0M7QUFDTyxTQUFTVCxLQUFLVyxHQUFHLEVBQUVDLFNBQVM7SUFDL0IsT0FBT3RCLHFEQUFTLENBQUN1QixRQUFRLENBQUNGLEtBQUtDO0FBQ25DO0FBQ08sU0FBU0UsV0FBV0MsQ0FBQyxFQUFFQyxDQUFDO0lBQzNCLE9BQU8xQix1REFBVyxDQUFDeUIsR0FBR0M7QUFDMUI7QUFDTyxTQUFTQyxPQUFPQyxPQUFPLEVBQUVDLFNBQVMsRUFBRUMsU0FBUztJQUNoRCxPQUFPOUIscURBQVMsQ0FBQ3VCLFFBQVEsQ0FBQ0ksTUFBTSxDQUFDQyxTQUFTQyxXQUFXQztBQUN6RDtBQUNBLFlBQVk7QUFDTCxNQUFNQyxvQkFBb0IvQix1REFBUyxDQUFDZ0MsZUFBZSxDQUFDO0FBQ3BELE1BQU1DLG9CQUFvQmpDLHVEQUFTLENBQUNjLGVBQWUsQ0FBQztBQUNwRCxNQUFNb0Isb0JBQW9CLEdBQUc7QUFDN0IsTUFBTUMsb0JBQW9CLEdBQUcsQ0FDcEMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9uYWNsL25hY2xXcmFwcGVycy5qcz8wYjMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuYWNsIGZyb20gJ3R3ZWV0bmFjbCc7XG5pbXBvcnQgc2hhNTEyIGZyb20gJ2pzLXNoYTUxMic7XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJpY0hhc2goYXJyKSB7XG4gICAgcmV0dXJuIHNoYTUxMi5zaGE1MTJfMjU2LmFycmF5KGFycik7XG59XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tQnl0ZXMobGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5hY2wucmFuZG9tQnl0ZXMobGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlQYWlyRnJvbVNlZWQoc2VlZCkge1xuICAgIHJldHVybiBuYWNsLnNpZ24ua2V5UGFpci5mcm9tU2VlZChzZWVkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlQYWlyKCkge1xuICAgIGNvbnN0IHNlZWQgPSByYW5kb21CeXRlcyhuYWNsLmJveC5zZWNyZXRLZXlMZW5ndGgpO1xuICAgIHJldHVybiBrZXlQYWlyRnJvbVNlZWQoc2VlZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFNpZ25hdHVyZUxlbmd0aChsZW4pIHtcbiAgICByZXR1cm4gbGVuID09PSBuYWNsLnNpZ24uc2lnbmF0dXJlTGVuZ3RoO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGtleVBhaXJGcm9tU2VjcmV0S2V5KHNrKSB7XG4gICAgcmV0dXJuIG5hY2wuc2lnbi5rZXlQYWlyLmZyb21TZWNyZXRLZXkoc2spO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNpZ24obXNnLCBzZWNyZXRLZXkpIHtcbiAgICByZXR1cm4gbmFjbC5zaWduLmRldGFjaGVkKG1zZywgc2VjcmV0S2V5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBieXRlc0VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gbmFjbC52ZXJpZnkoYSwgYik7XG59XG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZ25hdHVyZSwgdmVyaWZ5S2V5KSB7XG4gICAgcmV0dXJuIG5hY2wuc2lnbi5kZXRhY2hlZC52ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlLCB2ZXJpZnlLZXkpO1xufVxuLy8gY29uc3RhbnRzXG5leHBvcnQgY29uc3QgUFVCTElDX0tFWV9MRU5HVEggPSBuYWNsLnNpZ24ucHVibGljS2V5TGVuZ3RoO1xuZXhwb3J0IGNvbnN0IFNFQ1JFVF9LRVlfTEVOR1RIID0gbmFjbC5zaWduLnNlY3JldEtleUxlbmd0aDtcbmV4cG9ydCBjb25zdCBIQVNIX0JZVEVTX0xFTkdUSCA9IDMyO1xuZXhwb3J0IGNvbnN0IFNFRURfQlRZRVNfTEVOR1RIID0gMzI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYWNsV3JhcHBlcnMuanMubWFwIl0sIm5hbWVzIjpbIm5hY2wiLCJzaGE1MTIiLCJnZW5lcmljSGFzaCIsImFyciIsInNoYTUxMl8yNTYiLCJhcnJheSIsInJhbmRvbUJ5dGVzIiwibGVuZ3RoIiwia2V5UGFpckZyb21TZWVkIiwic2VlZCIsInNpZ24iLCJrZXlQYWlyIiwiZnJvbVNlZWQiLCJib3giLCJzZWNyZXRLZXlMZW5ndGgiLCJpc1ZhbGlkU2lnbmF0dXJlTGVuZ3RoIiwibGVuIiwic2lnbmF0dXJlTGVuZ3RoIiwia2V5UGFpckZyb21TZWNyZXRLZXkiLCJzayIsImZyb21TZWNyZXRLZXkiLCJtc2ciLCJzZWNyZXRLZXkiLCJkZXRhY2hlZCIsImJ5dGVzRXF1YWwiLCJhIiwiYiIsInZlcmlmeSIsIm1lc3NhZ2UiLCJzaWduYXR1cmUiLCJ2ZXJpZnlLZXkiLCJQVUJMSUNfS0VZX0xFTkdUSCIsInB1YmxpY0tleUxlbmd0aCIsIlNFQ1JFVF9LRVlfTEVOR1RIIiwiSEFTSF9CWVRFU19MRU5HVEgiLCJTRUVEX0JUWUVTX0xFTkdUSCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/signer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/signer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTransactionWithSigner: () => (/* binding */ isTransactionWithSigner),\n/* harmony export */   makeBasicAccountTransactionSigner: () => (/* binding */ makeBasicAccountTransactionSigner),\n/* harmony export */   makeLogicSigAccountTransactionSigner: () => (/* binding */ makeLogicSigAccountTransactionSigner),\n/* harmony export */   makeMultiSigAccountTransactionSigner: () => (/* binding */ makeMultiSigAccountTransactionSigner)\n/* harmony export */ });\n/* harmony import */ var _logicsig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logicsig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logicsig.js\");\n/* harmony import */ var _multisig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/multisig.js\");\n\n\n/**\n * Create a TransactionSigner that can sign transactions for the provided basic Account.\n */ function makeBasicAccountTransactionSigner(account) {\n    return (txnGroup, indexesToSign)=>{\n        const signed = [];\n        for (const index of indexesToSign){\n            signed.push(txnGroup[index].signTxn(account.sk));\n        }\n        return Promise.resolve(signed);\n    };\n}\n/**\n * Create a TransactionSigner that can sign transactions for the provided LogicSigAccount.\n */ function makeLogicSigAccountTransactionSigner(account) {\n    return (txnGroup, indexesToSign)=>{\n        const signed = [];\n        for (const index of indexesToSign){\n            const { blob } = (0,_logicsig__WEBPACK_IMPORTED_MODULE_0__.signLogicSigTransactionObject)(txnGroup[index], account);\n            signed.push(blob);\n        }\n        return Promise.resolve(signed);\n    };\n}\n/**\n * Create a TransactionSigner that can sign transactions for the provided Multisig account.\n * @param msig - The Multisig account metadata\n * @param sks - An array of private keys belonging to the msig which should sign the transactions.\n */ function makeMultiSigAccountTransactionSigner(msig, sks) {\n    return (txnGroup, indexesToSign)=>{\n        const signed = [];\n        for (const index of indexesToSign){\n            const txn = txnGroup[index];\n            const partialSigs = [];\n            for (const sk of sks){\n                const { blob } = (0,_multisig__WEBPACK_IMPORTED_MODULE_1__.signMultisigTransaction)(txn, msig, sk);\n                partialSigs.push(blob);\n            }\n            signed.push((0,_multisig__WEBPACK_IMPORTED_MODULE_1__.mergeMultisigTransactions)(partialSigs));\n        }\n        return Promise.resolve(signed);\n    };\n}\n/**\n * Check if a value conforms to the TransactionWithSigner structure.\n * @param value - The value to check.\n * @returns True if an only if the value has the structure of a TransactionWithSigner.\n */ function isTransactionWithSigner(value) {\n    return typeof value === \"object\" && Object.keys(value).length === 2 && typeof value.txn === \"object\" && typeof value.signer === \"function\";\n} //# sourceMappingURL=signer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vc2lnbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEyRDtBQUNxQjtBQUNoRjs7Q0FFQyxHQUNNLFNBQVNHLGtDQUFrQ0MsT0FBTztJQUNyRCxPQUFPLENBQUNDLFVBQVVDO1FBQ2QsTUFBTUMsU0FBUyxFQUFFO1FBQ2pCLEtBQUssTUFBTUMsU0FBU0YsY0FBZTtZQUMvQkMsT0FBT0UsSUFBSSxDQUFDSixRQUFRLENBQUNHLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDTixRQUFRTyxFQUFFO1FBQ2xEO1FBQ0EsT0FBT0MsUUFBUUMsT0FBTyxDQUFDTjtJQUMzQjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTTyxxQ0FBcUNWLE9BQU87SUFDeEQsT0FBTyxDQUFDQyxVQUFVQztRQUNkLE1BQU1DLFNBQVMsRUFBRTtRQUNqQixLQUFLLE1BQU1DLFNBQVNGLGNBQWU7WUFDL0IsTUFBTSxFQUFFUyxJQUFJLEVBQUUsR0FBR2Ysd0VBQTZCQSxDQUFDSyxRQUFRLENBQUNHLE1BQU0sRUFBRUo7WUFDaEVHLE9BQU9FLElBQUksQ0FBQ007UUFDaEI7UUFDQSxPQUFPSCxRQUFRQyxPQUFPLENBQUNOO0lBQzNCO0FBQ0o7QUFDQTs7OztDQUlDLEdBQ00sU0FBU1MscUNBQXFDQyxJQUFJLEVBQUVDLEdBQUc7SUFDMUQsT0FBTyxDQUFDYixVQUFVQztRQUNkLE1BQU1DLFNBQVMsRUFBRTtRQUNqQixLQUFLLE1BQU1DLFNBQVNGLGNBQWU7WUFDL0IsTUFBTWEsTUFBTWQsUUFBUSxDQUFDRyxNQUFNO1lBQzNCLE1BQU1ZLGNBQWMsRUFBRTtZQUN0QixLQUFLLE1BQU1ULE1BQU1PLElBQUs7Z0JBQ2xCLE1BQU0sRUFBRUgsSUFBSSxFQUFFLEdBQUdkLGtFQUF1QkEsQ0FBQ2tCLEtBQUtGLE1BQU1OO2dCQUNwRFMsWUFBWVgsSUFBSSxDQUFDTTtZQUNyQjtZQUNBUixPQUFPRSxJQUFJLENBQUNQLG9FQUF5QkEsQ0FBQ2tCO1FBQzFDO1FBQ0EsT0FBT1IsUUFBUUMsT0FBTyxDQUFDTjtJQUMzQjtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNjLHdCQUF3QkMsS0FBSztJQUN6QyxPQUFRLE9BQU9BLFVBQVUsWUFDckJDLE9BQU9DLElBQUksQ0FBQ0YsT0FBT0csTUFBTSxLQUFLLEtBQzlCLE9BQU9ILE1BQU1ILEdBQUcsS0FBSyxZQUNyQixPQUFPRyxNQUFNSSxNQUFNLEtBQUs7QUFDaEMsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL3NpZ25lci5qcz8wZDdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uT2JqZWN0IH0gZnJvbSAnLi9sb2dpY3NpZyc7XG5pbXBvcnQgeyBzaWduTXVsdGlzaWdUcmFuc2FjdGlvbiwgbWVyZ2VNdWx0aXNpZ1RyYW5zYWN0aW9ucyB9IGZyb20gJy4vbXVsdGlzaWcnO1xuLyoqXG4gKiBDcmVhdGUgYSBUcmFuc2FjdGlvblNpZ25lciB0aGF0IGNhbiBzaWduIHRyYW5zYWN0aW9ucyBmb3IgdGhlIHByb3ZpZGVkIGJhc2ljIEFjY291bnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQmFzaWNBY2NvdW50VHJhbnNhY3Rpb25TaWduZXIoYWNjb3VudCkge1xuICAgIHJldHVybiAodHhuR3JvdXAsIGluZGV4ZXNUb1NpZ24pID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmVkID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlc1RvU2lnbikge1xuICAgICAgICAgICAgc2lnbmVkLnB1c2godHhuR3JvdXBbaW5kZXhdLnNpZ25UeG4oYWNjb3VudC5zaykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2lnbmVkKTtcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBUcmFuc2FjdGlvblNpZ25lciB0aGF0IGNhbiBzaWduIHRyYW5zYWN0aW9ucyBmb3IgdGhlIHByb3ZpZGVkIExvZ2ljU2lnQWNjb3VudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VMb2dpY1NpZ0FjY291bnRUcmFuc2FjdGlvblNpZ25lcihhY2NvdW50KSB7XG4gICAgcmV0dXJuICh0eG5Hcm91cCwgaW5kZXhlc1RvU2lnbikgPT4ge1xuICAgICAgICBjb25zdCBzaWduZWQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBpbmRleGVzVG9TaWduKSB7XG4gICAgICAgICAgICBjb25zdCB7IGJsb2IgfSA9IHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uT2JqZWN0KHR4bkdyb3VwW2luZGV4XSwgYWNjb3VudCk7XG4gICAgICAgICAgICBzaWduZWQucHVzaChibG9iKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHNpZ25lZCk7XG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgVHJhbnNhY3Rpb25TaWduZXIgdGhhdCBjYW4gc2lnbiB0cmFuc2FjdGlvbnMgZm9yIHRoZSBwcm92aWRlZCBNdWx0aXNpZyBhY2NvdW50LlxuICogQHBhcmFtIG1zaWcgLSBUaGUgTXVsdGlzaWcgYWNjb3VudCBtZXRhZGF0YVxuICogQHBhcmFtIHNrcyAtIEFuIGFycmF5IG9mIHByaXZhdGUga2V5cyBiZWxvbmdpbmcgdG8gdGhlIG1zaWcgd2hpY2ggc2hvdWxkIHNpZ24gdGhlIHRyYW5zYWN0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VNdWx0aVNpZ0FjY291bnRUcmFuc2FjdGlvblNpZ25lcihtc2lnLCBza3MpIHtcbiAgICByZXR1cm4gKHR4bkdyb3VwLCBpbmRleGVzVG9TaWduKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25lZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXNUb1NpZ24pIHtcbiAgICAgICAgICAgIGNvbnN0IHR4biA9IHR4bkdyb3VwW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpYWxTaWdzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNrIG9mIHNrcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgYmxvYiB9ID0gc2lnbk11bHRpc2lnVHJhbnNhY3Rpb24odHhuLCBtc2lnLCBzayk7XG4gICAgICAgICAgICAgICAgcGFydGlhbFNpZ3MucHVzaChibG9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpZ25lZC5wdXNoKG1lcmdlTXVsdGlzaWdUcmFuc2FjdGlvbnMocGFydGlhbFNpZ3MpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHNpZ25lZCk7XG4gICAgfTtcbn1cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBjb25mb3JtcyB0byB0aGUgVHJhbnNhY3Rpb25XaXRoU2lnbmVyIHN0cnVjdHVyZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIFRydWUgaWYgYW4gb25seSBpZiB0aGUgdmFsdWUgaGFzIHRoZSBzdHJ1Y3R1cmUgb2YgYSBUcmFuc2FjdGlvbldpdGhTaWduZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RyYW5zYWN0aW9uV2l0aFNpZ25lcih2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAyICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZS50eG4gPT09ICdvYmplY3QnICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZS5zaWduZXIgPT09ICdmdW5jdGlvbicpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmVyLmpzLm1hcCJdLCJuYW1lcyI6WyJzaWduTG9naWNTaWdUcmFuc2FjdGlvbk9iamVjdCIsInNpZ25NdWx0aXNpZ1RyYW5zYWN0aW9uIiwibWVyZ2VNdWx0aXNpZ1RyYW5zYWN0aW9ucyIsIm1ha2VCYXNpY0FjY291bnRUcmFuc2FjdGlvblNpZ25lciIsImFjY291bnQiLCJ0eG5Hcm91cCIsImluZGV4ZXNUb1NpZ24iLCJzaWduZWQiLCJpbmRleCIsInB1c2giLCJzaWduVHhuIiwic2siLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1ha2VMb2dpY1NpZ0FjY291bnRUcmFuc2FjdGlvblNpZ25lciIsImJsb2IiLCJtYWtlTXVsdGlTaWdBY2NvdW50VHJhbnNhY3Rpb25TaWduZXIiLCJtc2lnIiwic2tzIiwidHhuIiwicGFydGlhbFNpZ3MiLCJpc1RyYW5zYWN0aW9uV2l0aFNpZ25lciIsInZhbHVlIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInNpZ25lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALGORAND_MIN_TX_FEE: () => (/* binding */ ALGORAND_MIN_TX_FEE),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   decodeSignedTransaction: () => (/* binding */ decodeSignedTransaction),\n/* harmony export */   decodeUnsignedTransaction: () => (/* binding */ decodeUnsignedTransaction),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   encodeUnsignedTransaction: () => (/* binding */ encodeUnsignedTransaction),\n/* harmony export */   instantiateTxnIfNeeded: () => (/* binding */ instantiateTxnIfNeeded)\n/* harmony export */ });\n/* harmony import */ var hi_base32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hi-base32 */ \"(ssr)/./node_modules/.pnpm/hi-base32@0.5.1/node_modules/hi-base32/src/base32.js\");\n/* harmony import */ var hi_base32__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hi_base32__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _encoding_address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _boxStorage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./boxStorage */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/boxStorage.js\");\n/* harmony import */ var _types_transactions_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types/transactions/base */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/base.js\");\n\n\n\n\n\n\n\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nconst ALGORAND_MIN_TX_FEE = 1000; // version v5\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\nconst ASSET_METADATA_HASH_LENGTH = 32;\nconst KEYREG_VOTE_KEY_LENGTH = 32;\nconst KEYREG_SELECTION_KEY_LENGTH = 32;\nconst KEYREG_STATE_PROOF_KEY_LENGTH = 64;\nfunction getKeyregKey(input, inputName, length) {\n    if (input == null) {\n        return undefined;\n    }\n    let inputAsBuffer;\n    if (typeof input === \"string\") {\n        inputAsBuffer = Buffer.from(input, \"base64\");\n    } else if (input.constructor === Uint8Array) {\n        inputAsBuffer = Buffer.from(input);\n    } else if (Buffer.isBuffer(input)) {\n        inputAsBuffer = input;\n    }\n    if (inputAsBuffer == null || inputAsBuffer.byteLength !== length) {\n        throw Error(`${inputName} must be a ${length} byte Uint8Array or Buffer or base64 string.`);\n    }\n    return inputAsBuffer;\n}\n/**\n * Transaction enables construction of Algorand transactions\n * */ class Transaction {\n    constructor({ ...transaction }){\n        this.name = \"Transaction\";\n        this.tag = Buffer.from(\"TX\");\n        // Populate defaults\n        /* eslint-disable no-param-reassign */ const defaults = {\n            type: _types_transactions_base__WEBPACK_IMPORTED_MODULE_6__.TransactionType.pay,\n            flatFee: false,\n            nonParticipation: false\n        };\n        // Default type\n        if (typeof transaction.type === \"undefined\") {\n            transaction.type = defaults.type;\n        }\n        // Default flatFee\n        if (typeof transaction.flatFee === \"undefined\") {\n            transaction.flatFee = defaults.flatFee;\n        }\n        // Default nonParticipation\n        if (transaction.type === _types_transactions_base__WEBPACK_IMPORTED_MODULE_6__.TransactionType.keyreg && typeof transaction.voteKey !== \"undefined\" && typeof transaction.nonParticipation === \"undefined\") {\n            transaction.nonParticipation = defaults.nonParticipation;\n        }\n        /* eslint-enable no-param-reassign */ // Move suggested parameters from its object to inline\n        if (transaction.suggestedParams !== undefined) {\n            // Create a temporary reference to the transaction object that has params inline and also as a suggested params object\n            //   - Helpful for moving params from named object to inline\n            const reference = transaction;\n            reference.genesisHash = reference.suggestedParams.genesisHash;\n            reference.fee = reference.suggestedParams.fee;\n            if (reference.suggestedParams.flatFee !== undefined) reference.flatFee = reference.suggestedParams.flatFee;\n            reference.firstRound = reference.suggestedParams.firstRound;\n            reference.lastRound = reference.suggestedParams.lastRound;\n            reference.genesisID = reference.suggestedParams.genesisID;\n        }\n        // At this point all suggestedParams have been moved to be inline, so we can reassign the transaction object type\n        // to one which is more useful as we prepare properties for storing\n        const txn = transaction;\n        txn.from = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.from);\n        if (txn.to !== undefined) txn.to = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.to);\n        if (txn.closeRemainderTo !== undefined) txn.closeRemainderTo = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.closeRemainderTo);\n        if (txn.assetManager !== undefined) txn.assetManager = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.assetManager);\n        if (txn.assetReserve !== undefined) txn.assetReserve = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.assetReserve);\n        if (txn.assetFreeze !== undefined) txn.assetFreeze = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.assetFreeze);\n        if (txn.assetClawback !== undefined) txn.assetClawback = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.assetClawback);\n        if (txn.assetRevocationTarget !== undefined) txn.assetRevocationTarget = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.assetRevocationTarget);\n        if (txn.freezeAccount !== undefined) txn.freezeAccount = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.freezeAccount);\n        if (txn.reKeyTo !== undefined) txn.reKeyTo = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(txn.reKeyTo);\n        if (txn.genesisHash === undefined) throw Error(\"genesis hash must be specified and in a base64 string.\");\n        txn.genesisHash = Buffer.from(txn.genesisHash, \"base64\");\n        if (txn.amount !== undefined && (!(Number.isSafeInteger(txn.amount) || typeof txn.amount === \"bigint\" && txn.amount <= BigInt(\"0xffffffffffffffff\")) || txn.amount < 0)) throw Error(\"Amount must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.\");\n        if (!Number.isSafeInteger(txn.fee) || txn.fee < 0) throw Error(\"fee must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(txn.firstRound) || txn.firstRound < 0) throw Error(\"firstRound must be a positive number\");\n        if (!Number.isSafeInteger(txn.lastRound) || txn.lastRound < 0) throw Error(\"lastRound must be a positive number\");\n        if (txn.extraPages !== undefined && (!Number.isInteger(txn.extraPages) || txn.extraPages < 0 || txn.extraPages > 3)) throw Error(\"extraPages must be an Integer between and including 0 to 3\");\n        if (txn.assetTotal !== undefined && (!(Number.isSafeInteger(txn.assetTotal) || typeof txn.assetTotal === \"bigint\" && txn.assetTotal <= BigInt(\"0xffffffffffffffff\")) || txn.assetTotal < 0)) throw Error(\"Total asset issuance must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.\");\n        if (txn.assetDecimals !== undefined && (!Number.isSafeInteger(txn.assetDecimals) || txn.assetDecimals < 0 || txn.assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)) throw Error(`assetDecimals must be a positive number and smaller than ${ALGORAND_MAX_ASSET_DECIMALS.toString()}`);\n        if (txn.assetIndex !== undefined && (!Number.isSafeInteger(txn.assetIndex) || txn.assetIndex < 0)) throw Error(\"Asset index must be a positive number and smaller than 2^53-1\");\n        if (txn.appIndex !== undefined && (!Number.isSafeInteger(txn.appIndex) || txn.appIndex < 0)) throw Error(\"Application index must be a positive number and smaller than 2^53-1\");\n        if (txn.appLocalInts !== undefined && (!Number.isSafeInteger(txn.appLocalInts) || txn.appLocalInts < 0)) throw Error(\"Application local ints count must be a positive number and smaller than 2^53-1\");\n        if (txn.appLocalByteSlices !== undefined && (!Number.isSafeInteger(txn.appLocalByteSlices) || txn.appLocalByteSlices < 0)) throw Error(\"Application local byte slices count must be a positive number and smaller than 2^53-1\");\n        if (txn.appGlobalInts !== undefined && (!Number.isSafeInteger(txn.appGlobalInts) || txn.appGlobalInts < 0)) throw Error(\"Application global ints count must be a positive number and smaller than 2^53-1\");\n        if (txn.appGlobalByteSlices !== undefined && (!Number.isSafeInteger(txn.appGlobalByteSlices) || txn.appGlobalByteSlices < 0)) throw Error(\"Application global byte slices count must be a positive number and smaller than 2^53-1\");\n        if (txn.appApprovalProgram !== undefined) {\n            if (txn.appApprovalProgram.constructor !== Uint8Array) throw Error(\"appApprovalProgram must be a Uint8Array.\");\n        }\n        if (txn.appClearProgram !== undefined) {\n            if (txn.appClearProgram.constructor !== Uint8Array) throw Error(\"appClearProgram must be a Uint8Array.\");\n        }\n        if (txn.appArgs !== undefined) {\n            if (!Array.isArray(txn.appArgs)) throw Error(\"appArgs must be an Array of Uint8Array.\");\n            txn.appArgs = txn.appArgs.slice();\n            txn.appArgs.forEach((arg)=>{\n                if (arg.constructor !== Uint8Array) throw Error(\"each element of AppArgs must be a Uint8Array.\");\n            });\n        } else {\n            txn.appArgs = [];\n        }\n        if (txn.appAccounts !== undefined) {\n            if (!Array.isArray(txn.appAccounts)) throw Error(\"appAccounts must be an Array of addresses.\");\n            txn.appAccounts = txn.appAccounts.map((addressAsString)=>_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(addressAsString));\n        }\n        if (txn.appForeignApps !== undefined) {\n            if (!Array.isArray(txn.appForeignApps)) throw Error(\"appForeignApps must be an Array of integers.\");\n            txn.appForeignApps = txn.appForeignApps.slice();\n            txn.appForeignApps.forEach((foreignAppIndex)=>{\n                if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0) throw Error(\"each foreign application index must be a positive number and smaller than 2^53-1\");\n            });\n        }\n        if (txn.appForeignAssets !== undefined) {\n            if (!Array.isArray(txn.appForeignAssets)) throw Error(\"appForeignAssets must be an Array of integers.\");\n            txn.appForeignAssets = txn.appForeignAssets.slice();\n            txn.appForeignAssets.forEach((foreignAssetIndex)=>{\n                if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0) throw Error(\"each foreign asset index must be a positive number and smaller than 2^53-1\");\n            });\n        }\n        if (txn.boxes !== undefined) {\n            if (!Array.isArray(txn.boxes)) throw Error(\"boxes must be an Array of BoxReference.\");\n            txn.boxes = txn.boxes.slice();\n            txn.boxes.forEach((box)=>{\n                if (!Number.isSafeInteger(box.appIndex) || box.name.constructor !== Uint8Array) throw Error(\"box app index must be a number and name must be an Uint8Array.\");\n            });\n        }\n        if (txn.assetMetadataHash !== undefined && txn.assetMetadataHash.length !== 0) {\n            if (typeof txn.assetMetadataHash === \"string\") {\n                txn.assetMetadataHash = new Uint8Array(Buffer.from(txn.assetMetadataHash));\n            }\n            if (txn.assetMetadataHash.constructor !== Uint8Array || txn.assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH) {\n                throw Error(`assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`);\n            }\n            if (txn.assetMetadataHash.every((value)=>value === 0)) {\n                // if hash contains all 0s, omit it\n                txn.assetMetadataHash = undefined;\n            }\n        } else {\n            txn.assetMetadataHash = undefined;\n        }\n        if (txn.note !== undefined) {\n            if (txn.note.constructor !== Uint8Array) throw Error(\"note must be a Uint8Array.\");\n        } else {\n            txn.note = new Uint8Array(0);\n        }\n        if (txn.lease !== undefined) {\n            if (txn.lease.constructor !== Uint8Array) throw Error(\"lease must be a Uint8Array.\");\n            if (txn.lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);\n            if (txn.lease.every((value)=>value === 0)) {\n                // if lease contains all 0s, omit it\n                txn.lease = new Uint8Array(0);\n            }\n        } else {\n            txn.lease = new Uint8Array(0);\n        }\n        txn.voteKey = getKeyregKey(txn.voteKey, \"voteKey\", KEYREG_VOTE_KEY_LENGTH);\n        txn.selectionKey = getKeyregKey(txn.selectionKey, \"selectionKey\", KEYREG_SELECTION_KEY_LENGTH);\n        txn.stateProofKey = getKeyregKey(txn.stateProofKey, \"stateProofKey\", KEYREG_STATE_PROOF_KEY_LENGTH);\n        // Checking non-participation key registration\n        if (txn.nonParticipation && (txn.voteKey || txn.selectionKey || txn.voteFirst || txn.stateProofKey || txn.voteLast || txn.voteKeyDilution)) {\n            throw new Error(\"nonParticipation is true but participation params are present.\");\n        }\n        // Checking online key registration\n        if (!txn.nonParticipation && (txn.voteKey || txn.selectionKey || txn.stateProofKey || txn.voteFirst || txn.voteLast || txn.voteKeyDilution) && !(txn.voteKey && txn.selectionKey && txn.voteFirst && txn.voteLast && txn.voteKeyDilution)) {\n            throw new Error(\"online key registration missing at least one of the following fields: \" + \"voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution\");\n        }\n        // The last option is an offline key registration where all the fields\n        // nonParticipation, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution\n        // are all undefined/false\n        // Remove unwanted properties and store transaction on instance\n        delete txn.suggestedParams;\n        Object.assign(this, _utils_utils__WEBPACK_IMPORTED_MODULE_4__.removeUndefinedProperties(txn));\n        // Modify Fee\n        if (!txn.flatFee) {\n            this.fee *= this.estimateSize();\n            // If suggested fee too small and will be rejected, set to min tx fee\n            if (this.fee < ALGORAND_MIN_TX_FEE) {\n                this.fee = ALGORAND_MIN_TX_FEE;\n            }\n        }\n        // say we are aware of groups\n        this.group = undefined;\n        // stpf fields\n        if (txn.stateProofType !== undefined && (!Number.isSafeInteger(txn.stateProofType) || txn.stateProofType < 0)) throw Error(\"State Proof type must be a positive number and smaller than 2^53-1\");\n        if (txn.stateProofMessage !== undefined) {\n            if (txn.stateProofMessage.constructor !== Uint8Array) throw Error(\"stateProofMessage must be a Uint8Array.\");\n        } else {\n            txn.stateProofMessage = new Uint8Array(0);\n        }\n        if (txn.stateProof !== undefined) {\n            if (txn.stateProof.constructor !== Uint8Array) throw Error(\"stateProof must be a Uint8Array.\");\n        } else {\n            txn.stateProof = new Uint8Array(0);\n        }\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        if (this.type === \"pay\") {\n            const txn = {\n                amt: this.amount,\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: Buffer.from(this.note),\n                snd: Buffer.from(this.from.publicKey),\n                type: \"pay\",\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: Buffer.from(this.lease),\n                grp: this.group\n            };\n            // parse close address\n            if (this.closeRemainderTo !== undefined && _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(this.closeRemainderTo.publicKey) !== _encoding_address__WEBPACK_IMPORTED_MODULE_1__.ALGORAND_ZERO_ADDRESS_STRING) {\n                txn.close = Buffer.from(this.closeRemainderTo.publicKey);\n            }\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n            }\n            // allowed zero values\n            if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\n            if (!txn.note.length) delete txn.note;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.fv) delete txn.fv;\n            if (!txn.gen) delete txn.gen;\n            if (txn.grp === undefined) delete txn.grp;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.rekey) delete txn.rekey;\n            return txn;\n        }\n        if (this.type === \"keyreg\") {\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: Buffer.from(this.note),\n                snd: Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: Buffer.from(this.lease),\n                grp: this.group,\n                votekey: this.voteKey,\n                selkey: this.selectionKey,\n                sprfkey: this.stateProofKey,\n                votefst: this.voteFirst,\n                votelst: this.voteLast,\n                votekd: this.voteKeyDilution\n            };\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.fv) delete txn.fv;\n            if (!txn.gen) delete txn.gen;\n            if (txn.grp === undefined) delete txn.grp;\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n            }\n            if (this.nonParticipation) {\n                txn.nonpart = true;\n            }\n            if (!txn.selkey) delete txn.selkey;\n            if (!txn.votekey) delete txn.votekey;\n            if (!txn.sprfkey) delete txn.sprfkey;\n            if (!txn.votefst) delete txn.votefst;\n            if (!txn.votelst) delete txn.votelst;\n            if (!txn.votekd) delete txn.votekd;\n            return txn;\n        }\n        if (this.type === \"acfg\") {\n            // asset creation, or asset reconfigure, or asset destruction\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: Buffer.from(this.note),\n                snd: Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: Buffer.from(this.lease),\n                grp: this.group,\n                caid: this.assetIndex,\n                apar: {\n                    t: this.assetTotal,\n                    df: this.assetDefaultFrozen,\n                    dc: this.assetDecimals\n                }\n            };\n            if (this.assetManager !== undefined) txn.apar.m = Buffer.from(this.assetManager.publicKey);\n            if (this.assetReserve !== undefined) txn.apar.r = Buffer.from(this.assetReserve.publicKey);\n            if (this.assetFreeze !== undefined) txn.apar.f = Buffer.from(this.assetFreeze.publicKey);\n            if (this.assetClawback !== undefined) txn.apar.c = Buffer.from(this.assetClawback.publicKey);\n            if (this.assetName !== undefined) txn.apar.an = this.assetName;\n            if (this.assetUnitName !== undefined) txn.apar.un = this.assetUnitName;\n            if (this.assetURL !== undefined) txn.apar.au = this.assetURL;\n            if (this.assetMetadataHash !== undefined) txn.apar.am = Buffer.from(this.assetMetadataHash);\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.fv) delete txn.fv;\n            if (!txn.gen) delete txn.gen;\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n            }\n            if (!txn.caid) delete txn.caid;\n            if (!txn.apar.t && !txn.apar.un && !txn.apar.an && !txn.apar.df && !txn.apar.m && !txn.apar.r && !txn.apar.f && !txn.apar.c && !txn.apar.au && !txn.apar.am && !txn.apar.dc) {\n                delete txn.apar;\n            } else {\n                if (!txn.apar.t) delete txn.apar.t;\n                if (!txn.apar.dc) delete txn.apar.dc;\n                if (!txn.apar.un) delete txn.apar.un;\n                if (!txn.apar.an) delete txn.apar.an;\n                if (!txn.apar.df) delete txn.apar.df;\n                if (!txn.apar.m) delete txn.apar.m;\n                if (!txn.apar.r) delete txn.apar.r;\n                if (!txn.apar.f) delete txn.apar.f;\n                if (!txn.apar.c) delete txn.apar.c;\n                if (!txn.apar.au) delete txn.apar.au;\n                if (!txn.apar.am) delete txn.apar.am;\n            }\n            if (txn.grp === undefined) delete txn.grp;\n            return txn;\n        }\n        if (this.type === \"axfer\") {\n            // asset transfer, acceptance, revocation, mint, or burn\n            const txn = {\n                aamt: this.amount,\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: Buffer.from(this.note),\n                snd: Buffer.from(this.from.publicKey),\n                arcv: Buffer.from(this.to.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: Buffer.from(this.lease),\n                grp: this.group,\n                xaid: this.assetIndex\n            };\n            if (this.closeRemainderTo !== undefined) txn.aclose = Buffer.from(this.closeRemainderTo.publicKey);\n            if (this.assetRevocationTarget !== undefined) txn.asnd = Buffer.from(this.assetRevocationTarget.publicKey);\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.aamt) delete txn.aamt;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.fv) delete txn.fv;\n            if (!txn.gen) delete txn.gen;\n            if (txn.grp === undefined) delete txn.grp;\n            if (!txn.aclose) delete txn.aclose;\n            if (!txn.asnd) delete txn.asnd;\n            if (!txn.rekey) delete txn.rekey;\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n            }\n            return txn;\n        }\n        if (this.type === \"afrz\") {\n            // asset freeze or unfreeze\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: Buffer.from(this.note),\n                snd: Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: Buffer.from(this.lease),\n                grp: this.group,\n                faid: this.assetIndex,\n                afrz: this.freezeState\n            };\n            if (this.freezeAccount !== undefined) txn.fadd = Buffer.from(this.freezeAccount.publicKey);\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.fv) delete txn.fv;\n            if (!txn.gen) delete txn.gen;\n            if (!txn.afrz) delete txn.afrz;\n            if (txn.grp === undefined) delete txn.grp;\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n            }\n            return txn;\n        }\n        if (this.type === \"appl\") {\n            // application call of some kind\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: Buffer.from(this.note),\n                snd: Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: Buffer.from(this.lease),\n                grp: this.group,\n                apid: this.appIndex,\n                apan: this.appOnComplete,\n                apls: {\n                    nui: this.appLocalInts,\n                    nbs: this.appLocalByteSlices\n                },\n                apgs: {\n                    nui: this.appGlobalInts,\n                    nbs: this.appGlobalByteSlices\n                },\n                apfa: this.appForeignApps,\n                apas: this.appForeignAssets,\n                apep: this.extraPages,\n                apbx: (0,_boxStorage__WEBPACK_IMPORTED_MODULE_5__.translateBoxReferences)(this.boxes, this.appForeignApps, this.appIndex)\n            };\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n            }\n            if (this.appApprovalProgram !== undefined) {\n                txn.apap = Buffer.from(this.appApprovalProgram);\n            }\n            if (this.appClearProgram !== undefined) {\n                txn.apsu = Buffer.from(this.appClearProgram);\n            }\n            if (this.appArgs !== undefined) {\n                txn.apaa = this.appArgs.map((arg)=>Buffer.from(arg));\n            }\n            if (this.appAccounts !== undefined) {\n                txn.apat = this.appAccounts.map((decodedAddress)=>Buffer.from(decodedAddress.publicKey));\n            }\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.fv) delete txn.fv;\n            if (!txn.gen) delete txn.gen;\n            if (!txn.apid) delete txn.apid;\n            if (!txn.apls.nui) delete txn.apls.nui;\n            if (!txn.apls.nbs) delete txn.apls.nbs;\n            if (!txn.apls.nui && !txn.apls.nbs) delete txn.apls;\n            if (!txn.apgs.nui) delete txn.apgs.nui;\n            if (!txn.apgs.nbs) delete txn.apgs.nbs;\n            if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n            if (!txn.apgs.nui && !txn.apgs.nbs) delete txn.apgs;\n            if (!txn.apap) delete txn.apap;\n            if (!txn.apsu) delete txn.apsu;\n            if (!txn.apan) delete txn.apan;\n            if (!txn.apfa || !txn.apfa.length) delete txn.apfa;\n            if (!txn.apas || !txn.apas.length) delete txn.apas;\n            for (const box of txn.apbx){\n                if (!box.i) delete box.i;\n                if (!box.n || !box.n.length) delete box.n;\n            }\n            if (!txn.apbx || !txn.apbx.length) delete txn.apbx;\n            if (!txn.apat || !txn.apat.length) delete txn.apat;\n            if (!txn.apep) delete txn.apep;\n            if (txn.grp === undefined) delete txn.grp;\n            return txn;\n        }\n        if (this.type === \"stpf\") {\n            // state proof txn\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: Buffer.from(this.note),\n                snd: Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: Buffer.from(this.lease),\n                sptype: this.stateProofType,\n                spmsg: Buffer.from(this.stateProofMessage),\n                sp: Buffer.from(this.stateProof)\n            };\n            // allowed zero values\n            if (!txn.sptype) delete txn.sptype;\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.fv) delete txn.fv;\n            if (!txn.gen) delete txn.gen;\n            if (!txn.apid) delete txn.apid;\n            if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n            if (!txn.apap) delete txn.apap;\n            if (!txn.apsu) delete txn.apsu;\n            if (!txn.apan) delete txn.apan;\n            if (!txn.apfa || !txn.apfa.length) delete txn.apfa;\n            if (!txn.apas || !txn.apas.length) delete txn.apas;\n            if (!txn.apat || !txn.apat.length) delete txn.apat;\n            if (!txn.apep) delete txn.apep;\n            if (txn.grp === undefined) delete txn.grp;\n            return txn;\n        }\n        return undefined;\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(txnForEnc) {\n        const txn = Object.create(this.prototype);\n        txn.name = \"Transaction\";\n        txn.tag = Buffer.from(\"TX\");\n        txn.genesisID = txnForEnc.gen;\n        txn.genesisHash = Buffer.from(txnForEnc.gh);\n        if (!(0,_types_transactions_base__WEBPACK_IMPORTED_MODULE_6__.isTransactionType)(txnForEnc.type)) {\n            throw new Error(`Unrecognized transaction type: ${txnForEnc.type}`);\n        }\n        txn.type = txnForEnc.type;\n        txn.fee = txnForEnc.fee;\n        txn.firstRound = txnForEnc.fv;\n        txn.lastRound = txnForEnc.lv;\n        txn.note = new Uint8Array(txnForEnc.note);\n        txn.lease = new Uint8Array(txnForEnc.lx);\n        txn.from = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.snd)));\n        if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\n        if (txnForEnc.rekey !== undefined) txn.reKeyTo = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.rekey)));\n        if (txnForEnc.type === \"pay\") {\n            txn.amount = txnForEnc.amt;\n            txn.to = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.rcv)));\n            if (txnForEnc.close !== undefined) txn.closeRemainderTo = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(txnForEnc.close));\n        } else if (txnForEnc.type === \"keyreg\") {\n            if (txnForEnc.votekey !== undefined) {\n                txn.voteKey = Buffer.from(txnForEnc.votekey);\n            }\n            if (txnForEnc.selkey !== undefined) {\n                txn.selectionKey = Buffer.from(txnForEnc.selkey);\n            }\n            if (txnForEnc.sprfkey !== undefined) {\n                txn.stateProofKey = Buffer.from(txnForEnc.sprfkey);\n            }\n            if (txnForEnc.votekd !== undefined) {\n                txn.voteKeyDilution = txnForEnc.votekd;\n            }\n            if (txnForEnc.votefst !== undefined) {\n                txn.voteFirst = txnForEnc.votefst;\n            }\n            if (txnForEnc.votelst !== undefined) {\n                txn.voteLast = txnForEnc.votelst;\n            }\n            if (txnForEnc.nonpart !== undefined) {\n                txn.nonParticipation = txnForEnc.nonpart;\n            }\n        } else if (txnForEnc.type === \"acfg\") {\n            // asset creation, or asset reconfigure, or asset destruction\n            if (txnForEnc.caid !== undefined) {\n                txn.assetIndex = txnForEnc.caid;\n            }\n            if (txnForEnc.apar !== undefined) {\n                txn.assetTotal = txnForEnc.apar.t;\n                txn.assetDefaultFrozen = txnForEnc.apar.df;\n                if (txnForEnc.apar.dc !== undefined) txn.assetDecimals = txnForEnc.apar.dc;\n                if (txnForEnc.apar.m !== undefined) txn.assetManager = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.apar.m)));\n                if (txnForEnc.apar.r !== undefined) txn.assetReserve = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.apar.r)));\n                if (txnForEnc.apar.f !== undefined) txn.assetFreeze = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.apar.f)));\n                if (txnForEnc.apar.c !== undefined) txn.assetClawback = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.apar.c)));\n                if (txnForEnc.apar.un !== undefined) txn.assetUnitName = txnForEnc.apar.un;\n                if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\n                if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\n                if (txnForEnc.apar.am !== undefined) txn.assetMetadataHash = txnForEnc.apar.am;\n            }\n        } else if (txnForEnc.type === \"axfer\") {\n            // asset transfer, acceptance, revocation, mint, or burn\n            if (txnForEnc.xaid !== undefined) {\n                txn.assetIndex = txnForEnc.xaid;\n            }\n            if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\n            if (txnForEnc.aclose !== undefined) {\n                txn.closeRemainderTo = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.aclose)));\n            }\n            if (txnForEnc.asnd !== undefined) {\n                txn.assetRevocationTarget = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.asnd)));\n            }\n            txn.to = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.arcv)));\n        } else if (txnForEnc.type === \"afrz\") {\n            if (txnForEnc.afrz !== undefined) {\n                txn.freezeState = txnForEnc.afrz;\n            }\n            if (txnForEnc.faid !== undefined) {\n                txn.assetIndex = txnForEnc.faid;\n            }\n            txn.freezeAccount = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(txnForEnc.fadd)));\n        } else if (txnForEnc.type === \"appl\") {\n            if (txnForEnc.apid !== undefined) {\n                txn.appIndex = txnForEnc.apid;\n            }\n            if (txnForEnc.apan !== undefined) {\n                txn.appOnComplete = txnForEnc.apan;\n            }\n            if (txnForEnc.apls !== undefined) {\n                if (txnForEnc.apls.nui !== undefined) txn.appLocalInts = txnForEnc.apls.nui;\n                if (txnForEnc.apls.nbs !== undefined) txn.appLocalByteSlices = txnForEnc.apls.nbs;\n            }\n            if (txnForEnc.apgs !== undefined) {\n                if (txnForEnc.apgs.nui !== undefined) txn.appGlobalInts = txnForEnc.apgs.nui;\n                if (txnForEnc.apgs.nbs !== undefined) txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n            }\n            if (txnForEnc.apep !== undefined) {\n                txn.extraPages = txnForEnc.apep;\n            }\n            if (txnForEnc.apap !== undefined) {\n                txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n            }\n            if (txnForEnc.apsu !== undefined) {\n                txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n            }\n            if (txnForEnc.apaa !== undefined) {\n                txn.appArgs = txnForEnc.apaa.map((arg)=>new Uint8Array(arg));\n            }\n            if (txnForEnc.apat !== undefined) {\n                txn.appAccounts = txnForEnc.apat.map((addressBytes)=>_encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(new Uint8Array(addressBytes))));\n            }\n            if (txnForEnc.apfa !== undefined) {\n                txn.appForeignApps = txnForEnc.apfa;\n            }\n            if (txnForEnc.apas !== undefined) {\n                txn.appForeignAssets = txnForEnc.apas;\n            }\n            if (txnForEnc.apbx !== undefined) {\n                txn.boxes = txnForEnc.apbx.map((box)=>({\n                        // We return 0 for the app ID so that it's guaranteed translateBoxReferences will\n                        // translate the app index back to 0. If we instead returned the called app ID,\n                        // translateBoxReferences would translate the app index to a nonzero value if the called\n                        // app is also in the foreign app array.\n                        appIndex: box.i ? txn.appForeignApps[box.i - 1] : 0,\n                        name: box.n\n                    }));\n            }\n        } else if (txnForEnc.type === \"stpf\") {\n            if (txnForEnc.sptype !== undefined) {\n                txn.stateProofType = txnForEnc.sptype;\n            }\n            if (txnForEnc.sp !== undefined) {\n                txn.stateProof = txnForEnc.sp;\n            }\n            if (txnForEnc.spmsg !== undefined) {\n                txn.stateProofMessage = txnForEnc.spmsg;\n            }\n        }\n        return txn;\n    }\n    estimateSize() {\n        return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n    }\n    bytesToSign() {\n        const encodedMsg = this.toByte();\n        return Buffer.from(_utils_utils__WEBPACK_IMPORTED_MODULE_4__.concatArrays(this.tag, encodedMsg));\n    }\n    toByte() {\n        return _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(this.get_obj_for_encoding());\n    }\n    // returns the raw signature\n    rawSignTxn(sk) {\n        const toBeSigned = this.bytesToSign();\n        const sig = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_3__.sign(toBeSigned, sk);\n        return Buffer.from(sig);\n    }\n    signTxn(sk) {\n        // construct signed message\n        const sTxn = {\n            sig: this.rawSignTxn(sk),\n            txn: this.get_obj_for_encoding()\n        };\n        // add AuthAddr if signing with a different key than From indicates\n        const keypair = _nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_3__.keyPairFromSecretKey(sk);\n        const pubKeyFromSk = keypair.publicKey;\n        if (_encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(pubKeyFromSk) !== _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(this.from.publicKey)) {\n            sTxn.sgnr = Buffer.from(pubKeyFromSk);\n        }\n        return new Uint8Array(_encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(sTxn));\n    }\n    attachSignature(signerAddr, signature) {\n        if (!_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_3__.isValidSignatureLength(signature.length)) {\n            throw new Error(\"Invalid signature length\");\n        }\n        const sTxn = {\n            sig: Buffer.from(signature),\n            txn: this.get_obj_for_encoding()\n        };\n        // add AuthAddr if signing with a different key than From indicates\n        if (signerAddr !== _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(this.from.publicKey)) {\n            const signerPublicKey = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(signerAddr).publicKey;\n            sTxn.sgnr = Buffer.from(signerPublicKey);\n        }\n        return new Uint8Array(_encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(sTxn));\n    }\n    rawTxID() {\n        const enMsg = this.toByte();\n        const gh = Buffer.from(_utils_utils__WEBPACK_IMPORTED_MODULE_4__.concatArrays(this.tag, enMsg));\n        return Buffer.from(_nacl_naclWrappers__WEBPACK_IMPORTED_MODULE_3__.genericHash(gh));\n    }\n    txID() {\n        const hash = this.rawTxID();\n        return hi_base32__WEBPACK_IMPORTED_MODULE_0___default().encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n    }\n    // add a lease to a transaction not yet having\n    // supply feePerByte to increment fee accordingly\n    addLease(lease, feePerByte = 0) {\n        let mutableLease;\n        if (lease !== undefined) {\n            if (lease.constructor !== Uint8Array) throw Error(\"lease must be a Uint8Array.\");\n            if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);\n            mutableLease = new Uint8Array(lease);\n        } else {\n            mutableLease = new Uint8Array(0);\n        }\n        this.lease = mutableLease;\n        if (feePerByte !== 0) {\n            this.fee += (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH + ALGORAND_TRANSACTION_LEASE_LENGTH) * feePerByte;\n        }\n    }\n    // add the rekey-to field to a transaction not yet having it\n    // supply feePerByte to increment fee accordingly\n    addRekey(reKeyTo, feePerByte = 0) {\n        if (reKeyTo !== undefined) {\n            this.reKeyTo = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.decodeAddress(reKeyTo);\n        }\n        if (feePerByte !== 0) {\n            this.fee += (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH + ALGORAND_TRANSACTION_ADDRESS_LENGTH) * feePerByte;\n        }\n    }\n    // build display dict for prettyPrint and toString\n    // eslint-disable-next-line no-underscore-dangle\n    _getDictForDisplay() {\n        const forPrinting = {\n            ...this\n        };\n        forPrinting.tag = forPrinting.tag.toString();\n        forPrinting.from = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.from.publicKey);\n        if (forPrinting.to !== undefined) forPrinting.to = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.to.publicKey);\n        // things that need fixing:\n        if (forPrinting.freezeAccount !== undefined) forPrinting.freezeAccount = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.freezeAccount.publicKey);\n        if (forPrinting.closeRemainderTo !== undefined) forPrinting.closeRemainderTo = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.closeRemainderTo.publicKey);\n        if (forPrinting.assetManager !== undefined) forPrinting.assetManager = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.assetManager.publicKey);\n        if (forPrinting.assetReserve !== undefined) forPrinting.assetReserve = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.assetReserve.publicKey);\n        if (forPrinting.assetFreeze !== undefined) forPrinting.assetFreeze = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.assetFreeze.publicKey);\n        if (forPrinting.assetClawback !== undefined) forPrinting.assetClawback = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.assetClawback.publicKey);\n        if (forPrinting.assetRevocationTarget !== undefined) forPrinting.assetRevocationTarget = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.assetRevocationTarget.publicKey);\n        if (forPrinting.reKeyTo !== undefined) forPrinting.reKeyTo = _encoding_address__WEBPACK_IMPORTED_MODULE_1__.encodeAddress(forPrinting.reKeyTo.publicKey);\n        forPrinting.genesisHash = forPrinting.genesisHash.toString(\"base64\");\n        return forPrinting;\n    }\n    // pretty print the transaction to console\n    prettyPrint() {\n        // eslint-disable-next-line no-underscore-dangle,no-console\n        console.log(this._getDictForDisplay());\n    }\n    // get string representation\n    toString() {\n        // eslint-disable-next-line no-underscore-dangle\n        return JSON.stringify(this._getDictForDisplay());\n    }\n}\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject - the completed Transaction object\n */ function encodeUnsignedTransaction(transactionObject) {\n    const objToEncode = transactionObject.get_obj_for_encoding();\n    return _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.encode(objToEncode);\n}\n/**\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer - the Uint8Array containing a transaction\n */ function decodeUnsignedTransaction(transactionBuffer) {\n    const partlyDecodedObject = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(transactionBuffer);\n    return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\n/**\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer - the Uint8Array containing a transaction\n * @returns containing a Transaction, the signature, and possibly an auth-addr field\n */ function decodeSignedTransaction(transactionBuffer) {\n    const stxnDecoded = _encoding_encoding__WEBPACK_IMPORTED_MODULE_2__.decode(transactionBuffer);\n    const stxn = {\n        ...stxnDecoded,\n        txn: Transaction.from_obj_for_encoding(stxnDecoded.txn)\n    };\n    return stxn;\n}\nfunction instantiateTxnIfNeeded(transactionLike) {\n    return transactionLike instanceof Transaction ? transactionLike : new Transaction(transactionLike);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Transaction); //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ2U7QUFDRTtBQUNKO0FBQ0w7QUFDZTtBQUMwQjtBQUNoRixNQUFNUSw4QkFBOEI7QUFDN0IsTUFBTUMsc0JBQXNCLEtBQUssQ0FBQyxhQUFhO0FBQ3RELE1BQU1DLG9DQUFvQztBQUMxQyxNQUFNQyw4QkFBOEI7QUFDcEMsTUFBTUMsK0JBQStCLElBQUksc0ZBQXNGO0FBQy9ILE1BQU1DLDBDQUEwQztBQUNoRCxNQUFNQyxzQ0FBc0M7QUFDNUMsTUFBTUMsMENBQTBDO0FBQ2hELE1BQU1DLDZCQUE2QjtBQUNuQyxNQUFNQyx5QkFBeUI7QUFDL0IsTUFBTUMsOEJBQThCO0FBQ3BDLE1BQU1DLGdDQUFnQztBQUN0QyxTQUFTQyxhQUFhQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsTUFBTTtJQUMxQyxJQUFJRixTQUFTLE1BQU07UUFDZixPQUFPRztJQUNYO0lBQ0EsSUFBSUM7SUFDSixJQUFJLE9BQU9KLFVBQVUsVUFBVTtRQUMzQkksZ0JBQWdCQyxPQUFPQyxJQUFJLENBQUNOLE9BQU87SUFDdkMsT0FDSyxJQUFJQSxNQUFNTyxXQUFXLEtBQUtDLFlBQVk7UUFDdkNKLGdCQUFnQkMsT0FBT0MsSUFBSSxDQUFDTjtJQUNoQyxPQUNLLElBQUlLLE9BQU9JLFFBQVEsQ0FBQ1QsUUFBUTtRQUM3QkksZ0JBQWdCSjtJQUNwQjtJQUNBLElBQUlJLGlCQUFpQixRQUFRQSxjQUFjTSxVQUFVLEtBQUtSLFFBQVE7UUFDOUQsTUFBTVMsTUFBTSxDQUFDLEVBQUVWLFVBQVUsV0FBVyxFQUFFQyxPQUFPLDRDQUE0QyxDQUFDO0lBQzlGO0lBQ0EsT0FBT0U7QUFDWDtBQUNBOztHQUVHLEdBQ0ksTUFBTVE7SUFDVEwsWUFBWSxFQUFFLEdBQUdNLGFBQWEsQ0FB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QUFTO1FBQzdFb0csWUFBWTNLLFdBQVcsR0FBRzJLLFlBQVkzSyxXQUFXLENBQUN3QixRQUFRLENBQUM7UUFDM0QsT0FBT21KO0lBQ1g7SUFDQSwwQ0FBMEM7SUFDMUNDLGNBQWM7UUFDViwyREFBMkQ7UUFDM0RDLFFBQVFDLEdBQUcsQ0FBQyxJQUFJLENBQUNKLGtCQUFrQjtJQUN2QztJQUNBLDRCQUE0QjtJQUM1QmxKLFdBQVc7UUFDUCxnREFBZ0Q7UUFDaEQsT0FBT3VKLEtBQUtDLFNBQVMsQ0FBQyxJQUFJLENBQUNOLGtCQUFrQjtJQUNqRDtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNPLDBCQUEwQkMsaUJBQWlCO0lBQ3ZELE1BQU1DLGNBQWNELGtCQUFrQmhILG9CQUFvQjtJQUMxRCxPQUFPOUcsc0RBQWUsQ0FBQytOO0FBQzNCO0FBQ0E7OztDQUdDLEdBQ00sU0FBU0MsMEJBQTBCQyxpQkFBaUI7SUFDdkQsTUFBTUMsc0JBQXNCbE8sc0RBQWUsQ0FBQ2lPO0lBQzVDLE9BQU9sTSxZQUFZb0oscUJBQXFCLENBQUMrQztBQUM3QztBQUNBOzs7OztDQUtDLEdBQ00sU0FBU0Usd0JBQXdCSCxpQkFBaUI7SUFDckQsTUFBTUksY0FBY3JPLHNEQUFlLENBQUNpTztJQUNwQyxNQUFNSyxPQUFPO1FBQ1QsR0FBR0QsV0FBVztRQUNkcEwsS0FBS2xCLFlBQVlvSixxQkFBcUIsQ0FBQ2tELFlBQVlwTCxHQUFHO0lBQzFEO0lBQ0EsT0FBT3FMO0FBQ1g7QUFDTyxTQUFTQyx1QkFBdUJDLGVBQWU7SUFDbEQsT0FBT0EsMkJBQTJCek0sY0FDNUJ5TSxrQkFDQSxJQUFJek0sWUFBWXlNO0FBQzFCO0FBQ0EsaUVBQWV6TSxXQUFXQSxFQUFDLENBQzNCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHJhbnNhY3Rpb24uanM/MDUzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZTMyIGZyb20gJ2hpLWJhc2UzMic7XG5pbXBvcnQgKiBhcyBhZGRyZXNzIGZyb20gJy4vZW5jb2RpbmcvYWRkcmVzcyc7XG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICcuL2VuY29kaW5nL2VuY29kaW5nJztcbmltcG9ydCAqIGFzIG5hY2wgZnJvbSAnLi9uYWNsL25hY2xXcmFwcGVycyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IHRyYW5zbGF0ZUJveFJlZmVyZW5jZXMgfSBmcm9tICcuL2JveFN0b3JhZ2UnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25UeXBlLCBpc1RyYW5zYWN0aW9uVHlwZSwgfSBmcm9tICcuL3R5cGVzL3RyYW5zYWN0aW9ucy9iYXNlJztcbmNvbnN0IEFMR09SQU5EX1RSQU5TQUNUSU9OX0xFTkdUSCA9IDUyO1xuZXhwb3J0IGNvbnN0IEFMR09SQU5EX01JTl9UWF9GRUUgPSAxMDAwOyAvLyB2ZXJzaW9uIHY1XG5jb25zdCBBTEdPUkFORF9UUkFOU0FDVElPTl9MRUFTRV9MRU5HVEggPSAzMjtcbmNvbnN0IEFMR09SQU5EX01BWF9BU1NFVF9ERUNJTUFMUyA9IDE5O1xuY29uc3QgTlVNX0FERExfQllURVNfQUZURVJfU0lHTklORyA9IDc1OyAvLyBOVU1fQURETF9CWVRFU19BRlRFUl9TSUdOSU5HIGlzIHRoZSBudW1iZXIgb2YgYnl0ZXMgYWRkZWQgdG8gYSB0eG4gYWZ0ZXIgc2lnbmluZyBpdFxuY29uc3QgQUxHT1JBTkRfVFJBTlNBQ1RJT05fTEVBU0VfTEFCRUxfTEVOR1RIID0gNTtcbmNvbnN0IEFMR09SQU5EX1RSQU5TQUNUSU9OX0FERFJFU1NfTEVOR1RIID0gMzI7XG5jb25zdCBBTEdPUkFORF9UUkFOU0FDVElPTl9SRUtFWV9MQUJFTF9MRU5HVEggPSA1O1xuY29uc3QgQVNTRVRfTUVUQURBVEFfSEFTSF9MRU5HVEggPSAzMjtcbmNvbnN0IEtFWVJFR19WT1RFX0tFWV9MRU5HVEggPSAzMjtcbmNvbnN0IEtFWVJFR19TRUxFQ1RJT05fS0VZX0xFTkdUSCA9IDMyO1xuY29uc3QgS0VZUkVHX1NUQVRFX1BST09GX0tFWV9MRU5HVEggPSA2NDtcbmZ1bmN0aW9uIGdldEtleXJlZ0tleShpbnB1dCwgaW5wdXROYW1lLCBsZW5ndGgpIHtcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsZXQgaW5wdXRBc0J1ZmZlcjtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpbnB1dEFzQnVmZmVyID0gQnVmZmVyLmZyb20oaW5wdXQsICdiYXNlNjQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaW5wdXQuY29uc3RydWN0b3IgPT09IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgaW5wdXRBc0J1ZmZlciA9IEJ1ZmZlci5mcm9tKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGlucHV0KSkge1xuICAgICAgICBpbnB1dEFzQnVmZmVyID0gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChpbnB1dEFzQnVmZmVyID09IG51bGwgfHwgaW5wdXRBc0J1ZmZlci5ieXRlTGVuZ3RoICE9PSBsZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYCR7aW5wdXROYW1lfSBtdXN0IGJlIGEgJHtsZW5ndGh9IGJ5dGUgVWludDhBcnJheSBvciBCdWZmZXIgb3IgYmFzZTY0IHN0cmluZy5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0QXNCdWZmZXI7XG59XG4vKipcbiAqIFRyYW5zYWN0aW9uIGVuYWJsZXMgY29uc3RydWN0aW9uIG9mIEFsZ29yYW5kIHRyYW5zYWN0aW9uc1xuICogKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoeyAuLi50cmFuc2FjdGlvbiB9KSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUcmFuc2FjdGlvbic7XG4gICAgICAgIHRoaXMudGFnID0gQnVmZmVyLmZyb20oJ1RYJyk7XG4gICAgICAgIC8vIFBvcHVsYXRlIGRlZmF1bHRzXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgdHlwZTogVHJhbnNhY3Rpb25UeXBlLnBheSxcbiAgICAgICAgICAgIGZsYXRGZWU6IGZhbHNlLFxuICAgICAgICAgICAgbm9uUGFydGljaXBhdGlvbjogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIC8vIERlZmF1bHQgdHlwZVxuICAgICAgICBpZiAodHlwZW9mIHRyYW5zYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi50eXBlID0gZGVmYXVsdHMudHlwZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEZWZhdWx0IGZsYXRGZWVcbiAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2FjdGlvbi5mbGF0RmVlID09PVxuICAgICAgICAgICAgJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmZsYXRGZWUgPVxuICAgICAgICAgICAgICAgIGRlZmF1bHRzLmZsYXRGZWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVmYXVsdCBub25QYXJ0aWNpcGF0aW9uXG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09PSBUcmFuc2FjdGlvblR5cGUua2V5cmVnICYmXG4gICAgICAgICAgICB0eXBlb2YgdHJhbnNhY3Rpb24udm90ZUtleSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHR5cGVvZiB0cmFuc2FjdGlvbi5ub25QYXJ0aWNpcGF0aW9uID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24ubm9uUGFydGljaXBhdGlvbiA9IGRlZmF1bHRzLm5vblBhcnRpY2lwYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgICAgICAvLyBNb3ZlIHN1Z2dlc3RlZCBwYXJhbWV0ZXJzIGZyb20gaXRzIG9iamVjdCB0byBpbmxpbmVcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnN1Z2dlc3RlZFBhcmFtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSB0ZW1wb3JhcnkgcmVmZXJlbmNlIHRvIHRoZSB0cmFuc2FjdGlvbiBvYmplY3QgdGhhdCBoYXMgcGFyYW1zIGlubGluZSBhbmQgYWxzbyBhcyBhIHN1Z2dlc3RlZCBwYXJhbXMgb2JqZWN0XG4gICAgICAgICAgICAvLyAgIC0gSGVscGZ1bCBmb3IgbW92aW5nIHBhcmFtcyBmcm9tIG5hbWVkIG9iamVjdCB0byBpbmxpbmVcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9IHRyYW5zYWN0aW9uO1xuICAgICAgICAgICAgcmVmZXJlbmNlLmdlbmVzaXNIYXNoID0gcmVmZXJlbmNlLnN1Z2dlc3RlZFBhcmFtcy5nZW5lc2lzSGFzaDtcbiAgICAgICAgICAgIHJlZmVyZW5jZS5mZWUgPSByZWZlcmVuY2Uuc3VnZ2VzdGVkUGFyYW1zLmZlZTtcbiAgICAgICAgICAgIGlmIChyZWZlcmVuY2Uuc3VnZ2VzdGVkUGFyYW1zLmZsYXRGZWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZWZlcmVuY2UuZmxhdEZlZSA9IHJlZmVyZW5jZS5zdWdnZXN0ZWRQYXJhbXMuZmxhdEZlZTtcbiAgICAgICAgICAgIHJlZmVyZW5jZS5maXJzdFJvdW5kID0gcmVmZXJlbmNlLnN1Z2dlc3RlZFBhcmFtcy5maXJzdFJvdW5kO1xuICAgICAgICAgICAgcmVmZXJlbmNlLmxhc3RSb3VuZCA9IHJlZmVyZW5jZS5zdWdnZXN0ZWRQYXJhbXMubGFzdFJvdW5kO1xuICAgICAgICAgICAgcmVmZXJlbmNlLmdlbmVzaXNJRCA9IHJlZmVyZW5jZS5zdWdnZXN0ZWRQYXJhbXMuZ2VuZXNpc0lEO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgYWxsIHN1Z2dlc3RlZFBhcmFtcyBoYXZlIGJlZW4gbW92ZWQgdG8gYmUgaW5saW5lLCBzbyB3ZSBjYW4gcmVhc3NpZ24gdGhlIHRyYW5zYWN0aW9uIG9iamVjdCB0eXBlXG4gICAgICAgIC8vIHRvIG9uZSB3aGljaCBpcyBtb3JlIHVzZWZ1bCBhcyB3ZSBwcmVwYXJlIHByb3BlcnRpZXMgZm9yIHN0b3JpbmdcbiAgICAgICAgY29uc3QgdHhuID0gdHJhbnNhY3Rpb247XG4gICAgICAgIHR4bi5mcm9tID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKHR4bi5mcm9tKTtcbiAgICAgICAgaWYgKHR4bi50byAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdHhuLnRvID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKHR4bi50byk7XG4gICAgICAgIGlmICh0eG4uY2xvc2VSZW1haW5kZXJUbyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdHhuLmNsb3NlUmVtYWluZGVyVG8gPSBhZGRyZXNzLmRlY29kZUFkZHJlc3ModHhuLmNsb3NlUmVtYWluZGVyVG8pO1xuICAgICAgICBpZiAodHhuLmFzc2V0TWFuYWdlciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdHhuLmFzc2V0TWFuYWdlciA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyh0eG4uYXNzZXRNYW5hZ2VyKTtcbiAgICAgICAgaWYgKHR4bi5hc3NldFJlc2VydmUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHR4bi5hc3NldFJlc2VydmUgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3ModHhuLmFzc2V0UmVzZXJ2ZSk7XG4gICAgICAgIGlmICh0eG4uYXNzZXRGcmVlemUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHR4bi5hc3NldEZyZWV6ZSA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyh0eG4uYXNzZXRGcmVlemUpO1xuICAgICAgICBpZiAodHhuLmFzc2V0Q2xhd2JhY2sgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHR4bi5hc3NldENsYXdiYWNrID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKHR4bi5hc3NldENsYXdiYWNrKTtcbiAgICAgICAgaWYgKHR4bi5hc3NldFJldm9jYXRpb25UYXJnZXQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHR4bi5hc3NldFJldm9jYXRpb25UYXJnZXQgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3ModHhuLmFzc2V0UmV2b2NhdGlvblRhcmdldCk7XG4gICAgICAgIGlmICh0eG4uZnJlZXplQWNjb3VudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdHhuLmZyZWV6ZUFjY291bnQgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3ModHhuLmZyZWV6ZUFjY291bnQpO1xuICAgICAgICBpZiAodHhuLnJlS2V5VG8gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHR4bi5yZUtleVRvID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKHR4bi5yZUtleVRvKTtcbiAgICAgICAgaWYgKHR4bi5nZW5lc2lzSGFzaCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2dlbmVzaXMgaGFzaCBtdXN0IGJlIHNwZWNpZmllZCBhbmQgaW4gYSBiYXNlNjQgc3RyaW5nLicpO1xuICAgICAgICB0eG4uZ2VuZXNpc0hhc2ggPSBCdWZmZXIuZnJvbSh0eG4uZ2VuZXNpc0hhc2gsICdiYXNlNjQnKTtcbiAgICAgICAgaWYgKHR4bi5hbW91bnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKCEoTnVtYmVyLmlzU2FmZUludGVnZXIodHhuLmFtb3VudCkgfHxcbiAgICAgICAgICAgICAgICAodHlwZW9mIHR4bi5hbW91bnQgPT09ICdiaWdpbnQnICYmXG4gICAgICAgICAgICAgICAgICAgIHR4bi5hbW91bnQgPD0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSkpIHx8XG4gICAgICAgICAgICAgICAgdHhuLmFtb3VudCA8IDApKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0Ftb3VudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyIGFuZCBzbWFsbGVyIHRoYW4gMl42NC0xLiBJZiB0aGUgbnVtYmVyIGlzIGxhcmdlciB0aGFuIDJeNTMtMSwgdXNlIGJpZ2ludC4nKTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcih0eG4uZmVlKSB8fCB0eG4uZmVlIDwgMClcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdmZWUgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlciBhbmQgc21hbGxlciB0aGFuIDJeNTMtMScpO1xuICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKHR4bi5maXJzdFJvdW5kKSB8fCB0eG4uZmlyc3RSb3VuZCA8IDApXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZmlyc3RSb3VuZCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIodHhuLmxhc3RSb3VuZCkgfHwgdHhuLmxhc3RSb3VuZCA8IDApXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignbGFzdFJvdW5kIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgICAgICAgaWYgKHR4bi5leHRyYVBhZ2VzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICghTnVtYmVyLmlzSW50ZWdlcih0eG4uZXh0cmFQYWdlcykgfHxcbiAgICAgICAgICAgICAgICB0eG4uZXh0cmFQYWdlcyA8IDAgfHxcbiAgICAgICAgICAgICAgICB0eG4uZXh0cmFQYWdlcyA+IDMpKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2V4dHJhUGFnZXMgbXVzdCBiZSBhbiBJbnRlZ2VyIGJldHdlZW4gYW5kIGluY2x1ZGluZyAwIHRvIDMnKTtcbiAgICAgICAgaWYgKHR4bi5hc3NldFRvdGFsICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICghKE51bWJlci5pc1NhZmVJbnRlZ2VyKHR4bi5hc3NldFRvdGFsKSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgdHhuLmFzc2V0VG90YWwgPT09ICdiaWdpbnQnICYmXG4gICAgICAgICAgICAgICAgICAgIHR4bi5hc3NldFRvdGFsIDw9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpKSB8fFxuICAgICAgICAgICAgICAgIHR4bi5hc3NldFRvdGFsIDwgMCkpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignVG90YWwgYXNzZXQgaXNzdWFuY2UgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlciBhbmQgc21hbGxlciB0aGFuIDJeNjQtMS4gSWYgdGhlIG51bWJlciBpcyBsYXJnZXIgdGhhbiAyXjUzLTEsIHVzZSBiaWdpbnQuJyk7XG4gICAgICAgIGlmICh0eG4uYXNzZXREZWNpbWFscyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKHR4bi5hc3NldERlY2ltYWxzKSB8fFxuICAgICAgICAgICAgICAgIHR4bi5hc3NldERlY2ltYWxzIDwgMCB8fFxuICAgICAgICAgICAgICAgIHR4bi5hc3NldERlY2ltYWxzID4gQUxHT1JBTkRfTUFYX0FTU0VUX0RFQ0lNQUxTKSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBhc3NldERlY2ltYWxzIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIgYW5kIHNtYWxsZXIgdGhhbiAke0FMR09SQU5EX01BWF9BU1NFVF9ERUNJTUFMUy50b1N0cmluZygpfWApO1xuICAgICAgICBpZiAodHhuLmFzc2V0SW5kZXggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcih0eG4uYXNzZXRJbmRleCkgfHwgdHhuLmFzc2V0SW5kZXggPCAwKSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBc3NldCBpbmRleCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyIGFuZCBzbWFsbGVyIHRoYW4gMl41My0xJyk7XG4gICAgICAgIGlmICh0eG4uYXBwSW5kZXggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcih0eG4uYXBwSW5kZXgpIHx8IHR4bi5hcHBJbmRleCA8IDApKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FwcGxpY2F0aW9uIGluZGV4IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIgYW5kIHNtYWxsZXIgdGhhbiAyXjUzLTEnKTtcbiAgICAgICAgaWYgKHR4bi5hcHBMb2NhbEludHMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcih0eG4uYXBwTG9jYWxJbnRzKSB8fCB0eG4uYXBwTG9jYWxJbnRzIDwgMCkpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQXBwbGljYXRpb24gbG9jYWwgaW50cyBjb3VudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyIGFuZCBzbWFsbGVyIHRoYW4gMl41My0xJyk7XG4gICAgICAgIGlmICh0eG4uYXBwTG9jYWxCeXRlU2xpY2VzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICghTnVtYmVyLmlzU2FmZUludGVnZXIodHhuLmFwcExvY2FsQnl0ZVNsaWNlcykgfHxcbiAgICAgICAgICAgICAgICB0eG4uYXBwTG9jYWxCeXRlU2xpY2VzIDwgMCkpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQXBwbGljYXRpb24gbG9jYWwgYnl0ZSBzbGljZXMgY291bnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlciBhbmQgc21hbGxlciB0aGFuIDJeNTMtMScpO1xuICAgICAgICBpZiAodHhuLmFwcEdsb2JhbEludHMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcih0eG4uYXBwR2xvYmFsSW50cykgfHwgdHhuLmFwcEdsb2JhbEludHMgPCAwKSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBcHBsaWNhdGlvbiBnbG9iYWwgaW50cyBjb3VudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyIGFuZCBzbWFsbGVyIHRoYW4gMl41My0xJyk7XG4gICAgICAgIGlmICh0eG4uYXBwR2xvYmFsQnl0ZVNsaWNlcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKHR4bi5hcHBHbG9iYWxCeXRlU2xpY2VzKSB8fFxuICAgICAgICAgICAgICAgIHR4bi5hcHBHbG9iYWxCeXRlU2xpY2VzIDwgMCkpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQXBwbGljYXRpb24gZ2xvYmFsIGJ5dGUgc2xpY2VzIGNvdW50IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIgYW5kIHNtYWxsZXIgdGhhbiAyXjUzLTEnKTtcbiAgICAgICAgaWYgKHR4bi5hcHBBcHByb3ZhbFByb2dyYW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR4bi5hcHBBcHByb3ZhbFByb2dyYW0uY29uc3RydWN0b3IgIT09IFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2FwcEFwcHJvdmFsUHJvZ3JhbSBtdXN0IGJlIGEgVWludDhBcnJheS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHhuLmFwcENsZWFyUHJvZ3JhbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHhuLmFwcENsZWFyUHJvZ3JhbS5jb25zdHJ1Y3RvciAhPT0gVWludDhBcnJheSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignYXBwQ2xlYXJQcm9ncmFtIG11c3QgYmUgYSBVaW50OEFycmF5LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eG4uYXBwQXJncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodHhuLmFwcEFyZ3MpKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdhcHBBcmdzIG11c3QgYmUgYW4gQXJyYXkgb2YgVWludDhBcnJheS4nKTtcbiAgICAgICAgICAgIHR4bi5hcHBBcmdzID0gdHhuLmFwcEFyZ3Muc2xpY2UoKTtcbiAgICAgICAgICAgIHR4bi5hcHBBcmdzLmZvckVhY2goKGFyZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhcmcuY29uc3RydWN0b3IgIT09IFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdlYWNoIGVsZW1lbnQgb2YgQXBwQXJncyBtdXN0IGJlIGEgVWludDhBcnJheS4nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHhuLmFwcEFyZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHhuLmFwcEFjY291bnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0eG4uYXBwQWNjb3VudHMpKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdhcHBBY2NvdW50cyBtdXN0IGJlIGFuIEFycmF5IG9mIGFkZHJlc3Nlcy4nKTtcbiAgICAgICAgICAgIHR4bi5hcHBBY2NvdW50cyA9IHR4bi5hcHBBY2NvdW50cy5tYXAoKGFkZHJlc3NBc1N0cmluZykgPT4gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKGFkZHJlc3NBc1N0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eG4uYXBwRm9yZWlnbkFwcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHR4bi5hcHBGb3JlaWduQXBwcykpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2FwcEZvcmVpZ25BcHBzIG11c3QgYmUgYW4gQXJyYXkgb2YgaW50ZWdlcnMuJyk7XG4gICAgICAgICAgICB0eG4uYXBwRm9yZWlnbkFwcHMgPSB0eG4uYXBwRm9yZWlnbkFwcHMuc2xpY2UoKTtcbiAgICAgICAgICAgIHR4bi5hcHBGb3JlaWduQXBwcy5mb3JFYWNoKChmb3JlaWduQXBwSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGZvcmVpZ25BcHBJbmRleCkgfHwgZm9yZWlnbkFwcEluZGV4IDwgMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2VhY2ggZm9yZWlnbiBhcHBsaWNhdGlvbiBpbmRleCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyIGFuZCBzbWFsbGVyIHRoYW4gMl41My0xJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHhuLmFwcEZvcmVpZ25Bc3NldHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHR4bi5hcHBGb3JlaWduQXNzZXRzKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignYXBwRm9yZWlnbkFzc2V0cyBtdXN0IGJlIGFuIEFycmF5IG9mIGludGVnZXJzLicpO1xuICAgICAgICAgICAgdHhuLmFwcEZvcmVpZ25Bc3NldHMgPSB0eG4uYXBwRm9yZWlnbkFzc2V0cy5zbGljZSgpO1xuICAgICAgICAgICAgdHhuLmFwcEZvcmVpZ25Bc3NldHMuZm9yRWFjaCgoZm9yZWlnbkFzc2V0SW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGZvcmVpZ25Bc3NldEluZGV4KSB8fCBmb3JlaWduQXNzZXRJbmRleCA8IDApXG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdlYWNoIGZvcmVpZ24gYXNzZXQgaW5kZXggbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlciBhbmQgc21hbGxlciB0aGFuIDJeNTMtMScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4bi5ib3hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodHhuLmJveGVzKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignYm94ZXMgbXVzdCBiZSBhbiBBcnJheSBvZiBCb3hSZWZlcmVuY2UuJyk7XG4gICAgICAgICAgICB0eG4uYm94ZXMgPSB0eG4uYm94ZXMuc2xpY2UoKTtcbiAgICAgICAgICAgIHR4bi5ib3hlcy5mb3JFYWNoKChib3gpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGJveC5hcHBJbmRleCkgfHxcbiAgICAgICAgICAgICAgICAgICAgYm94Lm5hbWUuY29uc3RydWN0b3IgIT09IFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdib3ggYXBwIGluZGV4IG11c3QgYmUgYSBudW1iZXIgYW5kIG5hbWUgbXVzdCBiZSBhbiBVaW50OEFycmF5LicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4bi5hc3NldE1ldGFkYXRhSGFzaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0eG4uYXNzZXRNZXRhZGF0YUhhc2gubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHR4bi5hc3NldE1ldGFkYXRhSGFzaCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0eG4uYXNzZXRNZXRhZGF0YUhhc2ggPSBuZXcgVWludDhBcnJheShCdWZmZXIuZnJvbSh0eG4uYXNzZXRNZXRhZGF0YUhhc2gpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eG4uYXNzZXRNZXRhZGF0YUhhc2guY29uc3RydWN0b3IgIT09IFVpbnQ4QXJyYXkgfHxcbiAgICAgICAgICAgICAgICB0eG4uYXNzZXRNZXRhZGF0YUhhc2guYnl0ZUxlbmd0aCAhPT0gQVNTRVRfTUVUQURBVEFfSEFTSF9MRU5HVEgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgYXNzZXRNZXRhZGF0YUhhc2ggbXVzdCBiZSBhICR7QVNTRVRfTUVUQURBVEFfSEFTSF9MRU5HVEh9IGJ5dGUgVWludDhBcnJheSBvciBzdHJpbmcuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuLmFzc2V0TWV0YWRhdGFIYXNoLmV2ZXJ5KCh2YWx1ZSkgPT4gdmFsdWUgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgaGFzaCBjb250YWlucyBhbGwgMHMsIG9taXQgaXRcbiAgICAgICAgICAgICAgICB0eG4uYXNzZXRNZXRhZGF0YUhhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eG4uYXNzZXRNZXRhZGF0YUhhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4bi5ub3RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eG4ubm90ZS5jb25zdHJ1Y3RvciAhPT0gVWludDhBcnJheSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignbm90ZSBtdXN0IGJlIGEgVWludDhBcnJheS4nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHR4bi5ub3RlID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4bi5sZWFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHhuLmxlYXNlLmNvbnN0cnVjdG9yICE9PSBVaW50OEFycmF5KVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdsZWFzZSBtdXN0IGJlIGEgVWludDhBcnJheS4nKTtcbiAgICAgICAgICAgIGlmICh0eG4ubGVhc2UubGVuZ3RoICE9PSBBTEdPUkFORF9UUkFOU0FDVElPTl9MRUFTRV9MRU5HVEgpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYGxlYXNlIG11c3QgYmUgb2YgbGVuZ3RoICR7QUxHT1JBTkRfVFJBTlNBQ1RJT05fTEVBU0VfTEVOR1RILnRvU3RyaW5nKCl9LmApO1xuICAgICAgICAgICAgaWYgKHR4bi5sZWFzZS5ldmVyeSgodmFsdWUpID0+IHZhbHVlID09PSAwKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIGxlYXNlIGNvbnRhaW5zIGFsbCAwcywgb21pdCBpdFxuICAgICAgICAgICAgICAgIHR4bi5sZWFzZSA9IG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHhuLmxlYXNlID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgIH1cbiAgICAgICAgdHhuLnZvdGVLZXkgPSBnZXRLZXlyZWdLZXkodHhuLnZvdGVLZXksICd2b3RlS2V5JywgS0VZUkVHX1ZPVEVfS0VZX0xFTkdUSCk7XG4gICAgICAgIHR4bi5zZWxlY3Rpb25LZXkgPSBnZXRLZXlyZWdLZXkodHhuLnNlbGVjdGlvbktleSwgJ3NlbGVjdGlvbktleScsIEtFWVJFR19TRUxFQ1RJT05fS0VZX0xFTkdUSCk7XG4gICAgICAgIHR4bi5zdGF0ZVByb29mS2V5ID0gZ2V0S2V5cmVnS2V5KHR4bi5zdGF0ZVByb29mS2V5LCAnc3RhdGVQcm9vZktleScsIEtFWVJFR19TVEFURV9QUk9PRl9LRVlfTEVOR1RIKTtcbiAgICAgICAgLy8gQ2hlY2tpbmcgbm9uLXBhcnRpY2lwYXRpb24ga2V5IHJlZ2lzdHJhdGlvblxuICAgICAgICBpZiAodHhuLm5vblBhcnRpY2lwYXRpb24gJiZcbiAgICAgICAgICAgICh0eG4udm90ZUtleSB8fFxuICAgICAgICAgICAgICAgIHR4bi5zZWxlY3Rpb25LZXkgfHxcbiAgICAgICAgICAgICAgICB0eG4udm90ZUZpcnN0IHx8XG4gICAgICAgICAgICAgICAgdHhuLnN0YXRlUHJvb2ZLZXkgfHxcbiAgICAgICAgICAgICAgICB0eG4udm90ZUxhc3QgfHxcbiAgICAgICAgICAgICAgICB0eG4udm90ZUtleURpbHV0aW9uKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub25QYXJ0aWNpcGF0aW9uIGlzIHRydWUgYnV0IHBhcnRpY2lwYXRpb24gcGFyYW1zIGFyZSBwcmVzZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNraW5nIG9ubGluZSBrZXkgcmVnaXN0cmF0aW9uXG4gICAgICAgIGlmICghdHhuLm5vblBhcnRpY2lwYXRpb24gJiZcbiAgICAgICAgICAgICh0eG4udm90ZUtleSB8fFxuICAgICAgICAgICAgICAgIHR4bi5zZWxlY3Rpb25LZXkgfHxcbiAgICAgICAgICAgICAgICB0eG4uc3RhdGVQcm9vZktleSB8fFxuICAgICAgICAgICAgICAgIHR4bi52b3RlRmlyc3QgfHxcbiAgICAgICAgICAgICAgICB0eG4udm90ZUxhc3QgfHxcbiAgICAgICAgICAgICAgICB0eG4udm90ZUtleURpbHV0aW9uKSAmJlxuICAgICAgICAgICAgISh0eG4udm90ZUtleSAmJlxuICAgICAgICAgICAgICAgIHR4bi5zZWxlY3Rpb25LZXkgJiZcbiAgICAgICAgICAgICAgICB0eG4udm90ZUZpcnN0ICYmXG4gICAgICAgICAgICAgICAgdHhuLnZvdGVMYXN0ICYmXG4gICAgICAgICAgICAgICAgdHhuLnZvdGVLZXlEaWx1dGlvbilcbiAgICAgICAgLy8gc3RhdGVQcm9vZktleSBub3QgaW5jbHVkZWQgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29ubGluZSBrZXkgcmVnaXN0cmF0aW9uIG1pc3NpbmcgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcgZmllbGRzOiAnICtcbiAgICAgICAgICAgICAgICAndm90ZUtleSwgc2VsZWN0aW9uS2V5LCB2b3RlRmlyc3QsIHZvdGVMYXN0LCB2b3RlS2V5RGlsdXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgbGFzdCBvcHRpb24gaXMgYW4gb2ZmbGluZSBrZXkgcmVnaXN0cmF0aW9uIHdoZXJlIGFsbCB0aGUgZmllbGRzXG4gICAgICAgIC8vIG5vblBhcnRpY2lwYXRpb24sIHZvdGVLZXksIHNlbGVjdGlvbktleSwgdm90ZUZpcnN0LCB2b3RlTGFzdCwgdm90ZUtleURpbHV0aW9uXG4gICAgICAgIC8vIGFyZSBhbGwgdW5kZWZpbmVkL2ZhbHNlXG4gICAgICAgIC8vIFJlbW92ZSB1bndhbnRlZCBwcm9wZXJ0aWVzIGFuZCBzdG9yZSB0cmFuc2FjdGlvbiBvbiBpbnN0YW5jZVxuICAgICAgICBkZWxldGUgdHhuLnN1Z2dlc3RlZFBhcmFtcztcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB1dGlscy5yZW1vdmVVbmRlZmluZWRQcm9wZXJ0aWVzKHR4bikpO1xuICAgICAgICAvLyBNb2RpZnkgRmVlXG4gICAgICAgIGlmICghdHhuLmZsYXRGZWUpIHtcbiAgICAgICAgICAgIHRoaXMuZmVlICo9IHRoaXMuZXN0aW1hdGVTaXplKCk7XG4gICAgICAgICAgICAvLyBJZiBzdWdnZXN0ZWQgZmVlIHRvbyBzbWFsbCBhbmQgd2lsbCBiZSByZWplY3RlZCwgc2V0IHRvIG1pbiB0eCBmZWVcbiAgICAgICAgICAgIGlmICh0aGlzLmZlZSA8IEFMR09SQU5EX01JTl9UWF9GRUUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZlZSA9IEFMR09SQU5EX01JTl9UWF9GRUU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2F5IHdlIGFyZSBhd2FyZSBvZiBncm91cHNcbiAgICAgICAgdGhpcy5ncm91cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gc3RwZiBmaWVsZHNcbiAgICAgICAgaWYgKHR4bi5zdGF0ZVByb29mVHlwZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKHR4bi5zdGF0ZVByb29mVHlwZSkgfHwgdHhuLnN0YXRlUHJvb2ZUeXBlIDwgMCkpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignU3RhdGUgUHJvb2YgdHlwZSBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyIGFuZCBzbWFsbGVyIHRoYW4gMl41My0xJyk7XG4gICAgICAgIGlmICh0eG4uc3RhdGVQcm9vZk1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR4bi5zdGF0ZVByb29mTWVzc2FnZS5jb25zdHJ1Y3RvciAhPT0gVWludDhBcnJheSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignc3RhdGVQcm9vZk1lc3NhZ2UgbXVzdCBiZSBhIFVpbnQ4QXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eG4uc3RhdGVQcm9vZk1lc3NhZ2UgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHhuLnN0YXRlUHJvb2YgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR4bi5zdGF0ZVByb29mLmNvbnN0cnVjdG9yICE9PSBVaW50OEFycmF5KVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdzdGF0ZVByb29mIG11c3QgYmUgYSBVaW50OEFycmF5LicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHhuLnN0YXRlUHJvb2YgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgZ2V0X29ial9mb3JfZW5jb2RpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdwYXknKSB7XG4gICAgICAgICAgICBjb25zdCB0eG4gPSB7XG4gICAgICAgICAgICAgICAgYW10OiB0aGlzLmFtb3VudCxcbiAgICAgICAgICAgICAgICBmZWU6IHRoaXMuZmVlLFxuICAgICAgICAgICAgICAgIGZ2OiB0aGlzLmZpcnN0Um91bmQsXG4gICAgICAgICAgICAgICAgbHY6IHRoaXMubGFzdFJvdW5kLFxuICAgICAgICAgICAgICAgIG5vdGU6IEJ1ZmZlci5mcm9tKHRoaXMubm90ZSksXG4gICAgICAgICAgICAgICAgc25kOiBCdWZmZXIuZnJvbSh0aGlzLmZyb20ucHVibGljS2V5KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAncGF5JyxcbiAgICAgICAgICAgICAgICBnZW46IHRoaXMuZ2VuZXNpc0lELFxuICAgICAgICAgICAgICAgIGdoOiB0aGlzLmdlbmVzaXNIYXNoLFxuICAgICAgICAgICAgICAgIGx4OiBCdWZmZXIuZnJvbSh0aGlzLmxlYXNlKSxcbiAgICAgICAgICAgICAgICBncnA6IHRoaXMuZ3JvdXAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gcGFyc2UgY2xvc2UgYWRkcmVzc1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VSZW1haW5kZXJUbyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5lbmNvZGVBZGRyZXNzKHRoaXMuY2xvc2VSZW1haW5kZXJUby5wdWJsaWNLZXkpICE9PVxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLkFMR09SQU5EX1pFUk9fQUREUkVTU19TVFJJTkcpIHtcbiAgICAgICAgICAgICAgICB0eG4uY2xvc2UgPSBCdWZmZXIuZnJvbSh0aGlzLmNsb3NlUmVtYWluZGVyVG8ucHVibGljS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnJlS2V5VG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5yZWtleSA9IEJ1ZmZlci5mcm9tKHRoaXMucmVLZXlUby5wdWJsaWNLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWxsb3dlZCB6ZXJvIHZhbHVlc1xuICAgICAgICAgICAgaWYgKHRoaXMudG8gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0eG4ucmN2ID0gQnVmZmVyLmZyb20odGhpcy50by5wdWJsaWNLZXkpO1xuICAgICAgICAgICAgaWYgKCF0eG4ubm90ZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5ub3RlO1xuICAgICAgICAgICAgaWYgKCF0eG4uYW10KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYW10O1xuICAgICAgICAgICAgaWYgKCF0eG4uZmVlKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uZmVlO1xuICAgICAgICAgICAgaWYgKCF0eG4uZnYpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5mdjtcbiAgICAgICAgICAgIGlmICghdHhuLmdlbilcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmdlbjtcbiAgICAgICAgICAgIGlmICh0eG4uZ3JwID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5ncnA7XG4gICAgICAgICAgICBpZiAoIXR4bi5seC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5seDtcbiAgICAgICAgICAgIGlmICghdHhuLnJla2V5KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4ucmVrZXk7XG4gICAgICAgICAgICByZXR1cm4gdHhuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdrZXlyZWcnKSB7XG4gICAgICAgICAgICBjb25zdCB0eG4gPSB7XG4gICAgICAgICAgICAgICAgZmVlOiB0aGlzLmZlZSxcbiAgICAgICAgICAgICAgICBmdjogdGhpcy5maXJzdFJvdW5kLFxuICAgICAgICAgICAgICAgIGx2OiB0aGlzLmxhc3RSb3VuZCxcbiAgICAgICAgICAgICAgICBub3RlOiBCdWZmZXIuZnJvbSh0aGlzLm5vdGUpLFxuICAgICAgICAgICAgICAgIHNuZDogQnVmZmVyLmZyb20odGhpcy5mcm9tLnB1YmxpY0tleSksXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgIGdlbjogdGhpcy5nZW5lc2lzSUQsXG4gICAgICAgICAgICAgICAgZ2g6IHRoaXMuZ2VuZXNpc0hhc2gsXG4gICAgICAgICAgICAgICAgbHg6IEJ1ZmZlci5mcm9tKHRoaXMubGVhc2UpLFxuICAgICAgICAgICAgICAgIGdycDogdGhpcy5ncm91cCxcbiAgICAgICAgICAgICAgICB2b3Rla2V5OiB0aGlzLnZvdGVLZXksXG4gICAgICAgICAgICAgICAgc2Vsa2V5OiB0aGlzLnNlbGVjdGlvbktleSxcbiAgICAgICAgICAgICAgICBzcHJma2V5OiB0aGlzLnN0YXRlUHJvb2ZLZXksXG4gICAgICAgICAgICAgICAgdm90ZWZzdDogdGhpcy52b3RlRmlyc3QsXG4gICAgICAgICAgICAgICAgdm90ZWxzdDogdGhpcy52b3RlTGFzdCxcbiAgICAgICAgICAgICAgICB2b3Rla2Q6IHRoaXMudm90ZUtleURpbHV0aW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGFsbG93ZWQgemVybyB2YWx1ZXNcbiAgICAgICAgICAgIGlmICghdHhuLm5vdGUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4ubm90ZTtcbiAgICAgICAgICAgIGlmICghdHhuLmx4Lmxlbmd0aClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmx4O1xuICAgICAgICAgICAgaWYgKCF0eG4uZmVlKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uZmVlO1xuICAgICAgICAgICAgaWYgKCF0eG4uZnYpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5mdjtcbiAgICAgICAgICAgIGlmICghdHhuLmdlbilcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmdlbjtcbiAgICAgICAgICAgIGlmICh0eG4uZ3JwID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5ncnA7XG4gICAgICAgICAgICBpZiAodGhpcy5yZUtleVRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4ucmVrZXkgPSBCdWZmZXIuZnJvbSh0aGlzLnJlS2V5VG8ucHVibGljS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm5vblBhcnRpY2lwYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0eG4ubm9ucGFydCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXR4bi5zZWxrZXkpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5zZWxrZXk7XG4gICAgICAgICAgICBpZiAoIXR4bi52b3Rla2V5KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4udm90ZWtleTtcbiAgICAgICAgICAgIGlmICghdHhuLnNwcmZrZXkpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5zcHJma2V5O1xuICAgICAgICAgICAgaWYgKCF0eG4udm90ZWZzdClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLnZvdGVmc3Q7XG4gICAgICAgICAgICBpZiAoIXR4bi52b3RlbHN0KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4udm90ZWxzdDtcbiAgICAgICAgICAgIGlmICghdHhuLnZvdGVrZClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLnZvdGVrZDtcbiAgICAgICAgICAgIHJldHVybiB0eG47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2FjZmcnKSB7XG4gICAgICAgICAgICAvLyBhc3NldCBjcmVhdGlvbiwgb3IgYXNzZXQgcmVjb25maWd1cmUsIG9yIGFzc2V0IGRlc3RydWN0aW9uXG4gICAgICAgICAgICBjb25zdCB0eG4gPSB7XG4gICAgICAgICAgICAgICAgZmVlOiB0aGlzLmZlZSxcbiAgICAgICAgICAgICAgICBmdjogdGhpcy5maXJzdFJvdW5kLFxuICAgICAgICAgICAgICAgIGx2OiB0aGlzLmxhc3RSb3VuZCxcbiAgICAgICAgICAgICAgICBub3RlOiBCdWZmZXIuZnJvbSh0aGlzLm5vdGUpLFxuICAgICAgICAgICAgICAgIHNuZDogQnVmZmVyLmZyb20odGhpcy5mcm9tLnB1YmxpY0tleSksXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgIGdlbjogdGhpcy5nZW5lc2lzSUQsXG4gICAgICAgICAgICAgICAgZ2g6IHRoaXMuZ2VuZXNpc0hhc2gsXG4gICAgICAgICAgICAgICAgbHg6IEJ1ZmZlci5mcm9tKHRoaXMubGVhc2UpLFxuICAgICAgICAgICAgICAgIGdycDogdGhpcy5ncm91cCxcbiAgICAgICAgICAgICAgICBjYWlkOiB0aGlzLmFzc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgYXBhcjoge1xuICAgICAgICAgICAgICAgICAgICB0OiB0aGlzLmFzc2V0VG90YWwsXG4gICAgICAgICAgICAgICAgICAgIGRmOiB0aGlzLmFzc2V0RGVmYXVsdEZyb3plbixcbiAgICAgICAgICAgICAgICAgICAgZGM6IHRoaXMuYXNzZXREZWNpbWFscyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFzc2V0TWFuYWdlciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHR4bi5hcGFyLm0gPSBCdWZmZXIuZnJvbSh0aGlzLmFzc2V0TWFuYWdlci5wdWJsaWNLZXkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXRSZXNlcnZlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdHhuLmFwYXIuciA9IEJ1ZmZlci5mcm9tKHRoaXMuYXNzZXRSZXNlcnZlLnB1YmxpY0tleSk7XG4gICAgICAgICAgICBpZiAodGhpcy5hc3NldEZyZWV6ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHR4bi5hcGFyLmYgPSBCdWZmZXIuZnJvbSh0aGlzLmFzc2V0RnJlZXplLnB1YmxpY0tleSk7XG4gICAgICAgICAgICBpZiAodGhpcy5hc3NldENsYXdiYWNrICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdHhuLmFwYXIuYyA9IEJ1ZmZlci5mcm9tKHRoaXMuYXNzZXRDbGF3YmFjay5wdWJsaWNLZXkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXROYW1lICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdHhuLmFwYXIuYW4gPSB0aGlzLmFzc2V0TmFtZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFzc2V0VW5pdE5hbWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0eG4uYXBhci51biA9IHRoaXMuYXNzZXRVbml0TmFtZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFzc2V0VVJMICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdHhuLmFwYXIuYXUgPSB0aGlzLmFzc2V0VVJMO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXRNZXRhZGF0YUhhc2ggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0eG4uYXBhci5hbSA9IEJ1ZmZlci5mcm9tKHRoaXMuYXNzZXRNZXRhZGF0YUhhc2gpO1xuICAgICAgICAgICAgLy8gYWxsb3dlZCB6ZXJvIHZhbHVlc1xuICAgICAgICAgICAgaWYgKCF0eG4ubm90ZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5ub3RlO1xuICAgICAgICAgICAgaWYgKCF0eG4ubHgubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4ubHg7XG4gICAgICAgICAgICBpZiAoIXR4bi5hbXQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hbXQ7XG4gICAgICAgICAgICBpZiAoIXR4bi5mZWUpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5mZWU7XG4gICAgICAgICAgICBpZiAoIXR4bi5mdilcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmZ2O1xuICAgICAgICAgICAgaWYgKCF0eG4uZ2VuKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uZ2VuO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVLZXlUbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLnJla2V5ID0gQnVmZmVyLmZyb20odGhpcy5yZUtleVRvLnB1YmxpY0tleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXR4bi5jYWlkKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uY2FpZDtcbiAgICAgICAgICAgIGlmICghdHhuLmFwYXIudCAmJlxuICAgICAgICAgICAgICAgICF0eG4uYXBhci51biAmJlxuICAgICAgICAgICAgICAgICF0eG4uYXBhci5hbiAmJlxuICAgICAgICAgICAgICAgICF0eG4uYXBhci5kZiAmJlxuICAgICAgICAgICAgICAgICF0eG4uYXBhci5tICYmXG4gICAgICAgICAgICAgICAgIXR4bi5hcGFyLnIgJiZcbiAgICAgICAgICAgICAgICAhdHhuLmFwYXIuZiAmJlxuICAgICAgICAgICAgICAgICF0eG4uYXBhci5jICYmXG4gICAgICAgICAgICAgICAgIXR4bi5hcGFyLmF1ICYmXG4gICAgICAgICAgICAgICAgIXR4bi5hcGFyLmFtICYmXG4gICAgICAgICAgICAgICAgIXR4bi5hcGFyLmRjKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0eG4uYXBhci50KVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYXIudDtcbiAgICAgICAgICAgICAgICBpZiAoIXR4bi5hcGFyLmRjKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYXIuZGM7XG4gICAgICAgICAgICAgICAgaWYgKCF0eG4uYXBhci51bilcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGFyLnVuO1xuICAgICAgICAgICAgICAgIGlmICghdHhuLmFwYXIuYW4pXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBhci5hbjtcbiAgICAgICAgICAgICAgICBpZiAoIXR4bi5hcGFyLmRmKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYXIuZGY7XG4gICAgICAgICAgICAgICAgaWYgKCF0eG4uYXBhci5tKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYXIubTtcbiAgICAgICAgICAgICAgICBpZiAoIXR4bi5hcGFyLnIpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBhci5yO1xuICAgICAgICAgICAgICAgIGlmICghdHhuLmFwYXIuZilcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGFyLmY7XG4gICAgICAgICAgICAgICAgaWYgKCF0eG4uYXBhci5jKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYXIuYztcbiAgICAgICAgICAgICAgICBpZiAoIXR4bi5hcGFyLmF1KVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYXIuYXU7XG4gICAgICAgICAgICAgICAgaWYgKCF0eG4uYXBhci5hbSlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGFyLmFtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4bi5ncnAgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmdycDtcbiAgICAgICAgICAgIHJldHVybiB0eG47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2F4ZmVyJykge1xuICAgICAgICAgICAgLy8gYXNzZXQgdHJhbnNmZXIsIGFjY2VwdGFuY2UsIHJldm9jYXRpb24sIG1pbnQsIG9yIGJ1cm5cbiAgICAgICAgICAgIGNvbnN0IHR4biA9IHtcbiAgICAgICAgICAgICAgICBhYW10OiB0aGlzLmFtb3VudCxcbiAgICAgICAgICAgICAgICBmZWU6IHRoaXMuZmVlLFxuICAgICAgICAgICAgICAgIGZ2OiB0aGlzLmZpcnN0Um91bmQsXG4gICAgICAgICAgICAgICAgbHY6IHRoaXMubGFzdFJvdW5kLFxuICAgICAgICAgICAgICAgIG5vdGU6IEJ1ZmZlci5mcm9tKHRoaXMubm90ZSksXG4gICAgICAgICAgICAgICAgc25kOiBCdWZmZXIuZnJvbSh0aGlzLmZyb20ucHVibGljS2V5KSxcbiAgICAgICAgICAgICAgICBhcmN2OiBCdWZmZXIuZnJvbSh0aGlzLnRvLnB1YmxpY0tleSksXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgIGdlbjogdGhpcy5nZW5lc2lzSUQsXG4gICAgICAgICAgICAgICAgZ2g6IHRoaXMuZ2VuZXNpc0hhc2gsXG4gICAgICAgICAgICAgICAgbHg6IEJ1ZmZlci5mcm9tKHRoaXMubGVhc2UpLFxuICAgICAgICAgICAgICAgIGdycDogdGhpcy5ncm91cCxcbiAgICAgICAgICAgICAgICB4YWlkOiB0aGlzLmFzc2V0SW5kZXgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VSZW1haW5kZXJUbyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHR4bi5hY2xvc2UgPSBCdWZmZXIuZnJvbSh0aGlzLmNsb3NlUmVtYWluZGVyVG8ucHVibGljS2V5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFzc2V0UmV2b2NhdGlvblRhcmdldCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHR4bi5hc25kID0gQnVmZmVyLmZyb20odGhpcy5hc3NldFJldm9jYXRpb25UYXJnZXQucHVibGljS2V5KTtcbiAgICAgICAgICAgIC8vIGFsbG93ZWQgemVybyB2YWx1ZXNcbiAgICAgICAgICAgIGlmICghdHhuLm5vdGUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4ubm90ZTtcbiAgICAgICAgICAgIGlmICghdHhuLmx4Lmxlbmd0aClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmx4O1xuICAgICAgICAgICAgaWYgKCF0eG4uYWFtdClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFhbXQ7XG4gICAgICAgICAgICBpZiAoIXR4bi5hbXQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hbXQ7XG4gICAgICAgICAgICBpZiAoIXR4bi5mZWUpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5mZWU7XG4gICAgICAgICAgICBpZiAoIXR4bi5mdilcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmZ2O1xuICAgICAgICAgICAgaWYgKCF0eG4uZ2VuKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uZ2VuO1xuICAgICAgICAgICAgaWYgKHR4bi5ncnAgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmdycDtcbiAgICAgICAgICAgIGlmICghdHhuLmFjbG9zZSlcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFjbG9zZTtcbiAgICAgICAgICAgIGlmICghdHhuLmFzbmQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hc25kO1xuICAgICAgICAgICAgaWYgKCF0eG4ucmVrZXkpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5yZWtleTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlS2V5VG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5yZWtleSA9IEJ1ZmZlci5mcm9tKHRoaXMucmVLZXlUby5wdWJsaWNLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR4bjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnYWZyeicpIHtcbiAgICAgICAgICAgIC8vIGFzc2V0IGZyZWV6ZSBvciB1bmZyZWV6ZVxuICAgICAgICAgICAgY29uc3QgdHhuID0ge1xuICAgICAgICAgICAgICAgIGZlZTogdGhpcy5mZWUsXG4gICAgICAgICAgICAgICAgZnY6IHRoaXMuZmlyc3RSb3VuZCxcbiAgICAgICAgICAgICAgICBsdjogdGhpcy5sYXN0Um91bmQsXG4gICAgICAgICAgICAgICAgbm90ZTogQnVmZmVyLmZyb20odGhpcy5ub3RlKSxcbiAgICAgICAgICAgICAgICBzbmQ6IEJ1ZmZlci5mcm9tKHRoaXMuZnJvbS5wdWJsaWNLZXkpLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICBnZW46IHRoaXMuZ2VuZXNpc0lELFxuICAgICAgICAgICAgICAgIGdoOiB0aGlzLmdlbmVzaXNIYXNoLFxuICAgICAgICAgICAgICAgIGx4OiBCdWZmZXIuZnJvbSh0aGlzLmxlYXNlKSxcbiAgICAgICAgICAgICAgICBncnA6IHRoaXMuZ3JvdXAsXG4gICAgICAgICAgICAgICAgZmFpZDogdGhpcy5hc3NldEluZGV4LFxuICAgICAgICAgICAgICAgIGFmcno6IHRoaXMuZnJlZXplU3RhdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRoaXMuZnJlZXplQWNjb3VudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHR4bi5mYWRkID0gQnVmZmVyLmZyb20odGhpcy5mcmVlemVBY2NvdW50LnB1YmxpY0tleSk7XG4gICAgICAgICAgICAvLyBhbGxvd2VkIHplcm8gdmFsdWVzXG4gICAgICAgICAgICBpZiAoIXR4bi5ub3RlLmxlbmd0aClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLm5vdGU7XG4gICAgICAgICAgICBpZiAoIXR4bi5seC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5seDtcbiAgICAgICAgICAgIGlmICghdHhuLmFtdClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFtdDtcbiAgICAgICAgICAgIGlmICghdHhuLmZlZSlcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmZlZTtcbiAgICAgICAgICAgIGlmICghdHhuLmZ2KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uZnY7XG4gICAgICAgICAgICBpZiAoIXR4bi5nZW4pXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5nZW47XG4gICAgICAgICAgICBpZiAoIXR4bi5hZnJ6KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYWZyejtcbiAgICAgICAgICAgIGlmICh0eG4uZ3JwID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5ncnA7XG4gICAgICAgICAgICBpZiAodGhpcy5yZUtleVRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4ucmVrZXkgPSBCdWZmZXIuZnJvbSh0aGlzLnJlS2V5VG8ucHVibGljS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0eG47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2FwcGwnKSB7XG4gICAgICAgICAgICAvLyBhcHBsaWNhdGlvbiBjYWxsIG9mIHNvbWUga2luZFxuICAgICAgICAgICAgY29uc3QgdHhuID0ge1xuICAgICAgICAgICAgICAgIGZlZTogdGhpcy5mZWUsXG4gICAgICAgICAgICAgICAgZnY6IHRoaXMuZmlyc3RSb3VuZCxcbiAgICAgICAgICAgICAgICBsdjogdGhpcy5sYXN0Um91bmQsXG4gICAgICAgICAgICAgICAgbm90ZTogQnVmZmVyLmZyb20odGhpcy5ub3RlKSxcbiAgICAgICAgICAgICAgICBzbmQ6IEJ1ZmZlci5mcm9tKHRoaXMuZnJvbS5wdWJsaWNLZXkpLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICBnZW46IHRoaXMuZ2VuZXNpc0lELFxuICAgICAgICAgICAgICAgIGdoOiB0aGlzLmdlbmVzaXNIYXNoLFxuICAgICAgICAgICAgICAgIGx4OiBCdWZmZXIuZnJvbSh0aGlzLmxlYXNlKSxcbiAgICAgICAgICAgICAgICBncnA6IHRoaXMuZ3JvdXAsXG4gICAgICAgICAgICAgICAgYXBpZDogdGhpcy5hcHBJbmRleCxcbiAgICAgICAgICAgICAgICBhcGFuOiB0aGlzLmFwcE9uQ29tcGxldGUsXG4gICAgICAgICAgICAgICAgYXBsczoge1xuICAgICAgICAgICAgICAgICAgICBudWk6IHRoaXMuYXBwTG9jYWxJbnRzLFxuICAgICAgICAgICAgICAgICAgICBuYnM6IHRoaXMuYXBwTG9jYWxCeXRlU2xpY2VzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXBnczoge1xuICAgICAgICAgICAgICAgICAgICBudWk6IHRoaXMuYXBwR2xvYmFsSW50cyxcbiAgICAgICAgICAgICAgICAgICAgbmJzOiB0aGlzLmFwcEdsb2JhbEJ5dGVTbGljZXMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhcGZhOiB0aGlzLmFwcEZvcmVpZ25BcHBzLFxuICAgICAgICAgICAgICAgIGFwYXM6IHRoaXMuYXBwRm9yZWlnbkFzc2V0cyxcbiAgICAgICAgICAgICAgICBhcGVwOiB0aGlzLmV4dHJhUGFnZXMsXG4gICAgICAgICAgICAgICAgYXBieDogdHJhbnNsYXRlQm94UmVmZXJlbmNlcyh0aGlzLmJveGVzLCB0aGlzLmFwcEZvcmVpZ25BcHBzLCB0aGlzLmFwcEluZGV4KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5yZUtleVRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4ucmVrZXkgPSBCdWZmZXIuZnJvbSh0aGlzLnJlS2V5VG8ucHVibGljS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmFwcEFwcHJvdmFsUHJvZ3JhbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLmFwYXAgPSBCdWZmZXIuZnJvbSh0aGlzLmFwcEFwcHJvdmFsUHJvZ3JhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hcHBDbGVhclByb2dyYW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hcHN1ID0gQnVmZmVyLmZyb20odGhpcy5hcHBDbGVhclByb2dyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwQXJncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLmFwYWEgPSB0aGlzLmFwcEFyZ3MubWFwKChhcmcpID0+IEJ1ZmZlci5mcm9tKGFyZykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwQWNjb3VudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hcGF0ID0gdGhpcy5hcHBBY2NvdW50cy5tYXAoKGRlY29kZWRBZGRyZXNzKSA9PiBCdWZmZXIuZnJvbShkZWNvZGVkQWRkcmVzcy5wdWJsaWNLZXkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFsbG93ZWQgemVybyB2YWx1ZXNcbiAgICAgICAgICAgIGlmICghdHhuLm5vdGUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4ubm90ZTtcbiAgICAgICAgICAgIGlmICghdHhuLmx4Lmxlbmd0aClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmx4O1xuICAgICAgICAgICAgaWYgKCF0eG4uYW10KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYW10O1xuICAgICAgICAgICAgaWYgKCF0eG4uZmVlKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uZmVlO1xuICAgICAgICAgICAgaWYgKCF0eG4uZnYpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5mdjtcbiAgICAgICAgICAgIGlmICghdHhuLmdlbilcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmdlbjtcbiAgICAgICAgICAgIGlmICghdHhuLmFwaWQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGlkO1xuICAgICAgICAgICAgaWYgKCF0eG4uYXBscy5udWkpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGxzLm51aTtcbiAgICAgICAgICAgIGlmICghdHhuLmFwbHMubmJzKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBscy5uYnM7XG4gICAgICAgICAgICBpZiAoIXR4bi5hcGxzLm51aSAmJiAhdHhuLmFwbHMubmJzKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBscztcbiAgICAgICAgICAgIGlmICghdHhuLmFwZ3MubnVpKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBncy5udWk7XG4gICAgICAgICAgICBpZiAoIXR4bi5hcGdzLm5icylcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwZ3MubmJzO1xuICAgICAgICAgICAgaWYgKCF0eG4uYXBhYSB8fCAhdHhuLmFwYWEubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBhYTtcbiAgICAgICAgICAgIGlmICghdHhuLmFwZ3MubnVpICYmICF0eG4uYXBncy5uYnMpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGdzO1xuICAgICAgICAgICAgaWYgKCF0eG4uYXBhcClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYXA7XG4gICAgICAgICAgICBpZiAoIXR4bi5hcHN1KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBzdTtcbiAgICAgICAgICAgIGlmICghdHhuLmFwYW4pXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGFuO1xuICAgICAgICAgICAgaWYgKCF0eG4uYXBmYSB8fCAhdHhuLmFwZmEubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBmYTtcbiAgICAgICAgICAgIGlmICghdHhuLmFwYXMgfHwgIXR4bi5hcGFzLmxlbmd0aClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYXM7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJveCBvZiB0eG4uYXBieCkge1xuICAgICAgICAgICAgICAgIGlmICghYm94LmkpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBib3guaTtcbiAgICAgICAgICAgICAgICBpZiAoIWJveC5uIHx8ICFib3gubi5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBib3gubjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdHhuLmFwYnggfHwgIXR4bi5hcGJ4Lmxlbmd0aClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwYng7XG4gICAgICAgICAgICBpZiAoIXR4bi5hcGF0IHx8ICF0eG4uYXBhdC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGF0O1xuICAgICAgICAgICAgaWYgKCF0eG4uYXBlcClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwZXA7XG4gICAgICAgICAgICBpZiAodHhuLmdycCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uZ3JwO1xuICAgICAgICAgICAgcmV0dXJuIHR4bjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnc3RwZicpIHtcbiAgICAgICAgICAgIC8vIHN0YXRlIHByb29mIHR4blxuICAgICAgICAgICAgY29uc3QgdHhuID0ge1xuICAgICAgICAgICAgICAgIGZlZTogdGhpcy5mZWUsXG4gICAgICAgICAgICAgICAgZnY6IHRoaXMuZmlyc3RSb3VuZCxcbiAgICAgICAgICAgICAgICBsdjogdGhpcy5sYXN0Um91bmQsXG4gICAgICAgICAgICAgICAgbm90ZTogQnVmZmVyLmZyb20odGhpcy5ub3RlKSxcbiAgICAgICAgICAgICAgICBzbmQ6IEJ1ZmZlci5mcm9tKHRoaXMuZnJvbS5wdWJsaWNLZXkpLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICBnZW46IHRoaXMuZ2VuZXNpc0lELFxuICAgICAgICAgICAgICAgIGdoOiB0aGlzLmdlbmVzaXNIYXNoLFxuICAgICAgICAgICAgICAgIGx4OiBCdWZmZXIuZnJvbSh0aGlzLmxlYXNlKSxcbiAgICAgICAgICAgICAgICBzcHR5cGU6IHRoaXMuc3RhdGVQcm9vZlR5cGUsXG4gICAgICAgICAgICAgICAgc3Btc2c6IEJ1ZmZlci5mcm9tKHRoaXMuc3RhdGVQcm9vZk1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgIHNwOiBCdWZmZXIuZnJvbSh0aGlzLnN0YXRlUHJvb2YpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGFsbG93ZWQgemVybyB2YWx1ZXNcbiAgICAgICAgICAgIGlmICghdHhuLnNwdHlwZSlcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLnNwdHlwZTtcbiAgICAgICAgICAgIGlmICghdHhuLm5vdGUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4ubm90ZTtcbiAgICAgICAgICAgIGlmICghdHhuLmx4Lmxlbmd0aClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmx4O1xuICAgICAgICAgICAgaWYgKCF0eG4uYW10KVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYW10O1xuICAgICAgICAgICAgaWYgKCF0eG4uZmVlKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uZmVlO1xuICAgICAgICAgICAgaWYgKCF0eG4uZnYpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5mdjtcbiAgICAgICAgICAgIGlmICghdHhuLmdlbilcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmdlbjtcbiAgICAgICAgICAgIGlmICghdHhuLmFwaWQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGlkO1xuICAgICAgICAgICAgaWYgKCF0eG4uYXBhYSB8fCAhdHhuLmFwYWEubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBhYTtcbiAgICAgICAgICAgIGlmICghdHhuLmFwYXApXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGFwO1xuICAgICAgICAgICAgaWYgKCF0eG4uYXBzdSlcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwc3U7XG4gICAgICAgICAgICBpZiAoIXR4bi5hcGFuKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBhbjtcbiAgICAgICAgICAgIGlmICghdHhuLmFwZmEgfHwgIXR4bi5hcGZhLmxlbmd0aClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmFwZmE7XG4gICAgICAgICAgICBpZiAoIXR4bi5hcGFzIHx8ICF0eG4uYXBhcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGFzO1xuICAgICAgICAgICAgaWYgKCF0eG4uYXBhdCB8fCAhdHhuLmFwYXQubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eG4uYXBhdDtcbiAgICAgICAgICAgIGlmICghdHhuLmFwZXApXG4gICAgICAgICAgICAgICAgZGVsZXRlIHR4bi5hcGVwO1xuICAgICAgICAgICAgaWYgKHR4bi5ncnAgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBkZWxldGUgdHhuLmdycDtcbiAgICAgICAgICAgIHJldHVybiB0eG47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIHN0YXRpYyBmcm9tX29ial9mb3JfZW5jb2RpbmcodHhuRm9yRW5jKSB7XG4gICAgICAgIGNvbnN0IHR4biA9IE9iamVjdC5jcmVhdGUodGhpcy5wcm90b3R5cGUpO1xuICAgICAgICB0eG4ubmFtZSA9ICdUcmFuc2FjdGlvbic7XG4gICAgICAgIHR4bi50YWcgPSBCdWZmZXIuZnJvbSgnVFgnKTtcbiAgICAgICAgdHhuLmdlbmVzaXNJRCA9IHR4bkZvckVuYy5nZW47XG4gICAgICAgIHR4bi5nZW5lc2lzSGFzaCA9IEJ1ZmZlci5mcm9tKHR4bkZvckVuYy5naCk7XG4gICAgICAgIGlmICghaXNUcmFuc2FjdGlvblR5cGUodHhuRm9yRW5jLnR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCB0cmFuc2FjdGlvbiB0eXBlOiAke3R4bkZvckVuYy50eXBlfWApO1xuICAgICAgICB9XG4gICAgICAgIHR4bi50eXBlID0gdHhuRm9yRW5jLnR5cGU7XG4gICAgICAgIHR4bi5mZWUgPSB0eG5Gb3JFbmMuZmVlO1xuICAgICAgICB0eG4uZmlyc3RSb3VuZCA9IHR4bkZvckVuYy5mdjtcbiAgICAgICAgdHhuLmxhc3RSb3VuZCA9IHR4bkZvckVuYy5sdjtcbiAgICAgICAgdHhuLm5vdGUgPSBuZXcgVWludDhBcnJheSh0eG5Gb3JFbmMubm90ZSk7XG4gICAgICAgIHR4bi5sZWFzZSA9IG5ldyBVaW50OEFycmF5KHR4bkZvckVuYy5seCk7XG4gICAgICAgIHR4bi5mcm9tID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhuZXcgVWludDhBcnJheSh0eG5Gb3JFbmMuc25kKSkpO1xuICAgICAgICBpZiAodHhuRm9yRW5jLmdycCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdHhuLmdyb3VwID0gQnVmZmVyLmZyb20odHhuRm9yRW5jLmdycCk7XG4gICAgICAgIGlmICh0eG5Gb3JFbmMucmVrZXkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHR4bi5yZUtleVRvID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhuZXcgVWludDhBcnJheSh0eG5Gb3JFbmMucmVrZXkpKSk7XG4gICAgICAgIGlmICh0eG5Gb3JFbmMudHlwZSA9PT0gJ3BheScpIHtcbiAgICAgICAgICAgIHR4bi5hbW91bnQgPSB0eG5Gb3JFbmMuYW10O1xuICAgICAgICAgICAgdHhuLnRvID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhuZXcgVWludDhBcnJheSh0eG5Gb3JFbmMucmN2KSkpO1xuICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5jbG9zZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHR4bi5jbG9zZVJlbWFpbmRlclRvID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKGFkZHJlc3MuZW5jb2RlQWRkcmVzcyh0eG5Gb3JFbmMuY2xvc2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eG5Gb3JFbmMudHlwZSA9PT0gJ2tleXJlZycpIHtcbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMudm90ZWtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLnZvdGVLZXkgPSBCdWZmZXIuZnJvbSh0eG5Gb3JFbmMudm90ZWtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLnNlbGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLnNlbGVjdGlvbktleSA9IEJ1ZmZlci5mcm9tKHR4bkZvckVuYy5zZWxrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5zcHJma2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4uc3RhdGVQcm9vZktleSA9IEJ1ZmZlci5mcm9tKHR4bkZvckVuYy5zcHJma2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMudm90ZWtkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4udm90ZUtleURpbHV0aW9uID0gdHhuRm9yRW5jLnZvdGVrZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMudm90ZWZzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLnZvdGVGaXJzdCA9IHR4bkZvckVuYy52b3RlZnN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4bkZvckVuYy52b3RlbHN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4udm90ZUxhc3QgPSB0eG5Gb3JFbmMudm90ZWxzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMubm9ucGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLm5vblBhcnRpY2lwYXRpb24gPSB0eG5Gb3JFbmMubm9ucGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eG5Gb3JFbmMudHlwZSA9PT0gJ2FjZmcnKSB7XG4gICAgICAgICAgICAvLyBhc3NldCBjcmVhdGlvbiwgb3IgYXNzZXQgcmVjb25maWd1cmUsIG9yIGFzc2V0IGRlc3RydWN0aW9uXG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmNhaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hc3NldEluZGV4ID0gdHhuRm9yRW5jLmNhaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwYXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hc3NldFRvdGFsID0gdHhuRm9yRW5jLmFwYXIudDtcbiAgICAgICAgICAgICAgICB0eG4uYXNzZXREZWZhdWx0RnJvemVuID0gdHhuRm9yRW5jLmFwYXIuZGY7XG4gICAgICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5hcGFyLmRjICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHR4bi5hc3NldERlY2ltYWxzID0gdHhuRm9yRW5jLmFwYXIuZGM7XG4gICAgICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5hcGFyLm0gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdHhuLmFzc2V0TWFuYWdlciA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhhZGRyZXNzLmVuY29kZUFkZHJlc3MobmV3IFVpbnQ4QXJyYXkodHhuRm9yRW5jLmFwYXIubSkpKTtcbiAgICAgICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwYXIuciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0eG4uYXNzZXRSZXNlcnZlID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhuZXcgVWludDhBcnJheSh0eG5Gb3JFbmMuYXBhci5yKSkpO1xuICAgICAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBhci5mICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHR4bi5hc3NldEZyZWV6ZSA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhhZGRyZXNzLmVuY29kZUFkZHJlc3MobmV3IFVpbnQ4QXJyYXkodHhuRm9yRW5jLmFwYXIuZikpKTtcbiAgICAgICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwYXIuYyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0eG4uYXNzZXRDbGF3YmFjayA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhhZGRyZXNzLmVuY29kZUFkZHJlc3MobmV3IFVpbnQ4QXJyYXkodHhuRm9yRW5jLmFwYXIuYykpKTtcbiAgICAgICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwYXIudW4gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdHhuLmFzc2V0VW5pdE5hbWUgPSB0eG5Gb3JFbmMuYXBhci51bjtcbiAgICAgICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwYXIuYW4gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdHhuLmFzc2V0TmFtZSA9IHR4bkZvckVuYy5hcGFyLmFuO1xuICAgICAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBhci5hdSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0eG4uYXNzZXRVUkwgPSB0eG5Gb3JFbmMuYXBhci5hdTtcbiAgICAgICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwYXIuYW0gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdHhuLmFzc2V0TWV0YWRhdGFIYXNoID0gdHhuRm9yRW5jLmFwYXIuYW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHhuRm9yRW5jLnR5cGUgPT09ICdheGZlcicpIHtcbiAgICAgICAgICAgIC8vIGFzc2V0IHRyYW5zZmVyLCBhY2NlcHRhbmNlLCByZXZvY2F0aW9uLCBtaW50LCBvciBidXJuXG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLnhhaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hc3NldEluZGV4ID0gdHhuRm9yRW5jLnhhaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFhbXQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0eG4uYW1vdW50ID0gdHhuRm9yRW5jLmFhbXQ7XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFjbG9zZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLmNsb3NlUmVtYWluZGVyVG8gPSBhZGRyZXNzLmRlY29kZUFkZHJlc3MoYWRkcmVzcy5lbmNvZGVBZGRyZXNzKG5ldyBVaW50OEFycmF5KHR4bkZvckVuYy5hY2xvc2UpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFzbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hc3NldFJldm9jYXRpb25UYXJnZXQgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3MoYWRkcmVzcy5lbmNvZGVBZGRyZXNzKG5ldyBVaW50OEFycmF5KHR4bkZvckVuYy5hc25kKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHhuLnRvID0gYWRkcmVzcy5kZWNvZGVBZGRyZXNzKGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhuZXcgVWludDhBcnJheSh0eG5Gb3JFbmMuYXJjdikpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eG5Gb3JFbmMudHlwZSA9PT0gJ2FmcnonKSB7XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFmcnogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5mcmVlemVTdGF0ZSA9IHR4bkZvckVuYy5hZnJ6O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5mYWlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4uYXNzZXRJbmRleCA9IHR4bkZvckVuYy5mYWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHhuLmZyZWV6ZUFjY291bnQgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3MoYWRkcmVzcy5lbmNvZGVBZGRyZXNzKG5ldyBVaW50OEFycmF5KHR4bkZvckVuYy5mYWRkKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR4bkZvckVuYy50eXBlID09PSAnYXBwbCcpIHtcbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLmFwcEluZGV4ID0gdHhuRm9yRW5jLmFwaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwYW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hcHBPbkNvbXBsZXRlID0gdHhuRm9yRW5jLmFwYW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwbHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBscy5udWkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdHhuLmFwcExvY2FsSW50cyA9IHR4bkZvckVuYy5hcGxzLm51aTtcbiAgICAgICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwbHMubmJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHR4bi5hcHBMb2NhbEJ5dGVTbGljZXMgPSB0eG5Gb3JFbmMuYXBscy5uYnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBncy5udWkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdHhuLmFwcEdsb2JhbEludHMgPSB0eG5Gb3JFbmMuYXBncy5udWk7XG4gICAgICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5hcGdzLm5icyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0eG4uYXBwR2xvYmFsQnl0ZVNsaWNlcyA9IHR4bkZvckVuYy5hcGdzLm5icztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBlcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLmV4dHJhUGFnZXMgPSB0eG5Gb3JFbmMuYXBlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBhcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLmFwcEFwcHJvdmFsUHJvZ3JhbSA9IG5ldyBVaW50OEFycmF5KHR4bkZvckVuYy5hcGFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBzdSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLmFwcENsZWFyUHJvZ3JhbSA9IG5ldyBVaW50OEFycmF5KHR4bkZvckVuYy5hcHN1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuYXBhYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLmFwcEFyZ3MgPSB0eG5Gb3JFbmMuYXBhYS5tYXAoKGFyZykgPT4gbmV3IFVpbnQ4QXJyYXkoYXJnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hcHBBY2NvdW50cyA9IHR4bkZvckVuYy5hcGF0Lm1hcCgoYWRkcmVzc0J5dGVzKSA9PiBhZGRyZXNzLmRlY29kZUFkZHJlc3MoYWRkcmVzcy5lbmNvZGVBZGRyZXNzKG5ldyBVaW50OEFycmF5KGFkZHJlc3NCeXRlcykpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLmFwZmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHR4bi5hcHBGb3JlaWduQXBwcyA9IHR4bkZvckVuYy5hcGZhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5hcGFzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4uYXBwRm9yZWlnbkFzc2V0cyA9IHR4bkZvckVuYy5hcGFzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5hcGJ4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4uYm94ZXMgPSB0eG5Gb3JFbmMuYXBieC5tYXAoKGJveCkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgcmV0dXJuIDAgZm9yIHRoZSBhcHAgSUQgc28gdGhhdCBpdCdzIGd1YXJhbnRlZWQgdHJhbnNsYXRlQm94UmVmZXJlbmNlcyB3aWxsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRyYW5zbGF0ZSB0aGUgYXBwIGluZGV4IGJhY2sgdG8gMC4gSWYgd2UgaW5zdGVhZCByZXR1cm5lZCB0aGUgY2FsbGVkIGFwcCBJRCxcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJhbnNsYXRlQm94UmVmZXJlbmNlcyB3b3VsZCB0cmFuc2xhdGUgdGhlIGFwcCBpbmRleCB0byBhIG5vbnplcm8gdmFsdWUgaWYgdGhlIGNhbGxlZFxuICAgICAgICAgICAgICAgICAgICAvLyBhcHAgaXMgYWxzbyBpbiB0aGUgZm9yZWlnbiBhcHAgYXJyYXkuXG4gICAgICAgICAgICAgICAgICAgIGFwcEluZGV4OiBib3guaSA/IHR4bi5hcHBGb3JlaWduQXBwc1tib3guaSAtIDFdIDogMCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogYm94Lm4sXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR4bkZvckVuYy50eXBlID09PSAnc3RwZicpIHtcbiAgICAgICAgICAgIGlmICh0eG5Gb3JFbmMuc3B0eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4uc3RhdGVQcm9vZlR5cGUgPSB0eG5Gb3JFbmMuc3B0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4bkZvckVuYy5zcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHhuLnN0YXRlUHJvb2YgPSB0eG5Gb3JFbmMuc3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHhuRm9yRW5jLnNwbXNnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0eG4uc3RhdGVQcm9vZk1lc3NhZ2UgPSB0eG5Gb3JFbmMuc3Btc2c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR4bjtcbiAgICB9XG4gICAgZXN0aW1hdGVTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0J5dGUoKS5sZW5ndGggKyBOVU1fQURETF9CWVRFU19BRlRFUl9TSUdOSU5HO1xuICAgIH1cbiAgICBieXRlc1RvU2lnbigpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlZE1zZyA9IHRoaXMudG9CeXRlKCk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh1dGlscy5jb25jYXRBcnJheXModGhpcy50YWcsIGVuY29kZWRNc2cpKTtcbiAgICB9XG4gICAgdG9CeXRlKCkge1xuICAgICAgICByZXR1cm4gZW5jb2RpbmcuZW5jb2RlKHRoaXMuZ2V0X29ial9mb3JfZW5jb2RpbmcoKSk7XG4gICAgfVxuICAgIC8vIHJldHVybnMgdGhlIHJhdyBzaWduYXR1cmVcbiAgICByYXdTaWduVHhuKHNrKSB7XG4gICAgICAgIGNvbnN0IHRvQmVTaWduZWQgPSB0aGlzLmJ5dGVzVG9TaWduKCk7XG4gICAgICAgIGNvbnN0IHNpZyA9IG5hY2wuc2lnbih0b0JlU2lnbmVkLCBzayk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShzaWcpO1xuICAgIH1cbiAgICBzaWduVHhuKHNrKSB7XG4gICAgICAgIC8vIGNvbnN0cnVjdCBzaWduZWQgbWVzc2FnZVxuICAgICAgICBjb25zdCBzVHhuID0ge1xuICAgICAgICAgICAgc2lnOiB0aGlzLnJhd1NpZ25UeG4oc2spLFxuICAgICAgICAgICAgdHhuOiB0aGlzLmdldF9vYmpfZm9yX2VuY29kaW5nKCksXG4gICAgICAgIH07XG4gICAgICAgIC8vIGFkZCBBdXRoQWRkciBpZiBzaWduaW5nIHdpdGggYSBkaWZmZXJlbnQga2V5IHRoYW4gRnJvbSBpbmRpY2F0ZXNcbiAgICAgICAgY29uc3Qga2V5cGFpciA9IG5hY2wua2V5UGFpckZyb21TZWNyZXRLZXkoc2spO1xuICAgICAgICBjb25zdCBwdWJLZXlGcm9tU2sgPSBrZXlwYWlyLnB1YmxpY0tleTtcbiAgICAgICAgaWYgKGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhwdWJLZXlGcm9tU2spICE9PVxuICAgICAgICAgICAgYWRkcmVzcy5lbmNvZGVBZGRyZXNzKHRoaXMuZnJvbS5wdWJsaWNLZXkpKSB7XG4gICAgICAgICAgICBzVHhuLnNnbnIgPSBCdWZmZXIuZnJvbShwdWJLZXlGcm9tU2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShlbmNvZGluZy5lbmNvZGUoc1R4bikpO1xuICAgIH1cbiAgICBhdHRhY2hTaWduYXR1cmUoc2lnbmVyQWRkciwgc2lnbmF0dXJlKSB7XG4gICAgICAgIGlmICghbmFjbC5pc1ZhbGlkU2lnbmF0dXJlTGVuZ3RoKHNpZ25hdHVyZS5sZW5ndGgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIGxlbmd0aCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNUeG4gPSB7XG4gICAgICAgICAgICBzaWc6IEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSksXG4gICAgICAgICAgICB0eG46IHRoaXMuZ2V0X29ial9mb3JfZW5jb2RpbmcoKSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gYWRkIEF1dGhBZGRyIGlmIHNpZ25pbmcgd2l0aCBhIGRpZmZlcmVudCBrZXkgdGhhbiBGcm9tIGluZGljYXRlc1xuICAgICAgICBpZiAoc2lnbmVyQWRkciAhPT0gYWRkcmVzcy5lbmNvZGVBZGRyZXNzKHRoaXMuZnJvbS5wdWJsaWNLZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBzaWduZXJQdWJsaWNLZXkgPSBhZGRyZXNzLmRlY29kZUFkZHJlc3Moc2lnbmVyQWRkcikucHVibGljS2V5O1xuICAgICAgICAgICAgc1R4bi5zZ25yID0gQnVmZmVyLmZyb20oc2lnbmVyUHVibGljS2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZW5jb2RpbmcuZW5jb2RlKHNUeG4pKTtcbiAgICB9XG4gICAgcmF3VHhJRCgpIHtcbiAgICAgICAgY29uc3QgZW5Nc2cgPSB0aGlzLnRvQnl0ZSgpO1xuICAgICAgICBjb25zdCBnaCA9IEJ1ZmZlci5mcm9tKHV0aWxzLmNvbmNhdEFycmF5cyh0aGlzLnRhZywgZW5Nc2cpKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKG5hY2wuZ2VuZXJpY0hhc2goZ2gpKTtcbiAgICB9XG4gICAgdHhJRCgpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IHRoaXMucmF3VHhJRCgpO1xuICAgICAgICByZXR1cm4gYmFzZTMyLmVuY29kZShoYXNoKS5zbGljZSgwLCBBTEdPUkFORF9UUkFOU0FDVElPTl9MRU5HVEgpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBsZWFzZSB0byBhIHRyYW5zYWN0aW9uIG5vdCB5ZXQgaGF2aW5nXG4gICAgLy8gc3VwcGx5IGZlZVBlckJ5dGUgdG8gaW5jcmVtZW50IGZlZSBhY2NvcmRpbmdseVxuICAgIGFkZExlYXNlKGxlYXNlLCBmZWVQZXJCeXRlID0gMCkge1xuICAgICAgICBsZXQgbXV0YWJsZUxlYXNlO1xuICAgICAgICBpZiAobGVhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGxlYXNlLmNvbnN0cnVjdG9yICE9PSBVaW50OEFycmF5KVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdsZWFzZSBtdXN0IGJlIGEgVWludDhBcnJheS4nKTtcbiAgICAgICAgICAgIGlmIChsZWFzZS5sZW5ndGggIT09IEFMR09SQU5EX1RSQU5TQUNUSU9OX0xFQVNFX0xFTkdUSClcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgbGVhc2UgbXVzdCBiZSBvZiBsZW5ndGggJHtBTEdPUkFORF9UUkFOU0FDVElPTl9MRUFTRV9MRU5HVEgudG9TdHJpbmcoKX0uYCk7XG4gICAgICAgICAgICBtdXRhYmxlTGVhc2UgPSBuZXcgVWludDhBcnJheShsZWFzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtdXRhYmxlTGVhc2UgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlYXNlID0gbXV0YWJsZUxlYXNlO1xuICAgICAgICBpZiAoZmVlUGVyQnl0ZSAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5mZWUgKz1cbiAgICAgICAgICAgICAgICAoQUxHT1JBTkRfVFJBTlNBQ1RJT05fTEVBU0VfTEFCRUxfTEVOR1RIICtcbiAgICAgICAgICAgICAgICAgICAgQUxHT1JBTkRfVFJBTlNBQ1RJT05fTEVBU0VfTEVOR1RIKSAqXG4gICAgICAgICAgICAgICAgICAgIGZlZVBlckJ5dGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIHRoZSByZWtleS10byBmaWVsZCB0byBhIHRyYW5zYWN0aW9uIG5vdCB5ZXQgaGF2aW5nIGl0XG4gICAgLy8gc3VwcGx5IGZlZVBlckJ5dGUgdG8gaW5jcmVtZW50IGZlZSBhY2NvcmRpbmdseVxuICAgIGFkZFJla2V5KHJlS2V5VG8sIGZlZVBlckJ5dGUgPSAwKSB7XG4gICAgICAgIGlmIChyZUtleVRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVLZXlUbyA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhyZUtleVRvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmVlUGVyQnl0ZSAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5mZWUgKz1cbiAgICAgICAgICAgICAgICAoQUxHT1JBTkRfVFJBTlNBQ1RJT05fUkVLRVlfTEFCRUxfTEVOR1RIICtcbiAgICAgICAgICAgICAgICAgICAgQUxHT1JBTkRfVFJBTlNBQ1RJT05fQUREUkVTU19MRU5HVEgpICpcbiAgICAgICAgICAgICAgICAgICAgZmVlUGVyQnl0ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBidWlsZCBkaXNwbGF5IGRpY3QgZm9yIHByZXR0eVByaW50IGFuZCB0b1N0cmluZ1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICAgIF9nZXREaWN0Rm9yRGlzcGxheSgpIHtcbiAgICAgICAgY29uc3QgZm9yUHJpbnRpbmcgPSB7XG4gICAgICAgICAgICAuLi50aGlzLFxuICAgICAgICB9O1xuICAgICAgICBmb3JQcmludGluZy50YWcgPSBmb3JQcmludGluZy50YWcudG9TdHJpbmcoKTtcbiAgICAgICAgZm9yUHJpbnRpbmcuZnJvbSA9IGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhmb3JQcmludGluZy5mcm9tLnB1YmxpY0tleSk7XG4gICAgICAgIGlmIChmb3JQcmludGluZy50byAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgZm9yUHJpbnRpbmcudG8gPSBhZGRyZXNzLmVuY29kZUFkZHJlc3MoZm9yUHJpbnRpbmcudG8ucHVibGljS2V5KTtcbiAgICAgICAgLy8gdGhpbmdzIHRoYXQgbmVlZCBmaXhpbmc6XG4gICAgICAgIGlmIChmb3JQcmludGluZy5mcmVlemVBY2NvdW50ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBmb3JQcmludGluZy5mcmVlemVBY2NvdW50ID0gYWRkcmVzcy5lbmNvZGVBZGRyZXNzKGZvclByaW50aW5nLmZyZWV6ZUFjY291bnQucHVibGljS2V5KTtcbiAgICAgICAgaWYgKGZvclByaW50aW5nLmNsb3NlUmVtYWluZGVyVG8gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGZvclByaW50aW5nLmNsb3NlUmVtYWluZGVyVG8gPSBhZGRyZXNzLmVuY29kZUFkZHJlc3MoZm9yUHJpbnRpbmcuY2xvc2VSZW1haW5kZXJUby5wdWJsaWNLZXkpO1xuICAgICAgICBpZiAoZm9yUHJpbnRpbmcuYXNzZXRNYW5hZ2VyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBmb3JQcmludGluZy5hc3NldE1hbmFnZXIgPSBhZGRyZXNzLmVuY29kZUFkZHJlc3MoZm9yUHJpbnRpbmcuYXNzZXRNYW5hZ2VyLnB1YmxpY0tleSk7XG4gICAgICAgIGlmIChmb3JQcmludGluZy5hc3NldFJlc2VydmUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGZvclByaW50aW5nLmFzc2V0UmVzZXJ2ZSA9IGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhmb3JQcmludGluZy5hc3NldFJlc2VydmUucHVibGljS2V5KTtcbiAgICAgICAgaWYgKGZvclByaW50aW5nLmFzc2V0RnJlZXplICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBmb3JQcmludGluZy5hc3NldEZyZWV6ZSA9IGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhmb3JQcmludGluZy5hc3NldEZyZWV6ZS5wdWJsaWNLZXkpO1xuICAgICAgICBpZiAoZm9yUHJpbnRpbmcuYXNzZXRDbGF3YmFjayAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgZm9yUHJpbnRpbmcuYXNzZXRDbGF3YmFjayA9IGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhmb3JQcmludGluZy5hc3NldENsYXdiYWNrLnB1YmxpY0tleSk7XG4gICAgICAgIGlmIChmb3JQcmludGluZy5hc3NldFJldm9jYXRpb25UYXJnZXQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGZvclByaW50aW5nLmFzc2V0UmV2b2NhdGlvblRhcmdldCA9IGFkZHJlc3MuZW5jb2RlQWRkcmVzcyhmb3JQcmludGluZy5hc3NldFJldm9jYXRpb25UYXJnZXQucHVibGljS2V5KTtcbiAgICAgICAgaWYgKGZvclByaW50aW5nLnJlS2V5VG8gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGZvclByaW50aW5nLnJlS2V5VG8gPSBhZGRyZXNzLmVuY29kZUFkZHJlc3MoZm9yUHJpbnRpbmcucmVLZXlUby5wdWJsaWNLZXkpO1xuICAgICAgICBmb3JQcmludGluZy5nZW5lc2lzSGFzaCA9IGZvclByaW50aW5nLmdlbmVzaXNIYXNoLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgcmV0dXJuIGZvclByaW50aW5nO1xuICAgIH1cbiAgICAvLyBwcmV0dHkgcHJpbnQgdGhlIHRyYW5zYWN0aW9uIHRvIGNvbnNvbGVcbiAgICBwcmV0dHlQcmludCgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5fZ2V0RGljdEZvckRpc3BsYXkoKSk7XG4gICAgfVxuICAgIC8vIGdldCBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLl9nZXREaWN0Rm9yRGlzcGxheSgpKTtcbiAgICB9XG59XG4vKipcbiAqIGVuY29kZVVuc2lnbmVkVHJhbnNhY3Rpb24gdGFrZXMgYSBjb21wbGV0ZWQgdHhuQnVpbGRlci5UcmFuc2FjdGlvbiBvYmplY3QsIHN1Y2ggYXMgZnJvbSB0aGUgbWFrZUZvb1xuICogZmFtaWx5IG9mIHRyYW5zYWN0aW9ucywgYW5kIGNvbnZlcnRzIGl0IHRvIGEgQnVmZmVyXG4gKiBAcGFyYW0gdHJhbnNhY3Rpb25PYmplY3QgLSB0aGUgY29tcGxldGVkIFRyYW5zYWN0aW9uIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVW5zaWduZWRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbk9iamVjdCkge1xuICAgIGNvbnN0IG9ialRvRW5jb2RlID0gdHJhbnNhY3Rpb25PYmplY3QuZ2V0X29ial9mb3JfZW5jb2RpbmcoKTtcbiAgICByZXR1cm4gZW5jb2RpbmcuZW5jb2RlKG9ialRvRW5jb2RlKTtcbn1cbi8qKlxuICogZGVjb2RlVW5zaWduZWRUcmFuc2FjdGlvbiB0YWtlcyBhIEJ1ZmZlciAoYXMgaWYgZnJvbSBlbmNvZGVVbnNpZ25lZFRyYW5zYWN0aW9uKSBhbmQgY29udmVydHMgaXQgdG8gYSB0eG5CdWlsZGVyLlRyYW5zYWN0aW9uIG9iamVjdFxuICogQHBhcmFtIHRyYW5zYWN0aW9uQnVmZmVyIC0gdGhlIFVpbnQ4QXJyYXkgY29udGFpbmluZyBhIHRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVVbnNpZ25lZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uQnVmZmVyKSB7XG4gICAgY29uc3QgcGFydGx5RGVjb2RlZE9iamVjdCA9IGVuY29kaW5nLmRlY29kZSh0cmFuc2FjdGlvbkJ1ZmZlcik7XG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb21fb2JqX2Zvcl9lbmNvZGluZyhwYXJ0bHlEZWNvZGVkT2JqZWN0KTtcbn1cbi8qKlxuICogZGVjb2RlU2lnbmVkVHJhbnNhY3Rpb24gdGFrZXMgYSBCdWZmZXIgKGZyb20gdHJhbnNhY3Rpb24uc2lnblR4bikgYW5kIGNvbnZlcnRzIGl0IHRvIGFuIG9iamVjdFxuICogY29udGFpbmluZyB0aGUgVHJhbnNhY3Rpb24gKHR4biksIHRoZSBzaWduYXR1cmUgKHNpZyksIGFuZCB0aGUgYXV0aC1hZGRyIGZpZWxkIGlmIGFwcGxpY2FibGUgKHNnbnIpXG4gKiBAcGFyYW0gdHJhbnNhY3Rpb25CdWZmZXIgLSB0aGUgVWludDhBcnJheSBjb250YWluaW5nIGEgdHJhbnNhY3Rpb25cbiAqIEByZXR1cm5zIGNvbnRhaW5pbmcgYSBUcmFuc2FjdGlvbiwgdGhlIHNpZ25hdHVyZSwgYW5kIHBvc3NpYmx5IGFuIGF1dGgtYWRkciBmaWVsZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU2lnbmVkVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25CdWZmZXIpIHtcbiAgICBjb25zdCBzdHhuRGVjb2RlZCA9IGVuY29kaW5nLmRlY29kZSh0cmFuc2FjdGlvbkJ1ZmZlcik7XG4gICAgY29uc3Qgc3R4biA9IHtcbiAgICAgICAgLi4uc3R4bkRlY29kZWQsXG4gICAgICAgIHR4bjogVHJhbnNhY3Rpb24uZnJvbV9vYmpfZm9yX2VuY29kaW5nKHN0eG5EZWNvZGVkLnR4biksXG4gICAgfTtcbiAgICByZXR1cm4gc3R4bjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YW50aWF0ZVR4bklmTmVlZGVkKHRyYW5zYWN0aW9uTGlrZSkge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbkxpa2UgaW5zdGFuY2VvZiBUcmFuc2FjdGlvblxuICAgICAgICA/IHRyYW5zYWN0aW9uTGlrZVxuICAgICAgICA6IG5ldyBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkxpa2UpO1xufVxuZXhwb3J0IGRlZmF1bHQgVHJhbnNhY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiYmFzZTMyIiwiYWRkcmVzcyIsImVuY29kaW5nIiwibmFjbCIsInV0aWxzIiwidHJhbnNsYXRlQm94UmVmZXJlbmNlcyIsIlRyYW5zYWN0aW9uVHlwZSIsImlzVHJhbnNhY3Rpb25UeXBlIiwiQUxHT1JBTkRfVFJBTlNBQ1RJT05fTEVOR1RIIiwiQUxHT1JBTkRfTUlOX1RYX0ZFRSIsIkFMR09SQU5EX1RSQU5TQUNUSU9OX0xFQVNFX0xFTkdUSCIsIkFMR09SQU5EX01BWF9BU1NFVF9ERUNJTUFMUyIsIk5VTV9BRERMX0JZVEVTX0FGVEVSX1NJR05JTkciLCJBTEdPUkFORF9UUkFOU0FDVElPTl9MRUFTRV9MQUJFTF9MRU5HVEgiLCJBTEdPUkFORF9UUkFOU0FDVElPTl9BRERSRVNTX0xFTkdUSCIsIkFMR09SQU5EX1RSQU5TQUNUSU9OX1JFS0VZX0xBQkVMX0xFTkdUSCIsIkFTU0VUX01FVEFEQVRBX0hBU0hfTEVOR1RIIiwiS0VZUkVHX1ZPVEVfS0VZX0xFTkdUSCIsIktFWVJFR19TRUxFQ1RJT05fS0VZX0xFTkdUSCIsIktFWVJFR19TVEFURV9QUk9PRl9LRVlfTEVOR1RIIiwiZ2V0S2V5cmVnS2V5IiwiaW5wdXQiLCJpbnB1dE5hbWUiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJpbnB1dEFzQnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsImNvbnN0cnVjdG9yIiwiVWludDhBcnJheSIsImlzQnVmZmVyIiwiYnl0ZUxlbmd0aCIsIkVycm9yIiwiVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbiIsIm5hbWUiLCJ0YWciLCJkZWZhdWx0cyIsInR5cGUiLCJwYXkiLCJmbGF0RmVlIiwibm9uUGFydGljaXBhdGlvbiIsImtleXJlZyIsInZvdGVLZXkiLCJzdWdnZXN0ZWRQYXJhbXMiLCJyZWZlcmVuY2UiLCJnZW5lc2lzSGFzaCIsImZlZSIsImZpcnN0Um91bmQiLCJsYXN0Um91bmQiLCJnZW5lc2lzSUQiLCJ0eG4iLCJkZWNvZGVBZGRyZXNzIiwidG8iLCJjbG9zZVJlbWFpbmRlclRvIiwiYXNzZXRNYW5hZ2VyIiwiYXNzZXRSZXNlcnZlIiwiYXNzZXRGcmVlemUiLCJhc3NldENsYXdiYWNrIiwiYXNzZXRSZXZvY2F0aW9uVGFyZ2V0IiwiZnJlZXplQWNjb3VudCIsInJlS2V5VG8iLCJhbW91bnQiLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiQmlnSW50IiwiZXh0cmFQYWdlcyIsImlzSW50ZWdlciIsImFzc2V0VG90YWwiLCJhc3NldERlY2ltYWxzIiwidG9TdHJpbmciLCJhc3NldEluZGV4IiwiYXBwSW5kZXgiLCJhcHBMb2NhbEludHMiLCJhcHBMb2NhbEJ5dGVTbGljZXMiLCJhcHBHbG9iYWxJbnRzIiwiYXBwR2xvYmFsQnl0ZVNsaWNlcyIsImFwcEFwcHJvdmFsUHJvZ3JhbSIsImFwcENsZWFyUHJvZ3JhbSIsImFwcEFyZ3MiLCJBcnJheSIsImlzQXJyYXkiLCJzbGljZSIsImZvckVhY2giLCJhcmciLCJhcHBBY2NvdW50cyIsIm1hcCIsImFkZHJlc3NBc1N0cmluZyIsImFwcEZvcmVpZ25BcHBzIiwiZm9yZWlnbkFwcEluZGV4IiwiYXBwRm9yZWlnbkFzc2V0cyIsImZvcmVpZ25Bc3NldEluZGV4IiwiYm94ZXMiLCJib3giLCJhc3NldE1ldGFkYXRhSGFzaCIsImV2ZXJ5IiwidmFsdWUiLCJub3RlIiwibGVhc2UiLCJzZWxlY3Rpb25LZXkiLCJzdGF0ZVByb29mS2V5Iiwidm90ZUZpcnN0Iiwidm90ZUxhc3QiLCJ2b3RlS2V5RGlsdXRpb24iLCJPYmplY3QiLCJhc3NpZ24iLCJyZW1vdmVVbmRlZmluZWRQcm9wZXJ0aWVzIiwiZXN0aW1hdGVTaXplIiwiZ3JvdXAiLCJzdGF0ZVByb29mVHlwZSIsInN0YXRlUHJvb2ZNZXNzYWdlIiwic3RhdGVQcm9vZiIsImdldF9vYmpfZm9yX2VuY29kaW5nIiwiYW10IiwiZnYiLCJsdiIsInNuZCIsInB1YmxpY0tleSIsImdlbiIsImdoIiwibHgiLCJncnAiLCJlbmNvZGVBZGRyZXNzIiwiQUxHT1JBTkRfWkVST19BRERSRVNTX1NUUklORyIsImNsb3NlIiwicmVrZXkiLCJyY3YiLCJ2b3Rla2V5Iiwic2Vsa2V5Iiwic3ByZmtleSIsInZvdGVmc3QiLCJ2b3RlbHN0Iiwidm90ZWtkIiwibm9ucGFydCIsImNhaWQiLCJhcGFyIiwidCIsImRmIiwiYXNzZXREZWZhdWx0RnJvemVuIiwiZGMiLCJtIiwiciIsImYiLCJjIiwiYXNzZXROYW1lIiwiYW4iLCJhc3NldFVuaXROYW1lIiwidW4iLCJhc3NldFVSTCIsImF1IiwiYW0iLCJhYW10IiwiYXJjdiIsInhhaWQiLCJhY2xvc2UiLCJhc25kIiwiZmFpZCIsImFmcnoiLCJmcmVlemVTdGF0ZSIsImZhZGQiLCJhcGlkIiwiYXBhbiIsImFwcE9uQ29tcGxldGUiLCJhcGxzIiwibnVpIiwibmJzIiwiYXBncyIsImFwZmEiLCJhcGFzIiwiYXBlcCIsImFwYngiLCJhcGFwIiwiYXBzdSIsImFwYWEiLCJhcGF0IiwiZGVjb2RlZEFkZHJlc3MiLCJpIiwibiIsInNwdHlwZSIsInNwbXNnIiwic3AiLCJmcm9tX29ial9mb3JfZW5jb2RpbmciLCJ0eG5Gb3JFbmMiLCJjcmVhdGUiLCJwcm90b3R5cGUiLCJhZGRyZXNzQnl0ZXMiLCJ0b0J5dGUiLCJieXRlc1RvU2lnbiIsImVuY29kZWRNc2ciLCJjb25jYXRBcnJheXMiLCJlbmNvZGUiLCJyYXdTaWduVHhuIiwic2siLCJ0b0JlU2lnbmVkIiwic2lnIiwic2lnbiIsInNpZ25UeG4iLCJzVHhuIiwia2V5cGFpciIsImtleVBhaXJGcm9tU2VjcmV0S2V5IiwicHViS2V5RnJvbVNrIiwic2duciIsImF0dGFjaFNpZ25hdHVyZSIsInNpZ25lckFkZHIiLCJzaWduYXR1cmUiLCJpc1ZhbGlkU2lnbmF0dXJlTGVuZ3RoIiwic2lnbmVyUHVibGljS2V5IiwicmF3VHhJRCIsImVuTXNnIiwiZ2VuZXJpY0hhc2giLCJ0eElEIiwiaGFzaCIsImFkZExlYXNlIiwiZmVlUGVyQnl0ZSIsIm11dGFibGVMZWFzZSIsImFkZFJla2V5IiwiX2dldERpY3RGb3JEaXNwbGF5IiwiZm9yUHJpbnRpbmciLCJwcmV0dHlQcmludCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiZW5jb2RlVW5zaWduZWRUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uT2JqZWN0Iiwib2JqVG9FbmNvZGUiLCJkZWNvZGVVbnNpZ25lZFRyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb25CdWZmZXIiLCJwYXJ0bHlEZWNvZGVkT2JqZWN0IiwiZGVjb2RlIiwiZGVjb2RlU2lnbmVkVHJhbnNhY3Rpb24iLCJzdHhuRGVjb2RlZCIsInN0eG4iLCJpbnN0YW50aWF0ZVR4bklmTmVlZGVkIiwidHJhbnNhY3Rpb25MaWtlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/address.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/address.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVUsQ0FDVixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL3R5cGVzL2FkZHJlc3MuanM/YTc5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionType: () => (/* reexport safe */ _transactions__WEBPACK_IMPORTED_MODULE_0__.TransactionType)\n/* harmony export */ });\n/* harmony import */ var _transactions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transactions */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/index.js\");\n/* harmony import */ var _multisig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/multisig.js\");\n/* harmony import */ var _address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/address.js\");\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUNKO0FBQ0QsQ0FDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS90eXBlcy9pbmRleC5qcz9hY2VhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vbXVsdGlzaWcnO1xuZXhwb3J0ICogZnJvbSAnLi9hZGRyZXNzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/intDecoding.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/intDecoding.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Configure how integers in JSON response will be decoded.\n */ var IntDecoding;\n(function(IntDecoding) {\n    /**\n     * All integers will be decoded as Numbers, meaning any values greater than\n     * Number.MAX_SAFE_INTEGER will lose precision.\n     */ IntDecoding[\"DEFAULT\"] = \"default\";\n    /**\n     * All integers will be decoded as Numbers, but if any values are greater than\n     * Number.MAX_SAFE_INTEGER an error will be thrown.\n     */ IntDecoding[\"SAFE\"] = \"safe\";\n    /**\n     * Integers will be decoded as Numbers if they are less than or equal to\n     * Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n     */ IntDecoding[\"MIXED\"] = \"mixed\";\n    /**\n     * All integers will be decoded as BigInts.\n     */ IntDecoding[\"BIGINT\"] = \"bigint\";\n})(IntDecoding || (IntDecoding = {}));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (IntDecoding); //# sourceMappingURL=intDecoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvaW50RGVjb2RpbmcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsSUFBSUE7QUFDSCxVQUFVQSxXQUFXO0lBQ2xCOzs7S0FHQyxHQUNEQSxXQUFXLENBQUMsVUFBVSxHQUFHO0lBQ3pCOzs7S0FHQyxHQUNEQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCOzs7S0FHQyxHQUNEQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCOztLQUVDLEdBQ0RBLFdBQVcsQ0FBQyxTQUFTLEdBQUc7QUFDNUIsR0FBR0EsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQztBQUNsQyxpRUFBZUEsV0FBV0EsRUFBQyxDQUMzQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL3R5cGVzL2ludERlY29kaW5nLmpzPzg5ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25maWd1cmUgaG93IGludGVnZXJzIGluIEpTT04gcmVzcG9uc2Ugd2lsbCBiZSBkZWNvZGVkLlxuICovXG52YXIgSW50RGVjb2Rpbmc7XG4oZnVuY3Rpb24gKEludERlY29kaW5nKSB7XG4gICAgLyoqXG4gICAgICogQWxsIGludGVnZXJzIHdpbGwgYmUgZGVjb2RlZCBhcyBOdW1iZXJzLCBtZWFuaW5nIGFueSB2YWx1ZXMgZ3JlYXRlciB0aGFuXG4gICAgICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgd2lsbCBsb3NlIHByZWNpc2lvbi5cbiAgICAgKi9cbiAgICBJbnREZWNvZGluZ1tcIkRFRkFVTFRcIl0gPSBcImRlZmF1bHRcIjtcbiAgICAvKipcbiAgICAgKiBBbGwgaW50ZWdlcnMgd2lsbCBiZSBkZWNvZGVkIGFzIE51bWJlcnMsIGJ1dCBpZiBhbnkgdmFsdWVzIGFyZSBncmVhdGVyIHRoYW5cbiAgICAgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgKi9cbiAgICBJbnREZWNvZGluZ1tcIlNBRkVcIl0gPSBcInNhZmVcIjtcbiAgICAvKipcbiAgICAgKiBJbnRlZ2VycyB3aWxsIGJlIGRlY29kZWQgYXMgTnVtYmVycyBpZiB0aGV5IGFyZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgb3RoZXJ3aXNlIHRoZXkgd2lsbCBiZSBkZWNvZGVkIGFzIEJpZ0ludHMuXG4gICAgICovXG4gICAgSW50RGVjb2RpbmdbXCJNSVhFRFwiXSA9IFwibWl4ZWRcIjtcbiAgICAvKipcbiAgICAgKiBBbGwgaW50ZWdlcnMgd2lsbCBiZSBkZWNvZGVkIGFzIEJpZ0ludHMuXG4gICAgICovXG4gICAgSW50RGVjb2RpbmdbXCJCSUdJTlRcIl0gPSBcImJpZ2ludFwiO1xufSkoSW50RGVjb2RpbmcgfHwgKEludERlY29kaW5nID0ge30pKTtcbmV4cG9ydCBkZWZhdWx0IEludERlY29kaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50RGVjb2RpbmcuanMubWFwIl0sIm5hbWVzIjpbIkludERlY29kaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/intDecoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/multisig.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/multisig.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=multisig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvbXVsdGlzaWcuanMiLCJtYXBwaW5ncyI6IjtBQUFVLENBQ1Ysb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS90eXBlcy9tdWx0aXNpZy5qcz9lZjc2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpc2lnLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/base.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/base.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnApplicationComplete: () => (/* binding */ OnApplicationComplete),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   isTransactionType: () => (/* binding */ isTransactionType)\n/* harmony export */ });\n/**\n * Enum for application transaction types.\n *\n * The full list is available at https://developer.algorand.org/docs/reference/transactions/\n */ var TransactionType;\n(function(TransactionType) {\n    /**\n     * Payment transaction\n     */ TransactionType[\"pay\"] = \"pay\";\n    /**\n     * Key registration transaction\n     */ TransactionType[\"keyreg\"] = \"keyreg\";\n    /**\n     * Asset configuration transaction\n     */ TransactionType[\"acfg\"] = \"acfg\";\n    /**\n     * Asset transfer transaction\n     */ TransactionType[\"axfer\"] = \"axfer\";\n    /**\n     * Asset freeze transaction\n     */ TransactionType[\"afrz\"] = \"afrz\";\n    /**\n     * Application transaction\n     */ TransactionType[\"appl\"] = \"appl\";\n    /**\n     * State proof transaction\n     */ TransactionType[\"stpf\"] = \"stpf\";\n})(TransactionType || (TransactionType = {}));\nfunction isTransactionType(s) {\n    return s === TransactionType.pay || s === TransactionType.keyreg || s === TransactionType.acfg || s === TransactionType.axfer || s === TransactionType.afrz || s === TransactionType.appl || s === TransactionType.stpf;\n}\n/**\n * Enums for application transactions on-transaction-complete behavior\n */ var OnApplicationComplete;\n(function(OnApplicationComplete) {\n    /**\n     * NoOpOC indicates that an application transaction will simply call its\n     * ApprovalProgram\n     */ OnApplicationComplete[OnApplicationComplete[\"NoOpOC\"] = 0] = \"NoOpOC\";\n    /**\n     * OptInOC indicates that an application transaction will allocate some\n     * LocalState for the application in the sender's account\n     */ OnApplicationComplete[OnApplicationComplete[\"OptInOC\"] = 1] = \"OptInOC\";\n    /**\n     * CloseOutOC indicates that an application transaction will deallocate\n     * some LocalState for the application from the user's account\n     */ OnApplicationComplete[OnApplicationComplete[\"CloseOutOC\"] = 2] = \"CloseOutOC\";\n    /**\n     * ClearStateOC is similar to CloseOutOC, but may never fail. This\n     * allows users to reclaim their minimum balance from an application\n     * they no longer wish to opt in to.\n     */ OnApplicationComplete[OnApplicationComplete[\"ClearStateOC\"] = 3] = \"ClearStateOC\";\n    /**\n     * UpdateApplicationOC indicates that an application transaction will\n     * update the ApprovalProgram and ClearStateProgram for the application\n     */ OnApplicationComplete[OnApplicationComplete[\"UpdateApplicationOC\"] = 4] = \"UpdateApplicationOC\";\n    /**\n     * DeleteApplicationOC indicates that an application transaction will\n     * delete the AppParams for the application from the creator's balance\n     * record\n     */ OnApplicationComplete[OnApplicationComplete[\"DeleteApplicationOC\"] = 5] = \"DeleteApplicationOC\";\n})(OnApplicationComplete || (OnApplicationComplete = {})); //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvdHJhbnNhY3Rpb25zL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUNNLElBQUlBLGdCQUFnQjtBQUMxQixVQUFVQSxlQUFlO0lBQ3RCOztLQUVDLEdBQ0RBLGVBQWUsQ0FBQyxNQUFNLEdBQUc7SUFDekI7O0tBRUMsR0FDREEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1Qjs7S0FFQyxHQUNEQSxlQUFlLENBQUMsT0FBTyxHQUFHO0lBQzFCOztLQUVDLEdBQ0RBLGVBQWUsQ0FBQyxRQUFRLEdBQUc7SUFDM0I7O0tBRUMsR0FDREEsZUFBZSxDQUFDLE9BQU8sR0FBRztJQUMxQjs7S0FFQyxHQUNEQSxlQUFlLENBQUMsT0FBTyxHQUFHO0lBQzFCOztLQUVDLEdBQ0RBLGVBQWUsQ0FBQyxPQUFPLEdBQUc7QUFDOUIsR0FBR0EsbUJBQW9CQSxDQUFBQSxrQkFBa0IsQ0FBQztBQUNuQyxTQUFTQyxrQkFBa0JDLENBQUM7SUFDL0IsT0FBUUEsTUFBTUYsZ0JBQWdCRyxHQUFHLElBQzdCRCxNQUFNRixnQkFBZ0JJLE1BQU0sSUFDNUJGLE1BQU1GLGdCQUFnQkssSUFBSSxJQUMxQkgsTUFBTUYsZ0JBQWdCTSxLQUFLLElBQzNCSixNQUFNRixnQkFBZ0JPLElBQUksSUFDMUJMLE1BQU1GLGdCQUFnQlEsSUFBSSxJQUMxQk4sTUFBTUYsZ0JBQWdCUyxJQUFJO0FBQ2xDO0FBQ0E7O0NBRUMsR0FDTSxJQUFJQyxzQkFBc0I7QUFDaEMsVUFBVUEscUJBQXFCO0lBQzVCOzs7S0FHQyxHQUNEQSxxQkFBcUIsQ0FBQ0EscUJBQXFCLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUM3RDs7O0tBR0MsR0FDREEscUJBQXFCLENBQUNBLHFCQUFxQixDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDOUQ7OztLQUdDLEdBQ0RBLHFCQUFxQixDQUFDQSxxQkFBcUIsQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHO0lBQ2pFOzs7O0tBSUMsR0FDREEscUJBQXFCLENBQUNBLHFCQUFxQixDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7SUFDbkU7OztLQUdDLEdBQ0RBLHFCQUFxQixDQUFDQSxxQkFBcUIsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEdBQUc7SUFDMUU7Ozs7S0FJQyxHQUNEQSxxQkFBcUIsQ0FBQ0EscUJBQXFCLENBQUMsc0JBQXNCLEdBQUcsRUFBRSxHQUFHO0FBQzlFLEdBQUdBLHlCQUEwQkEsQ0FBQUEsd0JBQXdCLENBQUMsS0FDdEQsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS90eXBlcy90cmFuc2FjdGlvbnMvYmFzZS5qcz83ODBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW51bSBmb3IgYXBwbGljYXRpb24gdHJhbnNhY3Rpb24gdHlwZXMuXG4gKlxuICogVGhlIGZ1bGwgbGlzdCBpcyBhdmFpbGFibGUgYXQgaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVmZXJlbmNlL3RyYW5zYWN0aW9ucy9cbiAqL1xuZXhwb3J0IHZhciBUcmFuc2FjdGlvblR5cGU7XG4oZnVuY3Rpb24gKFRyYW5zYWN0aW9uVHlwZSkge1xuICAgIC8qKlxuICAgICAqIFBheW1lbnQgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJwYXlcIl0gPSBcInBheVwiO1xuICAgIC8qKlxuICAgICAqIEtleSByZWdpc3RyYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJrZXlyZWdcIl0gPSBcImtleXJlZ1wiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IGNvbmZpZ3VyYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhY2ZnXCJdID0gXCJhY2ZnXCI7XG4gICAgLyoqXG4gICAgICogQXNzZXQgdHJhbnNmZXIgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJheGZlclwiXSA9IFwiYXhmZXJcIjtcbiAgICAvKipcbiAgICAgKiBBc3NldCBmcmVlemUgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhZnJ6XCJdID0gXCJhZnJ6XCI7XG4gICAgLyoqXG4gICAgICogQXBwbGljYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhcHBsXCJdID0gXCJhcHBsXCI7XG4gICAgLyoqXG4gICAgICogU3RhdGUgcHJvb2YgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJzdHBmXCJdID0gXCJzdHBmXCI7XG59KShUcmFuc2FjdGlvblR5cGUgfHwgKFRyYW5zYWN0aW9uVHlwZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gaXNUcmFuc2FjdGlvblR5cGUocykge1xuICAgIHJldHVybiAocyA9PT0gVHJhbnNhY3Rpb25UeXBlLnBheSB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUua2V5cmVnIHx8XG4gICAgICAgIHMgPT09IFRyYW5zYWN0aW9uVHlwZS5hY2ZnIHx8XG4gICAgICAgIHMgPT09IFRyYW5zYWN0aW9uVHlwZS5heGZlciB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUuYWZyeiB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUuYXBwbCB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUuc3RwZik7XG59XG4vKipcbiAqIEVudW1zIGZvciBhcHBsaWNhdGlvbiB0cmFuc2FjdGlvbnMgb24tdHJhbnNhY3Rpb24tY29tcGxldGUgYmVoYXZpb3JcbiAqL1xuZXhwb3J0IHZhciBPbkFwcGxpY2F0aW9uQ29tcGxldGU7XG4oZnVuY3Rpb24gKE9uQXBwbGljYXRpb25Db21wbGV0ZSkge1xuICAgIC8qKlxuICAgICAqIE5vT3BPQyBpbmRpY2F0ZXMgdGhhdCBhbiBhcHBsaWNhdGlvbiB0cmFuc2FjdGlvbiB3aWxsIHNpbXBseSBjYWxsIGl0c1xuICAgICAqIEFwcHJvdmFsUHJvZ3JhbVxuICAgICAqL1xuICAgIE9uQXBwbGljYXRpb25Db21wbGV0ZVtPbkFwcGxpY2F0aW9uQ29tcGxldGVbXCJOb09wT0NcIl0gPSAwXSA9IFwiTm9PcE9DXCI7XG4gICAgLyoqXG4gICAgICogT3B0SW5PQyBpbmRpY2F0ZXMgdGhhdCBhbiBhcHBsaWNhdGlvbiB0cmFuc2FjdGlvbiB3aWxsIGFsbG9jYXRlIHNvbWVcbiAgICAgKiBMb2NhbFN0YXRlIGZvciB0aGUgYXBwbGljYXRpb24gaW4gdGhlIHNlbmRlcidzIGFjY291bnRcbiAgICAgKi9cbiAgICBPbkFwcGxpY2F0aW9uQ29tcGxldGVbT25BcHBsaWNhdGlvbkNvbXBsZXRlW1wiT3B0SW5PQ1wiXSA9IDFdID0gXCJPcHRJbk9DXCI7XG4gICAgLyoqXG4gICAgICogQ2xvc2VPdXRPQyBpbmRpY2F0ZXMgdGhhdCBhbiBhcHBsaWNhdGlvbiB0cmFuc2FjdGlvbiB3aWxsIGRlYWxsb2NhdGVcbiAgICAgKiBzb21lIExvY2FsU3RhdGUgZm9yIHRoZSBhcHBsaWNhdGlvbiBmcm9tIHRoZSB1c2VyJ3MgYWNjb3VudFxuICAgICAqL1xuICAgIE9uQXBwbGljYXRpb25Db21wbGV0ZVtPbkFwcGxpY2F0aW9uQ29tcGxldGVbXCJDbG9zZU91dE9DXCJdID0gMl0gPSBcIkNsb3NlT3V0T0NcIjtcbiAgICAvKipcbiAgICAgKiBDbGVhclN0YXRlT0MgaXMgc2ltaWxhciB0byBDbG9zZU91dE9DLCBidXQgbWF5IG5ldmVyIGZhaWwuIFRoaXNcbiAgICAgKiBhbGxvd3MgdXNlcnMgdG8gcmVjbGFpbSB0aGVpciBtaW5pbXVtIGJhbGFuY2UgZnJvbSBhbiBhcHBsaWNhdGlvblxuICAgICAqIHRoZXkgbm8gbG9uZ2VyIHdpc2ggdG8gb3B0IGluIHRvLlxuICAgICAqL1xuICAgIE9uQXBwbGljYXRpb25Db21wbGV0ZVtPbkFwcGxpY2F0aW9uQ29tcGxldGVbXCJDbGVhclN0YXRlT0NcIl0gPSAzXSA9IFwiQ2xlYXJTdGF0ZU9DXCI7XG4gICAgLyoqXG4gICAgICogVXBkYXRlQXBwbGljYXRpb25PQyBpbmRpY2F0ZXMgdGhhdCBhbiBhcHBsaWNhdGlvbiB0cmFuc2FjdGlvbiB3aWxsXG4gICAgICogdXBkYXRlIHRoZSBBcHByb3ZhbFByb2dyYW0gYW5kIENsZWFyU3RhdGVQcm9ncmFtIGZvciB0aGUgYXBwbGljYXRpb25cbiAgICAgKi9cbiAgICBPbkFwcGxpY2F0aW9uQ29tcGxldGVbT25BcHBsaWNhdGlvbkNvbXBsZXRlW1wiVXBkYXRlQXBwbGljYXRpb25PQ1wiXSA9IDRdID0gXCJVcGRhdGVBcHBsaWNhdGlvbk9DXCI7XG4gICAgLyoqXG4gICAgICogRGVsZXRlQXBwbGljYXRpb25PQyBpbmRpY2F0ZXMgdGhhdCBhbiBhcHBsaWNhdGlvbiB0cmFuc2FjdGlvbiB3aWxsXG4gICAgICogZGVsZXRlIHRoZSBBcHBQYXJhbXMgZm9yIHRoZSBhcHBsaWNhdGlvbiBmcm9tIHRoZSBjcmVhdG9yJ3MgYmFsYW5jZVxuICAgICAqIHJlY29yZFxuICAgICAqL1xuICAgIE9uQXBwbGljYXRpb25Db21wbGV0ZVtPbkFwcGxpY2F0aW9uQ29tcGxldGVbXCJEZWxldGVBcHBsaWNhdGlvbk9DXCJdID0gNV0gPSBcIkRlbGV0ZUFwcGxpY2F0aW9uT0NcIjtcbn0pKE9uQXBwbGljYXRpb25Db21wbGV0ZSB8fCAoT25BcHBsaWNhdGlvbkNvbXBsZXRlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwIl0sIm5hbWVzIjpbIlRyYW5zYWN0aW9uVHlwZSIsImlzVHJhbnNhY3Rpb25UeXBlIiwicyIsInBheSIsImtleXJlZyIsImFjZmciLCJheGZlciIsImFmcnoiLCJhcHBsIiwic3RwZiIsIk9uQXBwbGljYXRpb25Db21wbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/encoded.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/encoded.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Interfaces for the encoded transaction object. Every property is labelled with its associated Transaction type property\n */  //# sourceMappingURL=encoded.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvdHJhbnNhY3Rpb25zL2VuY29kZWQuanMiLCJtYXBwaW5ncyI6IjtBQUFBOztDQUVDLEdBQ1MsQ0FDVixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29zZGtAMS4yNC4xL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL3R5cGVzL3RyYW5zYWN0aW9ucy9lbmNvZGVkLmpzPzdiZjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbnRlcmZhY2VzIGZvciB0aGUgZW5jb2RlZCB0cmFuc2FjdGlvbiBvYmplY3QuIEV2ZXJ5IHByb3BlcnR5IGlzIGxhYmVsbGVkIHdpdGggaXRzIGFzc29jaWF0ZWQgVHJhbnNhY3Rpb24gdHlwZSBwcm9wZXJ0eVxuICovXG5leHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNvZGVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/encoded.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/index.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/index.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionType: () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.TransactionType)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/base.js\");\n/* harmony import */ var _encoded__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoded */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/encoded.js\");\n// Utilities\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvdHJhbnNhY3Rpb25zL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFlBQVk7QUFDOEI7QUFDaEIsQ0FDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS90eXBlcy90cmFuc2FjdGlvbnMvaW5kZXguanM/NjI2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVdGlsaXRpZXNcbmV4cG9ydCB7IFRyYW5zYWN0aW9uVHlwZSwgfSBmcm9tICcuL2Jhc2UnO1xuZXhwb3J0ICogZnJvbSAnLi9lbmNvZGVkJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJUcmFuc2FjdGlvblR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/transactions/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayEqual: () => (/* binding */ arrayEqual),\n/* harmony export */   concatArrays: () => (/* binding */ concatArrays),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   parseJSON: () => (/* binding */ parseJSON),\n/* harmony export */   removeUndefinedProperties: () => (/* binding */ removeUndefinedProperties)\n/* harmony export */ });\n/* harmony import */ var json_bigint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! json-bigint */ \"(ssr)/./node_modules/.pnpm/json-bigint@1.0.0/node_modules/json-bigint/index.js\");\n/* harmony import */ var json_bigint__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(json_bigint__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_intDecoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/intDecoding */ \"(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/types/intDecoding.js\");\n\n\nconst JSONbig = json_bigint__WEBPACK_IMPORTED_MODULE_0___default()({\n    useNativeBigInt: true,\n    strict: true\n});\n/**\n * Parse JSON with additional options.\n * @param str - The JSON string to parse.\n * @param options - Options object to configure how integers in\n *   this request's JSON response will be decoded. Use the `intDecoding`\n *   property with one of the following options:\n *\n *   * \"default\": All integers will be decoded as Numbers, meaning any values greater than\n *     Number.MAX_SAFE_INTEGER will lose precision.\n *   * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n *     Number.MAX_SAFE_INTEGER an error will be thrown.\n *   * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n *     Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n *   * \"bigint\": All integers will be decoded as BigInts.\n *\n *   Defaults to \"default\" if not included.\n */ function parseJSON(str, options) {\n    const intDecoding = options && options.intDecoding ? options.intDecoding : _types_intDecoding__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT;\n    return JSONbig.parse(str, (_, value)=>{\n        if (value != null && typeof value === \"object\" && Object.getPrototypeOf(value) == null) {\n            // JSONbig.parse objects are created with Object.create(null) and thus have a null prototype\n            // let us remedy that\n            Object.setPrototypeOf(value, Object.prototype);\n        }\n        if (typeof value === \"bigint\") {\n            if (intDecoding === \"safe\" && value > Number.MAX_SAFE_INTEGER) {\n                throw new Error(`Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`);\n            }\n            if (intDecoding === \"bigint\" || intDecoding === \"mixed\" && value > Number.MAX_SAFE_INTEGER) {\n                return value;\n            }\n            // JSONbig.parse converts number to BigInts if they are >= 10**15. This is smaller than\n            // Number.MAX_SAFE_INTEGER, so we can convert some BigInts back to normal numbers.\n            return Number(value);\n        }\n        if (typeof value === \"number\") {\n            if (intDecoding === \"bigint\" && Number.isInteger(value)) {\n                return BigInt(value);\n            }\n        }\n        return value;\n    });\n}\n/**\n * ArrayEqual takes two arrays and return true if equal, false otherwise\n */ function arrayEqual(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return Array.from(a).every((val, i)=>val === b[i]);\n}\n/**\n * ConcatArrays takes n number arrays and returns a joint Uint8Array\n * @param arrs - An arbitrary number of n array-like number list arguments\n * @returns [a,b]\n */ function concatArrays(...arrs) {\n    const size = arrs.reduce((sum, arr)=>sum + arr.length, 0);\n    const c = new Uint8Array(size);\n    let offset = 0;\n    for(let i = 0; i < arrs.length; i++){\n        c.set(arrs[i], offset);\n        offset += arrs[i].length;\n    }\n    return c;\n}\n/**\n * Remove undefined properties from an object\n * @param obj - An object, preferably one with some undefined properties\n * @returns A copy of the object with undefined properties removed\n */ function removeUndefinedProperties(obj) {\n    const mutableCopy = {\n        ...obj\n    };\n    Object.keys(mutableCopy).forEach((key)=>{\n        if (typeof mutableCopy[key] === \"undefined\") delete mutableCopy[key];\n    });\n    return mutableCopy;\n}\n/**\n * Check whether the environment is Node.js (as opposed to the browser)\n * @returns True if Node.js environment, false otherwise\n */ function isNode() {\n    return typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node !== \"undefined\";\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/utils/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/wait.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/wait.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   waitForConfirmation: () => (/* binding */ waitForConfirmation)\n/* harmony export */ });\n/**\n * Wait until a transaction has been confirmed or rejected by the network, or\n * until 'waitRounds' number of rounds have passed.\n * @param client - An Algodv2 client\n * @param txid - The ID of the transaction to wait for.\n * @param waitRounds - The maximum number of rounds to wait for.\n * @returns A promise that, upon success, will resolve to the output of the\n *   `pendingTransactionInformation` call for the confirmed transaction.\n */ async function waitForConfirmation(client, txid, waitRounds) {\n    // Wait until the transaction is confirmed or rejected, or until 'waitRounds'\n    // number of rounds have passed.\n    const status = await client.status().do();\n    if (typeof status === \"undefined\") {\n        throw new Error(\"Unable to get node status\");\n    }\n    const startRound = status[\"last-round\"] + 1;\n    let currentRound = startRound;\n    /* eslint-disable no-await-in-loop */ while(currentRound < startRound + waitRounds){\n        let poolError = false;\n        try {\n            const pendingInfo = await client.pendingTransactionInformation(txid).do();\n            if (pendingInfo[\"confirmed-round\"]) {\n                // Got the completed Transaction\n                return pendingInfo;\n            }\n            if (pendingInfo[\"pool-error\"]) {\n                // If there was a pool error, then the transaction has been rejected\n                poolError = true;\n                throw new Error(`Transaction Rejected: ${pendingInfo[\"pool-error\"]}`);\n            }\n        } catch (err) {\n            // Ignore errors from PendingTransactionInformation, since it may return 404 if the algod\n            // instance is behind a load balancer and the request goes to a different algod than the\n            // one we submitted the transaction to\n            if (poolError) {\n                // Rethrow error only if it's because the transaction was rejected\n                throw err;\n            }\n        }\n        await client.statusAfterBlock(currentRound).do();\n        currentRound += 1;\n    }\n    /* eslint-enable no-await-in-loop */ throw new Error(`Transaction not confirmed after ${waitRounds} rounds`);\n} //# sourceMappingURL=wait.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb3Nka0AxLjI0LjEvbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vd2FpdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FDTSxlQUFlQSxvQkFBb0JDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxVQUFVO0lBQzlELDZFQUE2RTtJQUM3RSxnQ0FBZ0M7SUFDaEMsTUFBTUMsU0FBUyxNQUFNSCxPQUFPRyxNQUFNLEdBQUdDLEVBQUU7SUFDdkMsSUFBSSxPQUFPRCxXQUFXLGFBQWE7UUFDL0IsTUFBTSxJQUFJRSxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUMsYUFBYUgsTUFBTSxDQUFDLGFBQWEsR0FBRztJQUMxQyxJQUFJSSxlQUFlRDtJQUNuQixtQ0FBbUMsR0FDbkMsTUFBT0MsZUFBZUQsYUFBYUosV0FBWTtRQUMzQyxJQUFJTSxZQUFZO1FBQ2hCLElBQUk7WUFDQSxNQUFNQyxjQUFjLE1BQU1ULE9BQU9VLDZCQUE2QixDQUFDVCxNQUFNRyxFQUFFO1lBQ3ZFLElBQUlLLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRTtnQkFDaEMsZ0NBQWdDO2dCQUNoQyxPQUFPQTtZQUNYO1lBQ0EsSUFBSUEsV0FBVyxDQUFDLGFBQWEsRUFBRTtnQkFDM0Isb0VBQW9FO2dCQUNwRUQsWUFBWTtnQkFDWixNQUFNLElBQUlILE1BQU0sQ0FBQyxzQkFBc0IsRUFBRUksV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3hFO1FBQ0osRUFDQSxPQUFPRSxLQUFLO1lBQ1IseUZBQXlGO1lBQ3pGLHdGQUF3RjtZQUN4RixzQ0FBc0M7WUFDdEMsSUFBSUgsV0FBVztnQkFDWCxrRUFBa0U7Z0JBQ2xFLE1BQU1HO1lBQ1Y7UUFDSjtRQUNBLE1BQU1YLE9BQU9ZLGdCQUFnQixDQUFDTCxjQUFjSCxFQUFFO1FBQzlDRyxnQkFBZ0I7SUFDcEI7SUFDQSxrQ0FBa0MsR0FDbEMsTUFBTSxJQUFJRixNQUFNLENBQUMsZ0NBQWdDLEVBQUVILFdBQVcsT0FBTyxDQUFDO0FBQzFFLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvc2RrQDEuMjQuMS9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS93YWl0LmpzPzhhZTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXYWl0IHVudGlsIGEgdHJhbnNhY3Rpb24gaGFzIGJlZW4gY29uZmlybWVkIG9yIHJlamVjdGVkIGJ5IHRoZSBuZXR3b3JrLCBvclxuICogdW50aWwgJ3dhaXRSb3VuZHMnIG51bWJlciBvZiByb3VuZHMgaGF2ZSBwYXNzZWQuXG4gKiBAcGFyYW0gY2xpZW50IC0gQW4gQWxnb2R2MiBjbGllbnRcbiAqIEBwYXJhbSB0eGlkIC0gVGhlIElEIG9mIHRoZSB0cmFuc2FjdGlvbiB0byB3YWl0IGZvci5cbiAqIEBwYXJhbSB3YWl0Um91bmRzIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHJvdW5kcyB0byB3YWl0IGZvci5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0LCB1cG9uIHN1Y2Nlc3MsIHdpbGwgcmVzb2x2ZSB0byB0aGUgb3V0cHV0IG9mIHRoZVxuICogICBgcGVuZGluZ1RyYW5zYWN0aW9uSW5mb3JtYXRpb25gIGNhbGwgZm9yIHRoZSBjb25maXJtZWQgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yQ29uZmlybWF0aW9uKGNsaWVudCwgdHhpZCwgd2FpdFJvdW5kcykge1xuICAgIC8vIFdhaXQgdW50aWwgdGhlIHRyYW5zYWN0aW9uIGlzIGNvbmZpcm1lZCBvciByZWplY3RlZCwgb3IgdW50aWwgJ3dhaXRSb3VuZHMnXG4gICAgLy8gbnVtYmVyIG9mIHJvdW5kcyBoYXZlIHBhc3NlZC5cbiAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBjbGllbnQuc3RhdHVzKCkuZG8oKTtcbiAgICBpZiAodHlwZW9mIHN0YXR1cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZ2V0IG5vZGUgc3RhdHVzJyk7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0Um91bmQgPSBzdGF0dXNbJ2xhc3Qtcm91bmQnXSArIDE7XG4gICAgbGV0IGN1cnJlbnRSb3VuZCA9IHN0YXJ0Um91bmQ7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tYXdhaXQtaW4tbG9vcCAqL1xuICAgIHdoaWxlIChjdXJyZW50Um91bmQgPCBzdGFydFJvdW5kICsgd2FpdFJvdW5kcykge1xuICAgICAgICBsZXQgcG9vbEVycm9yID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwZW5kaW5nSW5mbyA9IGF3YWl0IGNsaWVudC5wZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbih0eGlkKS5kbygpO1xuICAgICAgICAgICAgaWYgKHBlbmRpbmdJbmZvWydjb25maXJtZWQtcm91bmQnXSkge1xuICAgICAgICAgICAgICAgIC8vIEdvdCB0aGUgY29tcGxldGVkIFRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBlbmRpbmdJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBlbmRpbmdJbmZvWydwb29sLWVycm9yJ10pIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYSBwb29sIGVycm9yLCB0aGVuIHRoZSB0cmFuc2FjdGlvbiBoYXMgYmVlbiByZWplY3RlZFxuICAgICAgICAgICAgICAgIHBvb2xFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiBSZWplY3RlZDogJHtwZW5kaW5nSW5mb1sncG9vbC1lcnJvciddfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBlcnJvcnMgZnJvbSBQZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbiwgc2luY2UgaXQgbWF5IHJldHVybiA0MDQgaWYgdGhlIGFsZ29kXG4gICAgICAgICAgICAvLyBpbnN0YW5jZSBpcyBiZWhpbmQgYSBsb2FkIGJhbGFuY2VyIGFuZCB0aGUgcmVxdWVzdCBnb2VzIHRvIGEgZGlmZmVyZW50IGFsZ29kIHRoYW4gdGhlXG4gICAgICAgICAgICAvLyBvbmUgd2Ugc3VibWl0dGVkIHRoZSB0cmFuc2FjdGlvbiB0b1xuICAgICAgICAgICAgaWYgKHBvb2xFcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIFJldGhyb3cgZXJyb3Igb25seSBpZiBpdCdzIGJlY2F1c2UgdGhlIHRyYW5zYWN0aW9uIHdhcyByZWplY3RlZFxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBjbGllbnQuc3RhdHVzQWZ0ZXJCbG9jayhjdXJyZW50Um91bmQpLmRvKCk7XG4gICAgICAgIGN1cnJlbnRSb3VuZCArPSAxO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYW5zYWN0aW9uIG5vdCBjb25maXJtZWQgYWZ0ZXIgJHt3YWl0Um91bmRzfSByb3VuZHNgKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhaXQuanMubWFwIl0sIm5hbWVzIjpbIndhaXRGb3JDb25maXJtYXRpb24iLCJjbGllbnQiLCJ0eGlkIiwid2FpdFJvdW5kcyIsInN0YXR1cyIsImRvIiwiRXJyb3IiLCJzdGFydFJvdW5kIiwiY3VycmVudFJvdW5kIiwicG9vbEVycm9yIiwicGVuZGluZ0luZm8iLCJwZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbiIsImVyciIsInN0YXR1c0FmdGVyQmxvY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/wait.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/langspec.json":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/algosdk@1.24.1/node_modules/algosdk/dist/esm/logic/langspec.json ***!
  \*********************************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"EvalMaxVersion":6,"LogicSigVersion":5,"Ops":[{"Opcode":0,"Name":"err","Cost":1,"Size":1,"Doc":"Fail immediately.","Groups":["Flow Control"]},{"Opcode":1,"Name":"sha256","Args":"B","Returns":"B","Cost":35,"Size":1,"Doc":"SHA256 hash of value A, yields [32]byte","Groups":["Arithmetic"]},{"Opcode":2,"Name":"keccak256","Args":"B","Returns":"B","Cost":130,"Size":1,"Doc":"Keccak256 hash of value A, yields [32]byte","Groups":["Arithmetic"]},{"Opcode":3,"Name":"sha512_256","Args":"B","Returns":"B","Cost":45,"Size":1,"Doc":"SHA512_256 hash of value A, yields [32]byte","Groups":["Arithmetic"]},{"Opcode":4,"Name":"ed25519verify","Args":"BBB","Returns":"U","Cost":1900,"Size":1,"Doc":"for (data A, signature B, pubkey C) verify the signature of (\\"ProgData\\" || program_hash || data) against the pubkey => {0 or 1}","DocExtra":"The 32 byte public key is the last element on the stack, preceded by the 64 byte signature at the second-to-last element on the stack, preceded by the data which was signed at the third-to-last element on the stack.","Groups":["Arithmetic"]},{"Opcode":5,"Name":"ecdsa_verify","Args":"BBBBB","Returns":"U","Cost":1700,"Size":2,"Doc":"for (data A, signature B, C and pubkey D, E) verify the signature of the data against the pubkey => {0 or 1}","DocExtra":"The 32 byte Y-component of a public key is the last element on the stack, preceded by X-component of a pubkey, preceded by S and R components of a signature, preceded by the data that is fifth element on the stack. All values are big-endian encoded. The signed data must be 32 bytes long, and signatures in lower-S form are only accepted.","ImmediateNote":"{uint8 curve index}","Groups":["Arithmetic"]},{"Opcode":6,"Name":"ecdsa_pk_decompress","Args":"B","Returns":"BB","Cost":650,"Size":2,"Doc":"decompress pubkey A into components X, Y","DocExtra":"The 33 byte public key in a compressed form to be decompressed into X and Y (top) components. All values are big-endian encoded.","ImmediateNote":"{uint8 curve index}","Groups":["Arithmetic"]},{"Opcode":7,"Name":"ecdsa_pk_recover","Args":"BUBB","Returns":"BB","Cost":2000,"Size":2,"Doc":"for (data A, recovery id B, signature C, D) recover a public key","DocExtra":"S (top) and R elements of a signature, recovery id and data (bottom) are expected on the stack and used to deriver a public key. All values are big-endian encoded. The signed data must be 32 bytes long.","ImmediateNote":"{uint8 curve index}","Groups":["Arithmetic"]},{"Opcode":8,"Name":"+","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A plus B. Fail on overflow.","DocExtra":"Overflow is an error condition which halts execution and fails the transaction. Full precision is available from `addw`.","Groups":["Arithmetic"]},{"Opcode":9,"Name":"-","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A minus B. Fail if B > A.","Groups":["Arithmetic"]},{"Opcode":10,"Name":"/","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A divided by B (truncated division). Fail if B == 0.","DocExtra":"`divmodw` is available to divide the two-element values produced by `mulw` and `addw`.","Groups":["Arithmetic"]},{"Opcode":11,"Name":"*","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A times B. Fail on overflow.","DocExtra":"Overflow is an error condition which halts execution and fails the transaction. Full precision is available from `mulw`.","Groups":["Arithmetic"]},{"Opcode":12,"Name":"<","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A less than B => {0 or 1}","Groups":["Arithmetic"]},{"Opcode":13,"Name":">","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A greater than B => {0 or 1}","Groups":["Arithmetic"]},{"Opcode":14,"Name":"<=","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A less than or equal to B => {0 or 1}","Groups":["Arithmetic"]},{"Opcode":15,"Name":">=","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A greater than or equal to B => {0 or 1}","Groups":["Arithmetic"]},{"Opcode":16,"Name":"&&","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A is not zero and B is not zero => {0 or 1}","Groups":["Arithmetic"]},{"Opcode":17,"Name":"||","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A is not zero or B is not zero => {0 or 1}","Groups":["Arithmetic"]},{"Opcode":18,"Name":"==","Args":"..","Returns":"U","Cost":1,"Size":1,"Doc":"A is equal to B => {0 or 1}","Groups":["Arithmetic"]},{"Opcode":19,"Name":"!=","Args":"..","Returns":"U","Cost":1,"Size":1,"Doc":"A is not equal to B => {0 or 1}","Groups":["Arithmetic"]},{"Opcode":20,"Name":"!","Args":"U","Returns":"U","Cost":1,"Size":1,"Doc":"A == 0 yields 1; else 0","Groups":["Arithmetic"]},{"Opcode":21,"Name":"len","Args":"B","Returns":"U","Cost":1,"Size":1,"Doc":"yields length of byte value A","Groups":["Arithmetic"]},{"Opcode":22,"Name":"itob","Args":"U","Returns":"B","Cost":1,"Size":1,"Doc":"converts uint64 A to big endian bytes","Groups":["Arithmetic"]},{"Opcode":23,"Name":"btoi","Args":"B","Returns":"U","Cost":1,"Size":1,"Doc":"converts bytes A as big endian to uint64","DocExtra":"`btoi` fails if the input is longer than 8 bytes.","Groups":["Arithmetic"]},{"Opcode":24,"Name":"%","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A modulo B. Fail if B == 0.","Groups":["Arithmetic"]},{"Opcode":25,"Name":"|","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A bitwise-or B","Groups":["Arithmetic"]},{"Opcode":26,"Name":"&","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A bitwise-and B","Groups":["Arithmetic"]},{"Opcode":27,"Name":"^","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A bitwise-xor B","Groups":["Arithmetic"]},{"Opcode":28,"Name":"~","Args":"U","Returns":"U","Cost":1,"Size":1,"Doc":"bitwise invert value A","Groups":["Arithmetic"]},{"Opcode":29,"Name":"mulw","Args":"UU","Returns":"UU","Cost":1,"Size":1,"Doc":"A times B as a 128-bit result in two uint64s. X is the high 64 bits, Y is the low","Groups":["Arithmetic"]},{"Opcode":30,"Name":"addw","Args":"UU","Returns":"UU","Cost":1,"Size":1,"Doc":"A plus B as a 128-bit result. X is the carry-bit, Y is the low-order 64 bits.","Groups":["Arithmetic"]},{"Opcode":31,"Name":"divmodw","Args":"UUUU","Returns":"UUUU","Cost":20,"Size":1,"Doc":"W,X = (A,B / C,D); Y,Z = (A,B modulo C,D)","DocExtra":"The notation J,K indicates that two uint64 values J and K are interpreted as a uint128 value, with J as the high uint64 and K the low.","Groups":["Arithmetic"]},{"Opcode":32,"Name":"intcblock","Cost":1,"Size":0,"Doc":"prepare block of uint64 constants for use by intc","DocExtra":"`intcblock` loads following program bytes into an array of integer constants in the evaluator. These integer constants can be referred to by `intc` and `intc_*` which will push the value onto the stack. Subsequent calls to `intcblock` reset and replace the integer constants available to the script.","ImmediateNote":"{varuint length} [{varuint value}, ...]","Groups":["Loading Values"]},{"Opcode":33,"Name":"intc","Returns":"U","Cost":1,"Size":2,"Doc":"Ith constant from intcblock","ImmediateNote":"{uint8 int constant index}","Groups":["Loading Values"]},{"Opcode":34,"Name":"intc_0","Returns":"U","Cost":1,"Size":1,"Doc":"constant 0 from intcblock","Groups":["Loading Values"]},{"Opcode":35,"Name":"intc_1","Returns":"U","Cost":1,"Size":1,"Doc":"constant 1 from intcblock","Groups":["Loading Values"]},{"Opcode":36,"Name":"intc_2","Returns":"U","Cost":1,"Size":1,"Doc":"constant 2 from intcblock","Groups":["Loading Values"]},{"Opcode":37,"Name":"intc_3","Returns":"U","Cost":1,"Size":1,"Doc":"constant 3 from intcblock","Groups":["Loading Values"]},{"Opcode":38,"Name":"bytecblock","Cost":1,"Size":0,"Doc":"prepare block of byte-array constants for use by bytec","DocExtra":"`bytecblock` loads the following program bytes into an array of byte-array constants in the evaluator. These constants can be referred to by `bytec` and `bytec_*` which will push the value onto the stack. Subsequent calls to `bytecblock` reset and replace the bytes constants available to the script.","ImmediateNote":"{varuint length} [({varuint value length} bytes), ...]","Groups":["Loading Values"]},{"Opcode":39,"Name":"bytec","Returns":"B","Cost":1,"Size":2,"Doc":"Ith constant from bytecblock","ImmediateNote":"{uint8 byte constant index}","Groups":["Loading Values"]},{"Opcode":40,"Name":"bytec_0","Returns":"B","Cost":1,"Size":1,"Doc":"constant 0 from bytecblock","Groups":["Loading Values"]},{"Opcode":41,"Name":"bytec_1","Returns":"B","Cost":1,"Size":1,"Doc":"constant 1 from bytecblock","Groups":["Loading Values"]},{"Opcode":42,"Name":"bytec_2","Returns":"B","Cost":1,"Size":1,"Doc":"constant 2 from bytecblock","Groups":["Loading Values"]},{"Opcode":43,"Name":"bytec_3","Returns":"B","Cost":1,"Size":1,"Doc":"constant 3 from bytecblock","Groups":["Loading Values"]},{"Opcode":44,"Name":"arg","Returns":"B","Cost":1,"Size":2,"Doc":"Nth LogicSig argument","ImmediateNote":"{uint8 arg index N}","Groups":["Loading Values"]},{"Opcode":45,"Name":"arg_0","Returns":"B","Cost":1,"Size":1,"Doc":"LogicSig argument 0","Groups":["Loading Values"]},{"Opcode":46,"Name":"arg_1","Returns":"B","Cost":1,"Size":1,"Doc":"LogicSig argument 1","Groups":["Loading Values"]},{"Opcode":47,"Name":"arg_2","Returns":"B","Cost":1,"Size":1,"Doc":"LogicSig argument 2","Groups":["Loading Values"]},{"Opcode":48,"Name":"arg_3","Returns":"B","Cost":1,"Size":1,"Doc":"LogicSig argument 3","Groups":["Loading Values"]},{"Opcode":49,"Name":"txn","Returns":".","Cost":1,"Size":2,"ArgEnum":["Sender","Fee","FirstValid","FirstValidTime","LastValid","Note","Lease","Receiver","Amount","CloseRemainderTo","VotePK","SelectionPK","VoteFirst","VoteLast","VoteKeyDilution","Type","TypeEnum","XferAsset","AssetAmount","AssetSender","AssetReceiver","AssetCloseTo","GroupIndex","TxID","ApplicationID","OnCompletion","ApplicationArgs","NumAppArgs","Accounts","NumAccounts","ApprovalProgram","ClearStateProgram","RekeyTo","ConfigAsset","ConfigAssetTotal","ConfigAssetDecimals","ConfigAssetDefaultFrozen","ConfigAssetUnitName","ConfigAssetName","ConfigAssetURL","ConfigAssetMetadataHash","ConfigAssetManager","ConfigAssetReserve","ConfigAssetFreeze","ConfigAssetClawback","FreezeAsset","FreezeAssetAccount","FreezeAssetFrozen","Assets","NumAssets","Applications","NumApplications","GlobalNumUint","GlobalNumByteSlice","LocalNumUint","LocalNumByteSlice","ExtraProgramPages","Nonparticipation","Logs","NumLogs","CreatedAssetID","CreatedApplicationID","LastLog","StateProofPK"],"ArgEnumTypes":"BUUUUBBBUBBBUUUBUUUBBBUBUUBUBUBBBUUUUBBBBBBBBUBUUUUUUUUUUUBUUUBB","Doc":"field F of current transaction","DocExtra":"FirstValidTime causes the program to fail. The field is reserved for future use.","ImmediateNote":"{uint8 transaction field index}","Groups":["Loading Values"]},{"Opcode":50,"Name":"global","Returns":".","Cost":1,"Size":2,"Doc":"global field F","ImmediateNote":"{uint8 global field index}","Groups":["Loading Values"]},{"Opcode":51,"Name":"gtxn","Returns":".","Cost":1,"Size":3,"ArgEnum":["Sender","Fee","FirstValid","FirstValidTime","LastValid","Note","Lease","Receiver","Amount","CloseRemainderTo","VotePK","SelectionPK","VoteFirst","VoteLast","VoteKeyDilution","Type","TypeEnum","XferAsset","AssetAmount","AssetSender","AssetReceiver","AssetCloseTo","GroupIndex","TxID","ApplicationID","OnCompletion","ApplicationArgs","NumAppArgs","Accounts","NumAccounts","ApprovalProgram","ClearStateProgram","RekeyTo","ConfigAsset","ConfigAssetTotal","ConfigAssetDecimals","ConfigAssetDefaultFrozen","ConfigAssetUnitName","ConfigAssetName","ConfigAssetURL","ConfigAssetMetadataHash","ConfigAssetManager","ConfigAssetReserve","ConfigAssetFreeze","ConfigAssetClawback","FreezeAsset","FreezeAssetAccount","FreezeAssetFrozen","Assets","NumAssets","Applications","NumApplications","GlobalNumUint","GlobalNumByteSlice","LocalNumUint","LocalNumByteSlice","ExtraProgramPages","Nonparticipation","Logs","NumLogs","CreatedAssetID","CreatedApplicationID","LastLog","StateProofPK"],"ArgEnumTypes":"BUUUUBBBUBBBUUUBUUUBBBUBUUBUBUBBBUUUUBBBBBBBBUBUUUUUUUUUUUBUUUBB","Doc":"field F of the Tth transaction in the current group","DocExtra":"for notes on transaction fields available, see `txn`. If this transaction is _i_ in the group, `gtxn i field` is equivalent to `txn field`.","ImmediateNote":"{uint8 transaction group index} {uint8 transaction field index}","Groups":["Loading Values"]},{"Opcode":52,"Name":"load","Returns":".","Cost":1,"Size":2,"Doc":"Ith scratch space value. All scratch spaces are 0 at program start.","ImmediateNote":"{uint8 position in scratch space to load from}","Groups":["Loading Values"]},{"Opcode":53,"Name":"store","Args":".","Cost":1,"Size":2,"Doc":"store A to the Ith scratch space","ImmediateNote":"{uint8 position in scratch space to store to}","Groups":["Loading Values"]},{"Opcode":54,"Name":"txna","Returns":".","Cost":1,"Size":3,"ArgEnum":["ApplicationArgs","Accounts","Assets","Applications","Logs"],"ArgEnumTypes":"BBUUB","Doc":"Ith value of the array field F of the current transaction","ImmediateNote":"{uint8 transaction field index} {uint8 transaction field array index}","Groups":["Loading Values"]},{"Opcode":55,"Name":"gtxna","Returns":".","Cost":1,"Size":4,"ArgEnum":["ApplicationArgs","Accounts","Assets","Applications","Logs"],"ArgEnumTypes":"BBUUB","Doc":"Ith value of the array field F from the Tth transaction in the current group","ImmediateNote":"{uint8 transaction group index} {uint8 transaction field index} {uint8 transaction field array index}","Groups":["Loading Values"]},{"Opcode":56,"Name":"gtxns","Args":"U","Returns":".","Cost":1,"Size":2,"ArgEnum":["Sender","Fee","FirstValid","FirstValidTime","LastValid","Note","Lease","Receiver","Amount","CloseRemainderTo","VotePK","SelectionPK","VoteFirst","VoteLast","VoteKeyDilution","Type","TypeEnum","XferAsset","AssetAmount","AssetSender","AssetReceiver","AssetCloseTo","GroupIndex","TxID","ApplicationID","OnCompletion","ApplicationArgs","NumAppArgs","Accounts","NumAccounts","ApprovalProgram","ClearStateProgram","RekeyTo","ConfigAsset","ConfigAssetTotal","ConfigAssetDecimals","ConfigAssetDefaultFrozen","ConfigAssetUnitName","ConfigAssetName","ConfigAssetURL","ConfigAssetMetadataHash","ConfigAssetManager","ConfigAssetReserve","ConfigAssetFreeze","ConfigAssetClawback","FreezeAsset","FreezeAssetAccount","FreezeAssetFrozen","Assets","NumAssets","Applications","NumApplications","GlobalNumUint","GlobalNumByteSlice","LocalNumUint","LocalNumByteSlice","ExtraProgramPages","Nonparticipation","Logs","NumLogs","CreatedAssetID","CreatedApplicationID","LastLog","StateProofPK"],"ArgEnumTypes":"BUUUUBBBUBBBUUUBUUUBBBUBUUBUBUBBBUUUUBBBBBBBBUBUUUUUUUUUUUBUUUBB","Doc":"field F of the Ath transaction in the current group","DocExtra":"for notes on transaction fields available, see `txn`. If top of stack is _i_, `gtxns field` is equivalent to `gtxn _i_ field`. gtxns exists so that _i_ can be calculated, often based on the index of the current transaction.","ImmediateNote":"{uint8 transaction field index}","Groups":["Loading Values"]},{"Opcode":57,"Name":"gtxnsa","Args":"U","Returns":".","Cost":1,"Size":3,"ArgEnum":["ApplicationArgs","Accounts","Assets","Applications","Logs"],"ArgEnumTypes":"BBUUB","Doc":"Ith value of the array field F from the Ath transaction in the current group","ImmediateNote":"{uint8 transaction field index} {uint8 transaction field array index}","Groups":["Loading Values"]},{"Opcode":58,"Name":"gload","Returns":".","Cost":1,"Size":3,"Doc":"Ith scratch space value of the Tth transaction in the current group","DocExtra":"`gload` fails unless the requested transaction is an ApplicationCall and T < GroupIndex.","ImmediateNote":"{uint8 transaction group index} {uint8 position in scratch space to load from}","Groups":["Loading Values"]},{"Opcode":59,"Name":"gloads","Args":"U","Returns":".","Cost":1,"Size":2,"Doc":"Ith scratch space value of the Ath transaction in the current group","DocExtra":"`gloads` fails unless the requested transaction is an ApplicationCall and A < GroupIndex.","ImmediateNote":"{uint8 position in scratch space to load from}","Groups":["Loading Values"]},{"Opcode":60,"Name":"gaid","Returns":"U","Cost":1,"Size":2,"Doc":"ID of the asset or application created in the Tth transaction of the current group","DocExtra":"`gaid` fails unless the requested transaction created an asset or application and T < GroupIndex.","ImmediateNote":"{uint8 transaction group index}","Groups":["Loading Values"]},{"Opcode":61,"Name":"gaids","Args":"U","Returns":"U","Cost":1,"Size":1,"Doc":"ID of the asset or application created in the Ath transaction of the current group","DocExtra":"`gaids` fails unless the requested transaction created an asset or application and A < GroupIndex.","Groups":["Loading Values"]},{"Opcode":62,"Name":"loads","Args":"U","Returns":".","Cost":1,"Size":1,"Doc":"Ath scratch space value.  All scratch spaces are 0 at program start.","Groups":["Loading Values"]},{"Opcode":63,"Name":"stores","Args":"U.","Cost":1,"Size":1,"Doc":"store B to the Ath scratch space","Groups":["Loading Values"]},{"Opcode":64,"Name":"bnz","Args":"U","Cost":1,"Size":3,"Doc":"branch to TARGET if value A is not zero","DocExtra":"The `bnz` instruction opcode 0x40 is followed by two immediate data bytes which are a high byte first and low byte second which together form a 16 bit offset which the instruction may branch to. For a bnz instruction at `pc`, if the last element of the stack is not zero then branch to instruction at `pc + 3 + N`, else proceed to next instruction at `pc + 3`. Branch targets must be aligned instructions. (e.g. Branching to the second byte of a 2 byte op will be rejected.) Starting at v4, the offset is treated as a signed 16 bit integer allowing for backward branches and looping. In prior version (v1 to v3), branch offsets are limited to forward branches only, 0-0x7fff.\\n\\nAt v2 it became allowed to branch to the end of the program exactly after the last instruction: bnz to byte N (with 0-indexing) was illegal for a TEAL program with N bytes before v2, and is legal after it. This change eliminates the need for a last instruction of no-op as a branch target at the end. (Branching beyond the end--in other words, to a byte larger than N--is still illegal and will cause the program to fail.)","ImmediateNote":"{int16 branch offset, big endian}","Groups":["Flow Control"]},{"Opcode":65,"Name":"bz","Args":"U","Cost":1,"Size":3,"Doc":"branch to TARGET if value A is zero","DocExtra":"See `bnz` for details on how branches work. `bz` inverts the behavior of `bnz`.","ImmediateNote":"{int16 branch offset, big endian}","Groups":["Flow Control"]},{"Opcode":66,"Name":"b","Cost":1,"Size":3,"Doc":"branch unconditionally to TARGET","DocExtra":"See `bnz` for details on how branches work. `b` always jumps to the offset.","ImmediateNote":"{int16 branch offset, big endian}","Groups":["Flow Control"]},{"Opcode":67,"Name":"return","Args":"U","Cost":1,"Size":1,"Doc":"use A as success value; end","Groups":["Flow Control"]},{"Opcode":68,"Name":"assert","Args":"U","Cost":1,"Size":1,"Doc":"immediately fail unless A is a non-zero number","Groups":["Flow Control"]},{"Opcode":72,"Name":"pop","Args":".","Cost":1,"Size":1,"Doc":"discard A","Groups":["Flow Control"]},{"Opcode":73,"Name":"dup","Args":".","Returns":"..","Cost":1,"Size":1,"Doc":"duplicate A","Groups":["Flow Control"]},{"Opcode":74,"Name":"dup2","Args":"..","Returns":"....","Cost":1,"Size":1,"Doc":"duplicate A and B","Groups":["Flow Control"]},{"Opcode":75,"Name":"dig","Args":".","Returns":"..","Cost":1,"Size":2,"Doc":"Nth value from the top of the stack. dig 0 is equivalent to dup","ImmediateNote":"{uint8 depth}","Groups":["Flow Control"]},{"Opcode":76,"Name":"swap","Args":"..","Returns":"..","Cost":1,"Size":1,"Doc":"swaps A and B on stack","Groups":["Flow Control"]},{"Opcode":77,"Name":"select","Args":"..U","Returns":".","Cost":1,"Size":1,"Doc":"selects one of two values based on top-of-stack: B if C != 0, else A","Groups":["Flow Control"]},{"Opcode":78,"Name":"cover","Args":".","Returns":".","Cost":1,"Size":2,"Doc":"remove top of stack, and place it deeper in the stack such that N elements are above it. Fails if stack depth <= N.","ImmediateNote":"{uint8 depth}","Groups":["Flow Control"]},{"Opcode":79,"Name":"uncover","Args":".","Returns":".","Cost":1,"Size":2,"Doc":"remove the value at depth N in the stack and shift above items down so the Nth deep value is on top of the stack. Fails if stack depth <= N.","ImmediateNote":"{uint8 depth}","Groups":["Flow Control"]},{"Opcode":80,"Name":"concat","Args":"BB","Returns":"B","Cost":1,"Size":1,"Doc":"join A and B","DocExtra":"`concat` fails if the result would be greater than 4096 bytes.","Groups":["Arithmetic"]},{"Opcode":81,"Name":"substring","Args":"B","Returns":"B","Cost":1,"Size":3,"Doc":"A range of bytes from A starting at S up to but not including E. If E < S, or either is larger than the array length, the program fails","ImmediateNote":"{uint8 start position} {uint8 end position}","Groups":["Byte Array Manipulation"]},{"Opcode":82,"Name":"substring3","Args":"BUU","Returns":"B","Cost":1,"Size":1,"Doc":"A range of bytes from A starting at B up to but not including C. If C < B, or either is larger than the array length, the program fails","Groups":["Byte Array Manipulation"]},{"Opcode":83,"Name":"getbit","Args":".U","Returns":"U","Cost":1,"Size":1,"Doc":"Bth bit of (byte-array or integer) A.","DocExtra":"see explanation of bit ordering in setbit","Groups":["Arithmetic"]},{"Opcode":84,"Name":"setbit","Args":".UU","Returns":".","Cost":1,"Size":1,"Doc":"Copy of (byte-array or integer) A, with the Bth bit set to (0 or 1) C","DocExtra":"When A is a uint64, index 0 is the least significant bit. Setting bit 3 to 1 on the integer 0 yields 8, or 2^3. When A is a byte array, index 0 is the leftmost bit of the leftmost byte. Setting bits 0 through 11 to 1 in a 4-byte-array of 0s yields the byte array 0xfff00000. Setting bit 3 to 1 on the 1-byte-array 0x00 yields the byte array 0x10.","Groups":["Arithmetic"]},{"Opcode":85,"Name":"getbyte","Args":"BU","Returns":"U","Cost":1,"Size":1,"Doc":"Bth byte of A, as an integer","Groups":["Arithmetic"]},{"Opcode":86,"Name":"setbyte","Args":"BUU","Returns":"B","Cost":1,"Size":1,"Doc":"Copy of A with the Bth byte set to small integer (between 0..255) C","Groups":["Arithmetic"]},{"Opcode":87,"Name":"extract","Args":"B","Returns":"B","Cost":1,"Size":3,"Doc":"A range of bytes from A starting at S up to but not including S+L. If L is 0, then extract to the end of the string. If S or S+L is larger than the array length, the program fails","ImmediateNote":"{uint8 start position} {uint8 length}","Groups":["Byte Array Manipulation"]},{"Opcode":88,"Name":"extract3","Args":"BUU","Returns":"B","Cost":1,"Size":1,"Doc":"A range of bytes from A starting at B up to but not including B+C. If B+C is larger than the array length, the program fails","Groups":["Byte Array Manipulation"]},{"Opcode":89,"Name":"extract_uint16","Args":"BU","Returns":"U","Cost":1,"Size":1,"Doc":"A uint16 formed from a range of big-endian bytes from A starting at B up to but not including B+2. If B+2 is larger than the array length, the program fails","Groups":["Byte Array Manipulation"]},{"Opcode":90,"Name":"extract_uint32","Args":"BU","Returns":"U","Cost":1,"Size":1,"Doc":"A uint32 formed from a range of big-endian bytes from A starting at B up to but not including B+4. If B+4 is larger than the array length, the program fails","Groups":["Byte Array Manipulation"]},{"Opcode":91,"Name":"extract_uint64","Args":"BU","Returns":"U","Cost":1,"Size":1,"Doc":"A uint64 formed from a range of big-endian bytes from A starting at B up to but not including B+8. If B+8 is larger than the array length, the program fails","Groups":["Byte Array Manipulation"]},{"Opcode":96,"Name":"balance","Args":".","Returns":"U","Cost":1,"Size":1,"Doc":"get balance for account A, in microalgos. The balance is observed after the effects of previous transactions in the group, and after the fee for the current transaction is deducted.","DocExtra":"params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset). Return: value.","Groups":["State Access"]},{"Opcode":97,"Name":"app_opted_in","Args":".U","Returns":"U","Cost":1,"Size":1,"Doc":"1 if account A is opted in to application B, else 0","DocExtra":"params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset). Return: 1 if opted in and 0 otherwise.","Groups":["State Access"]},{"Opcode":98,"Name":"app_local_get","Args":".B","Returns":".","Cost":1,"Size":1,"Doc":"local state of the key B in the current application in account A","DocExtra":"params: Txn.Accounts offset (or, since v4, an _available_ account address), state key. Return: value. The value is zero (of type uint64) if the key does not exist.","Groups":["State Access"]},{"Opcode":99,"Name":"app_local_get_ex","Args":".UB","Returns":".U","Cost":1,"Size":1,"Doc":"X is the local state of application B, key C in account A. Y is 1 if key existed, else 0","DocExtra":"params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset), state key. Return: did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist.","Groups":["State Access"]},{"Opcode":100,"Name":"app_global_get","Args":"B","Returns":".","Cost":1,"Size":1,"Doc":"global state of the key A in the current application","DocExtra":"params: state key. Return: value. The value is zero (of type uint64) if the key does not exist.","Groups":["State Access"]},{"Opcode":101,"Name":"app_global_get_ex","Args":"UB","Returns":".U","Cost":1,"Size":1,"Doc":"X is the global state of application A, key B. Y is 1 if key existed, else 0","DocExtra":"params: Txn.ForeignApps offset (or, since v4, an _available_ application id), state key. Return: did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist.","Groups":["State Access"]},{"Opcode":102,"Name":"app_local_put","Args":".B.","Cost":1,"Size":1,"Doc":"write C to key B in account A\'s local state of the current application","DocExtra":"params: Txn.Accounts offset (or, since v4, an _available_ account address), state key, value.","Groups":["State Access"]},{"Opcode":103,"Name":"app_global_put","Args":"B.","Cost":1,"Size":1,"Doc":"write B to key A in the global state of the current application","Groups":["State Access"]},{"Opcode":104,"Name":"app_local_del","Args":".B","Cost":1,"Size":1,"Doc":"delete key B from account A\'s local state of the current application","DocExtra":"params: Txn.Accounts offset (or, since v4, an _available_ account address), state key.\\n\\nDeleting a key which is already absent has no effect on the application local state. (In particular, it does _not_ cause the program to fail.)","Groups":["State Access"]},{"Opcode":105,"Name":"app_global_del","Args":"B","Cost":1,"Size":1,"Doc":"delete key A from the global state of the current application","DocExtra":"params: state key.\\n\\nDeleting a key which is already absent has no effect on the application global state. (In particular, it does _not_ cause the program to fail.)","Groups":["State Access"]},{"Opcode":112,"Name":"asset_holding_get","Args":".U","Returns":".U","Cost":1,"Size":2,"ArgEnum":["AssetBalance","AssetFrozen"],"ArgEnumTypes":"UU","Doc":"X is field F from account A\'s holding of asset B. Y is 1 if A is opted into B, else 0","DocExtra":"params: Txn.Accounts offset (or, since v4, an _available_ address), asset id (or, since v4, a Txn.ForeignAssets offset). Return: did_exist flag (1 if the asset existed and 0 otherwise), value.","ImmediateNote":"{uint8 asset holding field index}","Groups":["State Access"]},{"Opcode":113,"Name":"asset_params_get","Args":"U","Returns":".U","Cost":1,"Size":2,"ArgEnum":["AssetTotal","AssetDecimals","AssetDefaultFrozen","AssetUnitName","AssetName","AssetURL","AssetMetadataHash","AssetManager","AssetReserve","AssetFreeze","AssetClawback","AssetCreator"],"ArgEnumTypes":"UUUBBBBBBBBB","Doc":"X is field F from asset A. Y is 1 if A exists, else 0","DocExtra":"params: Txn.ForeignAssets offset (or, since v4, an _available_ asset id. Return: did_exist flag (1 if the asset existed and 0 otherwise), value.","ImmediateNote":"{uint8 asset params field index}","Groups":["State Access"]},{"Opcode":114,"Name":"app_params_get","Args":"U","Returns":".U","Cost":1,"Size":2,"ArgEnum":["AppApprovalProgram","AppClearStateProgram","AppGlobalNumUint","AppGlobalNumByteSlice","AppLocalNumUint","AppLocalNumByteSlice","AppExtraProgramPages","AppCreator","AppAddress"],"ArgEnumTypes":"BBUUUUUBB","Doc":"X is field F from app A. Y is 1 if A exists, else 0","DocExtra":"params: Txn.ForeignApps offset or an _available_ app id. Return: did_exist flag (1 if the application existed and 0 otherwise), value.","ImmediateNote":"{uint8 app params field index}","Groups":["State Access"]},{"Opcode":115,"Name":"acct_params_get","Args":".","Returns":".U","Cost":1,"Size":2,"Doc":"X is field F from account A. Y is 1 if A owns positive algos, else 0","ImmediateNote":"{uint8 account params field index}","Groups":["State Access"]},{"Opcode":120,"Name":"min_balance","Args":".","Returns":"U","Cost":1,"Size":1,"Doc":"get minimum required balance for account A, in microalgos. Required balance is affected by [ASA](https://developer.algorand.org/docs/features/asa/#assets-overview) and [App](https://developer.algorand.org/docs/features/asc1/stateful/#minimum-balance-requirement-for-a-smart-contract) usage. When creating or opting into an app, the minimum balance grows before the app code runs, therefore the increase is visible there. When deleting or closing out, the minimum balance decreases after the app executes.","DocExtra":"params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset). Return: value.","Groups":["State Access"]},{"Opcode":128,"Name":"pushbytes","Returns":"B","Cost":1,"Size":0,"Doc":"immediate BYTES","DocExtra":"pushbytes args are not added to the bytecblock during assembly processes","ImmediateNote":"{varuint length} {bytes}","Groups":["Loading Values"]},{"Opcode":129,"Name":"pushint","Returns":"U","Cost":1,"Size":0,"Doc":"immediate UINT","DocExtra":"pushint args are not added to the intcblock during assembly processes","ImmediateNote":"{varuint int}","Groups":["Loading Values"]},{"Opcode":136,"Name":"callsub","Cost":1,"Size":3,"Doc":"branch unconditionally to TARGET, saving the next instruction on the call stack","DocExtra":"The call stack is separate from the data stack. Only `callsub` and `retsub` manipulate it.","ImmediateNote":"{int16 branch offset, big endian}","Groups":["Flow Control"]},{"Opcode":137,"Name":"retsub","Cost":1,"Size":1,"Doc":"pop the top instruction from the call stack and branch to it","DocExtra":"The call stack is separate from the data stack. Only `callsub` and `retsub` manipulate it.","Groups":["Flow Control"]},{"Opcode":144,"Name":"shl","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A times 2^B, modulo 2^64","Groups":["Arithmetic"]},{"Opcode":145,"Name":"shr","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A divided by 2^B","Groups":["Arithmetic"]},{"Opcode":146,"Name":"sqrt","Args":"U","Returns":"U","Cost":4,"Size":1,"Doc":"The largest integer I such that I^2 <= A","Groups":["Arithmetic"]},{"Opcode":147,"Name":"bitlen","Args":".","Returns":"U","Cost":1,"Size":1,"Doc":"The highest set bit in A. If A is a byte-array, it is interpreted as a big-endian unsigned integer. bitlen of 0 is 0, bitlen of 8 is 4","DocExtra":"bitlen interprets arrays as big-endian integers, unlike setbit/getbit","Groups":["Arithmetic"]},{"Opcode":148,"Name":"exp","Args":"UU","Returns":"U","Cost":1,"Size":1,"Doc":"A raised to the Bth power. Fail if A == B == 0 and on overflow","Groups":["Arithmetic"]},{"Opcode":149,"Name":"expw","Args":"UU","Returns":"UU","Cost":10,"Size":1,"Doc":"A raised to the Bth power as a 128-bit result in two uint64s. X is the high 64 bits, Y is the low. Fail if A == B == 0 or if the results exceeds 2^128-1","Groups":["Arithmetic"]},{"Opcode":150,"Name":"bsqrt","Args":"B","Returns":"B","Cost":40,"Size":1,"Doc":"The largest integer I such that I^2 <= A. A and I are interpreted as big-endian unsigned integers","Groups":["Byte Array Arithmetic"]},{"Opcode":151,"Name":"divw","Args":"UUU","Returns":"U","Cost":1,"Size":1,"Doc":"A,B / C. Fail if C == 0 or if result overflows.","DocExtra":"The notation A,B indicates that A and B are interpreted as a uint128 value, with A as the high uint64 and B the low.","Groups":["Arithmetic"]},{"Opcode":160,"Name":"b+","Args":"BB","Returns":"B","Cost":10,"Size":1,"Doc":"A plus B. A and B are interpreted as big-endian unsigned integers","Groups":["Byte Array Arithmetic"]},{"Opcode":161,"Name":"b-","Args":"BB","Returns":"B","Cost":10,"Size":1,"Doc":"A minus B. A and B are interpreted as big-endian unsigned integers. Fail on underflow.","Groups":["Byte Array Arithmetic"]},{"Opcode":162,"Name":"b/","Args":"BB","Returns":"B","Cost":20,"Size":1,"Doc":"A divided by B (truncated division). A and B are interpreted as big-endian unsigned integers. Fail if B is zero.","Groups":["Byte Array Arithmetic"]},{"Opcode":163,"Name":"b*","Args":"BB","Returns":"B","Cost":20,"Size":1,"Doc":"A times B. A and B are interpreted as big-endian unsigned integers.","Groups":["Byte Array Arithmetic"]},{"Opcode":164,"Name":"b<","Args":"BB","Returns":"U","Cost":1,"Size":1,"Doc":"1 if A is less than B, else 0. A and B are interpreted as big-endian unsigned integers","Groups":["Byte Array Arithmetic"]},{"Opcode":165,"Name":"b>","Args":"BB","Returns":"U","Cost":1,"Size":1,"Doc":"1 if A is greater than B, else 0. A and B are interpreted as big-endian unsigned integers","Groups":["Byte Array Arithmetic"]},{"Opcode":166,"Name":"b<=","Args":"BB","Returns":"U","Cost":1,"Size":1,"Doc":"1 if A is less than or equal to B, else 0. A and B are interpreted as big-endian unsigned integers","Groups":["Byte Array Arithmetic"]},{"Opcode":167,"Name":"b>=","Args":"BB","Returns":"U","Cost":1,"Size":1,"Doc":"1 if A is greater than or equal to B, else 0. A and B are interpreted as big-endian unsigned integers","Groups":["Byte Array Arithmetic"]},{"Opcode":168,"Name":"b==","Args":"BB","Returns":"U","Cost":1,"Size":1,"Doc":"1 if A is equal to B, else 0. A and B are interpreted as big-endian unsigned integers","Groups":["Byte Array Arithmetic"]},{"Opcode":169,"Name":"b!=","Args":"BB","Returns":"U","Cost":1,"Size":1,"Doc":"0 if A is equal to B, else 1. A and B are interpreted as big-endian unsigned integers","Groups":["Byte Array Arithmetic"]},{"Opcode":170,"Name":"b%","Args":"BB","Returns":"B","Cost":20,"Size":1,"Doc":"A modulo B. A and B are interpreted as big-endian unsigned integers. Fail if B is zero.","Groups":["Byte Array Arithmetic"]},{"Opcode":171,"Name":"b|","Args":"BB","Returns":"B","Cost":6,"Size":1,"Doc":"A bitwise-or B. A and B are zero-left extended to the greater of their lengths","Groups":["Byte Array Logic"]},{"Opcode":172,"Name":"b&","Args":"BB","Returns":"B","Cost":6,"Size":1,"Doc":"A bitwise-and B. A and B are zero-left extended to the greater of their lengths","Groups":["Byte Array Logic"]},{"Opcode":173,"Name":"b^","Args":"BB","Returns":"B","Cost":6,"Size":1,"Doc":"A bitwise-xor B. A and B are zero-left extended to the greater of their lengths","Groups":["Byte Array Logic"]},{"Opcode":174,"Name":"b~","Args":"B","Returns":"B","Cost":4,"Size":1,"Doc":"A with all bits inverted","Groups":["Byte Array Logic"]},{"Opcode":175,"Name":"bzero","Args":"U","Returns":"B","Cost":1,"Size":1,"Doc":"zero filled byte-array of length A","Groups":["Loading Values"]},{"Opcode":176,"Name":"log","Args":"B","Cost":1,"Size":1,"Doc":"write A to log state of the current application","DocExtra":"`log` fails if called more than MaxLogCalls times in a program, or if the sum of logged bytes exceeds 1024 bytes.","Groups":["State Access"]},{"Opcode":177,"Name":"itxn_begin","Cost":1,"Size":1,"Doc":"begin preparation of a new inner transaction in a new transaction group","DocExtra":"`itxn_begin` initializes Sender to the application address; Fee to the minimum allowable, taking into account MinTxnFee and credit from overpaying in earlier transactions; FirstValid/LastValid to the values in the invoking transaction, and all other fields to zero or empty values.","Groups":["Inner Transactions"]},{"Opcode":178,"Name":"itxn_field","Args":".","Cost":1,"Size":2,"ArgEnum":["Sender","Fee","FirstValid","FirstValidTime","LastValid","Note","Lease","Receiver","Amount","CloseRemainderTo","VotePK","SelectionPK","VoteFirst","VoteLast","VoteKeyDilution","Type","TypeEnum","XferAsset","AssetAmount","AssetSender","AssetReceiver","AssetCloseTo","GroupIndex","TxID","ApplicationID","OnCompletion","ApplicationArgs","NumAppArgs","Accounts","NumAccounts","ApprovalProgram","ClearStateProgram","RekeyTo","ConfigAsset","ConfigAssetTotal","ConfigAssetDecimals","ConfigAssetDefaultFrozen","ConfigAssetUnitName","ConfigAssetName","ConfigAssetURL","ConfigAssetMetadataHash","ConfigAssetManager","ConfigAssetReserve","ConfigAssetFreeze","ConfigAssetClawback","FreezeAsset","FreezeAssetAccount","FreezeAssetFrozen","Assets","NumAssets","Applications","NumApplications","GlobalNumUint","GlobalNumByteSlice","LocalNumUint","LocalNumByteSlice","ExtraProgramPages","Nonparticipation","Logs","NumLogs","CreatedAssetID","CreatedApplicationID","LastLog","StateProofPK"],"ArgEnumTypes":"BUUUUBBBUBBBUUUBUUUBBBUBUUBUBUBBBUUUUBBBBBBBBUBUUUUUUUUUUUBUUUBB","Doc":"set field F of the current inner transaction to A","DocExtra":"`itxn_field` fails if A is of the wrong type for F, including a byte array of the wrong size for use as an address when F is an address field. `itxn_field` also fails if A is an account, asset, or app that is not _available_, or an attempt is made extend an array field beyond the limit imposed by consensus parameters. (Addresses set into asset params of acfg transactions need not be _available_.)","ImmediateNote":"{uint8 transaction field index}","Groups":["Inner Transactions"]},{"Opcode":179,"Name":"itxn_submit","Cost":1,"Size":1,"Doc":"execute the current inner transaction group. Fail if executing this group would exceed the inner transaction limit, or if any transaction in the group fails.","DocExtra":"`itxn_submit` resets the current transaction so that it can not be resubmitted. A new `itxn_begin` is required to prepare another inner transaction.","Groups":["Inner Transactions"]},{"Opcode":180,"Name":"itxn","Returns":".","Cost":1,"Size":2,"ArgEnum":["Sender","Fee","FirstValid","FirstValidTime","LastValid","Note","Lease","Receiver","Amount","CloseRemainderTo","VotePK","SelectionPK","VoteFirst","VoteLast","VoteKeyDilution","Type","TypeEnum","XferAsset","AssetAmount","AssetSender","AssetReceiver","AssetCloseTo","GroupIndex","TxID","ApplicationID","OnCompletion","ApplicationArgs","NumAppArgs","Accounts","NumAccounts","ApprovalProgram","ClearStateProgram","RekeyTo","ConfigAsset","ConfigAssetTotal","ConfigAssetDecimals","ConfigAssetDefaultFrozen","ConfigAssetUnitName","ConfigAssetName","ConfigAssetURL","ConfigAssetMetadataHash","ConfigAssetManager","ConfigAssetReserve","ConfigAssetFreeze","ConfigAssetClawback","FreezeAsset","FreezeAssetAccount","FreezeAssetFrozen","Assets","NumAssets","Applications","NumApplications","GlobalNumUint","GlobalNumByteSlice","LocalNumUint","LocalNumByteSlice","ExtraProgramPages","Nonparticipation","Logs","NumLogs","CreatedAssetID","CreatedApplicationID","LastLog","StateProofPK"],"ArgEnumTypes":"BUUUUBBBUBBBUUUBUUUBBBUBUUBUBUBBBUUUUBBBBBBBBUBUUUUUUUUUUUBUUUBB","Doc":"field F of the last inner transaction","ImmediateNote":"{uint8 transaction field index}","Groups":["Inner Transactions"]},{"Opcode":181,"Name":"itxna","Returns":".","Cost":1,"Size":3,"ArgEnum":["ApplicationArgs","Accounts","Assets","Applications","Logs"],"ArgEnumTypes":"BBUUB","Doc":"Ith value of the array field F of the last inner transaction","ImmediateNote":"{uint8 transaction field index} {uint8 transaction field array index}","Groups":["Inner Transactions"]},{"Opcode":182,"Name":"itxn_next","Cost":1,"Size":1,"Doc":"begin preparation of a new inner transaction in the same transaction group","DocExtra":"`itxn_next` initializes the transaction exactly as `itxn_begin` does","Groups":["Inner Transactions"]},{"Opcode":183,"Name":"gitxn","Returns":".","Cost":1,"Size":3,"ArgEnum":["Sender","Fee","FirstValid","FirstValidTime","LastValid","Note","Lease","Receiver","Amount","CloseRemainderTo","VotePK","SelectionPK","VoteFirst","VoteLast","VoteKeyDilution","Type","TypeEnum","XferAsset","AssetAmount","AssetSender","AssetReceiver","AssetCloseTo","GroupIndex","TxID","ApplicationID","OnCompletion","ApplicationArgs","NumAppArgs","Accounts","NumAccounts","ApprovalProgram","ClearStateProgram","RekeyTo","ConfigAsset","ConfigAssetTotal","ConfigAssetDecimals","ConfigAssetDefaultFrozen","ConfigAssetUnitName","ConfigAssetName","ConfigAssetURL","ConfigAssetMetadataHash","ConfigAssetManager","ConfigAssetReserve","ConfigAssetFreeze","ConfigAssetClawback","FreezeAsset","FreezeAssetAccount","FreezeAssetFrozen","Assets","NumAssets","Applications","NumApplications","GlobalNumUint","GlobalNumByteSlice","LocalNumUint","LocalNumByteSlice","ExtraProgramPages","Nonparticipation","Logs","NumLogs","CreatedAssetID","CreatedApplicationID","LastLog","StateProofPK"],"ArgEnumTypes":"BUUUUBBBUBBBUUUBUUUBBBUBUUBUBUBBBUUUUBBBBBBBBUBUUUUUUUUUUUBUUUBB","Doc":"field F of the Tth transaction in the last inner group submitted","ImmediateNote":"{uint8 transaction group index} {uint8 transaction field index}","Groups":["Inner Transactions"]},{"Opcode":184,"Name":"gitxna","Returns":".","Cost":1,"Size":4,"ArgEnum":["ApplicationArgs","Accounts","Assets","Applications","Logs"],"ArgEnumTypes":"BBUUB","Doc":"Ith value of the array field F from the Tth transaction in the last inner group submitted","ImmediateNote":"{uint8 transaction group index} {uint8 transaction field index} {uint8 transaction field array index}","Groups":["Inner Transactions"]},{"Opcode":192,"Name":"txnas","Args":"U","Returns":".","Cost":1,"Size":2,"ArgEnum":["ApplicationArgs","Accounts","Assets","Applications","Logs"],"ArgEnumTypes":"BBUUB","Doc":"Ath value of the array field F of the current transaction","ImmediateNote":"{uint8 transaction field index}","Groups":["Loading Values"]},{"Opcode":193,"Name":"gtxnas","Args":"U","Returns":".","Cost":1,"Size":3,"ArgEnum":["ApplicationArgs","Accounts","Assets","Applications","Logs"],"ArgEnumTypes":"BBUUB","Doc":"Ath value of the array field F from the Tth transaction in the current group","ImmediateNote":"{uint8 transaction group index} {uint8 transaction field index}","Groups":["Loading Values"]},{"Opcode":194,"Name":"gtxnsas","Args":"UU","Returns":".","Cost":1,"Size":2,"ArgEnum":["ApplicationArgs","Accounts","Assets","Applications","Logs"],"ArgEnumTypes":"BBUUB","Doc":"Bth value of the array field F from the Ath transaction in the current group","ImmediateNote":"{uint8 transaction field index}","Groups":["Loading Values"]},{"Opcode":195,"Name":"args","Args":"U","Returns":"B","Cost":1,"Size":1,"Doc":"Ath LogicSig argument","Groups":["Loading Values"]},{"Opcode":196,"Name":"gloadss","Args":"UU","Returns":".","Cost":1,"Size":1,"Doc":"Bth scratch space value of the Ath transaction in the current group","Groups":["Loading Values"]},{"Opcode":197,"Name":"itxnas","Args":"U","Returns":".","Cost":1,"Size":2,"Doc":"Ath value of the array field F of the last inner transaction","ImmediateNote":"{uint8 transaction field index}","Groups":["Inner Transactions"]},{"Opcode":198,"Name":"gitxnas","Args":"U","Returns":".","Cost":1,"Size":3,"Doc":"Ath value of the array field F from the Tth transaction in the last inner group submitted","ImmediateNote":"{uint8 transaction group index} {uint8 transaction field index}","Groups":["Inner Transactions"]}]}');

/***/ })

};
;