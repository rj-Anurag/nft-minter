"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_";
exports.ids = ["vendor-chunks/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/detectProvider.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/detectProvider.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectProvider: () => (/* binding */ detectProvider),\n/* harmony export */   isSnapSupported: () => (/* binding */ isSnapSupported)\n/* harmony export */ });\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction isSnapSupported(provider) {\n    return __awaiter(this, void 0, void 0, function*() {\n        try {\n            yield provider.request({\n                method: \"wallet_getSnaps\"\n            });\n            return true;\n        } catch (error) {\n            return false;\n        }\n    });\n}\nfunction detectProvider() {\n    return __awaiter(this, void 0, void 0, function*() {\n        try {\n            const provider = window.ethereum;\n            if (!provider) {\n                return null;\n            }\n            if (provider.providers && Array.isArray(provider.providers)) {\n                const providers = provider.providers;\n                for (const provider of providers){\n                    if (yield isSnapSupported(provider)) {\n                        return provider;\n                    }\n                }\n            }\n            if (provider.detected && Array.isArray(provider.detected)) {\n                const providers = provider.detected;\n                for (const provider of providers){\n                    if (yield isSnapSupported(provider)) {\n                        return provider;\n                    }\n                }\n            }\n            if (yield isSnapSupported(provider)) {\n                return provider;\n            }\n            return null;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNvbGZsYXJlLXdhbGxldCttZXRhbWFzay1zZGtAMS4wLjNfQHNvbGFuYSt3ZWIzLmpzQDEuOTguMl9idWZmZXJ1dGlsQDQuMC45X3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwXy9ub2RlX21vZHVsZXMvQHNvbGZsYXJlLXdhbGxldC9tZXRhbWFzay1zZGsvbGliL2VzbS9kZXRlY3RQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLFlBQVksU0FBSyxJQUFJLFNBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNPLFNBQVNPLGdCQUFnQkMsUUFBUTtJQUNwQyxPQUFPcEIsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUNuQyxJQUFJO1lBQ0EsTUFBTW9CLFNBQVNDLE9BQU8sQ0FBQztnQkFBRUMsUUFBUTtZQUFrQjtZQUNuRCxPQUFPO1FBQ1gsRUFDQSxPQUFPQyxPQUFPO1lBQ1YsT0FBTztRQUNYO0lBQ0o7QUFDSjtBQUNPLFNBQVNDO0lBQ1osT0FBT3hCLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7UUFDbkMsSUFBSTtZQUNBLE1BQU1vQixXQUFXSyxPQUFPQyxRQUFRO1lBQ2hDLElBQUksQ0FBQ04sVUFBVTtnQkFDWCxPQUFPO1lBQ1g7WUFDQSxJQUFJQSxTQUFTTyxTQUFTLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ1QsU0FBU08sU0FBUyxHQUFHO2dCQUN6RCxNQUFNQSxZQUFZUCxTQUFTTyxTQUFTO2dCQUNwQyxLQUFLLE1BQU1QLFlBQVlPLFVBQVc7b0JBQzlCLElBQUksTUFBTVIsZ0JBQWdCQyxXQUFXO3dCQUNqQyxPQUFPQTtvQkFDWDtnQkFDSjtZQUNKO1lBQ0EsSUFBSUEsU0FBU1UsUUFBUSxJQUFJRixNQUFNQyxPQUFPLENBQUNULFNBQVNVLFFBQVEsR0FBRztnQkFDdkQsTUFBTUgsWUFBWVAsU0FBU1UsUUFBUTtnQkFDbkMsS0FBSyxNQUFNVixZQUFZTyxVQUFXO29CQUM5QixJQUFJLE1BQU1SLGdCQUFnQkMsV0FBVzt3QkFDakMsT0FBT0E7b0JBQ1g7Z0JBQ0o7WUFDSjtZQUNBLElBQUksTUFBTUQsZ0JBQWdCQyxXQUFXO2dCQUNqQyxPQUFPQTtZQUNYO1lBQ0EsT0FBTztRQUNYLEVBQ0EsT0FBT0csT0FBTztZQUNWUSxRQUFRUixLQUFLLENBQUNBO1lBQ2QsT0FBTztRQUNYO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNvbGZsYXJlLXdhbGxldCttZXRhbWFzay1zZGtAMS4wLjNfQHNvbGFuYSt3ZWIzLmpzQDEuOTguMl9idWZmZXJ1dGlsQDQuMC45X3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwXy9ub2RlX21vZHVsZXMvQHNvbGZsYXJlLXdhbGxldC9tZXRhbWFzay1zZGsvbGliL2VzbS9kZXRlY3RQcm92aWRlci5qcz9lZTIxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGlzU25hcFN1cHBvcnRlZChwcm92aWRlcikge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB5aWVsZCBwcm92aWRlci5yZXF1ZXN0KHsgbWV0aG9kOiAnd2FsbGV0X2dldFNuYXBzJyB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0UHJvdmlkZXIoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gd2luZG93LmV0aGVyZXVtO1xuICAgICAgICAgICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3ZpZGVyLnByb3ZpZGVycyAmJiBBcnJheS5pc0FycmF5KHByb3ZpZGVyLnByb3ZpZGVycykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlcnMgPSBwcm92aWRlci5wcm92aWRlcnM7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBwcm92aWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHlpZWxkIGlzU25hcFN1cHBvcnRlZChwcm92aWRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm92aWRlci5kZXRlY3RlZCAmJiBBcnJheS5pc0FycmF5KHByb3ZpZGVyLmRldGVjdGVkKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IHByb3ZpZGVyLmRldGVjdGVkO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgcHJvdmlkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh5aWVsZCBpc1NuYXBTdXBwb3J0ZWQocHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeWllbGQgaXNTbmFwU3VwcG9ydGVkKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImFkb3B0IiwidmFsdWUiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsImlzU25hcFN1cHBvcnRlZCIsInByb3ZpZGVyIiwicmVxdWVzdCIsIm1ldGhvZCIsImVycm9yIiwiZGV0ZWN0UHJvdmlkZXIiLCJ3aW5kb3ciLCJldGhlcmV1bSIsInByb3ZpZGVycyIsIkFycmF5IiwiaXNBcnJheSIsImRldGVjdGVkIiwiY29uc29sZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/detectProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardSolflareMetaMaskWalletAccount: () => (/* reexport safe */ _standard_account__WEBPACK_IMPORTED_MODULE_5__.StandardSolflareMetaMaskWalletAccount),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/.pnpm/@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/utils.js\");\n/* harmony import */ var _detectProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./detectProvider */ \"(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/detectProvider.js\");\n/* harmony import */ var _standard_account__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./standard/account */ \"(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/account.js\");\n/* harmony import */ var _standard_solana__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./standard/solana */ \"(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/solana.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/types.js\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nclass SolflareMetaMask extends eventemitter3__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(config){\n        super();\n        this._network = \"mainnet-beta\";\n        this._iframeParams = {};\n        this._element = null;\n        this._iframe = null;\n        this._publicKey = null;\n        this._account = null;\n        this._isConnected = false;\n        this._connectHandler = null;\n        this._messageHandlers = {};\n        this._handleEvent = (event)=>{\n            var _a, _b;\n            switch(event.type){\n                case \"connect\":\n                    {\n                        this._collapseIframe();\n                        if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.publicKey) {\n                            this._publicKey = event.data.publicKey;\n                            this._isConnected = true;\n                            if (this._connectHandler) {\n                                this._connectHandler.resolve();\n                                this._connectHandler = null;\n                            }\n                            this._connected();\n                        } else {\n                            if (this._connectHandler) {\n                                this._connectHandler.reject();\n                                this._connectHandler = null;\n                            }\n                            this._disconnected();\n                        }\n                        return;\n                    }\n                case \"disconnect\":\n                    {\n                        if (this._connectHandler) {\n                            this._connectHandler.reject();\n                            this._connectHandler = null;\n                        }\n                        this._disconnected();\n                        return;\n                    }\n                case \"accountChanged\":\n                    {\n                        if ((_b = event.data) === null || _b === void 0 ? void 0 : _b.publicKey) {\n                            this._publicKey = event.data.publicKey;\n                            this.emit(\"accountChanged\", this.publicKey);\n                            this._standardConnected();\n                        } else {\n                            this.emit(\"accountChanged\", undefined);\n                            this._standardDisconnected();\n                        }\n                        return;\n                    }\n                default:\n                    {\n                        return;\n                    }\n            }\n        };\n        this._handleResize = (data)=>{\n            if (data.resizeMode === \"full\") {\n                if (data.params.mode === \"fullscreen\") {\n                    this._expandIframe();\n                } else if (data.params.mode === \"hide\") {\n                    this._collapseIframe();\n                }\n            } else if (data.resizeMode === \"coordinates\") {\n                this._resizeIframe(data.params);\n            }\n        };\n        this._handleMessage = (event)=>{\n            var _a;\n            if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.channel) !== \"solflareIframeToWalletAdapter\") {\n                return;\n            }\n            const data = event.data.data || {};\n            if (data.type === \"event\") {\n                this._handleEvent(data.event);\n            } else if (data.type === \"resize\") {\n                this._handleResize(data);\n            } else if (data.type === \"response\") {\n                if (this._messageHandlers[data.id]) {\n                    const { resolve, reject } = this._messageHandlers[data.id];\n                    delete this._messageHandlers[data.id];\n                    if (data.error) {\n                        reject(data.error);\n                    } else {\n                        resolve(data.result);\n                    }\n                }\n            }\n        };\n        this._removeElement = ()=>{\n            if (this._element) {\n                this._element.remove();\n                this._element = null;\n            }\n        };\n        this._removeDanglingElements = ()=>{\n            const elements = document.getElementsByClassName(\"solflare-metamask-wallet-adapter-iframe\");\n            for (const element of elements){\n                if (element.parentElement) {\n                    element.remove();\n                }\n            }\n        };\n        this._injectElement = ()=>{\n            this._removeElement();\n            this._removeDanglingElements();\n            const params = Object.assign(Object.assign({}, this._iframeParams), {\n                mm: true,\n                v: 1,\n                cluster: this._network || \"mainnet-beta\",\n                origin: window.location.origin || \"\",\n                title: document.title || \"\"\n            });\n            const queryString = Object.keys(params).map((key)=>`${key}=${encodeURIComponent(params[key])}`).join(\"&\");\n            const iframeUrl = `${SolflareMetaMask.IFRAME_URL}?${queryString}`;\n            this._element = document.createElement(\"div\");\n            this._element.className = \"solflare-metamask-wallet-adapter-iframe\";\n            this._element.innerHTML = `\n      <iframe src='${iframeUrl}' style='position: fixed; top: 0; bottom: 0; left: 0; right: 0; width: 100%; height: 100%; border: none; border-radius: 0; z-index: 99999; color-scheme: auto;' allowtransparency='true'></iframe>\n    `;\n            document.body.appendChild(this._element);\n            this._iframe = this._element.querySelector(\"iframe\");\n            window.addEventListener(\"message\", this._handleMessage, false);\n        };\n        this._collapseIframe = ()=>{\n            if (this._iframe) {\n                this._iframe.style.top = \"\";\n                this._iframe.style.right = \"\";\n                this._iframe.style.height = \"2px\";\n                this._iframe.style.width = \"2px\";\n            }\n        };\n        this._expandIframe = ()=>{\n            if (this._iframe) {\n                this._iframe.style.top = \"0px\";\n                this._iframe.style.bottom = \"0px\";\n                this._iframe.style.left = \"0px\";\n                this._iframe.style.right = \"0px\";\n                this._iframe.style.width = \"100%\";\n                this._iframe.style.height = \"100%\";\n            }\n        };\n        this._resizeIframe = (params)=>{\n            if (!this._iframe) {\n                return;\n            }\n            this._iframe.style.top = isFinite(params.top) ? `${params.top}px` : \"\";\n            this._iframe.style.bottom = isFinite(params.bottom) ? `${params.bottom}px` : \"\";\n            this._iframe.style.left = isFinite(params.left) ? `${params.left}px` : \"\";\n            this._iframe.style.right = isFinite(params.right) ? `${params.right}px` : \"\";\n            this._iframe.style.width = isFinite(params.width) ? `${params.width}px` : params.width;\n            this._iframe.style.height = isFinite(params.height) ? `${params.height}px` : params.height;\n        };\n        this._sendIframeMessage = (data)=>{\n            if (!this.connected || !this.publicKey) {\n                throw new Error(\"Wallet not connected\");\n            }\n            return new Promise((resolve, reject)=>{\n                var _a, _b;\n                const messageId = (0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])();\n                this._messageHandlers[messageId] = {\n                    resolve,\n                    reject\n                };\n                (_b = (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({\n                    channel: \"solflareWalletAdapterToIframe\",\n                    data: Object.assign({\n                        id: messageId\n                    }, data)\n                }, \"*\");\n            });\n        };\n        this._connected = ()=>{\n            this._isConnected = true;\n            this.emit(\"connect\", this.publicKey);\n            this._standardConnected();\n        };\n        this._disconnected = ()=>{\n            this._publicKey = null;\n            this._isConnected = false;\n            window.removeEventListener(\"message\", this._handleMessage, false);\n            this._removeElement();\n            this.emit(\"disconnect\");\n            this._standardDisconnected();\n        };\n        this._standardConnected = ()=>{\n            if (!this.publicKey) {\n                return;\n            }\n            const address = this.publicKey.toString();\n            if (!this._account || this._account.address !== address) {\n                this._account = new _standard_account__WEBPACK_IMPORTED_MODULE_5__.StandardSolflareMetaMaskWalletAccount({\n                    address,\n                    publicKey: this.publicKey.toBytes()\n                });\n                this.emit(\"standard_change\", {\n                    accounts: this.standardAccounts\n                });\n            }\n        };\n        this._standardDisconnected = ()=>{\n            if (this._account) {\n                this._account = null;\n                this.emit(\"standard_change\", {\n                    accounts: this.standardAccounts\n                });\n            }\n        };\n        if (config === null || config === void 0 ? void 0 : config.network) {\n            this._network = config === null || config === void 0 ? void 0 : config.network;\n        }\n        if (window.SolflareMetaMaskParams) {\n            this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), window.SolflareMetaMaskParams);\n        }\n        if (config === null || config === void 0 ? void 0 : config.params) {\n            this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), config === null || config === void 0 ? void 0 : config.params);\n        }\n    }\n    get publicKey() {\n        return this._publicKey ? new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(this._publicKey) : null;\n    }\n    get standardAccount() {\n        return this._account;\n    }\n    get standardAccounts() {\n        return this._account ? [\n            this._account\n        ] : [];\n    }\n    get isConnected() {\n        return this._isConnected;\n    }\n    get connected() {\n        return this.isConnected;\n    }\n    get autoApprove() {\n        return false;\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this.connected) {\n                return;\n            }\n            this._injectElement();\n            yield new Promise((resolve, reject)=>{\n                this._connectHandler = {\n                    resolve,\n                    reject\n                };\n            });\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this._sendIframeMessage({\n                method: \"disconnect\"\n            });\n            this._disconnected();\n        });\n    }\n    signTransaction(transaction) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.connected || !this.publicKey) {\n                throw new Error(\"Wallet not connected\");\n            }\n            try {\n                const serializedTransaction = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.serializeTransaction)(transaction);\n                const response = yield this._sendIframeMessage({\n                    method: \"signTransactionV2\",\n                    params: {\n                        transaction: bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(serializedTransaction)\n                    }\n                });\n                const { transaction: signedTransaction } = response;\n                return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isLegacyTransactionInstance)(transaction) ? _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.from(bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(signedTransaction)) : _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedTransaction.deserialize(bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(signedTransaction));\n            } catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || \"Failed to sign transaction\");\n            }\n        });\n    }\n    signAllTransactions(transactions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.connected || !this.publicKey) {\n                throw new Error(\"Wallet not connected\");\n            }\n            try {\n                const serializedTransactions = transactions.map((transaction)=>(0,_utils__WEBPACK_IMPORTED_MODULE_3__.serializeTransaction)(transaction));\n                const { transactions: signedTransactions } = yield this._sendIframeMessage({\n                    method: \"signAllTransactionsV2\",\n                    params: {\n                        transactions: serializedTransactions.map((transaction)=>bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(transaction))\n                    }\n                });\n                return signedTransactions.map((signedTransaction, index)=>{\n                    return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isLegacyTransactionInstance)(transactions[index]) ? _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.from(bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(signedTransaction)) : _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedTransaction.deserialize(bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(signedTransaction));\n                });\n            } catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || \"Failed to sign transactions\");\n            }\n        });\n    }\n    signAndSendTransaction(transaction, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.connected || !this.publicKey) {\n                throw new Error(\"Wallet not connected\");\n            }\n            try {\n                const serializedTransaction = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.serializeTransaction)(transaction);\n                const { signature } = yield this._sendIframeMessage({\n                    method: \"signAndSendTransaction\",\n                    params: {\n                        transaction: bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(serializedTransaction),\n                        options\n                    }\n                });\n                return signature;\n            } catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || \"Failed to sign and send transaction\");\n            }\n        });\n    }\n    signMessage(data, display = \"utf8\") {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.connected || !this.publicKey) {\n                throw new Error(\"Wallet not connected\");\n            }\n            try {\n                const { signature } = yield this._sendIframeMessage({\n                    method: \"signMessage\",\n                    params: {\n                        data: bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(data),\n                        display\n                    }\n                });\n                return Uint8Array.from(bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(signature));\n            } catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || \"Failed to sign message\");\n            }\n        });\n    }\n    sign(data, display = \"utf8\") {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.signMessage(data, display);\n        });\n    }\n    static isSupported() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const provider = yield (0,_detectProvider__WEBPACK_IMPORTED_MODULE_4__.detectProvider)();\n            return !!provider;\n        });\n    }\n    standardSignAndSendTransaction(...inputs) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.connected) throw new Error(\"not connected\");\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { transaction, account, chain, options } = inputs[0];\n                const { minContextSlot, preflightCommitment, skipPreflight, maxRetries } = options || {};\n                if (account !== this._account) throw new Error(\"invalid account\");\n                if (!(0,_standard_solana__WEBPACK_IMPORTED_MODULE_6__.isSolanaChain)(chain)) throw new Error(\"invalid chain\");\n                const signature = yield this.signAndSendTransaction(_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedTransaction.deserialize(transaction), {\n                    preflightCommitment,\n                    minContextSlot,\n                    maxRetries,\n                    skipPreflight\n                });\n                outputs.push({\n                    signature: bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(signature)\n                });\n            } else if (inputs.length > 1) {\n                for (const input of inputs){\n                    outputs.push(...yield this.standardSignAndSendTransaction(input));\n                }\n            }\n            return outputs;\n        });\n    }\n    standardSignTransaction(...inputs) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.connected) throw new Error(\"not connected\");\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { transaction, account, chain } = inputs[0];\n                if (account !== this._account) throw new Error(\"invalid account\");\n                if (chain && !(0,_standard_solana__WEBPACK_IMPORTED_MODULE_6__.isSolanaChain)(chain)) throw new Error(\"invalid chain\");\n                const signedTransaction = yield this.signTransaction(_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedTransaction.deserialize(transaction));\n                outputs.push({\n                    signedTransaction: signedTransaction.serialize()\n                });\n            } else if (inputs.length > 1) {\n                let chain;\n                for (const input of inputs){\n                    if (input.account !== this._account) throw new Error(\"invalid account\");\n                    if (input.chain) {\n                        if (!(0,_standard_solana__WEBPACK_IMPORTED_MODULE_6__.isSolanaChain)(input.chain)) throw new Error(\"invalid chain\");\n                        if (chain) {\n                            if (input.chain !== chain) throw new Error(\"conflicting chain\");\n                        } else {\n                            chain = input.chain;\n                        }\n                    }\n                }\n                const transactions = inputs.map(({ transaction })=>_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedTransaction.deserialize(transaction));\n                const signedTransactions = yield this.signAllTransactions(transactions);\n                outputs.push(...signedTransactions.map((signedTransaction)=>({\n                        signedTransaction: signedTransaction.serialize()\n                    })));\n            }\n            return outputs;\n        });\n    }\n    standardSignMessage(...inputs) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.connected) throw new Error(\"not connected\");\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { message, account } = inputs[0];\n                if (account !== this._account) throw new Error(\"invalid account\");\n                const signature = yield this.signMessage(message);\n                outputs.push({\n                    signedMessage: message,\n                    signature\n                });\n            } else if (inputs.length > 1) {\n                for (const input of inputs){\n                    outputs.push(...yield this.standardSignMessage(input));\n                }\n            }\n            return outputs;\n        });\n    }\n}\nSolflareMetaMask.IFRAME_URL = \"https://widget.solflare.com/\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SolflareMetaMask);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/account.js":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/account.js ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardSolflareMetaMaskWalletAccount: () => (/* binding */ StandardSolflareMetaMaskWalletAccount)\n/* harmony export */ });\n/* harmony import */ var _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/wallet-standard-features */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-standard-features@1.3.0/node_modules/@solana/wallet-standard-features/lib/esm/signAndSendTransaction.js\");\n/* harmony import */ var _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/wallet-standard-features */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-standard-features@1.3.0/node_modules/@solana/wallet-standard-features/lib/esm/signTransaction.js\");\n/* harmony import */ var _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/wallet-standard-features */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-standard-features@1.3.0/node_modules/@solana/wallet-standard-features/lib/esm/signMessage.js\");\n/* harmony import */ var _solana_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./solana.js */ \"(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/solana.js\");\n// This is copied with modification from @wallet-standard/wallet\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _StandardSolflareMetaMaskWalletAccount_address, _StandardSolflareMetaMaskWalletAccount_publicKey, _StandardSolflareMetaMaskWalletAccount_chains, _StandardSolflareMetaMaskWalletAccount_features, _StandardSolflareMetaMaskWalletAccount_label, _StandardSolflareMetaMaskWalletAccount_icon;\n\n\nconst chains = _solana_js__WEBPACK_IMPORTED_MODULE_0__.SOLANA_CHAINS;\nconst features = [\n    _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_1__.SolanaSignAndSendTransaction,\n    _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_2__.SolanaSignTransaction,\n    _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_3__.SolanaSignMessage\n];\nclass StandardSolflareMetaMaskWalletAccount {\n    get address() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_address, \"f\");\n    }\n    get publicKey() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_publicKey, \"f\").slice();\n    }\n    get chains() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_chains, \"f\").slice();\n    }\n    get features() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_features, \"f\").slice();\n    }\n    get label() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_label, \"f\");\n    }\n    get icon() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_icon, \"f\");\n    }\n    constructor({ address, publicKey, label, icon }){\n        _StandardSolflareMetaMaskWalletAccount_address.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_publicKey.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_chains.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_features.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_label.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_icon.set(this, void 0);\n        if (new.target === StandardSolflareMetaMaskWalletAccount) {\n            Object.freeze(this);\n        }\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_address, address, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_publicKey, publicKey, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_chains, chains, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_features, features, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_label, label, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_icon, icon, \"f\");\n    }\n}\n_StandardSolflareMetaMaskWalletAccount_address = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_publicKey = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_chains = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_features = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_label = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_icon = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/solana.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/solana.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SOLANA_CHAINS: () => (/* binding */ SOLANA_CHAINS),\n/* harmony export */   SOLANA_DEVNET_CHAIN: () => (/* binding */ SOLANA_DEVNET_CHAIN),\n/* harmony export */   SOLANA_LOCALNET_CHAIN: () => (/* binding */ SOLANA_LOCALNET_CHAIN),\n/* harmony export */   SOLANA_MAINNET_CHAIN: () => (/* binding */ SOLANA_MAINNET_CHAIN),\n/* harmony export */   SOLANA_TESTNET_CHAIN: () => (/* binding */ SOLANA_TESTNET_CHAIN),\n/* harmony export */   isSolanaChain: () => (/* binding */ isSolanaChain)\n/* harmony export */ });\n// This is copied from @solana/wallet-standard-chains\n/** Solana Mainnet (beta) cluster, e.g. https://api.mainnet-beta.solana.com */ const SOLANA_MAINNET_CHAIN = \"solana:mainnet\";\n/** Solana Devnet cluster, e.g. https://api.devnet.solana.com */ const SOLANA_DEVNET_CHAIN = \"solana:devnet\";\n/** Solana Testnet cluster, e.g. https://api.testnet.solana.com */ const SOLANA_TESTNET_CHAIN = \"solana:testnet\";\n/** Solana Localnet cluster, e.g. http://localhost:8899 */ const SOLANA_LOCALNET_CHAIN = \"solana:localnet\";\n/** Array of all Solana clusters */ const SOLANA_CHAINS = [\n    SOLANA_MAINNET_CHAIN,\n    SOLANA_DEVNET_CHAIN,\n    SOLANA_TESTNET_CHAIN,\n    SOLANA_LOCALNET_CHAIN\n];\n/**\n * Check if a chain corresponds with one of the Solana clusters.\n */ function isSolanaChain(chain) {\n    return SOLANA_CHAINS.includes(chain);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNvbGZsYXJlLXdhbGxldCttZXRhbWFzay1zZGtAMS4wLjNfQHNvbGFuYSt3ZWIzLmpzQDEuOTguMl9idWZmZXJ1dGlsQDQuMC45X3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwXy9ub2RlX21vZHVsZXMvQHNvbGZsYXJlLXdhbGxldC9tZXRhbWFzay1zZGsvbGliL2VzbS9zdGFuZGFyZC9zb2xhbmEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ3JELDRFQUE0RSxHQUNyRSxNQUFNQSx1QkFBdUIsaUJBQWlCO0FBQ3JELDhEQUE4RCxHQUN2RCxNQUFNQyxzQkFBc0IsZ0JBQWdCO0FBQ25ELGdFQUFnRSxHQUN6RCxNQUFNQyx1QkFBdUIsaUJBQWlCO0FBQ3JELHdEQUF3RCxHQUNqRCxNQUFNQyx3QkFBd0Isa0JBQWtCO0FBQ3ZELGlDQUFpQyxHQUMxQixNQUFNQyxnQkFBZ0I7SUFDekJKO0lBQ0FDO0lBQ0FDO0lBQ0FDO0NBQ0gsQ0FBQztBQUNGOztDQUVDLEdBQ00sU0FBU0UsY0FBY0MsS0FBSztJQUMvQixPQUFPRixjQUFjRyxRQUFRLENBQUNEO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac29sZmxhcmUtd2FsbGV0K21ldGFtYXNrLXNka0AxLjAuM19Ac29sYW5hK3dlYjMuanNAMS45OC4yX2J1ZmZlcnV0aWxANC4wLjlfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTBfL25vZGVfbW9kdWxlcy9Ac29sZmxhcmUtd2FsbGV0L21ldGFtYXNrLXNkay9saWIvZXNtL3N0YW5kYXJkL3NvbGFuYS5qcz9jNjQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaXMgY29waWVkIGZyb20gQHNvbGFuYS93YWxsZXQtc3RhbmRhcmQtY2hhaW5zXG4vKiogU29sYW5hIE1haW5uZXQgKGJldGEpIGNsdXN0ZXIsIGUuZy4gaHR0cHM6Ly9hcGkubWFpbm5ldC1iZXRhLnNvbGFuYS5jb20gKi9cbmV4cG9ydCBjb25zdCBTT0xBTkFfTUFJTk5FVF9DSEFJTiA9ICdzb2xhbmE6bWFpbm5ldCc7XG4vKiogU29sYW5hIERldm5ldCBjbHVzdGVyLCBlLmcuIGh0dHBzOi8vYXBpLmRldm5ldC5zb2xhbmEuY29tICovXG5leHBvcnQgY29uc3QgU09MQU5BX0RFVk5FVF9DSEFJTiA9ICdzb2xhbmE6ZGV2bmV0Jztcbi8qKiBTb2xhbmEgVGVzdG5ldCBjbHVzdGVyLCBlLmcuIGh0dHBzOi8vYXBpLnRlc3RuZXQuc29sYW5hLmNvbSAqL1xuZXhwb3J0IGNvbnN0IFNPTEFOQV9URVNUTkVUX0NIQUlOID0gJ3NvbGFuYTp0ZXN0bmV0Jztcbi8qKiBTb2xhbmEgTG9jYWxuZXQgY2x1c3RlciwgZS5nLiBodHRwOi8vbG9jYWxob3N0Ojg4OTkgKi9cbmV4cG9ydCBjb25zdCBTT0xBTkFfTE9DQUxORVRfQ0hBSU4gPSAnc29sYW5hOmxvY2FsbmV0Jztcbi8qKiBBcnJheSBvZiBhbGwgU29sYW5hIGNsdXN0ZXJzICovXG5leHBvcnQgY29uc3QgU09MQU5BX0NIQUlOUyA9IFtcbiAgICBTT0xBTkFfTUFJTk5FVF9DSEFJTixcbiAgICBTT0xBTkFfREVWTkVUX0NIQUlOLFxuICAgIFNPTEFOQV9URVNUTkVUX0NIQUlOLFxuICAgIFNPTEFOQV9MT0NBTE5FVF9DSEFJTlxuXTtcbi8qKlxuICogQ2hlY2sgaWYgYSBjaGFpbiBjb3JyZXNwb25kcyB3aXRoIG9uZSBvZiB0aGUgU29sYW5hIGNsdXN0ZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTb2xhbmFDaGFpbihjaGFpbikge1xuICAgIHJldHVybiBTT0xBTkFfQ0hBSU5TLmluY2x1ZGVzKGNoYWluKTtcbn1cbiJdLCJuYW1lcyI6WyJTT0xBTkFfTUFJTk5FVF9DSEFJTiIsIlNPTEFOQV9ERVZORVRfQ0hBSU4iLCJTT0xBTkFfVEVTVE5FVF9DSEFJTiIsIlNPTEFOQV9MT0NBTE5FVF9DSEFJTiIsIlNPTEFOQV9DSEFJTlMiLCJpc1NvbGFuYUNoYWluIiwiY2hhaW4iLCJpbmNsdWRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/solana.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/types.js":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/types.js ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNvbGZsYXJlLXdhbGxldCttZXRhbWFzay1zZGtAMS4wLjNfQHNvbGFuYSt3ZWIzLmpzQDEuOTguMl9idWZmZXJ1dGlsQDQuMC45X3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwXy9ub2RlX21vZHVsZXMvQHNvbGZsYXJlLXdhbGxldC9tZXRhbWFzay1zZGsvbGliL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bzb2xmbGFyZS13YWxsZXQrbWV0YW1hc2stc2RrQDEuMC4zX0Bzb2xhbmErd2ViMy5qc0AxLjk4LjJfYnVmZmVydXRpbEA0LjAuOV90eXBlc2NyaXB0QDUuOC4zX3V0Zi04LXZhbGlkYXRlQDUuMC4xMF8vbm9kZV9tb2R1bGVzL0Bzb2xmbGFyZS13YWxsZXQvbWV0YW1hc2stc2RrL2xpYi9lc20vdHlwZXMuanM/NzIyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge307XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/utils.js":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/utils.js ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addSignature: () => (/* binding */ addSignature),\n/* harmony export */   isLegacyTransactionInstance: () => (/* binding */ isLegacyTransactionInstance),\n/* harmony export */   serializeTransaction: () => (/* binding */ serializeTransaction),\n/* harmony export */   serializeTransactionMessage: () => (/* binding */ serializeTransactionMessage)\n/* harmony export */ });\nfunction isLegacyTransactionInstance(transaction) {\n    return transaction.version === undefined;\n}\nfunction serializeTransaction(transaction) {\n    return isLegacyTransactionInstance(transaction) ? transaction.serialize({\n        verifySignatures: false,\n        requireAllSignatures: false\n    }) : transaction.serialize();\n}\nfunction serializeTransactionMessage(transaction) {\n    return isLegacyTransactionInstance(transaction) ? transaction.serializeMessage() : transaction.message.serialize();\n}\nfunction addSignature(transaction, publicKey, signature) {\n    if (isLegacyTransactionInstance(transaction)) {\n        transaction.addSignature(publicKey, Buffer.from(signature));\n    } else {\n        const signerPubkeys = transaction.message.staticAccountKeys.slice(0, transaction.message.header.numRequiredSignatures);\n        const signerIndex = signerPubkeys.findIndex((pubkey)=>pubkey.equals(publicKey));\n        if (signerIndex >= 0) {\n            transaction.signatures[signerIndex] = signature;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNvbGZsYXJlLXdhbGxldCttZXRhbWFzay1zZGtAMS4wLjNfQHNvbGFuYSt3ZWIzLmpzQDEuOTguMl9idWZmZXJ1dGlsQDQuMC45X3R5cGVzY3JpcHRANS44LjNfdXRmLTgtdmFsaWRhdGVANS4wLjEwXy9ub2RlX21vZHVsZXMvQHNvbGZsYXJlLXdhbGxldC9tZXRhbWFzay1zZGsvbGliL2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sU0FBU0EsNEJBQTRCQyxXQUFXO0lBQ25ELE9BQU9BLFlBQVlDLE9BQU8sS0FBS0M7QUFDbkM7QUFDTyxTQUFTQyxxQkFBcUJILFdBQVc7SUFDNUMsT0FBT0QsNEJBQTRCQyxlQUM3QkEsWUFBWUksU0FBUyxDQUFDO1FBQ3BCQyxrQkFBa0I7UUFDbEJDLHNCQUFzQjtJQUMxQixLQUNFTixZQUFZSSxTQUFTO0FBQy9CO0FBQ08sU0FBU0csNEJBQTRCUCxXQUFXO0lBQ25ELE9BQU9ELDRCQUE0QkMsZUFDN0JBLFlBQVlRLGdCQUFnQixLQUM1QlIsWUFBWVMsT0FBTyxDQUFDTCxTQUFTO0FBQ3ZDO0FBQ08sU0FBU00sYUFBYVYsV0FBVyxFQUFFVyxTQUFTLEVBQUVDLFNBQVM7SUFDMUQsSUFBSWIsNEJBQTRCQyxjQUFjO1FBQzFDQSxZQUFZVSxZQUFZLENBQUNDLFdBQVdFLE9BQU9DLElBQUksQ0FBQ0Y7SUFDcEQsT0FDSztRQUNELE1BQU1HLGdCQUFnQmYsWUFBWVMsT0FBTyxDQUFDTyxpQkFBaUIsQ0FBQ0MsS0FBSyxDQUFDLEdBQUdqQixZQUFZUyxPQUFPLENBQUNTLE1BQU0sQ0FBQ0MscUJBQXFCO1FBQ3JILE1BQU1DLGNBQWNMLGNBQWNNLFNBQVMsQ0FBQyxDQUFDQyxTQUFXQSxPQUFPQyxNQUFNLENBQUNaO1FBQ3RFLElBQUlTLGVBQWUsR0FBRztZQUNsQnBCLFlBQVl3QixVQUFVLENBQUNKLFlBQVksR0FBR1I7UUFDMUM7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac29sZmxhcmUtd2FsbGV0K21ldGFtYXNrLXNka0AxLjAuM19Ac29sYW5hK3dlYjMuanNAMS45OC4yX2J1ZmZlcnV0aWxANC4wLjlfdHlwZXNjcmlwdEA1LjguM191dGYtOC12YWxpZGF0ZUA1LjAuMTBfL25vZGVfbW9kdWxlcy9Ac29sZmxhcmUtd2FsbGV0L21ldGFtYXNrLXNkay9saWIvZXNtL3V0aWxzLmpzP2UyZWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzTGVnYWN5VHJhbnNhY3Rpb25JbnN0YW5jZSh0cmFuc2FjdGlvbikge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbi52ZXJzaW9uID09PSB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICByZXR1cm4gaXNMZWdhY3lUcmFuc2FjdGlvbkluc3RhbmNlKHRyYW5zYWN0aW9uKVxuICAgICAgICA/IHRyYW5zYWN0aW9uLnNlcmlhbGl6ZSh7XG4gICAgICAgICAgICB2ZXJpZnlTaWduYXR1cmVzOiBmYWxzZSxcbiAgICAgICAgICAgIHJlcXVpcmVBbGxTaWduYXR1cmVzOiBmYWxzZVxuICAgICAgICB9KVxuICAgICAgICA6IHRyYW5zYWN0aW9uLnNlcmlhbGl6ZSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVRyYW5zYWN0aW9uTWVzc2FnZSh0cmFuc2FjdGlvbikge1xuICAgIHJldHVybiBpc0xlZ2FjeVRyYW5zYWN0aW9uSW5zdGFuY2UodHJhbnNhY3Rpb24pXG4gICAgICAgID8gdHJhbnNhY3Rpb24uc2VyaWFsaXplTWVzc2FnZSgpXG4gICAgICAgIDogdHJhbnNhY3Rpb24ubWVzc2FnZS5zZXJpYWxpemUoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRTaWduYXR1cmUodHJhbnNhY3Rpb24sIHB1YmxpY0tleSwgc2lnbmF0dXJlKSB7XG4gICAgaWYgKGlzTGVnYWN5VHJhbnNhY3Rpb25JbnN0YW5jZSh0cmFuc2FjdGlvbikpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uYWRkU2lnbmF0dXJlKHB1YmxpY0tleSwgQnVmZmVyLmZyb20oc2lnbmF0dXJlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzaWduZXJQdWJrZXlzID0gdHJhbnNhY3Rpb24ubWVzc2FnZS5zdGF0aWNBY2NvdW50S2V5cy5zbGljZSgwLCB0cmFuc2FjdGlvbi5tZXNzYWdlLmhlYWRlci5udW1SZXF1aXJlZFNpZ25hdHVyZXMpO1xuICAgICAgICBjb25zdCBzaWduZXJJbmRleCA9IHNpZ25lclB1YmtleXMuZmluZEluZGV4KChwdWJrZXkpID0+IHB1YmtleS5lcXVhbHMocHVibGljS2V5KSk7XG4gICAgICAgIGlmIChzaWduZXJJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5zaWduYXR1cmVzW3NpZ25lckluZGV4XSA9IHNpZ25hdHVyZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJpc0xlZ2FjeVRyYW5zYWN0aW9uSW5zdGFuY2UiLCJ0cmFuc2FjdGlvbiIsInZlcnNpb24iLCJ1bmRlZmluZWQiLCJzZXJpYWxpemVUcmFuc2FjdGlvbiIsInNlcmlhbGl6ZSIsInZlcmlmeVNpZ25hdHVyZXMiLCJyZXF1aXJlQWxsU2lnbmF0dXJlcyIsInNlcmlhbGl6ZVRyYW5zYWN0aW9uTWVzc2FnZSIsInNlcmlhbGl6ZU1lc3NhZ2UiLCJtZXNzYWdlIiwiYWRkU2lnbmF0dXJlIiwicHVibGljS2V5Iiwic2lnbmF0dXJlIiwiQnVmZmVyIiwiZnJvbSIsInNpZ25lclB1YmtleXMiLCJzdGF0aWNBY2NvdW50S2V5cyIsInNsaWNlIiwiaGVhZGVyIiwibnVtUmVxdWlyZWRTaWduYXR1cmVzIiwic2lnbmVySW5kZXgiLCJmaW5kSW5kZXgiLCJwdWJrZXkiLCJlcXVhbHMiLCJzaWduYXR1cmVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solflare-wallet+metamask-sdk@1.0.3_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solflare-wallet/metamask-sdk/lib/esm/utils.js\n");

/***/ })

};
;