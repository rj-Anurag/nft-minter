"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/csv-parse@4.16.3";
exports.ids = ["vendor-chunks/csv-parse@4.16.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/csv-parse@4.16.3/node_modules/csv-parse/lib/ResizeableBuffer.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/csv-parse@4.16.3/node_modules/csv-parse/lib/ResizeableBuffer.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("\nclass ResizeableBuffer {\n    constructor(size = 100){\n        this.size = size;\n        this.length = 0;\n        this.buf = Buffer.alloc(size);\n    }\n    prepend(val) {\n        if (Buffer.isBuffer(val)) {\n            const length = this.length + val.length;\n            if (length >= this.size) {\n                this.resize();\n                if (length >= this.size) {\n                    throw Error(\"INVALID_BUFFER_STATE\");\n                }\n            }\n            const buf = this.buf;\n            this.buf = Buffer.alloc(this.size);\n            val.copy(this.buf, 0);\n            buf.copy(this.buf, val.length);\n            this.length += val.length;\n        } else {\n            const length = this.length++;\n            if (length === this.size) {\n                this.resize();\n            }\n            const buf = this.clone();\n            this.buf[0] = val;\n            buf.copy(this.buf, 1, 0, length);\n        }\n    }\n    append(val) {\n        const length = this.length++;\n        if (length === this.size) {\n            this.resize();\n        }\n        this.buf[length] = val;\n    }\n    clone() {\n        return Buffer.from(this.buf.slice(0, this.length));\n    }\n    resize() {\n        const length = this.length;\n        this.size = this.size * 2;\n        const buf = Buffer.alloc(this.size);\n        this.buf.copy(buf, 0, 0, length);\n        this.buf = buf;\n    }\n    toString(encoding) {\n        if (encoding) {\n            return this.buf.slice(0, this.length).toString(encoding);\n        } else {\n            return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n        }\n    }\n    toJSON() {\n        return this.toString(\"utf8\");\n    }\n    reset() {\n        this.length = 0;\n    }\n}\nmodule.exports = ResizeableBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vY3N2LXBhcnNlQDQuMTYuMy9ub2RlX21vZHVsZXMvY3N2LXBhcnNlL2xpYi9SZXNpemVhYmxlQnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7QUFFQSxNQUFNQTtJQUNKQyxZQUFZQyxPQUFLLEdBQUcsQ0FBQztRQUNuQixJQUFJLENBQUNBLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsR0FBRyxHQUFHQyxPQUFPQyxLQUFLLENBQUNKO0lBQzFCO0lBQ0FLLFFBQVFDLEdBQUcsRUFBQztRQUNWLElBQUdILE9BQU9JLFFBQVEsQ0FBQ0QsTUFBSztZQUN0QixNQUFNTCxTQUFTLElBQUksQ0FBQ0EsTUFBTSxHQUFHSyxJQUFJTCxNQUFNO1lBQ3ZDLElBQUdBLFVBQVUsSUFBSSxDQUFDRCxJQUFJLEVBQUM7Z0JBQ3JCLElBQUksQ0FBQ1EsTUFBTTtnQkFDWCxJQUFHUCxVQUFVLElBQUksQ0FBQ0QsSUFBSSxFQUFDO29CQUNyQixNQUFNUyxNQUFNO2dCQUNkO1lBQ0Y7WUFDQSxNQUFNUCxNQUFNLElBQUksQ0FBQ0EsR0FBRztZQUNwQixJQUFJLENBQUNBLEdBQUcsR0FBR0MsT0FBT0MsS0FBSyxDQUFDLElBQUksQ0FBQ0osSUFBSTtZQUNqQ00sSUFBSUksSUFBSSxDQUFDLElBQUksQ0FBQ1IsR0FBRyxFQUFFO1lBQ25CQSxJQUFJUSxJQUFJLENBQUMsSUFBSSxDQUFDUixHQUFHLEVBQUVJLElBQUlMLE1BQU07WUFDN0IsSUFBSSxDQUFDQSxNQUFNLElBQUlLLElBQUlMLE1BQU07UUFDM0IsT0FBSztZQUNILE1BQU1BLFNBQVMsSUFBSSxDQUFDQSxNQUFNO1lBQzFCLElBQUdBLFdBQVcsSUFBSSxDQUFDRCxJQUFJLEVBQUM7Z0JBQ3RCLElBQUksQ0FBQ1EsTUFBTTtZQUNiO1lBQ0EsTUFBTU4sTUFBTSxJQUFJLENBQUNTLEtBQUs7WUFDdEIsSUFBSSxDQUFDVCxHQUFHLENBQUMsRUFBRSxHQUFHSTtZQUNkSixJQUFJUSxJQUFJLENBQUMsSUFBSSxDQUFDUixHQUFHLEVBQUMsR0FBRyxHQUFHRDtRQUMxQjtJQUNGO0lBQ0FXLE9BQU9OLEdBQUcsRUFBQztRQUNULE1BQU1MLFNBQVMsSUFBSSxDQUFDQSxNQUFNO1FBQzFCLElBQUdBLFdBQVcsSUFBSSxDQUFDRCxJQUFJLEVBQUM7WUFDdEIsSUFBSSxDQUFDUSxNQUFNO1FBQ2I7UUFDQSxJQUFJLENBQUNOLEdBQUcsQ0FBQ0QsT0FBTyxHQUFHSztJQUNyQjtJQUNBSyxRQUFPO1FBQ0wsT0FBT1IsT0FBT1UsSUFBSSxDQUFDLElBQUksQ0FBQ1gsR0FBRyxDQUFDWSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUNiLE1BQU07SUFDbEQ7SUFDQU8sU0FBUTtRQUNOLE1BQU1QLFNBQVMsSUFBSSxDQUFDQSxNQUFNO1FBQzFCLElBQUksQ0FBQ0QsSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxHQUFHO1FBQ3hCLE1BQU1FLE1BQU1DLE9BQU9DLEtBQUssQ0FBQyxJQUFJLENBQUNKLElBQUk7UUFDbEMsSUFBSSxDQUFDRSxHQUFHLENBQUNRLElBQUksQ0FBQ1IsS0FBSSxHQUFHLEdBQUdEO1FBQ3hCLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtJQUNiO0lBQ0FhLFNBQVNDLFFBQVEsRUFBQztRQUNoQixJQUFHQSxVQUFTO1lBQ1YsT0FBTyxJQUFJLENBQUNkLEdBQUcsQ0FBQ1ksS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDYixNQUFNLEVBQUVjLFFBQVEsQ0FBQ0M7UUFDakQsT0FBSztZQUNILE9BQU9DLFdBQVdDLFNBQVMsQ0FBQ0osS0FBSyxDQUFDSyxJQUFJLENBQUMsSUFBSSxDQUFDakIsR0FBRyxDQUFDWSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUNiLE1BQU07UUFDdEU7SUFDRjtJQUNBbUIsU0FBUTtRQUNOLE9BQU8sSUFBSSxDQUFDTCxRQUFRLENBQUM7SUFDdkI7SUFDQU0sUUFBTztRQUNMLElBQUksQ0FBQ3BCLE1BQU0sR0FBRztJQUNoQjtBQUNGO0FBRUFxQixPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vY3N2LXBhcnNlQDQuMTYuMy9ub2RlX21vZHVsZXMvY3N2LXBhcnNlL2xpYi9SZXNpemVhYmxlQnVmZmVyLmpzPzhhMjciXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmNsYXNzIFJlc2l6ZWFibGVCdWZmZXJ7XG4gIGNvbnN0cnVjdG9yKHNpemU9MTAwKXtcbiAgICB0aGlzLnNpemUgPSBzaXplXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gICAgdGhpcy5idWYgPSBCdWZmZXIuYWxsb2Moc2l6ZSlcbiAgfVxuICBwcmVwZW5kKHZhbCl7XG4gICAgaWYoQnVmZmVyLmlzQnVmZmVyKHZhbCkpe1xuICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGggKyB2YWwubGVuZ3RoXG4gICAgICBpZihsZW5ndGggPj0gdGhpcy5zaXplKXtcbiAgICAgICAgdGhpcy5yZXNpemUoKVxuICAgICAgICBpZihsZW5ndGggPj0gdGhpcy5zaXplKXtcbiAgICAgICAgICB0aHJvdyBFcnJvcignSU5WQUxJRF9CVUZGRVJfU1RBVEUnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBidWYgPSB0aGlzLmJ1ZlxuICAgICAgdGhpcy5idWYgPSBCdWZmZXIuYWxsb2ModGhpcy5zaXplKVxuICAgICAgdmFsLmNvcHkodGhpcy5idWYsIDApXG4gICAgICBidWYuY29weSh0aGlzLmJ1ZiwgdmFsLmxlbmd0aClcbiAgICAgIHRoaXMubGVuZ3RoICs9IHZhbC5sZW5ndGhcbiAgICB9ZWxzZXtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKytcbiAgICAgIGlmKGxlbmd0aCA9PT0gdGhpcy5zaXplKXtcbiAgICAgICAgdGhpcy5yZXNpemUoKVxuICAgICAgfVxuICAgICAgY29uc3QgYnVmID0gdGhpcy5jbG9uZSgpXG4gICAgICB0aGlzLmJ1ZlswXSA9IHZhbFxuICAgICAgYnVmLmNvcHkodGhpcy5idWYsMSwgMCwgbGVuZ3RoKVxuICAgIH1cbiAgfVxuICBhcHBlbmQodmFsKXtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCsrXG4gICAgaWYobGVuZ3RoID09PSB0aGlzLnNpemUpe1xuICAgICAgdGhpcy5yZXNpemUoKVxuICAgIH1cbiAgICB0aGlzLmJ1ZltsZW5ndGhdID0gdmFsXG4gIH1cbiAgY2xvbmUoKXtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5idWYuc2xpY2UoMCwgdGhpcy5sZW5ndGgpKVxuICB9XG4gIHJlc2l6ZSgpe1xuICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgdGhpcy5zaXplID0gdGhpcy5zaXplICogMlxuICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYyh0aGlzLnNpemUpXG4gICAgdGhpcy5idWYuY29weShidWYsMCwgMCwgbGVuZ3RoKVxuICAgIHRoaXMuYnVmID0gYnVmXG4gIH1cbiAgdG9TdHJpbmcoZW5jb2Rpbmcpe1xuICAgIGlmKGVuY29kaW5nKXtcbiAgICAgIHJldHVybiB0aGlzLmJ1Zi5zbGljZSgwLCB0aGlzLmxlbmd0aCkudG9TdHJpbmcoZW5jb2RpbmcpXG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLmJ1Zi5zbGljZSgwLCB0aGlzLmxlbmd0aCkpXG4gICAgfVxuICB9XG4gIHRvSlNPTigpe1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCd1dGY4JylcbiAgfVxuICByZXNldCgpe1xuICAgIHRoaXMubGVuZ3RoID0gMFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzaXplYWJsZUJ1ZmZlclxuIl0sIm5hbWVzIjpbIlJlc2l6ZWFibGVCdWZmZXIiLCJjb25zdHJ1Y3RvciIsInNpemUiLCJsZW5ndGgiLCJidWYiLCJCdWZmZXIiLCJhbGxvYyIsInByZXBlbmQiLCJ2YWwiLCJpc0J1ZmZlciIsInJlc2l6ZSIsIkVycm9yIiwiY29weSIsImNsb25lIiwiYXBwZW5kIiwiZnJvbSIsInNsaWNlIiwidG9TdHJpbmciLCJlbmNvZGluZyIsIlVpbnQ4QXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwidG9KU09OIiwicmVzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/csv-parse@4.16.3/node_modules/csv-parse/lib/ResizeableBuffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/csv-parse@4.16.3/node_modules/csv-parse/lib/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/csv-parse@4.16.3/node_modules/csv-parse/lib/index.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\nCSV Parse\n\nPlease look at the [project documentation](https://csv.js.org/parse/) for\nadditional information.\n*/ \nconst { Transform } = __webpack_require__(/*! stream */ \"stream\");\nconst ResizeableBuffer = __webpack_require__(/*! ./ResizeableBuffer */ \"(ssr)/./node_modules/.pnpm/csv-parse@4.16.3/node_modules/csv-parse/lib/ResizeableBuffer.js\");\n// white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\nconst tab = 9;\nconst nl = 10 // \\n, 0x0A in hexadecimal, 10 in decimal\n;\nconst np = 12;\nconst cr = 13 // \\r, 0x0D in hexad√©cimal, 13 in decimal\n;\nconst space = 32;\nconst boms = {\n    // Note, the following are equals:\n    // Buffer.from(\"\\ufeff\")\n    // Buffer.from([239, 187, 191])\n    // Buffer.from('EFBBBF', 'hex')\n    \"utf8\": Buffer.from([\n        239,\n        187,\n        191\n    ]),\n    // Note, the following are equals:\n    // Buffer.from \"\\ufeff\", 'utf16le\n    // Buffer.from([255, 254])\n    \"utf16le\": Buffer.from([\n        255,\n        254\n    ])\n};\nclass Parser extends Transform {\n    constructor(opts = {}){\n        super({\n            ...{\n                readableObjectMode: true\n            },\n            ...opts,\n            encoding: null\n        });\n        this.__originalOptions = opts;\n        this.__normalizeOptions(opts);\n    }\n    __normalizeOptions(opts) {\n        const options = {};\n        // Merge with user options\n        for(let opt in opts){\n            options[underscore(opt)] = opts[opt];\n        }\n        // Normalize option `encoding`\n        // Note: defined first because other options depends on it\n        // to convert chars/strings into buffers.\n        if (options.encoding === undefined || options.encoding === true) {\n            options.encoding = \"utf8\";\n        } else if (options.encoding === null || options.encoding === false) {\n            options.encoding = null;\n        } else if (typeof options.encoding !== \"string\" && options.encoding !== null) {\n            throw new CsvError(\"CSV_INVALID_OPTION_ENCODING\", [\n                \"Invalid option encoding:\",\n                \"encoding must be a string or null to return a buffer,\",\n                `got ${JSON.stringify(options.encoding)}`\n            ], options);\n        }\n        // Normalize option `bom`\n        if (options.bom === undefined || options.bom === null || options.bom === false) {\n            options.bom = false;\n        } else if (options.bom !== true) {\n            throw new CsvError(\"CSV_INVALID_OPTION_BOM\", [\n                \"Invalid option bom:\",\n                \"bom must be true,\",\n                `got ${JSON.stringify(options.bom)}`\n            ], options);\n        }\n        // Normalize option `cast`\n        let fnCastField = null;\n        if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === \"\") {\n            options.cast = undefined;\n        } else if (typeof options.cast === \"function\") {\n            fnCastField = options.cast;\n            options.cast = true;\n        } else if (options.cast !== true) {\n            throw new CsvError(\"CSV_INVALID_OPTION_CAST\", [\n                \"Invalid option cast:\",\n                \"cast must be true or a function,\",\n                `got ${JSON.stringify(options.cast)}`\n            ], options);\n        }\n        // Normalize option `cast_date`\n        if (options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === \"\") {\n            options.cast_date = false;\n        } else if (options.cast_date === true) {\n            options.cast_date = function(value) {\n                const date = Date.parse(value);\n                return !isNaN(date) ? new Date(date) : value;\n            };\n        } else {\n            throw new CsvError(\"CSV_INVALID_OPTION_CAST_DATE\", [\n                \"Invalid option cast_date:\",\n                \"cast_date must be true or a function,\",\n                `got ${JSON.stringify(options.cast_date)}`\n            ], options);\n        }\n        // Normalize option `columns`\n        let fnFirstLineToHeaders = null;\n        if (options.columns === true) {\n            // Fields in the first line are converted as-is to columns\n            fnFirstLineToHeaders = undefined;\n        } else if (typeof options.columns === \"function\") {\n            fnFirstLineToHeaders = options.columns;\n            options.columns = true;\n        } else if (Array.isArray(options.columns)) {\n            options.columns = normalizeColumnsArray(options.columns);\n        } else if (options.columns === undefined || options.columns === null || options.columns === false) {\n            options.columns = false;\n        } else {\n            throw new CsvError(\"CSV_INVALID_OPTION_COLUMNS\", [\n                \"Invalid option columns:\",\n                \"expect an array, a function or true,\",\n                `got ${JSON.stringify(options.columns)}`\n            ], options);\n        }\n        // Normalize option `columns_duplicates_to_array`\n        if (options.columns_duplicates_to_array === undefined || options.columns_duplicates_to_array === null || options.columns_duplicates_to_array === false) {\n            options.columns_duplicates_to_array = false;\n        } else if (options.columns_duplicates_to_array !== true) {\n            throw new CsvError(\"CSV_INVALID_OPTION_COLUMNS_DUPLICATES_TO_ARRAY\", [\n                \"Invalid option columns_duplicates_to_array:\",\n                \"expect an boolean,\",\n                `got ${JSON.stringify(options.columns_duplicates_to_array)}`\n            ], options);\n        } else if (options.columns === false) {\n            throw new CsvError(\"CSV_INVALID_OPTION_COLUMNS_DUPLICATES_TO_ARRAY\", [\n                \"Invalid option columns_duplicates_to_array:\",\n                \"the `columns` mode must be activated.\"\n            ], options);\n        }\n        // Normalize option `comment`\n        if (options.comment === undefined || options.comment === null || options.comment === false || options.comment === \"\") {\n            options.comment = null;\n        } else {\n            if (typeof options.comment === \"string\") {\n                options.comment = Buffer.from(options.comment, options.encoding);\n            }\n            if (!Buffer.isBuffer(options.comment)) {\n                throw new CsvError(\"CSV_INVALID_OPTION_COMMENT\", [\n                    \"Invalid option comment:\",\n                    \"comment must be a buffer or a string,\",\n                    `got ${JSON.stringify(options.comment)}`\n                ], options);\n            }\n        }\n        // Normalize option `delimiter`\n        const delimiter_json = JSON.stringify(options.delimiter);\n        if (!Array.isArray(options.delimiter)) options.delimiter = [\n            options.delimiter\n        ];\n        if (options.delimiter.length === 0) {\n            throw new CsvError(\"CSV_INVALID_OPTION_DELIMITER\", [\n                \"Invalid option delimiter:\",\n                \"delimiter must be a non empty string or buffer or array of string|buffer,\",\n                `got ${delimiter_json}`\n            ], options);\n        }\n        options.delimiter = options.delimiter.map(function(delimiter) {\n            if (delimiter === undefined || delimiter === null || delimiter === false) {\n                return Buffer.from(\",\", options.encoding);\n            }\n            if (typeof delimiter === \"string\") {\n                delimiter = Buffer.from(delimiter, options.encoding);\n            }\n            if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {\n                throw new CsvError(\"CSV_INVALID_OPTION_DELIMITER\", [\n                    \"Invalid option delimiter:\",\n                    \"delimiter must be a non empty string or buffer or array of string|buffer,\",\n                    `got ${delimiter_json}`\n                ], options);\n            }\n            return delimiter;\n        });\n        // Normalize option `escape`\n        if (options.escape === undefined || options.escape === true) {\n            options.escape = Buffer.from('\"', options.encoding);\n        } else if (typeof options.escape === \"string\") {\n            options.escape = Buffer.from(options.escape, options.encoding);\n        } else if (options.escape === null || options.escape === false) {\n            options.escape = null;\n        }\n        if (options.escape !== null) {\n            if (!Buffer.isBuffer(options.escape)) {\n                throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`);\n            }\n        }\n        // Normalize option `from`\n        if (options.from === undefined || options.from === null) {\n            options.from = 1;\n        } else {\n            if (typeof options.from === \"string\" && /\\d+/.test(options.from)) {\n                options.from = parseInt(options.from);\n            }\n            if (Number.isInteger(options.from)) {\n                if (options.from < 0) {\n                    throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`);\n                }\n            } else {\n                throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`);\n            }\n        }\n        // Normalize option `from_line`\n        if (options.from_line === undefined || options.from_line === null) {\n            options.from_line = 1;\n        } else {\n            if (typeof options.from_line === \"string\" && /\\d+/.test(options.from_line)) {\n                options.from_line = parseInt(options.from_line);\n            }\n            if (Number.isInteger(options.from_line)) {\n                if (options.from_line <= 0) {\n                    throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`);\n                }\n            } else {\n                throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`);\n            }\n        }\n        // Normalize options `ignore_last_delimiters`\n        if (options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null) {\n            options.ignore_last_delimiters = false;\n        } else if (typeof options.ignore_last_delimiters === \"number\") {\n            options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n            if (options.ignore_last_delimiters === 0) {\n                options.ignore_last_delimiters = false;\n            }\n        } else if (typeof options.ignore_last_delimiters !== \"boolean\") {\n            throw new CsvError(\"CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS\", [\n                \"Invalid option `ignore_last_delimiters`:\",\n                \"the value must be a boolean value or an integer,\",\n                `got ${JSON.stringify(options.ignore_last_delimiters)}`\n            ], options);\n        }\n        if (options.ignore_last_delimiters === true && options.columns === false) {\n            throw new CsvError(\"CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS\", [\n                \"The option `ignore_last_delimiters`\",\n                \"requires the activation of the `columns` option\"\n            ], options);\n        }\n        // Normalize option `info`\n        if (options.info === undefined || options.info === null || options.info === false) {\n            options.info = false;\n        } else if (options.info !== true) {\n            throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`);\n        }\n        // Normalize option `max_record_size`\n        if (options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false) {\n            options.max_record_size = 0;\n        } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0) {\n        // Great, nothing to do\n        } else if (typeof options.max_record_size === \"string\" && /\\d+/.test(options.max_record_size)) {\n            options.max_record_size = parseInt(options.max_record_size);\n        } else {\n            throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`);\n        }\n        // Normalize option `objname`\n        if (options.objname === undefined || options.objname === null || options.objname === false) {\n            options.objname = undefined;\n        } else if (Buffer.isBuffer(options.objname)) {\n            if (options.objname.length === 0) {\n                throw new Error(`Invalid Option: objname must be a non empty buffer`);\n            }\n            if (options.encoding === null) {\n            // Don't call `toString`, leave objname as a buffer\n            } else {\n                options.objname = options.objname.toString(options.encoding);\n            }\n        } else if (typeof options.objname === \"string\") {\n            if (options.objname.length === 0) {\n                throw new Error(`Invalid Option: objname must be a non empty string`);\n            }\n        // Great, nothing to do\n        } else {\n            throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`);\n        }\n        // Normalize option `on_record`\n        if (options.on_record === undefined || options.on_record === null) {\n            options.on_record = undefined;\n        } else if (typeof options.on_record !== \"function\") {\n            throw new CsvError(\"CSV_INVALID_OPTION_ON_RECORD\", [\n                \"Invalid option `on_record`:\",\n                \"expect a function,\",\n                `got ${JSON.stringify(options.on_record)}`\n            ], options);\n        }\n        // Normalize option `quote`\n        if (options.quote === null || options.quote === false || options.quote === \"\") {\n            options.quote = null;\n        } else {\n            if (options.quote === undefined || options.quote === true) {\n                options.quote = Buffer.from('\"', options.encoding);\n            } else if (typeof options.quote === \"string\") {\n                options.quote = Buffer.from(options.quote, options.encoding);\n            }\n            if (!Buffer.isBuffer(options.quote)) {\n                throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`);\n            }\n        }\n        // Normalize option `raw`\n        if (options.raw === undefined || options.raw === null || options.raw === false) {\n            options.raw = false;\n        } else if (options.raw !== true) {\n            throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`);\n        }\n        // Normalize option `record_delimiter`\n        if (!options.record_delimiter) {\n            options.record_delimiter = [];\n        } else if (!Array.isArray(options.record_delimiter)) {\n            options.record_delimiter = [\n                options.record_delimiter\n            ];\n        }\n        options.record_delimiter = options.record_delimiter.map(function(rd) {\n            if (typeof rd === \"string\") {\n                rd = Buffer.from(rd, options.encoding);\n            }\n            return rd;\n        });\n        // Normalize option `relax`\n        if (typeof options.relax === \"boolean\") {\n        // Great, nothing to do\n        } else if (options.relax === undefined || options.relax === null) {\n            options.relax = false;\n        } else {\n            throw new Error(`Invalid Option: relax must be a boolean, got ${JSON.stringify(options.relax)}`);\n        }\n        // Normalize option `relax_column_count`\n        if (typeof options.relax_column_count === \"boolean\") {\n        // Great, nothing to do\n        } else if (options.relax_column_count === undefined || options.relax_column_count === null) {\n            options.relax_column_count = false;\n        } else {\n            throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`);\n        }\n        if (typeof options.relax_column_count_less === \"boolean\") {\n        // Great, nothing to do\n        } else if (options.relax_column_count_less === undefined || options.relax_column_count_less === null) {\n            options.relax_column_count_less = false;\n        } else {\n            throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`);\n        }\n        if (typeof options.relax_column_count_more === \"boolean\") {\n        // Great, nothing to do\n        } else if (options.relax_column_count_more === undefined || options.relax_column_count_more === null) {\n            options.relax_column_count_more = false;\n        } else {\n            throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`);\n        }\n        // Normalize option `skip_empty_lines`\n        if (typeof options.skip_empty_lines === \"boolean\") {\n        // Great, nothing to do\n        } else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {\n            options.skip_empty_lines = false;\n        } else {\n            throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`);\n        }\n        // Normalize option `skip_lines_with_empty_values`\n        if (typeof options.skip_lines_with_empty_values === \"boolean\") {\n        // Great, nothing to do\n        } else if (options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null) {\n            options.skip_lines_with_empty_values = false;\n        } else {\n            throw new Error(`Invalid Option: skip_lines_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_lines_with_empty_values)}`);\n        }\n        // Normalize option `skip_lines_with_error`\n        if (typeof options.skip_lines_with_error === \"boolean\") {\n        // Great, nothing to do\n        } else if (options.skip_lines_with_error === undefined || options.skip_lines_with_error === null) {\n            options.skip_lines_with_error = false;\n        } else {\n            throw new Error(`Invalid Option: skip_lines_with_error must be a boolean, got ${JSON.stringify(options.skip_lines_with_error)}`);\n        }\n        // Normalize option `rtrim`\n        if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {\n            options.rtrim = false;\n        } else if (options.rtrim !== true) {\n            throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`);\n        }\n        // Normalize option `ltrim`\n        if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {\n            options.ltrim = false;\n        } else if (options.ltrim !== true) {\n            throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`);\n        }\n        // Normalize option `trim`\n        if (options.trim === undefined || options.trim === null || options.trim === false) {\n            options.trim = false;\n        } else if (options.trim !== true) {\n            throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`);\n        }\n        // Normalize options `trim`, `ltrim` and `rtrim`\n        if (options.trim === true && opts.ltrim !== false) {\n            options.ltrim = true;\n        } else if (options.ltrim !== true) {\n            options.ltrim = false;\n        }\n        if (options.trim === true && opts.rtrim !== false) {\n            options.rtrim = true;\n        } else if (options.rtrim !== true) {\n            options.rtrim = false;\n        }\n        // Normalize option `to`\n        if (options.to === undefined || options.to === null) {\n            options.to = -1;\n        } else {\n            if (typeof options.to === \"string\" && /\\d+/.test(options.to)) {\n                options.to = parseInt(options.to);\n            }\n            if (Number.isInteger(options.to)) {\n                if (options.to <= 0) {\n                    throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`);\n                }\n            } else {\n                throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`);\n            }\n        }\n        // Normalize option `to_line`\n        if (options.to_line === undefined || options.to_line === null) {\n            options.to_line = -1;\n        } else {\n            if (typeof options.to_line === \"string\" && /\\d+/.test(options.to_line)) {\n                options.to_line = parseInt(options.to_line);\n            }\n            if (Number.isInteger(options.to_line)) {\n                if (options.to_line <= 0) {\n                    throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`);\n                }\n            } else {\n                throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`);\n            }\n        }\n        this.info = {\n            bytes: 0,\n            comment_lines: 0,\n            empty_lines: 0,\n            invalid_field_length: 0,\n            lines: 1,\n            records: 0\n        };\n        this.options = options;\n        this.state = {\n            bomSkipped: false,\n            bufBytesStart: 0,\n            castField: fnCastField,\n            commenting: false,\n            // Current error encountered by a record\n            error: undefined,\n            enabled: options.from_line === 1,\n            escaping: false,\n            // escapeIsQuote: options.escape === options.quote,\n            escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n            // columns can be `false`, `true`, `Array`\n            expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,\n            field: new ResizeableBuffer(20),\n            firstLineToHeaders: fnFirstLineToHeaders,\n            needMoreDataSize: Math.max(// Skip if the remaining buffer smaller than comment\n            options.comment !== null ? options.comment.length : 0, // Skip if the remaining buffer can be delimiter\n            ...options.delimiter.map((delimiter)=>delimiter.length), // Skip if the remaining buffer can be escape sequence\n            options.quote !== null ? options.quote.length : 0),\n            previousBuf: undefined,\n            quoting: false,\n            stop: false,\n            rawBuffer: new ResizeableBuffer(100),\n            record: [],\n            recordHasError: false,\n            record_length: 0,\n            recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max(...options.record_delimiter.map((v)=>v.length)),\n            trimChars: [\n                Buffer.from(\" \", options.encoding)[0],\n                Buffer.from(\"\t\", options.encoding)[0]\n            ],\n            wasQuoting: false,\n            wasRowDelimiter: false\n        };\n    }\n    // Implementation of `Transform._transform`\n    _transform(buf, encoding, callback) {\n        if (this.state.stop === true) {\n            return;\n        }\n        const err = this.__parse(buf, false);\n        if (err !== undefined) {\n            this.state.stop = true;\n        }\n        callback(err);\n    }\n    // Implementation of `Transform._flush`\n    _flush(callback) {\n        if (this.state.stop === true) {\n            return;\n        }\n        const err = this.__parse(undefined, true);\n        callback(err);\n    }\n    // Central parser implementation\n    __parse(nextBuf, end) {\n        const { bom, comment, escape, from_line, ltrim, max_record_size, quote, raw, relax, rtrim, skip_empty_lines, to, to_line } = this.options;\n        let { record_delimiter } = this.options;\n        const { bomSkipped, previousBuf, rawBuffer, escapeIsQuote } = this.state;\n        let buf;\n        if (previousBuf === undefined) {\n            if (nextBuf === undefined) {\n                // Handle empty string\n                this.push(null);\n                return;\n            } else {\n                buf = nextBuf;\n            }\n        } else if (previousBuf !== undefined && nextBuf === undefined) {\n            buf = previousBuf;\n        } else {\n            buf = Buffer.concat([\n                previousBuf,\n                nextBuf\n            ]);\n        }\n        // Handle UTF BOM\n        if (bomSkipped === false) {\n            if (bom === false) {\n                this.state.bomSkipped = true;\n            } else if (buf.length < 3) {\n                // No enough data\n                if (end === false) {\n                    // Wait for more data\n                    this.state.previousBuf = buf;\n                    return;\n                }\n            } else {\n                for(let encoding in boms){\n                    if (boms[encoding].compare(buf, 0, boms[encoding].length) === 0) {\n                        // Skip BOM\n                        let bomLength = boms[encoding].length;\n                        this.state.bufBytesStart += bomLength;\n                        buf = buf.slice(bomLength);\n                        // Renormalize original options with the new encoding\n                        this.__normalizeOptions({\n                            ...this.__originalOptions,\n                            encoding: encoding\n                        });\n                        break;\n                    }\n                }\n                this.state.bomSkipped = true;\n            }\n        }\n        const bufLen = buf.length;\n        let pos;\n        for(pos = 0; pos < bufLen; pos++){\n            // Ensure we get enough space to look ahead\n            // There should be a way to move this out of the loop\n            if (this.__needMoreData(pos, bufLen, end)) {\n                break;\n            }\n            if (this.state.wasRowDelimiter === true) {\n                this.info.lines++;\n                this.state.wasRowDelimiter = false;\n            }\n            if (to_line !== -1 && this.info.lines > to_line) {\n                this.state.stop = true;\n                this.push(null);\n                return;\n            }\n            // Auto discovery of record_delimiter, unix, mac and windows supported\n            if (this.state.quoting === false && record_delimiter.length === 0) {\n                const record_delimiterCount = this.__autoDiscoverRecordDelimiter(buf, pos);\n                if (record_delimiterCount) {\n                    record_delimiter = this.options.record_delimiter;\n                }\n            }\n            const chr = buf[pos];\n            if (raw === true) {\n                rawBuffer.append(chr);\n            }\n            if ((chr === cr || chr === nl) && this.state.wasRowDelimiter === false) {\n                this.state.wasRowDelimiter = true;\n            }\n            // Previous char was a valid escape char\n            // treat the current char as a regular char\n            if (this.state.escaping === true) {\n                this.state.escaping = false;\n            } else {\n                // Escape is only active inside quoted fields\n                // We are quoting, the char is an escape chr and there is a chr to escape\n                // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n                if (escape !== null && this.state.quoting === true && this.__isEscape(buf, pos, chr) && pos + escape.length < bufLen) {\n                    if (escapeIsQuote) {\n                        if (this.__isQuote(buf, pos + escape.length)) {\n                            this.state.escaping = true;\n                            pos += escape.length - 1;\n                            continue;\n                        }\n                    } else {\n                        this.state.escaping = true;\n                        pos += escape.length - 1;\n                        continue;\n                    }\n                }\n                // Not currently escaping and chr is a quote\n                // TODO: need to compare bytes instead of single char\n                if (this.state.commenting === false && this.__isQuote(buf, pos)) {\n                    if (this.state.quoting === true) {\n                        const nextChr = buf[pos + quote.length];\n                        const isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr);\n                        const isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos + quote.length, nextChr);\n                        const isNextChrDelimiter = this.__isDelimiter(buf, pos + quote.length, nextChr);\n                        const isNextChrRecordDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRecordDelimiter(buf, pos + quote.length) : this.__isRecordDelimiter(nextChr, buf, pos + quote.length);\n                        // Escape a quote\n                        // Treat next char as a regular character\n                        if (escape !== null && this.__isEscape(buf, pos, chr) && this.__isQuote(buf, pos + escape.length)) {\n                            pos += escape.length - 1;\n                        } else if (!nextChr || isNextChrDelimiter || isNextChrRecordDelimiter || isNextChrComment || isNextChrTrimable) {\n                            this.state.quoting = false;\n                            this.state.wasQuoting = true;\n                            pos += quote.length - 1;\n                            continue;\n                        } else if (relax === false) {\n                            const err = this.__error(new CsvError(\"CSV_INVALID_CLOSING_QUOTE\", [\n                                \"Invalid Closing Quote:\",\n                                `got \"${String.fromCharCode(nextChr)}\"`,\n                                `at line ${this.info.lines}`,\n                                \"instead of delimiter, record delimiter, trimable character\",\n                                \"(if activated) or comment\"\n                            ], this.options, this.__infoField()));\n                            if (err !== undefined) return err;\n                        } else {\n                            this.state.quoting = false;\n                            this.state.wasQuoting = true;\n                            this.state.field.prepend(quote);\n                            pos += quote.length - 1;\n                        }\n                    } else {\n                        if (this.state.field.length !== 0) {\n                            // In relax mode, treat opening quote preceded by chrs as regular\n                            if (relax === false) {\n                                const err = this.__error(new CsvError(\"INVALID_OPENING_QUOTE\", [\n                                    \"Invalid Opening Quote:\",\n                                    `a quote is found inside a field at line ${this.info.lines}`\n                                ], this.options, this.__infoField(), {\n                                    field: this.state.field\n                                }));\n                                if (err !== undefined) return err;\n                            }\n                        } else {\n                            this.state.quoting = true;\n                            pos += quote.length - 1;\n                            continue;\n                        }\n                    }\n                }\n                if (this.state.quoting === false) {\n                    let recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);\n                    if (recordDelimiterLength !== 0) {\n                        // Do not emit comments which take a full line\n                        const skipCommentLine = this.state.commenting && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0;\n                        if (skipCommentLine) {\n                            this.info.comment_lines++;\n                        // Skip full comment line\n                        } else {\n                            // Activate records emition if above from_line\n                            if (this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1 : 0) >= from_line) {\n                                this.state.enabled = true;\n                                this.__resetField();\n                                this.__resetRecord();\n                                pos += recordDelimiterLength - 1;\n                                continue;\n                            }\n                            // Skip if line is empty and skip_empty_lines activated\n                            if (skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0) {\n                                this.info.empty_lines++;\n                                pos += recordDelimiterLength - 1;\n                                continue;\n                            }\n                            this.info.bytes = this.state.bufBytesStart + pos;\n                            const errField = this.__onField();\n                            if (errField !== undefined) return errField;\n                            this.info.bytes = this.state.bufBytesStart + pos + recordDelimiterLength;\n                            const errRecord = this.__onRecord();\n                            if (errRecord !== undefined) return errRecord;\n                            if (to !== -1 && this.info.records >= to) {\n                                this.state.stop = true;\n                                this.push(null);\n                                return;\n                            }\n                        }\n                        this.state.commenting = false;\n                        pos += recordDelimiterLength - 1;\n                        continue;\n                    }\n                    if (this.state.commenting) {\n                        continue;\n                    }\n                    const commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr);\n                    if (commentCount !== 0) {\n                        this.state.commenting = true;\n                        continue;\n                    }\n                    let delimiterLength = this.__isDelimiter(buf, pos, chr);\n                    if (delimiterLength !== 0) {\n                        this.info.bytes = this.state.bufBytesStart + pos;\n                        const errField = this.__onField();\n                        if (errField !== undefined) return errField;\n                        pos += delimiterLength - 1;\n                        continue;\n                    }\n                }\n            }\n            if (this.state.commenting === false) {\n                if (max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size) {\n                    const err = this.__error(new CsvError(\"CSV_MAX_RECORD_SIZE\", [\n                        \"Max Record Size:\",\n                        \"record exceed the maximum number of tolerated bytes\",\n                        `of ${max_record_size}`,\n                        `at line ${this.info.lines}`\n                    ], this.options, this.__infoField()));\n                    if (err !== undefined) return err;\n                }\n            }\n            const lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr);\n            // rtrim in non quoting is handle in __onField\n            const rappend = rtrim === false || this.state.wasQuoting === false;\n            if (lappend === true && rappend === true) {\n                this.state.field.append(chr);\n            } else if (rtrim === true && !this.__isCharTrimable(chr)) {\n                const err = this.__error(new CsvError(\"CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE\", [\n                    \"Invalid Closing Quote:\",\n                    \"found non trimable byte after quote\",\n                    `at line ${this.info.lines}`\n                ], this.options, this.__infoField()));\n                if (err !== undefined) return err;\n            }\n        }\n        if (end === true) {\n            // Ensure we are not ending in a quoting state\n            if (this.state.quoting === true) {\n                const err = this.__error(new CsvError(\"CSV_QUOTE_NOT_CLOSED\", [\n                    \"Quote Not Closed:\",\n                    `the parsing is finished with an opening quote at line ${this.info.lines}`\n                ], this.options, this.__infoField()));\n                if (err !== undefined) return err;\n            } else {\n                // Skip last line if it has no characters\n                if (this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0) {\n                    this.info.bytes = this.state.bufBytesStart + pos;\n                    const errField = this.__onField();\n                    if (errField !== undefined) return errField;\n                    const errRecord = this.__onRecord();\n                    if (errRecord !== undefined) return errRecord;\n                } else if (this.state.wasRowDelimiter === true) {\n                    this.info.empty_lines++;\n                } else if (this.state.commenting === true) {\n                    this.info.comment_lines++;\n                }\n            }\n        } else {\n            this.state.bufBytesStart += pos;\n            this.state.previousBuf = buf.slice(pos);\n        }\n        if (this.state.wasRowDelimiter === true) {\n            this.info.lines++;\n            this.state.wasRowDelimiter = false;\n        }\n    }\n    __onRecord() {\n        const { columns, columns_duplicates_to_array, encoding, info, from, relax_column_count, relax_column_count_less, relax_column_count_more, raw, skip_lines_with_empty_values } = this.options;\n        const { enabled, record } = this.state;\n        if (enabled === false) {\n            return this.__resetRecord();\n        }\n        // Convert the first line into column names\n        const recordLength = record.length;\n        if (columns === true) {\n            if (skip_lines_with_empty_values === true && isRecordEmpty(record)) {\n                this.__resetRecord();\n                return;\n            }\n            return this.__firstLineToColumns(record);\n        }\n        if (columns === false && this.info.records === 0) {\n            this.state.expectedRecordLength = recordLength;\n        }\n        if (recordLength !== this.state.expectedRecordLength) {\n            const err = columns === false ? // Todo: rename CSV_INCONSISTENT_RECORD_LENGTH to\n            // CSV_RECORD_INCONSISTENT_FIELDS_LENGTH\n            new CsvError(\"CSV_INCONSISTENT_RECORD_LENGTH\", [\n                \"Invalid Record Length:\",\n                `expect ${this.state.expectedRecordLength},`,\n                `got ${recordLength} on line ${this.info.lines}`\n            ], this.options, this.__infoField(), {\n                record: record\n            }) : // Todo: rename CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH to\n            // CSV_RECORD_INCONSISTENT_COLUMNS\n            new CsvError(\"CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH\", [\n                \"Invalid Record Length:\",\n                `columns length is ${columns.length},`,\n                `got ${recordLength} on line ${this.info.lines}`\n            ], this.options, this.__infoField(), {\n                record: record\n            });\n            if (relax_column_count === true || relax_column_count_less === true && recordLength < this.state.expectedRecordLength || relax_column_count_more === true && recordLength > this.state.expectedRecordLength) {\n                this.info.invalid_field_length++;\n                this.state.error = err;\n            // Error is undefined with skip_lines_with_error\n            } else {\n                const finalErr = this.__error(err);\n                if (finalErr) return finalErr;\n            }\n        }\n        if (skip_lines_with_empty_values === true && isRecordEmpty(record)) {\n            this.__resetRecord();\n            return;\n        }\n        if (this.state.recordHasError === true) {\n            this.__resetRecord();\n            this.state.recordHasError = false;\n            return;\n        }\n        this.info.records++;\n        if (from === 1 || this.info.records >= from) {\n            // With columns, records are object\n            if (columns !== false) {\n                const obj = {};\n                // Transform record array to an object\n                for(let i = 0, l = record.length; i < l; i++){\n                    if (columns[i] === undefined || columns[i].disabled) continue;\n                    // Turn duplicate columns into an array\n                    if (columns_duplicates_to_array === true && obj[columns[i].name] !== undefined) {\n                        if (Array.isArray(obj[columns[i].name])) {\n                            obj[columns[i].name] = obj[columns[i].name].concat(record[i]);\n                        } else {\n                            obj[columns[i].name] = [\n                                obj[columns[i].name],\n                                record[i]\n                            ];\n                        }\n                    } else {\n                        obj[columns[i].name] = record[i];\n                    }\n                }\n                const { objname } = this.options;\n                // Without objname (default)\n                if (objname === undefined) {\n                    if (raw === true || info === true) {\n                        const err = this.__push(Object.assign({\n                            record: obj\n                        }, raw === true ? {\n                            raw: this.state.rawBuffer.toString(encoding)\n                        } : {}, info === true ? {\n                            info: this.__infoRecord()\n                        } : {}));\n                        if (err) {\n                            return err;\n                        }\n                    } else {\n                        const err = this.__push(obj);\n                        if (err) {\n                            return err;\n                        }\n                    }\n                // With objname (default)\n                } else {\n                    if (raw === true || info === true) {\n                        const err = this.__push(Object.assign({\n                            record: [\n                                obj[objname],\n                                obj\n                            ]\n                        }, raw === true ? {\n                            raw: this.state.rawBuffer.toString(encoding)\n                        } : {}, info === true ? {\n                            info: this.__infoRecord()\n                        } : {}));\n                        if (err) {\n                            return err;\n                        }\n                    } else {\n                        const err = this.__push([\n                            obj[objname],\n                            obj\n                        ]);\n                        if (err) {\n                            return err;\n                        }\n                    }\n                }\n            // Without columns, records are array\n            } else {\n                if (raw === true || info === true) {\n                    const err = this.__push(Object.assign({\n                        record: record\n                    }, raw === true ? {\n                        raw: this.state.rawBuffer.toString(encoding)\n                    } : {}, info === true ? {\n                        info: this.__infoRecord()\n                    } : {}));\n                    if (err) {\n                        return err;\n                    }\n                } else {\n                    const err = this.__push(record);\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n        }\n        this.__resetRecord();\n    }\n    __firstLineToColumns(record) {\n        const { firstLineToHeaders } = this.state;\n        try {\n            const headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);\n            if (!Array.isArray(headers)) {\n                return this.__error(new CsvError(\"CSV_INVALID_COLUMN_MAPPING\", [\n                    \"Invalid Column Mapping:\",\n                    \"expect an array from column function,\",\n                    `got ${JSON.stringify(headers)}`\n                ], this.options, this.__infoField(), {\n                    headers: headers\n                }));\n            }\n            const normalizedHeaders = normalizeColumnsArray(headers);\n            this.state.expectedRecordLength = normalizedHeaders.length;\n            this.options.columns = normalizedHeaders;\n            this.__resetRecord();\n            return;\n        } catch (err) {\n            return err;\n        }\n    }\n    __resetRecord() {\n        if (this.options.raw === true) {\n            this.state.rawBuffer.reset();\n        }\n        this.state.error = undefined;\n        this.state.record = [];\n        this.state.record_length = 0;\n    }\n    __onField() {\n        const { cast, encoding, rtrim, max_record_size } = this.options;\n        const { enabled, wasQuoting } = this.state;\n        // Short circuit for the from_line options\n        if (enabled === false) {\n            return this.__resetField();\n        }\n        let field = this.state.field.toString(encoding);\n        if (rtrim === true && wasQuoting === false) {\n            field = field.trimRight();\n        }\n        if (cast === true) {\n            const [err, f] = this.__cast(field);\n            if (err !== undefined) return err;\n            field = f;\n        }\n        this.state.record.push(field);\n        // Increment record length if record size must not exceed a limit\n        if (max_record_size !== 0 && typeof field === \"string\") {\n            this.state.record_length += field.length;\n        }\n        this.__resetField();\n    }\n    __resetField() {\n        this.state.field.reset();\n        this.state.wasQuoting = false;\n    }\n    __push(record) {\n        const { on_record } = this.options;\n        if (on_record !== undefined) {\n            const info = this.__infoRecord();\n            try {\n                record = on_record.call(null, record, info);\n            } catch (err) {\n                return err;\n            }\n            if (record === undefined || record === null) {\n                return;\n            }\n        }\n        this.push(record);\n    }\n    // Return a tuple with the error and the casted value\n    __cast(field) {\n        const { columns, relax_column_count } = this.options;\n        const isColumns = Array.isArray(columns);\n        // Dont loose time calling cast\n        // because the final record is an object\n        // and this field can't be associated to a key present in columns\n        if (isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length) {\n            return [\n                undefined,\n                undefined\n            ];\n        }\n        if (this.state.castField !== null) {\n            try {\n                const info = this.__infoField();\n                return [\n                    undefined,\n                    this.state.castField.call(null, field, info)\n                ];\n            } catch (err) {\n                return [\n                    err\n                ];\n            }\n        }\n        if (this.__isFloat(field)) {\n            return [\n                undefined,\n                parseFloat(field)\n            ];\n        } else if (this.options.cast_date !== false) {\n            const info = this.__infoField();\n            return [\n                undefined,\n                this.options.cast_date.call(null, field, info)\n            ];\n        }\n        return [\n            undefined,\n            field\n        ];\n    }\n    // Helper to test if a character is a space or a line delimiter\n    __isCharTrimable(chr) {\n        return chr === space || chr === tab || chr === cr || chr === nl || chr === np;\n    }\n    // Keep it in case we implement the `cast_int` option\n    // __isInt(value){\n    //   // return Number.isInteger(parseInt(value))\n    //   // return !isNaN( parseInt( obj ) );\n    //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n    // }\n    __isFloat(value) {\n        return value - parseFloat(value) + 1 >= 0 // Borrowed from jquery\n        ;\n    }\n    __compareBytes(sourceBuf, targetBuf, targetPos, firstByte) {\n        if (sourceBuf[0] !== firstByte) return 0;\n        const sourceLength = sourceBuf.length;\n        for(let i = 1; i < sourceLength; i++){\n            if (sourceBuf[i] !== targetBuf[targetPos + i]) return 0;\n        }\n        return sourceLength;\n    }\n    __needMoreData(i, bufLen, end) {\n        if (end) return false;\n        const { quote } = this.options;\n        const { quoting, needMoreDataSize, recordDelimiterMaxLength } = this.state;\n        const numOfCharLeft = bufLen - i - 1;\n        const requiredLength = Math.max(needMoreDataSize, // Skip if the remaining buffer smaller than record delimiter\n        recordDelimiterMaxLength, // Skip if the remaining buffer can be record delimiter following the closing quote\n        // 1 is for quote.length\n        quoting ? quote.length + recordDelimiterMaxLength : 0);\n        return numOfCharLeft < requiredLength;\n    }\n    __isDelimiter(buf, pos, chr) {\n        const { delimiter, ignore_last_delimiters } = this.options;\n        if (ignore_last_delimiters === true && this.state.record.length === this.options.columns.length - 1) {\n            return 0;\n        } else if (ignore_last_delimiters !== false && typeof ignore_last_delimiters === \"number\" && this.state.record.length === ignore_last_delimiters - 1) {\n            return 0;\n        }\n        loop1: for(let i = 0; i < delimiter.length; i++){\n            const del = delimiter[i];\n            if (del[0] === chr) {\n                for(let j = 1; j < del.length; j++){\n                    if (del[j] !== buf[pos + j]) continue loop1;\n                }\n                return del.length;\n            }\n        }\n        return 0;\n    }\n    __isRecordDelimiter(chr, buf, pos) {\n        const { record_delimiter } = this.options;\n        const recordDelimiterLength = record_delimiter.length;\n        loop1: for(let i = 0; i < recordDelimiterLength; i++){\n            const rd = record_delimiter[i];\n            const rdLength = rd.length;\n            if (rd[0] !== chr) {\n                continue;\n            }\n            for(let j = 1; j < rdLength; j++){\n                if (rd[j] !== buf[pos + j]) {\n                    continue loop1;\n                }\n            }\n            return rd.length;\n        }\n        return 0;\n    }\n    __isEscape(buf, pos, chr) {\n        const { escape } = this.options;\n        if (escape === null) return false;\n        const l = escape.length;\n        if (escape[0] === chr) {\n            for(let i = 0; i < l; i++){\n                if (escape[i] !== buf[pos + i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    __isQuote(buf, pos) {\n        const { quote } = this.options;\n        if (quote === null) return false;\n        const l = quote.length;\n        for(let i = 0; i < l; i++){\n            if (quote[i] !== buf[pos + i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    __autoDiscoverRecordDelimiter(buf, pos) {\n        const { encoding } = this.options;\n        const chr = buf[pos];\n        if (chr === cr) {\n            if (buf[pos + 1] === nl) {\n                this.options.record_delimiter.push(Buffer.from(\"\\r\\n\", encoding));\n                this.state.recordDelimiterMaxLength = 2;\n                return 2;\n            } else {\n                this.options.record_delimiter.push(Buffer.from(\"\\r\", encoding));\n                this.state.recordDelimiterMaxLength = 1;\n                return 1;\n            }\n        } else if (chr === nl) {\n            this.options.record_delimiter.push(Buffer.from(\"\\n\", encoding));\n            this.state.recordDelimiterMaxLength = 1;\n            return 1;\n        }\n        return 0;\n    }\n    __error(msg) {\n        const { skip_lines_with_error } = this.options;\n        const err = typeof msg === \"string\" ? new Error(msg) : msg;\n        if (skip_lines_with_error) {\n            this.state.recordHasError = true;\n            this.emit(\"skip\", err);\n            return undefined;\n        } else {\n            return err;\n        }\n    }\n    __infoDataSet() {\n        return {\n            ...this.info,\n            columns: this.options.columns\n        };\n    }\n    __infoRecord() {\n        const { columns } = this.options;\n        return {\n            ...this.__infoDataSet(),\n            error: this.state.error,\n            header: columns === true,\n            index: this.state.record.length\n        };\n    }\n    __infoField() {\n        const { columns } = this.options;\n        const isColumns = Array.isArray(columns);\n        return {\n            ...this.__infoRecord(),\n            column: isColumns === true ? columns.length > this.state.record.length ? columns[this.state.record.length].name : null : this.state.record.length,\n            quoting: this.state.wasQuoting\n        };\n    }\n}\nconst parse = function() {\n    let data, options, callback;\n    for(let i in arguments){\n        const argument = arguments[i];\n        const type = typeof argument;\n        if (data === undefined && (typeof argument === \"string\" || Buffer.isBuffer(argument))) {\n            data = argument;\n        } else if (options === undefined && isObject(argument)) {\n            options = argument;\n        } else if (callback === undefined && type === \"function\") {\n            callback = argument;\n        } else {\n            throw new CsvError(\"CSV_INVALID_ARGUMENT\", [\n                \"Invalid argument:\",\n                `got ${JSON.stringify(argument)} at index ${i}`\n            ], options || {});\n        }\n    }\n    const parser = new Parser(options);\n    if (callback) {\n        const records = options === undefined || options.objname === undefined ? [] : {};\n        parser.on(\"readable\", function() {\n            let record;\n            while((record = this.read()) !== null){\n                if (options === undefined || options.objname === undefined) {\n                    records.push(record);\n                } else {\n                    records[record[0]] = record[1];\n                }\n            }\n        });\n        parser.on(\"error\", function(err) {\n            callback(err, undefined, parser.__infoDataSet());\n        });\n        parser.on(\"end\", function() {\n            callback(undefined, records, parser.__infoDataSet());\n        });\n    }\n    if (data !== undefined) {\n        // Give a chance for events to be registered later\n        if (typeof setImmediate === \"function\") {\n            setImmediate(function() {\n                parser.write(data);\n                parser.end();\n            });\n        } else {\n            parser.write(data);\n            parser.end();\n        }\n    }\n    return parser;\n};\nclass CsvError extends Error {\n    constructor(code, message, options, ...contexts){\n        if (Array.isArray(message)) message = message.join(\" \");\n        super(message);\n        if (Error.captureStackTrace !== undefined) {\n            Error.captureStackTrace(this, CsvError);\n        }\n        this.code = code;\n        for (const context of contexts){\n            for(const key in context){\n                const value = context[key];\n                this[key] = Buffer.isBuffer(value) ? value.toString(options.encoding) : value == null ? value : JSON.parse(JSON.stringify(value));\n            }\n        }\n    }\n}\nparse.Parser = Parser;\nparse.CsvError = CsvError;\nmodule.exports = parse;\nconst underscore = function(str) {\n    return str.replace(/([A-Z])/g, function(_, match) {\n        return \"_\" + match.toLowerCase();\n    });\n};\nconst isObject = function(obj) {\n    return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n};\nconst isRecordEmpty = function(record) {\n    return record.every((field)=>field == null || field.toString && field.toString().trim() === \"\");\n};\nconst normalizeColumnsArray = function(columns) {\n    const normalizedColumns = [];\n    for(let i = 0, l = columns.length; i < l; i++){\n        const column = columns[i];\n        if (column === undefined || column === null || column === false) {\n            normalizedColumns[i] = {\n                disabled: true\n            };\n        } else if (typeof column === \"string\") {\n            normalizedColumns[i] = {\n                name: column\n            };\n        } else if (isObject(column)) {\n            if (typeof column.name !== \"string\") {\n                throw new CsvError(\"CSV_OPTION_COLUMNS_MISSING_NAME\", [\n                    \"Option columns missing name:\",\n                    `property \"name\" is required at position ${i}`,\n                    \"when column is an object literal\"\n                ]);\n            }\n            normalizedColumns[i] = column;\n        } else {\n            throw new CsvError(\"CSV_INVALID_COLUMN_DEFINITION\", [\n                \"Invalid column definition:\",\n                \"expect a string or a literal object,\",\n                `got ${JSON.stringify(column)} at position ${i}`\n            ]);\n        }\n    }\n    return normalizedColumns;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/csv-parse@4.16.3/node_modules/csv-parse/lib/index.js\n");

/***/ })

};
;