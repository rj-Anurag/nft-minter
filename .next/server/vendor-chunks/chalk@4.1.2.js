"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chalk@4.1.2";
exports.ids = ["vendor-chunks/chalk@4.1.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ansiStyles = __webpack_require__(/*! ansi-styles */ \"(ssr)/./node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js\");\nconst { stdout: stdoutColor, stderr: stderrColor } = __webpack_require__(/*! supports-color */ \"(ssr)/./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js\");\nconst { stringReplaceAll, stringEncaseCRLFWithFirstIndex } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js\");\nconst { isArray } = Array;\n// `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\nconst levelMapping = [\n    \"ansi\",\n    \"ansi\",\n    \"ansi256\",\n    \"ansi16m\"\n];\nconst styles = Object.create(null);\nconst applyOptions = (object, options = {})=>{\n    if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n        throw new Error(\"The `level` option should be an integer from 0 to 3\");\n    }\n    // Detect level if not set manually\n    const colorLevel = stdoutColor ? stdoutColor.level : 0;\n    object.level = options.level === undefined ? colorLevel : options.level;\n};\nclass ChalkClass {\n    constructor(options){\n        // eslint-disable-next-line no-constructor-return\n        return chalkFactory(options);\n    }\n}\nconst chalkFactory = (options)=>{\n    const chalk = {};\n    applyOptions(chalk, options);\n    chalk.template = (...arguments_)=>chalkTag(chalk.template, ...arguments_);\n    Object.setPrototypeOf(chalk, Chalk.prototype);\n    Object.setPrototypeOf(chalk.template, chalk);\n    chalk.template.constructor = ()=>{\n        throw new Error(\"`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.\");\n    };\n    chalk.template.Instance = ChalkClass;\n    return chalk.template;\n};\nfunction Chalk(options) {\n    return chalkFactory(options);\n}\nfor (const [styleName, style] of Object.entries(ansiStyles)){\n    styles[styleName] = {\n        get () {\n            const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n            Object.defineProperty(this, styleName, {\n                value: builder\n            });\n            return builder;\n        }\n    };\n}\nstyles.visible = {\n    get () {\n        const builder = createBuilder(this, this._styler, true);\n        Object.defineProperty(this, \"visible\", {\n            value: builder\n        });\n        return builder;\n    }\n};\nconst usedModels = [\n    \"rgb\",\n    \"hex\",\n    \"keyword\",\n    \"hsl\",\n    \"hsv\",\n    \"hwb\",\n    \"ansi\",\n    \"ansi256\"\n];\nfor (const model of usedModels){\n    styles[model] = {\n        get () {\n            const { level } = this;\n            return function(...arguments_) {\n                const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n                return createBuilder(this, styler, this._isEmpty);\n            };\n        }\n    };\n}\nfor (const model of usedModels){\n    const bgModel = \"bg\" + model[0].toUpperCase() + model.slice(1);\n    styles[bgModel] = {\n        get () {\n            const { level } = this;\n            return function(...arguments_) {\n                const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n                return createBuilder(this, styler, this._isEmpty);\n            };\n        }\n    };\n}\nconst proto = Object.defineProperties(()=>{}, {\n    ...styles,\n    level: {\n        enumerable: true,\n        get () {\n            return this._generator.level;\n        },\n        set (level) {\n            this._generator.level = level;\n        }\n    }\n});\nconst createStyler = (open, close, parent)=>{\n    let openAll;\n    let closeAll;\n    if (parent === undefined) {\n        openAll = open;\n        closeAll = close;\n    } else {\n        openAll = parent.openAll + open;\n        closeAll = close + parent.closeAll;\n    }\n    return {\n        open,\n        close,\n        openAll,\n        closeAll,\n        parent\n    };\n};\nconst createBuilder = (self, _styler, _isEmpty)=>{\n    const builder = (...arguments_)=>{\n        if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {\n            // Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`\n            return applyStyle(builder, chalkTag(builder, ...arguments_));\n        }\n        // Single argument is hot path, implicit coercion is faster than anything\n        // eslint-disable-next-line no-implicit-coercion\n        return applyStyle(builder, arguments_.length === 1 ? \"\" + arguments_[0] : arguments_.join(\" \"));\n    };\n    // We alter the prototype because we must return a function, but there is\n    // no way to create a function with a different prototype\n    Object.setPrototypeOf(builder, proto);\n    builder._generator = self;\n    builder._styler = _styler;\n    builder._isEmpty = _isEmpty;\n    return builder;\n};\nconst applyStyle = (self, string)=>{\n    if (self.level <= 0 || !string) {\n        return self._isEmpty ? \"\" : string;\n    }\n    let styler = self._styler;\n    if (styler === undefined) {\n        return string;\n    }\n    const { openAll, closeAll } = styler;\n    if (string.indexOf(\"\\x1b\") !== -1) {\n        while(styler !== undefined){\n            // Replace any instances already present with a re-opening code\n            // otherwise only the part of the string until said closing code\n            // will be colored, and the rest will simply be 'plain'.\n            string = stringReplaceAll(string, styler.close, styler.open);\n            styler = styler.parent;\n        }\n    }\n    // We can move both next actions out of loop, because remaining actions in loop won't have\n    // any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n    // after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n    const lfIndex = string.indexOf(\"\\n\");\n    if (lfIndex !== -1) {\n        string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n    }\n    return openAll + string + closeAll;\n};\nlet template;\nconst chalkTag = (chalk, ...strings)=>{\n    const [firstString] = strings;\n    if (!isArray(firstString) || !isArray(firstString.raw)) {\n        // If chalk() was called by itself or with a string,\n        // return the string itself as a string.\n        return strings.join(\" \");\n    }\n    const arguments_ = strings.slice(1);\n    const parts = [\n        firstString.raw[0]\n    ];\n    for(let i = 1; i < firstString.length; i++){\n        parts.push(String(arguments_[i - 1]).replace(/[{}\\\\]/g, \"\\\\$&\"), String(firstString.raw[i]));\n    }\n    if (template === undefined) {\n        template = __webpack_require__(/*! ./templates */ \"(ssr)/./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js\");\n    }\n    return template(chalk, parts.join(\"\"));\n};\nObject.defineProperties(Chalk.prototype, styles);\nconst chalk = Chalk(); // eslint-disable-line new-cap\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({\n    level: stderrColor ? stderrColor.level : 0\n}); // eslint-disable-line new-cap\nchalk.stderr.supportsColor = stderrColor;\nmodule.exports = chalk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js ***!
  \*******************************************************************************/
/***/ ((module) => {

eval("\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|{[a-f\\d]{1,6}})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\nconst ESCAPES = new Map([\n    [\n        \"n\",\n        \"\\n\"\n    ],\n    [\n        \"r\",\n        \"\\r\"\n    ],\n    [\n        \"t\",\n        \"\t\"\n    ],\n    [\n        \"b\",\n        \"\\b\"\n    ],\n    [\n        \"f\",\n        \"\\f\"\n    ],\n    [\n        \"v\",\n        \"\\v\"\n    ],\n    [\n        \"0\",\n        \"\\x00\"\n    ],\n    [\n        \"\\\\\",\n        \"\\\\\"\n    ],\n    [\n        \"e\",\n        \"\\x1b\"\n    ],\n    [\n        \"a\",\n        \"\\x07\"\n    ]\n]);\nfunction unescape(c) {\n    const u = c[0] === \"u\";\n    const bracket = c[1] === \"{\";\n    if (u && !bracket && c.length === 5 || c[0] === \"x\" && c.length === 3) {\n        return String.fromCharCode(parseInt(c.slice(1), 16));\n    }\n    if (u && bracket) {\n        return String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n    }\n    return ESCAPES.get(c) || c;\n}\nfunction parseArguments(name, arguments_) {\n    const results = [];\n    const chunks = arguments_.trim().split(/\\s*,\\s*/g);\n    let matches;\n    for (const chunk of chunks){\n        const number = Number(chunk);\n        if (!Number.isNaN(number)) {\n            results.push(number);\n        } else if (matches = chunk.match(STRING_REGEX)) {\n            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character)=>escape ? unescape(escape) : character));\n        } else {\n            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n        }\n    }\n    return results;\n}\nfunction parseStyle(style) {\n    STYLE_REGEX.lastIndex = 0;\n    const results = [];\n    let matches;\n    while((matches = STYLE_REGEX.exec(style)) !== null){\n        const name = matches[1];\n        if (matches[2]) {\n            const args = parseArguments(name, matches[2]);\n            results.push([\n                name\n            ].concat(args));\n        } else {\n            results.push([\n                name\n            ]);\n        }\n    }\n    return results;\n}\nfunction buildStyle(chalk, styles) {\n    const enabled = {};\n    for (const layer of styles){\n        for (const style of layer.styles){\n            enabled[style[0]] = layer.inverse ? null : style.slice(1);\n        }\n    }\n    let current = chalk;\n    for (const [styleName, styles] of Object.entries(enabled)){\n        if (!Array.isArray(styles)) {\n            continue;\n        }\n        if (!(styleName in current)) {\n            throw new Error(`Unknown Chalk style: ${styleName}`);\n        }\n        current = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n    }\n    return current;\n}\nmodule.exports = (chalk, temporary)=>{\n    const styles = [];\n    const chunks = [];\n    let chunk = [];\n    // eslint-disable-next-line max-params\n    temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character)=>{\n        if (escapeCharacter) {\n            chunk.push(unescape(escapeCharacter));\n        } else if (style) {\n            const string = chunk.join(\"\");\n            chunk = [];\n            chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n            styles.push({\n                inverse,\n                styles: parseStyle(style)\n            });\n        } else if (close) {\n            if (styles.length === 0) {\n                throw new Error(\"Found extraneous } in Chalk template literal\");\n            }\n            chunks.push(buildStyle(chalk, styles)(chunk.join(\"\")));\n            chunk = [];\n            styles.pop();\n        } else {\n            chunk.push(character);\n        }\n    });\n    chunks.push(chunk.join(\"\"));\n    if (styles.length > 0) {\n        const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? \"\" : \"s\"} (\\`}\\`)`;\n        throw new Error(errMessage);\n    }\n    return chunks.join(\"\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js ***!
  \**************************************************************************/
/***/ ((module) => {

eval("\nconst stringReplaceAll = (string, substring, replacer)=>{\n    let index = string.indexOf(substring);\n    if (index === -1) {\n        return string;\n    }\n    const substringLength = substring.length;\n    let endIndex = 0;\n    let returnValue = \"\";\n    do {\n        returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;\n        endIndex = index + substringLength;\n        index = string.indexOf(substring, endIndex);\n    }while (index !== -1);\n    returnValue += string.substr(endIndex);\n    return returnValue;\n};\nconst stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index)=>{\n    let endIndex = 0;\n    let returnValue = \"\";\n    do {\n        const gotCR = string[index - 1] === \"\\r\";\n        returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? \"\\r\\n\" : \"\\n\") + postfix;\n        endIndex = index + 1;\n        index = string.indexOf(\"\\n\", endIndex);\n    }while (index !== -1);\n    returnValue += string.substr(endIndex);\n    return returnValue;\n};\nmodule.exports = {\n    stringReplaceAll,\n    stringEncaseCRLFWithFirstIndex\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vY2hhbGtANC4xLjIvbm9kZV9tb2R1bGVzL2NoYWxrL3NvdXJjZS91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsbUJBQW1CLENBQUNDLFFBQVFDLFdBQVdDO0lBQzVDLElBQUlDLFFBQVFILE9BQU9JLE9BQU8sQ0FBQ0g7SUFDM0IsSUFBSUUsVUFBVSxDQUFDLEdBQUc7UUFDakIsT0FBT0g7SUFDUjtJQUVBLE1BQU1LLGtCQUFrQkosVUFBVUssTUFBTTtJQUN4QyxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsY0FBYztJQUNsQixHQUFHO1FBQ0ZBLGVBQWVSLE9BQU9TLE1BQU0sQ0FBQ0YsVUFBVUosUUFBUUksWUFBWU4sWUFBWUM7UUFDdkVLLFdBQVdKLFFBQVFFO1FBQ25CRixRQUFRSCxPQUFPSSxPQUFPLENBQUNILFdBQVdNO0lBQ25DLFFBQVNKLFVBQVUsQ0FBQyxHQUFHO0lBRXZCSyxlQUFlUixPQUFPUyxNQUFNLENBQUNGO0lBQzdCLE9BQU9DO0FBQ1I7QUFFQSxNQUFNRSxpQ0FBaUMsQ0FBQ1YsUUFBUVcsUUFBUUMsU0FBU1Q7SUFDaEUsSUFBSUksV0FBVztJQUNmLElBQUlDLGNBQWM7SUFDbEIsR0FBRztRQUNGLE1BQU1LLFFBQVFiLE1BQU0sQ0FBQ0csUUFBUSxFQUFFLEtBQUs7UUFDcENLLGVBQWVSLE9BQU9TLE1BQU0sQ0FBQ0YsVUFBVSxDQUFDTSxRQUFRVixRQUFRLElBQUlBLEtBQUksSUFBS0ksWUFBWUksU0FBVUUsQ0FBQUEsUUFBUSxTQUFTLElBQUcsSUFBS0Q7UUFDcEhMLFdBQVdKLFFBQVE7UUFDbkJBLFFBQVFILE9BQU9JLE9BQU8sQ0FBQyxNQUFNRztJQUM5QixRQUFTSixVQUFVLENBQUMsR0FBRztJQUV2QkssZUFBZVIsT0FBT1MsTUFBTSxDQUFDRjtJQUM3QixPQUFPQztBQUNSO0FBRUFNLE9BQU9DLE9BQU8sR0FBRztJQUNoQmhCO0lBQ0FXO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2NoYWxrQDQuMS4yL25vZGVfbW9kdWxlcy9jaGFsay9zb3VyY2UvdXRpbC5qcz8wNDdhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaW5nUmVwbGFjZUFsbCA9IChzdHJpbmcsIHN1YnN0cmluZywgcmVwbGFjZXIpID0+IHtcblx0bGV0IGluZGV4ID0gc3RyaW5nLmluZGV4T2Yoc3Vic3RyaW5nKTtcblx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdHJldHVybiBzdHJpbmc7XG5cdH1cblxuXHRjb25zdCBzdWJzdHJpbmdMZW5ndGggPSBzdWJzdHJpbmcubGVuZ3RoO1xuXHRsZXQgZW5kSW5kZXggPSAwO1xuXHRsZXQgcmV0dXJuVmFsdWUgPSAnJztcblx0ZG8ge1xuXHRcdHJldHVyblZhbHVlICs9IHN0cmluZy5zdWJzdHIoZW5kSW5kZXgsIGluZGV4IC0gZW5kSW5kZXgpICsgc3Vic3RyaW5nICsgcmVwbGFjZXI7XG5cdFx0ZW5kSW5kZXggPSBpbmRleCArIHN1YnN0cmluZ0xlbmd0aDtcblx0XHRpbmRleCA9IHN0cmluZy5pbmRleE9mKHN1YnN0cmluZywgZW5kSW5kZXgpO1xuXHR9IHdoaWxlIChpbmRleCAhPT0gLTEpO1xuXG5cdHJldHVyblZhbHVlICs9IHN0cmluZy5zdWJzdHIoZW5kSW5kZXgpO1xuXHRyZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuXG5jb25zdCBzdHJpbmdFbmNhc2VDUkxGV2l0aEZpcnN0SW5kZXggPSAoc3RyaW5nLCBwcmVmaXgsIHBvc3RmaXgsIGluZGV4KSA9PiB7XG5cdGxldCBlbmRJbmRleCA9IDA7XG5cdGxldCByZXR1cm5WYWx1ZSA9ICcnO1xuXHRkbyB7XG5cdFx0Y29uc3QgZ290Q1IgPSBzdHJpbmdbaW5kZXggLSAxXSA9PT0gJ1xccic7XG5cdFx0cmV0dXJuVmFsdWUgKz0gc3RyaW5nLnN1YnN0cihlbmRJbmRleCwgKGdvdENSID8gaW5kZXggLSAxIDogaW5kZXgpIC0gZW5kSW5kZXgpICsgcHJlZml4ICsgKGdvdENSID8gJ1xcclxcbicgOiAnXFxuJykgKyBwb3N0Zml4O1xuXHRcdGVuZEluZGV4ID0gaW5kZXggKyAxO1xuXHRcdGluZGV4ID0gc3RyaW5nLmluZGV4T2YoJ1xcbicsIGVuZEluZGV4KTtcblx0fSB3aGlsZSAoaW5kZXggIT09IC0xKTtcblxuXHRyZXR1cm5WYWx1ZSArPSBzdHJpbmcuc3Vic3RyKGVuZEluZGV4KTtcblx0cmV0dXJuIHJldHVyblZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHN0cmluZ1JlcGxhY2VBbGwsXG5cdHN0cmluZ0VuY2FzZUNSTEZXaXRoRmlyc3RJbmRleFxufTtcbiJdLCJuYW1lcyI6WyJzdHJpbmdSZXBsYWNlQWxsIiwic3RyaW5nIiwic3Vic3RyaW5nIiwicmVwbGFjZXIiLCJpbmRleCIsImluZGV4T2YiLCJzdWJzdHJpbmdMZW5ndGgiLCJsZW5ndGgiLCJlbmRJbmRleCIsInJldHVyblZhbHVlIiwic3Vic3RyIiwic3RyaW5nRW5jYXNlQ1JMRldpdGhGaXJzdEluZGV4IiwicHJlZml4IiwicG9zdGZpeCIsImdvdENSIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js\n");

/***/ })

};
;