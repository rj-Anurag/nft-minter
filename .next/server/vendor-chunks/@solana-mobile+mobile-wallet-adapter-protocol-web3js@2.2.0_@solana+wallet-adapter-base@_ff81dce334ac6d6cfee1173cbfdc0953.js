"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana-mobile+mobile-wallet-adapter-protocol-web3js@2.2.0_@solana+wallet-adapter-base@_ff81dce334ac6d6cfee1173cbfdc0953";
exports.ids = ["vendor-chunks/@solana-mobile+mobile-wallet-adapter-protocol-web3js@2.2.0_@solana+wallet-adapter-base@_ff81dce334ac6d6cfee1173cbfdc0953"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@solana-mobile+mobile-wallet-adapter-protocol-web3js@2.2.0_@solana+wallet-adapter-base@_ff81dce334ac6d6cfee1173cbfdc0953/node_modules/@solana-mobile/mobile-wallet-adapter-protocol-web3js/lib/esm/index.js":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solana-mobile+mobile-wallet-adapter-protocol-web3js@2.2.0_@solana+wallet-adapter-base@_ff81dce334ac6d6cfee1173cbfdc0953/node_modules/@solana-mobile/mobile-wallet-adapter-protocol-web3js/lib/esm/index.js ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRemoteScenario: () => (/* binding */ startRemoteScenario),\n/* harmony export */   transact: () => (/* binding */ transact)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/.pnpm/@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _solana_mobile_mobile_wallet_adapter_protocol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana-mobile/mobile-wallet-adapter-protocol */ \"(ssr)/./node_modules/.pnpm/@solana-mobile+mobile-wallet-adapter-protocol@2.2.1_@solana+wallet-adapter-base@0.9.26__40d9b862a771b1e532816b65419832b4/node_modules/@solana-mobile/mobile-wallet-adapter-protocol/lib/esm/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js\");\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction fromUint8Array(byteArray) {\n    return window.btoa(String.fromCharCode.call(null, ...byteArray));\n}\nfunction toUint8Array(base64EncodedByteArray) {\n    return new Uint8Array(window.atob(base64EncodedByteArray).split(\"\").map((c)=>c.charCodeAt(0)));\n}\nfunction getPayloadFromTransaction(transaction) {\n    const serializedTransaction = \"version\" in transaction ? transaction.serialize() : transaction.serialize({\n        requireAllSignatures: false,\n        verifySignatures: false\n    });\n    const payload = fromUint8Array(serializedTransaction);\n    return payload;\n}\nfunction getTransactionFromWireMessage(byteArray) {\n    const numSignatures = byteArray[0];\n    const messageOffset = numSignatures * _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SIGNATURE_LENGTH_IN_BYTES + 1;\n    const version = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedMessage.deserializeMessageVersion(byteArray.slice(messageOffset, byteArray.length));\n    if (version === \"legacy\") {\n        return _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.from(byteArray);\n    } else {\n        return _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedTransaction.deserialize(byteArray);\n    }\n}\nfunction transact(callback, config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const augmentedCallback = (wallet)=>{\n            return callback(augmentWalletAPI(wallet));\n        };\n        return yield (0,_solana_mobile_mobile_wallet_adapter_protocol__WEBPACK_IMPORTED_MODULE_1__.transact)(augmentedCallback, config);\n    });\n}\nfunction startRemoteScenario(config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const { wallet, close, associationUrl } = yield (0,_solana_mobile_mobile_wallet_adapter_protocol__WEBPACK_IMPORTED_MODULE_1__.startRemoteScenario)(config);\n        const augmentedPromise = wallet.then((wallet)=>{\n            return augmentWalletAPI(wallet);\n        });\n        return {\n            wallet: augmentedPromise,\n            close,\n            associationUrl\n        };\n    });\n}\nfunction augmentWalletAPI(wallet) {\n    return new Proxy({}, {\n        get (target, p) {\n            if (target[p] == null) {\n                switch(p){\n                    case \"signAndSendTransactions\":\n                        target[p] = function(_a) {\n                            var { minContextSlot, commitment, skipPreflight, maxRetries, waitForCommitmentToSendNextTransaction, transactions } = _a, rest = __rest(_a, [\n                                \"minContextSlot\",\n                                \"commitment\",\n                                \"skipPreflight\",\n                                \"maxRetries\",\n                                \"waitForCommitmentToSendNextTransaction\",\n                                \"transactions\"\n                            ]);\n                            return __awaiter(this, void 0, void 0, function*() {\n                                const payloads = transactions.map(getPayloadFromTransaction);\n                                const options = {\n                                    min_context_slot: minContextSlot,\n                                    commitment: commitment,\n                                    skip_preflight: skipPreflight,\n                                    max_retries: maxRetries,\n                                    wait_for_commitment_to_send_next_transaction: waitForCommitmentToSendNextTransaction\n                                };\n                                const { signatures: base64EncodedSignatures } = yield wallet.signAndSendTransactions(Object.assign(Object.assign(Object.assign({}, rest), Object.values(options).some((element)=>element != null) ? {\n                                    options: options\n                                } : null), {\n                                    payloads\n                                }));\n                                const signatures = base64EncodedSignatures.map(toUint8Array).map(bs58__WEBPACK_IMPORTED_MODULE_2__.encode);\n                                return signatures;\n                            });\n                        };\n                        break;\n                    case \"signMessages\":\n                        target[p] = function(_a) {\n                            var { payloads } = _a, rest = __rest(_a, [\n                                \"payloads\"\n                            ]);\n                            return __awaiter(this, void 0, void 0, function*() {\n                                const base64EncodedPayloads = payloads.map(fromUint8Array);\n                                const { signed_payloads: base64EncodedSignedMessages } = yield wallet.signMessages(Object.assign(Object.assign({}, rest), {\n                                    payloads: base64EncodedPayloads\n                                }));\n                                const signedMessages = base64EncodedSignedMessages.map(toUint8Array);\n                                return signedMessages;\n                            });\n                        };\n                        break;\n                    case \"signTransactions\":\n                        target[p] = function(_a) {\n                            var { transactions } = _a, rest = __rest(_a, [\n                                \"transactions\"\n                            ]);\n                            return __awaiter(this, void 0, void 0, function*() {\n                                const payloads = transactions.map(getPayloadFromTransaction);\n                                const { signed_payloads: base64EncodedCompiledTransactions } = yield wallet.signTransactions(Object.assign(Object.assign({}, rest), {\n                                    payloads\n                                }));\n                                const compiledTransactions = base64EncodedCompiledTransactions.map(toUint8Array);\n                                const signedTransactions = compiledTransactions.map(getTransactionFromWireMessage);\n                                return signedTransactions;\n                            });\n                        };\n                        break;\n                    default:\n                        {\n                            target[p] = wallet[p];\n                            break;\n                        }\n                }\n            }\n            return target[p];\n        },\n        defineProperty () {\n            return false;\n        },\n        deleteProperty () {\n            return false;\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solana-mobile+mobile-wallet-adapter-protocol-web3js@2.2.0_@solana+wallet-adapter-base@_ff81dce334ac6d6cfee1173cbfdc0953/node_modules/@solana-mobile/mobile-wallet-adapter-protocol-web3js/lib/esm/index.js\n");

/***/ })

};
;