"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-errors@1.8.1";
exports.ids = ["vendor-chunks/http-errors@1.8.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/http-errors@1.8.1/node_modules/http-errors/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/http-errors@1.8.1/node_modules/http-errors/index.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * http-errors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var deprecate = __webpack_require__(/*! depd */ \"(ssr)/./node_modules/.pnpm/depd@1.1.2/node_modules/depd/index.js\")(\"http-errors\");\nvar setPrototypeOf = __webpack_require__(/*! setprototypeof */ \"(ssr)/./node_modules/.pnpm/setprototypeof@1.2.0/node_modules/setprototypeof/index.js\");\nvar statuses = __webpack_require__(/*! statuses */ \"(ssr)/./node_modules/.pnpm/statuses@1.5.0/node_modules/statuses/index.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nvar toIdentifier = __webpack_require__(/*! toidentifier */ \"(ssr)/./node_modules/.pnpm/toidentifier@1.0.1/node_modules/toidentifier/index.js\");\n/**\n * Module exports.\n * @public\n */ module.exports = createError;\nmodule.exports.HttpError = createHttpErrorConstructor();\nmodule.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);\n// Populate exports for all constructors\npopulateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);\n/**\n * Get the code class of a status code.\n * @private\n */ function codeClass(status) {\n    return Number(String(status).charAt(0) + \"00\");\n}\n/**\n * Create a new HTTP Error.\n *\n * @returns {Error}\n * @public\n */ function createError() {\n    // so much arity going on ~_~\n    var err;\n    var msg;\n    var status = 500;\n    var props = {};\n    for(var i = 0; i < arguments.length; i++){\n        var arg = arguments[i];\n        if (arg instanceof Error) {\n            err = arg;\n            status = err.status || err.statusCode || status;\n            continue;\n        }\n        switch(typeof arg){\n            case \"string\":\n                msg = arg;\n                break;\n            case \"number\":\n                status = arg;\n                if (i !== 0) {\n                    deprecate(\"non-first-argument status code; replace with createError(\" + arg + \", ...)\");\n                }\n                break;\n            case \"object\":\n                props = arg;\n                break;\n        }\n    }\n    if (typeof status === \"number\" && (status < 400 || status >= 600)) {\n        deprecate(\"non-error status code; use only 4xx or 5xx status codes\");\n    }\n    if (typeof status !== \"number\" || !statuses[status] && (status < 400 || status >= 600)) {\n        status = 500;\n    }\n    // constructor\n    var HttpError = createError[status] || createError[codeClass(status)];\n    if (!err) {\n        // create error\n        err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);\n        Error.captureStackTrace(err, createError);\n    }\n    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {\n        // add properties to generic error\n        err.expose = status < 500;\n        err.status = err.statusCode = status;\n    }\n    for(var key in props){\n        if (key !== \"status\" && key !== \"statusCode\") {\n            err[key] = props[key];\n        }\n    }\n    return err;\n}\n/**\n * Create HTTP error abstract base class.\n * @private\n */ function createHttpErrorConstructor() {\n    function HttpError() {\n        throw new TypeError(\"cannot construct abstract class\");\n    }\n    inherits(HttpError, Error);\n    return HttpError;\n}\n/**\n * Create a constructor for a client error.\n * @private\n */ function createClientErrorConstructor(HttpError, name, code) {\n    var className = toClassName(name);\n    function ClientError(message) {\n        // create the error object\n        var msg = message != null ? message : statuses[code];\n        var err = new Error(msg);\n        // capture a stack trace to the construction point\n        Error.captureStackTrace(err, ClientError);\n        // adjust the [[Prototype]]\n        setPrototypeOf(err, ClientError.prototype);\n        // redefine the error message\n        Object.defineProperty(err, \"message\", {\n            enumerable: true,\n            configurable: true,\n            value: msg,\n            writable: true\n        });\n        // redefine the error name\n        Object.defineProperty(err, \"name\", {\n            enumerable: false,\n            configurable: true,\n            value: className,\n            writable: true\n        });\n        return err;\n    }\n    inherits(ClientError, HttpError);\n    nameFunc(ClientError, className);\n    ClientError.prototype.status = code;\n    ClientError.prototype.statusCode = code;\n    ClientError.prototype.expose = true;\n    return ClientError;\n}\n/**\n * Create function to test is a value is a HttpError.\n * @private\n */ function createIsHttpErrorFunction(HttpError) {\n    return function isHttpError(val) {\n        if (!val || typeof val !== \"object\") {\n            return false;\n        }\n        if (val instanceof HttpError) {\n            return true;\n        }\n        return val instanceof Error && typeof val.expose === \"boolean\" && typeof val.statusCode === \"number\" && val.status === val.statusCode;\n    };\n}\n/**\n * Create a constructor for a server error.\n * @private\n */ function createServerErrorConstructor(HttpError, name, code) {\n    var className = toClassName(name);\n    function ServerError(message) {\n        // create the error object\n        var msg = message != null ? message : statuses[code];\n        var err = new Error(msg);\n        // capture a stack trace to the construction point\n        Error.captureStackTrace(err, ServerError);\n        // adjust the [[Prototype]]\n        setPrototypeOf(err, ServerError.prototype);\n        // redefine the error message\n        Object.defineProperty(err, \"message\", {\n            enumerable: true,\n            configurable: true,\n            value: msg,\n            writable: true\n        });\n        // redefine the error name\n        Object.defineProperty(err, \"name\", {\n            enumerable: false,\n            configurable: true,\n            value: className,\n            writable: true\n        });\n        return err;\n    }\n    inherits(ServerError, HttpError);\n    nameFunc(ServerError, className);\n    ServerError.prototype.status = code;\n    ServerError.prototype.statusCode = code;\n    ServerError.prototype.expose = false;\n    return ServerError;\n}\n/**\n * Set the name of a function, if possible.\n * @private\n */ function nameFunc(func, name) {\n    var desc = Object.getOwnPropertyDescriptor(func, \"name\");\n    if (desc && desc.configurable) {\n        desc.value = name;\n        Object.defineProperty(func, \"name\", desc);\n    }\n}\n/**\n * Populate the exports object with constructors for every error class.\n * @private\n */ function populateConstructorExports(exports, codes, HttpError) {\n    codes.forEach(function forEachCode(code) {\n        var CodeError;\n        var name = toIdentifier(statuses[code]);\n        switch(codeClass(code)){\n            case 400:\n                CodeError = createClientErrorConstructor(HttpError, name, code);\n                break;\n            case 500:\n                CodeError = createServerErrorConstructor(HttpError, name, code);\n                break;\n        }\n        if (CodeError) {\n            // export the constructor\n            exports[code] = CodeError;\n            exports[name] = CodeError;\n        }\n    });\n    // backwards-compatibility\n    exports[\"I'mateapot\"] = deprecate.function(exports.ImATeapot, '\"I\\'mateapot\"; use \"ImATeapot\" instead');\n}\n/**\n * Get a class name from a name identifier.\n * @private\n */ function toClassName(name) {\n    return name.substr(-5) !== \"Error\" ? name + \"Error\" : name;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/http-errors@1.8.1/node_modules/http-errors/index.js\n");

/***/ })

};
;