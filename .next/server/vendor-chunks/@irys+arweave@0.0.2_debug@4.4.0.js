"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@irys+arweave@0.0.2_debug@4.4.0";
exports.ids = ["vendor-chunks/@irys+arweave@0.0.2_debug@4.4.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/arweave.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/arweave.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arweave: () => (/* binding */ Arweave),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blocks.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/blocks.js\");\n/* harmony import */ var _chunks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/chunks.js\");\n/* harmony import */ var _lib_crypto_crypto_augment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/crypto/crypto-augment.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/crypto/crypto-augment.js\");\n/* harmony import */ var _lib_deepHash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/deepHash.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/deepHash.js\");\n/* harmony import */ var _lib_fallbackApi_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/fallbackApi.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/fallbackApi.js\");\n/* harmony import */ var _lib_merkle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/merkle.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/merkle.js\");\n/* harmony import */ var _lib_transaction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/transaction.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction.js\");\n/* harmony import */ var _lib_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./network.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/network.js\");\n/* harmony import */ var _transactions_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transactions.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/transactions.js\");\n/* harmony import */ var _wallets_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./wallets.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/wallets.js\");\n// import Ar from \"./ar\";\n\n\n\n\n\n\n\n\n\n\n\nclass Arweave {\n    static{\n        this.utils = _lib_utils_js__WEBPACK_IMPORTED_MODULE_7__;\n    }\n    static{\n        this.VERSION = \"0.0.1\";\n    }\n    constructor(config){\n        this.config = config;\n        if (!config.crypto) throw new Error(`config.crypto is required`); // `crypto` is automatically added by the wrapper constructors, users should never encounter this\n        this.crypto = (0,_lib_crypto_crypto_augment_js__WEBPACK_IMPORTED_MODULE_2__.augmentCrypto)(config.crypto, {\n            deepHash: _lib_deepHash_js__WEBPACK_IMPORTED_MODULE_3__.DeepHash\n        });\n        this.deepHash = this.crypto.deepHash;\n        const apiConfig = config.gateways ? Array.isArray(config.gateways) ? config.gateways : [\n            config.gateways\n        ] : undefined;\n        this.api = new _lib_fallbackApi_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n            gateways: apiConfig,\n            miners: config.miners\n        });\n        this.wallets = new _wallets_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](this.api, this.crypto);\n        this.chunks = new _chunks_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.api);\n        this.network = new _network_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.api);\n        this.blocks = new _blocks_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.api, this.network);\n        this.merkle = new _lib_merkle_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n            deps: {\n                crypto: this.crypto\n            }\n        });\n        this.transactions = new _transactions_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({\n            deps: {\n                api: this.api,\n                crypto: config.crypto,\n                chunks: this.chunks,\n                merkle: this.merkle,\n                deepHash: this.deepHash\n            }\n        });\n    }\n    get utils() {\n        return Arweave.utils;\n    }\n    getConfig() {\n        return this.config;\n    }\n    async createTransaction(attributes, jwk) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data && !(attributes.target && attributes.quantity)) {\n            throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);\n        }\n        if (attributes.owner == undefined) {\n            if (jwk && jwk !== \"use_wallet\") {\n                transaction.owner = jwk.n;\n            }\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        if (typeof attributes.data === \"string\") {\n            attributes.data = _lib_utils_js__WEBPACK_IMPORTED_MODULE_7__.stringToBuffer(attributes.data);\n        }\n        if (attributes.data instanceof ArrayBuffer) {\n            attributes.data = new Uint8Array(attributes.data);\n        }\n        if (attributes.data && !(attributes.data instanceof Uint8Array)) {\n            throw new Error(\"Expected data to be a string, Uint8Array or ArrayBuffer\");\n        }\n        if (attributes.reward == undefined) {\n            const length = attributes.data ? attributes.data.byteLength : 0;\n            transaction.reward = await this.transactions.getPrice(length, transaction.target);\n        }\n        // here we should call prepare chunk\n        transaction.data_root = \"\";\n        transaction.data_size = attributes.data ? attributes.data.byteLength.toString() : \"0\";\n        transaction.data = attributes.data || new Uint8Array(0);\n        const createdTransaction = new _lib_transaction_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n            attributes: transaction,\n            deps: {\n                merkle: this.merkle,\n                deepHash: this.deepHash\n            }\n        });\n        await createdTransaction.getSignatureData();\n        return createdTransaction;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Arweave); //# sourceMappingURL=arweave.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/arweave.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/blocks.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/blocks.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Blocks)\n/* harmony export */ });\n/* harmony import */ var _lib_error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/error.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/error.js\");\n/* eslint-disable @typescript-eslint/naming-convention */ \nclass Blocks {\n    constructor(api, network){\n        this.api = api;\n        this.network = network;\n    }\n    /**\n     * Gets a block by its \"indep_hash\"\n     */ async getByHash(indepHash) {\n        const response = await this.api.get(`block/hash/${indepHash}`);\n        if (response.status === 200) {\n            return response.data;\n        } else {\n            if (response.status === 404) {\n                throw new _lib_error_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"BLOCK_NOT_FOUND\" /* ArweaveErrorType.BLOCK_NOT_FOUND */ );\n            } else {\n                throw new Error(`Error while loading block data: ${response}`);\n            }\n        }\n    }\n    /**\n     * Gets a block by its \"indep_hash\"\n     */ async getByHeight(height) {\n        const response = await this.api.get(`block/height/${height}`);\n        if (response.status === 200) {\n            return response.data;\n        } else {\n            if (response.status === 404) {\n                throw new _lib_error_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"BLOCK_NOT_FOUND\" /* ArweaveErrorType.BLOCK_NOT_FOUND */ );\n            } else {\n                throw new Error(`Error while loading block data: ${response}`);\n            }\n        }\n    }\n    /**\n     * Gets current block data (ie. block with indep_hash = Network.getInfo().current)\n     */ async getCurrent() {\n        const { current } = await this.network.getInfo();\n        return await this.getByHash(current);\n    }\n} //# sourceMappingURL=blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2Jsb2Nrcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVEQUF1RCxHQUNiO0FBQzNCLE1BQU1DO0lBR2pCQyxZQUFZQyxHQUFHLEVBQUVDLE9BQU8sQ0FBRTtRQUN0QixJQUFJLENBQUNELEdBQUcsR0FBR0E7UUFDWCxJQUFJLENBQUNDLE9BQU8sR0FBR0E7SUFDbkI7SUFDQTs7S0FFQyxHQUNELE1BQU1DLFVBQVVDLFNBQVMsRUFBRTtRQUN2QixNQUFNQyxXQUFXLE1BQU0sSUFBSSxDQUFDSixHQUFHLENBQUNLLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRUYsVUFBVSxDQUFDO1FBQzdELElBQUlDLFNBQVNFLE1BQU0sS0FBSyxLQUFLO1lBQ3pCLE9BQU9GLFNBQVNHLElBQUk7UUFDeEIsT0FDSztZQUNELElBQUlILFNBQVNFLE1BQU0sS0FBSyxLQUFLO2dCQUN6QixNQUFNLElBQUlULHFEQUFZQSxDQUFDLGtCQUFrQixvQ0FBb0M7WUFDakYsT0FDSztnQkFDRCxNQUFNLElBQUlXLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRUosU0FBUyxDQUFDO1lBQ2pFO1FBQ0o7SUFDSjtJQUNBOztLQUVDLEdBQ0QsTUFBTUssWUFBWUMsTUFBTSxFQUFFO1FBQ3RCLE1BQU1OLFdBQVcsTUFBTSxJQUFJLENBQUNKLEdBQUcsQ0FBQ0ssR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFSyxPQUFPLENBQUM7UUFDNUQsSUFBSU4sU0FBU0UsTUFBTSxLQUFLLEtBQUs7WUFDekIsT0FBT0YsU0FBU0csSUFBSTtRQUN4QixPQUNLO1lBQ0QsSUFBSUgsU0FBU0UsTUFBTSxLQUFLLEtBQUs7Z0JBQ3pCLE1BQU0sSUFBSVQscURBQVlBLENBQUMsa0JBQWtCLG9DQUFvQztZQUNqRixPQUNLO2dCQUNELE1BQU0sSUFBSVcsTUFBTSxDQUFDLGdDQUFnQyxFQUFFSixTQUFTLENBQUM7WUFDakU7UUFDSjtJQUNKO0lBQ0E7O0tBRUMsR0FDRCxNQUFNTyxhQUFhO1FBQ2YsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ1gsT0FBTyxDQUFDWSxPQUFPO1FBQzlDLE9BQU8sTUFBTSxJQUFJLENBQUNYLFNBQVMsQ0FBQ1U7SUFDaEM7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2Jsb2Nrcy5qcz8wYzg1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuaW1wb3J0IEFyd2VhdmVFcnJvciBmcm9tIFwiLi9saWIvZXJyb3IuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsb2NrcyB7XG4gICAgYXBpO1xuICAgIG5ldHdvcms7XG4gICAgY29uc3RydWN0b3IoYXBpLCBuZXR3b3JrKSB7XG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xuICAgICAgICB0aGlzLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgYmxvY2sgYnkgaXRzIFwiaW5kZXBfaGFzaFwiXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QnlIYXNoKGluZGVwSGFzaCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpLmdldChgYmxvY2svaGFzaC8ke2luZGVwSGFzaH1gKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcndlYXZlRXJyb3IoXCJCTE9DS19OT1RfRk9VTkRcIiAvKiBBcndlYXZlRXJyb3JUeXBlLkJMT0NLX05PVF9GT1VORCAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHdoaWxlIGxvYWRpbmcgYmxvY2sgZGF0YTogJHtyZXNwb25zZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgYmxvY2sgYnkgaXRzIFwiaW5kZXBfaGFzaFwiXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QnlIZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGkuZ2V0KGBibG9jay9oZWlnaHQvJHtoZWlnaHR9YCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJ3ZWF2ZUVycm9yKFwiQkxPQ0tfTk9UX0ZPVU5EXCIgLyogQXJ3ZWF2ZUVycm9yVHlwZS5CTE9DS19OT1RfRk9VTkQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBsb2FkaW5nIGJsb2NrIGRhdGE6ICR7cmVzcG9uc2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBjdXJyZW50IGJsb2NrIGRhdGEgKGllLiBibG9jayB3aXRoIGluZGVwX2hhc2ggPSBOZXR3b3JrLmdldEluZm8oKS5jdXJyZW50KVxuICAgICAqL1xuICAgIGFzeW5jIGdldEN1cnJlbnQoKSB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudCB9ID0gYXdhaXQgdGhpcy5uZXR3b3JrLmdldEluZm8oKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QnlIYXNoKGN1cnJlbnQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsb2Nrcy5qcy5tYXAiXSwibmFtZXMiOlsiQXJ3ZWF2ZUVycm9yIiwiQmxvY2tzIiwiY29uc3RydWN0b3IiLCJhcGkiLCJuZXR3b3JrIiwiZ2V0QnlIYXNoIiwiaW5kZXBIYXNoIiwicmVzcG9uc2UiLCJnZXQiLCJzdGF0dXMiLCJkYXRhIiwiRXJyb3IiLCJnZXRCeUhlaWdodCIsImhlaWdodCIsImdldEN1cnJlbnQiLCJjdXJyZW50IiwiZ2V0SW5mbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/chunks.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/chunks.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Chunks)\n/* harmony export */ });\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _lib_error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/error.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/error.js\");\n/* harmony import */ var _lib_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n/* harmony import */ var _lib_merkle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/merkle.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/merkle.js\");\n\n\n\n\nclass Chunks {\n    constructor(api){\n        this.api = api;\n    }\n    async getTransactionMetadata(id) {\n        const resp = await this.api.get(`tx/${id}/offset`);\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        throw new Error(`Unable to get transaction offset: ${(0,_lib_error_js__WEBPACK_IMPORTED_MODULE_1__.getError)(resp)}`);\n    }\n    async getChunk(offset) {\n        const resp = await this.api.get(`chunk/${offset}`);\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        throw new Error(`Unable to get chunk: ${(0,_lib_error_js__WEBPACK_IMPORTED_MODULE_1__.getError)(resp)}`);\n    }\n    async getChunkData(offset) {\n        const chunk = await this.getChunk(offset);\n        const buf = _lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.b64UrlToBuffer(chunk.chunk);\n        return buf;\n    }\n    firstChunkOffset(offsetResponse) {\n        return parseInt(offsetResponse.offset) - parseInt(offsetResponse.size) + 1;\n    }\n    /**\n     * Downloads chunks from the configured API peers, with a default concurrency of 10\n     * @param id - ID of the transaction to download\n     * @param options - Options object for configuring the downloader\n     * @param options.concurrency - The number of chunks to download simultaneously. reduce on slower connections.\n     * @returns\n     */ async downloadChunkedData(id, options) {\n        const offsetResponse = await this.getTransactionMetadata(id);\n        const size = parseInt(offsetResponse.size);\n        const data = new Uint8Array(size);\n        let byte = 0;\n        for await (const chunkData of this.concurrentChunkDownloader(id, options)){\n            data.set(chunkData, byte);\n            byte += chunkData.length;\n        }\n        return data;\n    }\n    async *concurrentChunkDownloader(id, options) {\n        const opts = {\n            concurrency: 10,\n            ...options\n        };\n        const metadata = await this.getTransactionMetadata(id);\n        // use big numbers for safety\n        const endOffset = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](metadata.offset);\n        const size = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](metadata.size);\n        const startOffset = endOffset.minus(size).plus(1);\n        let processedBytes = 0;\n        const chunks = Math.ceil(size.dividedBy(_lib_merkle_js__WEBPACK_IMPORTED_MODULE_3__.MAX_CHUNK_SIZE).toNumber());\n        const downloadData = (offset)=>this.getChunkData(offset.toString()).then((r)=>{\n                processedBytes += r.length;\n                return r;\n            });\n        const processing = [];\n        // only parallelise everything except last two chunks.\n        // last two due to merkle rebalancing due to minimum chunk size, see https://github.com/ArweaveTeam/arweave-js/blob/ce441f8d4e66a2524cfe86bbbcaed34b887ba193/src/common/lib/merkle.ts#LL53C19-L53C19\n        const parallelChunks = chunks - 2;\n        const concurrency = Math.min(parallelChunks, opts.concurrency);\n        let currChunk = 0;\n        // logger.debug(`[downloadTx] Tx ${txId} start ${startOffset} size ${size} chunks ${chunks} concurrency ${concurrency}`);\n        for(let i = 0; i < concurrency; i++)processing.push(downloadData(startOffset.plus(_lib_merkle_js__WEBPACK_IMPORTED_MODULE_3__.MAX_CHUNK_SIZE * currChunk++)));\n        while(currChunk < parallelChunks){\n            processing.push(downloadData(startOffset.plus(_lib_merkle_js__WEBPACK_IMPORTED_MODULE_3__.MAX_CHUNK_SIZE * currChunk++)));\n            // yield await so that processedBytes works properly\n            yield processing.shift();\n        }\n        while(processing.length > 0)yield processing.shift();\n        yield downloadData(startOffset.plus(_lib_merkle_js__WEBPACK_IMPORTED_MODULE_3__.MAX_CHUNK_SIZE * currChunk++));\n        if (size.isGreaterThan(processedBytes)) yield downloadData(startOffset.plus(_lib_merkle_js__WEBPACK_IMPORTED_MODULE_3__.MAX_CHUNK_SIZE * currChunk++));\n        if (!size.isEqualTo(processedBytes)) throw new Error(`got ${processedBytes}B, expected ${size.toString()}B`);\n        return;\n    }\n} //# sourceMappingURL=chunks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/chunks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/index.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/index.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arweave: () => (/* reexport safe */ _arweave_js__WEBPACK_IMPORTED_MODULE_0__.Arweave),\n/* harmony export */   \"default\": () => (/* reexport safe */ _arweave_js__WEBPACK_IMPORTED_MODULE_0__.Arweave)\n/* harmony export */ });\n/* harmony import */ var _arweave_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arweave.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/arweave.js\");\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QjtBQUNxQixDQUNsRCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK2Fyd2VhdmVAMC4wLjJfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BpcnlzL2Fyd2VhdmUvYnVpbGQvZXNtL2NvbW1vbi9pbmRleC5qcz82OTJiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2Fyd2VhdmUuanNcIjtcbmV4cG9ydCB7IEFyd2VhdmUgYXMgZGVmYXVsdCB9IGZyb20gXCIuL2Fyd2VhdmUuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJBcndlYXZlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/api.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/api.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Api)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.9.0_debug@4.4.0/node_modules/axios/lib/axios.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! async-retry */ \"(ssr)/./node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js\");\n/* harmony import */ var _arweave_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../arweave.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/arweave.js\");\n\n\n\nclass Api {\n    constructor(config){\n        this.cookieMap = new Map();\n        if (config) this.applyConfig(config);\n    }\n    applyConfig(config) {\n        this.config = this.mergeDefaults(config);\n        this._instance = undefined;\n    }\n    getConfig() {\n        return this.config;\n    }\n    async requestInterceptor(request) {\n        const cookies = this.cookieMap.get(new URL(request.baseURL ?? \"\").host);\n        if (cookies) request.headers.cookie = cookies;\n        return request;\n    }\n    async responseInterceptor(response) {\n        const setCookie = response.headers?.[\"set-cookie\"];\n        if (setCookie) this.cookieMap.set(response.request.host, setCookie);\n        return response;\n    }\n    mergeDefaults(config) {\n        config.headers ??= {};\n        if (config.network && !Object.keys(config.headers).includes(\"x-network\")) config.headers[\"x-network\"] = config.network;\n        return {\n            url: config.url,\n            timeout: config.timeout ?? 20000,\n            logging: config.logging ?? false,\n            logger: config.logger ?? console.log,\n            headers: {\n                ...config.headers,\n                \"x-irys-arweave-version\": _arweave_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].VERSION\n            },\n            withCredentials: config.withCredentials ?? false,\n            retry: {\n                retries: 3,\n                maxTimeout: 5000\n            }\n        };\n    }\n    async get(path, config) {\n        try {\n            return await this.request(path, {\n                ...config,\n                method: \"GET\"\n            });\n        } catch (error) {\n            if (error.response?.status) return error.response;\n            throw error;\n        }\n    }\n    async post(path, body, config) {\n        try {\n            return await this.request(path, {\n                data: body,\n                ...config,\n                method: \"POST\"\n            });\n        } catch (error) {\n            if (error.response?.status) return error.response;\n            throw error;\n        }\n    }\n    get instance() {\n        if (this._instance) return this._instance;\n        const instance = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n            baseURL: this.config.url.toString(),\n            timeout: this.config.timeout,\n            maxContentLength: 1024 * 1024 * 512,\n            headers: this.config.headers,\n            withCredentials: this.config.withCredentials\n        });\n        if (this.config.withCredentials) {\n            instance.interceptors.request.use(this.requestInterceptor.bind(this));\n            instance.interceptors.response.use(this.responseInterceptor.bind(this));\n        }\n        if (this.config.logging) {\n            instance.interceptors.request.use((request)=>{\n                this.config.logger(`Requesting: ${request.baseURL}/${request.url}`);\n                return request;\n            });\n            instance.interceptors.response.use((response)=>{\n                this.config.logger(`Response: ${response.config.url} - ${response.status}`);\n                return response;\n            });\n        }\n        return this._instance = instance;\n    }\n    async request(path, config) {\n        const instance = this.instance;\n        const url = config?.url ?? new URL(path, this.config.url).toString();\n        return async_retry__WEBPACK_IMPORTED_MODULE_0__((_)=>instance({\n                ...config,\n                url\n            }), {\n            ...this.config.retry,\n            ...config?.retry\n        });\n    }\n} //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/crypto/crypto-augment.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/crypto/crypto-augment.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   augmentCrypto: () => (/* binding */ augmentCrypto)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n\nfunction augmentCrypto(crypto, augments) {\n    const crypt = crypto;\n    crypt.deepHash = new augments.deepHash({\n        deps: {\n            utils: {\n                stringToBuffer: _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer,\n                concatBuffers: _utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBuffers\n            },\n            crypto\n        }\n    });\n    return crypt;\n//   crypto: Class<CryptoInterface>,\n//   augments: { deepHash: Class<DeepHash, ConstructorParameters<typeof DeepHash>> },\n// ): AugmentedCrypto {\n//   const cryptoAugment = class Crypto extends crypto implements CryptoInterface {\n//     public deepHash: DeepHash;\n//     constructor() {\n//       super();\n//       this.deepHash = new augments.deepHash({ deps: { crypto: this, utils: ArweaveUtils } });\n//     }\n//   };\n//   return new cryptoAugment();\n} //# sourceMappingURL=crypto-augment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2xpYi9jcnlwdG8vY3J5cHRvLWF1Z21lbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFDckQsU0FBU0UsY0FBY0MsTUFBTSxFQUFFQyxRQUFRO0lBQzFDLE1BQU1DLFFBQVFGO0lBQ2RFLE1BQU1DLFFBQVEsR0FBRyxJQUFJRixTQUFTRSxRQUFRLENBQUM7UUFBRUMsTUFBTTtZQUFFQyxPQUFPO2dCQUFFUCxjQUFjQSx1REFBQUE7Z0JBQUVELGFBQWFBLHNEQUFBQTtZQUFDO1lBQUdHO1FBQU87SUFBRTtJQUNwRyxPQUFPRTtBQUNQLG9DQUFvQztBQUNwQyxxRkFBcUY7QUFDckYsdUJBQXVCO0FBQ3ZCLG1GQUFtRjtBQUNuRixpQ0FBaUM7QUFDakMsc0JBQXNCO0FBQ3RCLGlCQUFpQjtBQUNqQixnR0FBZ0c7QUFDaEcsUUFBUTtBQUNSLE9BQU87QUFDUCxnQ0FBZ0M7QUFDcEMsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK2Fyd2VhdmVAMC4wLjJfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BpcnlzL2Fyd2VhdmUvYnVpbGQvZXNtL2NvbW1vbi9saWIvY3J5cHRvL2NyeXB0by1hdWdtZW50LmpzP2UyYWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uY2F0QnVmZmVycywgc3RyaW5nVG9CdWZmZXIgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBhdWdtZW50Q3J5cHRvKGNyeXB0bywgYXVnbWVudHMpIHtcbiAgICBjb25zdCBjcnlwdCA9IGNyeXB0bztcbiAgICBjcnlwdC5kZWVwSGFzaCA9IG5ldyBhdWdtZW50cy5kZWVwSGFzaCh7IGRlcHM6IHsgdXRpbHM6IHsgc3RyaW5nVG9CdWZmZXIsIGNvbmNhdEJ1ZmZlcnMgfSwgY3J5cHRvIH0gfSk7XG4gICAgcmV0dXJuIGNyeXB0O1xuICAgIC8vICAgY3J5cHRvOiBDbGFzczxDcnlwdG9JbnRlcmZhY2U+LFxuICAgIC8vICAgYXVnbWVudHM6IHsgZGVlcEhhc2g6IENsYXNzPERlZXBIYXNoLCBDb25zdHJ1Y3RvclBhcmFtZXRlcnM8dHlwZW9mIERlZXBIYXNoPj4gfSxcbiAgICAvLyApOiBBdWdtZW50ZWRDcnlwdG8ge1xuICAgIC8vICAgY29uc3QgY3J5cHRvQXVnbWVudCA9IGNsYXNzIENyeXB0byBleHRlbmRzIGNyeXB0byBpbXBsZW1lbnRzIENyeXB0b0ludGVyZmFjZSB7XG4gICAgLy8gICAgIHB1YmxpYyBkZWVwSGFzaDogRGVlcEhhc2g7XG4gICAgLy8gICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vICAgICAgIHN1cGVyKCk7XG4gICAgLy8gICAgICAgdGhpcy5kZWVwSGFzaCA9IG5ldyBhdWdtZW50cy5kZWVwSGFzaCh7IGRlcHM6IHsgY3J5cHRvOiB0aGlzLCB1dGlsczogQXJ3ZWF2ZVV0aWxzIH0gfSk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH07XG4gICAgLy8gICByZXR1cm4gbmV3IGNyeXB0b0F1Z21lbnQoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0by1hdWdtZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJjb25jYXRCdWZmZXJzIiwic3RyaW5nVG9CdWZmZXIiLCJhdWdtZW50Q3J5cHRvIiwiY3J5cHRvIiwiYXVnbWVudHMiLCJjcnlwdCIsImRlZXBIYXNoIiwiZGVwcyIsInV0aWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/crypto/crypto-augment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/crypto/pem.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/crypto/pem.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RSA_OID: () => (/* binding */ RSA_OID),\n/* harmony export */   jwkTopem: () => (/* binding */ jwkTopem),\n/* harmony export */   pemTojwk: () => (/* binding */ pemTojwk)\n/* harmony export */ });\n/* harmony import */ var asn1_js_lib_asn1_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1.js/lib/asn1/api.js */ \"(ssr)/./node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/api.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@5.2.2/node_modules/bn.js/lib/bn.js\");\n// @ts-expect-error no typing :c\n\nconst define = asn1_js_lib_asn1_api_js__WEBPACK_IMPORTED_MODULE_0__.define;\n\nfunction urlize(base64) {\n    return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction hex2b64url(str) {\n    return urlize(Buffer.from(str, \"hex\").toString(\"base64\"));\n}\nconst RSAPublicKey = define(\"RSAPublicKey\", function() {\n    this.seq().obj(this.key(\"n\").int(), this.key(\"e\").int());\n});\nconst AlgorithmIdentifier = define(\"AlgorithmIdentifier\", function() {\n    this.seq().obj(this.key(\"algorithm\").objid(), this.key(\"parameters\").optional().any());\n});\nconst PublicKeyInfo = define(\"PublicKeyInfo\", function() {\n    this.seq().obj(this.key(\"algorithm\").use(AlgorithmIdentifier), this.key(\"publicKey\").bitstr());\n});\nconst Version = define(\"Version\", function() {\n    this.int({\n        0: \"two-prime\",\n        1: \"multi\"\n    });\n});\nconst OtherPrimeInfos = define(\"OtherPrimeInfos\", function() {\n    this.seq().obj(this.key(\"ri\").int(), this.key(\"di\").int(), this.key(\"ti\").int());\n});\nconst RSAPrivateKey = define(\"RSAPrivateKey\", function() {\n    this.seq().obj(this.key(\"version\").use(Version), this.key(\"n\").int(), this.key(\"e\").int(), this.key(\"d\").int(), this.key(\"p\").int(), this.key(\"q\").int(), this.key(\"dp\").int(), this.key(\"dq\").int(), this.key(\"qi\").int(), this.key(\"other\").optional().use(OtherPrimeInfos));\n});\nconst PrivateKeyInfo = define(\"PrivateKeyInfo\", function() {\n    this.seq().obj(this.key(\"version\").use(Version), this.key(\"algorithm\").use(AlgorithmIdentifier), this.key(\"privateKey\").bitstr());\n});\nconst RSA_OID = \"1.2.840.113549.1.1.1\";\nfunction addExtras(obj, extras) {\n    extras = extras || {};\n    Object.keys(extras).forEach(function(key) {\n        obj[key] = extras[key];\n    });\n    return obj;\n}\nfunction pad(hex) {\n    return hex.length % 2 === 1 ? \"0\" + hex : hex;\n}\nfunction decodeRsaPublic(buffer, extras) {\n    const key = RSAPublicKey.decode(buffer, \"der\");\n    const e = pad(key.e.toString(16));\n    const jwk = {\n        kty: \"RSA\",\n        n: bn2base64url(key.n),\n        e: hex2b64url(e)\n    };\n    return addExtras(jwk, extras);\n}\nfunction decodeRsaPrivate(buffer, extras) {\n    const key = RSAPrivateKey.decode(buffer, \"der\");\n    const e = pad(key.e.toString(16));\n    const jwk = {\n        kty: \"RSA\",\n        n: bn2base64url(key.n),\n        e: hex2b64url(e),\n        d: bn2base64url(key.d),\n        p: bn2base64url(key.p),\n        q: bn2base64url(key.q),\n        dp: bn2base64url(key.dp),\n        dq: bn2base64url(key.dq),\n        qi: bn2base64url(key.qi)\n    };\n    return addExtras(jwk, extras);\n}\nfunction decodePublic(buffer, extras) {\n    const info = PublicKeyInfo.decode(buffer, \"der\");\n    return decodeRsaPublic(info.publicKey.data, extras);\n}\nfunction decodePrivate(buffer, extras) {\n    const info = PrivateKeyInfo.decode(buffer, \"der\");\n    return decodeRsaPrivate(info.privateKey.data, extras);\n}\nfunction getDecoder(header) {\n    const match = /^-----BEGIN (RSA )?(PUBLIC|PRIVATE) KEY-----$/.exec(header);\n    if (!match) {\n        return null;\n    }\n    const isRSA = !!match[1];\n    const isPrivate = match[2] === \"PRIVATE\";\n    if (isPrivate) {\n        return isRSA ? decodeRsaPrivate : decodePrivate;\n    } else {\n        return isRSA ? decodeRsaPublic : decodePublic;\n    }\n}\nfunction parse(jwk) {\n    return {\n        n: string2bn(jwk.n),\n        e: string2bn(jwk.e),\n        d: jwk.d && string2bn(jwk.d),\n        p: jwk.p && string2bn(jwk.p),\n        q: jwk.q && string2bn(jwk.q),\n        dp: jwk.dp && string2bn(jwk.dp),\n        dq: jwk.dq && string2bn(jwk.dq),\n        qi: jwk.qi && string2bn(jwk.qi)\n    };\n}\nfunction bn2base64url(bn) {\n    return hex2b64url(pad(bn.toString(16)));\n}\nfunction base64url2bn(str) {\n    return new bn_js__WEBPACK_IMPORTED_MODULE_1__(Buffer.from(str, \"base64\"));\n}\nfunction string2bn(str) {\n    if (/^[0-9]+$/.test(str)) {\n        return new bn_js__WEBPACK_IMPORTED_MODULE_1__(str, 10);\n    }\n    return base64url2bn(str);\n}\nfunction pemTojwk(pem, extras) {\n    let text = pem.toString().split(/(\\r\\n|\\r|\\n)+/g);\n    text = text.filter(function(line) {\n        return line.trim().length !== 0;\n    });\n    const decoder = getDecoder(text[0]);\n    text = text.slice(1, -1).join(\"\");\n    return decoder(Buffer.from(text.replace(/[^\\w\\d\\+\\/=]+/g, \"\"), \"base64\"), extras);\n}\nfunction jwkTopem(json) {\n    const jwk = parse(json);\n    const isPrivate = !!jwk.d;\n    const t = isPrivate ? \"PRIVATE\" : \"PUBLIC\";\n    const header = \"-----BEGIN RSA \" + t + \" KEY-----\\n\";\n    const footer = \"\\n-----END RSA \" + t + \" KEY-----\\n\";\n    let data = Buffer.alloc(0);\n    if (isPrivate) {\n        jwk.version = \"two-prime\";\n        data = RSAPrivateKey.encode(jwk, \"der\");\n    } else {\n        data = RSAPublicKey.encode(jwk, \"der\");\n    }\n    const body = data.toString(\"base64\").match(/.{1,64}/g).join(\"\\n\");\n    return header + body + footer;\n} //# sourceMappingURL=pem.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/crypto/pem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/deepHash.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/deepHash.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeepHash: () => (/* binding */ DeepHash)\n/* harmony export */ });\nclass DeepHash {\n    constructor({ deps }){\n        this.crypto = deps.crypto;\n        this.utils = deps.utils;\n    }\n    async deepHash(data) {\n        if (Array.isArray(data)) {\n            const tag = this.utils.concatBuffers([\n                this.utils.stringToBuffer(\"list\"),\n                this.utils.stringToBuffer(data.length.toString())\n            ]);\n            return await this.deepHashChunks(data, await this.crypto.hash(tag, \"SHA-384\"));\n        }\n        const tag = this.utils.concatBuffers([\n            this.utils.stringToBuffer(\"blob\"),\n            this.utils.stringToBuffer(data.byteLength.toString())\n        ]);\n        const taggedHash = this.utils.concatBuffers([\n            await this.crypto.hash(tag, \"SHA-384\"),\n            await this.crypto.hash(data, \"SHA-384\")\n        ]);\n        return await this.crypto.hash(taggedHash, \"SHA-384\");\n    }\n    async deepHashChunks(chunks, acc) {\n        if (chunks.length < 1) return acc;\n        const hashPair = this.utils.concatBuffers([\n            acc,\n            await this.deepHash(chunks[0])\n        ]);\n        const newAcc = await this.crypto.hash(hashPair, \"SHA-384\");\n        return await this.deepHashChunks(chunks.slice(1), newAcc);\n    }\n} //# sourceMappingURL=deepHash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2xpYi9kZWVwSGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUE7SUFHVEMsWUFBWSxFQUFFQyxJQUFJLEVBQUUsQ0FBRTtRQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0QsS0FBS0MsTUFBTTtRQUN6QixJQUFJLENBQUNDLEtBQUssR0FBR0YsS0FBS0UsS0FBSztJQUMzQjtJQUNBLE1BQU1DLFNBQVNDLElBQUksRUFBRTtRQUNqQixJQUFJQyxNQUFNQyxPQUFPLENBQUNGLE9BQU87WUFDckIsTUFBTUcsTUFBTSxJQUFJLENBQUNMLEtBQUssQ0FBQ00sYUFBYSxDQUFDO2dCQUFDLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxjQUFjLENBQUM7Z0JBQVMsSUFBSSxDQUFDUCxLQUFLLENBQUNPLGNBQWMsQ0FBQ0wsS0FBS00sTUFBTSxDQUFDQyxRQUFRO2FBQUk7WUFDM0gsT0FBTyxNQUFNLElBQUksQ0FBQ0MsY0FBYyxDQUFDUixNQUFNLE1BQU0sSUFBSSxDQUFDSCxNQUFNLENBQUNZLElBQUksQ0FBQ04sS0FBSztRQUN2RTtRQUNBLE1BQU1BLE1BQU0sSUFBSSxDQUFDTCxLQUFLLENBQUNNLGFBQWEsQ0FBQztZQUFDLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxjQUFjLENBQUM7WUFBUyxJQUFJLENBQUNQLEtBQUssQ0FBQ08sY0FBYyxDQUFDTCxLQUFLVSxVQUFVLENBQUNILFFBQVE7U0FBSTtRQUMvSCxNQUFNSSxhQUFhLElBQUksQ0FBQ2IsS0FBSyxDQUFDTSxhQUFhLENBQUM7WUFBQyxNQUFNLElBQUksQ0FBQ1AsTUFBTSxDQUFDWSxJQUFJLENBQUNOLEtBQUs7WUFBWSxNQUFNLElBQUksQ0FBQ04sTUFBTSxDQUFDWSxJQUFJLENBQUNULE1BQU07U0FBVztRQUM3SCxPQUFPLE1BQU0sSUFBSSxDQUFDSCxNQUFNLENBQUNZLElBQUksQ0FBQ0UsWUFBWTtJQUM5QztJQUNBLE1BQU1ILGVBQWVJLE1BQU0sRUFBRUMsR0FBRyxFQUFFO1FBQzlCLElBQUlELE9BQU9OLE1BQU0sR0FBRyxHQUNoQixPQUFPTztRQUNYLE1BQU1DLFdBQVcsSUFBSSxDQUFDaEIsS0FBSyxDQUFDTSxhQUFhLENBQUM7WUFBQ1M7WUFBSyxNQUFNLElBQUksQ0FBQ2QsUUFBUSxDQUFDYSxNQUFNLENBQUMsRUFBRTtTQUFFO1FBQy9FLE1BQU1HLFNBQVMsTUFBTSxJQUFJLENBQUNsQixNQUFNLENBQUNZLElBQUksQ0FBQ0ssVUFBVTtRQUNoRCxPQUFPLE1BQU0sSUFBSSxDQUFDTixjQUFjLENBQUNJLE9BQU9JLEtBQUssQ0FBQyxJQUFJRDtJQUN0RDtBQUNKLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cythcndlYXZlQDAuMC4yX2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9AaXJ5cy9hcndlYXZlL2J1aWxkL2VzbS9jb21tb24vbGliL2RlZXBIYXNoLmpzPzkyZWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERlZXBIYXNoIHtcbiAgICBjcnlwdG87XG4gICAgdXRpbHM7XG4gICAgY29uc3RydWN0b3IoeyBkZXBzIH0pIHtcbiAgICAgICAgdGhpcy5jcnlwdG8gPSBkZXBzLmNyeXB0bztcbiAgICAgICAgdGhpcy51dGlscyA9IGRlcHMudXRpbHM7XG4gICAgfVxuICAgIGFzeW5jIGRlZXBIYXNoKGRhdGEpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHRoaXMudXRpbHMuY29uY2F0QnVmZmVycyhbdGhpcy51dGlscy5zdHJpbmdUb0J1ZmZlcihcImxpc3RcIiksIHRoaXMudXRpbHMuc3RyaW5nVG9CdWZmZXIoZGF0YS5sZW5ndGgudG9TdHJpbmcoKSldKTtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRlZXBIYXNoQ2h1bmtzKGRhdGEsIGF3YWl0IHRoaXMuY3J5cHRvLmhhc2godGFnLCBcIlNIQS0zODRcIikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhZyA9IHRoaXMudXRpbHMuY29uY2F0QnVmZmVycyhbdGhpcy51dGlscy5zdHJpbmdUb0J1ZmZlcihcImJsb2JcIiksIHRoaXMudXRpbHMuc3RyaW5nVG9CdWZmZXIoZGF0YS5ieXRlTGVuZ3RoLnRvU3RyaW5nKCkpXSk7XG4gICAgICAgIGNvbnN0IHRhZ2dlZEhhc2ggPSB0aGlzLnV0aWxzLmNvbmNhdEJ1ZmZlcnMoW2F3YWl0IHRoaXMuY3J5cHRvLmhhc2godGFnLCBcIlNIQS0zODRcIiksIGF3YWl0IHRoaXMuY3J5cHRvLmhhc2goZGF0YSwgXCJTSEEtMzg0XCIpXSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNyeXB0by5oYXNoKHRhZ2dlZEhhc2gsIFwiU0hBLTM4NFwiKTtcbiAgICB9XG4gICAgYXN5bmMgZGVlcEhhc2hDaHVua3MoY2h1bmtzLCBhY2MpIHtcbiAgICAgICAgaWYgKGNodW5rcy5sZW5ndGggPCAxKVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgY29uc3QgaGFzaFBhaXIgPSB0aGlzLnV0aWxzLmNvbmNhdEJ1ZmZlcnMoW2FjYywgYXdhaXQgdGhpcy5kZWVwSGFzaChjaHVua3NbMF0pXSk7XG4gICAgICAgIGNvbnN0IG5ld0FjYyA9IGF3YWl0IHRoaXMuY3J5cHRvLmhhc2goaGFzaFBhaXIsIFwiU0hBLTM4NFwiKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZGVlcEhhc2hDaHVua3MoY2h1bmtzLnNsaWNlKDEpLCBuZXdBY2MpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZXBIYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJEZWVwSGFzaCIsImNvbnN0cnVjdG9yIiwiZGVwcyIsImNyeXB0byIsInV0aWxzIiwiZGVlcEhhc2giLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwidGFnIiwiY29uY2F0QnVmZmVycyIsInN0cmluZ1RvQnVmZmVyIiwibGVuZ3RoIiwidG9TdHJpbmciLCJkZWVwSGFzaENodW5rcyIsImhhc2giLCJieXRlTGVuZ3RoIiwidGFnZ2VkSGFzaCIsImNodW5rcyIsImFjYyIsImhhc2hQYWlyIiwibmV3QWNjIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/deepHash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/error.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/error.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ArweaveError),\n/* harmony export */   getError: () => (/* binding */ getError)\n/* harmony export */ });\nclass ArweaveError extends Error {\n    constructor(type, optional = {}){\n        if (optional.message) {\n            super(optional.message);\n        } else {\n            super();\n        }\n        this.type = type;\n        this.response = optional.response;\n    }\n    getType() {\n        return this.type;\n    }\n}\n// Safely get error string\n// from a response, falling back to\n// resp.data, statusText or 'unknown'.\n// Note: a wrongly set content-type can\n// cause what is a json response to be interepted\n// as a string or Buffer, so we handle that too.\nfunction getError(resp) {\n    let data = resp.data;\n    if (typeof resp.data === \"string\") {\n        try {\n            data = JSON.parse(resp.data);\n        } catch (e) {}\n    }\n    if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {\n        try {\n            data = JSON.parse(data.toString());\n        } catch (e) {}\n    }\n    return data ? data.error || data : resp.statusText || \"unknown\";\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2xpYi9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFlLE1BQU1BLHFCQUFxQkM7SUFHdENDLFlBQVlDLElBQUksRUFBRUMsV0FBVyxDQUFDLENBQUMsQ0FBRTtRQUM3QixJQUFJQSxTQUFTQyxPQUFPLEVBQUU7WUFDbEIsS0FBSyxDQUFDRCxTQUFTQyxPQUFPO1FBQzFCLE9BQ0s7WUFDRCxLQUFLO1FBQ1Q7UUFDQSxJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNHLFFBQVEsR0FBR0YsU0FBU0UsUUFBUTtJQUNyQztJQUNBQyxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUNKLElBQUk7SUFDcEI7QUFDSjtBQUNBLDBCQUEwQjtBQUMxQixtQ0FBbUM7QUFDbkMsc0NBQXNDO0FBQ3RDLHVDQUF1QztBQUN2QyxpREFBaUQ7QUFDakQsZ0RBQWdEO0FBQ3pDLFNBQVNLLFNBQVNDLElBQUk7SUFDekIsSUFBSUMsT0FBT0QsS0FBS0MsSUFBSTtJQUNwQixJQUFJLE9BQU9ELEtBQUtDLElBQUksS0FBSyxVQUFVO1FBQy9CLElBQUk7WUFDQUEsT0FBT0MsS0FBS0MsS0FBSyxDQUFDSCxLQUFLQyxJQUFJO1FBQy9CLEVBQ0EsT0FBT0csR0FBRyxDQUFFO0lBQ2hCO0lBQ0EsSUFBSUosS0FBS0MsSUFBSSxZQUFZSSxlQUFlTCxLQUFLQyxJQUFJLFlBQVlLLFlBQVk7UUFDckUsSUFBSTtZQUNBTCxPQUFPQyxLQUFLQyxLQUFLLENBQUNGLEtBQUtNLFFBQVE7UUFDbkMsRUFDQSxPQUFPSCxHQUFHLENBQUU7SUFDaEI7SUFDQSxPQUFPSCxPQUFPQSxLQUFLTyxLQUFLLElBQUlQLE9BQU9ELEtBQUtTLFVBQVUsSUFBSTtBQUMxRCxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2xpYi9lcnJvci5qcz81NDcxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFyd2VhdmVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICB0eXBlO1xuICAgIHJlc3BvbnNlO1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIG9wdGlvbmFsID0ge30pIHtcbiAgICAgICAgaWYgKG9wdGlvbmFsLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHN1cGVyKG9wdGlvbmFsLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gb3B0aW9uYWwucmVzcG9uc2U7XG4gICAgfVxuICAgIGdldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgfVxufVxuLy8gU2FmZWx5IGdldCBlcnJvciBzdHJpbmdcbi8vIGZyb20gYSByZXNwb25zZSwgZmFsbGluZyBiYWNrIHRvXG4vLyByZXNwLmRhdGEsIHN0YXR1c1RleHQgb3IgJ3Vua25vd24nLlxuLy8gTm90ZTogYSB3cm9uZ2x5IHNldCBjb250ZW50LXR5cGUgY2FuXG4vLyBjYXVzZSB3aGF0IGlzIGEganNvbiByZXNwb25zZSB0byBiZSBpbnRlcmVwdGVkXG4vLyBhcyBhIHN0cmluZyBvciBCdWZmZXIsIHNvIHdlIGhhbmRsZSB0aGF0IHRvby5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvcihyZXNwKSB7XG4gICAgbGV0IGRhdGEgPSByZXNwLmRhdGE7XG4gICAgaWYgKHR5cGVvZiByZXNwLmRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHJlc3AuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbiAgICBpZiAocmVzcC5kYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgcmVzcC5kYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhID8gZGF0YS5lcnJvciB8fCBkYXRhIDogcmVzcC5zdGF0dXNUZXh0IHx8IFwidW5rbm93blwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbIkFyd2VhdmVFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJ0eXBlIiwib3B0aW9uYWwiLCJtZXNzYWdlIiwicmVzcG9uc2UiLCJnZXRUeXBlIiwiZ2V0RXJyb3IiLCJyZXNwIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImUiLCJBcnJheUJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJ0b1N0cmluZyIsImVycm9yIiwic3RhdHVzVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/fallbackApi.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/fallbackApi.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackApi: () => (/* binding */ FallbackApi),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/api.js\");\n\nconst isApiConfig = (o)=>typeof o !== \"string\" && \"url\" in o;\nconst defaultFallbackConfig = {\n    maxAttempts: 15,\n    randomlySelect: true\n};\nclass FallbackApi {\n    constructor({ gateways, miners, opts }){\n        this.minerInstances = [];\n        this.gatewayInstances = [];\n        this.globalConfig = opts?.globalConfig ?? {};\n        if (miners) this.addMiners(miners);\n        if (gateways) this.addGateways(gateways);\n    // this.gatewayInstance = this.minerInstances[0];\n    }\n    async addPeersFrom(url, options) {\n        const peers = (await this.get(\"\", {\n            url: new URL(\"/peers\", url).toString()\n        })).data;\n        this.addMiners(peers.slice(0, options?.limit).map((p)=>`http://${p}`));\n    }\n    addMiners(hosts) {\n        hosts.forEach((h)=>this.minerInstances.push(new _api_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](isApiConfig(h) ? h : {\n                url: new URL(h),\n                ...this.globalConfig\n            })));\n    }\n    addGateways(hosts) {\n        hosts.forEach((h)=>this.gatewayInstances.push(new _api_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](isApiConfig(h) ? h : {\n                url: new URL(h),\n                ...this.globalConfig\n            })));\n    }\n    async get(path, config) {\n        return this.request(path, {\n            ...config,\n            method: \"GET\"\n        });\n    }\n    async post(path, body, config) {\n        return this.request(path, {\n            data: body,\n            ...config,\n            method: \"POST\"\n        });\n    }\n    async request(path, config) {\n        const fallbackConfig = {\n            ...defaultFallbackConfig,\n            ...config?.fallback\n        };\n        let attempts = 0;\n        const errors = [];\n        const instances = config?.gatewayOnly ? this.gatewayInstances : this.gatewayInstances.concat(this.minerInstances);\n        const maxAttempts = Math.min(Math.max(fallbackConfig?.maxAttempts, 1), instances.length);\n        const onFallback = fallbackConfig?.onFallback;\n        if (instances.length === 0) throw new Error(`Unable to run request due to 0 configured gateways/miners.`);\n        while(attempts++ < maxAttempts){\n            const apiInstance = instances.at(fallbackConfig?.randomlySelect ? Math.floor(Math.random() * instances.length) : attempts - 1);\n            if (!apiInstance) continue;\n            try {\n                return await apiInstance.request(path, {\n                    ...config\n                });\n            } catch (e) {\n                onFallback?.(e, apiInstance);\n                errors.push(e);\n                if (attempts >= maxAttempts) throw e;\n            }\n        }\n        throw new Error(\"unreachable\");\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FallbackApi); //# sourceMappingURL=fallbackApi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2xpYi9mYWxsYmFja0FwaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkI7QUFDM0IsTUFBTUMsY0FBYyxDQUFDQyxJQUFNLE9BQU9BLE1BQU0sWUFBWSxTQUFTQTtBQUM3RCxNQUFNQyx3QkFBd0I7SUFDMUJDLGFBQWE7SUFDYkMsZ0JBQWdCO0FBQ3BCO0FBQ08sTUFBTUM7SUFJVEMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFHLENBQUU7YUFIekNDLGlCQUFpQixFQUFFO2FBRW5CQyxtQkFBbUIsRUFBRTtRQUVqQixJQUFJLENBQUNDLFlBQVksR0FBR0gsTUFBTUcsZ0JBQWdCLENBQUM7UUFDM0MsSUFBSUosUUFDQSxJQUFJLENBQUNLLFNBQVMsQ0FBQ0w7UUFDbkIsSUFBSUQsVUFDQSxJQUFJLENBQUNPLFdBQVcsQ0FBQ1A7SUFDckIsaURBQWlEO0lBQ3JEO0lBQ0EsTUFBTVEsYUFBYUMsR0FBRyxFQUFFQyxPQUFPLEVBQUU7UUFDN0IsTUFBTUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDQyxHQUFHLENBQUMsSUFBSTtZQUFFSCxLQUFLLElBQUlJLElBQUksVUFBVUosS0FBS0ssUUFBUTtRQUFHLEVBQUMsRUFBR0MsSUFBSTtRQUNuRixJQUFJLENBQUNULFNBQVMsQ0FBQ0ssTUFBTUssS0FBSyxDQUFDLEdBQUdOLFNBQVNPLE9BQU9DLEdBQUcsQ0FBQyxDQUFDQyxJQUFNLENBQUMsT0FBTyxFQUFFQSxFQUFFLENBQUM7SUFDMUU7SUFDQWIsVUFBVWMsS0FBSyxFQUFFO1FBQ2JBLE1BQU1DLE9BQU8sQ0FBQyxDQUFDQyxJQUFNLElBQUksQ0FBQ25CLGNBQWMsQ0FBQ29CLElBQUksQ0FBQyxJQUFJL0IsK0NBQUdBLENBQUNDLFlBQVk2QixLQUFLQSxJQUFJO2dCQUFFYixLQUFLLElBQUlJLElBQUlTO2dCQUFJLEdBQUcsSUFBSSxDQUFDakIsWUFBWTtZQUFDO0lBQ3ZIO0lBQ0FFLFlBQVlhLEtBQUssRUFBRTtRQUNmQSxNQUFNQyxPQUFPLENBQUMsQ0FBQ0MsSUFBTSxJQUFJLENBQUNsQixnQkFBZ0IsQ0FBQ21CLElBQUksQ0FBQyxJQUFJL0IsK0NBQUdBLENBQUNDLFlBQVk2QixLQUFLQSxJQUFJO2dCQUFFYixLQUFLLElBQUlJLElBQUlTO2dCQUFJLEdBQUcsSUFBSSxDQUFDakIsWUFBWTtZQUFDO0lBQ3pIO0lBQ0EsTUFBTU8sSUFBSVksSUFBSSxFQUFFQyxNQUFNLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0YsTUFBTTtZQUFFLEdBQUdDLE1BQU07WUFBRUUsUUFBUTtRQUFNO0lBQ3pEO0lBQ0EsTUFBTUMsS0FBS0osSUFBSSxFQUFFSyxJQUFJLEVBQUVKLE1BQU0sRUFBRTtRQUMzQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDRixNQUFNO1lBQUVULE1BQU1jO1lBQU0sR0FBR0osTUFBTTtZQUFFRSxRQUFRO1FBQU87SUFDdEU7SUFDQSxNQUFNRCxRQUFRRixJQUFJLEVBQUVDLE1BQU0sRUFBRTtRQUN4QixNQUFNSyxpQkFBaUI7WUFBRSxHQUFHbkMscUJBQXFCO1lBQUUsR0FBRzhCLFFBQVFNLFFBQVE7UUFBQztRQUN2RSxJQUFJQyxXQUFXO1FBQ2YsTUFBTUMsU0FBUyxFQUFFO1FBQ2pCLE1BQU1DLFlBQVlULFFBQVFVLGNBQWMsSUFBSSxDQUFDL0IsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQ2dDLE1BQU0sQ0FBQyxJQUFJLENBQUNqQyxjQUFjO1FBQ2hILE1BQU1QLGNBQWN5QyxLQUFLQyxHQUFHLENBQUNELEtBQUtFLEdBQUcsQ0FBQ1QsZ0JBQWdCbEMsYUFBYSxJQUFJc0MsVUFBVU0sTUFBTTtRQUN2RixNQUFNQyxhQUFhWCxnQkFBZ0JXO1FBQ25DLElBQUlQLFVBQVVNLE1BQU0sS0FBSyxHQUNyQixNQUFNLElBQUlFLE1BQU0sQ0FBQywwREFBMEQsQ0FBQztRQUNoRixNQUFPVixhQUFhcEMsWUFBYTtZQUM3QixNQUFNK0MsY0FBY1QsVUFBVVUsRUFBRSxDQUFDZCxnQkFBZ0JqQyxpQkFBaUJ3QyxLQUFLUSxLQUFLLENBQUNSLEtBQUtTLE1BQU0sS0FBS1osVUFBVU0sTUFBTSxJQUFJUixXQUFXO1lBQzVILElBQUksQ0FBQ1csYUFDRDtZQUNKLElBQUk7Z0JBQ0EsT0FBTyxNQUFNQSxZQUFZakIsT0FBTyxDQUFDRixNQUFNO29CQUFFLEdBQUdDLE1BQU07Z0JBQUM7WUFDdkQsRUFDQSxPQUFPc0IsR0FBRztnQkFDTk4sYUFBYU0sR0FBR0o7Z0JBQ2hCVixPQUFPVixJQUFJLENBQUN3QjtnQkFDWixJQUFJZixZQUFZcEMsYUFDWixNQUFNbUQ7WUFDZDtRQUNKO1FBQ0EsTUFBTSxJQUFJTCxNQUFNO0lBQ3BCO0FBQ0o7QUFDQSxpRUFBZTVDLFdBQVdBLEVBQUMsQ0FDM0IsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cythcndlYXZlQDAuMC4yX2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9AaXJ5cy9hcndlYXZlL2J1aWxkL2VzbS9jb21tb24vbGliL2ZhbGxiYWNrQXBpLmpzPzczNzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFwaSBmcm9tIFwiLi9hcGkuanNcIjtcbmNvbnN0IGlzQXBpQ29uZmlnID0gKG8pID0+IHR5cGVvZiBvICE9PSBcInN0cmluZ1wiICYmIFwidXJsXCIgaW4gbztcbmNvbnN0IGRlZmF1bHRGYWxsYmFja0NvbmZpZyA9IHtcbiAgICBtYXhBdHRlbXB0czogMTUsXG4gICAgcmFuZG9tbHlTZWxlY3Q6IHRydWUsXG59O1xuZXhwb3J0IGNsYXNzIEZhbGxiYWNrQXBpIHtcbiAgICBtaW5lckluc3RhbmNlcyA9IFtdO1xuICAgIGdsb2JhbENvbmZpZztcbiAgICBnYXRld2F5SW5zdGFuY2VzID0gW107XG4gICAgY29uc3RydWN0b3IoeyBnYXRld2F5cywgbWluZXJzLCBvcHRzLCB9KSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsQ29uZmlnID0gb3B0cz8uZ2xvYmFsQ29uZmlnID8/IHt9O1xuICAgICAgICBpZiAobWluZXJzKVxuICAgICAgICAgICAgdGhpcy5hZGRNaW5lcnMobWluZXJzKTtcbiAgICAgICAgaWYgKGdhdGV3YXlzKVxuICAgICAgICAgICAgdGhpcy5hZGRHYXRld2F5cyhnYXRld2F5cyk7XG4gICAgICAgIC8vIHRoaXMuZ2F0ZXdheUluc3RhbmNlID0gdGhpcy5taW5lckluc3RhbmNlc1swXTtcbiAgICB9XG4gICAgYXN5bmMgYWRkUGVlcnNGcm9tKHVybCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwZWVycyA9IChhd2FpdCB0aGlzLmdldChcIlwiLCB7IHVybDogbmV3IFVSTChcIi9wZWVyc1wiLCB1cmwpLnRvU3RyaW5nKCkgfSkpLmRhdGE7XG4gICAgICAgIHRoaXMuYWRkTWluZXJzKHBlZXJzLnNsaWNlKDAsIG9wdGlvbnM/LmxpbWl0KS5tYXAoKHApID0+IGBodHRwOi8vJHtwfWApKTtcbiAgICB9XG4gICAgYWRkTWluZXJzKGhvc3RzKSB7XG4gICAgICAgIGhvc3RzLmZvckVhY2goKGgpID0+IHRoaXMubWluZXJJbnN0YW5jZXMucHVzaChuZXcgQXBpKGlzQXBpQ29uZmlnKGgpID8gaCA6IHsgdXJsOiBuZXcgVVJMKGgpLCAuLi50aGlzLmdsb2JhbENvbmZpZyB9KSkpO1xuICAgIH1cbiAgICBhZGRHYXRld2F5cyhob3N0cykge1xuICAgICAgICBob3N0cy5mb3JFYWNoKChoKSA9PiB0aGlzLmdhdGV3YXlJbnN0YW5jZXMucHVzaChuZXcgQXBpKGlzQXBpQ29uZmlnKGgpID8gaCA6IHsgdXJsOiBuZXcgVVJMKGgpLCAuLi50aGlzLmdsb2JhbENvbmZpZyB9KSkpO1xuICAgIH1cbiAgICBhc3luYyBnZXQocGF0aCwgY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QocGF0aCwgeyAuLi5jb25maWcsIG1ldGhvZDogXCJHRVRcIiB9KTtcbiAgICB9XG4gICAgYXN5bmMgcG9zdChwYXRoLCBib2R5LCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChwYXRoLCB7IGRhdGE6IGJvZHksIC4uLmNvbmZpZywgbWV0aG9kOiBcIlBPU1RcIiB9KTtcbiAgICB9XG4gICAgYXN5bmMgcmVxdWVzdChwYXRoLCBjb25maWcpIHtcbiAgICAgICAgY29uc3QgZmFsbGJhY2tDb25maWcgPSB7IC4uLmRlZmF1bHRGYWxsYmFja0NvbmZpZywgLi4uY29uZmlnPy5mYWxsYmFjayB9O1xuICAgICAgICBsZXQgYXR0ZW1wdHMgPSAwO1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICAgICAgY29uc3QgaW5zdGFuY2VzID0gY29uZmlnPy5nYXRld2F5T25seSA/IHRoaXMuZ2F0ZXdheUluc3RhbmNlcyA6IHRoaXMuZ2F0ZXdheUluc3RhbmNlcy5jb25jYXQodGhpcy5taW5lckluc3RhbmNlcyk7XG4gICAgICAgIGNvbnN0IG1heEF0dGVtcHRzID0gTWF0aC5taW4oTWF0aC5tYXgoZmFsbGJhY2tDb25maWc/Lm1heEF0dGVtcHRzLCAxKSwgaW5zdGFuY2VzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IG9uRmFsbGJhY2sgPSBmYWxsYmFja0NvbmZpZz8ub25GYWxsYmFjaztcbiAgICAgICAgaWYgKGluc3RhbmNlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBydW4gcmVxdWVzdCBkdWUgdG8gMCBjb25maWd1cmVkIGdhdGV3YXlzL21pbmVycy5gKTtcbiAgICAgICAgd2hpbGUgKGF0dGVtcHRzKysgPCBtYXhBdHRlbXB0cykge1xuICAgICAgICAgICAgY29uc3QgYXBpSW5zdGFuY2UgPSBpbnN0YW5jZXMuYXQoZmFsbGJhY2tDb25maWc/LnJhbmRvbWx5U2VsZWN0ID8gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaW5zdGFuY2VzLmxlbmd0aCkgOiBhdHRlbXB0cyAtIDEpO1xuICAgICAgICAgICAgaWYgKCFhcGlJbnN0YW5jZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGFwaUluc3RhbmNlLnJlcXVlc3QocGF0aCwgeyAuLi5jb25maWcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIG9uRmFsbGJhY2s/LihlLCBhcGlJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgICAgICAgICAgaWYgKGF0dGVtcHRzID49IG1heEF0dGVtcHRzKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEZhbGxiYWNrQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFsbGJhY2tBcGkuanMubWFwIl0sIm5hbWVzIjpbIkFwaSIsImlzQXBpQ29uZmlnIiwibyIsImRlZmF1bHRGYWxsYmFja0NvbmZpZyIsIm1heEF0dGVtcHRzIiwicmFuZG9tbHlTZWxlY3QiLCJGYWxsYmFja0FwaSIsImNvbnN0cnVjdG9yIiwiZ2F0ZXdheXMiLCJtaW5lcnMiLCJvcHRzIiwibWluZXJJbnN0YW5jZXMiLCJnYXRld2F5SW5zdGFuY2VzIiwiZ2xvYmFsQ29uZmlnIiwiYWRkTWluZXJzIiwiYWRkR2F0ZXdheXMiLCJhZGRQZWVyc0Zyb20iLCJ1cmwiLCJvcHRpb25zIiwicGVlcnMiLCJnZXQiLCJVUkwiLCJ0b1N0cmluZyIsImRhdGEiLCJzbGljZSIsImxpbWl0IiwibWFwIiwicCIsImhvc3RzIiwiZm9yRWFjaCIsImgiLCJwdXNoIiwicGF0aCIsImNvbmZpZyIsInJlcXVlc3QiLCJtZXRob2QiLCJwb3N0IiwiYm9keSIsImZhbGxiYWNrQ29uZmlnIiwiZmFsbGJhY2siLCJhdHRlbXB0cyIsImVycm9ycyIsImluc3RhbmNlcyIsImdhdGV3YXlPbmx5IiwiY29uY2F0IiwiTWF0aCIsIm1pbiIsIm1heCIsImxlbmd0aCIsIm9uRmFsbGJhY2siLCJFcnJvciIsImFwaUluc3RhbmNlIiwiYXQiLCJmbG9vciIsInJhbmRvbSIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/fallbackApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/merkle.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/merkle.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_CHUNK_SIZE: () => (/* binding */ MAX_CHUNK_SIZE),\n/* harmony export */   MIN_CHUNK_SIZE: () => (/* binding */ MIN_CHUNK_SIZE),\n/* harmony export */   Merkle: () => (/* binding */ Merkle),\n/* harmony export */   arrayCompare: () => (/* binding */ arrayCompare),\n/* harmony export */   arrayFlatten: () => (/* binding */ arrayFlatten),\n/* harmony export */   bufferToInt: () => (/* binding */ bufferToInt),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   intToBuffer: () => (/* binding */ intToBuffer)\n/* harmony export */ });\n/* harmony import */ var _arweave_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../arweave.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/arweave.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n/**\n * @see {@link https://github.com/ArweaveTeam/arweave/blob/fbc381e0e36efffa45d13f2faa6199d3766edaa2/apps/arweave/src/ar_merkle.erl}\n */ \n\nconst MAX_CHUNK_SIZE = 256 * 1024;\nconst MIN_CHUNK_SIZE = 32 * 1024;\nconst NOTE_SIZE = 32;\nconst HASH_SIZE = 32;\nclass Merkle {\n    constructor(opts){\n        this.crypto = opts.deps.crypto;\n    }\n    /**\n     * Takes the input data and chunks it into (mostly) equal sized chunks.\n     * The last chunk will be a bit smaller as it contains the remainder\n     * from the chunking process.\n     */ async chunkData(data) {\n        const chunks = [];\n        let rest = data;\n        let cursor = 0;\n        while(rest.byteLength >= MAX_CHUNK_SIZE){\n            let chunkSize = MAX_CHUNK_SIZE;\n            // If the total bytes left will produce a chunk < MIN_CHUNK_SIZE,\n            // then adjust the amount we put in this 2nd last chunk.\n            const nextChunkSize = rest.byteLength - MAX_CHUNK_SIZE;\n            if (nextChunkSize > 0 && nextChunkSize < MIN_CHUNK_SIZE) {\n                chunkSize = Math.ceil(rest.byteLength / 2);\n            // console.log(`Last chunk will be: ${nextChunkSize} which is below ${MIN_CHUNK_SIZE}, adjusting current to ${chunkSize} with ${rest.byteLength} left.`)\n            }\n            const chunk = rest.slice(0, chunkSize);\n            const dataHash = await this.crypto.hash(chunk);\n            cursor += chunk.byteLength;\n            chunks.push({\n                dataHash,\n                minByteRange: cursor - chunk.byteLength,\n                maxByteRange: cursor\n            });\n            rest = rest.slice(chunkSize);\n        }\n        chunks.push({\n            dataHash: await this.crypto.hash(rest),\n            minByteRange: cursor,\n            maxByteRange: cursor + rest.byteLength\n        });\n        return chunks;\n    }\n    async generateLeaves(chunks) {\n        return Promise.all(chunks.map(async ({ dataHash, minByteRange, maxByteRange })=>{\n            return {\n                type: \"leaf\",\n                id: await this.hash(await Promise.all([\n                    this.hash(dataHash),\n                    this.hash(intToBuffer(maxByteRange))\n                ])),\n                dataHash: dataHash,\n                minByteRange,\n                maxByteRange\n            };\n        }));\n    }\n    /**\n     * Builds an arweave merkle tree and gets the root hash for the given input.\n     */ async computeRootHash(data) {\n        const rootNode = await this.generateTree(data);\n        return rootNode.id;\n    }\n    async generateTree(data) {\n        const rootNode = await this.buildLayers(await this.generateLeaves(await this.chunkData(data)));\n        return rootNode;\n    }\n    /**\n     * Generates the data_root, chunks & proofs\n     * needed for a transaction.\n     *\n     * This also checks if the last chunk is a zero-length\n     * chunk and discards that chunk and proof if so.\n     * (we do not need to upload this zero length chunk)\n     *\n     * @param data\n     */ async generateTransactionChunks(data) {\n        const chunks = await this.chunkData(data);\n        const leaves = await this.generateLeaves(chunks);\n        const root = await this.buildLayers(leaves);\n        const proofs = await this.generateProofs(root);\n        // Discard the last chunk & proof if it's zero length.\n        const lastChunk = chunks.slice(-1)[0];\n        if (lastChunk.maxByteRange - lastChunk.minByteRange === 0) {\n            chunks.splice(chunks.length - 1, 1);\n            proofs.splice(proofs.length - 1, 1);\n        }\n        return {\n            data_root: root.id,\n            chunks,\n            proofs\n        };\n    }\n    /**\n     * Starting with the bottom layer of leaf nodes, hash every second pair\n     * into a new branch node, push those branch nodes onto a new layer,\n     * and then recurse, building up the tree to it's root, where the\n     * layer only consists of two items.\n     */ async buildLayers(nodes, level = 0) {\n        // If there is only 1 node left, this is going to be the root node\n        if (nodes.length < 2) {\n            const root = nodes[0];\n            // console.log(\"Root layer\", root);\n            return root;\n        }\n        const nextLayer = [];\n        for(let i = 0; i < nodes.length; i += 2){\n            nextLayer.push(await this.hashBranch(nodes[i], nodes[i + 1]));\n        }\n        // console.log(\"Layer\", nextLayer);\n        return this.buildLayers(nextLayer, level + 1);\n    }\n    /**\n     * Recursively search through all branches of the tree,\n     * and generate a proof for each leaf node.\n     */ generateProofs(root) {\n        const proofs = this.resolveBranchProofs(root);\n        if (!Array.isArray(proofs)) {\n            return [\n                proofs\n            ];\n        }\n        return arrayFlatten(proofs);\n    }\n    resolveBranchProofs(node, proof = new Uint8Array(), depth = 0) {\n        if (node.type == \"leaf\") {\n            return {\n                offset: node.maxByteRange - 1,\n                proof: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBuffers)([\n                    proof,\n                    node.dataHash,\n                    intToBuffer(node.maxByteRange)\n                ])\n            };\n        }\n        if (node.type == \"branch\") {\n            const partialProof = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBuffers)([\n                proof,\n                node.leftChild.id,\n                node.rightChild.id,\n                intToBuffer(node.byteRange)\n            ]);\n            return [\n                this.resolveBranchProofs(node.leftChild, partialProof, depth + 1),\n                this.resolveBranchProofs(node.rightChild, partialProof, depth + 1)\n            ];\n        }\n        throw new Error(`Unexpected node type`);\n    }\n    async validatePath(id, dest, leftBound, rightBound, path) {\n        if (rightBound <= 0) {\n            return false;\n        }\n        if (dest >= rightBound) {\n            return this.validatePath(id, 0, rightBound - 1, rightBound, path);\n        }\n        if (dest < 0) {\n            return this.validatePath(id, 0, 0, rightBound, path);\n        }\n        if (path.length == HASH_SIZE + NOTE_SIZE) {\n            const pathData = path.slice(0, HASH_SIZE);\n            const endOffsetBuffer = path.slice(pathData.length, pathData.length + NOTE_SIZE);\n            const pathDataHash = await this.hash([\n                await this.hash(pathData),\n                await this.hash(endOffsetBuffer)\n            ]);\n            const result = arrayCompare(id, pathDataHash);\n            if (result) {\n                return {\n                    offset: rightBound - 1,\n                    leftBound: leftBound,\n                    rightBound: rightBound,\n                    chunkSize: rightBound - leftBound\n                };\n            }\n            return false;\n        }\n        const left = path.slice(0, HASH_SIZE);\n        const right = path.slice(left.length, left.length + HASH_SIZE);\n        const offsetBuffer = path.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);\n        const offset = bufferToInt(offsetBuffer);\n        const remainder = path.slice(left.length + right.length + offsetBuffer.length);\n        const pathHash = await this.hash([\n            await this.hash(left),\n            await this.hash(right),\n            await this.hash(offsetBuffer)\n        ]);\n        if (arrayCompare(id, pathHash)) {\n            if (dest < offset) {\n                return await this.validatePath(left, dest, leftBound, Math.min(rightBound, offset), remainder);\n            }\n            return await this.validatePath(right, dest, Math.max(leftBound, offset), rightBound, remainder);\n        }\n        return false;\n    }\n    async hashBranch(left, right) {\n        if (!right) {\n            return left;\n        }\n        const branch = {\n            type: \"branch\",\n            id: await this.hash([\n                await this.hash(left.id),\n                await this.hash(right.id),\n                await this.hash(intToBuffer(left.maxByteRange))\n            ]),\n            byteRange: left.maxByteRange,\n            maxByteRange: right.maxByteRange,\n            leftChild: left,\n            rightChild: right\n        };\n        return branch;\n    }\n    async hash(data) {\n        if (Array.isArray(data)) {\n            data = _arweave_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].utils.concatBuffers(data);\n        }\n        return new Uint8Array(await this.crypto.hash(data));\n    }\n    /**\n     * Inspect an arweave chunk proof.\n     * Takes proof, parses, reads and displays the values for console logging.\n     * One proof section per line\n     * Format: left,right,offset => hash\n     */ async debug(proof, output = \"\") {\n        if (proof.byteLength < 1) {\n            return output;\n        }\n        const left = proof.slice(0, HASH_SIZE);\n        const right = proof.slice(left.length, left.length + HASH_SIZE);\n        const offsetBuffer = proof.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);\n        const offset = bufferToInt(offsetBuffer);\n        const remainder = proof.slice(left.length + right.length + offsetBuffer.length);\n        const pathHash = await this.hash([\n            await this.hash(left),\n            await this.hash(right),\n            await this.hash(offsetBuffer)\n        ]);\n        const updatedOutput = `${output}\\n${JSON.stringify(Buffer.from(left))},${JSON.stringify(Buffer.from(right))},${offset} => ${JSON.stringify(pathHash)}`;\n        return this.debug(remainder, updatedOutput);\n    }\n}\nfunction arrayFlatten(input) {\n    const flat = [];\n    input.forEach((item)=>{\n        if (Array.isArray(item)) {\n            flat.push(...arrayFlatten(item));\n        } else {\n            flat.push(item);\n        }\n    });\n    return flat;\n}\nfunction intToBuffer(note) {\n    const buffer = new Uint8Array(NOTE_SIZE);\n    for(let i = buffer.length - 1; i >= 0; i--){\n        const byte = note % 256;\n        buffer[i] = byte;\n        note = (note - byte) / 256;\n    }\n    return buffer;\n}\nfunction bufferToInt(buffer) {\n    let value = 0;\n    for(let i = 0; i < buffer.length; i++){\n        value *= 256;\n        value += buffer[i];\n    }\n    return value;\n}\nconst arrayCompare = (a, b)=>a.every((value, index)=>b[index] === value);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Merkle); //# sourceMappingURL=merkle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/merkle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction-uploader.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction-uploader.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FATAL_CHUNK_UPLOAD_ERRORS: () => (/* binding */ FATAL_CHUNK_UPLOAD_ERRORS),\n/* harmony export */   TransactionUploader: () => (/* binding */ TransactionUploader)\n/* harmony export */ });\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/error.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n\n\n\n// import { validatePath } from \"./merkle.js\";\n// Maximum amount of chunks we will upload in the body.\nconst MAX_CHUNKS_IN_BODY = 1;\n// We assume these errors are intermitment and we can try again after a delay:\n// - not_joined\n// - timeout\n// - data_root_not_found (we may have hit a node that just hasn't seen it yet)\n// - exceeds_disk_pool_size_limit\n// We also try again after any kind of unexpected network errors\n// Errors from /chunk we should never try and continue on.\nconst FATAL_CHUNK_UPLOAD_ERRORS = [\n    \"invalid_json\",\n    \"chunk_too_big\",\n    \"data_path_too_big\",\n    \"offset_too_big\",\n    \"data_size_too_big\",\n    \"chunk_proof_ratio_not_attractive\",\n    \"invalid_proof\"\n];\n// Amount we will delay on receiving an error response but do want to continue.\nconst ERROR_DELAY = 1000 * 40;\nclass TransactionUploader {\n    get isComplete() {\n        return this.txPosted && this.chunkIndex === this.transaction.chunks.chunks.length;\n    }\n    get totalChunks() {\n        return this.transaction.chunks.chunks.length;\n    }\n    get uploadedChunks() {\n        return this.chunkIndex;\n    }\n    get pctComplete() {\n        return Math.trunc(this.uploadedChunks / this.totalChunks * 100);\n    }\n    constructor({ deps, transaction }){\n        this.chunkIndex = 0;\n        this.txPosted = false;\n        this.lastRequestTimeEnd = 0;\n        this.totalErrors = 0 // Not serialized.\n        ;\n        this.lastResponseStatus = 0;\n        this.lastResponseError = \"\";\n        if (!transaction.id) {\n            throw new Error(`Transaction is not signed`);\n        }\n        if (!transaction.chunks) {\n            throw new Error(`Transaction chunks not prepared`);\n        }\n        this.api = deps.api;\n        this.crypto = deps.crypto;\n        this.merkle = deps.merkle;\n        this.deepHash = deps.deepHash;\n        // Make a copy of transaction, zeroing the data so we can serialize.\n        this.data = transaction.data;\n        this.transaction = new _transaction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            attributes: Object.assign({}, transaction, {\n                data: new Uint8Array(0)\n            }),\n            deps: {\n                merkle: deps.merkle,\n                deepHash: deps.deepHash\n            }\n        });\n    }\n    /**\n     * Uploads the next part of the transaction.\n     * On the first call this posts the transaction\n     * itself and on any subsequent calls uploads the\n     * next chunk until it completes.\n     */ async uploadChunk(chunkIndex_) {\n        if (this.isComplete) {\n            throw new Error(`Upload is already complete`);\n        }\n        if (this.lastResponseError !== \"\") {\n            this.totalErrors++;\n        } else {\n            this.totalErrors = 0;\n        }\n        // We have been trying for about an hour receiving an\n        // error every time, so eventually bail.\n        if (this.totalErrors === 100) {\n            throw new Error(`Unable to complete upload: ${this.lastResponseStatus}: ${this.lastResponseError}`);\n        }\n        let delay = this.lastResponseError === \"\" ? 0 : Math.max(this.lastRequestTimeEnd + ERROR_DELAY - Date.now(), ERROR_DELAY);\n        if (delay > 0) {\n            // Jitter delay bcoz networks, subtract up to 30% from 40 seconds\n            delay = delay - delay * Math.random() * 0.3;\n            await new Promise((res)=>setTimeout(res, delay));\n        }\n        this.lastResponseError = \"\";\n        if (!this.txPosted) {\n            await this.postTransaction();\n            return;\n        }\n        if (chunkIndex_) {\n            this.chunkIndex = chunkIndex_;\n        }\n        const chunk = this.transaction.getChunk(chunkIndex_ || this.chunkIndex, this.data);\n        const chunkOk = await this.merkle.validatePath(this.transaction.chunks.data_root, parseInt(chunk.offset), 0, parseInt(chunk.data_size), (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.b64UrlToBuffer)(chunk.data_path));\n        if (!chunkOk) {\n            throw new Error(`Unable to validate chunk ${this.chunkIndex}`);\n        }\n        // Catch network errors and turn them into objects with status -1 and an error message.\n        const resp = await this.api.post(`chunk`, this.transaction.getChunk(this.chunkIndex, this.data)).catch((e)=>{\n            console.error(e.message);\n            return {\n                status: -1,\n                data: {\n                    error: e.message\n                }\n            };\n        });\n        this.lastRequestTimeEnd = Date.now();\n        this.lastResponseStatus = resp.status;\n        if (this.lastResponseStatus == 200) {\n            this.chunkIndex++;\n        } else {\n            this.lastResponseError = (0,_error_js__WEBPACK_IMPORTED_MODULE_1__.getError)(resp);\n            if (FATAL_CHUNK_UPLOAD_ERRORS.includes(this.lastResponseError)) {\n                throw new Error(`Fatal error uploading chunk ${this.chunkIndex}: ${this.lastResponseError}`);\n            }\n        }\n    }\n    /**\n     * Reconstructs an upload from its serialized state and data.\n     * Checks if data matches the expected data_root.\n     *\n     * @param serialized\n     * @param data\n     */ static async fromSerialized({ serialized, data, deps }) {\n        if (!serialized || typeof serialized.chunkIndex !== \"number\" || typeof serialized.transaction !== \"object\") {\n            throw new Error(`Serialized object does not match expected format.`);\n        }\n        // Everything looks ok, reconstruct the TransactionUpload,\n        // prepare the chunks again and verify the data_root matches\n        const transaction = new _transaction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](serialized.transaction);\n        if (!transaction.chunks) {\n            await transaction.prepareChunks(data);\n        }\n        const upload = new TransactionUploader({\n            deps,\n            transaction\n        });\n        // Copy the serialized upload information, and data passed in.\n        upload.chunkIndex = serialized.chunkIndex;\n        upload.lastRequestTimeEnd = serialized.lastRequestTimeEnd;\n        upload.lastResponseError = serialized.lastResponseError;\n        upload.lastResponseStatus = serialized.lastResponseStatus;\n        upload.txPosted = serialized.txPosted;\n        upload.data = data;\n        if (upload.transaction.data_root !== serialized.transaction.data_root) {\n            throw new Error(`Data mismatch: Uploader doesn't match provided data.`);\n        }\n        return upload;\n    }\n    /**\n     * Reconstruct an upload from the tx metadata, ie /tx/<id>.\n     *\n     * @param api\n     * @param id\n     * @param data\n     */ static async fromTransactionId(api, id) {\n        const resp = await api.get(`tx/${id}`);\n        if (resp.status !== 200) {\n            throw new Error(`Tx ${id} not found: ${resp.status}`);\n        }\n        const transaction = resp.data;\n        transaction.data = new Uint8Array(0);\n        const serialized = {\n            txPosted: true,\n            chunkIndex: 0,\n            lastResponseError: \"\",\n            lastRequestTimeEnd: 0,\n            lastResponseStatus: 0,\n            transaction\n        };\n        return serialized;\n    }\n    toJSON() {\n        return {\n            chunkIndex: this.chunkIndex,\n            transaction: this.transaction,\n            lastRequestTimeEnd: this.lastRequestTimeEnd,\n            lastResponseStatus: this.lastResponseStatus,\n            lastResponseError: this.lastResponseError,\n            txPosted: this.txPosted\n        };\n    }\n    // POST to /tx\n    async postTransaction() {\n        const uploadInBody = this.totalChunks <= MAX_CHUNKS_IN_BODY;\n        if (uploadInBody) {\n            // Post the transaction with data.\n            this.transaction.data = this.data;\n            const resp = await this.api.post(`tx`, this.transaction).catch((e)=>{\n                console.error(e);\n                return {\n                    status: -1,\n                    data: {\n                        error: e.message\n                    }\n                };\n            });\n            this.lastRequestTimeEnd = Date.now();\n            this.lastResponseStatus = resp.status;\n            this.transaction.data = new Uint8Array(0);\n            if (resp.status >= 200 && resp.status < 300) {\n                // We are complete.\n                this.txPosted = true;\n                this.chunkIndex = MAX_CHUNKS_IN_BODY;\n                return;\n            }\n            this.lastResponseError = (0,_error_js__WEBPACK_IMPORTED_MODULE_1__.getError)(resp);\n            throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);\n        }\n        // Post the transaction with no data.\n        const resp = await this.api.post(`tx`, this.transaction);\n        this.lastRequestTimeEnd = Date.now();\n        this.lastResponseStatus = resp.status;\n        if (!(resp.status >= 200 && resp.status < 300)) {\n            this.lastResponseError = (0,_error_js__WEBPACK_IMPORTED_MODULE_1__.getError)(resp);\n            throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);\n        }\n        this.txPosted = true;\n    }\n} //# sourceMappingURL=transaction-uploader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2xpYi90cmFuc2FjdGlvbi11cGxvYWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyQztBQUNMO0FBQ007QUFDNUMsOENBQThDO0FBQzlDLHVEQUF1RDtBQUN2RCxNQUFNRyxxQkFBcUI7QUFDM0IsOEVBQThFO0FBQzlFLGVBQWU7QUFDZixZQUFZO0FBQ1osOEVBQThFO0FBQzlFLGlDQUFpQztBQUNqQyxnRUFBZ0U7QUFDaEUsMERBQTBEO0FBQ25ELE1BQU1DLDRCQUE0QjtJQUNyQztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNILENBQUM7QUFDRiwrRUFBK0U7QUFDL0UsTUFBTUMsY0FBYyxPQUFPO0FBQ3BCLE1BQU1DO0lBU1QsSUFBSUMsYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDQyxRQUFRLElBQUksSUFBSSxDQUFDQyxVQUFVLEtBQUssSUFBSSxDQUFDQyxXQUFXLENBQUNDLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDQyxNQUFNO0lBQ3JGO0lBQ0EsSUFBSUMsY0FBYztRQUNkLE9BQU8sSUFBSSxDQUFDSCxXQUFXLENBQUNDLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDQyxNQUFNO0lBQ2hEO0lBQ0EsSUFBSUUsaUJBQWlCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDTCxVQUFVO0lBQzFCO0lBQ0EsSUFBSU0sY0FBYztRQUNkLE9BQU9DLEtBQUtDLEtBQUssQ0FBQyxJQUFLLENBQUNILGNBQWMsR0FBRyxJQUFJLENBQUNELFdBQVcsR0FBSTtJQUNqRTtJQUtBSyxZQUFZLEVBQUVDLElBQUksRUFBRVQsV0FBVyxFQUFHLENBQUU7YUF4QnBDRCxhQUFhO2FBQ2JELFdBQVc7YUFFWFkscUJBQXFCO2FBQ3JCQyxjQUFjLEVBQUcsa0JBQWtCOzthQUVuQ0MscUJBQXFCO2FBQ3JCQyxvQkFBb0I7UUFrQmhCLElBQUksQ0FBQ2IsWUFBWWMsRUFBRSxFQUFFO1lBQ2pCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDO1FBQy9DO1FBQ0EsSUFBSSxDQUFDZixZQUFZQyxNQUFNLEVBQUU7WUFDckIsTUFBTSxJQUFJYyxNQUFNLENBQUMsK0JBQStCLENBQUM7UUFDckQ7UUFDQSxJQUFJLENBQUNDLEdBQUcsR0FBR1AsS0FBS08sR0FBRztRQUNuQixJQUFJLENBQUNDLE1BQU0sR0FBR1IsS0FBS1EsTUFBTTtRQUN6QixJQUFJLENBQUNDLE1BQU0sR0FBR1QsS0FBS1MsTUFBTTtRQUN6QixJQUFJLENBQUNDLFFBQVEsR0FBR1YsS0FBS1UsUUFBUTtRQUM3QixvRUFBb0U7UUFDcEUsSUFBSSxDQUFDQyxJQUFJLEdBQUdwQixZQUFZb0IsSUFBSTtRQUM1QixJQUFJLENBQUNwQixXQUFXLEdBQUcsSUFBSVYsdURBQVdBLENBQUM7WUFDL0IrQixZQUFZQyxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHdkIsYUFBYTtnQkFBRW9CLE1BQU0sSUFBSUksV0FBVztZQUFHO1lBQ3JFZixNQUFNO2dCQUFFUyxRQUFRVCxLQUFLUyxNQUFNO2dCQUFFQyxVQUFVVixLQUFLVSxRQUFRO1lBQUM7UUFDekQ7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTU0sWUFBWUMsV0FBVyxFQUFFO1FBQzNCLElBQUksSUFBSSxDQUFDN0IsVUFBVSxFQUFFO1lBQ2pCLE1BQU0sSUFBSWtCLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQztRQUNoRDtRQUNBLElBQUksSUFBSSxDQUFDRixpQkFBaUIsS0FBSyxJQUFJO1lBQy9CLElBQUksQ0FBQ0YsV0FBVztRQUNwQixPQUNLO1lBQ0QsSUFBSSxDQUFDQSxXQUFXLEdBQUc7UUFDdkI7UUFDQSxxREFBcUQ7UUFDckQsd0NBQXdDO1FBQ3hDLElBQUksSUFBSSxDQUFDQSxXQUFXLEtBQUssS0FBSztZQUMxQixNQUFNLElBQUlJLE1BQU0sQ0FBQywyQkFBMkIsRUFBRSxJQUFJLENBQUNILGtCQUFrQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUNDLGlCQUFpQixDQUFDLENBQUM7UUFDdEc7UUFDQSxJQUFJYyxRQUFRLElBQUksQ0FBQ2QsaUJBQWlCLEtBQUssS0FBSyxJQUFJUCxLQUFLc0IsR0FBRyxDQUFDLElBQUksQ0FBQ2xCLGtCQUFrQixHQUFHZixjQUFja0MsS0FBS0MsR0FBRyxJQUFJbkM7UUFDN0csSUFBSWdDLFFBQVEsR0FBRztZQUNYLGlFQUFpRTtZQUNqRUEsUUFBUUEsUUFBUUEsUUFBUXJCLEtBQUt5QixNQUFNLEtBQUs7WUFDeEMsTUFBTSxJQUFJQyxRQUFRLENBQUNDLE1BQVFDLFdBQVdELEtBQUtOO1FBQy9DO1FBQ0EsSUFBSSxDQUFDZCxpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDZixRQUFRLEVBQUU7WUFDaEIsTUFBTSxJQUFJLENBQUNxQyxlQUFlO1lBQzFCO1FBQ0o7UUFDQSxJQUFJVCxhQUFhO1lBQ2IsSUFBSSxDQUFDM0IsVUFBVSxHQUFHMkI7UUFDdEI7UUFDQSxNQUFNVSxRQUFRLElBQUksQ0FBQ3BDLFdBQVcsQ0FBQ3FDLFFBQVEsQ0FBQ1gsZUFBZSxJQUFJLENBQUMzQixVQUFVLEVBQUUsSUFBSSxDQUFDcUIsSUFBSTtRQUNqRixNQUFNa0IsVUFBVSxNQUFNLElBQUksQ0FBQ3BCLE1BQU0sQ0FBQ3FCLFlBQVksQ0FBQyxJQUFJLENBQUN2QyxXQUFXLENBQUNDLE1BQU0sQ0FBQ3VDLFNBQVMsRUFBRUMsU0FBU0wsTUFBTU0sTUFBTSxHQUFHLEdBQUdELFNBQVNMLE1BQU1PLFNBQVMsR0FBR25ELHlEQUFjQSxDQUFDNEMsTUFBTVEsU0FBUztRQUN0SyxJQUFJLENBQUNOLFNBQVM7WUFDVixNQUFNLElBQUl2QixNQUFNLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDaEIsVUFBVSxDQUFDLENBQUM7UUFDakU7UUFDQSx1RkFBdUY7UUFDdkYsTUFBTThDLE9BQU8sTUFBTSxJQUFJLENBQUM3QixHQUFHLENBQUM4QixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUM5QyxXQUFXLENBQUNxQyxRQUFRLENBQUMsSUFBSSxDQUFDdEMsVUFBVSxFQUFFLElBQUksQ0FBQ3FCLElBQUksR0FBRzJCLEtBQUssQ0FBQyxDQUFDQztZQUNwR0MsUUFBUUMsS0FBSyxDQUFDRixFQUFFRyxPQUFPO1lBQ3ZCLE9BQU87Z0JBQUVDLFFBQVEsQ0FBQztnQkFBR2hDLE1BQU07b0JBQUU4QixPQUFPRixFQUFFRyxPQUFPO2dCQUFDO1lBQUU7UUFDcEQ7UUFDQSxJQUFJLENBQUN6QyxrQkFBa0IsR0FBR21CLEtBQUtDLEdBQUc7UUFDbEMsSUFBSSxDQUFDbEIsa0JBQWtCLEdBQUdpQyxLQUFLTyxNQUFNO1FBQ3JDLElBQUksSUFBSSxDQUFDeEMsa0JBQWtCLElBQUksS0FBSztZQUNoQyxJQUFJLENBQUNiLFVBQVU7UUFDbkIsT0FDSztZQUNELElBQUksQ0FBQ2MsaUJBQWlCLEdBQUd0QixtREFBUUEsQ0FBQ3NEO1lBQ2xDLElBQUluRCwwQkFBMEIyRCxRQUFRLENBQUMsSUFBSSxDQUFDeEMsaUJBQWlCLEdBQUc7Z0JBQzVELE1BQU0sSUFBSUUsTUFBTSxDQUFDLDRCQUE0QixFQUFFLElBQUksQ0FBQ2hCLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDYyxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9GO1FBQ0o7SUFDSjtJQUNBOzs7Ozs7S0FNQyxHQUNELGFBQWF5QyxlQUFlLEVBQUVDLFVBQVUsRUFBRW5DLElBQUksRUFBRVgsSUFBSSxFQUFHLEVBQUU7UUFDckQsSUFBSSxDQUFDOEMsY0FBYyxPQUFPQSxXQUFXeEQsVUFBVSxLQUFLLFlBQVksT0FBT3dELFdBQVd2RCxXQUFXLEtBQUssVUFBVTtZQUN4RyxNQUFNLElBQUllLE1BQU0sQ0FBQyxpREFBaUQsQ0FBQztRQUN2RTtRQUNBLDBEQUEwRDtRQUMxRCw0REFBNEQ7UUFDNUQsTUFBTWYsY0FBYyxJQUFJVix1REFBV0EsQ0FBQ2lFLFdBQVd2RCxXQUFXO1FBQzFELElBQUksQ0FBQ0EsWUFBWUMsTUFBTSxFQUFFO1lBQ3JCLE1BQU1ELFlBQVl3RCxhQUFhLENBQUNwQztRQUNwQztRQUNBLE1BQU1xQyxTQUFTLElBQUk3RCxvQkFBb0I7WUFDbkNhO1lBQ0FUO1FBQ0o7UUFDQSw4REFBOEQ7UUFDOUR5RCxPQUFPMUQsVUFBVSxHQUFHd0QsV0FBV3hELFVBQVU7UUFDekMwRCxPQUFPL0Msa0JBQWtCLEdBQUc2QyxXQUFXN0Msa0JBQWtCO1FBQ3pEK0MsT0FBTzVDLGlCQUFpQixHQUFHMEMsV0FBVzFDLGlCQUFpQjtRQUN2RDRDLE9BQU83QyxrQkFBa0IsR0FBRzJDLFdBQVczQyxrQkFBa0I7UUFDekQ2QyxPQUFPM0QsUUFBUSxHQUFHeUQsV0FBV3pELFFBQVE7UUFDckMyRCxPQUFPckMsSUFBSSxHQUFHQTtRQUNkLElBQUlxQyxPQUFPekQsV0FBVyxDQUFDd0MsU0FBUyxLQUFLZSxXQUFXdkQsV0FBVyxDQUFDd0MsU0FBUyxFQUFFO1lBQ25FLE1BQU0sSUFBSXpCLE1BQU0sQ0FBQyxvREFBb0QsQ0FBQztRQUMxRTtRQUNBLE9BQU8wQztJQUNYO0lBQ0E7Ozs7OztLQU1DLEdBQ0QsYUFBYUMsa0JBQWtCMUMsR0FBRyxFQUFFRixFQUFFLEVBQUU7UUFDcEMsTUFBTStCLE9BQU8sTUFBTTdCLElBQUkyQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUU3QyxHQUFHLENBQUM7UUFDckMsSUFBSStCLEtBQUtPLE1BQU0sS0FBSyxLQUFLO1lBQ3JCLE1BQU0sSUFBSXJDLE1BQU0sQ0FBQyxHQUFHLEVBQUVELEdBQUcsWUFBWSxFQUFFK0IsS0FBS08sTUFBTSxDQUFDLENBQUM7UUFDeEQ7UUFDQSxNQUFNcEQsY0FBYzZDLEtBQUt6QixJQUFJO1FBQzdCcEIsWUFBWW9CLElBQUksR0FBRyxJQUFJSSxXQUFXO1FBQ2xDLE1BQU0rQixhQUFhO1lBQ2Z6RCxVQUFVO1lBQ1ZDLFlBQVk7WUFDWmMsbUJBQW1CO1lBQ25CSCxvQkFBb0I7WUFDcEJFLG9CQUFvQjtZQUNwQlo7UUFDSjtRQUNBLE9BQU91RDtJQUNYO0lBQ0FLLFNBQVM7UUFDTCxPQUFPO1lBQ0g3RCxZQUFZLElBQUksQ0FBQ0EsVUFBVTtZQUMzQkMsYUFBYSxJQUFJLENBQUNBLFdBQVc7WUFDN0JVLG9CQUFvQixJQUFJLENBQUNBLGtCQUFrQjtZQUMzQ0Usb0JBQW9CLElBQUksQ0FBQ0Esa0JBQWtCO1lBQzNDQyxtQkFBbUIsSUFBSSxDQUFDQSxpQkFBaUI7WUFDekNmLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1FBQzNCO0lBQ0o7SUFDQSxjQUFjO0lBQ2QsTUFBTXFDLGtCQUFrQjtRQUNwQixNQUFNMEIsZUFBZSxJQUFJLENBQUMxRCxXQUFXLElBQUlWO1FBQ3pDLElBQUlvRSxjQUFjO1lBQ2Qsa0NBQWtDO1lBQ2xDLElBQUksQ0FBQzdELFdBQVcsQ0FBQ29CLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUk7WUFDakMsTUFBTXlCLE9BQU8sTUFBTSxJQUFJLENBQUM3QixHQUFHLENBQUM4QixJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUM5QyxXQUFXLEVBQUUrQyxLQUFLLENBQUMsQ0FBQ0M7Z0JBQzVEQyxRQUFRQyxLQUFLLENBQUNGO2dCQUNkLE9BQU87b0JBQUVJLFFBQVEsQ0FBQztvQkFBR2hDLE1BQU07d0JBQUU4QixPQUFPRixFQUFFRyxPQUFPO29CQUFDO2dCQUFFO1lBQ3BEO1lBQ0EsSUFBSSxDQUFDekMsa0JBQWtCLEdBQUdtQixLQUFLQyxHQUFHO1lBQ2xDLElBQUksQ0FBQ2xCLGtCQUFrQixHQUFHaUMsS0FBS08sTUFBTTtZQUNyQyxJQUFJLENBQUNwRCxXQUFXLENBQUNvQixJQUFJLEdBQUcsSUFBSUksV0FBVztZQUN2QyxJQUFJcUIsS0FBS08sTUFBTSxJQUFJLE9BQU9QLEtBQUtPLE1BQU0sR0FBRyxLQUFLO2dCQUN6QyxtQkFBbUI7Z0JBQ25CLElBQUksQ0FBQ3RELFFBQVEsR0FBRztnQkFDaEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdOO2dCQUNsQjtZQUNKO1lBQ0EsSUFBSSxDQUFDb0IsaUJBQWlCLEdBQUd0QixtREFBUUEsQ0FBQ3NEO1lBQ2xDLE1BQU0sSUFBSTlCLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRThCLEtBQUtPLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDdkMsaUJBQWlCLENBQUMsQ0FBQztRQUM3RjtRQUNBLHFDQUFxQztRQUNyQyxNQUFNZ0MsT0FBTyxNQUFNLElBQUksQ0FBQzdCLEdBQUcsQ0FBQzhCLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQzlDLFdBQVc7UUFDdkQsSUFBSSxDQUFDVSxrQkFBa0IsR0FBR21CLEtBQUtDLEdBQUc7UUFDbEMsSUFBSSxDQUFDbEIsa0JBQWtCLEdBQUdpQyxLQUFLTyxNQUFNO1FBQ3JDLElBQUksQ0FBRVAsQ0FBQUEsS0FBS08sTUFBTSxJQUFJLE9BQU9QLEtBQUtPLE1BQU0sR0FBRyxHQUFFLEdBQUk7WUFDNUMsSUFBSSxDQUFDdkMsaUJBQWlCLEdBQUd0QixtREFBUUEsQ0FBQ3NEO1lBQ2xDLE1BQU0sSUFBSTlCLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRThCLEtBQUtPLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDdkMsaUJBQWlCLENBQUMsQ0FBQztRQUM3RjtRQUNBLElBQUksQ0FBQ2YsUUFBUSxHQUFHO0lBQ3BCO0FBQ0osRUFDQSxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK2Fyd2VhdmVAMC4wLjJfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BpcnlzL2Fyd2VhdmUvYnVpbGQvZXNtL2NvbW1vbi9saWIvdHJhbnNhY3Rpb24tdXBsb2FkZXIuanM/YThlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVHJhbnNhY3Rpb24gZnJvbSBcIi4vdHJhbnNhY3Rpb24uanNcIjtcbmltcG9ydCB7IGdldEVycm9yIH0gZnJvbSBcIi4vZXJyb3IuanNcIjtcbmltcG9ydCB7IGI2NFVybFRvQnVmZmVyIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8vIGltcG9ydCB7IHZhbGlkYXRlUGF0aCB9IGZyb20gXCIuL21lcmtsZS5qc1wiO1xuLy8gTWF4aW11bSBhbW91bnQgb2YgY2h1bmtzIHdlIHdpbGwgdXBsb2FkIGluIHRoZSBib2R5LlxuY29uc3QgTUFYX0NIVU5LU19JTl9CT0RZID0gMTtcbi8vIFdlIGFzc3VtZSB0aGVzZSBlcnJvcnMgYXJlIGludGVybWl0bWVudCBhbmQgd2UgY2FuIHRyeSBhZ2FpbiBhZnRlciBhIGRlbGF5OlxuLy8gLSBub3Rfam9pbmVkXG4vLyAtIHRpbWVvdXRcbi8vIC0gZGF0YV9yb290X25vdF9mb3VuZCAod2UgbWF5IGhhdmUgaGl0IGEgbm9kZSB0aGF0IGp1c3QgaGFzbid0IHNlZW4gaXQgeWV0KVxuLy8gLSBleGNlZWRzX2Rpc2tfcG9vbF9zaXplX2xpbWl0XG4vLyBXZSBhbHNvIHRyeSBhZ2FpbiBhZnRlciBhbnkga2luZCBvZiB1bmV4cGVjdGVkIG5ldHdvcmsgZXJyb3JzXG4vLyBFcnJvcnMgZnJvbSAvY2h1bmsgd2Ugc2hvdWxkIG5ldmVyIHRyeSBhbmQgY29udGludWUgb24uXG5leHBvcnQgY29uc3QgRkFUQUxfQ0hVTktfVVBMT0FEX0VSUk9SUyA9IFtcbiAgICBcImludmFsaWRfanNvblwiLFxuICAgIFwiY2h1bmtfdG9vX2JpZ1wiLFxuICAgIFwiZGF0YV9wYXRoX3Rvb19iaWdcIixcbiAgICBcIm9mZnNldF90b29fYmlnXCIsXG4gICAgXCJkYXRhX3NpemVfdG9vX2JpZ1wiLFxuICAgIFwiY2h1bmtfcHJvb2ZfcmF0aW9fbm90X2F0dHJhY3RpdmVcIixcbiAgICBcImludmFsaWRfcHJvb2ZcIixcbl07XG4vLyBBbW91bnQgd2Ugd2lsbCBkZWxheSBvbiByZWNlaXZpbmcgYW4gZXJyb3IgcmVzcG9uc2UgYnV0IGRvIHdhbnQgdG8gY29udGludWUuXG5jb25zdCBFUlJPUl9ERUxBWSA9IDEwMDAgKiA0MDtcbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvblVwbG9hZGVyIHtcbiAgICBjaHVua0luZGV4ID0gMDtcbiAgICB0eFBvc3RlZCA9IGZhbHNlO1xuICAgIHRyYW5zYWN0aW9uO1xuICAgIGxhc3RSZXF1ZXN0VGltZUVuZCA9IDA7XG4gICAgdG90YWxFcnJvcnMgPSAwOyAvLyBOb3Qgc2VyaWFsaXplZC5cbiAgICBkYXRhO1xuICAgIGxhc3RSZXNwb25zZVN0YXR1cyA9IDA7XG4gICAgbGFzdFJlc3BvbnNlRXJyb3IgPSBcIlwiO1xuICAgIGdldCBpc0NvbXBsZXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eFBvc3RlZCAmJiB0aGlzLmNodW5rSW5kZXggPT09IHRoaXMudHJhbnNhY3Rpb24uY2h1bmtzLmNodW5rcy5sZW5ndGg7XG4gICAgfVxuICAgIGdldCB0b3RhbENodW5rcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb24uY2h1bmtzLmNodW5rcy5sZW5ndGg7XG4gICAgfVxuICAgIGdldCB1cGxvYWRlZENodW5rcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2h1bmtJbmRleDtcbiAgICB9XG4gICAgZ2V0IHBjdENvbXBsZXRlKCkge1xuICAgICAgICByZXR1cm4gTWF0aC50cnVuYygodGhpcy51cGxvYWRlZENodW5rcyAvIHRoaXMudG90YWxDaHVua3MpICogMTAwKTtcbiAgICB9XG4gICAgY3J5cHRvO1xuICAgIGFwaTtcbiAgICBtZXJrbGU7XG4gICAgZGVlcEhhc2g7XG4gICAgY29uc3RydWN0b3IoeyBkZXBzLCB0cmFuc2FjdGlvbiwgfSkge1xuICAgICAgICBpZiAoIXRyYW5zYWN0aW9uLmlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYW5zYWN0aW9uIGlzIG5vdCBzaWduZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRyYW5zYWN0aW9uLmNodW5rcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiBjaHVua3Mgbm90IHByZXBhcmVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcGkgPSBkZXBzLmFwaTtcbiAgICAgICAgdGhpcy5jcnlwdG8gPSBkZXBzLmNyeXB0bztcbiAgICAgICAgdGhpcy5tZXJrbGUgPSBkZXBzLm1lcmtsZTtcbiAgICAgICAgdGhpcy5kZWVwSGFzaCA9IGRlcHMuZGVlcEhhc2g7XG4gICAgICAgIC8vIE1ha2UgYSBjb3B5IG9mIHRyYW5zYWN0aW9uLCB6ZXJvaW5nIHRoZSBkYXRhIHNvIHdlIGNhbiBzZXJpYWxpemUuXG4gICAgICAgIHRoaXMuZGF0YSA9IHRyYW5zYWN0aW9uLmRhdGE7XG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oe1xuICAgICAgICAgICAgYXR0cmlidXRlczogT2JqZWN0LmFzc2lnbih7fSwgdHJhbnNhY3Rpb24sIHsgZGF0YTogbmV3IFVpbnQ4QXJyYXkoMCkgfSksXG4gICAgICAgICAgICBkZXBzOiB7IG1lcmtsZTogZGVwcy5tZXJrbGUsIGRlZXBIYXNoOiBkZXBzLmRlZXBIYXNoIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWRzIHRoZSBuZXh0IHBhcnQgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICAgICAqIE9uIHRoZSBmaXJzdCBjYWxsIHRoaXMgcG9zdHMgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogaXRzZWxmIGFuZCBvbiBhbnkgc3Vic2VxdWVudCBjYWxscyB1cGxvYWRzIHRoZVxuICAgICAqIG5leHQgY2h1bmsgdW50aWwgaXQgY29tcGxldGVzLlxuICAgICAqL1xuICAgIGFzeW5jIHVwbG9hZENodW5rKGNodW5rSW5kZXhfKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVXBsb2FkIGlzIGFscmVhZHkgY29tcGxldGVgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXN0UmVzcG9uc2VFcnJvciAhPT0gXCJcIikge1xuICAgICAgICAgICAgdGhpcy50b3RhbEVycm9ycysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b3RhbEVycm9ycyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBiZWVuIHRyeWluZyBmb3IgYWJvdXQgYW4gaG91ciByZWNlaXZpbmcgYW5cbiAgICAgICAgLy8gZXJyb3IgZXZlcnkgdGltZSwgc28gZXZlbnR1YWxseSBiYWlsLlxuICAgICAgICBpZiAodGhpcy50b3RhbEVycm9ycyA9PT0gMTAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjb21wbGV0ZSB1cGxvYWQ6ICR7dGhpcy5sYXN0UmVzcG9uc2VTdGF0dXN9OiAke3RoaXMubGFzdFJlc3BvbnNlRXJyb3J9YCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRlbGF5ID0gdGhpcy5sYXN0UmVzcG9uc2VFcnJvciA9PT0gXCJcIiA/IDAgOiBNYXRoLm1heCh0aGlzLmxhc3RSZXF1ZXN0VGltZUVuZCArIEVSUk9SX0RFTEFZIC0gRGF0ZS5ub3coKSwgRVJST1JfREVMQVkpO1xuICAgICAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICAvLyBKaXR0ZXIgZGVsYXkgYmNveiBuZXR3b3Jrcywgc3VidHJhY3QgdXAgdG8gMzAlIGZyb20gNDAgc2Vjb25kc1xuICAgICAgICAgICAgZGVsYXkgPSBkZWxheSAtIGRlbGF5ICogTWF0aC5yYW5kb20oKSAqIDAuMztcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCBkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFJlc3BvbnNlRXJyb3IgPSBcIlwiO1xuICAgICAgICBpZiAoIXRoaXMudHhQb3N0ZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucG9zdFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNodW5rSW5kZXhfKSB7XG4gICAgICAgICAgICB0aGlzLmNodW5rSW5kZXggPSBjaHVua0luZGV4XztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMudHJhbnNhY3Rpb24uZ2V0Q2h1bmsoY2h1bmtJbmRleF8gfHwgdGhpcy5jaHVua0luZGV4LCB0aGlzLmRhdGEpO1xuICAgICAgICBjb25zdCBjaHVua09rID0gYXdhaXQgdGhpcy5tZXJrbGUudmFsaWRhdGVQYXRoKHRoaXMudHJhbnNhY3Rpb24uY2h1bmtzLmRhdGFfcm9vdCwgcGFyc2VJbnQoY2h1bmsub2Zmc2V0KSwgMCwgcGFyc2VJbnQoY2h1bmsuZGF0YV9zaXplKSwgYjY0VXJsVG9CdWZmZXIoY2h1bmsuZGF0YV9wYXRoKSk7XG4gICAgICAgIGlmICghY2h1bmtPaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gdmFsaWRhdGUgY2h1bmsgJHt0aGlzLmNodW5rSW5kZXh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2ggbmV0d29yayBlcnJvcnMgYW5kIHR1cm4gdGhlbSBpbnRvIG9iamVjdHMgd2l0aCBzdGF0dXMgLTEgYW5kIGFuIGVycm9yIG1lc3NhZ2UuXG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLmFwaS5wb3N0KGBjaHVua2AsIHRoaXMudHJhbnNhY3Rpb24uZ2V0Q2h1bmsodGhpcy5jaHVua0luZGV4LCB0aGlzLmRhdGEpKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiAtMSwgZGF0YTogeyBlcnJvcjogZS5tZXNzYWdlIH0gfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGFzdFJlcXVlc3RUaW1lRW5kID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5sYXN0UmVzcG9uc2VTdGF0dXMgPSByZXNwLnN0YXR1cztcbiAgICAgICAgaWYgKHRoaXMubGFzdFJlc3BvbnNlU3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgdGhpcy5jaHVua0luZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RSZXNwb25zZUVycm9yID0gZ2V0RXJyb3IocmVzcCk7XG4gICAgICAgICAgICBpZiAoRkFUQUxfQ0hVTktfVVBMT0FEX0VSUk9SUy5pbmNsdWRlcyh0aGlzLmxhc3RSZXNwb25zZUVycm9yKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmF0YWwgZXJyb3IgdXBsb2FkaW5nIGNodW5rICR7dGhpcy5jaHVua0luZGV4fTogJHt0aGlzLmxhc3RSZXNwb25zZUVycm9yfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlY29uc3RydWN0cyBhbiB1cGxvYWQgZnJvbSBpdHMgc2VyaWFsaXplZCBzdGF0ZSBhbmQgZGF0YS5cbiAgICAgKiBDaGVja3MgaWYgZGF0YSBtYXRjaGVzIHRoZSBleHBlY3RlZCBkYXRhX3Jvb3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplZFxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGZyb21TZXJpYWxpemVkKHsgc2VyaWFsaXplZCwgZGF0YSwgZGVwcywgfSkge1xuICAgICAgICBpZiAoIXNlcmlhbGl6ZWQgfHwgdHlwZW9mIHNlcmlhbGl6ZWQuY2h1bmtJbmRleCAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2Ygc2VyaWFsaXplZC50cmFuc2FjdGlvbiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTZXJpYWxpemVkIG9iamVjdCBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZCBmb3JtYXQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXZlcnl0aGluZyBsb29rcyBvaywgcmVjb25zdHJ1Y3QgdGhlIFRyYW5zYWN0aW9uVXBsb2FkLFxuICAgICAgICAvLyBwcmVwYXJlIHRoZSBjaHVua3MgYWdhaW4gYW5kIHZlcmlmeSB0aGUgZGF0YV9yb290IG1hdGNoZXNcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oc2VyaWFsaXplZC50cmFuc2FjdGlvbik7XG4gICAgICAgIGlmICghdHJhbnNhY3Rpb24uY2h1bmtzKSB7XG4gICAgICAgICAgICBhd2FpdCB0cmFuc2FjdGlvbi5wcmVwYXJlQ2h1bmtzKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyBUcmFuc2FjdGlvblVwbG9hZGVyKHtcbiAgICAgICAgICAgIGRlcHMsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENvcHkgdGhlIHNlcmlhbGl6ZWQgdXBsb2FkIGluZm9ybWF0aW9uLCBhbmQgZGF0YSBwYXNzZWQgaW4uXG4gICAgICAgIHVwbG9hZC5jaHVua0luZGV4ID0gc2VyaWFsaXplZC5jaHVua0luZGV4O1xuICAgICAgICB1cGxvYWQubGFzdFJlcXVlc3RUaW1lRW5kID0gc2VyaWFsaXplZC5sYXN0UmVxdWVzdFRpbWVFbmQ7XG4gICAgICAgIHVwbG9hZC5sYXN0UmVzcG9uc2VFcnJvciA9IHNlcmlhbGl6ZWQubGFzdFJlc3BvbnNlRXJyb3I7XG4gICAgICAgIHVwbG9hZC5sYXN0UmVzcG9uc2VTdGF0dXMgPSBzZXJpYWxpemVkLmxhc3RSZXNwb25zZVN0YXR1cztcbiAgICAgICAgdXBsb2FkLnR4UG9zdGVkID0gc2VyaWFsaXplZC50eFBvc3RlZDtcbiAgICAgICAgdXBsb2FkLmRhdGEgPSBkYXRhO1xuICAgICAgICBpZiAodXBsb2FkLnRyYW5zYWN0aW9uLmRhdGFfcm9vdCAhPT0gc2VyaWFsaXplZC50cmFuc2FjdGlvbi5kYXRhX3Jvb3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGF0YSBtaXNtYXRjaDogVXBsb2FkZXIgZG9lc24ndCBtYXRjaCBwcm92aWRlZCBkYXRhLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cGxvYWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlY29uc3RydWN0IGFuIHVwbG9hZCBmcm9tIHRoZSB0eCBtZXRhZGF0YSwgaWUgL3R4LzxpZD4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXBpXG4gICAgICogQHBhcmFtIGlkXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZnJvbVRyYW5zYWN0aW9uSWQoYXBpLCBpZCkge1xuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgYXBpLmdldChgdHgvJHtpZH1gKTtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHggJHtpZH0gbm90IGZvdW5kOiAke3Jlc3Auc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gcmVzcC5kYXRhO1xuICAgICAgICB0cmFuc2FjdGlvbi5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSB7XG4gICAgICAgICAgICB0eFBvc3RlZDogdHJ1ZSxcbiAgICAgICAgICAgIGNodW5rSW5kZXg6IDAsXG4gICAgICAgICAgICBsYXN0UmVzcG9uc2VFcnJvcjogXCJcIixcbiAgICAgICAgICAgIGxhc3RSZXF1ZXN0VGltZUVuZDogMCxcbiAgICAgICAgICAgIGxhc3RSZXNwb25zZVN0YXR1czogMCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplZDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2h1bmtJbmRleDogdGhpcy5jaHVua0luZGV4LFxuICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRoaXMudHJhbnNhY3Rpb24sXG4gICAgICAgICAgICBsYXN0UmVxdWVzdFRpbWVFbmQ6IHRoaXMubGFzdFJlcXVlc3RUaW1lRW5kLFxuICAgICAgICAgICAgbGFzdFJlc3BvbnNlU3RhdHVzOiB0aGlzLmxhc3RSZXNwb25zZVN0YXR1cyxcbiAgICAgICAgICAgIGxhc3RSZXNwb25zZUVycm9yOiB0aGlzLmxhc3RSZXNwb25zZUVycm9yLFxuICAgICAgICAgICAgdHhQb3N0ZWQ6IHRoaXMudHhQb3N0ZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFBPU1QgdG8gL3R4XG4gICAgYXN5bmMgcG9zdFRyYW5zYWN0aW9uKCkge1xuICAgICAgICBjb25zdCB1cGxvYWRJbkJvZHkgPSB0aGlzLnRvdGFsQ2h1bmtzIDw9IE1BWF9DSFVOS1NfSU5fQk9EWTtcbiAgICAgICAgaWYgKHVwbG9hZEluQm9keSkge1xuICAgICAgICAgICAgLy8gUG9zdCB0aGUgdHJhbnNhY3Rpb24gd2l0aCBkYXRhLlxuICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbi5kYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuYXBpLnBvc3QoYHR4YCwgdGhpcy50cmFuc2FjdGlvbikuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogLTEsIGRhdGE6IHsgZXJyb3I6IGUubWVzc2FnZSB9IH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubGFzdFJlcXVlc3RUaW1lRW5kID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHRoaXMubGFzdFJlc3BvbnNlU3RhdHVzID0gcmVzcC5zdGF0dXM7XG4gICAgICAgICAgICB0aGlzLnRyYW5zYWN0aW9uLmRhdGEgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICAgICAgICAgIGlmIChyZXNwLnN0YXR1cyA+PSAyMDAgJiYgcmVzcC5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgY29tcGxldGUuXG4gICAgICAgICAgICAgICAgdGhpcy50eFBvc3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jaHVua0luZGV4ID0gTUFYX0NIVU5LU19JTl9CT0RZO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGFzdFJlc3BvbnNlRXJyb3IgPSBnZXRFcnJvcihyZXNwKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHVwbG9hZCB0cmFuc2FjdGlvbjogJHtyZXNwLnN0YXR1c30sICR7dGhpcy5sYXN0UmVzcG9uc2VFcnJvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQb3N0IHRoZSB0cmFuc2FjdGlvbiB3aXRoIG5vIGRhdGEuXG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLmFwaS5wb3N0KGB0eGAsIHRoaXMudHJhbnNhY3Rpb24pO1xuICAgICAgICB0aGlzLmxhc3RSZXF1ZXN0VGltZUVuZCA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMubGFzdFJlc3BvbnNlU3RhdHVzID0gcmVzcC5zdGF0dXM7XG4gICAgICAgIGlmICghKHJlc3Auc3RhdHVzID49IDIwMCAmJiByZXNwLnN0YXR1cyA8IDMwMCkpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFJlc3BvbnNlRXJyb3IgPSBnZXRFcnJvcihyZXNwKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHVwbG9hZCB0cmFuc2FjdGlvbjogJHtyZXNwLnN0YXR1c30sICR7dGhpcy5sYXN0UmVzcG9uc2VFcnJvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnR4UG9zdGVkID0gdHJ1ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2FjdGlvbi11cGxvYWRlci5qcy5tYXAiXSwibmFtZXMiOlsiVHJhbnNhY3Rpb24iLCJnZXRFcnJvciIsImI2NFVybFRvQnVmZmVyIiwiTUFYX0NIVU5LU19JTl9CT0RZIiwiRkFUQUxfQ0hVTktfVVBMT0FEX0VSUk9SUyIsIkVSUk9SX0RFTEFZIiwiVHJhbnNhY3Rpb25VcGxvYWRlciIsImlzQ29tcGxldGUiLCJ0eFBvc3RlZCIsImNodW5rSW5kZXgiLCJ0cmFuc2FjdGlvbiIsImNodW5rcyIsImxlbmd0aCIsInRvdGFsQ2h1bmtzIiwidXBsb2FkZWRDaHVua3MiLCJwY3RDb21wbGV0ZSIsIk1hdGgiLCJ0cnVuYyIsImNvbnN0cnVjdG9yIiwiZGVwcyIsImxhc3RSZXF1ZXN0VGltZUVuZCIsInRvdGFsRXJyb3JzIiwibGFzdFJlc3BvbnNlU3RhdHVzIiwibGFzdFJlc3BvbnNlRXJyb3IiLCJpZCIsIkVycm9yIiwiYXBpIiwiY3J5cHRvIiwibWVya2xlIiwiZGVlcEhhc2giLCJkYXRhIiwiYXR0cmlidXRlcyIsIk9iamVjdCIsImFzc2lnbiIsIlVpbnQ4QXJyYXkiLCJ1cGxvYWRDaHVuayIsImNodW5rSW5kZXhfIiwiZGVsYXkiLCJtYXgiLCJEYXRlIiwibm93IiwicmFuZG9tIiwiUHJvbWlzZSIsInJlcyIsInNldFRpbWVvdXQiLCJwb3N0VHJhbnNhY3Rpb24iLCJjaHVuayIsImdldENodW5rIiwiY2h1bmtPayIsInZhbGlkYXRlUGF0aCIsImRhdGFfcm9vdCIsInBhcnNlSW50Iiwib2Zmc2V0IiwiZGF0YV9zaXplIiwiZGF0YV9wYXRoIiwicmVzcCIsInBvc3QiLCJjYXRjaCIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIiwiaW5jbHVkZXMiLCJmcm9tU2VyaWFsaXplZCIsInNlcmlhbGl6ZWQiLCJwcmVwYXJlQ2h1bmtzIiwidXBsb2FkIiwiZnJvbVRyYW5zYWN0aW9uSWQiLCJnZXQiLCJ0b0pTT04iLCJ1cGxvYWRJbkJvZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction-uploader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArweaveTag: () => (/* binding */ ArweaveTag),\n/* harmony export */   \"default\": () => (/* binding */ Transaction)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n/* eslint-disable no-case-declarations */ \n\nclass BaseObject {\n    get(field, options) {\n        if (!Object.getOwnPropertyNames(this).includes(field)) {\n            throw new Error(`Field \"${field}\" is not a property of the Arweave Transaction class.`);\n        }\n        // Handle fields that are Uint8Arrays.\n        // To maintain compat we encode them to b64url\n        // if decode option is not specificed.\n        if (this[field] instanceof Uint8Array) {\n            if (options && options.decode && options.string) {\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__.bufferToString(this[field]);\n            }\n            if (options && options.decode && !options.string) {\n                return this[field];\n            }\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__.bufferTob64Url(this[field]);\n        }\n        if (this[field] instanceof Array) {\n            if (options?.decode !== undefined || options?.string !== undefined) {\n                if (field === \"tags\") {\n                    console.warn(`Did you mean to use 'transaction[\"tags\"]' ?`);\n                }\n                throw new Error(`Cannot decode or stringify an array.`);\n            }\n            return this[field];\n        }\n        if (options && options.decode == true) {\n            if (options && options.string) {\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__.b64UrlToString(this[field]);\n            }\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__.b64UrlToBuffer(this[field]);\n        }\n        return this[field];\n    }\n}\nclass ArweaveTag extends BaseObject {\n    constructor(name, value /* _decode = false */ ){\n        super();\n        this.name = name;\n        this.value = value;\n    }\n}\nclass Transaction extends BaseObject {\n    constructor({ attributes, deps }){\n        super();\n        this.format = 2;\n        this.id = \"\";\n        this.last_tx = \"\";\n        this.owner = \"\";\n        this.tags = [];\n        this.target = \"\";\n        this.quantity = \"0\";\n        this.data_size = \"0\";\n        this.data = new Uint8Array();\n        this.data_root = \"\";\n        this.reward = \"0\";\n        this.signature = \"\";\n        this.merkle = deps.merkle;\n        this.deepHash = deps.deepHash;\n        Object.assign(this, attributes);\n        // If something passes in a Tx that has been toJSON'ed and back,\n        // or where the data was filled in from /tx/data endpoint.\n        // data will be b64url encoded, so decode it.\n        if (typeof this.data === \"string\") {\n            this.data = _utils_js__WEBPACK_IMPORTED_MODULE_0__.b64UrlToBuffer(this.data);\n        }\n        if (attributes.tags) {\n            this.tags = attributes.tags /* .map((tag: { name: string; value: string }) => {\n              return new Tag(tag.name, tag.value);\n            }) */ ;\n        }\n    }\n    addTag(name, value) {\n        this.tags.push({\n            name: _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToB64Url(name),\n            value: _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToB64Url(value)\n        });\n    }\n    toJSON() {\n        return {\n            format: this.format,\n            id: this.id,\n            last_tx: this.last_tx,\n            owner: this.owner,\n            tags: this.tags,\n            target: this.target,\n            quantity: this.quantity,\n            data: _utils_js__WEBPACK_IMPORTED_MODULE_0__.bufferTob64Url(this.data),\n            data_size: this.data_size,\n            data_root: this.data_root,\n            data_tree: this.data_tree,\n            reward: this.reward,\n            signature: this.signature\n        };\n    }\n    setOwner(owner) {\n        this.owner = owner;\n    }\n    setSignature({ id, owner, reward, tags, signature }) {\n        this.id = id;\n        this.owner = owner;\n        if (reward) this.reward = reward;\n        if (tags) this.tags = tags;\n        this.signature = signature;\n    }\n    async prepareChunks(data) {\n        // Note: we *do not* use `this.data`, the caller may be\n        // operating on a transaction with an zero length data field.\n        // This function computes the chunks for the data passed in and\n        // assigns the result to this transaction. It should not read the\n        // data *from* this transaction.\n        if (!this.chunks && data.byteLength > 0) {\n            this.chunks = await this.merkle.generateTransactionChunks(data);\n            this.data_root = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bufferTob64Url)(this.chunks.data_root);\n        }\n        if (!this.chunks && data.byteLength === 0) {\n            this.chunks = {\n                chunks: [],\n                data_root: new Uint8Array(),\n                proofs: []\n            };\n            this.data_root = \"\";\n        }\n    }\n    // Returns a chunk in a format suitable for posting to /chunk.\n    // Similar to `prepareChunks()` this does not operate `this.data`,\n    // instead using the data passed in.\n    getChunk(idx, data) {\n        if (!this.chunks) {\n            throw new Error(`Chunks have not been prepared`);\n        }\n        const proof = this.chunks.proofs[idx];\n        const chunk = this.chunks.chunks[idx];\n        return {\n            data_root: this.data_root,\n            data_size: this.data_size,\n            data_path: _utils_js__WEBPACK_IMPORTED_MODULE_0__.bufferTob64Url(proof.proof),\n            offset: proof.offset.toString(),\n            chunk: _utils_js__WEBPACK_IMPORTED_MODULE_0__.bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange))\n        };\n    }\n    async getSignatureData() {\n        switch(this.format){\n            case 1:\n                const tags = this.tags.reduce((accumulator, tag)=>{\n                    return _utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBuffers([\n                        accumulator,\n                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.b64UrlToBuffer)(tag.name),\n                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.b64UrlToBuffer)(tag.value)\n                    ]);\n                }, new Uint8Array());\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBuffers([\n                    this.get(\"owner\", {\n                        decode: true,\n                        string: false\n                    }),\n                    this.get(\"target\", {\n                        decode: true,\n                        string: false\n                    }),\n                    this.get(\"data\", {\n                        decode: true,\n                        string: false\n                    }),\n                    _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer(this.quantity),\n                    _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer(this.reward),\n                    this.get(\"last_tx\", {\n                        decode: true,\n                        string: false\n                    }),\n                    tags\n                ]);\n            case 2:\n                if (!this.data_root) {\n                    await this.prepareChunks(this.data);\n                }\n                const tagList = this.tags.map((tag)=>[\n                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.b64UrlToBuffer)(tag.name),\n                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.b64UrlToBuffer)(tag.value)\n                    ]);\n                return await this.deepHash.deepHash([\n                    _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer(this.format.toString()),\n                    this.get(\"owner\", {\n                        decode: true,\n                        string: false\n                    }),\n                    this.get(\"target\", {\n                        decode: true,\n                        string: false\n                    }),\n                    _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer(this.quantity),\n                    _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer(this.reward),\n                    this.get(\"last_tx\", {\n                        decode: true,\n                        string: false\n                    }),\n                    tagList,\n                    _utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer(this.data_size),\n                    this.get(\"data_root\", {\n                        decode: true,\n                        string: false\n                    })\n                ]);\n            default:\n                throw new Error(`Unexpected transaction format: ${this.format}`);\n        }\n    }\n} //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arToWinston: () => (/* binding */ arToWinston),\n/* harmony export */   b64UrlDecode: () => (/* binding */ b64UrlDecode),\n/* harmony export */   b64UrlEncode: () => (/* binding */ b64UrlEncode),\n/* harmony export */   b64UrlToBuffer: () => (/* binding */ b64UrlToBuffer),\n/* harmony export */   b64UrlToString: () => (/* binding */ b64UrlToString),\n/* harmony export */   bufferToString: () => (/* binding */ bufferToString),\n/* harmony export */   bufferTob64: () => (/* binding */ bufferTob64),\n/* harmony export */   bufferTob64Url: () => (/* binding */ bufferTob64Url),\n/* harmony export */   concatBuffers: () => (/* binding */ concatBuffers),\n/* harmony export */   stringToB64Url: () => (/* binding */ stringToB64Url),\n/* harmony export */   stringToBuffer: () => (/* binding */ stringToBuffer),\n/* harmony export */   winstonToAr: () => (/* binding */ winstonToAr)\n/* harmony export */ });\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.mjs\");\n\n\nfunction concatBuffers(buffers) {\n    let totalLength = 0;\n    for (const b of buffers)totalLength += b.byteLength;\n    const temp = new Uint8Array(totalLength);\n    let offset = 0;\n    temp.set(new Uint8Array(buffers[0]), offset);\n    offset += buffers[0].byteLength;\n    for(let i = 1; i < buffers.length; i++){\n        temp.set(new Uint8Array(buffers[i]), offset);\n        offset += buffers[i].byteLength;\n    }\n    return temp;\n}\nfunction b64UrlToString(b64UrlString) {\n    const buffer = b64UrlToBuffer(b64UrlString);\n    return bufferToString(buffer);\n}\nfunction bufferToString(buffer) {\n    return new TextDecoder(\"utf-8\", {\n        fatal: true\n    }).decode(buffer);\n}\nfunction stringToBuffer(string) {\n    return new TextEncoder().encode(string);\n}\nfunction stringToB64Url(string) {\n    return bufferTob64Url(stringToBuffer(string));\n}\nfunction b64UrlToBuffer(b64UrlString) {\n    return new Uint8Array((0,base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray)(b64UrlDecode(b64UrlString)));\n}\nfunction bufferTob64(buffer) {\n    return (0,base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray)(new Uint8Array(buffer));\n}\nfunction bufferTob64Url(buffer) {\n    return b64UrlEncode(bufferTob64(buffer));\n}\nfunction b64UrlEncode(b64UrlString) {\n    return b64UrlString.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n}\nfunction b64UrlDecode(b64UrlString) {\n    b64UrlString = b64UrlString.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n    let padding;\n    b64UrlString.length % 4 == 0 ? padding = 0 : padding = 4 - b64UrlString.length % 4;\n    return b64UrlString.concat(\"=\".repeat(padding));\n}\nfunction winstonToAr(winston) {\n    return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](winston).shiftedBy(-12);\n}\nfunction arToWinston(ar) {\n    return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](ar).shiftedBy(12);\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUF1RDtBQUNsQjtBQUM5QixTQUFTRyxjQUFjQyxPQUFPO0lBQ2pDLElBQUlDLGNBQWM7SUFDbEIsS0FBSyxNQUFNQyxLQUFLRixRQUNaQyxlQUFlQyxFQUFFQyxVQUFVO0lBQy9CLE1BQU1DLE9BQU8sSUFBSUMsV0FBV0o7SUFDNUIsSUFBSUssU0FBUztJQUNiRixLQUFLRyxHQUFHLENBQUMsSUFBSUYsV0FBV0wsT0FBTyxDQUFDLEVBQUUsR0FBR007SUFDckNBLFVBQVVOLE9BQU8sQ0FBQyxFQUFFLENBQUNHLFVBQVU7SUFDL0IsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlSLFFBQVFTLE1BQU0sRUFBRUQsSUFBSztRQUNyQ0osS0FBS0csR0FBRyxDQUFDLElBQUlGLFdBQVdMLE9BQU8sQ0FBQ1EsRUFBRSxHQUFHRjtRQUNyQ0EsVUFBVU4sT0FBTyxDQUFDUSxFQUFFLENBQUNMLFVBQVU7SUFDbkM7SUFDQSxPQUFPQztBQUNYO0FBQ08sU0FBU00sZUFBZUMsWUFBWTtJQUN2QyxNQUFNQyxTQUFTQyxlQUFlRjtJQUM5QixPQUFPRyxlQUFlRjtBQUMxQjtBQUNPLFNBQVNFLGVBQWVGLE1BQU07SUFDakMsT0FBTyxJQUFJRyxZQUFZLFNBQVM7UUFBRUMsT0FBTztJQUFLLEdBQUdDLE1BQU0sQ0FBQ0w7QUFDNUQ7QUFDTyxTQUFTTSxlQUFlQyxNQUFNO0lBQ2pDLE9BQU8sSUFBSUMsY0FBY0MsTUFBTSxDQUFDRjtBQUNwQztBQUNPLFNBQVNHLGVBQWVILE1BQU07SUFDakMsT0FBT0ksZUFBZUwsZUFBZUM7QUFDekM7QUFDTyxTQUFTTixlQUFlRixZQUFZO0lBQ3ZDLE9BQU8sSUFBSU4sV0FBV1Isc0RBQVdBLENBQUMyQixhQUFhYjtBQUNuRDtBQUNPLFNBQVNjLFlBQVliLE1BQU07SUFDOUIsT0FBT2hCLHdEQUFhQSxDQUFDLElBQUlTLFdBQVdPO0FBQ3hDO0FBQ08sU0FBU1csZUFBZVgsTUFBTTtJQUNqQyxPQUFPYyxhQUFhRCxZQUFZYjtBQUNwQztBQUNPLFNBQVNjLGFBQWFmLFlBQVk7SUFDckMsT0FBT0EsYUFBYWdCLE9BQU8sQ0FBQyxPQUFPLEtBQUtBLE9BQU8sQ0FBQyxPQUFPLEtBQUtBLE9BQU8sQ0FBQyxPQUFPO0FBQy9FO0FBQ08sU0FBU0gsYUFBYWIsWUFBWTtJQUNyQ0EsZUFBZUEsYUFBYWdCLE9BQU8sQ0FBQyxPQUFPLEtBQUtBLE9BQU8sQ0FBQyxPQUFPO0lBQy9ELElBQUlDO0lBQ0pqQixhQUFhRixNQUFNLEdBQUcsS0FBSyxJQUFLbUIsVUFBVSxJQUFNQSxVQUFVLElBQUtqQixhQUFhRixNQUFNLEdBQUc7SUFDckYsT0FBT0UsYUFBYWtCLE1BQU0sQ0FBQyxJQUFJQyxNQUFNLENBQUNGO0FBQzFDO0FBQ08sU0FBU0csWUFBWUMsT0FBTztJQUMvQixPQUFPLElBQUlsQyxvREFBU0EsQ0FBQ2tDLFNBQVNDLFNBQVMsQ0FBQyxDQUFDO0FBQzdDO0FBQ08sU0FBU0MsWUFBWUMsRUFBRTtJQUMxQixPQUFPLElBQUlyQyxvREFBU0EsQ0FBQ3FDLElBQUlGLFNBQVMsQ0FBQztBQUN2QyxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL2xpYi91dGlscy5qcz8zZDdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb21CeXRlQXJyYXksIHRvQnl0ZUFycmF5IH0gZnJvbSBcImJhc2U2NC1qc1wiO1xuaW1wb3J0IEJpZ051bWJlciBmcm9tIFwiYmlnbnVtYmVyLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QnVmZmVycyhidWZmZXJzKSB7XG4gICAgbGV0IHRvdGFsTGVuZ3RoID0gMDtcbiAgICBmb3IgKGNvbnN0IGIgb2YgYnVmZmVycylcbiAgICAgICAgdG90YWxMZW5ndGggKz0gYi5ieXRlTGVuZ3RoO1xuICAgIGNvbnN0IHRlbXAgPSBuZXcgVWludDhBcnJheSh0b3RhbExlbmd0aCk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgdGVtcC5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyc1swXSksIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGJ1ZmZlcnNbMF0uYnl0ZUxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGVtcC5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyc1tpXSksIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSBidWZmZXJzW2ldLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGI2NFVybFRvU3RyaW5nKGI2NFVybFN0cmluZykge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGI2NFVybFRvQnVmZmVyKGI2NFVybFN0cmluZyk7XG4gICAgcmV0dXJuIGJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcik7XG59XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9TdHJpbmcoYnVmZmVyKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIsIHsgZmF0YWw6IHRydWUgfSkuZGVjb2RlKGJ1ZmZlcik7XG59XG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9CdWZmZXIoc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHJpbmcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvQjY0VXJsKHN0cmluZykge1xuICAgIHJldHVybiBidWZmZXJUb2I2NFVybChzdHJpbmdUb0J1ZmZlcihzdHJpbmcpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBiNjRVcmxUb0J1ZmZlcihiNjRVcmxTdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodG9CeXRlQXJyYXkoYjY0VXJsRGVjb2RlKGI2NFVybFN0cmluZykpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJUb2I2NChidWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUJ5dGVBcnJheShuZXcgVWludDhBcnJheShidWZmZXIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJUb2I2NFVybChidWZmZXIpIHtcbiAgICByZXR1cm4gYjY0VXJsRW5jb2RlKGJ1ZmZlclRvYjY0KGJ1ZmZlcikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGI2NFVybEVuY29kZShiNjRVcmxTdHJpbmcpIHtcbiAgICByZXR1cm4gYjY0VXJsU3RyaW5nLnJlcGxhY2UoL1xcKy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiX1wiKS5yZXBsYWNlKC9cXD0vZywgXCJcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gYjY0VXJsRGVjb2RlKGI2NFVybFN0cmluZykge1xuICAgIGI2NFVybFN0cmluZyA9IGI2NFVybFN0cmluZy5yZXBsYWNlKC9cXC0vZywgXCIrXCIpLnJlcGxhY2UoL1xcXy9nLCBcIi9cIik7XG4gICAgbGV0IHBhZGRpbmc7XG4gICAgYjY0VXJsU3RyaW5nLmxlbmd0aCAlIDQgPT0gMCA/IChwYWRkaW5nID0gMCkgOiAocGFkZGluZyA9IDQgLSAoYjY0VXJsU3RyaW5nLmxlbmd0aCAlIDQpKTtcbiAgICByZXR1cm4gYjY0VXJsU3RyaW5nLmNvbmNhdChcIj1cIi5yZXBlYXQocGFkZGluZykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdpbnN0b25Ub0FyKHdpbnN0b24pIHtcbiAgICByZXR1cm4gbmV3IEJpZ051bWJlcih3aW5zdG9uKS5zaGlmdGVkQnkoLTEyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhclRvV2luc3Rvbihhcikge1xuICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKGFyKS5zaGlmdGVkQnkoMTIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbImZyb21CeXRlQXJyYXkiLCJ0b0J5dGVBcnJheSIsIkJpZ051bWJlciIsImNvbmNhdEJ1ZmZlcnMiLCJidWZmZXJzIiwidG90YWxMZW5ndGgiLCJiIiwiYnl0ZUxlbmd0aCIsInRlbXAiLCJVaW50OEFycmF5Iiwib2Zmc2V0Iiwic2V0IiwiaSIsImxlbmd0aCIsImI2NFVybFRvU3RyaW5nIiwiYjY0VXJsU3RyaW5nIiwiYnVmZmVyIiwiYjY0VXJsVG9CdWZmZXIiLCJidWZmZXJUb1N0cmluZyIsIlRleHREZWNvZGVyIiwiZmF0YWwiLCJkZWNvZGUiLCJzdHJpbmdUb0J1ZmZlciIsInN0cmluZyIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwic3RyaW5nVG9CNjRVcmwiLCJidWZmZXJUb2I2NFVybCIsImI2NFVybERlY29kZSIsImJ1ZmZlclRvYjY0IiwiYjY0VXJsRW5jb2RlIiwicmVwbGFjZSIsInBhZGRpbmciLCJjb25jYXQiLCJyZXBlYXQiLCJ3aW5zdG9uVG9BciIsIndpbnN0b24iLCJzaGlmdGVkQnkiLCJhclRvV2luc3RvbiIsImFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/network.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/network.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Network)\n/* harmony export */ });\nclass Network {\n    constructor(api){\n        this.api = api;\n    }\n    getInfo() {\n        return this.api.get(`info`).then((response)=>{\n            return response.data;\n        });\n    }\n    getPeers() {\n        return this.api.get(`peers`).then((response)=>{\n            return response.data;\n        });\n    }\n} //# sourceMappingURL=network.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL25ldHdvcmsuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLE1BQU1BO0lBRWpCQyxZQUFZQyxHQUFHLENBQUU7UUFDYixJQUFJLENBQUNBLEdBQUcsR0FBR0E7SUFDZjtJQUNBQyxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUNELEdBQUcsQ0FBQ0UsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUVDLElBQUksQ0FBQyxDQUFDQztZQUM5QixPQUFPQSxTQUFTQyxJQUFJO1FBQ3hCO0lBQ0o7SUFDQUMsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDTixHQUFHLENBQUNFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFQyxJQUFJLENBQUMsQ0FBQ0M7WUFDL0IsT0FBT0EsU0FBU0MsSUFBSTtRQUN4QjtJQUNKO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK2Fyd2VhdmVAMC4wLjJfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BpcnlzL2Fyd2VhdmUvYnVpbGQvZXNtL2NvbW1vbi9uZXR3b3JrLmpzPzkxMWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV0d29yayB7XG4gICAgYXBpO1xuICAgIGNvbnN0cnVjdG9yKGFwaSkge1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICB9XG4gICAgZ2V0SW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLmdldChgaW5mb2ApLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFBlZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkuZ2V0KGBwZWVyc2ApLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29yay5qcy5tYXAiXSwibmFtZXMiOlsiTmV0d29yayIsImNvbnN0cnVjdG9yIiwiYXBpIiwiZ2V0SW5mbyIsImdldCIsInRoZW4iLCJyZXNwb25zZSIsImRhdGEiLCJnZXRQZWVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/transactions.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/transactions.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Transactions)\n/* harmony export */ });\n/* harmony import */ var _lib_error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/error.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/error.js\");\n/* harmony import */ var _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/transaction.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction.js\");\n/* harmony import */ var _lib_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n/* harmony import */ var _lib_transaction_uploader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/transaction-uploader.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction-uploader.js\");\n\n\n\n\nclass Transactions {\n    constructor({ deps }){\n        this.api = deps.api;\n        this.crypto = deps.crypto;\n        this.chunks = deps.chunks;\n        this.merkle = deps.merkle;\n        this.deepHash = deps.deepHash;\n    }\n    getTransactionAnchor() {\n        /**\n         * Maintain compatibility with erdjs which sets a global axios.defaults.transformResponse\n         * in order to overcome some other issue in:  https://github.com/axios/axios/issues/983\n         *\n         * However, this introduces a problem with ardrive-js, so we will enforce\n         * config =  {transformResponse: []} where we do not require a transform\n         */ return this.api.get(`tx_anchor`, {\n            transformResponse: []\n        }).then((response)=>{\n            return response.data;\n        });\n    }\n    getPrice(byteSize, targetAddress) {\n        const endpoint = targetAddress ? `price/${byteSize}/${targetAddress}` : `price/${byteSize}`;\n        return this.api.get(endpoint, {\n            transformResponse: [\n                /**\n                 * We need to specify a response transformer to override\n                 * the default JSON.parse behavior, as this causes\n                 * winston to be converted to a number and we want to\n                 * return it as a winston string.\n                 * @param data\n                 */ function(data) {\n                    return data;\n                }\n            ]\n        }).then((response)=>{\n            return response.data;\n        });\n    }\n    async get(id) {\n        const response = await this.api.get(`tx/${id}`);\n        if (response.status == 200) {\n            const data_size = parseInt(response.data.data_size);\n            if (response.data.format >= 2 && data_size > 0 && data_size <= 1024 * 1024 * 12) {\n                const data = await this.getData(id);\n                return new _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                    attributes: {\n                        ...response.data,\n                        data\n                    },\n                    deps: {\n                        merkle: this.merkle,\n                        deepHash: this.deepHash\n                    }\n                });\n            }\n            return new _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                attributes: {\n                    ...response.data,\n                    format: response.data.format || 1\n                },\n                deps: {\n                    merkle: this.merkle,\n                    deepHash: this.deepHash\n                }\n            });\n        }\n        if (response.status === 404) {\n            throw new _lib_error_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"TX_NOT_FOUND\" /* ArweaveErrorType.TX_NOT_FOUND */ );\n        }\n        if (response.status === 410) {\n            throw new _lib_error_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"TX_FAILED\" /* ArweaveErrorType.TX_FAILED */ );\n        }\n        throw new _lib_error_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"TX_INVALID\" /* ArweaveErrorType.TX_INVALID */ );\n    }\n    fromRaw(attributes) {\n        return new _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            attributes,\n            deps: {\n                merkle: this.merkle,\n                deepHash: this.deepHash\n            }\n        });\n    }\n    getStatus(id) {\n        return this.api.get(`tx/${id}/status`).then((response)=>{\n            if (response.status === 200) {\n                return {\n                    status: 200,\n                    confirmed: response.data\n                };\n            }\n            return {\n                status: response.status,\n                confirmed: null\n            };\n        });\n    }\n    async getData(id) {\n        let data = undefined;\n        try {\n            data = (await this.api.get(`/${id}`, {\n                responseType: \"arraybuffer\"\n            })).data;\n        } catch (error) {\n            console.error(`Error while trying to download contiguous data from gateway cache for ${id}`);\n            console.error(error);\n        }\n        if (!data) {\n            console.warn(`Falling back to chunks for ${id}`);\n            try {\n                data = await this.chunks.downloadChunkedData(id);\n            } catch (error) {\n                console.error(`Error while trying to download chunked data for ${id}`);\n                console.error(error);\n            }\n        }\n        if (!data) {\n            throw new Error(`${id} data was not found!`);\n        }\n        return data;\n    }\n    async getDataStream(id) {\n        let data = undefined;\n        try {\n            const resData = (await this.api.get(`/${id}`, {\n                responseType: \"arraybuffer\"\n            })).data;\n            const gen = async function* g() {\n                yield resData;\n            };\n            data = gen();\n        } catch (error) {\n            console.error(`Error while trying to download contiguous data from gateway cache for ${id}`);\n            console.error(error);\n        }\n        if (!data) {\n            console.warn(`Falling back to chunks for ${id}`);\n            try {\n                const gen = this.chunks.concurrentChunkDownloader(id);\n                data = gen;\n            } catch (error) {\n                console.error(`Error while trying to download chunked data for ${id}`);\n                console.error(error);\n            }\n        }\n        if (!data) {\n            throw new Error(`${id} data was not found!`);\n        }\n        return data;\n    }\n    async sign(transaction, jwk, options) {\n        /** Non-exhaustive (only checks key names), but previously no jwk checking was done */ const isJwk = (obj)=>{\n            let valid = true;\n            [\n                \"n\",\n                \"e\",\n                \"d\",\n                \"p\",\n                \"q\",\n                \"dp\",\n                \"dq\",\n                \"qi\"\n            ].map((key)=>!(key in obj) && (valid = false));\n            return valid;\n        };\n        const validJwk = typeof jwk === \"object\" && isJwk(jwk);\n        const externalWallet = typeof arweaveWallet === \"object\";\n        if (!validJwk && !externalWallet) {\n            throw new Error(`No valid JWK or external wallet found to sign transaction.`);\n        } else if (externalWallet) {\n            try {\n                const existingPermissions = await arweaveWallet.getPermissions();\n                if (!existingPermissions.includes(\"SIGN_TRANSACTION\")) await arweaveWallet.connect([\n                    \"SIGN_TRANSACTION\"\n                ]);\n            } catch  {\n            // Permission is already granted\n            }\n            // for external compatibility\n            transaction.tags = transaction.tags.map((v)=>new _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__.ArweaveTag(v.name, v.value));\n            const signedTransaction = await arweaveWallet.sign(transaction, options);\n            transaction.setSignature({\n                id: signedTransaction.id,\n                owner: signedTransaction.owner,\n                reward: signedTransaction.reward,\n                tags: signedTransaction.tags,\n                signature: signedTransaction.signature\n            });\n        } else if (validJwk) {\n            transaction.setOwner(jwk.n);\n            const dataToSign = await transaction.getSignatureData();\n            const rawSignature = await this.crypto.sign(jwk, dataToSign, options);\n            const id = await this.crypto.hash(rawSignature);\n            transaction.setSignature({\n                id: _lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.bufferTob64Url(id),\n                owner: jwk.n,\n                signature: _lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.bufferTob64Url(rawSignature)\n            });\n        } else {\n            // can't get here, but for sanity we'll throw an error.\n            throw new Error(`An error occurred while signing. Check wallet is valid`);\n        }\n    }\n    async verify(transaction) {\n        const signaturePayload = await transaction.getSignatureData();\n        /**\n         * The transaction ID should be a SHA-256 hash of the raw signature bytes, so this needs\n         * to be recalculated from the signature and checked against the transaction ID.\n         */ const rawSignature = transaction.get(\"signature\", {\n            decode: true,\n            string: false\n        });\n        const expectedId = _lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.bufferTob64Url(await this.crypto.hash(rawSignature));\n        if (transaction.id !== expectedId) {\n            throw new Error(`Invalid transaction signature or ID! The transaction ID doesn't match the expected SHA-256 hash of the signature.`);\n        }\n        /**\n         * Now verify the signature is valid and signed by the owner wallet (owner field = originating wallet public key).\n         */ return this.crypto.verify(transaction.owner, signaturePayload, rawSignature);\n    }\n    async post(transaction) {\n        if (typeof transaction === \"string\") {\n            transaction = new _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                attributes: JSON.parse(transaction),\n                deps: {\n                    merkle: this.merkle,\n                    deepHash: this.deepHash\n                }\n            });\n        } else if (typeof transaction.readInt32BE === \"function\") {\n            transaction = new _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                attributes: JSON.parse(transaction.toString()),\n                deps: {\n                    merkle: this.merkle,\n                    deepHash: this.deepHash\n                }\n            });\n        } else if (typeof transaction === \"object\" && !(transaction instanceof _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n            transaction = new _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                attributes: transaction,\n                deps: {\n                    merkle: this.merkle,\n                    deepHash: this.deepHash\n                }\n            });\n        }\n        if (!(transaction instanceof _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n            throw new Error(`Must be Transaction object`);\n        }\n        if (!transaction.chunks) {\n            await transaction.prepareChunks(transaction.data);\n        }\n        const uploader = await this.getUploader(transaction, transaction.data);\n        // Emulate existing error & return value behavior.\n        try {\n            while(!uploader.isComplete){\n                await uploader.uploadChunk();\n            }\n        } catch (e) {\n            if (uploader.lastResponseStatus > 0) {\n                return {\n                    status: uploader.lastResponseStatus,\n                    statusText: uploader.lastResponseError,\n                    data: {\n                        error: uploader.lastResponseError\n                    }\n                };\n            }\n            throw e;\n        }\n        return {\n            status: 200,\n            statusText: \"OK\",\n            data: {}\n        };\n    }\n    /**\n     * Gets an uploader than can be used to upload a transaction chunk by chunk, giving progress\n     * and the ability to resume.\n     *\n     * Usage example:\n     *\n     * ```\n     * const uploader = arweave.transactions.getUploader(transaction);\n     * while (!uploader.isComplete) {\n     *   await uploader.uploadChunk();\n     *   console.log(`${uploader.pctComplete}%`);\n     * }\n     * ```\n     *\n     * @param upload a Transaction object, a previously save progress object, or a transaction id.\n     * @param data the data of the transaction. Required when resuming an upload.\n     */ async getUploader(upload, data) {\n        let uploader;\n        if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n        }\n        if (upload instanceof _lib_transaction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n            if (!data) {\n                data = upload.data;\n            }\n            if (!(data instanceof Uint8Array)) {\n                throw new Error(\"Data format is invalid\");\n            }\n            if (!upload.chunks) {\n                await upload.prepareChunks(data);\n            }\n            uploader = new _lib_transaction_uploader_js__WEBPACK_IMPORTED_MODULE_3__.TransactionUploader({\n                transaction: upload,\n                deps: {\n                    api: this.api,\n                    crypto: this.crypto,\n                    merkle: this.merkle,\n                    deepHash: this.deepHash\n                }\n            });\n            if (!uploader.data || uploader.data.length === 0) {\n                uploader.data = data;\n            }\n        } else {\n            if (typeof upload === \"string\") {\n                upload = await _lib_transaction_uploader_js__WEBPACK_IMPORTED_MODULE_3__.TransactionUploader.fromTransactionId(this.api, upload);\n            }\n            if (!data || !(data instanceof Uint8Array)) {\n                throw new Error(`Must provide data when resuming upload`);\n            }\n            // upload should be a serialized upload.\n            uploader = await _lib_transaction_uploader_js__WEBPACK_IMPORTED_MODULE_3__.TransactionUploader.fromSerialized({\n                deps: {\n                    api: this.api,\n                    merkle: this.merkle,\n                    crypto: this.crypto,\n                    deepHash: this.deepHash\n                },\n                serialized: upload,\n                data\n            });\n        }\n        return uploader;\n    }\n    /**\n     * Async generator version of uploader\n     *\n     * Usage example:\n     *\n     * ```\n     * for await (const uploader of arweave.transactions.upload(tx)) {\n     *  console.log(`${uploader.pctComplete}%`);\n     * }\n     * ```\n     *\n     * @param upload a Transaction object, a previously save uploader, or a transaction id.\n     * @param data the data of the transaction. Required when resuming an upload.\n     */ async *upload(upload, data) {\n        const uploader = await this.getUploader(upload, data);\n        while(!uploader.isComplete){\n            await uploader.uploadChunk();\n            yield uploader;\n        }\n        return uploader;\n    }\n} //# sourceMappingURL=transactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/transactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/wallets.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/wallets.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Wallets)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n\nclass Wallets {\n    constructor(api, crypto){\n        this.api = api;\n        this.crypto = crypto;\n    }\n    /**\n     * Get the wallet balance for the given address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */ getBalance(address) {\n        return this.api.get(`wallet/${address}/balance`, {\n            transformResponse: [\n                /**\n                 * We need to specify a response transformer to override\n                 * the default JSON.parse behaviour, as this causes\n                 * balances to be converted to a number and we want to\n                 * return it as a winston string.\n                 * @param data\n                 */ function(data) {\n                    return data;\n                }\n            ]\n        }).then((response)=>{\n            return response.data;\n        });\n    }\n    /**\n     * Get the last transaction ID for the given wallet address.\n     *\n     * @param {string} address - The arweave address to get the transaction for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a transaction ID.\n     */ getLastTransactionID(address) {\n        return this.api.get(`wallet/${address}/last_tx`).then((response)=>{\n            return response.data;\n        });\n    }\n    generate() {\n        return this.crypto.generateJWK();\n    }\n    async jwkToAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            return this.getAddress();\n        } else {\n            return this.getAddress(jwk);\n        }\n    }\n    async getAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            try {\n                await arweaveWallet.connect([\n                    \"ACCESS_ADDRESS\"\n                ]);\n            } catch  {\n            // Permission is already granted\n            }\n            return arweaveWallet.getActiveAddress();\n        } else {\n            return this.ownerToAddress(jwk.n);\n        }\n    }\n    async ownerToAddress(owner) {\n        return _lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.bufferTob64Url(await this.crypto.hash(_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.b64UrlToBuffer(owner)));\n    }\n} //# sourceMappingURL=wallets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vY29tbW9uL3dhbGxldHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFDaEMsTUFBTUM7SUFHakJDLFlBQVlDLEdBQUcsRUFBRUMsTUFBTSxDQUFFO1FBQ3JCLElBQUksQ0FBQ0QsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtJQUNsQjtJQUNBOzs7Ozs7S0FNQyxHQUNEQyxXQUFXQyxPQUFPLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUNILEdBQUcsQ0FDVkksR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFRCxRQUFRLFFBQVEsQ0FBQyxFQUFFO1lBQ2xDRSxtQkFBbUI7Z0JBQ2Y7Ozs7OztpQkFNQyxHQUNELFNBQVVDLElBQUk7b0JBQ1YsT0FBT0E7Z0JBQ1g7YUFDSDtRQUNMLEdBQ0tDLElBQUksQ0FBQyxDQUFDQztZQUNQLE9BQU9BLFNBQVNGLElBQUk7UUFDeEI7SUFDSjtJQUNBOzs7Ozs7S0FNQyxHQUNERyxxQkFBcUJOLE9BQU8sRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDSSxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUVELFFBQVEsUUFBUSxDQUFDLEVBQUVJLElBQUksQ0FBQyxDQUFDQztZQUNuRCxPQUFPQSxTQUFTRixJQUFJO1FBQ3hCO0lBQ0o7SUFDQUksV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDVCxNQUFNLENBQUNVLFdBQVc7SUFDbEM7SUFDQSxNQUFNQyxhQUFhQyxHQUFHLEVBQUU7UUFDcEIsSUFBSSxDQUFDQSxPQUFPQSxRQUFRLGNBQWM7WUFDOUIsT0FBTyxJQUFJLENBQUNDLFVBQVU7UUFDMUIsT0FDSztZQUNELE9BQU8sSUFBSSxDQUFDQSxVQUFVLENBQUNEO1FBQzNCO0lBQ0o7SUFDQSxNQUFNQyxXQUFXRCxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDQSxPQUFPQSxRQUFRLGNBQWM7WUFDOUIsSUFBSTtnQkFDQSxNQUFNRSxjQUFjQyxPQUFPLENBQUM7b0JBQUM7aUJBQWlCO1lBQ2xELEVBQ0EsT0FBTTtZQUNGLGdDQUFnQztZQUNwQztZQUNBLE9BQU9ELGNBQWNFLGdCQUFnQjtRQUN6QyxPQUNLO1lBQ0QsT0FBTyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0wsSUFBSU0sQ0FBQztRQUNwQztJQUNKO0lBQ0EsTUFBTUQsZUFBZUUsS0FBSyxFQUFFO1FBQ3hCLE9BQU92Qix5REFBMkIsQ0FBQyxNQUFNLElBQUksQ0FBQ0ksTUFBTSxDQUFDcUIsSUFBSSxDQUFDekIseURBQTJCLENBQUN1QjtJQUMxRjtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cythcndlYXZlQDAuMC4yX2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9AaXJ5cy9hcndlYXZlL2J1aWxkL2VzbS9jb21tb24vd2FsbGV0cy5qcz8xNmQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFyd2VhdmVVdGlscyBmcm9tIFwiLi9saWIvdXRpbHMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhbGxldHMge1xuICAgIGFwaTtcbiAgICBjcnlwdG87XG4gICAgY29uc3RydWN0b3IoYXBpLCBjcnlwdG8pIHtcbiAgICAgICAgdGhpcy5hcGkgPSBhcGk7XG4gICAgICAgIHRoaXMuY3J5cHRvID0gY3J5cHRvO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHdhbGxldCBiYWxhbmNlIGZvciB0aGUgZ2l2ZW4gYWRkcmVzcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gVGhlIGFyd2VhdmUgYWRkcmVzcyB0byBnZXQgdGhlIGJhbGFuY2UgZm9yLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gLSBQcm9taXNlIHdoaWNoIHJlc29sdmVzIHdpdGggYSB3aW5zdG9uIHN0cmluZyBiYWxhbmNlLlxuICAgICAqL1xuICAgIGdldEJhbGFuY2UoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlcbiAgICAgICAgICAgIC5nZXQoYHdhbGxldC8ke2FkZHJlc3N9L2JhbGFuY2VgLCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZTogW1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdlIG5lZWQgdG8gc3BlY2lmeSBhIHJlc3BvbnNlIHRyYW5zZm9ybWVyIHRvIG92ZXJyaWRlXG4gICAgICAgICAgICAgICAgICogdGhlIGRlZmF1bHQgSlNPTi5wYXJzZSBiZWhhdmlvdXIsIGFzIHRoaXMgY2F1c2VzXG4gICAgICAgICAgICAgICAgICogYmFsYW5jZXMgdG8gYmUgY29udmVydGVkIHRvIGEgbnVtYmVyIGFuZCB3ZSB3YW50IHRvXG4gICAgICAgICAgICAgICAgICogcmV0dXJuIGl0IGFzIGEgd2luc3RvbiBzdHJpbmcuXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGRhdGFcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxhc3QgdHJhbnNhY3Rpb24gSUQgZm9yIHRoZSBnaXZlbiB3YWxsZXQgYWRkcmVzcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gVGhlIGFyd2VhdmUgYWRkcmVzcyB0byBnZXQgdGhlIHRyYW5zYWN0aW9uIGZvci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IC0gUHJvbWlzZSB3aGljaCByZXNvbHZlcyB3aXRoIGEgdHJhbnNhY3Rpb24gSUQuXG4gICAgICovXG4gICAgZ2V0TGFzdFRyYW5zYWN0aW9uSUQoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkuZ2V0KGB3YWxsZXQvJHthZGRyZXNzfS9sYXN0X3R4YCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2VuZXJhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyeXB0by5nZW5lcmF0ZUpXSygpO1xuICAgIH1cbiAgICBhc3luYyBqd2tUb0FkZHJlc3MoandrKSB7XG4gICAgICAgIGlmICghandrIHx8IGp3ayA9PT0gXCJ1c2Vfd2FsbGV0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFkZHJlc3MoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFkZHJlc3MoandrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRBZGRyZXNzKGp3aykge1xuICAgICAgICBpZiAoIWp3ayB8fCBqd2sgPT09IFwidXNlX3dhbGxldFwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGFyd2VhdmVXYWxsZXQuY29ubmVjdChbXCJBQ0NFU1NfQUREUkVTU1wiXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLy8gUGVybWlzc2lvbiBpcyBhbHJlYWR5IGdyYW50ZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcndlYXZlV2FsbGV0LmdldEFjdGl2ZUFkZHJlc3MoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm93bmVyVG9BZGRyZXNzKGp3ay5uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBvd25lclRvQWRkcmVzcyhvd25lcikge1xuICAgICAgICByZXR1cm4gQXJ3ZWF2ZVV0aWxzLmJ1ZmZlclRvYjY0VXJsKGF3YWl0IHRoaXMuY3J5cHRvLmhhc2goQXJ3ZWF2ZVV0aWxzLmI2NFVybFRvQnVmZmVyKG93bmVyKSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhbGxldHMuanMubWFwIl0sIm5hbWVzIjpbIkFyd2VhdmVVdGlscyIsIldhbGxldHMiLCJjb25zdHJ1Y3RvciIsImFwaSIsImNyeXB0byIsImdldEJhbGFuY2UiLCJhZGRyZXNzIiwiZ2V0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJkYXRhIiwidGhlbiIsInJlc3BvbnNlIiwiZ2V0TGFzdFRyYW5zYWN0aW9uSUQiLCJnZW5lcmF0ZSIsImdlbmVyYXRlSldLIiwiandrVG9BZGRyZXNzIiwiandrIiwiZ2V0QWRkcmVzcyIsImFyd2VhdmVXYWxsZXQiLCJjb25uZWN0IiwiZ2V0QWN0aXZlQWRkcmVzcyIsIm93bmVyVG9BZGRyZXNzIiwibiIsIm93bmVyIiwiYnVmZmVyVG9iNjRVcmwiLCJoYXNoIiwiYjY0VXJsVG9CdWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/wallets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/arweave.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/arweave.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arweave: () => (/* binding */ Arweave),\n/* harmony export */   NodeArweave: () => (/* binding */ NodeArweave),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/index.js\");\n/* harmony import */ var _node_driver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node-driver.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/node-driver.js\");\n/* harmony import */ var _stream_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stream/index.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/stream/index.js\");\n\n\n\nclass Arweave extends _common_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Constructor for a new `Arweave` instance - this one uses the node crypto driver\n     * @param gateways - Specify the Arweave gateway(s) you want to use for requests\n     * @param options - Other configuration options\n     * @param options.miners - A list of Arweave miners (peers) to use for requests\n     * @param options.gateways - A list of Arweave miners (peers) to use for requests\n     */ constructor(gateways, options){\n        super({\n            crypto: options?.crypto ?? new _node_driver_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](),\n            ...options,\n            gateways: gateways ?? \"https://arweave.net\"\n        });\n        this.stream = new _stream_index_js__WEBPACK_IMPORTED_MODULE_2__.Stream({\n            deps: {\n                crypto: this.crypto,\n                api: this.api,\n                merkle: this.merkle,\n                transactions: this.transactions,\n                deepHash: this.deepHash\n            }\n        });\n    }\n    static init(apiConfig) {\n        return new Arweave(apiConfig);\n    }\n}\nconst NodeArweave = Arweave;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Arweave); //# sourceMappingURL=arweave.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vbm9kZS9hcndlYXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErQztBQUNDO0FBQ0w7QUFDcEMsTUFBTUcsZ0JBQWdCSCx3REFBYUE7SUFFdEM7Ozs7OztLQU1DLEdBQ0RJLFlBQVlDLFFBQVEsRUFBRUMsT0FBTyxDQUFFO1FBQzNCLEtBQUssQ0FBQztZQUFFQyxRQUFRRCxTQUFTQyxVQUFVLElBQUlOLHVEQUFnQkE7WUFBSSxHQUFHSyxPQUFPO1lBQUVELFVBQVVBLFlBQVk7UUFBc0I7UUFDbkgsSUFBSSxDQUFDRyxNQUFNLEdBQUcsSUFBSU4sb0RBQU1BLENBQUM7WUFDckJPLE1BQU07Z0JBQUVGLFFBQVEsSUFBSSxDQUFDQSxNQUFNO2dCQUFFRyxLQUFLLElBQUksQ0FBQ0EsR0FBRztnQkFBRUMsUUFBUSxJQUFJLENBQUNBLE1BQU07Z0JBQUVDLGNBQWMsSUFBSSxDQUFDQSxZQUFZO2dCQUFFQyxVQUFVLElBQUksQ0FBQ0EsUUFBUTtZQUFDO1FBQzlIO0lBQ0o7SUFDQSxPQUFPQyxLQUFLQyxTQUFTLEVBQUU7UUFDbkIsT0FBTyxJQUFJWixRQUFRWTtJQUN2QjtBQUNKO0FBQ08sTUFBTUMsY0FBY2IsUUFBUTtBQUNuQyxpRUFBZUEsT0FBT0EsRUFBQyxDQUN2QixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK2Fyd2VhdmVAMC4wLjJfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BpcnlzL2Fyd2VhdmUvYnVpbGQvZXNtL25vZGUvYXJ3ZWF2ZS5qcz9kZDA1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb21tb25BcndlYXZlIGZyb20gXCIuLi9jb21tb24vaW5kZXguanNcIjtcbmltcG9ydCBOb2RlQ3J5cHRvRHJpdmVyIGZyb20gXCIuL25vZGUtZHJpdmVyLmpzXCI7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi9zdHJlYW0vaW5kZXguanNcIjtcbmV4cG9ydCBjbGFzcyBBcndlYXZlIGV4dGVuZHMgQ29tbW9uQXJ3ZWF2ZSB7XG4gICAgc3RyZWFtO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGZvciBhIG5ldyBgQXJ3ZWF2ZWAgaW5zdGFuY2UgLSB0aGlzIG9uZSB1c2VzIHRoZSBub2RlIGNyeXB0byBkcml2ZXJcbiAgICAgKiBAcGFyYW0gZ2F0ZXdheXMgLSBTcGVjaWZ5IHRoZSBBcndlYXZlIGdhdGV3YXkocykgeW91IHdhbnQgdG8gdXNlIGZvciByZXF1ZXN0c1xuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3RoZXIgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAgICogQHBhcmFtIG9wdGlvbnMubWluZXJzIC0gQSBsaXN0IG9mIEFyd2VhdmUgbWluZXJzIChwZWVycykgdG8gdXNlIGZvciByZXF1ZXN0c1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmdhdGV3YXlzIC0gQSBsaXN0IG9mIEFyd2VhdmUgbWluZXJzIChwZWVycykgdG8gdXNlIGZvciByZXF1ZXN0c1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGdhdGV3YXlzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgY3J5cHRvOiBvcHRpb25zPy5jcnlwdG8gPz8gbmV3IE5vZGVDcnlwdG9Ecml2ZXIoKSwgLi4ub3B0aW9ucywgZ2F0ZXdheXM6IGdhdGV3YXlzID8/IFwiaHR0cHM6Ly9hcndlYXZlLm5ldFwiIH0pO1xuICAgICAgICB0aGlzLnN0cmVhbSA9IG5ldyBTdHJlYW0oe1xuICAgICAgICAgICAgZGVwczogeyBjcnlwdG86IHRoaXMuY3J5cHRvLCBhcGk6IHRoaXMuYXBpLCBtZXJrbGU6IHRoaXMubWVya2xlLCB0cmFuc2FjdGlvbnM6IHRoaXMudHJhbnNhY3Rpb25zLCBkZWVwSGFzaDogdGhpcy5kZWVwSGFzaCB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGluaXQoYXBpQ29uZmlnKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXJ3ZWF2ZShhcGlDb25maWcpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBOb2RlQXJ3ZWF2ZSA9IEFyd2VhdmU7XG5leHBvcnQgZGVmYXVsdCBBcndlYXZlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJ3ZWF2ZS5qcy5tYXAiXSwibmFtZXMiOlsiQ29tbW9uQXJ3ZWF2ZSIsIk5vZGVDcnlwdG9Ecml2ZXIiLCJTdHJlYW0iLCJBcndlYXZlIiwiY29uc3RydWN0b3IiLCJnYXRld2F5cyIsIm9wdGlvbnMiLCJjcnlwdG8iLCJzdHJlYW0iLCJkZXBzIiwiYXBpIiwibWVya2xlIiwidHJhbnNhY3Rpb25zIiwiZGVlcEhhc2giLCJpbml0IiwiYXBpQ29uZmlnIiwiTm9kZUFyd2VhdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/arweave.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/index.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/index.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arweave: () => (/* reexport safe */ _arweave_js__WEBPACK_IMPORTED_MODULE_0__.Arweave),\n/* harmony export */   NodeArweave: () => (/* reexport safe */ _arweave_js__WEBPACK_IMPORTED_MODULE_0__.NodeArweave),\n/* harmony export */   \"default\": () => (/* reexport safe */ _arweave_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _arweave_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arweave.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/arweave.js\");\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vbm9kZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZCO0FBQ1UsQ0FDdkMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cythcndlYXZlQDAuMC4yX2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9AaXJ5cy9hcndlYXZlL2J1aWxkL2VzbS9ub2RlL2luZGV4LmpzPzUwZmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYXJ3ZWF2ZS5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL2Fyd2VhdmUuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/node-driver.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/node-driver.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeCryptoDriver: () => (/* binding */ NodeCryptoDriver),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_lib_crypto_pem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/lib/crypto/pem.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/crypto/pem.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n\nclass NodeCryptoDriver {\n    generateJWK() {\n        if (typeof crypto__WEBPACK_IMPORTED_MODULE_1__.generateKeyPair !== \"function\") {\n            throw new Error(\"Keypair generation not supported in this version of Node, only supported in versions 10+\");\n        }\n        return new Promise((resolve, reject)=>{\n            crypto__WEBPACK_IMPORTED_MODULE_1__.generateKeyPair(\"rsa\", {\n                modulusLength: this.keyLength,\n                publicExponent: this.publicExponent,\n                privateKeyEncoding: {\n                    type: \"pkcs1\",\n                    format: \"pem\"\n                },\n                publicKeyEncoding: {\n                    type: \"pkcs1\",\n                    format: \"pem\"\n                }\n            }, (err, _publicKey, privateKey)=>{\n                if (err) {\n                    reject(err);\n                }\n                resolve(this.pemToJWK(privateKey));\n            });\n        });\n    }\n    sign(jwk, data, { saltLength } = {}) {\n        return new Promise((resolve)=>{\n            resolve(crypto__WEBPACK_IMPORTED_MODULE_1__.createSign(this.hashAlgorithm).update(data).sign({\n                key: this.jwkToPem(jwk),\n                padding: crypto__WEBPACK_IMPORTED_MODULE_1__.constants.RSA_PKCS1_PSS_PADDING,\n                saltLength\n            }));\n        });\n    }\n    verify(publicModulus, data, signature) {\n        return new Promise((resolve)=>{\n            const publicKey = {\n                kty: \"RSA\",\n                e: \"AQAB\",\n                n: publicModulus\n            };\n            const pem = this.jwkToPem(publicKey);\n            resolve(crypto__WEBPACK_IMPORTED_MODULE_1__.createVerify(this.hashAlgorithm).update(data).verify({\n                key: pem,\n                padding: crypto__WEBPACK_IMPORTED_MODULE_1__.constants.RSA_PKCS1_PSS_PADDING\n            }, signature));\n        });\n    }\n    hash(data, algorithm = \"SHA-256\") {\n        return new Promise((resolve)=>{\n            resolve(crypto__WEBPACK_IMPORTED_MODULE_1__.createHash(this.parseHashAlgorithm(algorithm)).update(data).digest());\n        });\n    }\n    /**\n     * If a key is passed as a buffer it *must* be exactly 32 bytes.\n     * If a key is passed as a string then any length may be used.\n     *\n     * @param {Buffer} data\n     * @param {(string | Buffer)} key\n     * @returns {Promise<Uint8Array>}\n     */ async encrypt(data, key, salt) {\n        // create a random string for deriving the key\n        // const salt = crypto.randomBytes(16);\n        // console.log(salt);\n        // As we're using CBC with a randomised IV per cypher we don't really need\n        // an additional random salt per passphrase.\n        const derivedKey = crypto__WEBPACK_IMPORTED_MODULE_1__.pbkdf2Sync(key, salt = salt ? salt : \"salt\", 100000, 32, this.hashAlgorithm);\n        const iv = crypto__WEBPACK_IMPORTED_MODULE_1__.randomBytes(16);\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_1__.createCipheriv(this.encryptionAlgorithm, derivedKey, iv);\n        const encrypted = Buffer.concat([\n            iv,\n            cipher.update(data),\n            cipher.final()\n        ]);\n        return encrypted;\n    }\n    /**\n     * If a key is passed as a buffer it *must* be exactly 32 bytes.\n     * If a key is passed as a string then any length may be used.\n     *\n     * @param {Buffer} encrypted\n     * @param {(string | Buffer)} key\n     * @returns {Promise<Uint8Array>}\n     */ async decrypt(encrypted, key, salt) {\n        try {\n            // create a random string for deriving the key\n            // const salt = crypto.randomBytes(16).toString('hex');\n            // As we're using CBC with a randomised IV per cypher we don't really need\n            // an additional random salt per passphrase.\n            const derivedKey = crypto__WEBPACK_IMPORTED_MODULE_1__.pbkdf2Sync(key, salt = salt ? salt : \"salt\", 100000, 32, this.hashAlgorithm);\n            const iv = encrypted.slice(0, 16);\n            const data = encrypted.slice(16);\n            const decipher = crypto__WEBPACK_IMPORTED_MODULE_1__.createDecipheriv(this.encryptionAlgorithm, derivedKey, iv);\n            const decrypted = Buffer.concat([\n                decipher.update(data),\n                decipher.final()\n            ]);\n            return decrypted;\n        } catch (error) {\n            throw new Error(\"Failed to decrypt\");\n        }\n    }\n    jwkToPem(jwk) {\n        return (0,_common_lib_crypto_pem_js__WEBPACK_IMPORTED_MODULE_0__.jwkTopem)(jwk);\n    }\n    pemToJWK(pem) {\n        const jwk = (0,_common_lib_crypto_pem_js__WEBPACK_IMPORTED_MODULE_0__.pemTojwk)(pem);\n        return jwk;\n    }\n    parseHashAlgorithm(algorithm) {\n        switch(algorithm){\n            case \"SHA-256\":\n                return \"sha256\";\n            case \"SHA-384\":\n                return \"sha384\";\n            default:\n                throw new Error(`Algorithm not supported: ${algorithm}`);\n        }\n    }\n    constructor(){\n        this.keyLength = 4096;\n        this.publicExponent = 0x10001;\n        this.hashAlgorithm = \"sha256\";\n        this.encryptionAlgorithm = \"aes-256-cbc\";\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NodeCryptoDriver); //# sourceMappingURL=node-driver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/node-driver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/stream/chunker.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/stream/chunker.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChunkBuffer: () => (/* binding */ ChunkBuffer),\n/* harmony export */   chunker: () => (/* binding */ chunker)\n/* harmony export */ });\nclass ChunkBuffer {\n    get empty() {\n        return this.buffers.length === 0;\n    }\n    push(...buffers) {\n        this.buffers.push(...buffers);\n    }\n    pop(expectedChunkSize) {\n        let totalBufferSize = 0;\n        for (const [i, chunk] of this.buffers.entries()){\n            totalBufferSize += chunk.byteLength;\n            if (totalBufferSize === expectedChunkSize) {\n                return Buffer.concat(this.buffers.splice(0, i + 1));\n            } else if (totalBufferSize > expectedChunkSize) {\n                const chunkOverflowAmount = totalBufferSize - expectedChunkSize;\n                const chunkWatermark = chunk.byteLength - chunkOverflowAmount;\n                const chunkBelowWatermark = chunk.slice(0, chunkWatermark);\n                const chunkOverflow = chunk.slice(chunkWatermark);\n                const chunkBuffers = this.buffers.splice(0, i);\n                chunkBuffers.push(chunkBelowWatermark);\n                this.buffers[0] = chunkOverflow;\n                return Buffer.concat(chunkBuffers);\n            }\n        }\n        return null;\n    }\n    flush() {\n        const remaining = Buffer.concat(this.buffers);\n        this.buffers.length = 0;\n        return remaining;\n    }\n    constructor(){\n        this.buffers = [];\n    }\n}\nfunction chunker(expectedChunkSize, { flush } = {\n    flush: false\n}) {\n    return async function*(stream) {\n        const chunkBuffer = new ChunkBuffer();\n        for await (const chunk of stream){\n            chunkBuffer.push(chunk);\n            while(true){\n                const sizedChunk = chunkBuffer.pop(expectedChunkSize);\n                if (!sizedChunk) {\n                    break;\n                }\n                yield sizedChunk;\n            }\n        }\n        if (flush) {\n            const flushedBuffer = chunkBuffer.flush();\n            if (flushedBuffer.byteLength > 0) {\n                yield flushedBuffer;\n            }\n        }\n    };\n} //# sourceMappingURL=chunker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vbm9kZS9zdHJlYW0vY2h1bmtlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BO0lBRVQsSUFBSUMsUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLE1BQU0sS0FBSztJQUNuQztJQUNBQyxLQUFLLEdBQUdGLE9BQU8sRUFBRTtRQUNiLElBQUksQ0FBQ0EsT0FBTyxDQUFDRSxJQUFJLElBQUlGO0lBQ3pCO0lBQ0FHLElBQUlDLGlCQUFpQixFQUFFO1FBQ25CLElBQUlDLGtCQUFrQjtRQUN0QixLQUFLLE1BQU0sQ0FBQ0MsR0FBR0MsTUFBTSxJQUFJLElBQUksQ0FBQ1AsT0FBTyxDQUFDUSxPQUFPLEdBQUk7WUFDN0NILG1CQUFtQkUsTUFBTUUsVUFBVTtZQUNuQyxJQUFJSixvQkFBb0JELG1CQUFtQjtnQkFDdkMsT0FBT00sT0FBT0MsTUFBTSxDQUFDLElBQUksQ0FBQ1gsT0FBTyxDQUFDWSxNQUFNLENBQUMsR0FBR04sSUFBSTtZQUNwRCxPQUNLLElBQUlELGtCQUFrQkQsbUJBQW1CO2dCQUMxQyxNQUFNUyxzQkFBc0JSLGtCQUFrQkQ7Z0JBQzlDLE1BQU1VLGlCQUFpQlAsTUFBTUUsVUFBVSxHQUFHSTtnQkFDMUMsTUFBTUUsc0JBQXNCUixNQUFNUyxLQUFLLENBQUMsR0FBR0Y7Z0JBQzNDLE1BQU1HLGdCQUFnQlYsTUFBTVMsS0FBSyxDQUFDRjtnQkFDbEMsTUFBTUksZUFBZSxJQUFJLENBQUNsQixPQUFPLENBQUNZLE1BQU0sQ0FBQyxHQUFHTjtnQkFDNUNZLGFBQWFoQixJQUFJLENBQUNhO2dCQUNsQixJQUFJLENBQUNmLE9BQU8sQ0FBQyxFQUFFLEdBQUdpQjtnQkFDbEIsT0FBT1AsT0FBT0MsTUFBTSxDQUFDTztZQUN6QjtRQUNKO1FBQ0EsT0FBTztJQUNYO0lBQ0FDLFFBQVE7UUFDSixNQUFNQyxZQUFZVixPQUFPQyxNQUFNLENBQUMsSUFBSSxDQUFDWCxPQUFPO1FBQzVDLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLEdBQUc7UUFDdEIsT0FBT21CO0lBQ1g7O2FBL0JBcEIsVUFBVSxFQUFFOztBQWdDaEI7QUFDTyxTQUFTcUIsUUFBUWpCLGlCQUFpQixFQUFFLEVBQUVlLEtBQUssRUFBRSxHQUFHO0lBQUVBLE9BQU87QUFBTSxDQUFDO0lBQ25FLE9BQU8sZ0JBQWlCRyxNQUFNO1FBQzFCLE1BQU1DLGNBQWMsSUFBSXpCO1FBQ3hCLFdBQVcsTUFBTVMsU0FBU2UsT0FBUTtZQUM5QkMsWUFBWXJCLElBQUksQ0FBQ0s7WUFDakIsTUFBTyxLQUFNO2dCQUNULE1BQU1pQixhQUFhRCxZQUFZcEIsR0FBRyxDQUFDQztnQkFDbkMsSUFBSSxDQUFDb0IsWUFBWTtvQkFDYjtnQkFDSjtnQkFDQSxNQUFNQTtZQUNWO1FBQ0o7UUFDQSxJQUFJTCxPQUFPO1lBQ1AsTUFBTU0sZ0JBQWdCRixZQUFZSixLQUFLO1lBQ3ZDLElBQUlNLGNBQWNoQixVQUFVLEdBQUcsR0FBRztnQkFDOUIsTUFBTWdCO1lBQ1Y7UUFDSjtJQUNKO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BpcnlzK2Fyd2VhdmVAMC4wLjJfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BpcnlzL2Fyd2VhdmUvYnVpbGQvZXNtL25vZGUvc3RyZWFtL2NodW5rZXIuanM/YTM2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQ2h1bmtCdWZmZXIge1xuICAgIGJ1ZmZlcnMgPSBbXTtcbiAgICBnZXQgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBwdXNoKC4uLmJ1ZmZlcnMpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goLi4uYnVmZmVycyk7XG4gICAgfVxuICAgIHBvcChleHBlY3RlZENodW5rU2l6ZSkge1xuICAgICAgICBsZXQgdG90YWxCdWZmZXJTaXplID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBbaSwgY2h1bmtdIG9mIHRoaXMuYnVmZmVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHRvdGFsQnVmZmVyU2l6ZSArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHRvdGFsQnVmZmVyU2l6ZSA9PT0gZXhwZWN0ZWRDaHVua1NpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcnMuc3BsaWNlKDAsIGkgKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0b3RhbEJ1ZmZlclNpemUgPiBleHBlY3RlZENodW5rU2l6ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rT3ZlcmZsb3dBbW91bnQgPSB0b3RhbEJ1ZmZlclNpemUgLSBleHBlY3RlZENodW5rU2l6ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaHVua1dhdGVybWFyayA9IGNodW5rLmJ5dGVMZW5ndGggLSBjaHVua092ZXJmbG93QW1vdW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rQmVsb3dXYXRlcm1hcmsgPSBjaHVuay5zbGljZSgwLCBjaHVua1dhdGVybWFyayk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmtPdmVyZmxvdyA9IGNodW5rLnNsaWNlKGNodW5rV2F0ZXJtYXJrKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaHVua0J1ZmZlcnMgPSB0aGlzLmJ1ZmZlcnMuc3BsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICAgIGNodW5rQnVmZmVycy5wdXNoKGNodW5rQmVsb3dXYXRlcm1hcmspO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyc1swXSA9IGNodW5rT3ZlcmZsb3c7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoY2h1bmtCdWZmZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZmx1c2goKSB7XG4gICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IEJ1ZmZlci5jb25jYXQodGhpcy5idWZmZXJzKTtcbiAgICAgICAgdGhpcy5idWZmZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIHJldHVybiByZW1haW5pbmc7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNodW5rZXIoZXhwZWN0ZWRDaHVua1NpemUsIHsgZmx1c2ggfSA9IHsgZmx1c2g6IGZhbHNlIH0pIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24qIChzdHJlYW0pIHtcbiAgICAgICAgY29uc3QgY2h1bmtCdWZmZXIgPSBuZXcgQ2h1bmtCdWZmZXIoKTtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzdHJlYW0pIHtcbiAgICAgICAgICAgIGNodW5rQnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplZENodW5rID0gY2h1bmtCdWZmZXIucG9wKGV4cGVjdGVkQ2h1bmtTaXplKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNpemVkQ2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHlpZWxkIHNpemVkQ2h1bms7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsdXNoKSB7XG4gICAgICAgICAgICBjb25zdCBmbHVzaGVkQnVmZmVyID0gY2h1bmtCdWZmZXIuZmx1c2goKTtcbiAgICAgICAgICAgIGlmIChmbHVzaGVkQnVmZmVyLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgZmx1c2hlZEJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVua2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJDaHVua0J1ZmZlciIsImVtcHR5IiwiYnVmZmVycyIsImxlbmd0aCIsInB1c2giLCJwb3AiLCJleHBlY3RlZENodW5rU2l6ZSIsInRvdGFsQnVmZmVyU2l6ZSIsImkiLCJjaHVuayIsImVudHJpZXMiLCJieXRlTGVuZ3RoIiwiQnVmZmVyIiwiY29uY2F0Iiwic3BsaWNlIiwiY2h1bmtPdmVyZmxvd0Ftb3VudCIsImNodW5rV2F0ZXJtYXJrIiwiY2h1bmtCZWxvd1dhdGVybWFyayIsInNsaWNlIiwiY2h1bmtPdmVyZmxvdyIsImNodW5rQnVmZmVycyIsImZsdXNoIiwicmVtYWluaW5nIiwiY2h1bmtlciIsInN0cmVhbSIsImNodW5rQnVmZmVyIiwic2l6ZWRDaHVuayIsImZsdXNoZWRCdWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/stream/chunker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/stream/index.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/stream/index.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream)\n/* harmony export */ });\n/* harmony import */ var stream_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream/promises */ \"stream/promises\");\n/* harmony import */ var _common_lib_merkle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/lib/merkle.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/merkle.js\");\n/* harmony import */ var _common_lib_transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/lib/transaction.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction.js\");\n/* harmony import */ var _common_lib_transaction_uploader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/lib/transaction-uploader.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/transaction-uploader.js\");\n/* harmony import */ var _common_lib_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/lib/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n/* harmony import */ var _chunker_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunker.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/stream/chunker.js\");\n\n\n\n\n\n\nconst MAX_CONCURRENT_CHUNK_UPLOAD_COUNT = 128;\nclass Stream {\n    constructor({ deps }){\n        this.crypto = deps.crypto;\n        this.merkle = deps.merkle;\n        this.api = deps.api;\n        this.transactions = deps.transactions;\n        this.deepHash = deps.deepHash;\n    }\n    /**\n     * Creates an Arweave transaction from the piped data stream.\n     */ createTransactionAsync(attributes, jwk) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const oThis = this;\n        return async (source)=>{\n            const chunks = await (0,stream_promises__WEBPACK_IMPORTED_MODULE_0__.pipeline)(source, oThis.generateTransactionChunksAsync());\n            const txAttrs = Object.assign({}, attributes);\n            txAttrs.owner ??= jwk?.n;\n            txAttrs.last_tx ??= await oThis.transactions.getTransactionAnchor();\n            const lastChunk = chunks.chunks[chunks.chunks.length - 1];\n            const dataByteLength = lastChunk.maxByteRange;\n            txAttrs.reward ??= await oThis.transactions.getPrice(dataByteLength, txAttrs.target);\n            txAttrs.data_size = dataByteLength.toString();\n            const tx = new _common_lib_transaction_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                attributes: txAttrs,\n                deps: {\n                    merkle: oThis.merkle,\n                    deepHash: oThis.deepHash\n                }\n            });\n            tx.chunks = chunks;\n            tx.data_root = (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_4__.bufferTob64Url)(chunks.data_root);\n            return tx;\n        };\n    }\n    /**\n     * Generates the Arweave transaction chunk information from the piped data stream.\n     */ generateTransactionChunksAsync() {\n        const crypto = this.crypto;\n        return async (source)=>{\n            const chunks = [];\n            /**\n             * @param chunkByteIndex the index the start of the specified chunk is located at within its original data stream.\n             */ const addChunk = async (chunkByteIndex, chunk)=>{\n                const dataHash = await crypto.hash(chunk);\n                const chunkRep = {\n                    dataHash,\n                    minByteRange: chunkByteIndex,\n                    maxByteRange: chunkByteIndex + chunk.byteLength\n                };\n                chunks.push(chunkRep);\n                return chunkRep;\n            };\n            let chunkStreamByteIndex = 0;\n            let previousDataChunk;\n            let expectChunkGenerationCompleted = false;\n            await (0,stream_promises__WEBPACK_IMPORTED_MODULE_0__.pipeline)(source, (0,_chunker_js__WEBPACK_IMPORTED_MODULE_5__.chunker)(_common_lib_merkle_js__WEBPACK_IMPORTED_MODULE_1__.MAX_CHUNK_SIZE, {\n                flush: true\n            }), async (chunkedSource)=>{\n                for await (const chunk of chunkedSource){\n                    if (expectChunkGenerationCompleted) {\n                        throw Error(\"Expected chunk generation to have completed.\");\n                    }\n                    if (chunk.byteLength >= _common_lib_merkle_js__WEBPACK_IMPORTED_MODULE_1__.MIN_CHUNK_SIZE && chunk.byteLength <= _common_lib_merkle_js__WEBPACK_IMPORTED_MODULE_1__.MAX_CHUNK_SIZE) {\n                        await addChunk(chunkStreamByteIndex, chunk);\n                    } else if (chunk.byteLength < _common_lib_merkle_js__WEBPACK_IMPORTED_MODULE_1__.MIN_CHUNK_SIZE) {\n                        if (previousDataChunk) {\n                            // If this final chunk is smaller than the minimum chunk size, rebalance this final chunk and\n                            // the previous chunk to keep the final chunk size above the minimum threshold.\n                            const remainingBytes = Buffer.concat([\n                                previousDataChunk,\n                                chunk\n                            ], previousDataChunk.byteLength + chunk.byteLength);\n                            const rebalancedSizeForPreviousChunk = Math.ceil(remainingBytes.byteLength / 2);\n                            const previousChunk = chunks.pop();\n                            const rebalancedPreviousChunk = await addChunk(previousChunk.minByteRange, remainingBytes.slice(0, rebalancedSizeForPreviousChunk));\n                            await addChunk(rebalancedPreviousChunk.maxByteRange, remainingBytes.slice(rebalancedSizeForPreviousChunk));\n                        } else {\n                            // This entire stream should be smaller than the minimum chunk size, just add the chunk in.\n                            await addChunk(chunkStreamByteIndex, chunk);\n                        }\n                        expectChunkGenerationCompleted = true;\n                    } else if (chunk.byteLength > _common_lib_merkle_js__WEBPACK_IMPORTED_MODULE_1__.MAX_CHUNK_SIZE) {\n                        throw Error(\"Encountered chunk larger than max chunk size.\");\n                    }\n                    chunkStreamByteIndex += chunk.byteLength;\n                    previousDataChunk = chunk;\n                }\n            });\n            const leaves = await this.merkle.generateLeaves(chunks);\n            const root = await this.merkle.buildLayers(leaves);\n            const proofs = this.merkle.generateProofs(root);\n            return {\n                data_root: root.id,\n                chunks,\n                proofs\n            };\n        };\n    }\n    /**\n     * Uploads the piped data to the specified transaction.\n     *\n     * @param tx\n     * @param arweave\n     * @param createTx whether or not the passed transaction should be created on the network.\n     * This can be false if we want to reseed an existing transaction,\n     * @param debugOpts\n     */ uploadTransactionAsync(tx, createTx = true, debugOpts) {\n        const txId = tx.id;\n        const log = (message)=>{\n            if (debugOpts?.log) debugOpts.log(`[uploadTransactionAsync:${txId}] ${message}`);\n        };\n        log(`Starting chunked upload - ${tx.chunks?.chunks?.length} chunks / ${tx.data_size} total bytes`);\n        return async (source)=>{\n            if (!tx.chunks) {\n                throw Error(\"Transaction has no computed chunks!\");\n            }\n            if (createTx) {\n                // Ensure the transaction data field is blank.\n                // We'll upload this data in chunks instead.\n                tx.data = new Uint8Array(0);\n                const createTxRes = await this.api.post(`tx`, tx);\n                if (!(createTxRes.status >= 200 && createTxRes.status < 300)) {\n                    throw new Error(`Failed to create transaction: status ${createTxRes.status} / data ${createTxRes.data}`);\n                }\n            }\n            const txChunkData = tx.chunks;\n            const { chunks, proofs } = txChunkData;\n            function prepareChunkUploadPayload(chunkIndex, chunkData) {\n                const proof = proofs[chunkIndex];\n                return {\n                    data_root: tx.data_root,\n                    data_size: tx.data_size,\n                    data_path: (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_4__.bufferTob64Url)(proof.proof),\n                    offset: proof.offset.toString(),\n                    chunk: (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_4__.bufferTob64Url)(chunkData)\n                };\n            }\n            log(`Starting pipe - MAX_CHUNK_SIZE=${_common_lib_merkle_js__WEBPACK_IMPORTED_MODULE_1__.MAX_CHUNK_SIZE}`);\n            await (0,stream_promises__WEBPACK_IMPORTED_MODULE_0__.pipeline)(source, (0,_chunker_js__WEBPACK_IMPORTED_MODULE_5__.chunker)(_common_lib_merkle_js__WEBPACK_IMPORTED_MODULE_1__.MAX_CHUNK_SIZE, {\n                flush: true\n            }), async (chunkedSource)=>{\n                let chunkIndex = 0;\n                let dataRebalancedIntoFinalChunk;\n                const activeChunkUploads = [];\n                for await (const chunkData of chunkedSource){\n                    const currentChunk = chunks[chunkIndex];\n                    const chunkSize = currentChunk.maxByteRange - currentChunk.minByteRange;\n                    log(`Got chunk - ${chunkData.byteLength} bytes / chunkSize ${chunkSize}`);\n                    const expectedToBeFinalRebalancedChunk = dataRebalancedIntoFinalChunk != null;\n                    let chunkPayload;\n                    if (chunkData.byteLength === chunkSize) {\n                        // If the transaction data chunks was never rebalanced this is the only code path that\n                        // will execute as the incoming chunked data as the will always be equivalent to `chunkSize`.\n                        chunkPayload = prepareChunkUploadPayload(chunkIndex, chunkData);\n                    } else if (chunkData.byteLength > chunkSize) {\n                        // If the incoming chunk data is larger than the expected size of the current chunk\n                        // it means that the transaction had chunks that were rebalanced to meet the minimum chunk size.\n                        //\n                        // It also means that the chunk we're currently processing should be the second to last\n                        // chunk.\n                        chunkPayload = prepareChunkUploadPayload(chunkIndex, chunkData.slice(0, chunkSize));\n                        dataRebalancedIntoFinalChunk = chunkData.slice(chunkSize);\n                    } else if (chunkData.byteLength < chunkSize && expectedToBeFinalRebalancedChunk) {\n                        // If this is the final rebalanced chunk, create the upload payload by concatenating the previous\n                        // chunk's data that was moved into this and the remaining stream data.\n                        chunkPayload = prepareChunkUploadPayload(chunkIndex, Buffer.concat([\n                            dataRebalancedIntoFinalChunk,\n                            chunkData\n                        ], dataRebalancedIntoFinalChunk.length + chunkData.length));\n                    } else {\n                        throw Error(\"Transaction data stream terminated incorrectly.\");\n                    }\n                    const chunkValid = await this.merkle.validatePath(txChunkData.data_root, parseInt(chunkPayload.offset), 0, parseInt(chunkPayload.data_size), (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_4__.b64UrlToBuffer)(chunkPayload.data_path));\n                    if (!chunkValid) {\n                        throw new Error(`Unable to validate chunk ${chunkIndex}.`);\n                    }\n                    // Upload multiple transaction chunks in parallel to speed up the upload.\n                    // If we are already at the maximum concurrent chunk upload limit,\n                    // wait till all of them to complete first before continuing.\n                    if (activeChunkUploads.length >= MAX_CONCURRENT_CHUNK_UPLOAD_COUNT) {\n                        await Promise.all(activeChunkUploads);\n                        // Clear the active chunk uploads array.\n                        activeChunkUploads.length = 0;\n                    }\n                    // TODO: allow for this abort code behaviour\n                    activeChunkUploads.push(this.api.post(\"chunk\", chunkPayload, {\n                        retry: {\n                            onRetry: (err)=>!_common_lib_transaction_uploader_js__WEBPACK_IMPORTED_MODULE_3__.FATAL_CHUNK_UPLOAD_ERRORS.includes(err.message)\n                        }\n                    }));\n                    chunkIndex++;\n                    log(`Chunk process done - ${chunkIndex}`);\n                }\n                log(`Active chunks to upload - ${activeChunkUploads.length}`);\n                await Promise.all(activeChunkUploads);\n                if (chunkIndex < chunks.length) {\n                    throw Error(`Transaction upload incomplete: ${chunkIndex + 1}/${chunks.length} chunks uploaded.`);\n                }\n            }).catch((e)=>{\n                log(e.message);\n                throw e;\n            });\n        };\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/node/stream/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/web/arweave.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/web/arweave.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arweave: () => (/* binding */ Arweave),\n/* harmony export */   WebArweave: () => (/* binding */ WebArweave),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/index.js\");\n/* harmony import */ var _webcrypto_driver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webcrypto-driver.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/web/webcrypto-driver.js\");\n\n\nclass Arweave extends _common_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Constructor for a new `Arweave` instance - this one uses the web crypto driver\n     * @param gatways - Specify the Arweave gateway(s) you want to use for requests\n     * @param options - Other configuration options\n     * @param options.miners - A list of Arweave miners (peers) to use for requests\n     * @param options.gateways - A list of Arweave miners (peers) to use for requests\n     */ constructor(gateways, options){\n        super({\n            crypto: options?.crypto ?? new _webcrypto_driver_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](),\n            ...options,\n            gateways: gateways ?? \"https://arweave.net\"\n        });\n    }\n    static init(apiConfig) {\n        return new Arweave(apiConfig);\n    }\n}\nconst WebArweave = Arweave;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Arweave); //# sourceMappingURL=arweave.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGlyeXMrYXJ3ZWF2ZUAwLjAuMl9kZWJ1Z0A0LjQuMC9ub2RlX21vZHVsZXMvQGlyeXMvYXJ3ZWF2ZS9idWlsZC9lc20vd2ViL2Fyd2VhdmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDSztBQUM3QyxNQUFNRSxnQkFBZ0JGLHdEQUFhQTtJQUN0Qzs7Ozs7O0tBTUMsR0FDREcsWUFBWUMsUUFBUSxFQUFFQyxPQUFPLENBQUU7UUFDM0IsS0FBSyxDQUFDO1lBQUVDLFFBQVFELFNBQVNDLFVBQVUsSUFBSUwsNERBQWVBO1lBQUksR0FBR0ksT0FBTztZQUFFRCxVQUFVQSxZQUFZO1FBQXNCO0lBQ3RIO0lBQ0EsT0FBT0csS0FBS0MsU0FBUyxFQUFFO1FBQ25CLE9BQU8sSUFBSU4sUUFBUU07SUFDdkI7QUFDSjtBQUNPLE1BQU1DLGFBQWFQLFFBQVE7QUFDbEMsaUVBQWVBLE9BQU9BLEVBQUMsQ0FDdkIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaXJ5cythcndlYXZlQDAuMC4yX2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9AaXJ5cy9hcndlYXZlL2J1aWxkL2VzbS93ZWIvYXJ3ZWF2ZS5qcz81OTU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb21tb25BcndlYXZlIGZyb20gXCIuLi9jb21tb24vaW5kZXguanNcIjtcbmltcG9ydCBXZWJDcnlwdG9Ecml2ZXIgZnJvbSBcIi4vd2ViY3J5cHRvLWRyaXZlci5qc1wiO1xuZXhwb3J0IGNsYXNzIEFyd2VhdmUgZXh0ZW5kcyBDb21tb25BcndlYXZlIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgYSBuZXcgYEFyd2VhdmVgIGluc3RhbmNlIC0gdGhpcyBvbmUgdXNlcyB0aGUgd2ViIGNyeXB0byBkcml2ZXJcbiAgICAgKiBAcGFyYW0gZ2F0d2F5cyAtIFNwZWNpZnkgdGhlIEFyd2VhdmUgZ2F0ZXdheShzKSB5b3Ugd2FudCB0byB1c2UgZm9yIHJlcXVlc3RzXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPdGhlciBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5taW5lcnMgLSBBIGxpc3Qgb2YgQXJ3ZWF2ZSBtaW5lcnMgKHBlZXJzKSB0byB1c2UgZm9yIHJlcXVlc3RzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZ2F0ZXdheXMgLSBBIGxpc3Qgb2YgQXJ3ZWF2ZSBtaW5lcnMgKHBlZXJzKSB0byB1c2UgZm9yIHJlcXVlc3RzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ2F0ZXdheXMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoeyBjcnlwdG86IG9wdGlvbnM/LmNyeXB0byA/PyBuZXcgV2ViQ3J5cHRvRHJpdmVyKCksIC4uLm9wdGlvbnMsIGdhdGV3YXlzOiBnYXRld2F5cyA/PyBcImh0dHBzOi8vYXJ3ZWF2ZS5uZXRcIiB9KTtcbiAgICB9XG4gICAgc3RhdGljIGluaXQoYXBpQ29uZmlnKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXJ3ZWF2ZShhcGlDb25maWcpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBXZWJBcndlYXZlID0gQXJ3ZWF2ZTtcbmV4cG9ydCBkZWZhdWx0IEFyd2VhdmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcndlYXZlLmpzLm1hcCJdLCJuYW1lcyI6WyJDb21tb25BcndlYXZlIiwiV2ViQ3J5cHRvRHJpdmVyIiwiQXJ3ZWF2ZSIsImNvbnN0cnVjdG9yIiwiZ2F0ZXdheXMiLCJvcHRpb25zIiwiY3J5cHRvIiwiaW5pdCIsImFwaUNvbmZpZyIsIldlYkFyd2VhdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/web/arweave.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/web/webcrypto-driver.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/web/webcrypto-driver.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WebCryptoDriver)\n/* harmony export */ });\n/* harmony import */ var _common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/lib/utils.js */ \"(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/common/lib/utils.js\");\n\nclass WebCryptoDriver {\n    constructor(){\n        this.keyLength = 4096;\n        this.publicExponent = 0x10001;\n        this.hashAlgorithm = \"sha256\";\n        this.driver = crypto?.subtle;\n    }\n    async generateJWK() {\n        const cryptoKey = await this.driver.generateKey({\n            name: \"RSA-PSS\",\n            modulusLength: 4096,\n            publicExponent: new Uint8Array([\n                0x01,\n                0x00,\n                0x01\n            ]),\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, true, [\n            \"sign\"\n        ]);\n        const jwk = await this.driver.exportKey(\"jwk\", cryptoKey.privateKey);\n        return {\n            kty: jwk.kty,\n            e: jwk.e,\n            n: jwk.n,\n            d: jwk.d,\n            p: jwk.p,\n            q: jwk.q,\n            dp: jwk.dp,\n            dq: jwk.dq,\n            qi: jwk.qi\n        };\n    }\n    async sign(jwk, data, { saltLength } = {\n        saltLength: 32\n    }) {\n        const signature = await this.driver.sign({\n            name: \"RSA-PSS\",\n            saltLength\n        }, await this.jwkToCryptoKey(jwk), data);\n        return new Uint8Array(signature);\n    }\n    async hash(data, algorithm = \"SHA-256\") {\n        const digest = await this.driver.digest(algorithm, data);\n        return new Uint8Array(digest);\n    }\n    async verify(publicModulus, data, signature) {\n        const publicKey = {\n            kty: \"RSA\",\n            e: \"AQAB\",\n            n: publicModulus\n        };\n        const key = await this.jwkToPublicCryptoKey(publicKey);\n        const digest = await this.driver.digest(\"SHA-256\", data);\n        const salt0 = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: 0\n        }, key, signature, data);\n        const salt32 = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: 32\n        }, key, signature, data);\n        // saltN's salt-length is derived from a formula described here\n        // https://developer.mozilla.org/en-US/docs/Web/API/RsaPssParams\n        const saltN = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: Math.ceil((key.algorithm.modulusLength - 1) / 8) - digest.byteLength - 2\n        }, key, signature, data);\n        return salt0 || salt32 || saltN;\n    }\n    async jwkToCryptoKey(jwk) {\n        return this.driver.importKey(\"jwk\", jwk, {\n            name: \"RSA-PSS\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, false, [\n            \"sign\"\n        ]);\n    }\n    async jwkToPublicCryptoKey(publicJwk) {\n        return this.driver.importKey(\"jwk\", publicJwk, {\n            name: \"RSA-PSS\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, false, [\n            \"verify\"\n        ]);\n    }\n    // private detectWebCrypto() {\n    //   if (typeof crypto === \"undefined\") {\n    //     return false;\n    //   }\n    //   const subtle = crypto?.subtle;\n    //   if (subtle === undefined) {\n    //     return false;\n    //   }\n    //   const names = [\"generateKey\", \"importKey\", \"exportKey\", \"digest\", \"sign\"] as const;\n    //   return names.every((name) => typeof subtle[name] === \"function\");\n    // }\n    async encrypt(data, key, salt) {\n        const initialKey = await this.driver.importKey(\"raw\", typeof key === \"string\" ? (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer)(key) : key, {\n            name: \"PBKDF2\",\n            length: 32\n        }, false, [\n            \"deriveKey\"\n        ]);\n        // const salt = ArweaveUtils.stringToBuffer(\"salt\");\n        // create a random string for deriving the key\n        // const salt = this.driver.randomBytes(16).toString('hex');\n        const derivedkey = await this.driver.deriveKey({\n            name: \"PBKDF2\",\n            salt: salt ? (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer)(salt) : (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer)(\"salt\"),\n            iterations: 100000,\n            hash: \"SHA-256\"\n        }, initialKey, {\n            name: \"AES-CBC\",\n            length: 256\n        }, false, [\n            \"encrypt\",\n            \"decrypt\"\n        ]);\n        const iv = new Uint8Array(16);\n        crypto.getRandomValues(iv);\n        const encryptedData = await this.driver.encrypt({\n            name: \"AES-CBC\",\n            iv: iv\n        }, derivedkey, data);\n        return (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBuffers)([\n            iv,\n            encryptedData\n        ]);\n    }\n    async decrypt(encrypted, key, salt) {\n        const initialKey = await this.driver.importKey(\"raw\", typeof key === \"string\" ? (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer)(key) : key, {\n            name: \"PBKDF2\",\n            length: 32\n        }, false, [\n            \"deriveKey\"\n        ]);\n        // const salt = ArweaveUtils.stringToBuffer(\"pepper\");\n        const derivedkey = await this.driver.deriveKey({\n            name: \"PBKDF2\",\n            salt: salt ? (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer)(salt) : (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToBuffer)(\"salt\"),\n            iterations: 100000,\n            hash: \"SHA-256\"\n        }, initialKey, {\n            name: \"AES-CBC\",\n            length: 256\n        }, false, [\n            \"encrypt\",\n            \"decrypt\"\n        ]);\n        const iv = encrypted.slice(0, 16);\n        const data = await this.driver.decrypt({\n            name: \"AES-CBC\",\n            iv: iv\n        }, derivedkey, encrypted.slice(16));\n        // We're just using concat to convert from an array buffer to uint8array\n        return (0,_common_lib_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBuffers)([\n            data\n        ]);\n    }\n} //# sourceMappingURL=webcrypto-driver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@irys+arweave@0.0.2_debug@4.4.0/node_modules/@irys/arweave/build/esm/web/webcrypto-driver.js\n");

/***/ })

};
;