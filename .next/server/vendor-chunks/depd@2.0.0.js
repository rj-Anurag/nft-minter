"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/depd@2.0.0";
exports.ids = ["vendor-chunks/depd@2.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/depd@2.0.0/node_modules/depd/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/.pnpm/depd@2.0.0/node_modules/depd/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * depd\n * Copyright(c) 2014-2018 Douglas Christopher Wilson\n * MIT Licensed\n */ /**\n * Module dependencies.\n */ \nvar relative = (__webpack_require__(/*! path */ \"path\").relative);\n/**\n * Module exports.\n */ module.exports = depd;\n/**\n * Get the path to base files on.\n */ var basePath = process.cwd();\n/**\n * Determine if namespace is contained in the string.\n */ function containsNamespace(str, namespace) {\n    var vals = str.split(/[ ,]+/);\n    var ns = String(namespace).toLowerCase();\n    for(var i = 0; i < vals.length; i++){\n        var val = vals[i];\n        // namespace contained\n        if (val && (val === \"*\" || val.toLowerCase() === ns)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Convert a data descriptor to accessor descriptor.\n */ function convertDataDescriptorToAccessor(obj, prop, message) {\n    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n    var value = descriptor.value;\n    descriptor.get = function getter() {\n        return value;\n    };\n    if (descriptor.writable) {\n        descriptor.set = function setter(val) {\n            return value = val;\n        };\n    }\n    delete descriptor.value;\n    delete descriptor.writable;\n    Object.defineProperty(obj, prop, descriptor);\n    return descriptor;\n}\n/**\n * Create arguments string to keep arity.\n */ function createArgumentsString(arity) {\n    var str = \"\";\n    for(var i = 0; i < arity; i++){\n        str += \", arg\" + i;\n    }\n    return str.substr(2);\n}\n/**\n * Create stack string from stack.\n */ function createStackString(stack) {\n    var str = this.name + \": \" + this.namespace;\n    if (this.message) {\n        str += \" deprecated \" + this.message;\n    }\n    for(var i = 0; i < stack.length; i++){\n        str += \"\\n    at \" + stack[i].toString();\n    }\n    return str;\n}\n/**\n * Create deprecate for namespace in caller.\n */ function depd(namespace) {\n    if (!namespace) {\n        throw new TypeError(\"argument namespace is required\");\n    }\n    var stack = getStack();\n    var site = callSiteLocation(stack[1]);\n    var file = site[0];\n    function deprecate(message) {\n        // call to self as log\n        log.call(deprecate, message);\n    }\n    deprecate._file = file;\n    deprecate._ignored = isignored(namespace);\n    deprecate._namespace = namespace;\n    deprecate._traced = istraced(namespace);\n    deprecate._warned = Object.create(null);\n    deprecate.function = wrapfunction;\n    deprecate.property = wrapproperty;\n    return deprecate;\n}\n/**\n * Determine if event emitter has listeners of a given type.\n *\n * The way to do this check is done three different ways in Node.js >= 0.8\n * so this consolidates them into a minimal set using instance methods.\n *\n * @param {EventEmitter} emitter\n * @param {string} type\n * @returns {boolean}\n * @private\n */ function eehaslisteners(emitter, type) {\n    var count = typeof emitter.listenerCount !== \"function\" ? emitter.listeners(type).length : emitter.listenerCount(type);\n    return count > 0;\n}\n/**\n * Determine if namespace is ignored.\n */ function isignored(namespace) {\n    if (process.noDeprecation) {\n        // --no-deprecation support\n        return true;\n    }\n    var str = process.env.NO_DEPRECATION || \"\";\n    // namespace ignored\n    return containsNamespace(str, namespace);\n}\n/**\n * Determine if namespace is traced.\n */ function istraced(namespace) {\n    if (process.traceDeprecation) {\n        // --trace-deprecation support\n        return true;\n    }\n    var str = process.env.TRACE_DEPRECATION || \"\";\n    // namespace traced\n    return containsNamespace(str, namespace);\n}\n/**\n * Display deprecation message.\n */ function log(message, site) {\n    var haslisteners = eehaslisteners(process, \"deprecation\");\n    // abort early if no destination\n    if (!haslisteners && this._ignored) {\n        return;\n    }\n    var caller;\n    var callFile;\n    var callSite;\n    var depSite;\n    var i = 0;\n    var seen = false;\n    var stack = getStack();\n    var file = this._file;\n    if (site) {\n        // provided site\n        depSite = site;\n        callSite = callSiteLocation(stack[1]);\n        callSite.name = depSite.name;\n        file = callSite[0];\n    } else {\n        // get call site\n        i = 2;\n        depSite = callSiteLocation(stack[i]);\n        callSite = depSite;\n    }\n    // get caller of deprecated thing in relation to file\n    for(; i < stack.length; i++){\n        caller = callSiteLocation(stack[i]);\n        callFile = caller[0];\n        if (callFile === file) {\n            seen = true;\n        } else if (callFile === this._file) {\n            file = this._file;\n        } else if (seen) {\n            break;\n        }\n    }\n    var key = caller ? depSite.join(\":\") + \"__\" + caller.join(\":\") : undefined;\n    if (key !== undefined && key in this._warned) {\n        // already warned\n        return;\n    }\n    this._warned[key] = true;\n    // generate automatic message from call site\n    var msg = message;\n    if (!msg) {\n        msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);\n    }\n    // emit deprecation if listeners exist\n    if (haslisteners) {\n        var err = DeprecationError(this._namespace, msg, stack.slice(i));\n        process.emit(\"deprecation\", err);\n        return;\n    }\n    // format and write message\n    var format = process.stderr.isTTY ? formatColor : formatPlain;\n    var output = format.call(this, msg, caller, stack.slice(i));\n    process.stderr.write(output + \"\\n\", \"utf8\");\n}\n/**\n * Get call site location as array.\n */ function callSiteLocation(callSite) {\n    var file = callSite.getFileName() || \"<anonymous>\";\n    var line = callSite.getLineNumber();\n    var colm = callSite.getColumnNumber();\n    if (callSite.isEval()) {\n        file = callSite.getEvalOrigin() + \", \" + file;\n    }\n    var site = [\n        file,\n        line,\n        colm\n    ];\n    site.callSite = callSite;\n    site.name = callSite.getFunctionName();\n    return site;\n}\n/**\n * Generate a default message from the site.\n */ function defaultMessage(site) {\n    var callSite = site.callSite;\n    var funcName = site.name;\n    // make useful anonymous name\n    if (!funcName) {\n        funcName = \"<anonymous@\" + formatLocation(site) + \">\";\n    }\n    var context = callSite.getThis();\n    var typeName = context && callSite.getTypeName();\n    // ignore useless type name\n    if (typeName === \"Object\") {\n        typeName = undefined;\n    }\n    // make useful type name\n    if (typeName === \"Function\") {\n        typeName = context.name || typeName;\n    }\n    return typeName && callSite.getMethodName() ? typeName + \".\" + funcName : funcName;\n}\n/**\n * Format deprecation message without color.\n */ function formatPlain(msg, caller, stack) {\n    var timestamp = new Date().toUTCString();\n    var formatted = timestamp + \" \" + this._namespace + \" deprecated \" + msg;\n    // add stack trace\n    if (this._traced) {\n        for(var i = 0; i < stack.length; i++){\n            formatted += \"\\n    at \" + stack[i].toString();\n        }\n        return formatted;\n    }\n    if (caller) {\n        formatted += \" at \" + formatLocation(caller);\n    }\n    return formatted;\n}\n/**\n * Format deprecation message with color.\n */ function formatColor(msg, caller, stack) {\n    var formatted = \"\\x1b[36;1m\" + this._namespace + \"\\x1b[22;39m\" + // bold cyan\n    \" \\x1b[33;1mdeprecated\\x1b[22;39m\" + // bold yellow\n    \" \\x1b[0m\" + msg + \"\\x1b[39m\" // reset\n    ;\n    // add stack trace\n    if (this._traced) {\n        for(var i = 0; i < stack.length; i++){\n            formatted += \"\\n    \\x1b[36mat \" + stack[i].toString() + \"\\x1b[39m\" // cyan\n            ;\n        }\n        return formatted;\n    }\n    if (caller) {\n        formatted += \" \\x1b[36m\" + formatLocation(caller) + \"\\x1b[39m\" // cyan\n        ;\n    }\n    return formatted;\n}\n/**\n * Format call site location.\n */ function formatLocation(callSite) {\n    return relative(basePath, callSite[0]) + \":\" + callSite[1] + \":\" + callSite[2];\n}\n/**\n * Get the stack as array of call sites.\n */ function getStack() {\n    var limit = Error.stackTraceLimit;\n    var obj = {};\n    var prep = Error.prepareStackTrace;\n    Error.prepareStackTrace = prepareObjectStackTrace;\n    Error.stackTraceLimit = Math.max(10, limit);\n    // capture the stack\n    Error.captureStackTrace(obj);\n    // slice this function off the top\n    var stack = obj.stack.slice(1);\n    Error.prepareStackTrace = prep;\n    Error.stackTraceLimit = limit;\n    return stack;\n}\n/**\n * Capture call site stack from v8.\n */ function prepareObjectStackTrace(obj, stack) {\n    return stack;\n}\n/**\n * Return a wrapped function in a deprecation message.\n */ function wrapfunction(fn, message) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"argument fn must be a function\");\n    }\n    var args = createArgumentsString(fn.length);\n    var stack = getStack();\n    var site = callSiteLocation(stack[1]);\n    site.name = fn.name;\n    // eslint-disable-next-line no-new-func\n    var deprecatedfn = new Function(\"fn\", \"log\", \"deprecate\", \"message\", \"site\", '\"use strict\"\\n' + \"return function (\" + args + \") {\" + \"log.call(deprecate, message, site)\\n\" + \"return fn.apply(this, arguments)\\n\" + \"}\")(fn, log, this, message, site);\n    return deprecatedfn;\n}\n/**\n * Wrap property in a deprecation message.\n */ function wrapproperty(obj, prop, message) {\n    if (!obj || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        throw new TypeError(\"argument obj must be object\");\n    }\n    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n    if (!descriptor) {\n        throw new TypeError(\"must call property on owner object\");\n    }\n    if (!descriptor.configurable) {\n        throw new TypeError(\"property must be configurable\");\n    }\n    var deprecate = this;\n    var stack = getStack();\n    var site = callSiteLocation(stack[1]);\n    // set site name\n    site.name = prop;\n    // convert data descriptor\n    if (\"value\" in descriptor) {\n        descriptor = convertDataDescriptorToAccessor(obj, prop, message);\n    }\n    var get = descriptor.get;\n    var set = descriptor.set;\n    // wrap getter\n    if (typeof get === \"function\") {\n        descriptor.get = function getter() {\n            log.call(deprecate, message, site);\n            return get.apply(this, arguments);\n        };\n    }\n    // wrap setter\n    if (typeof set === \"function\") {\n        descriptor.set = function setter() {\n            log.call(deprecate, message, site);\n            return set.apply(this, arguments);\n        };\n    }\n    Object.defineProperty(obj, prop, descriptor);\n}\n/**\n * Create DeprecationError for deprecation\n */ function DeprecationError(namespace, message, stack) {\n    var error = new Error();\n    var stackString;\n    Object.defineProperty(error, \"constructor\", {\n        value: DeprecationError\n    });\n    Object.defineProperty(error, \"message\", {\n        configurable: true,\n        enumerable: false,\n        value: message,\n        writable: true\n    });\n    Object.defineProperty(error, \"name\", {\n        enumerable: false,\n        configurable: true,\n        value: \"DeprecationError\",\n        writable: true\n    });\n    Object.defineProperty(error, \"namespace\", {\n        configurable: true,\n        enumerable: false,\n        value: namespace,\n        writable: true\n    });\n    Object.defineProperty(error, \"stack\", {\n        configurable: true,\n        enumerable: false,\n        get: function() {\n            if (stackString !== undefined) {\n                return stackString;\n            }\n            // prepare stack trace\n            return stackString = createStackString.call(this, stack);\n        },\n        set: function setter(val) {\n            stackString = val;\n        }\n    });\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/depd@2.0.0/node_modules/depd/index.js\n");

/***/ })

};
;