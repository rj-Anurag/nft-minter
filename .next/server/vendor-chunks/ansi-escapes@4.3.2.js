"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ansi-escapes@4.3.2";
exports.ids = ["vendor-chunks/ansi-escapes@4.3.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/ansi-escapes@4.3.2/node_modules/ansi-escapes/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/ansi-escapes@4.3.2/node_modules/ansi-escapes/index.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\nconst ansiEscapes = module.exports;\n// TODO: remove this in the next major version\nmodule.exports[\"default\"] = ansiEscapes;\nconst ESC = \"\\x1b[\";\nconst OSC = \"\\x1b]\";\nconst BEL = \"\\x07\";\nconst SEP = \";\";\nconst isTerminalApp = process.env.TERM_PROGRAM === \"Apple_Terminal\";\nansiEscapes.cursorTo = (x, y)=>{\n    if (typeof x !== \"number\") {\n        throw new TypeError(\"The `x` argument is required\");\n    }\n    if (typeof y !== \"number\") {\n        return ESC + (x + 1) + \"G\";\n    }\n    return ESC + (y + 1) + \";\" + (x + 1) + \"H\";\n};\nansiEscapes.cursorMove = (x, y)=>{\n    if (typeof x !== \"number\") {\n        throw new TypeError(\"The `x` argument is required\");\n    }\n    let ret = \"\";\n    if (x < 0) {\n        ret += ESC + -x + \"D\";\n    } else if (x > 0) {\n        ret += ESC + x + \"C\";\n    }\n    if (y < 0) {\n        ret += ESC + -y + \"A\";\n    } else if (y > 0) {\n        ret += ESC + y + \"B\";\n    }\n    return ret;\n};\nansiEscapes.cursorUp = (count = 1)=>ESC + count + \"A\";\nansiEscapes.cursorDown = (count = 1)=>ESC + count + \"B\";\nansiEscapes.cursorForward = (count = 1)=>ESC + count + \"C\";\nansiEscapes.cursorBackward = (count = 1)=>ESC + count + \"D\";\nansiEscapes.cursorLeft = ESC + \"G\";\nansiEscapes.cursorSavePosition = isTerminalApp ? \"\\x1b7\" : ESC + \"s\";\nansiEscapes.cursorRestorePosition = isTerminalApp ? \"\\x1b8\" : ESC + \"u\";\nansiEscapes.cursorGetPosition = ESC + \"6n\";\nansiEscapes.cursorNextLine = ESC + \"E\";\nansiEscapes.cursorPrevLine = ESC + \"F\";\nansiEscapes.cursorHide = ESC + \"?25l\";\nansiEscapes.cursorShow = ESC + \"?25h\";\nansiEscapes.eraseLines = (count)=>{\n    let clear = \"\";\n    for(let i = 0; i < count; i++){\n        clear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : \"\");\n    }\n    if (count) {\n        clear += ansiEscapes.cursorLeft;\n    }\n    return clear;\n};\nansiEscapes.eraseEndLine = ESC + \"K\";\nansiEscapes.eraseStartLine = ESC + \"1K\";\nansiEscapes.eraseLine = ESC + \"2K\";\nansiEscapes.eraseDown = ESC + \"J\";\nansiEscapes.eraseUp = ESC + \"1J\";\nansiEscapes.eraseScreen = ESC + \"2J\";\nansiEscapes.scrollUp = ESC + \"S\";\nansiEscapes.scrollDown = ESC + \"T\";\nansiEscapes.clearScreen = \"\\x1bc\";\nansiEscapes.clearTerminal = process.platform === \"win32\" ? `${ansiEscapes.eraseScreen}${ESC}0f` : // 1. Erases the screen (Only done in case `2` is not supported)\n// 2. Erases the whole screen including scrollback buffer\n// 3. Moves cursor to the top-left position\n// More info: https://www.real-world-systems.com/docs/ANSIcode.html\n`${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;\nansiEscapes.beep = BEL;\nansiEscapes.link = (text, url)=>{\n    return [\n        OSC,\n        \"8\",\n        SEP,\n        SEP,\n        url,\n        BEL,\n        text,\n        OSC,\n        \"8\",\n        SEP,\n        SEP,\n        BEL\n    ].join(\"\");\n};\nansiEscapes.image = (buffer, options = {})=>{\n    let ret = `${OSC}1337;File=inline=1`;\n    if (options.width) {\n        ret += `;width=${options.width}`;\n    }\n    if (options.height) {\n        ret += `;height=${options.height}`;\n    }\n    if (options.preserveAspectRatio === false) {\n        ret += \";preserveAspectRatio=0\";\n    }\n    return ret + \":\" + buffer.toString(\"base64\") + BEL;\n};\nansiEscapes.iTerm = {\n    setCwd: (cwd = process.cwd())=>`${OSC}50;CurrentDir=${cwd}${BEL}`,\n    annotation: (message, options = {})=>{\n        let ret = `${OSC}1337;`;\n        const hasX = typeof options.x !== \"undefined\";\n        const hasY = typeof options.y !== \"undefined\";\n        if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== \"undefined\")) {\n            throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n        }\n        message = message.replace(/\\|/g, \"\");\n        ret += options.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\";\n        if (options.length > 0) {\n            ret += (hasX ? [\n                message,\n                options.length,\n                options.x,\n                options.y\n            ] : [\n                options.length,\n                message\n            ]).join(\"|\");\n        } else {\n            ret += message;\n        }\n        return ret + BEL;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ansi-escapes@4.3.2/node_modules/ansi-escapes/index.js\n");

/***/ })

};
;