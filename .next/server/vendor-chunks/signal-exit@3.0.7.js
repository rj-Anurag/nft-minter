"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/signal-exit@3.0.7";
exports.ids = ["vendor-chunks/signal-exit@3.0.7"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/index.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Note: since nyc uses this module to output coverage, any lines\n// that are in the direct sync flow of nyc's outputCoverage are\n// ignored, since we can never get coverage for them.\n// grab a reference to node's real process object right away\n\nvar process = global.process;\nconst processOk = function(process) {\n    return process && typeof process === \"object\" && typeof process.removeListener === \"function\" && typeof process.emit === \"function\" && typeof process.reallyExit === \"function\" && typeof process.listeners === \"function\" && typeof process.kill === \"function\" && typeof process.pid === \"number\" && typeof process.on === \"function\";\n};\n// some kind of non-node environment, just no-op\n/* istanbul ignore if */ if (!processOk(process)) {\n    module.exports = function() {\n        return function() {};\n    };\n} else {\n    var assert = __webpack_require__(/*! assert */ \"assert\");\n    var signals = __webpack_require__(/*! ./signals.js */ \"(ssr)/./node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js\");\n    var isWin = /^win/i.test(process.platform);\n    var EE = __webpack_require__(/*! events */ \"events\");\n    /* istanbul ignore if */ if (typeof EE !== \"function\") {\n        EE = EE.EventEmitter;\n    }\n    var emitter;\n    if (process.__signal_exit_emitter__) {\n        emitter = process.__signal_exit_emitter__;\n    } else {\n        emitter = process.__signal_exit_emitter__ = new EE();\n        emitter.count = 0;\n        emitter.emitted = {};\n    }\n    // Because this emitter is a global, we have to check to see if a\n    // previous version of this library failed to enable infinite listeners.\n    // I know what you're about to say.  But literally everything about\n    // signal-exit is a compromise with evil.  Get used to it.\n    if (!emitter.infinite) {\n        emitter.setMaxListeners(Infinity);\n        emitter.infinite = true;\n    }\n    module.exports = function(cb, opts) {\n        /* istanbul ignore if */ if (!processOk(global.process)) {\n            return function() {};\n        }\n        assert.equal(typeof cb, \"function\", \"a callback must be provided for exit handler\");\n        if (loaded === false) {\n            load();\n        }\n        var ev = \"exit\";\n        if (opts && opts.alwaysLast) {\n            ev = \"afterexit\";\n        }\n        var remove = function() {\n            emitter.removeListener(ev, cb);\n            if (emitter.listeners(\"exit\").length === 0 && emitter.listeners(\"afterexit\").length === 0) {\n                unload();\n            }\n        };\n        emitter.on(ev, cb);\n        return remove;\n    };\n    var unload = function unload() {\n        if (!loaded || !processOk(global.process)) {\n            return;\n        }\n        loaded = false;\n        signals.forEach(function(sig) {\n            try {\n                process.removeListener(sig, sigListeners[sig]);\n            } catch (er) {}\n        });\n        process.emit = originalProcessEmit;\n        process.reallyExit = originalProcessReallyExit;\n        emitter.count -= 1;\n    };\n    module.exports.unload = unload;\n    var emit = function emit(event, code, signal) {\n        /* istanbul ignore if */ if (emitter.emitted[event]) {\n            return;\n        }\n        emitter.emitted[event] = true;\n        emitter.emit(event, code, signal);\n    };\n    // { <signal>: <listener fn>, ... }\n    var sigListeners = {};\n    signals.forEach(function(sig) {\n        sigListeners[sig] = function listener() {\n            /* istanbul ignore if */ if (!processOk(global.process)) {\n                return;\n            }\n            // If there are no other listeners, an exit is coming!\n            // Simplest way: remove us and then re-send the signal.\n            // We know that this will kill the process, so we can\n            // safely emit now.\n            var listeners = process.listeners(sig);\n            if (listeners.length === emitter.count) {\n                unload();\n                emit(\"exit\", null, sig);\n                /* istanbul ignore next */ emit(\"afterexit\", null, sig);\n                /* istanbul ignore next */ if (isWin && sig === \"SIGHUP\") {\n                    // \"SIGHUP\" throws an `ENOSYS` error on Windows,\n                    // so use a supported signal instead\n                    sig = \"SIGINT\";\n                }\n                /* istanbul ignore next */ process.kill(process.pid, sig);\n            }\n        };\n    });\n    module.exports.signals = function() {\n        return signals;\n    };\n    var loaded = false;\n    var load = function load() {\n        if (loaded || !processOk(global.process)) {\n            return;\n        }\n        loaded = true;\n        // This is the number of onSignalExit's that are in play.\n        // It's important so that we can count the correct number of\n        // listeners on signals, and don't wait for the other one to\n        // handle it instead of us.\n        emitter.count += 1;\n        signals = signals.filter(function(sig) {\n            try {\n                process.on(sig, sigListeners[sig]);\n                return true;\n            } catch (er) {\n                return false;\n            }\n        });\n        process.emit = processEmit;\n        process.reallyExit = processReallyExit;\n    };\n    module.exports.load = load;\n    var originalProcessReallyExit = process.reallyExit;\n    var processReallyExit = function processReallyExit(code) {\n        /* istanbul ignore if */ if (!processOk(global.process)) {\n            return;\n        }\n        process.exitCode = code || /* istanbul ignore next */ 0;\n        emit(\"exit\", process.exitCode, null);\n        /* istanbul ignore next */ emit(\"afterexit\", process.exitCode, null);\n        /* istanbul ignore next */ originalProcessReallyExit.call(process, process.exitCode);\n    };\n    var originalProcessEmit = process.emit;\n    var processEmit = function processEmit(ev, arg) {\n        if (ev === \"exit\" && processOk(global.process)) {\n            /* istanbul ignore else */ if (arg !== undefined) {\n                process.exitCode = arg;\n            }\n            var ret = originalProcessEmit.apply(this, arguments);\n            /* istanbul ignore next */ emit(\"exit\", process.exitCode, null);\n            /* istanbul ignore next */ emit(\"afterexit\", process.exitCode, null);\n            /* istanbul ignore next */ return ret;\n        } else {\n            return originalProcessEmit.apply(this, arguments);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("// This is not the set of all possible signals.\n//\n// It IS, however, the set of all signals that trigger\n// an exit on either Linux or BSD systems.  Linux is a\n// superset of the signal names supported on BSD, and\n// the unknown signals just fail to register, so we can\n// catch that easily enough.\n//\n// Don't bother with SIGKILL.  It's uncatchable, which\n// means that we can't fire any callbacks anyway.\n//\n// If a user does happen to register a handler on a non-\n// fatal signal like SIGWINCH or something, and then\n// exit, it'll end up firing `process.emit('exit')`, so\n// the handler will be fired anyway.\n//\n// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised\n// artificially, inherently leave the process in a\n// state from which it is not safe to try and enter JS\n// listeners.\n\nmodule.exports = [\n    \"SIGABRT\",\n    \"SIGALRM\",\n    \"SIGHUP\",\n    \"SIGINT\",\n    \"SIGTERM\"\n];\nif (process.platform !== \"win32\") {\n    module.exports.push(\"SIGVTALRM\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGUSR2\", \"SIGTRAP\", \"SIGSYS\", \"SIGQUIT\", \"SIGIOT\");\n}\nif (process.platform === \"linux\") {\n    module.exports.push(\"SIGIO\", \"SIGPOLL\", \"SIGPWR\", \"SIGSTKFLT\", \"SIGUNUSED\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vc2lnbmFsLWV4aXRAMy4wLjcvbm9kZV9tb2R1bGVzL3NpZ25hbC1leGl0L3NpZ25hbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsK0NBQStDO0FBQy9DLEVBQUU7QUFDRixzREFBc0Q7QUFDdEQsc0RBQXNEO0FBQ3RELHFEQUFxRDtBQUNyRCx1REFBdUQ7QUFDdkQsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixzREFBc0Q7QUFDdEQsaURBQWlEO0FBQ2pELEVBQUU7QUFDRix3REFBd0Q7QUFDeEQsb0RBQW9EO0FBQ3BELHVEQUF1RDtBQUN2RCxvQ0FBb0M7QUFDcEMsRUFBRTtBQUNGLHNEQUFzRDtBQUN0RCxrREFBa0Q7QUFDbEQsc0RBQXNEO0FBQ3RELGFBQWE7O0FBQ2JBLE9BQU9DLE9BQU8sR0FBRztJQUNmO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVELElBQUlDLFFBQVFDLFFBQVEsS0FBSyxTQUFTO0lBQ2hDSCxPQUFPQyxPQUFPLENBQUNHLElBQUksQ0FDakIsYUFDQSxXQUNBLFdBQ0EsV0FDQSxXQUNBLFVBQ0EsV0FDQTtBQUtKO0FBRUEsSUFBSUYsUUFBUUMsUUFBUSxLQUFLLFNBQVM7SUFDaENILE9BQU9DLE9BQU8sQ0FBQ0csSUFBSSxDQUNqQixTQUNBLFdBQ0EsVUFDQSxhQUNBO0FBRUoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3NpZ25hbC1leGl0QDMuMC43L25vZGVfbW9kdWxlcy9zaWduYWwtZXhpdC9zaWduYWxzLmpzPzE5ZTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpcyBub3QgdGhlIHNldCBvZiBhbGwgcG9zc2libGUgc2lnbmFscy5cbi8vXG4vLyBJdCBJUywgaG93ZXZlciwgdGhlIHNldCBvZiBhbGwgc2lnbmFscyB0aGF0IHRyaWdnZXJcbi8vIGFuIGV4aXQgb24gZWl0aGVyIExpbnV4IG9yIEJTRCBzeXN0ZW1zLiAgTGludXggaXMgYVxuLy8gc3VwZXJzZXQgb2YgdGhlIHNpZ25hbCBuYW1lcyBzdXBwb3J0ZWQgb24gQlNELCBhbmRcbi8vIHRoZSB1bmtub3duIHNpZ25hbHMganVzdCBmYWlsIHRvIHJlZ2lzdGVyLCBzbyB3ZSBjYW5cbi8vIGNhdGNoIHRoYXQgZWFzaWx5IGVub3VnaC5cbi8vXG4vLyBEb24ndCBib3RoZXIgd2l0aCBTSUdLSUxMLiAgSXQncyB1bmNhdGNoYWJsZSwgd2hpY2hcbi8vIG1lYW5zIHRoYXQgd2UgY2FuJ3QgZmlyZSBhbnkgY2FsbGJhY2tzIGFueXdheS5cbi8vXG4vLyBJZiBhIHVzZXIgZG9lcyBoYXBwZW4gdG8gcmVnaXN0ZXIgYSBoYW5kbGVyIG9uIGEgbm9uLVxuLy8gZmF0YWwgc2lnbmFsIGxpa2UgU0lHV0lOQ0ggb3Igc29tZXRoaW5nLCBhbmQgdGhlblxuLy8gZXhpdCwgaXQnbGwgZW5kIHVwIGZpcmluZyBgcHJvY2Vzcy5lbWl0KCdleGl0JylgLCBzb1xuLy8gdGhlIGhhbmRsZXIgd2lsbCBiZSBmaXJlZCBhbnl3YXkuXG4vL1xuLy8gU0lHQlVTLCBTSUdGUEUsIFNJR1NFR1YgYW5kIFNJR0lMTCwgd2hlbiBub3QgcmFpc2VkXG4vLyBhcnRpZmljaWFsbHksIGluaGVyZW50bHkgbGVhdmUgdGhlIHByb2Nlc3MgaW4gYVxuLy8gc3RhdGUgZnJvbSB3aGljaCBpdCBpcyBub3Qgc2FmZSB0byB0cnkgYW5kIGVudGVyIEpTXG4vLyBsaXN0ZW5lcnMuXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ1NJR0FCUlQnLFxuICAnU0lHQUxSTScsXG4gICdTSUdIVVAnLFxuICAnU0lHSU5UJyxcbiAgJ1NJR1RFUk0nXG5dXG5cbmlmIChwcm9jZXNzLnBsYXRmb3JtICE9PSAnd2luMzInKSB7XG4gIG1vZHVsZS5leHBvcnRzLnB1c2goXG4gICAgJ1NJR1ZUQUxSTScsXG4gICAgJ1NJR1hDUFUnLFxuICAgICdTSUdYRlNaJyxcbiAgICAnU0lHVVNSMicsXG4gICAgJ1NJR1RSQVAnLFxuICAgICdTSUdTWVMnLFxuICAgICdTSUdRVUlUJyxcbiAgICAnU0lHSU9UJ1xuICAgIC8vIHNob3VsZCBkZXRlY3QgcHJvZmlsZXIgYW5kIGVuYWJsZS9kaXNhYmxlIGFjY29yZGluZ2x5LlxuICAgIC8vIHNlZSAjMjFcbiAgICAvLyAnU0lHUFJPRidcbiAgKVxufVxuXG5pZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4Jykge1xuICBtb2R1bGUuZXhwb3J0cy5wdXNoKFxuICAgICdTSUdJTycsXG4gICAgJ1NJR1BPTEwnLFxuICAgICdTSUdQV1InLFxuICAgICdTSUdTVEtGTFQnLFxuICAgICdTSUdVTlVTRUQnXG4gIClcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicHJvY2VzcyIsInBsYXRmb3JtIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js\n");

/***/ })

};
;