/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/qrcode@1.5.4";
exports.ids = ["vendor-chunks/qrcode@1.5.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/browser.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/browser.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const canPromise = __webpack_require__(/*! ./can-promise */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/can-promise.js\");\nconst QRCode = __webpack_require__(/*! ./core/qrcode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/qrcode.js\");\nconst CanvasRenderer = __webpack_require__(/*! ./renderer/canvas */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/canvas.js\");\nconst SvgRenderer = __webpack_require__(/*! ./renderer/svg-tag.js */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg-tag.js\");\nfunction renderCanvas(renderFunc, canvas, text, opts, cb) {\n    const args = [].slice.call(arguments, 1);\n    const argsNum = args.length;\n    const isLastArgCb = typeof args[argsNum - 1] === \"function\";\n    if (!isLastArgCb && !canPromise()) {\n        throw new Error(\"Callback required as last argument\");\n    }\n    if (isLastArgCb) {\n        if (argsNum < 2) {\n            throw new Error(\"Too few arguments provided\");\n        }\n        if (argsNum === 2) {\n            cb = text;\n            text = canvas;\n            canvas = opts = undefined;\n        } else if (argsNum === 3) {\n            if (canvas.getContext && typeof cb === \"undefined\") {\n                cb = opts;\n                opts = undefined;\n            } else {\n                cb = opts;\n                opts = text;\n                text = canvas;\n                canvas = undefined;\n            }\n        }\n    } else {\n        if (argsNum < 1) {\n            throw new Error(\"Too few arguments provided\");\n        }\n        if (argsNum === 1) {\n            text = canvas;\n            canvas = opts = undefined;\n        } else if (argsNum === 2 && !canvas.getContext) {\n            opts = text;\n            text = canvas;\n            canvas = undefined;\n        }\n        return new Promise(function(resolve, reject) {\n            try {\n                const data = QRCode.create(text, opts);\n                resolve(renderFunc(data, canvas, opts));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n    try {\n        const data = QRCode.create(text, opts);\n        cb(null, renderFunc(data, canvas, opts));\n    } catch (e) {\n        cb(e);\n    }\n}\nexports.create = QRCode.create;\nexports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);\nexports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);\n// only svg for now.\nexports.toString = renderCanvas.bind(null, function(data, _, opts) {\n    return SvgRenderer.render(data, opts);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFM0IsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUUsaUJBQWlCRixtQkFBT0EsQ0FBQztBQUMvQixNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQztBQUU1QixTQUFTSSxhQUFjQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLEVBQUU7SUFDdkQsTUFBTUMsT0FBTyxFQUFFLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXO0lBQ3RDLE1BQU1DLFVBQVVKLEtBQUtLLE1BQU07SUFDM0IsTUFBTUMsY0FBYyxPQUFPTixJQUFJLENBQUNJLFVBQVUsRUFBRSxLQUFLO0lBRWpELElBQUksQ0FBQ0UsZUFBZSxDQUFDakIsY0FBYztRQUNqQyxNQUFNLElBQUlrQixNQUFNO0lBQ2xCO0lBRUEsSUFBSUQsYUFBYTtRQUNmLElBQUlGLFVBQVUsR0FBRztZQUNmLE1BQU0sSUFBSUcsTUFBTTtRQUNsQjtRQUVBLElBQUlILFlBQVksR0FBRztZQUNqQkwsS0FBS0Y7WUFDTEEsT0FBT0Q7WUFDUEEsU0FBU0UsT0FBT1U7UUFDbEIsT0FBTyxJQUFJSixZQUFZLEdBQUc7WUFDeEIsSUFBSVIsT0FBT2EsVUFBVSxJQUFJLE9BQU9WLE9BQU8sYUFBYTtnQkFDbERBLEtBQUtEO2dCQUNMQSxPQUFPVTtZQUNULE9BQU87Z0JBQ0xULEtBQUtEO2dCQUNMQSxPQUFPRDtnQkFDUEEsT0FBT0Q7Z0JBQ1BBLFNBQVNZO1lBQ1g7UUFDRjtJQUNGLE9BQU87UUFDTCxJQUFJSixVQUFVLEdBQUc7WUFDZixNQUFNLElBQUlHLE1BQU07UUFDbEI7UUFFQSxJQUFJSCxZQUFZLEdBQUc7WUFDakJQLE9BQU9EO1lBQ1BBLFNBQVNFLE9BQU9VO1FBQ2xCLE9BQU8sSUFBSUosWUFBWSxLQUFLLENBQUNSLE9BQU9hLFVBQVUsRUFBRTtZQUM5Q1gsT0FBT0Q7WUFDUEEsT0FBT0Q7WUFDUEEsU0FBU1k7UUFDWDtRQUVBLE9BQU8sSUFBSUUsUUFBUSxTQUFVQyxPQUFPLEVBQUVDLE1BQU07WUFDMUMsSUFBSTtnQkFDRixNQUFNQyxPQUFPdEIsT0FBT3VCLE1BQU0sQ0FBQ2pCLE1BQU1DO2dCQUNqQ2EsUUFBUWhCLFdBQVdrQixNQUFNakIsUUFBUUU7WUFDbkMsRUFBRSxPQUFPaUIsR0FBRztnQkFDVkgsT0FBT0c7WUFDVDtRQUNGO0lBQ0Y7SUFFQSxJQUFJO1FBQ0YsTUFBTUYsT0FBT3RCLE9BQU91QixNQUFNLENBQUNqQixNQUFNQztRQUNqQ0MsR0FBRyxNQUFNSixXQUFXa0IsTUFBTWpCLFFBQVFFO0lBQ3BDLEVBQUUsT0FBT2lCLEdBQUc7UUFDVmhCLEdBQUdnQjtJQUNMO0FBQ0Y7QUFFQUMsY0FBYyxHQUFHekIsT0FBT3VCLE1BQU07QUFDOUJFLGdCQUFnQixHQUFHdEIsYUFBYXdCLElBQUksQ0FBQyxNQUFNMUIsZUFBZTJCLE1BQU07QUFDaEVILGlCQUFpQixHQUFHdEIsYUFBYXdCLElBQUksQ0FBQyxNQUFNMUIsZUFBZTZCLGVBQWU7QUFFMUUsb0JBQW9CO0FBQ3BCTCxnQkFBZ0IsR0FBR3RCLGFBQWF3QixJQUFJLENBQUMsTUFBTSxTQUFVTCxJQUFJLEVBQUVVLENBQUMsRUFBRXpCLElBQUk7SUFDaEUsT0FBT0wsWUFBWTBCLE1BQU0sQ0FBQ04sTUFBTWY7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9icm93c2VyLmpzP2I2MjYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBjYW5Qcm9taXNlID0gcmVxdWlyZSgnLi9jYW4tcHJvbWlzZScpXG5cbmNvbnN0IFFSQ29kZSA9IHJlcXVpcmUoJy4vY29yZS9xcmNvZGUnKVxuY29uc3QgQ2FudmFzUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL2NhbnZhcycpXG5jb25zdCBTdmdSZW5kZXJlciA9IHJlcXVpcmUoJy4vcmVuZGVyZXIvc3ZnLXRhZy5qcycpXG5cbmZ1bmN0aW9uIHJlbmRlckNhbnZhcyAocmVuZGVyRnVuYywgY2FudmFzLCB0ZXh0LCBvcHRzLCBjYikge1xuICBjb25zdCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gIGNvbnN0IGFyZ3NOdW0gPSBhcmdzLmxlbmd0aFxuICBjb25zdCBpc0xhc3RBcmdDYiA9IHR5cGVvZiBhcmdzW2FyZ3NOdW0gLSAxXSA9PT0gJ2Z1bmN0aW9uJ1xuXG4gIGlmICghaXNMYXN0QXJnQ2IgJiYgIWNhblByb21pc2UoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgcmVxdWlyZWQgYXMgbGFzdCBhcmd1bWVudCcpXG4gIH1cblxuICBpZiAoaXNMYXN0QXJnQ2IpIHtcbiAgICBpZiAoYXJnc051bSA8IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVG9vIGZldyBhcmd1bWVudHMgcHJvdmlkZWQnKVxuICAgIH1cblxuICAgIGlmIChhcmdzTnVtID09PSAyKSB7XG4gICAgICBjYiA9IHRleHRcbiAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IG9wdHMgPSB1bmRlZmluZWRcbiAgICB9IGVsc2UgaWYgKGFyZ3NOdW0gPT09IDMpIHtcbiAgICAgIGlmIChjYW52YXMuZ2V0Q29udGV4dCAmJiB0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNiID0gb3B0c1xuICAgICAgICBvcHRzID0gdW5kZWZpbmVkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYiA9IG9wdHNcbiAgICAgICAgb3B0cyA9IHRleHRcbiAgICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGFyZ3NOdW0gPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBmZXcgYXJndW1lbnRzIHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoYXJnc051bSA9PT0gMSkge1xuICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgY2FudmFzID0gb3B0cyA9IHVuZGVmaW5lZFxuICAgIH0gZWxzZSBpZiAoYXJnc051bSA9PT0gMiAmJiAhY2FudmFzLmdldENvbnRleHQpIHtcbiAgICAgIG9wdHMgPSB0ZXh0XG4gICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IFFSQ29kZS5jcmVhdGUodGV4dCwgb3B0cylcbiAgICAgICAgcmVzb2x2ZShyZW5kZXJGdW5jKGRhdGEsIGNhbnZhcywgb3B0cykpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBRUkNvZGUuY3JlYXRlKHRleHQsIG9wdHMpXG4gICAgY2IobnVsbCwgcmVuZGVyRnVuYyhkYXRhLCBjYW52YXMsIG9wdHMpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2IoZSlcbiAgfVxufVxuXG5leHBvcnRzLmNyZWF0ZSA9IFFSQ29kZS5jcmVhdGVcbmV4cG9ydHMudG9DYW52YXMgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBDYW52YXNSZW5kZXJlci5yZW5kZXIpXG5leHBvcnRzLnRvRGF0YVVSTCA9IHJlbmRlckNhbnZhcy5iaW5kKG51bGwsIENhbnZhc1JlbmRlcmVyLnJlbmRlclRvRGF0YVVSTClcblxuLy8gb25seSBzdmcgZm9yIG5vdy5cbmV4cG9ydHMudG9TdHJpbmcgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBmdW5jdGlvbiAoZGF0YSwgXywgb3B0cykge1xuICByZXR1cm4gU3ZnUmVuZGVyZXIucmVuZGVyKGRhdGEsIG9wdHMpXG59KVxuIl0sIm5hbWVzIjpbImNhblByb21pc2UiLCJyZXF1aXJlIiwiUVJDb2RlIiwiQ2FudmFzUmVuZGVyZXIiLCJTdmdSZW5kZXJlciIsInJlbmRlckNhbnZhcyIsInJlbmRlckZ1bmMiLCJjYW52YXMiLCJ0ZXh0Iiwib3B0cyIsImNiIiwiYXJncyIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImFyZ3NOdW0iLCJsZW5ndGgiLCJpc0xhc3RBcmdDYiIsIkVycm9yIiwidW5kZWZpbmVkIiwiZ2V0Q29udGV4dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGF0YSIsImNyZWF0ZSIsImUiLCJleHBvcnRzIiwidG9DYW52YXMiLCJiaW5kIiwicmVuZGVyIiwidG9EYXRhVVJMIiwicmVuZGVyVG9EYXRhVVJMIiwidG9TdHJpbmciLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/can-promise.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/can-promise.js ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
eval("// can-promise has a crash in some versions of react native that dont have\n// standard global objects\n// https://github.com/soldair/node-qrcode/issues/157\n\nmodule.exports = function() {\n    return typeof Promise === \"function\" && Promise.prototype && Promise.prototype.then;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2Nhbi1wcm9taXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUMxRSwwQkFBMEI7QUFDMUIsb0RBQW9EOztBQUVwREEsT0FBT0MsT0FBTyxHQUFHO0lBQ2YsT0FBTyxPQUFPQyxZQUFZLGNBQWNBLFFBQVFDLFNBQVMsSUFBSUQsUUFBUUMsU0FBUyxDQUFDQyxJQUFJO0FBQ3JGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY2FuLXByb21pc2UuanM/ZDE5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjYW4tcHJvbWlzZSBoYXMgYSBjcmFzaCBpbiBzb21lIHZlcnNpb25zIG9mIHJlYWN0IG5hdGl2ZSB0aGF0IGRvbnQgaGF2ZVxuLy8gc3RhbmRhcmQgZ2xvYmFsIG9iamVjdHNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2xkYWlyL25vZGUtcXJjb2RlL2lzc3Vlcy8xNTdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgUHJvbWlzZSA9PT0gJ2Z1bmN0aW9uJyAmJiBQcm9taXNlLnByb3RvdHlwZSAmJiBQcm9taXNlLnByb3RvdHlwZS50aGVuXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlByb21pc2UiLCJwcm90b3R5cGUiLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/can-promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/alignment-pattern.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/alignment-pattern.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */ const getSymbolSize = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js\").getSymbolSize);\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */ exports.getRowColCoords = function getRowColCoords(version) {\n    if (version === 1) return [];\n    const posCount = Math.floor(version / 7) + 2;\n    const size = getSymbolSize(version);\n    const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;\n    const positions = [\n        size - 7\n    ] // Last coord is always (size - 7)\n    ;\n    for(let i = 1; i < posCount - 1; i++){\n        positions[i] = positions[i - 1] - intervals;\n    }\n    positions.push(6) // First coord is always 6\n    ;\n    return positions.reverse();\n};\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * let pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */ exports.getPositions = function getPositions(version) {\n    const coords = [];\n    const pos = exports.getRowColCoords(version);\n    const posLength = pos.length;\n    for(let i = 0; i < posLength; i++){\n        for(let j = 0; j < posLength; j++){\n            // Skip if position is occupied by finder patterns\n            if (i === 0 && j === 0 || // top-left\n            i === 0 && j === posLength - 1 || // bottom-left\n            i === posLength - 1 && j === 0) {\n                continue;\n            }\n            coords.push([\n                pos[i],\n                pos[j]\n            ]);\n        }\n    }\n    return coords;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxpZ25tZW50LXBhdHRlcm4uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0NBUUMsR0FFRCxNQUFNQSxnQkFBZ0JDLG1JQUFnQztBQUV0RDs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0RDLHVCQUF1QixHQUFHLFNBQVNDLGdCQUFpQkMsT0FBTztJQUN6RCxJQUFJQSxZQUFZLEdBQUcsT0FBTyxFQUFFO0lBRTVCLE1BQU1DLFdBQVdDLEtBQUtDLEtBQUssQ0FBQ0gsVUFBVSxLQUFLO0lBQzNDLE1BQU1JLE9BQU9SLGNBQWNJO0lBQzNCLE1BQU1LLFlBQVlELFNBQVMsTUFBTSxLQUFLRixLQUFLSSxJQUFJLENBQUMsQ0FBQ0YsT0FBTyxFQUFDLElBQU0sS0FBSUgsV0FBVyxNQUFNO0lBQ3BGLE1BQU1NLFlBQVk7UUFBQ0gsT0FBTztLQUFFLENBQUMsa0NBQWtDOztJQUUvRCxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSVAsV0FBVyxHQUFHTyxJQUFLO1FBQ3JDRCxTQUFTLENBQUNDLEVBQUUsR0FBR0QsU0FBUyxDQUFDQyxJQUFJLEVBQUUsR0FBR0g7SUFDcEM7SUFFQUUsVUFBVUUsSUFBSSxDQUFDLEdBQUcsMEJBQTBCOztJQUU1QyxPQUFPRixVQUFVRyxPQUFPO0FBQzFCO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FtQkMsR0FDRFosb0JBQW9CLEdBQUcsU0FBU2EsYUFBY1gsT0FBTztJQUNuRCxNQUFNWSxTQUFTLEVBQUU7SUFDakIsTUFBTUMsTUFBTWYsUUFBUUMsZUFBZSxDQUFDQztJQUNwQyxNQUFNYyxZQUFZRCxJQUFJRSxNQUFNO0lBRTVCLElBQUssSUFBSVAsSUFBSSxHQUFHQSxJQUFJTSxXQUFXTixJQUFLO1FBQ2xDLElBQUssSUFBSVEsSUFBSSxHQUFHQSxJQUFJRixXQUFXRSxJQUFLO1lBQ2xDLGtEQUFrRDtZQUNsRCxJQUFJLE1BQU8sS0FBS0EsTUFBTSxLQUFNLFdBQVc7WUFDbENSLE1BQU0sS0FBS1EsTUFBTUYsWUFBWSxLQUFNLGNBQWM7WUFDakROLE1BQU1NLFlBQVksS0FBS0UsTUFBTSxHQUFJO2dCQUNwQztZQUNGO1lBRUFKLE9BQU9ILElBQUksQ0FBQztnQkFBQ0ksR0FBRyxDQUFDTCxFQUFFO2dCQUFFSyxHQUFHLENBQUNHLEVBQUU7YUFBQztRQUM5QjtJQUNGO0lBRUEsT0FBT0o7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxpZ25tZW50LXBhdHRlcm4uanM/MWQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFsaWdubWVudCBwYXR0ZXJuIGFyZSBmaXhlZCByZWZlcmVuY2UgcGF0dGVybiBpbiBkZWZpbmVkIHBvc2l0aW9uc1xuICogaW4gYSBtYXRyaXggc3ltYm9sb2d5LCB3aGljaCBlbmFibGVzIHRoZSBkZWNvZGUgc29mdHdhcmUgdG8gcmUtc3luY2hyb25pc2VcbiAqIHRoZSBjb29yZGluYXRlIG1hcHBpbmcgb2YgdGhlIGltYWdlIG1vZHVsZXMgaW4gdGhlIGV2ZW50IG9mIG1vZGVyYXRlIGFtb3VudHNcbiAqIG9mIGRpc3RvcnRpb24gb2YgdGhlIGltYWdlLlxuICpcbiAqIEFsaWdubWVudCBwYXR0ZXJucyBhcmUgcHJlc2VudCBvbmx5IGluIFFSIENvZGUgc3ltYm9scyBvZiB2ZXJzaW9uIDIgb3IgbGFyZ2VyXG4gKiBhbmQgdGhlaXIgbnVtYmVyIGRlcGVuZHMgb24gdGhlIHN5bWJvbCB2ZXJzaW9uLlxuICovXG5cbmNvbnN0IGdldFN5bWJvbFNpemUgPSByZXF1aXJlKCcuL3V0aWxzJykuZ2V0U3ltYm9sU2l6ZVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgcm93L2NvbHVtbiBjb29yZGluYXRlcyBvZiB0aGUgY2VudGVyIG1vZHVsZSBvZiBlYWNoIGFsaWdubWVudCBwYXR0ZXJuXG4gKiBmb3IgdGhlIHNwZWNpZmllZCBRUiBDb2RlIHZlcnNpb24uXG4gKlxuICogVGhlIGFsaWdubWVudCBwYXR0ZXJucyBhcmUgcG9zaXRpb25lZCBzeW1tZXRyaWNhbGx5IG9uIGVpdGhlciBzaWRlIG9mIHRoZSBkaWFnb25hbFxuICogcnVubmluZyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIHN5bWJvbCB0byB0aGUgYm90dG9tIHJpZ2h0IGNvcm5lci5cbiAqXG4gKiBTaW5jZSBwb3NpdGlvbnMgYXJlIHNpbW1ldHJpY2FsIG9ubHkgaGFsZiBvZiB0aGUgY29vcmRpbmF0ZXMgYXJlIHJldHVybmVkLlxuICogRWFjaCBpdGVtIG9mIHRoZSBhcnJheSB3aWxsIHJlcHJlc2VudCBpbiB0dXJuIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGUuXG4gKiBAc2VlIHtAbGluayBnZXRQb3NpdGlvbnN9XG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIGNvb3JkaW5hdGVcbiAqL1xuZXhwb3J0cy5nZXRSb3dDb2xDb29yZHMgPSBmdW5jdGlvbiBnZXRSb3dDb2xDb29yZHMgKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDEpIHJldHVybiBbXVxuXG4gIGNvbnN0IHBvc0NvdW50ID0gTWF0aC5mbG9vcih2ZXJzaW9uIC8gNykgKyAyXG4gIGNvbnN0IHNpemUgPSBnZXRTeW1ib2xTaXplKHZlcnNpb24pXG4gIGNvbnN0IGludGVydmFscyA9IHNpemUgPT09IDE0NSA/IDI2IDogTWF0aC5jZWlsKChzaXplIC0gMTMpIC8gKDIgKiBwb3NDb3VudCAtIDIpKSAqIDJcbiAgY29uc3QgcG9zaXRpb25zID0gW3NpemUgLSA3XSAvLyBMYXN0IGNvb3JkIGlzIGFsd2F5cyAoc2l6ZSAtIDcpXG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb3NDb3VudCAtIDE7IGkrKykge1xuICAgIHBvc2l0aW9uc1tpXSA9IHBvc2l0aW9uc1tpIC0gMV0gLSBpbnRlcnZhbHNcbiAgfVxuXG4gIHBvc2l0aW9ucy5wdXNoKDYpIC8vIEZpcnN0IGNvb3JkIGlzIGFsd2F5cyA2XG5cbiAgcmV0dXJuIHBvc2l0aW9ucy5yZXZlcnNlKClcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHBvc2l0aW9ucyBvZiBlYWNoIGFsaWdubWVudCBwYXR0ZXJuLlxuICogRWFjaCBhcnJheSdzIGVsZW1lbnQgcmVwcmVzZW50IHRoZSBjZW50ZXIgcG9pbnQgb2YgdGhlIHBhdHRlcm4gYXMgKHgsIHkpIGNvb3JkaW5hdGVzXG4gKlxuICogQ29vcmRpbmF0ZXMgYXJlIGNhbGN1bGF0ZWQgZXhwYW5kaW5nIHRoZSByb3cvY29sdW1uIGNvb3JkaW5hdGVzIHJldHVybmVkIGJ5IHtAbGluayBnZXRSb3dDb2xDb29yZHN9XG4gKiBhbmQgZmlsdGVyaW5nIG91dCB0aGUgaXRlbXMgdGhhdCBvdmVybGFwcyB3aXRoIGZpbmRlciBwYXR0ZXJuXG4gKlxuICogQGV4YW1wbGVcbiAqIEZvciBhIFZlcnNpb24gNyBzeW1ib2wge0BsaW5rIGdldFJvd0NvbENvb3Jkc30gcmV0dXJucyB2YWx1ZXMgNiwgMjIgYW5kIDM4LlxuICogVGhlIGFsaWdubWVudCBwYXR0ZXJucywgdGhlcmVmb3JlLCBhcmUgdG8gYmUgY2VudGVyZWQgb24gKHJvdywgY29sdW1uKVxuICogcG9zaXRpb25zICg2LDIyKSwgKDIyLDYpLCAoMjIsMjIpLCAoMjIsMzgpLCAoMzgsMjIpLCAoMzgsMzgpLlxuICogTm90ZSB0aGF0IHRoZSBjb29yZGluYXRlcyAoNiw2KSwgKDYsMzgpLCAoMzgsNikgYXJlIG9jY3VwaWVkIGJ5IGZpbmRlciBwYXR0ZXJuc1xuICogYW5kIGFyZSBub3QgdGhlcmVmb3JlIHVzZWQgZm9yIGFsaWdubWVudCBwYXR0ZXJucy5cbiAqXG4gKiBsZXQgcG9zID0gZ2V0UG9zaXRpb25zKDcpXG4gKiAvLyBbWzYsMjJdLCBbMjIsNl0sIFsyMiwyMl0sIFsyMiwzOF0sIFszOCwyMl0sIFszOCwzOF1dXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIGNvb3JkaW5hdGVzXG4gKi9cbmV4cG9ydHMuZ2V0UG9zaXRpb25zID0gZnVuY3Rpb24gZ2V0UG9zaXRpb25zICh2ZXJzaW9uKSB7XG4gIGNvbnN0IGNvb3JkcyA9IFtdXG4gIGNvbnN0IHBvcyA9IGV4cG9ydHMuZ2V0Um93Q29sQ29vcmRzKHZlcnNpb24pXG4gIGNvbnN0IHBvc0xlbmd0aCA9IHBvcy5sZW5ndGhcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc0xlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwb3NMZW5ndGg7IGorKykge1xuICAgICAgLy8gU2tpcCBpZiBwb3NpdGlvbiBpcyBvY2N1cGllZCBieSBmaW5kZXIgcGF0dGVybnNcbiAgICAgIGlmICgoaSA9PT0gMCAmJiBqID09PSAwKSB8fCAvLyB0b3AtbGVmdFxuICAgICAgICAgIChpID09PSAwICYmIGogPT09IHBvc0xlbmd0aCAtIDEpIHx8IC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgICAgKGkgPT09IHBvc0xlbmd0aCAtIDEgJiYgaiA9PT0gMCkpIHsgLy8gdG9wLXJpZ2h0XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvb3Jkcy5wdXNoKFtwb3NbaV0sIHBvc1tqXV0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvb3Jkc1xufVxuIl0sIm5hbWVzIjpbImdldFN5bWJvbFNpemUiLCJyZXF1aXJlIiwiZXhwb3J0cyIsImdldFJvd0NvbENvb3JkcyIsInZlcnNpb24iLCJwb3NDb3VudCIsIk1hdGgiLCJmbG9vciIsInNpemUiLCJpbnRlcnZhbHMiLCJjZWlsIiwicG9zaXRpb25zIiwiaSIsInB1c2giLCJyZXZlcnNlIiwiZ2V0UG9zaXRpb25zIiwiY29vcmRzIiwicG9zIiwicG9zTGVuZ3RoIiwibGVuZ3RoIiwiaiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/alignment-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/alphanumeric-data.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/alphanumeric-data.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js\");\n/**\n * Array of characters available in alphanumeric mode\n *\n * As per QR Code specification, to each character\n * is assigned a value from 0 to 44 which in this case coincides\n * with the array index\n *\n * @type {Array}\n */ const ALPHA_NUM_CHARS = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \" \",\n    \"$\",\n    \"%\",\n    \"*\",\n    \"+\",\n    \"-\",\n    \".\",\n    \"/\",\n    \":\"\n];\nfunction AlphanumericData(data) {\n    this.mode = Mode.ALPHANUMERIC;\n    this.data = data;\n}\nAlphanumericData.getBitsLength = function getBitsLength(length) {\n    return 11 * Math.floor(length / 2) + 6 * (length % 2);\n};\nAlphanumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nAlphanumericData.prototype.getBitsLength = function getBitsLength() {\n    return AlphanumericData.getBitsLength(this.data.length);\n};\nAlphanumericData.prototype.write = function write(bitBuffer) {\n    let i;\n    // Input data characters are divided into groups of two characters\n    // and encoded as 11-bit binary codes.\n    for(i = 0; i + 2 <= this.data.length; i += 2){\n        // The character value of the first character is multiplied by 45\n        let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;\n        // The character value of the second digit is added to the product\n        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);\n        // The sum is then stored as 11-bit binary number\n        bitBuffer.put(value, 11);\n    }\n    // If the number of input data characters is not a multiple of two,\n    // the character value of the final character is encoded as a 6-bit binary number.\n    if (this.data.length % 2) {\n        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);\n    }\n};\nmodule.exports = AlphanumericData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxwaGFudW1lcmljLWRhdGEuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBRXJCOzs7Ozs7OztDQVFDLEdBQ0QsTUFBTUMsa0JBQWtCO0lBQ3RCO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQzdDO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQzVEO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQzVEO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztDQUN6QztBQUVELFNBQVNDLGlCQUFrQkMsSUFBSTtJQUM3QixJQUFJLENBQUNDLElBQUksR0FBR0wsS0FBS00sWUFBWTtJQUM3QixJQUFJLENBQUNGLElBQUksR0FBR0E7QUFDZDtBQUVBRCxpQkFBaUJJLGFBQWEsR0FBRyxTQUFTQSxjQUFlQyxNQUFNO0lBQzdELE9BQU8sS0FBS0MsS0FBS0MsS0FBSyxDQUFDRixTQUFTLEtBQUssSUFBS0EsQ0FBQUEsU0FBUztBQUNyRDtBQUVBTCxpQkFBaUJRLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVNBO0lBQzlDLE9BQU8sSUFBSSxDQUFDUixJQUFJLENBQUNJLE1BQU07QUFDekI7QUFFQUwsaUJBQWlCUSxTQUFTLENBQUNKLGFBQWEsR0FBRyxTQUFTQTtJQUNsRCxPQUFPSixpQkFBaUJJLGFBQWEsQ0FBQyxJQUFJLENBQUNILElBQUksQ0FBQ0ksTUFBTTtBQUN4RDtBQUVBTCxpQkFBaUJRLFNBQVMsQ0FBQ0UsS0FBSyxHQUFHLFNBQVNBLE1BQU9DLFNBQVM7SUFDMUQsSUFBSUM7SUFFSixrRUFBa0U7SUFDbEUsc0NBQXNDO0lBQ3RDLElBQUtBLElBQUksR0FBR0EsSUFBSSxLQUFLLElBQUksQ0FBQ1gsSUFBSSxDQUFDSSxNQUFNLEVBQUVPLEtBQUssRUFBRztRQUM3QyxpRUFBaUU7UUFDakUsSUFBSUMsUUFBUWQsZ0JBQWdCZSxPQUFPLENBQUMsSUFBSSxDQUFDYixJQUFJLENBQUNXLEVBQUUsSUFBSTtRQUVwRCxrRUFBa0U7UUFDbEVDLFNBQVNkLGdCQUFnQmUsT0FBTyxDQUFDLElBQUksQ0FBQ2IsSUFBSSxDQUFDVyxJQUFJLEVBQUU7UUFFakQsaURBQWlEO1FBQ2pERCxVQUFVSSxHQUFHLENBQUNGLE9BQU87SUFDdkI7SUFFQSxtRUFBbUU7SUFDbkUsa0ZBQWtGO0lBQ2xGLElBQUksSUFBSSxDQUFDWixJQUFJLENBQUNJLE1BQU0sR0FBRyxHQUFHO1FBQ3hCTSxVQUFVSSxHQUFHLENBQUNoQixnQkFBZ0JlLE9BQU8sQ0FBQyxJQUFJLENBQUNiLElBQUksQ0FBQ1csRUFBRSxHQUFHO0lBQ3ZEO0FBQ0Y7QUFFQUksT0FBT0MsT0FBTyxHQUFHakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2FscGhhbnVtZXJpYy1kYXRhLmpzP2Q2ODUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5cbi8qKlxuICogQXJyYXkgb2YgY2hhcmFjdGVycyBhdmFpbGFibGUgaW4gYWxwaGFudW1lcmljIG1vZGVcbiAqXG4gKiBBcyBwZXIgUVIgQ29kZSBzcGVjaWZpY2F0aW9uLCB0byBlYWNoIGNoYXJhY3RlclxuICogaXMgYXNzaWduZWQgYSB2YWx1ZSBmcm9tIDAgdG8gNDQgd2hpY2ggaW4gdGhpcyBjYXNlIGNvaW5jaWRlc1xuICogd2l0aCB0aGUgYXJyYXkgaW5kZXhcbiAqXG4gKiBAdHlwZSB7QXJyYXl9XG4gKi9cbmNvbnN0IEFMUEhBX05VTV9DSEFSUyA9IFtcbiAgJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLFxuICAnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsXG4gICdOJywgJ08nLCAnUCcsICdRJywgJ1InLCAnUycsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJyxcbiAgJyAnLCAnJCcsICclJywgJyonLCAnKycsICctJywgJy4nLCAnLycsICc6J1xuXVxuXG5mdW5jdGlvbiBBbHBoYW51bWVyaWNEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuQUxQSEFOVU1FUklDXG4gIHRoaXMuZGF0YSA9IGRhdGFcbn1cblxuQWxwaGFudW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiAxMSAqIE1hdGguZmxvb3IobGVuZ3RoIC8gMikgKyA2ICogKGxlbmd0aCAlIDIpXG59XG5cbkFscGhhbnVtZXJpY0RhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbkFscGhhbnVtZXJpY0RhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIEFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChiaXRCdWZmZXIpIHtcbiAgbGV0IGlcblxuICAvLyBJbnB1dCBkYXRhIGNoYXJhY3RlcnMgYXJlIGRpdmlkZWQgaW50byBncm91cHMgb2YgdHdvIGNoYXJhY3RlcnNcbiAgLy8gYW5kIGVuY29kZWQgYXMgMTEtYml0IGJpbmFyeSBjb2Rlcy5cbiAgZm9yIChpID0gMDsgaSArIDIgPD0gdGhpcy5kYXRhLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgLy8gVGhlIGNoYXJhY3RlciB2YWx1ZSBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzIG11bHRpcGxpZWQgYnkgNDVcbiAgICBsZXQgdmFsdWUgPSBBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaV0pICogNDVcblxuICAgIC8vIFRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIHNlY29uZCBkaWdpdCBpcyBhZGRlZCB0byB0aGUgcHJvZHVjdFxuICAgIHZhbHVlICs9IEFMUEhBX05VTV9DSEFSUy5pbmRleE9mKHRoaXMuZGF0YVtpICsgMV0pXG5cbiAgICAvLyBUaGUgc3VtIGlzIHRoZW4gc3RvcmVkIGFzIDExLWJpdCBiaW5hcnkgbnVtYmVyXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgMTEpXG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG9mIGlucHV0IGRhdGEgY2hhcmFjdGVycyBpcyBub3QgYSBtdWx0aXBsZSBvZiB0d28sXG4gIC8vIHRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIGZpbmFsIGNoYXJhY3RlciBpcyBlbmNvZGVkIGFzIGEgNi1iaXQgYmluYXJ5IG51bWJlci5cbiAgaWYgKHRoaXMuZGF0YS5sZW5ndGggJSAyKSB7XG4gICAgYml0QnVmZmVyLnB1dChBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaV0pLCA2KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWxwaGFudW1lcmljRGF0YVxuIl0sIm5hbWVzIjpbIk1vZGUiLCJyZXF1aXJlIiwiQUxQSEFfTlVNX0NIQVJTIiwiQWxwaGFudW1lcmljRGF0YSIsImRhdGEiLCJtb2RlIiwiQUxQSEFOVU1FUklDIiwiZ2V0Qml0c0xlbmd0aCIsImxlbmd0aCIsIk1hdGgiLCJmbG9vciIsInByb3RvdHlwZSIsImdldExlbmd0aCIsIndyaXRlIiwiYml0QnVmZmVyIiwiaSIsInZhbHVlIiwiaW5kZXhPZiIsInB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/alphanumeric-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/bit-buffer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/bit-buffer.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nfunction BitBuffer() {\n    this.buffer = [];\n    this.length = 0;\n}\nBitBuffer.prototype = {\n    get: function(index) {\n        const bufIndex = Math.floor(index / 8);\n        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\n    },\n    put: function(num, length) {\n        for(let i = 0; i < length; i++){\n            this.putBit((num >>> length - i - 1 & 1) === 1);\n        }\n    },\n    getLengthInBits: function() {\n        return this.length;\n    },\n    putBit: function(bit) {\n        const bufIndex = Math.floor(this.length / 8);\n        if (this.buffer.length <= bufIndex) {\n            this.buffer.push(0);\n        }\n        if (bit) {\n            this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n        }\n        this.length++;\n    }\n};\nmodule.exports = BitBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYml0LWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsU0FBU0E7SUFDUCxJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO0lBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0FBQ2hCO0FBRUFGLFVBQVVHLFNBQVMsR0FBRztJQUVwQkMsS0FBSyxTQUFVQyxLQUFLO1FBQ2xCLE1BQU1DLFdBQVdDLEtBQUtDLEtBQUssQ0FBQ0gsUUFBUTtRQUNwQyxPQUFPLENBQUMsSUFBSyxDQUFDSixNQUFNLENBQUNLLFNBQVMsS0FBTSxJQUFJRCxRQUFRLElBQU0sT0FBTztJQUMvRDtJQUVBSSxLQUFLLFNBQVVDLEdBQUcsRUFBRVIsTUFBTTtRQUN4QixJQUFLLElBQUlTLElBQUksR0FBR0EsSUFBSVQsUUFBUVMsSUFBSztZQUMvQixJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLFFBQVVWLFNBQVNTLElBQUksSUFBTSxPQUFPO1FBQ25EO0lBQ0Y7SUFFQUUsaUJBQWlCO1FBQ2YsT0FBTyxJQUFJLENBQUNYLE1BQU07SUFDcEI7SUFFQVUsUUFBUSxTQUFVRSxHQUFHO1FBQ25CLE1BQU1SLFdBQVdDLEtBQUtDLEtBQUssQ0FBQyxJQUFJLENBQUNOLE1BQU0sR0FBRztRQUMxQyxJQUFJLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxNQUFNLElBQUlJLFVBQVU7WUFDbEMsSUFBSSxDQUFDTCxNQUFNLENBQUNjLElBQUksQ0FBQztRQUNuQjtRQUVBLElBQUlELEtBQUs7WUFDUCxJQUFJLENBQUNiLE1BQU0sQ0FBQ0ssU0FBUyxJQUFLLFNBQVUsSUFBSSxDQUFDSixNQUFNLEdBQUc7UUFDcEQ7UUFFQSxJQUFJLENBQUNBLE1BQU07SUFDYjtBQUNGO0FBRUFjLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtYnVmZmVyLmpzPzkyMGMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gQml0QnVmZmVyICgpIHtcbiAgdGhpcy5idWZmZXIgPSBbXVxuICB0aGlzLmxlbmd0aCA9IDBcbn1cblxuQml0QnVmZmVyLnByb3RvdHlwZSA9IHtcblxuICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIGNvbnN0IGJ1ZkluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIDgpXG4gICAgcmV0dXJuICgodGhpcy5idWZmZXJbYnVmSW5kZXhdID4+PiAoNyAtIGluZGV4ICUgOCkpICYgMSkgPT09IDFcbiAgfSxcblxuICBwdXQ6IGZ1bmN0aW9uIChudW0sIGxlbmd0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucHV0Qml0KCgobnVtID4+PiAobGVuZ3RoIC0gaSAtIDEpKSAmIDEpID09PSAxKVxuICAgIH1cbiAgfSxcblxuICBnZXRMZW5ndGhJbkJpdHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGhcbiAgfSxcblxuICBwdXRCaXQ6IGZ1bmN0aW9uIChiaXQpIHtcbiAgICBjb25zdCBidWZJbmRleCA9IE1hdGguZmxvb3IodGhpcy5sZW5ndGggLyA4KVxuICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPD0gYnVmSW5kZXgpIHtcbiAgICAgIHRoaXMuYnVmZmVyLnB1c2goMClcbiAgICB9XG5cbiAgICBpZiAoYml0KSB7XG4gICAgICB0aGlzLmJ1ZmZlcltidWZJbmRleF0gfD0gKDB4ODAgPj4+ICh0aGlzLmxlbmd0aCAlIDgpKVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoKytcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdEJ1ZmZlclxuIl0sIm5hbWVzIjpbIkJpdEJ1ZmZlciIsImJ1ZmZlciIsImxlbmd0aCIsInByb3RvdHlwZSIsImdldCIsImluZGV4IiwiYnVmSW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJwdXQiLCJudW0iLCJpIiwicHV0Qml0IiwiZ2V0TGVuZ3RoSW5CaXRzIiwiYml0IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/bit-buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/bit-matrix.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/bit-matrix.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */ \nfunction BitMatrix(size) {\n    if (!size || size < 1) {\n        throw new Error(\"BitMatrix size must be defined and greater than 0\");\n    }\n    this.size = size;\n    this.data = new Uint8Array(size * size);\n    this.reservedBit = new Uint8Array(size * size);\n}\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */ BitMatrix.prototype.set = function(row, col, value, reserved) {\n    const index = row * this.size + col;\n    this.data[index] = value;\n    if (reserved) this.reservedBit[index] = true;\n};\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */ BitMatrix.prototype.get = function(row, col) {\n    return this.data[row * this.size + col];\n};\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */ BitMatrix.prototype.xor = function(row, col, value) {\n    this.data[row * this.size + col] ^= value;\n};\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */ BitMatrix.prototype.isReserved = function(row, col) {\n    return this.reservedBit[row * this.size + col];\n};\nmodule.exports = BitMatrix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYml0LW1hdHJpeC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDO0FBQ0QsU0FBU0EsVUFBV0MsSUFBSTtJQUN0QixJQUFJLENBQUNBLFFBQVFBLE9BQU8sR0FBRztRQUNyQixNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQSxJQUFJLENBQUNELElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNFLElBQUksR0FBRyxJQUFJQyxXQUFXSCxPQUFPQTtJQUNsQyxJQUFJLENBQUNJLFdBQVcsR0FBRyxJQUFJRCxXQUFXSCxPQUFPQTtBQUMzQztBQUVBOzs7Ozs7OztDQVFDLEdBQ0RELFVBQVVNLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLFFBQVE7SUFDM0QsTUFBTUMsUUFBUUosTUFBTSxJQUFJLENBQUNQLElBQUksR0FBR1E7SUFDaEMsSUFBSSxDQUFDTixJQUFJLENBQUNTLE1BQU0sR0FBR0Y7SUFDbkIsSUFBSUMsVUFBVSxJQUFJLENBQUNOLFdBQVcsQ0FBQ08sTUFBTSxHQUFHO0FBQzFDO0FBRUE7Ozs7OztDQU1DLEdBQ0RaLFVBQVVNLFNBQVMsQ0FBQ08sR0FBRyxHQUFHLFNBQVVMLEdBQUcsRUFBRUMsR0FBRztJQUMxQyxPQUFPLElBQUksQ0FBQ04sSUFBSSxDQUFDSyxNQUFNLElBQUksQ0FBQ1AsSUFBSSxHQUFHUSxJQUFJO0FBQ3pDO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNEVCxVQUFVTSxTQUFTLENBQUNRLEdBQUcsR0FBRyxTQUFVTixHQUFHLEVBQUVDLEdBQUcsRUFBRUMsS0FBSztJQUNqRCxJQUFJLENBQUNQLElBQUksQ0FBQ0ssTUFBTSxJQUFJLENBQUNQLElBQUksR0FBR1EsSUFBSSxJQUFJQztBQUN0QztBQUVBOzs7Ozs7Q0FNQyxHQUNEVixVQUFVTSxTQUFTLENBQUNTLFVBQVUsR0FBRyxTQUFVUCxHQUFHLEVBQUVDLEdBQUc7SUFDakQsT0FBTyxJQUFJLENBQUNKLFdBQVcsQ0FBQ0csTUFBTSxJQUFJLENBQUNQLElBQUksR0FBR1EsSUFBSTtBQUNoRDtBQUVBTyxPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYml0LW1hdHJpeC5qcz9lZDA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGhhbmRsZSBRUiBDb2RlIHN5bWJvbCBtb2R1bGVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgU3ltYm9sIHNpemVcbiAqL1xuZnVuY3Rpb24gQml0TWF0cml4IChzaXplKSB7XG4gIGlmICghc2l6ZSB8fCBzaXplIDwgMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQml0TWF0cml4IHNpemUgbXVzdCBiZSBkZWZpbmVkIGFuZCBncmVhdGVyIHRoYW4gMCcpXG4gIH1cblxuICB0aGlzLnNpemUgPSBzaXplXG4gIHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KHNpemUgKiBzaXplKVxuICB0aGlzLnJlc2VydmVkQml0ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSAqIHNpemUpXG59XG5cbi8qKlxuICogU2V0IGJpdCB2YWx1ZSBhdCBzcGVjaWZpZWQgbG9jYXRpb25cbiAqIElmIHJlc2VydmVkIGZsYWcgaXMgc2V0LCB0aGlzIGJpdCB3aWxsIGJlIGlnbm9yZWQgZHVyaW5nIG1hc2tpbmcgcHJvY2Vzc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0ge051bWJlcn0gIGNvbFxuICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICogQHBhcmFtIHtCb29sZWFufSByZXNlcnZlZFxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChyb3csIGNvbCwgdmFsdWUsIHJlc2VydmVkKSB7XG4gIGNvbnN0IGluZGV4ID0gcm93ICogdGhpcy5zaXplICsgY29sXG4gIHRoaXMuZGF0YVtpbmRleF0gPSB2YWx1ZVxuICBpZiAocmVzZXJ2ZWQpIHRoaXMucmVzZXJ2ZWRCaXRbaW5kZXhdID0gdHJ1ZVxufVxuXG4vKipcbiAqIFJldHVybnMgYml0IHZhbHVlIGF0IHNwZWNpZmllZCBsb2NhdGlvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIHJvd1xuICogQHBhcmFtICB7TnVtYmVyfSAgY29sXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICByZXR1cm4gdGhpcy5kYXRhW3JvdyAqIHRoaXMuc2l6ZSArIGNvbF1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIHhvciBvcGVyYXRvciBhdCBzcGVjaWZpZWQgbG9jYXRpb25cbiAqICh1c2VkIGR1cmluZyBtYXNraW5nIHByb2Nlc3MpXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9ICByb3dcbiAqIEBwYXJhbSB7TnVtYmVyfSAgY29sXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24gKHJvdywgY29sLCB2YWx1ZSkge1xuICB0aGlzLmRhdGFbcm93ICogdGhpcy5zaXplICsgY29sXSBePSB2YWx1ZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGJpdCBhdCBzcGVjaWZpZWQgbG9jYXRpb24gaXMgcmVzZXJ2ZWRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gICByb3dcbiAqIEBwYXJhbSB7TnVtYmVyfSAgIGNvbFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS5pc1Jlc2VydmVkID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gIHJldHVybiB0aGlzLnJlc2VydmVkQml0W3JvdyAqIHRoaXMuc2l6ZSArIGNvbF1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCaXRNYXRyaXhcbiJdLCJuYW1lcyI6WyJCaXRNYXRyaXgiLCJzaXplIiwiRXJyb3IiLCJkYXRhIiwiVWludDhBcnJheSIsInJlc2VydmVkQml0IiwicHJvdG90eXBlIiwic2V0Iiwicm93IiwiY29sIiwidmFsdWUiLCJyZXNlcnZlZCIsImluZGV4IiwiZ2V0IiwieG9yIiwiaXNSZXNlcnZlZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/bit-matrix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/byte-data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/byte-data.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js\");\nfunction ByteData(data) {\n    this.mode = Mode.BYTE;\n    if (typeof data === \"string\") {\n        this.data = new TextEncoder().encode(data);\n    } else {\n        this.data = new Uint8Array(data);\n    }\n}\nByteData.getBitsLength = function getBitsLength(length) {\n    return length * 8;\n};\nByteData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nByteData.prototype.getBitsLength = function getBitsLength() {\n    return ByteData.getBitsLength(this.data.length);\n};\nByteData.prototype.write = function(bitBuffer) {\n    for(let i = 0, l = this.data.length; i < l; i++){\n        bitBuffer.put(this.data[i], 8);\n    }\n};\nmodule.exports = ByteData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYnl0ZS1kYXRhLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVyQixTQUFTQyxTQUFVQyxJQUFJO0lBQ3JCLElBQUksQ0FBQ0MsSUFBSSxHQUFHSixLQUFLSyxJQUFJO0lBQ3JCLElBQUksT0FBUUYsU0FBVSxVQUFVO1FBQzlCLElBQUksQ0FBQ0EsSUFBSSxHQUFHLElBQUlHLGNBQWNDLE1BQU0sQ0FBQ0o7SUFDdkMsT0FBTztRQUNMLElBQUksQ0FBQ0EsSUFBSSxHQUFHLElBQUlLLFdBQVdMO0lBQzdCO0FBQ0Y7QUFFQUQsU0FBU08sYUFBYSxHQUFHLFNBQVNBLGNBQWVDLE1BQU07SUFDckQsT0FBT0EsU0FBUztBQUNsQjtBQUVBUixTQUFTUyxTQUFTLENBQUNDLFNBQVMsR0FBRyxTQUFTQTtJQUN0QyxPQUFPLElBQUksQ0FBQ1QsSUFBSSxDQUFDTyxNQUFNO0FBQ3pCO0FBRUFSLFNBQVNTLFNBQVMsQ0FBQ0YsYUFBYSxHQUFHLFNBQVNBO0lBQzFDLE9BQU9QLFNBQVNPLGFBQWEsQ0FBQyxJQUFJLENBQUNOLElBQUksQ0FBQ08sTUFBTTtBQUNoRDtBQUVBUixTQUFTUyxTQUFTLENBQUNFLEtBQUssR0FBRyxTQUFVQyxTQUFTO0lBQzVDLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJLElBQUksQ0FBQ2IsSUFBSSxDQUFDTyxNQUFNLEVBQUVLLElBQUlDLEdBQUdELElBQUs7UUFDaERELFVBQVVHLEdBQUcsQ0FBQyxJQUFJLENBQUNkLElBQUksQ0FBQ1ksRUFBRSxFQUFFO0lBQzlCO0FBQ0Y7QUFFQUcsT0FBT0MsT0FBTyxHQUFHakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2J5dGUtZGF0YS5qcz9lNDRiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG5mdW5jdGlvbiBCeXRlRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLkJZVEVcbiAgaWYgKHR5cGVvZiAoZGF0YSkgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy5kYXRhID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGRhdGEpXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSlcbiAgfVxufVxuXG5CeXRlRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiBsZW5ndGggKiA4XG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5CeXRlRGF0YS5wcm90b3R5cGUuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKCkge1xuICByZXR1cm4gQnl0ZURhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5CeXRlRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYml0QnVmZmVyKSB7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5kYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGJpdEJ1ZmZlci5wdXQodGhpcy5kYXRhW2ldLCA4KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQnl0ZURhdGFcbiJdLCJuYW1lcyI6WyJNb2RlIiwicmVxdWlyZSIsIkJ5dGVEYXRhIiwiZGF0YSIsIm1vZGUiLCJCWVRFIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJVaW50OEFycmF5IiwiZ2V0Qml0c0xlbmd0aCIsImxlbmd0aCIsInByb3RvdHlwZSIsImdldExlbmd0aCIsIndyaXRlIiwiYml0QnVmZmVyIiwiaSIsImwiLCJwdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/byte-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-code.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-code.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-level.js\");\nconst EC_BLOCKS_TABLE = [\n    // L  M  Q  H\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    1,\n    2,\n    2,\n    4,\n    1,\n    2,\n    4,\n    4,\n    2,\n    4,\n    4,\n    4,\n    2,\n    4,\n    6,\n    5,\n    2,\n    4,\n    6,\n    6,\n    2,\n    5,\n    8,\n    8,\n    4,\n    5,\n    8,\n    8,\n    4,\n    5,\n    8,\n    11,\n    4,\n    8,\n    10,\n    11,\n    4,\n    9,\n    12,\n    16,\n    4,\n    9,\n    16,\n    16,\n    6,\n    10,\n    12,\n    18,\n    6,\n    10,\n    17,\n    16,\n    6,\n    11,\n    16,\n    19,\n    6,\n    13,\n    18,\n    21,\n    7,\n    14,\n    21,\n    25,\n    8,\n    16,\n    20,\n    25,\n    8,\n    17,\n    23,\n    25,\n    9,\n    17,\n    23,\n    34,\n    9,\n    18,\n    25,\n    30,\n    10,\n    20,\n    27,\n    32,\n    12,\n    21,\n    29,\n    35,\n    12,\n    23,\n    34,\n    37,\n    12,\n    25,\n    34,\n    40,\n    13,\n    26,\n    35,\n    42,\n    14,\n    28,\n    38,\n    45,\n    15,\n    29,\n    40,\n    48,\n    16,\n    31,\n    43,\n    51,\n    17,\n    33,\n    45,\n    54,\n    18,\n    35,\n    48,\n    57,\n    19,\n    37,\n    51,\n    60,\n    19,\n    38,\n    53,\n    63,\n    20,\n    40,\n    56,\n    66,\n    21,\n    43,\n    59,\n    70,\n    22,\n    45,\n    62,\n    74,\n    24,\n    47,\n    65,\n    77,\n    25,\n    49,\n    68,\n    81\n];\nconst EC_CODEWORDS_TABLE = [\n    // L  M  Q  H\n    7,\n    10,\n    13,\n    17,\n    10,\n    16,\n    22,\n    28,\n    15,\n    26,\n    36,\n    44,\n    20,\n    36,\n    52,\n    64,\n    26,\n    48,\n    72,\n    88,\n    36,\n    64,\n    96,\n    112,\n    40,\n    72,\n    108,\n    130,\n    48,\n    88,\n    132,\n    156,\n    60,\n    110,\n    160,\n    192,\n    72,\n    130,\n    192,\n    224,\n    80,\n    150,\n    224,\n    264,\n    96,\n    176,\n    260,\n    308,\n    104,\n    198,\n    288,\n    352,\n    120,\n    216,\n    320,\n    384,\n    132,\n    240,\n    360,\n    432,\n    144,\n    280,\n    408,\n    480,\n    168,\n    308,\n    448,\n    532,\n    180,\n    338,\n    504,\n    588,\n    196,\n    364,\n    546,\n    650,\n    224,\n    416,\n    600,\n    700,\n    224,\n    442,\n    644,\n    750,\n    252,\n    476,\n    690,\n    816,\n    270,\n    504,\n    750,\n    900,\n    300,\n    560,\n    810,\n    960,\n    312,\n    588,\n    870,\n    1050,\n    336,\n    644,\n    952,\n    1110,\n    360,\n    700,\n    1020,\n    1200,\n    390,\n    728,\n    1050,\n    1260,\n    420,\n    784,\n    1140,\n    1350,\n    450,\n    812,\n    1200,\n    1440,\n    480,\n    868,\n    1290,\n    1530,\n    510,\n    924,\n    1350,\n    1620,\n    540,\n    980,\n    1440,\n    1710,\n    570,\n    1036,\n    1530,\n    1800,\n    570,\n    1064,\n    1590,\n    1890,\n    600,\n    1120,\n    1680,\n    1980,\n    630,\n    1204,\n    1770,\n    2100,\n    660,\n    1260,\n    1860,\n    2220,\n    720,\n    1316,\n    1950,\n    2310,\n    750,\n    1372,\n    2040,\n    2430\n];\n/**\r\n * Returns the number of error correction block that the QR Code should contain\r\n * for the specified version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction blocks\r\n */ exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {\n    switch(errorCorrectionLevel){\n        case ECLevel.L:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];\n        case ECLevel.M:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];\n        case ECLevel.Q:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];\n        case ECLevel.H:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];\n        default:\n            return undefined;\n    }\n};\n/**\r\n * Returns the number of error correction codewords to use for the specified\r\n * version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction codewords\r\n */ exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {\n    switch(errorCorrectionLevel){\n        case ECLevel.L:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];\n        case ECLevel.M:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];\n        case ECLevel.Q:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];\n        case ECLevel.H:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];\n        default:\n            return undefined;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-code.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-level.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-level.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.L = {\n    bit: 1\n};\nexports.M = {\n    bit: 0\n};\nexports.Q = {\n    bit: 3\n};\nexports.H = {\n    bit: 2\n};\nfunction fromString(string) {\n    if (typeof string !== \"string\") {\n        throw new Error(\"Param is not a string\");\n    }\n    const lcStr = string.toLowerCase();\n    switch(lcStr){\n        case \"l\":\n        case \"low\":\n            return exports.L;\n        case \"m\":\n        case \"medium\":\n            return exports.M;\n        case \"q\":\n        case \"quartile\":\n            return exports.Q;\n        case \"h\":\n        case \"high\":\n            return exports.H;\n        default:\n            throw new Error(\"Unknown EC Level: \" + string);\n    }\n}\nexports.isValid = function isValid(level) {\n    return level && typeof level.bit !== \"undefined\" && level.bit >= 0 && level.bit < 4;\n};\nexports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n        return value;\n    }\n    try {\n        return fromString(value);\n    } catch (e) {\n        return defaultValue;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZXJyb3ItY29ycmVjdGlvbi1sZXZlbC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsU0FBUyxHQUFHO0lBQUVFLEtBQUs7QUFBRTtBQUNyQkYsU0FBUyxHQUFHO0lBQUVFLEtBQUs7QUFBRTtBQUNyQkYsU0FBUyxHQUFHO0lBQUVFLEtBQUs7QUFBRTtBQUNyQkYsU0FBUyxHQUFHO0lBQUVFLEtBQUs7QUFBRTtBQUVyQixTQUFTSSxXQUFZQyxNQUFNO0lBQ3pCLElBQUksT0FBT0EsV0FBVyxVQUFVO1FBQzlCLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUVBLE1BQU1DLFFBQVFGLE9BQU9HLFdBQVc7SUFFaEMsT0FBUUQ7UUFDTixLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9ULFFBQVFDLENBQUM7UUFFbEIsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPRCxRQUFRRyxDQUFDO1FBRWxCLEtBQUs7UUFDTCxLQUFLO1lBQ0gsT0FBT0gsUUFBUUksQ0FBQztRQUVsQixLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9KLFFBQVFLLENBQUM7UUFFbEI7WUFDRSxNQUFNLElBQUlHLE1BQU0sdUJBQXVCRDtJQUMzQztBQUNGO0FBRUFQLGVBQWUsR0FBRyxTQUFTVyxRQUFTQyxLQUFLO0lBQ3ZDLE9BQU9BLFNBQVMsT0FBT0EsTUFBTVYsR0FBRyxLQUFLLGVBQ25DVSxNQUFNVixHQUFHLElBQUksS0FBS1UsTUFBTVYsR0FBRyxHQUFHO0FBQ2xDO0FBRUFGLFlBQVksR0FBRyxTQUFTYSxLQUFNQyxLQUFLLEVBQUVDLFlBQVk7SUFDL0MsSUFBSWYsUUFBUVcsT0FBTyxDQUFDRyxRQUFRO1FBQzFCLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJO1FBQ0YsT0FBT1IsV0FBV1E7SUFDcEIsRUFBRSxPQUFPRSxHQUFHO1FBQ1YsT0FBT0Q7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9lcnJvci1jb3JyZWN0aW9uLWxldmVsLmpzP2U2MjMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5MID0geyBiaXQ6IDEgfVxuZXhwb3J0cy5NID0geyBiaXQ6IDAgfVxuZXhwb3J0cy5RID0geyBiaXQ6IDMgfVxuZXhwb3J0cy5IID0geyBiaXQ6IDIgfVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQYXJhbSBpcyBub3QgYSBzdHJpbmcnKVxuICB9XG5cbiAgY29uc3QgbGNTdHIgPSBzdHJpbmcudG9Mb3dlckNhc2UoKVxuXG4gIHN3aXRjaCAobGNTdHIpIHtcbiAgICBjYXNlICdsJzpcbiAgICBjYXNlICdsb3cnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuTFxuXG4gICAgY2FzZSAnbSc6XG4gICAgY2FzZSAnbWVkaXVtJzpcbiAgICAgIHJldHVybiBleHBvcnRzLk1cblxuICAgIGNhc2UgJ3EnOlxuICAgIGNhc2UgJ3F1YXJ0aWxlJzpcbiAgICAgIHJldHVybiBleHBvcnRzLlFcblxuICAgIGNhc2UgJ2gnOlxuICAgIGNhc2UgJ2hpZ2gnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuSFxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBFQyBMZXZlbDogJyArIHN0cmluZylcbiAgfVxufVxuXG5leHBvcnRzLmlzVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbGlkIChsZXZlbCkge1xuICByZXR1cm4gbGV2ZWwgJiYgdHlwZW9mIGxldmVsLmJpdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBsZXZlbC5iaXQgPj0gMCAmJiBsZXZlbC5iaXQgPCA0XG59XG5cbmV4cG9ydHMuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGV4cG9ydHMuaXNWYWxpZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiTCIsImJpdCIsIk0iLCJRIiwiSCIsImZyb21TdHJpbmciLCJzdHJpbmciLCJFcnJvciIsImxjU3RyIiwidG9Mb3dlckNhc2UiLCJpc1ZhbGlkIiwibGV2ZWwiLCJmcm9tIiwidmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/finder-pattern.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/finder-pattern.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const getSymbolSize = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js\").getSymbolSize);\nconst FINDER_PATTERN_SIZE = 7;\n/**\n * Returns an array containing the positions of each finder pattern.\n * Each array's element represent the top-left point of the pattern as (x, y) coordinates\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */ exports.getPositions = function getPositions(version) {\n    const size = getSymbolSize(version);\n    return [\n        // top-left\n        [\n            0,\n            0\n        ],\n        // top-right\n        [\n            size - FINDER_PATTERN_SIZE,\n            0\n        ],\n        // bottom-left\n        [\n            0,\n            size - FINDER_PATTERN_SIZE\n        ]\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZmluZGVyLXBhdHRlcm4uanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsZ0JBQWdCQyxtSUFBZ0M7QUFDdEQsTUFBTUMsc0JBQXNCO0FBRTVCOzs7Ozs7Q0FNQyxHQUNEQyxvQkFBb0IsR0FBRyxTQUFTQyxhQUFjQyxPQUFPO0lBQ25ELE1BQU1DLE9BQU9OLGNBQWNLO0lBRTNCLE9BQU87UUFDTCxXQUFXO1FBQ1g7WUFBQztZQUFHO1NBQUU7UUFDTixZQUFZO1FBQ1o7WUFBQ0MsT0FBT0o7WUFBcUI7U0FBRTtRQUMvQixjQUFjO1FBQ2Q7WUFBQztZQUFHSSxPQUFPSjtTQUFvQjtLQUNoQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9maW5kZXItcGF0dGVybi5qcz8wMWIxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdldFN5bWJvbFNpemUgPSByZXF1aXJlKCcuL3V0aWxzJykuZ2V0U3ltYm9sU2l6ZVxuY29uc3QgRklOREVSX1BBVFRFUk5fU0laRSA9IDdcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHBvc2l0aW9ucyBvZiBlYWNoIGZpbmRlciBwYXR0ZXJuLlxuICogRWFjaCBhcnJheSdzIGVsZW1lbnQgcmVwcmVzZW50IHRoZSB0b3AtbGVmdCBwb2ludCBvZiB0aGUgcGF0dGVybiBhcyAoeCwgeSkgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2YgY29vcmRpbmF0ZXNcbiAqL1xuZXhwb3J0cy5nZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiBnZXRQb3NpdGlvbnMgKHZlcnNpb24pIHtcbiAgY29uc3Qgc2l6ZSA9IGdldFN5bWJvbFNpemUodmVyc2lvbilcblxuICByZXR1cm4gW1xuICAgIC8vIHRvcC1sZWZ0XG4gICAgWzAsIDBdLFxuICAgIC8vIHRvcC1yaWdodFxuICAgIFtzaXplIC0gRklOREVSX1BBVFRFUk5fU0laRSwgMF0sXG4gICAgLy8gYm90dG9tLWxlZnRcbiAgICBbMCwgc2l6ZSAtIEZJTkRFUl9QQVRURVJOX1NJWkVdXG4gIF1cbn1cbiJdLCJuYW1lcyI6WyJnZXRTeW1ib2xTaXplIiwicmVxdWlyZSIsIkZJTkRFUl9QQVRURVJOX1NJWkUiLCJleHBvcnRzIiwiZ2V0UG9zaXRpb25zIiwidmVyc2lvbiIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/finder-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/format-info.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/format-info.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js\");\nconst G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\nconst G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\nconst G15_BCH = Utils.getBCHDigit(G15);\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */ exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {\n    const data = errorCorrectionLevel.bit << 3 | mask;\n    let d = data << 10;\n    while(Utils.getBCHDigit(d) - G15_BCH >= 0){\n        d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;\n    }\n    // xor final data with mask pattern in order to ensure that\n    // no combination of Error Correction Level and data mask pattern\n    // will result in an all-zero data string\n    return (data << 10 | d) ^ G15_MASK;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZm9ybWF0LWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFdEIsTUFBTUMsTUFBTSxLQUFNLEtBQU8sS0FBSyxJQUFNLEtBQUssSUFBTSxLQUFLLElBQU0sS0FBSyxJQUFNLEtBQUssSUFBTSxLQUFLO0FBQ3JGLE1BQU1DLFdBQVcsS0FBTSxLQUFPLEtBQUssS0FBTyxLQUFLLEtBQU8sS0FBSyxJQUFNLEtBQUs7QUFDdEUsTUFBTUMsVUFBVUosTUFBTUssV0FBVyxDQUFDSDtBQUVsQzs7Ozs7Ozs7O0NBU0MsR0FDREksc0JBQXNCLEdBQUcsU0FBU0MsZUFBZ0JDLG9CQUFvQixFQUFFQyxJQUFJO0lBQzFFLE1BQU1DLE9BQVEscUJBQXNCQyxHQUFHLElBQUksSUFBS0Y7SUFDaEQsSUFBSUcsSUFBSUYsUUFBUTtJQUVoQixNQUFPVixNQUFNSyxXQUFXLENBQUNPLEtBQUtSLFdBQVcsRUFBRztRQUMxQ1EsS0FBTVYsT0FBUUYsTUFBTUssV0FBVyxDQUFDTyxLQUFLUjtJQUN2QztJQUVBLDJEQUEyRDtJQUMzRCxpRUFBaUU7SUFDakUseUNBQXlDO0lBQ3pDLE9BQU8sQ0FBQyxRQUFTLEtBQU1RLENBQUFBLElBQUtUO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9mb3JtYXQtaW5mby5qcz8yNGM4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmNvbnN0IEcxNSA9ICgxIDw8IDEwKSB8ICgxIDw8IDgpIHwgKDEgPDwgNSkgfCAoMSA8PCA0KSB8ICgxIDw8IDIpIHwgKDEgPDwgMSkgfCAoMSA8PCAwKVxuY29uc3QgRzE1X01BU0sgPSAoMSA8PCAxNCkgfCAoMSA8PCAxMikgfCAoMSA8PCAxMCkgfCAoMSA8PCA0KSB8ICgxIDw8IDEpXG5jb25zdCBHMTVfQkNIID0gVXRpbHMuZ2V0QkNIRGlnaXQoRzE1KVxuXG4vKipcbiAqIFJldHVybnMgZm9ybWF0IGluZm9ybWF0aW9uIHdpdGggcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogVGhlIGZvcm1hdCBpbmZvcm1hdGlvbiBpcyBhIDE1LWJpdCBzZXF1ZW5jZSBjb250YWluaW5nIDUgZGF0YSBiaXRzLFxuICogd2l0aCAxMCBlcnJvciBjb3JyZWN0aW9uIGJpdHMgY2FsY3VsYXRlZCB1c2luZyB0aGUgKDE1LCA1KSBCQ0ggY29kZS5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSAge051bWJlcn0gbWFzayAgICAgICAgICAgICAgICAgTWFzayBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIEVuY29kZWQgZm9ybWF0IGluZm9ybWF0aW9uIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRFbmNvZGVkQml0cyA9IGZ1bmN0aW9uIGdldEVuY29kZWRCaXRzIChlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFzaykge1xuICBjb25zdCBkYXRhID0gKChlcnJvckNvcnJlY3Rpb25MZXZlbC5iaXQgPDwgMykgfCBtYXNrKVxuICBsZXQgZCA9IGRhdGEgPDwgMTBcblxuICB3aGlsZSAoVXRpbHMuZ2V0QkNIRGlnaXQoZCkgLSBHMTVfQkNIID49IDApIHtcbiAgICBkIF49IChHMTUgPDwgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE1X0JDSCkpXG4gIH1cblxuICAvLyB4b3IgZmluYWwgZGF0YSB3aXRoIG1hc2sgcGF0dGVybiBpbiBvcmRlciB0byBlbnN1cmUgdGhhdFxuICAvLyBubyBjb21iaW5hdGlvbiBvZiBFcnJvciBDb3JyZWN0aW9uIExldmVsIGFuZCBkYXRhIG1hc2sgcGF0dGVyblxuICAvLyB3aWxsIHJlc3VsdCBpbiBhbiBhbGwtemVybyBkYXRhIHN0cmluZ1xuICByZXR1cm4gKChkYXRhIDw8IDEwKSB8IGQpIF4gRzE1X01BU0tcbn1cbiJdLCJuYW1lcyI6WyJVdGlscyIsInJlcXVpcmUiLCJHMTUiLCJHMTVfTUFTSyIsIkcxNV9CQ0giLCJnZXRCQ0hEaWdpdCIsImV4cG9ydHMiLCJnZXRFbmNvZGVkQml0cyIsImVycm9yQ29ycmVjdGlvbkxldmVsIiwibWFzayIsImRhdGEiLCJiaXQiLCJkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/format-info.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/galois-field.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/galois-field.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const EXP_TABLE = new Uint8Array(512);\nconst LOG_TABLE = new Uint8Array(256) /**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */ ;\n(function initTables() {\n    let x = 1;\n    for(let i = 0; i < 255; i++){\n        EXP_TABLE[i] = x;\n        LOG_TABLE[x] = i;\n        x <<= 1 // multiply by 2\n        ;\n        // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n        // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n        if (x & 0x100) {\n            x ^= 0x11D;\n        }\n    }\n    // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n    // stay inside the bounds (because we will mainly use this table for the multiplication of\n    // two GF numbers, no more).\n    // @see {@link mul}\n    for(let i = 255; i < 512; i++){\n        EXP_TABLE[i] = EXP_TABLE[i - 255];\n    }\n})();\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */ exports.log = function log(n) {\n    if (n < 1) throw new Error(\"log(\" + n + \")\");\n    return LOG_TABLE[n];\n};\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */ exports.exp = function exp(n) {\n    return EXP_TABLE[n];\n};\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */ exports.mul = function mul(x, y) {\n    if (x === 0 || y === 0) return 0;\n    // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n    // @see {@link initTables}\n    return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZ2Fsb2lzLWZpZWxkLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQVksSUFBSUMsV0FBVztBQUNqQyxNQUFNQyxZQUFZLElBQUlELFdBQVcsS0FDakM7Ozs7Ozs7Q0FPQztBQUNDLFVBQVNFO0lBQ1QsSUFBSUMsSUFBSTtJQUNSLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUtBLElBQUs7UUFDNUJMLFNBQVMsQ0FBQ0ssRUFBRSxHQUFHRDtRQUNmRixTQUFTLENBQUNFLEVBQUUsR0FBR0M7UUFFZkQsTUFBTSxFQUFFLGdCQUFnQjs7UUFFeEIsK0VBQStFO1FBQy9FLGlGQUFpRjtRQUNqRixJQUFJQSxJQUFJLE9BQU87WUFDYkEsS0FBSztRQUNQO0lBQ0Y7SUFFQSwwRkFBMEY7SUFDMUYsMEZBQTBGO0lBQzFGLDRCQUE0QjtJQUM1QixtQkFBbUI7SUFDbkIsSUFBSyxJQUFJQyxJQUFJLEtBQUtBLElBQUksS0FBS0EsSUFBSztRQUM5QkwsU0FBUyxDQUFDSyxFQUFFLEdBQUdMLFNBQVMsQ0FBQ0ssSUFBSSxJQUFJO0lBQ25DO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNEQyxXQUFXLEdBQUcsU0FBU0MsSUFBS0MsQ0FBQztJQUMzQixJQUFJQSxJQUFJLEdBQUcsTUFBTSxJQUFJQyxNQUFNLFNBQVNELElBQUk7SUFDeEMsT0FBT04sU0FBUyxDQUFDTSxFQUFFO0FBQ3JCO0FBRUE7Ozs7O0NBS0MsR0FDREYsV0FBVyxHQUFHLFNBQVNJLElBQUtGLENBQUM7SUFDM0IsT0FBT1IsU0FBUyxDQUFDUSxFQUFFO0FBQ3JCO0FBRUE7Ozs7OztDQU1DLEdBQ0RGLFdBQVcsR0FBRyxTQUFTSyxJQUFLUCxDQUFDLEVBQUVRLENBQUM7SUFDOUIsSUFBSVIsTUFBTSxLQUFLUSxNQUFNLEdBQUcsT0FBTztJQUUvQix5RkFBeUY7SUFDekYsMEJBQTBCO0lBQzFCLE9BQU9aLFNBQVMsQ0FBQ0UsU0FBUyxDQUFDRSxFQUFFLEdBQUdGLFNBQVMsQ0FBQ1UsRUFBRSxDQUFDO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9nYWxvaXMtZmllbGQuanM/ZWU0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFWFBfVEFCTEUgPSBuZXcgVWludDhBcnJheSg1MTIpXG5jb25zdCBMT0dfVEFCTEUgPSBuZXcgVWludDhBcnJheSgyNTYpXG4vKipcbiAqIFByZWNvbXB1dGUgdGhlIGxvZyBhbmQgYW50aS1sb2cgdGFibGVzIGZvciBmYXN0ZXIgY29tcHV0YXRpb24gbGF0ZXJcbiAqXG4gKiBGb3IgZWFjaCBwb3NzaWJsZSB2YWx1ZSBpbiB0aGUgZ2Fsb2lzIGZpZWxkIDJeOCwgd2Ugd2lsbCBwcmUtY29tcHV0ZVxuICogdGhlIGxvZ2FyaXRobSBhbmQgYW50aS1sb2dhcml0aG0gKGV4cG9uZW50aWFsKSBvZiB0aGlzIHZhbHVlXG4gKlxuICogcmVmIHtAbGluayBodHRwczovL2VuLndpa2l2ZXJzaXR5Lm9yZy93aWtpL1JlZWQlRTIlODAlOTNTb2xvbW9uX2NvZGVzX2Zvcl9jb2RlcnMjSW50cm9kdWN0aW9uX3RvX21hdGhlbWF0aWNhbF9maWVsZHN9XG4gKi9cbjsoZnVuY3Rpb24gaW5pdFRhYmxlcyAoKSB7XG4gIGxldCB4ID0gMVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NTsgaSsrKSB7XG4gICAgRVhQX1RBQkxFW2ldID0geFxuICAgIExPR19UQUJMRVt4XSA9IGlcblxuICAgIHggPDw9IDEgLy8gbXVsdGlwbHkgYnkgMlxuXG4gICAgLy8gVGhlIFFSIGNvZGUgc3BlY2lmaWNhdGlvbiBzYXlzIHRvIHVzZSBieXRlLXdpc2UgbW9kdWxvIDEwMDAxMTEwMSBhcml0aG1ldGljLlxuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB3aGVuIGEgbnVtYmVyIGlzIDI1NiBvciBsYXJnZXIsIGl0IHNob3VsZCBiZSBYT1JlZCB3aXRoIDB4MTFELlxuICAgIGlmICh4ICYgMHgxMDApIHsgLy8gc2ltaWxhciB0byB4ID49IDI1NiwgYnV0IGEgbG90IGZhc3RlciAoYmVjYXVzZSAweDEwMCA9PSAyNTYpXG4gICAgICB4IF49IDB4MTFEXG4gICAgfVxuICB9XG5cbiAgLy8gT3B0aW1pemF0aW9uOiBkb3VibGUgdGhlIHNpemUgb2YgdGhlIGFudGktbG9nIHRhYmxlIHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBtb2QgMjU1IHRvXG4gIC8vIHN0YXkgaW5zaWRlIHRoZSBib3VuZHMgKGJlY2F1c2Ugd2Ugd2lsbCBtYWlubHkgdXNlIHRoaXMgdGFibGUgZm9yIHRoZSBtdWx0aXBsaWNhdGlvbiBvZlxuICAvLyB0d28gR0YgbnVtYmVycywgbm8gbW9yZSkuXG4gIC8vIEBzZWUge0BsaW5rIG11bH1cbiAgZm9yIChsZXQgaSA9IDI1NTsgaSA8IDUxMjsgaSsrKSB7XG4gICAgRVhQX1RBQkxFW2ldID0gRVhQX1RBQkxFW2kgLSAyNTVdXG4gIH1cbn0oKSlcblxuLyoqXG4gKiBSZXR1cm5zIGxvZyB2YWx1ZSBvZiBuIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG5cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbiBsb2cgKG4pIHtcbiAgaWYgKG4gPCAxKSB0aHJvdyBuZXcgRXJyb3IoJ2xvZygnICsgbiArICcpJylcbiAgcmV0dXJuIExPR19UQUJMRVtuXVxufVxuXG4vKipcbiAqIFJldHVybnMgYW50aS1sb2cgdmFsdWUgb2YgbiBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMuZXhwID0gZnVuY3Rpb24gZXhwIChuKSB7XG4gIHJldHVybiBFWFBfVEFCTEVbbl1cbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBudW1iZXIgaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0geFxuICogQHBhcmFtICB7TnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMubXVsID0gZnVuY3Rpb24gbXVsICh4LCB5KSB7XG4gIGlmICh4ID09PSAwIHx8IHkgPT09IDApIHJldHVybiAwXG5cbiAgLy8gc2hvdWxkIGJlIEVYUF9UQUJMRVsoTE9HX1RBQkxFW3hdICsgTE9HX1RBQkxFW3ldKSAlIDI1NV0gaWYgRVhQX1RBQkxFIHdhc24ndCBvdmVyc2l6ZWRcbiAgLy8gQHNlZSB7QGxpbmsgaW5pdFRhYmxlc31cbiAgcmV0dXJuIEVYUF9UQUJMRVtMT0dfVEFCTEVbeF0gKyBMT0dfVEFCTEVbeV1dXG59XG4iXSwibmFtZXMiOlsiRVhQX1RBQkxFIiwiVWludDhBcnJheSIsIkxPR19UQUJMRSIsImluaXRUYWJsZXMiLCJ4IiwiaSIsImV4cG9ydHMiLCJsb2ciLCJuIiwiRXJyb3IiLCJleHAiLCJtdWwiLCJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/galois-field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/kanji-data.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/kanji-data.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js\");\nconst Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js\");\nfunction KanjiData(data) {\n    this.mode = Mode.KANJI;\n    this.data = data;\n}\nKanjiData.getBitsLength = function getBitsLength(length) {\n    return length * 13;\n};\nKanjiData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nKanjiData.prototype.getBitsLength = function getBitsLength() {\n    return KanjiData.getBitsLength(this.data.length);\n};\nKanjiData.prototype.write = function(bitBuffer) {\n    let i;\n    // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n    // These byte values are shifted from the JIS X 0208 values.\n    // JIS X 0208 gives details of the shift coded representation.\n    for(i = 0; i < this.data.length; i++){\n        let value = Utils.toSJIS(this.data[i]);\n        // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n        if (value >= 0x8140 && value <= 0x9FFC) {\n            // Subtract 0x8140 from Shift JIS value\n            value -= 0x8140;\n        // For characters with Shift JIS values from 0xE040 to 0xEBBF\n        } else if (value >= 0xE040 && value <= 0xEBBF) {\n            // Subtract 0xC140 from Shift JIS value\n            value -= 0xC140;\n        } else {\n            throw new Error(\"Invalid SJIS character: \" + this.data[i] + \"\\n\" + \"Make sure your charset is UTF-8\");\n        }\n        // Multiply most significant byte of result by 0xC0\n        // and add least significant byte to product\n        value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff);\n        // Convert result to a 13-bit binary string\n        bitBuffer.put(value, 13);\n    }\n};\nmodule.exports = KanjiData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUva2FuamktZGF0YS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFFdEIsU0FBU0UsVUFBV0MsSUFBSTtJQUN0QixJQUFJLENBQUNDLElBQUksR0FBR0wsS0FBS00sS0FBSztJQUN0QixJQUFJLENBQUNGLElBQUksR0FBR0E7QUFDZDtBQUVBRCxVQUFVSSxhQUFhLEdBQUcsU0FBU0EsY0FBZUMsTUFBTTtJQUN0RCxPQUFPQSxTQUFTO0FBQ2xCO0FBRUFMLFVBQVVNLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVNBO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDTixJQUFJLENBQUNJLE1BQU07QUFDekI7QUFFQUwsVUFBVU0sU0FBUyxDQUFDRixhQUFhLEdBQUcsU0FBU0E7SUFDM0MsT0FBT0osVUFBVUksYUFBYSxDQUFDLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxNQUFNO0FBQ2pEO0FBRUFMLFVBQVVNLFNBQVMsQ0FBQ0UsS0FBSyxHQUFHLFNBQVVDLFNBQVM7SUFDN0MsSUFBSUM7SUFFSix1RkFBdUY7SUFDdkYsNERBQTREO0lBQzVELDhEQUE4RDtJQUM5RCxJQUFLQSxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDVCxJQUFJLENBQUNJLE1BQU0sRUFBRUssSUFBSztRQUNyQyxJQUFJQyxRQUFRWixNQUFNYSxNQUFNLENBQUMsSUFBSSxDQUFDWCxJQUFJLENBQUNTLEVBQUU7UUFFckMsOERBQThEO1FBQzlELElBQUlDLFNBQVMsVUFBVUEsU0FBUyxRQUFRO1lBQ3RDLHVDQUF1QztZQUN2Q0EsU0FBUztRQUVYLDZEQUE2RDtRQUM3RCxPQUFPLElBQUlBLFNBQVMsVUFBVUEsU0FBUyxRQUFRO1lBQzdDLHVDQUF1QztZQUN2Q0EsU0FBUztRQUNYLE9BQU87WUFDTCxNQUFNLElBQUlFLE1BQ1IsNkJBQTZCLElBQUksQ0FBQ1osSUFBSSxDQUFDUyxFQUFFLEdBQUcsT0FDNUM7UUFDSjtRQUVBLG1EQUFtRDtRQUNuRCw0Q0FBNEM7UUFDNUNDLFFBQVEsQ0FBRSxVQUFXLElBQUssSUFBRyxJQUFLLE9BQVNBLENBQUFBLFFBQVEsSUFBRztRQUV0RCwyQ0FBMkM7UUFDM0NGLFVBQVVLLEdBQUcsQ0FBQ0gsT0FBTztJQUN2QjtBQUNGO0FBRUFJLE9BQU9DLE9BQU8sR0FBR2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9rYW5qaS1kYXRhLmpzP2E2ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5jb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5mdW5jdGlvbiBLYW5qaURhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5LQU5KSVxuICB0aGlzLmRhdGEgPSBkYXRhXG59XG5cbkthbmppRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiBsZW5ndGggKiAxM1xufVxuXG5LYW5qaURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbkthbmppRGF0YS5wcm90b3R5cGUuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKCkge1xuICByZXR1cm4gS2FuamlEYXRhLmdldEJpdHNMZW5ndGgodGhpcy5kYXRhLmxlbmd0aClcbn1cblxuS2FuamlEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChiaXRCdWZmZXIpIHtcbiAgbGV0IGlcblxuICAvLyBJbiB0aGUgU2hpZnQgSklTIHN5c3RlbSwgS2FuamkgY2hhcmFjdGVycyBhcmUgcmVwcmVzZW50ZWQgYnkgYSB0d28gYnl0ZSBjb21iaW5hdGlvbi5cbiAgLy8gVGhlc2UgYnl0ZSB2YWx1ZXMgYXJlIHNoaWZ0ZWQgZnJvbSB0aGUgSklTIFggMDIwOCB2YWx1ZXMuXG4gIC8vIEpJUyBYIDAyMDggZ2l2ZXMgZGV0YWlscyBvZiB0aGUgc2hpZnQgY29kZWQgcmVwcmVzZW50YXRpb24uXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgdmFsdWUgPSBVdGlscy50b1NKSVModGhpcy5kYXRhW2ldKVxuXG4gICAgLy8gRm9yIGNoYXJhY3RlcnMgd2l0aCBTaGlmdCBKSVMgdmFsdWVzIGZyb20gMHg4MTQwIHRvIDB4OUZGQzpcbiAgICBpZiAodmFsdWUgPj0gMHg4MTQwICYmIHZhbHVlIDw9IDB4OUZGQykge1xuICAgICAgLy8gU3VidHJhY3QgMHg4MTQwIGZyb20gU2hpZnQgSklTIHZhbHVlXG4gICAgICB2YWx1ZSAtPSAweDgxNDBcblxuICAgIC8vIEZvciBjaGFyYWN0ZXJzIHdpdGggU2hpZnQgSklTIHZhbHVlcyBmcm9tIDB4RTA0MCB0byAweEVCQkZcbiAgICB9IGVsc2UgaWYgKHZhbHVlID49IDB4RTA0MCAmJiB2YWx1ZSA8PSAweEVCQkYpIHtcbiAgICAgIC8vIFN1YnRyYWN0IDB4QzE0MCBmcm9tIFNoaWZ0IEpJUyB2YWx1ZVxuICAgICAgdmFsdWUgLT0gMHhDMTQwXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFsaWQgU0pJUyBjaGFyYWN0ZXI6ICcgKyB0aGlzLmRhdGFbaV0gKyAnXFxuJyArXG4gICAgICAgICdNYWtlIHN1cmUgeW91ciBjaGFyc2V0IGlzIFVURi04JylcbiAgICB9XG5cbiAgICAvLyBNdWx0aXBseSBtb3N0IHNpZ25pZmljYW50IGJ5dGUgb2YgcmVzdWx0IGJ5IDB4QzBcbiAgICAvLyBhbmQgYWRkIGxlYXN0IHNpZ25pZmljYW50IGJ5dGUgdG8gcHJvZHVjdFxuICAgIHZhbHVlID0gKCgodmFsdWUgPj4+IDgpICYgMHhmZikgKiAweEMwKSArICh2YWx1ZSAmIDB4ZmYpXG5cbiAgICAvLyBDb252ZXJ0IHJlc3VsdCB0byBhIDEzLWJpdCBiaW5hcnkgc3RyaW5nXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgMTMpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBLYW5qaURhdGFcbiJdLCJuYW1lcyI6WyJNb2RlIiwicmVxdWlyZSIsIlV0aWxzIiwiS2FuamlEYXRhIiwiZGF0YSIsIm1vZGUiLCJLQU5KSSIsImdldEJpdHNMZW5ndGgiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJnZXRMZW5ndGgiLCJ3cml0ZSIsImJpdEJ1ZmZlciIsImkiLCJ2YWx1ZSIsInRvU0pJUyIsIkVycm9yIiwicHV0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/kanji-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mask-pattern.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mask-pattern.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Data mask pattern reference\n * @type {Object}\n */ exports.Patterns = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7\n};\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */ const PenaltyScores = {\n    N1: 3,\n    N2: 3,\n    N3: 40,\n    N4: 10\n};\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */ exports.isValid = function isValid(mask) {\n    return mask != null && mask !== \"\" && !isNaN(mask) && mask >= 0 && mask <= 7;\n};\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */ exports.from = function from(value) {\n    return exports.isValid(value) ? parseInt(value, 10) : undefined;\n};\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/ exports.getPenaltyN1 = function getPenaltyN1(data) {\n    const size = data.size;\n    let points = 0;\n    let sameCountCol = 0;\n    let sameCountRow = 0;\n    let lastCol = null;\n    let lastRow = null;\n    for(let row = 0; row < size; row++){\n        sameCountCol = sameCountRow = 0;\n        lastCol = lastRow = null;\n        for(let col = 0; col < size; col++){\n            let module = data.get(row, col);\n            if (module === lastCol) {\n                sameCountCol++;\n            } else {\n                if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n                lastCol = module;\n                sameCountCol = 1;\n            }\n            module = data.get(col, row);\n            if (module === lastRow) {\n                sameCountRow++;\n            } else {\n                if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n                lastRow = module;\n                sameCountRow = 1;\n            }\n        }\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n    }\n    return points;\n};\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */ exports.getPenaltyN2 = function getPenaltyN2(data) {\n    const size = data.size;\n    let points = 0;\n    for(let row = 0; row < size - 1; row++){\n        for(let col = 0; col < size - 1; col++){\n            const last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);\n            if (last === 4 || last === 0) points++;\n        }\n    }\n    return points * PenaltyScores.N2;\n};\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */ exports.getPenaltyN3 = function getPenaltyN3(data) {\n    const size = data.size;\n    let points = 0;\n    let bitsCol = 0;\n    let bitsRow = 0;\n    for(let row = 0; row < size; row++){\n        bitsCol = bitsRow = 0;\n        for(let col = 0; col < size; col++){\n            bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);\n            if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;\n            bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);\n            if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;\n        }\n    }\n    return points * PenaltyScores.N3;\n};\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */ exports.getPenaltyN4 = function getPenaltyN4(data) {\n    let darkCount = 0;\n    const modulesCount = data.data.length;\n    for(let i = 0; i < modulesCount; i++)darkCount += data.data[i];\n    const k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);\n    return k * PenaltyScores.N4;\n};\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */ function getMaskAt(maskPattern, i, j) {\n    switch(maskPattern){\n        case exports.Patterns.PATTERN000:\n            return (i + j) % 2 === 0;\n        case exports.Patterns.PATTERN001:\n            return i % 2 === 0;\n        case exports.Patterns.PATTERN010:\n            return j % 3 === 0;\n        case exports.Patterns.PATTERN011:\n            return (i + j) % 3 === 0;\n        case exports.Patterns.PATTERN100:\n            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n        case exports.Patterns.PATTERN101:\n            return i * j % 2 + i * j % 3 === 0;\n        case exports.Patterns.PATTERN110:\n            return (i * j % 2 + i * j % 3) % 2 === 0;\n        case exports.Patterns.PATTERN111:\n            return (i * j % 3 + (i + j) % 2) % 2 === 0;\n        default:\n            throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n}\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */ exports.applyMask = function applyMask(pattern, data) {\n    const size = data.size;\n    for(let col = 0; col < size; col++){\n        for(let row = 0; row < size; row++){\n            if (data.isReserved(row, col)) continue;\n            data.xor(row, col, getMaskAt(pattern, row, col));\n        }\n    }\n};\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */ exports.getBestMask = function getBestMask(data, setupFormatFunc) {\n    const numPatterns = Object.keys(exports.Patterns).length;\n    let bestPattern = 0;\n    let lowerPenalty = Infinity;\n    for(let p = 0; p < numPatterns; p++){\n        setupFormatFunc(p);\n        exports.applyMask(p, data);\n        // Calculate penalty\n        const penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);\n        // Undo previously applied mask\n        exports.applyMask(p, data);\n        if (penalty < lowerPenalty) {\n            lowerPenalty = penalty;\n            bestPattern = p;\n        }\n    }\n    return bestPattern;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mask-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const VersionCheck = __webpack_require__(/*! ./version-check */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version-check.js\");\nconst Regex = __webpack_require__(/*! ./regex */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/regex.js\");\n/**\n * Numeric mode encodes data from the decimal digit set (0 - 9)\n * (byte values 30HEX to 39HEX).\n * Normally, 3 data characters are represented by 10 bits.\n *\n * @type {Object}\n */ exports.NUMERIC = {\n    id: \"Numeric\",\n    bit: 1 << 0,\n    ccBits: [\n        10,\n        12,\n        14\n    ]\n};\n/**\n * Alphanumeric mode encodes data from a set of 45 characters,\n * i.e. 10 numeric digits (0 - 9),\n *      26 alphabetic characters (A - Z),\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n * Normally, two input characters are represented by 11 bits.\n *\n * @type {Object}\n */ exports.ALPHANUMERIC = {\n    id: \"Alphanumeric\",\n    bit: 1 << 1,\n    ccBits: [\n        9,\n        11,\n        13\n    ]\n};\n/**\n * In byte mode, data is encoded at 8 bits per character.\n *\n * @type {Object}\n */ exports.BYTE = {\n    id: \"Byte\",\n    bit: 1 << 2,\n    ccBits: [\n        8,\n        16,\n        16\n    ]\n};\n/**\n * The Kanji mode efficiently encodes Kanji characters in accordance with\n * the Shift JIS system based on JIS X 0208.\n * The Shift JIS values are shifted from the JIS X 0208 values.\n * JIS X 0208 gives details of the shift coded representation.\n * Each two-byte character value is compacted to a 13-bit binary codeword.\n *\n * @type {Object}\n */ exports.KANJI = {\n    id: \"Kanji\",\n    bit: 1 << 3,\n    ccBits: [\n        8,\n        10,\n        12\n    ]\n};\n/**\n * Mixed mode will contain a sequences of data in a combination of any of\n * the modes described above\n *\n * @type {Object}\n */ exports.MIXED = {\n    bit: -1\n};\n/**\n * Returns the number of bits needed to store the data length\n * according to QR Code specifications.\n *\n * @param  {Mode}   mode    Data mode\n * @param  {Number} version QR Code version\n * @return {Number}         Number of bits\n */ exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n    if (!mode.ccBits) throw new Error(\"Invalid mode: \" + mode);\n    if (!VersionCheck.isValid(version)) {\n        throw new Error(\"Invalid version: \" + version);\n    }\n    if (version >= 1 && version < 10) return mode.ccBits[0];\n    else if (version < 27) return mode.ccBits[1];\n    return mode.ccBits[2];\n};\n/**\n * Returns the most efficient mode to store the specified data\n *\n * @param  {String} dataStr Input data string\n * @return {Mode}           Best mode\n */ exports.getBestModeForData = function getBestModeForData(dataStr) {\n    if (Regex.testNumeric(dataStr)) return exports.NUMERIC;\n    else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;\n    else if (Regex.testKanji(dataStr)) return exports.KANJI;\n    else return exports.BYTE;\n};\n/**\n * Return mode name as string\n *\n * @param {Mode} mode Mode object\n * @returns {String}  Mode name\n */ exports.toString = function toString(mode) {\n    if (mode && mode.id) return mode.id;\n    throw new Error(\"Invalid mode\");\n};\n/**\n * Check if input param is a valid mode object\n *\n * @param   {Mode}    mode Mode object\n * @returns {Boolean} True if valid mode, false otherwise\n */ exports.isValid = function isValid(mode) {\n    return mode && mode.bit && mode.ccBits;\n};\n/**\n * Get mode object from its name\n *\n * @param   {String} string Mode name\n * @returns {Mode}          Mode object\n */ function fromString(string) {\n    if (typeof string !== \"string\") {\n        throw new Error(\"Param is not a string\");\n    }\n    const lcStr = string.toLowerCase();\n    switch(lcStr){\n        case \"numeric\":\n            return exports.NUMERIC;\n        case \"alphanumeric\":\n            return exports.ALPHANUMERIC;\n        case \"kanji\":\n            return exports.KANJI;\n        case \"byte\":\n            return exports.BYTE;\n        default:\n            throw new Error(\"Unknown mode: \" + string);\n    }\n}\n/**\n * Returns mode from a value.\n * If value is not a valid mode, returns defaultValue\n *\n * @param  {Mode|String} value        Encoding mode\n * @param  {Mode}        defaultValue Fallback value\n * @return {Mode}                     Encoding mode\n */ exports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n        return value;\n    }\n    try {\n        return fromString(value);\n    } catch (e) {\n        return defaultValue;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/numeric-data.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/numeric-data.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js\");\nfunction NumericData(data) {\n    this.mode = Mode.NUMERIC;\n    this.data = data.toString();\n}\nNumericData.getBitsLength = function getBitsLength(length) {\n    return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n};\nNumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nNumericData.prototype.getBitsLength = function getBitsLength() {\n    return NumericData.getBitsLength(this.data.length);\n};\nNumericData.prototype.write = function write(bitBuffer) {\n    let i, group, value;\n    // The input data string is divided into groups of three digits,\n    // and each group is converted to its 10-bit binary equivalent.\n    for(i = 0; i + 3 <= this.data.length; i += 3){\n        group = this.data.substr(i, 3);\n        value = parseInt(group, 10);\n        bitBuffer.put(value, 10);\n    }\n    // If the number of input digits is not an exact multiple of three,\n    // the final one or two digits are converted to 4 or 7 bits respectively.\n    const remainingNum = this.data.length - i;\n    if (remainingNum > 0) {\n        group = this.data.substr(i);\n        value = parseInt(group, 10);\n        bitBuffer.put(value, remainingNum * 3 + 1);\n    }\n};\nmodule.exports = NumericData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbnVtZXJpYy1kYXRhLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVyQixTQUFTQyxZQUFhQyxJQUFJO0lBQ3hCLElBQUksQ0FBQ0MsSUFBSSxHQUFHSixLQUFLSyxPQUFPO0lBQ3hCLElBQUksQ0FBQ0YsSUFBSSxHQUFHQSxLQUFLRyxRQUFRO0FBQzNCO0FBRUFKLFlBQVlLLGFBQWEsR0FBRyxTQUFTQSxjQUFlQyxNQUFNO0lBQ3hELE9BQU8sS0FBS0MsS0FBS0MsS0FBSyxDQUFDRixTQUFTLEtBQU0sVUFBVSxJQUFNLFNBQVUsSUFBSyxJQUFJLElBQUs7QUFDaEY7QUFFQU4sWUFBWVMsU0FBUyxDQUFDQyxTQUFTLEdBQUcsU0FBU0E7SUFDekMsT0FBTyxJQUFJLENBQUNULElBQUksQ0FBQ0ssTUFBTTtBQUN6QjtBQUVBTixZQUFZUyxTQUFTLENBQUNKLGFBQWEsR0FBRyxTQUFTQTtJQUM3QyxPQUFPTCxZQUFZSyxhQUFhLENBQUMsSUFBSSxDQUFDSixJQUFJLENBQUNLLE1BQU07QUFDbkQ7QUFFQU4sWUFBWVMsU0FBUyxDQUFDRSxLQUFLLEdBQUcsU0FBU0EsTUFBT0MsU0FBUztJQUNyRCxJQUFJQyxHQUFHQyxPQUFPQztJQUVkLGdFQUFnRTtJQUNoRSwrREFBK0Q7SUFDL0QsSUFBS0YsSUFBSSxHQUFHQSxJQUFJLEtBQUssSUFBSSxDQUFDWixJQUFJLENBQUNLLE1BQU0sRUFBRU8sS0FBSyxFQUFHO1FBQzdDQyxRQUFRLElBQUksQ0FBQ2IsSUFBSSxDQUFDZSxNQUFNLENBQUNILEdBQUc7UUFDNUJFLFFBQVFFLFNBQVNILE9BQU87UUFFeEJGLFVBQVVNLEdBQUcsQ0FBQ0gsT0FBTztJQUN2QjtJQUVBLG1FQUFtRTtJQUNuRSx5RUFBeUU7SUFDekUsTUFBTUksZUFBZSxJQUFJLENBQUNsQixJQUFJLENBQUNLLE1BQU0sR0FBR087SUFDeEMsSUFBSU0sZUFBZSxHQUFHO1FBQ3BCTCxRQUFRLElBQUksQ0FBQ2IsSUFBSSxDQUFDZSxNQUFNLENBQUNIO1FBQ3pCRSxRQUFRRSxTQUFTSCxPQUFPO1FBRXhCRixVQUFVTSxHQUFHLENBQUNILE9BQU9JLGVBQWUsSUFBSTtJQUMxQztBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9udW1lcmljLWRhdGEuanM/Y2UwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcblxuZnVuY3Rpb24gTnVtZXJpY0RhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5OVU1FUklDXG4gIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKVxufVxuXG5OdW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiAxMCAqIE1hdGguZmxvb3IobGVuZ3RoIC8gMykgKyAoKGxlbmd0aCAlIDMpID8gKChsZW5ndGggJSAzKSAqIDMgKyAxKSA6IDApXG59XG5cbk51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5OdW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKCkge1xuICByZXR1cm4gTnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5OdW1lcmljRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoYml0QnVmZmVyKSB7XG4gIGxldCBpLCBncm91cCwgdmFsdWVcblxuICAvLyBUaGUgaW5wdXQgZGF0YSBzdHJpbmcgaXMgZGl2aWRlZCBpbnRvIGdyb3VwcyBvZiB0aHJlZSBkaWdpdHMsXG4gIC8vIGFuZCBlYWNoIGdyb3VwIGlzIGNvbnZlcnRlZCB0byBpdHMgMTAtYml0IGJpbmFyeSBlcXVpdmFsZW50LlxuICBmb3IgKGkgPSAwOyBpICsgMyA8PSB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBncm91cCA9IHRoaXMuZGF0YS5zdWJzdHIoaSwgMylcbiAgICB2YWx1ZSA9IHBhcnNlSW50KGdyb3VwLCAxMClcblxuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIDEwKVxuICB9XG5cbiAgLy8gSWYgdGhlIG51bWJlciBvZiBpbnB1dCBkaWdpdHMgaXMgbm90IGFuIGV4YWN0IG11bHRpcGxlIG9mIHRocmVlLFxuICAvLyB0aGUgZmluYWwgb25lIG9yIHR3byBkaWdpdHMgYXJlIGNvbnZlcnRlZCB0byA0IG9yIDcgYml0cyByZXNwZWN0aXZlbHkuXG4gIGNvbnN0IHJlbWFpbmluZ051bSA9IHRoaXMuZGF0YS5sZW5ndGggLSBpXG4gIGlmIChyZW1haW5pbmdOdW0gPiAwKSB7XG4gICAgZ3JvdXAgPSB0aGlzLmRhdGEuc3Vic3RyKGkpXG4gICAgdmFsdWUgPSBwYXJzZUludChncm91cCwgMTApXG5cbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCByZW1haW5pbmdOdW0gKiAzICsgMSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWVyaWNEYXRhXG4iXSwibmFtZXMiOlsiTW9kZSIsInJlcXVpcmUiLCJOdW1lcmljRGF0YSIsImRhdGEiLCJtb2RlIiwiTlVNRVJJQyIsInRvU3RyaW5nIiwiZ2V0Qml0c0xlbmd0aCIsImxlbmd0aCIsIk1hdGgiLCJmbG9vciIsInByb3RvdHlwZSIsImdldExlbmd0aCIsIndyaXRlIiwiYml0QnVmZmVyIiwiaSIsImdyb3VwIiwidmFsdWUiLCJzdWJzdHIiLCJwYXJzZUludCIsInB1dCIsInJlbWFpbmluZ051bSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/numeric-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/polynomial.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/polynomial.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const GF = __webpack_require__(/*! ./galois-field */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/galois-field.js\");\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Uint8Array} p1 Polynomial\n * @param  {Uint8Array} p2 Polynomial\n * @return {Uint8Array}    Product of p1 and p2\n */ exports.mul = function mul(p1, p2) {\n    const coeff = new Uint8Array(p1.length + p2.length - 1);\n    for(let i = 0; i < p1.length; i++){\n        for(let j = 0; j < p2.length; j++){\n            coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n        }\n    }\n    return coeff;\n};\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Uint8Array} divident Polynomial\n * @param  {Uint8Array} divisor  Polynomial\n * @return {Uint8Array}          Remainder\n */ exports.mod = function mod(divident, divisor) {\n    let result = new Uint8Array(divident);\n    while(result.length - divisor.length >= 0){\n        const coeff = result[0];\n        for(let i = 0; i < divisor.length; i++){\n            result[i] ^= GF.mul(divisor[i], coeff);\n        }\n        // remove all zeros from buffer head\n        let offset = 0;\n        while(offset < result.length && result[offset] === 0)offset++;\n        result = result.slice(offset);\n    }\n    return result;\n};\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Uint8Array}    Buffer containing polynomial coefficients\n */ exports.generateECPolynomial = function generateECPolynomial(degree) {\n    let poly = new Uint8Array([\n        1\n    ]);\n    for(let i = 0; i < degree; i++){\n        poly = exports.mul(poly, new Uint8Array([\n            1,\n            GF.exp(i)\n        ]));\n    }\n    return poly;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcG9seW5vbWlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUVuQjs7Ozs7O0NBTUMsR0FDREMsV0FBVyxHQUFHLFNBQVNDLElBQUtDLEVBQUUsRUFBRUMsRUFBRTtJQUNoQyxNQUFNQyxRQUFRLElBQUlDLFdBQVdILEdBQUdJLE1BQU0sR0FBR0gsR0FBR0csTUFBTSxHQUFHO0lBRXJELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxHQUFHSSxNQUFNLEVBQUVDLElBQUs7UUFDbEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLEdBQUdHLE1BQU0sRUFBRUUsSUFBSztZQUNsQ0osS0FBSyxDQUFDRyxJQUFJQyxFQUFFLElBQUlWLEdBQUdHLEdBQUcsQ0FBQ0MsRUFBRSxDQUFDSyxFQUFFLEVBQUVKLEVBQUUsQ0FBQ0ssRUFBRTtRQUNyQztJQUNGO0lBRUEsT0FBT0o7QUFDVDtBQUVBOzs7Ozs7Q0FNQyxHQUNESixXQUFXLEdBQUcsU0FBU1MsSUFBS0MsUUFBUSxFQUFFQyxPQUFPO0lBQzNDLElBQUlDLFNBQVMsSUFBSVAsV0FBV0s7SUFFNUIsTUFBTyxPQUFRSixNQUFNLEdBQUdLLFFBQVFMLE1BQU0sSUFBSyxFQUFHO1FBQzVDLE1BQU1GLFFBQVFRLE1BQU0sQ0FBQyxFQUFFO1FBRXZCLElBQUssSUFBSUwsSUFBSSxHQUFHQSxJQUFJSSxRQUFRTCxNQUFNLEVBQUVDLElBQUs7WUFDdkNLLE1BQU0sQ0FBQ0wsRUFBRSxJQUFJVCxHQUFHRyxHQUFHLENBQUNVLE9BQU8sQ0FBQ0osRUFBRSxFQUFFSDtRQUNsQztRQUVBLG9DQUFvQztRQUNwQyxJQUFJUyxTQUFTO1FBQ2IsTUFBT0EsU0FBU0QsT0FBT04sTUFBTSxJQUFJTSxNQUFNLENBQUNDLE9BQU8sS0FBSyxFQUFHQTtRQUN2REQsU0FBU0EsT0FBT0UsS0FBSyxDQUFDRDtJQUN4QjtJQUVBLE9BQU9EO0FBQ1Q7QUFFQTs7Ozs7O0NBTUMsR0FDRFosNEJBQTRCLEdBQUcsU0FBU2UscUJBQXNCQyxNQUFNO0lBQ2xFLElBQUlDLE9BQU8sSUFBSVosV0FBVztRQUFDO0tBQUU7SUFDN0IsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlTLFFBQVFULElBQUs7UUFDL0JVLE9BQU9qQixRQUFRQyxHQUFHLENBQUNnQixNQUFNLElBQUlaLFdBQVc7WUFBQztZQUFHUCxHQUFHb0IsR0FBRyxDQUFDWDtTQUFHO0lBQ3hEO0lBRUEsT0FBT1U7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcG9seW5vbWlhbC5qcz9jMWQzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEdGID0gcmVxdWlyZSgnLi9nYWxvaXMtZmllbGQnKVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHBvbHlub21pYWxzIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBwMSBQb2x5bm9taWFsXG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBwMiBQb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICBQcm9kdWN0IG9mIHAxIGFuZCBwMlxuICovXG5leHBvcnRzLm11bCA9IGZ1bmN0aW9uIG11bCAocDEsIHAyKSB7XG4gIGNvbnN0IGNvZWZmID0gbmV3IFVpbnQ4QXJyYXkocDEubGVuZ3RoICsgcDIubGVuZ3RoIC0gMSlcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHAxLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwMi5sZW5ndGg7IGorKykge1xuICAgICAgY29lZmZbaSArIGpdIF49IEdGLm11bChwMVtpXSwgcDJbal0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvZWZmXG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSByZW1haW5kZXIgb2YgcG9seW5vbWlhbHMgZGl2aXNpb25cbiAqXG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBkaXZpZGVudCBQb2x5bm9taWFsXG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBkaXZpc29yICBQb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICAgICAgICBSZW1haW5kZXJcbiAqL1xuZXhwb3J0cy5tb2QgPSBmdW5jdGlvbiBtb2QgKGRpdmlkZW50LCBkaXZpc29yKSB7XG4gIGxldCByZXN1bHQgPSBuZXcgVWludDhBcnJheShkaXZpZGVudClcblxuICB3aGlsZSAoKHJlc3VsdC5sZW5ndGggLSBkaXZpc29yLmxlbmd0aCkgPj0gMCkge1xuICAgIGNvbnN0IGNvZWZmID0gcmVzdWx0WzBdXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpdmlzb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSBePSBHRi5tdWwoZGl2aXNvcltpXSwgY29lZmYpXG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGFsbCB6ZXJvcyBmcm9tIGJ1ZmZlciBoZWFkXG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICB3aGlsZSAob2Zmc2V0IDwgcmVzdWx0Lmxlbmd0aCAmJiByZXN1bHRbb2Zmc2V0XSA9PT0gMCkgb2Zmc2V0KytcbiAgICByZXN1bHQgPSByZXN1bHQuc2xpY2Uob2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGFuIGlycmVkdWNpYmxlIGdlbmVyYXRvciBwb2x5bm9taWFsIG9mIHNwZWNpZmllZCBkZWdyZWVcbiAqICh1c2VkIGJ5IFJlZWQtU29sb21vbiBlbmNvZGVyKVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlIERlZ3JlZSBvZiB0aGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9ICAgIEJ1ZmZlciBjb250YWluaW5nIHBvbHlub21pYWwgY29lZmZpY2llbnRzXG4gKi9cbmV4cG9ydHMuZ2VuZXJhdGVFQ1BvbHlub21pYWwgPSBmdW5jdGlvbiBnZW5lcmF0ZUVDUG9seW5vbWlhbCAoZGVncmVlKSB7XG4gIGxldCBwb2x5ID0gbmV3IFVpbnQ4QXJyYXkoWzFdKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZ3JlZTsgaSsrKSB7XG4gICAgcG9seSA9IGV4cG9ydHMubXVsKHBvbHksIG5ldyBVaW50OEFycmF5KFsxLCBHRi5leHAoaSldKSlcbiAgfVxuXG4gIHJldHVybiBwb2x5XG59XG4iXSwibmFtZXMiOlsiR0YiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIm11bCIsInAxIiwicDIiLCJjb2VmZiIsIlVpbnQ4QXJyYXkiLCJsZW5ndGgiLCJpIiwiaiIsIm1vZCIsImRpdmlkZW50IiwiZGl2aXNvciIsInJlc3VsdCIsIm9mZnNldCIsInNsaWNlIiwiZ2VuZXJhdGVFQ1BvbHlub21pYWwiLCJkZWdyZWUiLCJwb2x5IiwiZXhwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/polynomial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/qrcode.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/qrcode.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js\");\nconst ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-level.js\");\nconst BitBuffer = __webpack_require__(/*! ./bit-buffer */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/bit-buffer.js\");\nconst BitMatrix = __webpack_require__(/*! ./bit-matrix */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/bit-matrix.js\");\nconst AlignmentPattern = __webpack_require__(/*! ./alignment-pattern */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/alignment-pattern.js\");\nconst FinderPattern = __webpack_require__(/*! ./finder-pattern */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/finder-pattern.js\");\nconst MaskPattern = __webpack_require__(/*! ./mask-pattern */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mask-pattern.js\");\nconst ECCode = __webpack_require__(/*! ./error-correction-code */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-code.js\");\nconst ReedSolomonEncoder = __webpack_require__(/*! ./reed-solomon-encoder */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/reed-solomon-encoder.js\");\nconst Version = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version.js\");\nconst FormatInfo = __webpack_require__(/*! ./format-info */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/format-info.js\");\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js\");\nconst Segments = __webpack_require__(/*! ./segments */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/segments.js\");\n/**\n * QRCode for JavaScript\n *\n * modified by Ryan Day for nodejs support\n * Copyright (c) 2011 Ryan Day\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n//---------------------------------------------------------------------\n// QRCode for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//   http://www.opensource.org/licenses/mit-license.php\n//\n// The word \"QR Code\" is registered trademark of\n// DENSO WAVE INCORPORATED\n//   http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n*/ /**\n * Add finder patterns bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupFinderPattern(matrix, version) {\n    const size = matrix.size;\n    const pos = FinderPattern.getPositions(version);\n    for(let i = 0; i < pos.length; i++){\n        const row = pos[i][0];\n        const col = pos[i][1];\n        for(let r = -1; r <= 7; r++){\n            if (row + r <= -1 || size <= row + r) continue;\n            for(let c = -1; c <= 7; c++){\n                if (col + c <= -1 || size <= col + c) continue;\n                if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {\n                    matrix.set(row + r, col + c, true, true);\n                } else {\n                    matrix.set(row + r, col + c, false, true);\n                }\n            }\n        }\n    }\n}\n/**\n * Add timing pattern bits to matrix\n *\n * Note: this function must be called before {@link setupAlignmentPattern}\n *\n * @param  {BitMatrix} matrix Modules matrix\n */ function setupTimingPattern(matrix) {\n    const size = matrix.size;\n    for(let r = 8; r < size - 8; r++){\n        const value = r % 2 === 0;\n        matrix.set(r, 6, value, true);\n        matrix.set(6, r, value, true);\n    }\n}\n/**\n * Add alignment patterns bits to matrix\n *\n * Note: this function must be called after {@link setupTimingPattern}\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupAlignmentPattern(matrix, version) {\n    const pos = AlignmentPattern.getPositions(version);\n    for(let i = 0; i < pos.length; i++){\n        const row = pos[i][0];\n        const col = pos[i][1];\n        for(let r = -2; r <= 2; r++){\n            for(let c = -2; c <= 2; c++){\n                if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {\n                    matrix.set(row + r, col + c, true, true);\n                } else {\n                    matrix.set(row + r, col + c, false, true);\n                }\n            }\n        }\n    }\n}\n/**\n * Add version info bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupVersionInfo(matrix, version) {\n    const size = matrix.size;\n    const bits = Version.getEncodedBits(version);\n    let row, col, mod;\n    for(let i = 0; i < 18; i++){\n        row = Math.floor(i / 3);\n        col = i % 3 + size - 8 - 3;\n        mod = (bits >> i & 1) === 1;\n        matrix.set(row, col, mod, true);\n        matrix.set(col, row, mod, true);\n    }\n}\n/**\n * Add format info bits to matrix\n *\n * @param  {BitMatrix} matrix               Modules matrix\n * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level\n * @param  {Number}    maskPattern          Mask pattern reference value\n */ function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {\n    const size = matrix.size;\n    const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);\n    let i, mod;\n    for(i = 0; i < 15; i++){\n        mod = (bits >> i & 1) === 1;\n        // vertical\n        if (i < 6) {\n            matrix.set(i, 8, mod, true);\n        } else if (i < 8) {\n            matrix.set(i + 1, 8, mod, true);\n        } else {\n            matrix.set(size - 15 + i, 8, mod, true);\n        }\n        // horizontal\n        if (i < 8) {\n            matrix.set(8, size - i - 1, mod, true);\n        } else if (i < 9) {\n            matrix.set(8, 15 - i - 1 + 1, mod, true);\n        } else {\n            matrix.set(8, 15 - i - 1, mod, true);\n        }\n    }\n    // fixed module\n    matrix.set(size - 8, 8, 1, true);\n}\n/**\n * Add encoded data bits to matrix\n *\n * @param  {BitMatrix}  matrix Modules matrix\n * @param  {Uint8Array} data   Data codewords\n */ function setupData(matrix, data) {\n    const size = matrix.size;\n    let inc = -1;\n    let row = size - 1;\n    let bitIndex = 7;\n    let byteIndex = 0;\n    for(let col = size - 1; col > 0; col -= 2){\n        if (col === 6) col--;\n        while(true){\n            for(let c = 0; c < 2; c++){\n                if (!matrix.isReserved(row, col - c)) {\n                    let dark = false;\n                    if (byteIndex < data.length) {\n                        dark = (data[byteIndex] >>> bitIndex & 1) === 1;\n                    }\n                    matrix.set(row, col - c, dark);\n                    bitIndex--;\n                    if (bitIndex === -1) {\n                        byteIndex++;\n                        bitIndex = 7;\n                    }\n                }\n            }\n            row += inc;\n            if (row < 0 || size <= row) {\n                row -= inc;\n                inc = -inc;\n                break;\n            }\n        }\n    }\n}\n/**\n * Create encoded codewords from data input\n *\n * @param  {Number}   version              QR Code version\n * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level\n * @param  {ByteData} data                 Data input\n * @return {Uint8Array}                    Buffer containing encoded codewords\n */ function createData(version, errorCorrectionLevel, segments) {\n    // Prepare data buffer\n    const buffer = new BitBuffer();\n    segments.forEach(function(data) {\n        // prefix data with mode indicator (4 bits)\n        buffer.put(data.mode.bit, 4);\n        // Prefix data with character count indicator.\n        // The character count indicator is a string of bits that represents the\n        // number of characters that are being encoded.\n        // The character count indicator must be placed after the mode indicator\n        // and must be a certain number of bits long, depending on the QR version\n        // and data mode\n        // @see {@link Mode.getCharCountIndicator}.\n        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version));\n        // add binary data sequence to buffer\n        data.write(buffer);\n    });\n    // Calculate required number of bits\n    const totalCodewords = Utils.getSymbolTotalCodewords(version);\n    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    // Add a terminator.\n    // If the bit string is shorter than the total number of required bits,\n    // a terminator of up to four 0s must be added to the right side of the string.\n    // If the bit string is more than four bits shorter than the required number of bits,\n    // add four 0s to the end.\n    if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {\n        buffer.put(0, 4);\n    }\n    // If the bit string is fewer than four bits shorter, add only the number of 0s that\n    // are needed to reach the required number of bits.\n    // After adding the terminator, if the number of bits in the string is not a multiple of 8,\n    // pad the string on the right with 0s to make the string's length a multiple of 8.\n    while(buffer.getLengthInBits() % 8 !== 0){\n        buffer.putBit(0);\n    }\n    // Add pad bytes if the string is still shorter than the total number of required bits.\n    // Extend the buffer to fill the data capacity of the symbol corresponding to\n    // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)\n    // and 00010001 (0x11) alternately.\n    const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;\n    for(let i = 0; i < remainingByte; i++){\n        buffer.put(i % 2 ? 0x11 : 0xEC, 8);\n    }\n    return createCodewords(buffer, version, errorCorrectionLevel);\n}\n/**\n * Encode input data with Reed-Solomon and return codewords with\n * relative error correction bits\n *\n * @param  {BitBuffer} bitBuffer            Data to encode\n * @param  {Number}    version              QR Code version\n * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level\n * @return {Uint8Array}                     Buffer containing encoded codewords\n */ function createCodewords(bitBuffer, version, errorCorrectionLevel) {\n    // Total codewords for this QR code version (Data + Error correction)\n    const totalCodewords = Utils.getSymbolTotalCodewords(version);\n    // Total number of error correction codewords\n    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    // Total number of data codewords\n    const dataTotalCodewords = totalCodewords - ecTotalCodewords;\n    // Total number of blocks\n    const ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel);\n    // Calculate how many blocks each group should contain\n    const blocksInGroup2 = totalCodewords % ecTotalBlocks;\n    const blocksInGroup1 = ecTotalBlocks - blocksInGroup2;\n    const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);\n    const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);\n    const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;\n    // Number of EC codewords is the same for both groups\n    const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;\n    // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount\n    const rs = new ReedSolomonEncoder(ecCount);\n    let offset = 0;\n    const dcData = new Array(ecTotalBlocks);\n    const ecData = new Array(ecTotalBlocks);\n    let maxDataSize = 0;\n    const buffer = new Uint8Array(bitBuffer.buffer);\n    // Divide the buffer into the required number of blocks\n    for(let b = 0; b < ecTotalBlocks; b++){\n        const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;\n        // extract a block of data from buffer\n        dcData[b] = buffer.slice(offset, offset + dataSize);\n        // Calculate EC codewords for this data block\n        ecData[b] = rs.encode(dcData[b]);\n        offset += dataSize;\n        maxDataSize = Math.max(maxDataSize, dataSize);\n    }\n    // Create final data\n    // Interleave the data and error correction codewords from each block\n    const data = new Uint8Array(totalCodewords);\n    let index = 0;\n    let i, r;\n    // Add data codewords\n    for(i = 0; i < maxDataSize; i++){\n        for(r = 0; r < ecTotalBlocks; r++){\n            if (i < dcData[r].length) {\n                data[index++] = dcData[r][i];\n            }\n        }\n    }\n    // Apped EC codewords\n    for(i = 0; i < ecCount; i++){\n        for(r = 0; r < ecTotalBlocks; r++){\n            data[index++] = ecData[r][i];\n        }\n    }\n    return data;\n}\n/**\n * Build QR Code symbol\n *\n * @param  {String} data                 Input string\n * @param  {Number} version              QR Code version\n * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level\n * @param  {MaskPattern} maskPattern     Mask pattern\n * @return {Object}                      Object containing symbol data\n */ function createSymbol(data, version, errorCorrectionLevel, maskPattern) {\n    let segments;\n    if (Array.isArray(data)) {\n        segments = Segments.fromArray(data);\n    } else if (typeof data === \"string\") {\n        let estimatedVersion = version;\n        if (!estimatedVersion) {\n            const rawSegments = Segments.rawSplit(data);\n            // Estimate best version that can contain raw splitted segments\n            estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);\n        }\n        // Build optimized segments\n        // If estimated version is undefined, try with the highest version\n        segments = Segments.fromString(data, estimatedVersion || 40);\n    } else {\n        throw new Error(\"Invalid data\");\n    }\n    // Get the min version that can contain data\n    const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);\n    // If no version is found, data cannot be stored\n    if (!bestVersion) {\n        throw new Error(\"The amount of data is too big to be stored in a QR Code\");\n    }\n    // If not specified, use min version as default\n    if (!version) {\n        version = bestVersion;\n    // Check if the specified version can contain the data\n    } else if (version < bestVersion) {\n        throw new Error(\"\\n\" + \"The chosen QR Code version cannot contain this amount of data.\\n\" + \"Minimum version required to store current data is: \" + bestVersion + \".\\n\");\n    }\n    const dataBits = createData(version, errorCorrectionLevel, segments);\n    // Allocate matrix buffer\n    const moduleCount = Utils.getSymbolSize(version);\n    const modules = new BitMatrix(moduleCount);\n    // Add function modules\n    setupFinderPattern(modules, version);\n    setupTimingPattern(modules);\n    setupAlignmentPattern(modules, version);\n    // Add temporary dummy bits for format info just to set them as reserved.\n    // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}\n    // since the masking operation must be performed only on the encoding region.\n    // These blocks will be replaced with correct values later in code.\n    setupFormatInfo(modules, errorCorrectionLevel, 0);\n    if (version >= 7) {\n        setupVersionInfo(modules, version);\n    }\n    // Add data codewords\n    setupData(modules, dataBits);\n    if (isNaN(maskPattern)) {\n        // Find best mask pattern\n        maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));\n    }\n    // Apply mask pattern\n    MaskPattern.applyMask(maskPattern, modules);\n    // Replace format info bits with correct values\n    setupFormatInfo(modules, errorCorrectionLevel, maskPattern);\n    return {\n        modules: modules,\n        version: version,\n        errorCorrectionLevel: errorCorrectionLevel,\n        maskPattern: maskPattern,\n        segments: segments\n    };\n}\n/**\n * QR Code\n *\n * @param {String | Array} data                 Input data\n * @param {Object} options                      Optional configurations\n * @param {Number} options.version              QR Code version\n * @param {String} options.errorCorrectionLevel Error correction level\n * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis\n */ exports.create = function create(data, options) {\n    if (typeof data === \"undefined\" || data === \"\") {\n        throw new Error(\"No input text\");\n    }\n    let errorCorrectionLevel = ECLevel.M;\n    let version;\n    let mask;\n    if (typeof options !== \"undefined\") {\n        // Use higher error correction level as default\n        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);\n        version = Version.from(options.version);\n        mask = MaskPattern.from(options.maskPattern);\n        if (options.toSJISFunc) {\n            Utils.setToSJISFunction(options.toSJISFunc);\n        }\n    }\n    return createSymbol(data, version, errorCorrectionLevel, mask);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcXJjb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1HLFlBQVlILG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1JLG1CQUFtQkosbUJBQU9BLENBQUM7QUFDakMsTUFBTUssZ0JBQWdCTCxtQkFBT0EsQ0FBQztBQUM5QixNQUFNTSxjQUFjTixtQkFBT0EsQ0FBQztBQUM1QixNQUFNTyxTQUFTUCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNUSxxQkFBcUJSLG1CQUFPQSxDQUFDO0FBQ25DLE1BQU1TLFVBQVVULG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1VLGFBQWFWLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU1XLE9BQU9YLG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU1ZLFdBQVdaLG1CQUFPQSxDQUFDO0FBRXpCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsR0FFQTs7Ozs7Q0FLQyxHQUNELFNBQVNhLG1CQUFvQkMsTUFBTSxFQUFFQyxPQUFPO0lBQzFDLE1BQU1DLE9BQU9GLE9BQU9FLElBQUk7SUFDeEIsTUFBTUMsTUFBTVosY0FBY2EsWUFBWSxDQUFDSDtJQUV2QyxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUYsSUFBSUcsTUFBTSxFQUFFRCxJQUFLO1FBQ25DLE1BQU1FLE1BQU1KLEdBQUcsQ0FBQ0UsRUFBRSxDQUFDLEVBQUU7UUFDckIsTUFBTUcsTUFBTUwsR0FBRyxDQUFDRSxFQUFFLENBQUMsRUFBRTtRQUVyQixJQUFLLElBQUlJLElBQUksQ0FBQyxHQUFHQSxLQUFLLEdBQUdBLElBQUs7WUFDNUIsSUFBSUYsTUFBTUUsS0FBSyxDQUFDLEtBQUtQLFFBQVFLLE1BQU1FLEdBQUc7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LElBQUksQ0FBQ0gsUUFBUXZFLG9CQUFvQixFQUFFbkMsUUFBUTJHLENBQUM7UUFDM0U3RixVQUFVTixRQUFRcUcsSUFBSSxDQUFDSCxRQUFRNUYsT0FBTztRQUN0QzhGLE9BQU92RyxZQUFZd0csSUFBSSxDQUFDSCxRQUFRdEUsV0FBVztRQUUzQyxJQUFJc0UsUUFBUUksVUFBVSxFQUFFO1lBQ3RCaEgsTUFBTWlILGlCQUFpQixDQUFDTCxRQUFRSSxVQUFVO1FBQzVDO0lBQ0Y7SUFFQSxPQUFPeEIsYUFBYWhELE1BQU14QixTQUFTcUIsc0JBQXNCeUU7QUFDM0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3FyY29kZS5qcz9kODY3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5jb25zdCBFQ0xldmVsID0gcmVxdWlyZSgnLi9lcnJvci1jb3JyZWN0aW9uLWxldmVsJylcbmNvbnN0IEJpdEJ1ZmZlciA9IHJlcXVpcmUoJy4vYml0LWJ1ZmZlcicpXG5jb25zdCBCaXRNYXRyaXggPSByZXF1aXJlKCcuL2JpdC1tYXRyaXgnKVxuY29uc3QgQWxpZ25tZW50UGF0dGVybiA9IHJlcXVpcmUoJy4vYWxpZ25tZW50LXBhdHRlcm4nKVxuY29uc3QgRmluZGVyUGF0dGVybiA9IHJlcXVpcmUoJy4vZmluZGVyLXBhdHRlcm4nKVxuY29uc3QgTWFza1BhdHRlcm4gPSByZXF1aXJlKCcuL21hc2stcGF0dGVybicpXG5jb25zdCBFQ0NvZGUgPSByZXF1aXJlKCcuL2Vycm9yLWNvcnJlY3Rpb24tY29kZScpXG5jb25zdCBSZWVkU29sb21vbkVuY29kZXIgPSByZXF1aXJlKCcuL3JlZWQtc29sb21vbi1lbmNvZGVyJylcbmNvbnN0IFZlcnNpb24gPSByZXF1aXJlKCcuL3ZlcnNpb24nKVxuY29uc3QgRm9ybWF0SW5mbyA9IHJlcXVpcmUoJy4vZm9ybWF0LWluZm8nKVxuY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5jb25zdCBTZWdtZW50cyA9IHJlcXVpcmUoJy4vc2VnbWVudHMnKVxuXG4vKipcbiAqIFFSQ29kZSBmb3IgSmF2YVNjcmlwdFxuICpcbiAqIG1vZGlmaWVkIGJ5IFJ5YW4gRGF5IGZvciBub2RlanMgc3VwcG9ydFxuICogQ29weXJpZ2h0IChjKSAyMDExIFJ5YW4gRGF5XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICpcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBRUkNvZGUgZm9yIEphdmFTY3JpcHRcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgS2F6dWhpa28gQXJhc2Vcbi8vXG4vLyBVUkw6IGh0dHA6Ly93d3cuZC1wcm9qZWN0LmNvbS9cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4vLyAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4vL1xuLy8gVGhlIHdvcmQgXCJRUiBDb2RlXCIgaXMgcmVnaXN0ZXJlZCB0cmFkZW1hcmsgb2Zcbi8vIERFTlNPIFdBVkUgSU5DT1JQT1JBVEVEXG4vLyAgIGh0dHA6Ly93d3cuZGVuc28td2F2ZS5jb20vcXJjb2RlL2ZhcXBhdGVudC1lLmh0bWxcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuLyoqXG4gKiBBZGQgZmluZGVyIHBhdHRlcm5zIGJpdHMgdG8gbWF0cml4XG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSBtYXRyaXggIE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKi9cbmZ1bmN0aW9uIHNldHVwRmluZGVyUGF0dGVybiAobWF0cml4LCB2ZXJzaW9uKSB7XG4gIGNvbnN0IHNpemUgPSBtYXRyaXguc2l6ZVxuICBjb25zdCBwb3MgPSBGaW5kZXJQYXR0ZXJuLmdldFBvc2l0aW9ucyh2ZXJzaW9uKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgcm93ID0gcG9zW2ldWzBdXG4gICAgY29uc3QgY29sID0gcG9zW2ldWzFdXG5cbiAgICBmb3IgKGxldCByID0gLTE7IHIgPD0gNzsgcisrKSB7XG4gICAgICBpZiAocm93ICsgciA8PSAtMSB8fCBzaXplIDw9IHJvdyArIHIpIGNvbnRpbnVlXG5cbiAgICAgIGZvciAobGV0IGMgPSAtMTsgYyA8PSA3OyBjKyspIHtcbiAgICAgICAgaWYgKGNvbCArIGMgPD0gLTEgfHwgc2l6ZSA8PSBjb2wgKyBjKSBjb250aW51ZVxuXG4gICAgICAgIGlmICgociA+PSAwICYmIHIgPD0gNiAmJiAoYyA9PT0gMCB8fCBjID09PSA2KSkgfHxcbiAgICAgICAgICAoYyA+PSAwICYmIGMgPD0gNiAmJiAociA9PT0gMCB8fCByID09PSA2KSkgfHxcbiAgICAgICAgICAociA+PSAyICYmIHIgPD0gNCAmJiBjID49IDIgJiYgYyA8PSA0KSkge1xuICAgICAgICAgIG1hdHJpeC5zZXQocm93ICsgciwgY29sICsgYywgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRyaXguc2V0KHJvdyArIHIsIGNvbCArIGMsIGZhbHNlLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWRkIHRpbWluZyBwYXR0ZXJuIGJpdHMgdG8gbWF0cml4XG4gKlxuICogTm90ZTogdGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUge0BsaW5rIHNldHVwQWxpZ25tZW50UGF0dGVybn1cbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCBNb2R1bGVzIG1hdHJpeFxuICovXG5mdW5jdGlvbiBzZXR1cFRpbWluZ1BhdHRlcm4gKG1hdHJpeCkge1xuICBjb25zdCBzaXplID0gbWF0cml4LnNpemVcblxuICBmb3IgKGxldCByID0gODsgciA8IHNpemUgLSA4OyByKyspIHtcbiAgICBjb25zdCB2YWx1ZSA9IHIgJSAyID09PSAwXG4gICAgbWF0cml4LnNldChyLCA2LCB2YWx1ZSwgdHJ1ZSlcbiAgICBtYXRyaXguc2V0KDYsIHIsIHZhbHVlLCB0cnVlKVxuICB9XG59XG5cbi8qKlxuICogQWRkIGFsaWdubWVudCBwYXR0ZXJucyBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBjYWxsZWQgYWZ0ZXIge0BsaW5rIHNldHVwVGltaW5nUGF0dGVybn1cbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCAgTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge051bWJlcn0gICAgdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqL1xuZnVuY3Rpb24gc2V0dXBBbGlnbm1lbnRQYXR0ZXJuIChtYXRyaXgsIHZlcnNpb24pIHtcbiAgY29uc3QgcG9zID0gQWxpZ25tZW50UGF0dGVybi5nZXRQb3NpdGlvbnModmVyc2lvbilcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHJvdyA9IHBvc1tpXVswXVxuICAgIGNvbnN0IGNvbCA9IHBvc1tpXVsxXVxuXG4gICAgZm9yIChsZXQgciA9IC0yOyByIDw9IDI7IHIrKykge1xuICAgICAgZm9yIChsZXQgYyA9IC0yOyBjIDw9IDI7IGMrKykge1xuICAgICAgICBpZiAociA9PT0gLTIgfHwgciA9PT0gMiB8fCBjID09PSAtMiB8fCBjID09PSAyIHx8XG4gICAgICAgICAgKHIgPT09IDAgJiYgYyA9PT0gMCkpIHtcbiAgICAgICAgICBtYXRyaXguc2V0KHJvdyArIHIsIGNvbCArIGMsIHRydWUsIHRydWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0cml4LnNldChyb3cgKyByLCBjb2wgKyBjLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFkZCB2ZXJzaW9uIGluZm8gYml0cyB0byBtYXRyaXhcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCAgTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge051bWJlcn0gICAgdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqL1xuZnVuY3Rpb24gc2V0dXBWZXJzaW9uSW5mbyAobWF0cml4LCB2ZXJzaW9uKSB7XG4gIGNvbnN0IHNpemUgPSBtYXRyaXguc2l6ZVxuICBjb25zdCBiaXRzID0gVmVyc2lvbi5nZXRFbmNvZGVkQml0cyh2ZXJzaW9uKVxuICBsZXQgcm93LCBjb2wsIG1vZFxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTg7IGkrKykge1xuICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIDMpXG4gICAgY29sID0gaSAlIDMgKyBzaXplIC0gOCAtIDNcbiAgICBtb2QgPSAoKGJpdHMgPj4gaSkgJiAxKSA9PT0gMVxuXG4gICAgbWF0cml4LnNldChyb3csIGNvbCwgbW9kLCB0cnVlKVxuICAgIG1hdHJpeC5zZXQoY29sLCByb3csIG1vZCwgdHJ1ZSlcbiAgfVxufVxuXG4vKipcbiAqIEFkZCBmb3JtYXQgaW5mbyBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4ICAgICAgICAgICAgICAgTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge0Vycm9yQ29ycmVjdGlvbkxldmVsfSAgICBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIG1hc2tQYXR0ZXJuICAgICAgICAgIE1hc2sgcGF0dGVybiByZWZlcmVuY2UgdmFsdWVcbiAqL1xuZnVuY3Rpb24gc2V0dXBGb3JtYXRJbmZvIChtYXRyaXgsIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrUGF0dGVybikge1xuICBjb25zdCBzaXplID0gbWF0cml4LnNpemVcbiAgY29uc3QgYml0cyA9IEZvcm1hdEluZm8uZ2V0RW5jb2RlZEJpdHMoZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2tQYXR0ZXJuKVxuICBsZXQgaSwgbW9kXG5cbiAgZm9yIChpID0gMDsgaSA8IDE1OyBpKyspIHtcbiAgICBtb2QgPSAoKGJpdHMgPj4gaSkgJiAxKSA9PT0gMVxuXG4gICAgLy8gdmVydGljYWxcbiAgICBpZiAoaSA8IDYpIHtcbiAgICAgIG1hdHJpeC5zZXQoaSwgOCwgbW9kLCB0cnVlKVxuICAgIH0gZWxzZSBpZiAoaSA8IDgpIHtcbiAgICAgIG1hdHJpeC5zZXQoaSArIDEsIDgsIG1vZCwgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgbWF0cml4LnNldChzaXplIC0gMTUgKyBpLCA4LCBtb2QsIHRydWUpXG4gICAgfVxuXG4gICAgLy8gaG9yaXpvbnRhbFxuICAgIGlmIChpIDwgOCkge1xuICAgICAgbWF0cml4LnNldCg4LCBzaXplIC0gaSAtIDEsIG1vZCwgdHJ1ZSlcbiAgICB9IGVsc2UgaWYgKGkgPCA5KSB7XG4gICAgICBtYXRyaXguc2V0KDgsIDE1IC0gaSAtIDEgKyAxLCBtb2QsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdHJpeC5zZXQoOCwgMTUgLSBpIC0gMSwgbW9kLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIC8vIGZpeGVkIG1vZHVsZVxuICBtYXRyaXguc2V0KHNpemUgLSA4LCA4LCAxLCB0cnVlKVxufVxuXG4vKipcbiAqIEFkZCBlbmNvZGVkIGRhdGEgYml0cyB0byBtYXRyaXhcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9ICBtYXRyaXggTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IGRhdGEgICBEYXRhIGNvZGV3b3Jkc1xuICovXG5mdW5jdGlvbiBzZXR1cERhdGEgKG1hdHJpeCwgZGF0YSkge1xuICBjb25zdCBzaXplID0gbWF0cml4LnNpemVcbiAgbGV0IGluYyA9IC0xXG4gIGxldCByb3cgPSBzaXplIC0gMVxuICBsZXQgYml0SW5kZXggPSA3XG4gIGxldCBieXRlSW5kZXggPSAwXG5cbiAgZm9yIChsZXQgY29sID0gc2l6ZSAtIDE7IGNvbCA+IDA7IGNvbCAtPSAyKSB7XG4gICAgaWYgKGNvbCA9PT0gNikgY29sLS1cblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBmb3IgKGxldCBjID0gMDsgYyA8IDI7IGMrKykge1xuICAgICAgICBpZiAoIW1hdHJpeC5pc1Jlc2VydmVkKHJvdywgY29sIC0gYykpIHtcbiAgICAgICAgICBsZXQgZGFyayA9IGZhbHNlXG5cbiAgICAgICAgICBpZiAoYnl0ZUluZGV4IDwgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRhcmsgPSAoKChkYXRhW2J5dGVJbmRleF0gPj4+IGJpdEluZGV4KSAmIDEpID09PSAxKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hdHJpeC5zZXQocm93LCBjb2wgLSBjLCBkYXJrKVxuICAgICAgICAgIGJpdEluZGV4LS1cblxuICAgICAgICAgIGlmIChiaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGJ5dGVJbmRleCsrXG4gICAgICAgICAgICBiaXRJbmRleCA9IDdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcm93ICs9IGluY1xuXG4gICAgICBpZiAocm93IDwgMCB8fCBzaXplIDw9IHJvdykge1xuICAgICAgICByb3cgLT0gaW5jXG4gICAgICAgIGluYyA9IC1pbmNcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgZW5jb2RlZCBjb2Rld29yZHMgZnJvbSBkYXRhIGlucHV0XG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgIHZlcnNpb24gICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvblxuICogQHBhcmFtICB7RXJyb3JDb3JyZWN0aW9uTGV2ZWx9ICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtICB7Qnl0ZURhdGF9IGRhdGEgICAgICAgICAgICAgICAgIERhdGEgaW5wdXRcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9ICAgICAgICAgICAgICAgICAgICBCdWZmZXIgY29udGFpbmluZyBlbmNvZGVkIGNvZGV3b3Jkc1xuICovXG5mdW5jdGlvbiBjcmVhdGVEYXRhICh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgc2VnbWVudHMpIHtcbiAgLy8gUHJlcGFyZSBkYXRhIGJ1ZmZlclxuICBjb25zdCBidWZmZXIgPSBuZXcgQml0QnVmZmVyKClcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgLy8gcHJlZml4IGRhdGEgd2l0aCBtb2RlIGluZGljYXRvciAoNCBiaXRzKVxuICAgIGJ1ZmZlci5wdXQoZGF0YS5tb2RlLmJpdCwgNClcblxuICAgIC8vIFByZWZpeCBkYXRhIHdpdGggY2hhcmFjdGVyIGNvdW50IGluZGljYXRvci5cbiAgICAvLyBUaGUgY2hhcmFjdGVyIGNvdW50IGluZGljYXRvciBpcyBhIHN0cmluZyBvZiBiaXRzIHRoYXQgcmVwcmVzZW50cyB0aGVcbiAgICAvLyBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IGFyZSBiZWluZyBlbmNvZGVkLlxuICAgIC8vIFRoZSBjaGFyYWN0ZXIgY291bnQgaW5kaWNhdG9yIG11c3QgYmUgcGxhY2VkIGFmdGVyIHRoZSBtb2RlIGluZGljYXRvclxuICAgIC8vIGFuZCBtdXN0IGJlIGEgY2VydGFpbiBudW1iZXIgb2YgYml0cyBsb25nLCBkZXBlbmRpbmcgb24gdGhlIFFSIHZlcnNpb25cbiAgICAvLyBhbmQgZGF0YSBtb2RlXG4gICAgLy8gQHNlZSB7QGxpbmsgTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3J9LlxuICAgIGJ1ZmZlci5wdXQoZGF0YS5nZXRMZW5ndGgoKSwgTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3IoZGF0YS5tb2RlLCB2ZXJzaW9uKSlcblxuICAgIC8vIGFkZCBiaW5hcnkgZGF0YSBzZXF1ZW5jZSB0byBidWZmZXJcbiAgICBkYXRhLndyaXRlKGJ1ZmZlcilcbiAgfSlcblxuICAvLyBDYWxjdWxhdGUgcmVxdWlyZWQgbnVtYmVyIG9mIGJpdHNcbiAgY29uc3QgdG90YWxDb2Rld29yZHMgPSBVdGlscy5nZXRTeW1ib2xUb3RhbENvZGV3b3Jkcyh2ZXJzaW9uKVxuICBjb25zdCBlY1RvdGFsQ29kZXdvcmRzID0gRUNDb2RlLmdldFRvdGFsQ29kZXdvcmRzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG4gIGNvbnN0IGRhdGFUb3RhbENvZGV3b3Jkc0JpdHMgPSAodG90YWxDb2Rld29yZHMgLSBlY1RvdGFsQ29kZXdvcmRzKSAqIDhcblxuICAvLyBBZGQgYSB0ZXJtaW5hdG9yLlxuICAvLyBJZiB0aGUgYml0IHN0cmluZyBpcyBzaG9ydGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiByZXF1aXJlZCBiaXRzLFxuICAvLyBhIHRlcm1pbmF0b3Igb2YgdXAgdG8gZm91ciAwcyBtdXN0IGJlIGFkZGVkIHRvIHRoZSByaWdodCBzaWRlIG9mIHRoZSBzdHJpbmcuXG4gIC8vIElmIHRoZSBiaXQgc3RyaW5nIGlzIG1vcmUgdGhhbiBmb3VyIGJpdHMgc2hvcnRlciB0aGFuIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgYml0cyxcbiAgLy8gYWRkIGZvdXIgMHMgdG8gdGhlIGVuZC5cbiAgaWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSArIDQgPD0gZGF0YVRvdGFsQ29kZXdvcmRzQml0cykge1xuICAgIGJ1ZmZlci5wdXQoMCwgNClcbiAgfVxuXG4gIC8vIElmIHRoZSBiaXQgc3RyaW5nIGlzIGZld2VyIHRoYW4gZm91ciBiaXRzIHNob3J0ZXIsIGFkZCBvbmx5IHRoZSBudW1iZXIgb2YgMHMgdGhhdFxuICAvLyBhcmUgbmVlZGVkIHRvIHJlYWNoIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgYml0cy5cblxuICAvLyBBZnRlciBhZGRpbmcgdGhlIHRlcm1pbmF0b3IsIGlmIHRoZSBudW1iZXIgb2YgYml0cyBpbiB0aGUgc3RyaW5nIGlzIG5vdCBhIG11bHRpcGxlIG9mIDgsXG4gIC8vIHBhZCB0aGUgc3RyaW5nIG9uIHRoZSByaWdodCB3aXRoIDBzIHRvIG1ha2UgdGhlIHN0cmluZydzIGxlbmd0aCBhIG11bHRpcGxlIG9mIDguXG4gIHdoaWxlIChidWZmZXIuZ2V0TGVuZ3RoSW5CaXRzKCkgJSA4ICE9PSAwKSB7XG4gICAgYnVmZmVyLnB1dEJpdCgwKVxuICB9XG5cbiAgLy8gQWRkIHBhZCBieXRlcyBpZiB0aGUgc3RyaW5nIGlzIHN0aWxsIHNob3J0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIHJlcXVpcmVkIGJpdHMuXG4gIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHRvIGZpbGwgdGhlIGRhdGEgY2FwYWNpdHkgb2YgdGhlIHN5bWJvbCBjb3JyZXNwb25kaW5nIHRvXG4gIC8vIHRoZSBWZXJzaW9uIGFuZCBFcnJvciBDb3JyZWN0aW9uIExldmVsIGJ5IGFkZGluZyB0aGUgUGFkIENvZGV3b3JkcyAxMTEwMTEwMCAoMHhFQylcbiAgLy8gYW5kIDAwMDEwMDAxICgweDExKSBhbHRlcm5hdGVseS5cbiAgY29uc3QgcmVtYWluaW5nQnl0ZSA9IChkYXRhVG90YWxDb2Rld29yZHNCaXRzIC0gYnVmZmVyLmdldExlbmd0aEluQml0cygpKSAvIDhcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW1haW5pbmdCeXRlOyBpKyspIHtcbiAgICBidWZmZXIucHV0KGkgJSAyID8gMHgxMSA6IDB4RUMsIDgpXG4gIH1cblxuICByZXR1cm4gY3JlYXRlQ29kZXdvcmRzKGJ1ZmZlciwgdmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG59XG5cbi8qKlxuICogRW5jb2RlIGlucHV0IGRhdGEgd2l0aCBSZWVkLVNvbG9tb24gYW5kIHJldHVybiBjb2Rld29yZHMgd2l0aFxuICogcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogQHBhcmFtICB7Qml0QnVmZmVyfSBiaXRCdWZmZXIgICAgICAgICAgICBEYXRhIHRvIGVuY29kZVxuICogQHBhcmFtICB7TnVtYmVyfSAgICB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge0Vycm9yQ29ycmVjdGlvbkxldmVsfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICAgICAgICAgICAgICAgICAgIEJ1ZmZlciBjb250YWluaW5nIGVuY29kZWQgY29kZXdvcmRzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvZGV3b3JkcyAoYml0QnVmZmVyLCB2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xuICAvLyBUb3RhbCBjb2Rld29yZHMgZm9yIHRoaXMgUVIgY29kZSB2ZXJzaW9uIChEYXRhICsgRXJyb3IgY29ycmVjdGlvbilcbiAgY29uc3QgdG90YWxDb2Rld29yZHMgPSBVdGlscy5nZXRTeW1ib2xUb3RhbENvZGV3b3Jkcyh2ZXJzaW9uKVxuXG4gIC8vIFRvdGFsIG51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3Jkc1xuICBjb25zdCBlY1RvdGFsQ29kZXdvcmRzID0gRUNDb2RlLmdldFRvdGFsQ29kZXdvcmRzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG5cbiAgLy8gVG90YWwgbnVtYmVyIG9mIGRhdGEgY29kZXdvcmRzXG4gIGNvbnN0IGRhdGFUb3RhbENvZGV3b3JkcyA9IHRvdGFsQ29kZXdvcmRzIC0gZWNUb3RhbENvZGV3b3Jkc1xuXG4gIC8vIFRvdGFsIG51bWJlciBvZiBibG9ja3NcbiAgY29uc3QgZWNUb3RhbEJsb2NrcyA9IEVDQ29kZS5nZXRCbG9ja3NDb3VudCh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbClcblxuICAvLyBDYWxjdWxhdGUgaG93IG1hbnkgYmxvY2tzIGVhY2ggZ3JvdXAgc2hvdWxkIGNvbnRhaW5cbiAgY29uc3QgYmxvY2tzSW5Hcm91cDIgPSB0b3RhbENvZGV3b3JkcyAlIGVjVG90YWxCbG9ja3NcbiAgY29uc3QgYmxvY2tzSW5Hcm91cDEgPSBlY1RvdGFsQmxvY2tzIC0gYmxvY2tzSW5Hcm91cDJcblxuICBjb25zdCB0b3RhbENvZGV3b3Jkc0luR3JvdXAxID0gTWF0aC5mbG9vcih0b3RhbENvZGV3b3JkcyAvIGVjVG90YWxCbG9ja3MpXG5cbiAgY29uc3QgZGF0YUNvZGV3b3Jkc0luR3JvdXAxID0gTWF0aC5mbG9vcihkYXRhVG90YWxDb2Rld29yZHMgLyBlY1RvdGFsQmxvY2tzKVxuICBjb25zdCBkYXRhQ29kZXdvcmRzSW5Hcm91cDIgPSBkYXRhQ29kZXdvcmRzSW5Hcm91cDEgKyAxXG5cbiAgLy8gTnVtYmVyIG9mIEVDIGNvZGV3b3JkcyBpcyB0aGUgc2FtZSBmb3IgYm90aCBncm91cHNcbiAgY29uc3QgZWNDb3VudCA9IHRvdGFsQ29kZXdvcmRzSW5Hcm91cDEgLSBkYXRhQ29kZXdvcmRzSW5Hcm91cDFcblxuICAvLyBJbml0aWFsaXplIGEgUmVlZC1Tb2xvbW9uIGVuY29kZXIgd2l0aCBhIGdlbmVyYXRvciBwb2x5bm9taWFsIG9mIGRlZ3JlZSBlY0NvdW50XG4gIGNvbnN0IHJzID0gbmV3IFJlZWRTb2xvbW9uRW5jb2RlcihlY0NvdW50KVxuXG4gIGxldCBvZmZzZXQgPSAwXG4gIGNvbnN0IGRjRGF0YSA9IG5ldyBBcnJheShlY1RvdGFsQmxvY2tzKVxuICBjb25zdCBlY0RhdGEgPSBuZXcgQXJyYXkoZWNUb3RhbEJsb2NrcylcbiAgbGV0IG1heERhdGFTaXplID0gMFxuICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShiaXRCdWZmZXIuYnVmZmVyKVxuXG4gIC8vIERpdmlkZSB0aGUgYnVmZmVyIGludG8gdGhlIHJlcXVpcmVkIG51bWJlciBvZiBibG9ja3NcbiAgZm9yIChsZXQgYiA9IDA7IGIgPCBlY1RvdGFsQmxvY2tzOyBiKyspIHtcbiAgICBjb25zdCBkYXRhU2l6ZSA9IGIgPCBibG9ja3NJbkdyb3VwMSA/IGRhdGFDb2Rld29yZHNJbkdyb3VwMSA6IGRhdGFDb2Rld29yZHNJbkdyb3VwMlxuXG4gICAgLy8gZXh0cmFjdCBhIGJsb2NrIG9mIGRhdGEgZnJvbSBidWZmZXJcbiAgICBkY0RhdGFbYl0gPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBkYXRhU2l6ZSlcblxuICAgIC8vIENhbGN1bGF0ZSBFQyBjb2Rld29yZHMgZm9yIHRoaXMgZGF0YSBibG9ja1xuICAgIGVjRGF0YVtiXSA9IHJzLmVuY29kZShkY0RhdGFbYl0pXG5cbiAgICBvZmZzZXQgKz0gZGF0YVNpemVcbiAgICBtYXhEYXRhU2l6ZSA9IE1hdGgubWF4KG1heERhdGFTaXplLCBkYXRhU2l6ZSlcbiAgfVxuXG4gIC8vIENyZWF0ZSBmaW5hbCBkYXRhXG4gIC8vIEludGVybGVhdmUgdGhlIGRhdGEgYW5kIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzIGZyb20gZWFjaCBibG9ja1xuICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodG90YWxDb2Rld29yZHMpXG4gIGxldCBpbmRleCA9IDBcbiAgbGV0IGksIHJcblxuICAvLyBBZGQgZGF0YSBjb2Rld29yZHNcbiAgZm9yIChpID0gMDsgaSA8IG1heERhdGFTaXplOyBpKyspIHtcbiAgICBmb3IgKHIgPSAwOyByIDwgZWNUb3RhbEJsb2NrczsgcisrKSB7XG4gICAgICBpZiAoaSA8IGRjRGF0YVtyXS5sZW5ndGgpIHtcbiAgICAgICAgZGF0YVtpbmRleCsrXSA9IGRjRGF0YVtyXVtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFwcGVkIEVDIGNvZGV3b3Jkc1xuICBmb3IgKGkgPSAwOyBpIDwgZWNDb3VudDsgaSsrKSB7XG4gICAgZm9yIChyID0gMDsgciA8IGVjVG90YWxCbG9ja3M7IHIrKykge1xuICAgICAgZGF0YVtpbmRleCsrXSA9IGVjRGF0YVtyXVtpXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhXG59XG5cbi8qKlxuICogQnVpbGQgUVIgQ29kZSBzeW1ib2xcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGEgICAgICAgICAgICAgICAgIElucHV0IHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge0Vycm9yQ29ycmV0aW9uTGV2ZWx9IGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGxldmVsXG4gKiBAcGFyYW0gIHtNYXNrUGF0dGVybn0gbWFza1BhdHRlcm4gICAgIE1hc2sgcGF0dGVyblxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICBPYmplY3QgY29udGFpbmluZyBzeW1ib2wgZGF0YVxuICovXG5mdW5jdGlvbiBjcmVhdGVTeW1ib2wgKGRhdGEsIHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrUGF0dGVybikge1xuICBsZXQgc2VnbWVudHNcblxuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgIHNlZ21lbnRzID0gU2VnbWVudHMuZnJvbUFycmF5KGRhdGEpXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IGVzdGltYXRlZFZlcnNpb24gPSB2ZXJzaW9uXG5cbiAgICBpZiAoIWVzdGltYXRlZFZlcnNpb24pIHtcbiAgICAgIGNvbnN0IHJhd1NlZ21lbnRzID0gU2VnbWVudHMucmF3U3BsaXQoZGF0YSlcblxuICAgICAgLy8gRXN0aW1hdGUgYmVzdCB2ZXJzaW9uIHRoYXQgY2FuIGNvbnRhaW4gcmF3IHNwbGl0dGVkIHNlZ21lbnRzXG4gICAgICBlc3RpbWF0ZWRWZXJzaW9uID0gVmVyc2lvbi5nZXRCZXN0VmVyc2lvbkZvckRhdGEocmF3U2VnbWVudHMsIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuICAgIH1cblxuICAgIC8vIEJ1aWxkIG9wdGltaXplZCBzZWdtZW50c1xuICAgIC8vIElmIGVzdGltYXRlZCB2ZXJzaW9uIGlzIHVuZGVmaW5lZCwgdHJ5IHdpdGggdGhlIGhpZ2hlc3QgdmVyc2lvblxuICAgIHNlZ21lbnRzID0gU2VnbWVudHMuZnJvbVN0cmluZyhkYXRhLCBlc3RpbWF0ZWRWZXJzaW9uIHx8IDQwKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkYXRhJylcbiAgfVxuXG4gIC8vIEdldCB0aGUgbWluIHZlcnNpb24gdGhhdCBjYW4gY29udGFpbiBkYXRhXG4gIGNvbnN0IGJlc3RWZXJzaW9uID0gVmVyc2lvbi5nZXRCZXN0VmVyc2lvbkZvckRhdGEoc2VnbWVudHMsIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuXG4gIC8vIElmIG5vIHZlcnNpb24gaXMgZm91bmQsIGRhdGEgY2Fubm90IGJlIHN0b3JlZFxuICBpZiAoIWJlc3RWZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYW1vdW50IG9mIGRhdGEgaXMgdG9vIGJpZyB0byBiZSBzdG9yZWQgaW4gYSBRUiBDb2RlJylcbiAgfVxuXG4gIC8vIElmIG5vdCBzcGVjaWZpZWQsIHVzZSBtaW4gdmVyc2lvbiBhcyBkZWZhdWx0XG4gIGlmICghdmVyc2lvbikge1xuICAgIHZlcnNpb24gPSBiZXN0VmVyc2lvblxuXG4gIC8vIENoZWNrIGlmIHRoZSBzcGVjaWZpZWQgdmVyc2lvbiBjYW4gY29udGFpbiB0aGUgZGF0YVxuICB9IGVsc2UgaWYgKHZlcnNpb24gPCBiZXN0VmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignXFxuJyArXG4gICAgICAnVGhlIGNob3NlbiBRUiBDb2RlIHZlcnNpb24gY2Fubm90IGNvbnRhaW4gdGhpcyBhbW91bnQgb2YgZGF0YS5cXG4nICtcbiAgICAgICdNaW5pbXVtIHZlcnNpb24gcmVxdWlyZWQgdG8gc3RvcmUgY3VycmVudCBkYXRhIGlzOiAnICsgYmVzdFZlcnNpb24gKyAnLlxcbidcbiAgICApXG4gIH1cblxuICBjb25zdCBkYXRhQml0cyA9IGNyZWF0ZURhdGEodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIHNlZ21lbnRzKVxuXG4gIC8vIEFsbG9jYXRlIG1hdHJpeCBidWZmZXJcbiAgY29uc3QgbW9kdWxlQ291bnQgPSBVdGlscy5nZXRTeW1ib2xTaXplKHZlcnNpb24pXG4gIGNvbnN0IG1vZHVsZXMgPSBuZXcgQml0TWF0cml4KG1vZHVsZUNvdW50KVxuXG4gIC8vIEFkZCBmdW5jdGlvbiBtb2R1bGVzXG4gIHNldHVwRmluZGVyUGF0dGVybihtb2R1bGVzLCB2ZXJzaW9uKVxuICBzZXR1cFRpbWluZ1BhdHRlcm4obW9kdWxlcylcbiAgc2V0dXBBbGlnbm1lbnRQYXR0ZXJuKG1vZHVsZXMsIHZlcnNpb24pXG5cbiAgLy8gQWRkIHRlbXBvcmFyeSBkdW1teSBiaXRzIGZvciBmb3JtYXQgaW5mbyBqdXN0IHRvIHNldCB0aGVtIGFzIHJlc2VydmVkLlxuICAvLyBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50IHRoZXNlIGJpdHMgZnJvbSBiZWluZyBtYXNrZWQgYnkge0BsaW5rIE1hc2tQYXR0ZXJuLmFwcGx5TWFza31cbiAgLy8gc2luY2UgdGhlIG1hc2tpbmcgb3BlcmF0aW9uIG11c3QgYmUgcGVyZm9ybWVkIG9ubHkgb24gdGhlIGVuY29kaW5nIHJlZ2lvbi5cbiAgLy8gVGhlc2UgYmxvY2tzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBjb3JyZWN0IHZhbHVlcyBsYXRlciBpbiBjb2RlLlxuICBzZXR1cEZvcm1hdEluZm8obW9kdWxlcywgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIDApXG5cbiAgaWYgKHZlcnNpb24gPj0gNykge1xuICAgIHNldHVwVmVyc2lvbkluZm8obW9kdWxlcywgdmVyc2lvbilcbiAgfVxuXG4gIC8vIEFkZCBkYXRhIGNvZGV3b3Jkc1xuICBzZXR1cERhdGEobW9kdWxlcywgZGF0YUJpdHMpXG5cbiAgaWYgKGlzTmFOKG1hc2tQYXR0ZXJuKSkge1xuICAgIC8vIEZpbmQgYmVzdCBtYXNrIHBhdHRlcm5cbiAgICBtYXNrUGF0dGVybiA9IE1hc2tQYXR0ZXJuLmdldEJlc3RNYXNrKG1vZHVsZXMsXG4gICAgICBzZXR1cEZvcm1hdEluZm8uYmluZChudWxsLCBtb2R1bGVzLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkpXG4gIH1cblxuICAvLyBBcHBseSBtYXNrIHBhdHRlcm5cbiAgTWFza1BhdHRlcm4uYXBwbHlNYXNrKG1hc2tQYXR0ZXJuLCBtb2R1bGVzKVxuXG4gIC8vIFJlcGxhY2UgZm9ybWF0IGluZm8gYml0cyB3aXRoIGNvcnJlY3QgdmFsdWVzXG4gIHNldHVwRm9ybWF0SW5mbyhtb2R1bGVzLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFza1BhdHRlcm4pXG5cbiAgcmV0dXJuIHtcbiAgICBtb2R1bGVzOiBtb2R1bGVzLFxuICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWw6IGVycm9yQ29ycmVjdGlvbkxldmVsLFxuICAgIG1hc2tQYXR0ZXJuOiBtYXNrUGF0dGVybixcbiAgICBzZWdtZW50czogc2VnbWVudHNcbiAgfVxufVxuXG4vKipcbiAqIFFSIENvZGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZyB8IEFycmF5fSBkYXRhICAgICAgICAgICAgICAgICBJbnB1dCBkYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAgICAgICAgICAgICAgICAgICAgICBPcHRpb25hbCBjb25maWd1cmF0aW9uc1xuICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMudmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5lcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnRvU0pJU0Z1bmMgICAgICAgICBIZWxwZXIgZnVuYyB0byBjb252ZXJ0IHV0ZjggdG8gc2ppc1xuICovXG5leHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAoZGF0YSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnIHx8IGRhdGEgPT09ICcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbnB1dCB0ZXh0JylcbiAgfVxuXG4gIGxldCBlcnJvckNvcnJlY3Rpb25MZXZlbCA9IEVDTGV2ZWwuTVxuICBsZXQgdmVyc2lvblxuICBsZXQgbWFza1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBVc2UgaGlnaGVyIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwgYXMgZGVmYXVsdFxuICAgIGVycm9yQ29ycmVjdGlvbkxldmVsID0gRUNMZXZlbC5mcm9tKG9wdGlvbnMuZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIEVDTGV2ZWwuTSlcbiAgICB2ZXJzaW9uID0gVmVyc2lvbi5mcm9tKG9wdGlvbnMudmVyc2lvbilcbiAgICBtYXNrID0gTWFza1BhdHRlcm4uZnJvbShvcHRpb25zLm1hc2tQYXR0ZXJuKVxuXG4gICAgaWYgKG9wdGlvbnMudG9TSklTRnVuYykge1xuICAgICAgVXRpbHMuc2V0VG9TSklTRnVuY3Rpb24ob3B0aW9ucy50b1NKSVNGdW5jKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjcmVhdGVTeW1ib2woZGF0YSwgdmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2spXG59XG4iXSwibmFtZXMiOlsiVXRpbHMiLCJyZXF1aXJlIiwiRUNMZXZlbCIsIkJpdEJ1ZmZlciIsIkJpdE1hdHJpeCIsIkFsaWdubWVudFBhdHRlcm4iLCJGaW5kZXJQYXR0ZXJuIiwiTWFza1BhdHRlcm4iLCJFQ0NvZGUiLCJSZWVkU29sb21vbkVuY29kZXIiLCJWZXJzaW9uIiwiRm9ybWF0SW5mbyIsIk1vZGUiLCJTZWdtZW50cyIsInNldHVwRmluZGVyUGF0dGVybiIsIm1hdHJpeCIsInZlcnNpb24iLCJzaXplIiwicG9zIiwiZ2V0UG9zaXRpb25zIiwiaSIsImxlbmd0aCIsInJvdyIsImNvbCIsInIiLCJjIiwic2V0Iiwic2V0dXBUaW1pbmdQYXR0ZXJuIiwidmFsdWUiLCJzZXR1cEFsaWdubWVudFBhdHRlcm4iLCJzZXR1cFZlcnNpb25JbmZvIiwiYml0cyIsImdldEVuY29kZWRCaXRzIiwibW9kIiwiTWF0aCIsImZsb29yIiwic2V0dXBGb3JtYXRJbmZvIiwiZXJyb3JDb3JyZWN0aW9uTGV2ZWwiLCJtYXNrUGF0dGVybiIsInNldHVwRGF0YSIsImRhdGEiLCJpbmMiLCJiaXRJbmRleCIsImJ5dGVJbmRleCIsImlzUmVzZXJ2ZWQiLCJkYXJrIiwiY3JlYXRlRGF0YSIsInNlZ21lbnRzIiwiYnVmZmVyIiwiZm9yRWFjaCIsInB1dCIsIm1vZGUiLCJiaXQiLCJnZXRMZW5ndGgiLCJnZXRDaGFyQ291bnRJbmRpY2F0b3IiLCJ3cml0ZSIsInRvdGFsQ29kZXdvcmRzIiwiZ2V0U3ltYm9sVG90YWxDb2Rld29yZHMiLCJlY1RvdGFsQ29kZXdvcmRzIiwiZ2V0VG90YWxDb2Rld29yZHNDb3VudCIsImRhdGFUb3RhbENvZGV3b3Jkc0JpdHMiLCJnZXRMZW5ndGhJbkJpdHMiLCJwdXRCaXQiLCJyZW1haW5pbmdCeXRlIiwiY3JlYXRlQ29kZXdvcmRzIiwiYml0QnVmZmVyIiwiZGF0YVRvdGFsQ29kZXdvcmRzIiwiZWNUb3RhbEJsb2NrcyIsImdldEJsb2Nrc0NvdW50IiwiYmxvY2tzSW5Hcm91cDIiLCJibG9ja3NJbkdyb3VwMSIsInRvdGFsQ29kZXdvcmRzSW5Hcm91cDEiLCJkYXRhQ29kZXdvcmRzSW5Hcm91cDEiLCJkYXRhQ29kZXdvcmRzSW5Hcm91cDIiLCJlY0NvdW50IiwicnMiLCJvZmZzZXQiLCJkY0RhdGEiLCJBcnJheSIsImVjRGF0YSIsIm1heERhdGFTaXplIiwiVWludDhBcnJheSIsImIiLCJkYXRhU2l6ZSIsInNsaWNlIiwiZW5jb2RlIiwibWF4IiwiaW5kZXgiLCJjcmVhdGVTeW1ib2wiLCJpc0FycmF5IiwiZnJvbUFycmF5IiwiZXN0aW1hdGVkVmVyc2lvbiIsInJhd1NlZ21lbnRzIiwicmF3U3BsaXQiLCJnZXRCZXN0VmVyc2lvbkZvckRhdGEiLCJmcm9tU3RyaW5nIiwiRXJyb3IiLCJiZXN0VmVyc2lvbiIsImRhdGFCaXRzIiwibW9kdWxlQ291bnQiLCJnZXRTeW1ib2xTaXplIiwibW9kdWxlcyIsImlzTmFOIiwiZ2V0QmVzdE1hc2siLCJiaW5kIiwiYXBwbHlNYXNrIiwiZXhwb3J0cyIsImNyZWF0ZSIsIm9wdGlvbnMiLCJNIiwibWFzayIsImZyb20iLCJ0b1NKSVNGdW5jIiwic2V0VG9TSklTRnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/qrcode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/reed-solomon-encoder.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/reed-solomon-encoder.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Polynomial = __webpack_require__(/*! ./polynomial */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/polynomial.js\");\nfunction ReedSolomonEncoder(degree) {\n    this.genPoly = undefined;\n    this.degree = degree;\n    if (this.degree) this.initialize(this.degree);\n}\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */ ReedSolomonEncoder.prototype.initialize = function initialize(degree) {\n    // create an irreducible generator polynomial\n    this.degree = degree;\n    this.genPoly = Polynomial.generateECPolynomial(this.degree);\n};\n/**\n * Encodes a chunk of data\n *\n * @param  {Uint8Array} data Buffer containing input data\n * @return {Uint8Array}      Buffer containing encoded data\n */ ReedSolomonEncoder.prototype.encode = function encode(data) {\n    if (!this.genPoly) {\n        throw new Error(\"Encoder not initialized\");\n    }\n    // Calculate EC for this data block\n    // extends data size to data+genPoly size\n    const paddedData = new Uint8Array(data.length + this.degree);\n    paddedData.set(data);\n    // The error correction codewords are the remainder after dividing the data codewords\n    // by a generator polynomial\n    const remainder = Polynomial.mod(paddedData, this.genPoly);\n    // return EC data blocks (last n byte, where n is the degree of genPoly)\n    // If coefficients number in remainder are less than genPoly degree,\n    // pad with 0s to the left to reach the needed number of coefficients\n    const start = this.degree - remainder.length;\n    if (start > 0) {\n        const buff = new Uint8Array(this.degree);\n        buff.set(remainder, start);\n        return buff;\n    }\n    return remainder;\n};\nmodule.exports = ReedSolomonEncoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVlZC1zb2xvbW9uLWVuY29kZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCLFNBQVNDLG1CQUFvQkMsTUFBTTtJQUNqQyxJQUFJLENBQUNDLE9BQU8sR0FBR0M7SUFDZixJQUFJLENBQUNGLE1BQU0sR0FBR0E7SUFFZCxJQUFJLElBQUksQ0FBQ0EsTUFBTSxFQUFFLElBQUksQ0FBQ0csVUFBVSxDQUFDLElBQUksQ0FBQ0gsTUFBTTtBQUM5QztBQUVBOzs7OztDQUtDLEdBQ0RELG1CQUFtQkssU0FBUyxDQUFDRCxVQUFVLEdBQUcsU0FBU0EsV0FBWUgsTUFBTTtJQUNuRSw2Q0FBNkM7SUFDN0MsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUdKLFdBQVdRLG9CQUFvQixDQUFDLElBQUksQ0FBQ0wsTUFBTTtBQUM1RDtBQUVBOzs7OztDQUtDLEdBQ0RELG1CQUFtQkssU0FBUyxDQUFDRSxNQUFNLEdBQUcsU0FBU0EsT0FBUUMsSUFBSTtJQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDTixPQUFPLEVBQUU7UUFDakIsTUFBTSxJQUFJTyxNQUFNO0lBQ2xCO0lBRUEsbUNBQW1DO0lBQ25DLHlDQUF5QztJQUN6QyxNQUFNQyxhQUFhLElBQUlDLFdBQVdILEtBQUtJLE1BQU0sR0FBRyxJQUFJLENBQUNYLE1BQU07SUFDM0RTLFdBQVdHLEdBQUcsQ0FBQ0w7SUFFZixxRkFBcUY7SUFDckYsNEJBQTRCO0lBQzVCLE1BQU1NLFlBQVloQixXQUFXaUIsR0FBRyxDQUFDTCxZQUFZLElBQUksQ0FBQ1IsT0FBTztJQUV6RCx3RUFBd0U7SUFDeEUsb0VBQW9FO0lBQ3BFLHFFQUFxRTtJQUNyRSxNQUFNYyxRQUFRLElBQUksQ0FBQ2YsTUFBTSxHQUFHYSxVQUFVRixNQUFNO0lBQzVDLElBQUlJLFFBQVEsR0FBRztRQUNiLE1BQU1DLE9BQU8sSUFBSU4sV0FBVyxJQUFJLENBQUNWLE1BQU07UUFDdkNnQixLQUFLSixHQUFHLENBQUNDLFdBQVdFO1FBRXBCLE9BQU9DO0lBQ1Q7SUFFQSxPQUFPSDtBQUNUO0FBRUFJLE9BQU9DLE9BQU8sR0FBR25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWVkLXNvbG9tb24tZW5jb2Rlci5qcz81Yjk2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBvbHlub21pYWwgPSByZXF1aXJlKCcuL3BvbHlub21pYWwnKVxuXG5mdW5jdGlvbiBSZWVkU29sb21vbkVuY29kZXIgKGRlZ3JlZSkge1xuICB0aGlzLmdlblBvbHkgPSB1bmRlZmluZWRcbiAgdGhpcy5kZWdyZWUgPSBkZWdyZWVcblxuICBpZiAodGhpcy5kZWdyZWUpIHRoaXMuaW5pdGlhbGl6ZSh0aGlzLmRlZ3JlZSlcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBlbmNvZGVyLlxuICogVGhlIGlucHV0IHBhcmFtIHNob3VsZCBjb3JyZXNwb25kIHRvIHRoZSBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHMuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkZWdyZWVcbiAqL1xuUmVlZFNvbG9tb25FbmNvZGVyLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gaW5pdGlhbGl6ZSAoZGVncmVlKSB7XG4gIC8vIGNyZWF0ZSBhbiBpcnJlZHVjaWJsZSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICB0aGlzLmRlZ3JlZSA9IGRlZ3JlZVxuICB0aGlzLmdlblBvbHkgPSBQb2x5bm9taWFsLmdlbmVyYXRlRUNQb2x5bm9taWFsKHRoaXMuZGVncmVlKVxufVxuXG4vKipcbiAqIEVuY29kZXMgYSBjaHVuayBvZiBkYXRhXG4gKlxuICogQHBhcmFtICB7VWludDhBcnJheX0gZGF0YSBCdWZmZXIgY29udGFpbmluZyBpbnB1dCBkYXRhXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICAgIEJ1ZmZlciBjb250YWluaW5nIGVuY29kZWQgZGF0YVxuICovXG5SZWVkU29sb21vbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZSAoZGF0YSkge1xuICBpZiAoIXRoaXMuZ2VuUG9seSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRW5jb2RlciBub3QgaW5pdGlhbGl6ZWQnKVxuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIEVDIGZvciB0aGlzIGRhdGEgYmxvY2tcbiAgLy8gZXh0ZW5kcyBkYXRhIHNpemUgdG8gZGF0YStnZW5Qb2x5IHNpemVcbiAgY29uc3QgcGFkZGVkRGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoICsgdGhpcy5kZWdyZWUpXG4gIHBhZGRlZERhdGEuc2V0KGRhdGEpXG5cbiAgLy8gVGhlIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzIGFyZSB0aGUgcmVtYWluZGVyIGFmdGVyIGRpdmlkaW5nIHRoZSBkYXRhIGNvZGV3b3Jkc1xuICAvLyBieSBhIGdlbmVyYXRvciBwb2x5bm9taWFsXG4gIGNvbnN0IHJlbWFpbmRlciA9IFBvbHlub21pYWwubW9kKHBhZGRlZERhdGEsIHRoaXMuZ2VuUG9seSlcblxuICAvLyByZXR1cm4gRUMgZGF0YSBibG9ja3MgKGxhc3QgbiBieXRlLCB3aGVyZSBuIGlzIHRoZSBkZWdyZWUgb2YgZ2VuUG9seSlcbiAgLy8gSWYgY29lZmZpY2llbnRzIG51bWJlciBpbiByZW1haW5kZXIgYXJlIGxlc3MgdGhhbiBnZW5Qb2x5IGRlZ3JlZSxcbiAgLy8gcGFkIHdpdGggMHMgdG8gdGhlIGxlZnQgdG8gcmVhY2ggdGhlIG5lZWRlZCBudW1iZXIgb2YgY29lZmZpY2llbnRzXG4gIGNvbnN0IHN0YXJ0ID0gdGhpcy5kZWdyZWUgLSByZW1haW5kZXIubGVuZ3RoXG4gIGlmIChzdGFydCA+IDApIHtcbiAgICBjb25zdCBidWZmID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kZWdyZWUpXG4gICAgYnVmZi5zZXQocmVtYWluZGVyLCBzdGFydClcblxuICAgIHJldHVybiBidWZmXG4gIH1cblxuICByZXR1cm4gcmVtYWluZGVyXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVlZFNvbG9tb25FbmNvZGVyXG4iXSwibmFtZXMiOlsiUG9seW5vbWlhbCIsInJlcXVpcmUiLCJSZWVkU29sb21vbkVuY29kZXIiLCJkZWdyZWUiLCJnZW5Qb2x5IiwidW5kZWZpbmVkIiwiaW5pdGlhbGl6ZSIsInByb3RvdHlwZSIsImdlbmVyYXRlRUNQb2x5bm9taWFsIiwiZW5jb2RlIiwiZGF0YSIsIkVycm9yIiwicGFkZGVkRGF0YSIsIlVpbnQ4QXJyYXkiLCJsZW5ndGgiLCJzZXQiLCJyZW1haW5kZXIiLCJtb2QiLCJzdGFydCIsImJ1ZmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/reed-solomon-encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/regex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/regex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const numeric = \"[0-9]+\";\nconst alphanumeric = \"[A-Z $%*+\\\\-./:]+\";\nlet kanji = \"(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|\" + \"[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|\" + \"[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|\" + \"[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+\";\nkanji = kanji.replace(/u/g, \"\\\\u\");\nconst byte = \"(?:(?![A-Z0-9 $%*+\\\\-./:]|\" + kanji + \")(?:.|[\\r\\n]))+\";\nexports.KANJI = new RegExp(kanji, \"g\");\nexports.BYTE_KANJI = new RegExp(\"[^A-Z0-9 $%*+\\\\-./:]+\", \"g\");\nexports.BYTE = new RegExp(byte, \"g\");\nexports.NUMERIC = new RegExp(numeric, \"g\");\nexports.ALPHANUMERIC = new RegExp(alphanumeric, \"g\");\nconst TEST_KANJI = new RegExp(\"^\" + kanji + \"$\");\nconst TEST_NUMERIC = new RegExp(\"^\" + numeric + \"$\");\nconst TEST_ALPHANUMERIC = new RegExp(\"^[A-Z0-9 $%*+\\\\-./:]+$\");\nexports.testKanji = function testKanji(str) {\n    return TEST_KANJI.test(str);\n};\nexports.testNumeric = function testNumeric(str) {\n    return TEST_NUMERIC.test(str);\n};\nexports.testAlphanumeric = function testAlphanumeric(str) {\n    return TEST_ALPHANUMERIC.test(str);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVnZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVTtBQUNoQixNQUFNQyxlQUFlO0FBQ3JCLElBQUlDLFFBQVEsa0RBQ1YsbUVBQ0EsMERBQ0E7QUFDRkEsUUFBUUEsTUFBTUMsT0FBTyxDQUFDLE1BQU07QUFFNUIsTUFBTUMsT0FBTywrQkFBK0JGLFFBQVE7QUFFcERHLGFBQWEsR0FBRyxJQUFJRSxPQUFPTCxPQUFPO0FBQ2xDRyxrQkFBa0IsR0FBRyxJQUFJRSxPQUFPLHlCQUF5QjtBQUN6REYsWUFBWSxHQUFHLElBQUlFLE9BQU9ILE1BQU07QUFDaENDLGVBQWUsR0FBRyxJQUFJRSxPQUFPUCxTQUFTO0FBQ3RDSyxvQkFBb0IsR0FBRyxJQUFJRSxPQUFPTixjQUFjO0FBRWhELE1BQU1XLGFBQWEsSUFBSUwsT0FBTyxNQUFNTCxRQUFRO0FBQzVDLE1BQU1XLGVBQWUsSUFBSU4sT0FBTyxNQUFNUCxVQUFVO0FBQ2hELE1BQU1jLG9CQUFvQixJQUFJUCxPQUFPO0FBRXJDRixpQkFBaUIsR0FBRyxTQUFTVSxVQUFXQyxHQUFHO0lBQ3pDLE9BQU9KLFdBQVdLLElBQUksQ0FBQ0Q7QUFDekI7QUFFQVgsbUJBQW1CLEdBQUcsU0FBU2EsWUFBYUYsR0FBRztJQUM3QyxPQUFPSCxhQUFhSSxJQUFJLENBQUNEO0FBQzNCO0FBRUFYLHdCQUF3QixHQUFHLFNBQVNjLGlCQUFrQkgsR0FBRztJQUN2RCxPQUFPRixrQkFBa0JHLElBQUksQ0FBQ0Q7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3JlZ2V4LmpzPzI1ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbnVtZXJpYyA9ICdbMC05XSsnXG5jb25zdCBhbHBoYW51bWVyaWMgPSAnW0EtWiAkJSorXFxcXC0uLzpdKydcbmxldCBrYW5qaSA9ICcoPzpbdTMwMDAtdTMwM0ZdfFt1MzA0MC11MzA5Rl18W3UzMEEwLXUzMEZGXXwnICtcbiAgJ1t1RkYwMC11RkZFRl18W3U0RTAwLXU5RkFGXXxbdTI2MDUtdTI2MDZdfFt1MjE5MC11MjE5NV18dTIwM0J8JyArXG4gICdbdTIwMTB1MjAxNXUyMDE4dTIwMTl1MjAyNXUyMDI2dTIwMUN1MjAxRHUyMjI1dTIyNjBdfCcgK1xuICAnW3UwMzkxLXUwNDUxXXxbdTAwQTd1MDBBOHUwMEIxdTAwQjR1MDBEN3UwMEY3XSkrJ1xua2FuamkgPSBrYW5qaS5yZXBsYWNlKC91L2csICdcXFxcdScpXG5cbmNvbnN0IGJ5dGUgPSAnKD86KD8hW0EtWjAtOSAkJSorXFxcXC0uLzpdfCcgKyBrYW5qaSArICcpKD86LnxbXFxyXFxuXSkpKydcblxuZXhwb3J0cy5LQU5KSSA9IG5ldyBSZWdFeHAoa2FuamksICdnJylcbmV4cG9ydHMuQllURV9LQU5KSSA9IG5ldyBSZWdFeHAoJ1teQS1aMC05ICQlKitcXFxcLS4vOl0rJywgJ2cnKVxuZXhwb3J0cy5CWVRFID0gbmV3IFJlZ0V4cChieXRlLCAnZycpXG5leHBvcnRzLk5VTUVSSUMgPSBuZXcgUmVnRXhwKG51bWVyaWMsICdnJylcbmV4cG9ydHMuQUxQSEFOVU1FUklDID0gbmV3IFJlZ0V4cChhbHBoYW51bWVyaWMsICdnJylcblxuY29uc3QgVEVTVF9LQU5KSSA9IG5ldyBSZWdFeHAoJ14nICsga2FuamkgKyAnJCcpXG5jb25zdCBURVNUX05VTUVSSUMgPSBuZXcgUmVnRXhwKCdeJyArIG51bWVyaWMgKyAnJCcpXG5jb25zdCBURVNUX0FMUEhBTlVNRVJJQyA9IG5ldyBSZWdFeHAoJ15bQS1aMC05ICQlKitcXFxcLS4vOl0rJCcpXG5cbmV4cG9ydHMudGVzdEthbmppID0gZnVuY3Rpb24gdGVzdEthbmppIChzdHIpIHtcbiAgcmV0dXJuIFRFU1RfS0FOSkkudGVzdChzdHIpXG59XG5cbmV4cG9ydHMudGVzdE51bWVyaWMgPSBmdW5jdGlvbiB0ZXN0TnVtZXJpYyAoc3RyKSB7XG4gIHJldHVybiBURVNUX05VTUVSSUMudGVzdChzdHIpXG59XG5cbmV4cG9ydHMudGVzdEFscGhhbnVtZXJpYyA9IGZ1bmN0aW9uIHRlc3RBbHBoYW51bWVyaWMgKHN0cikge1xuICByZXR1cm4gVEVTVF9BTFBIQU5VTUVSSUMudGVzdChzdHIpXG59XG4iXSwibmFtZXMiOlsibnVtZXJpYyIsImFscGhhbnVtZXJpYyIsImthbmppIiwicmVwbGFjZSIsImJ5dGUiLCJleHBvcnRzIiwiS0FOSkkiLCJSZWdFeHAiLCJCWVRFX0tBTkpJIiwiQllURSIsIk5VTUVSSUMiLCJBTFBIQU5VTUVSSUMiLCJURVNUX0tBTkpJIiwiVEVTVF9OVU1FUklDIiwiVEVTVF9BTFBIQU5VTUVSSUMiLCJ0ZXN0S2FuamkiLCJzdHIiLCJ0ZXN0IiwidGVzdE51bWVyaWMiLCJ0ZXN0QWxwaGFudW1lcmljIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/segments.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/segments.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js\");\nconst NumericData = __webpack_require__(/*! ./numeric-data */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/numeric-data.js\");\nconst AlphanumericData = __webpack_require__(/*! ./alphanumeric-data */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/alphanumeric-data.js\");\nconst ByteData = __webpack_require__(/*! ./byte-data */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/byte-data.js\");\nconst KanjiData = __webpack_require__(/*! ./kanji-data */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/kanji-data.js\");\nconst Regex = __webpack_require__(/*! ./regex */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/regex.js\");\nconst Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js\");\nconst dijkstra = __webpack_require__(/*! dijkstrajs */ \"(ssr)/./node_modules/.pnpm/dijkstrajs@1.0.3/node_modules/dijkstrajs/dijkstra.js\");\n/**\n * Returns UTF8 byte length\n *\n * @param  {String} str Input string\n * @return {Number}     Number of byte\n */ function getStringByteLength(str) {\n    return unescape(encodeURIComponent(str)).length;\n}\n/**\n * Get a list of segments of the specified mode\n * from a string\n *\n * @param  {Mode}   mode Segment mode\n * @param  {String} str  String to process\n * @return {Array}       Array of object with segments data\n */ function getSegments(regex, mode, str) {\n    const segments = [];\n    let result;\n    while((result = regex.exec(str)) !== null){\n        segments.push({\n            data: result[0],\n            index: result.index,\n            mode: mode,\n            length: result[0].length\n        });\n    }\n    return segments;\n}\n/**\n * Extracts a series of segments with the appropriate\n * modes from a string\n *\n * @param  {String} dataStr Input string\n * @return {Array}          Array of object with segments data\n */ function getSegmentsFromString(dataStr) {\n    const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);\n    const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);\n    let byteSegs;\n    let kanjiSegs;\n    if (Utils.isKanjiModeEnabled()) {\n        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);\n        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);\n    } else {\n        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);\n        kanjiSegs = [];\n    }\n    const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);\n    return segs.sort(function(s1, s2) {\n        return s1.index - s2.index;\n    }).map(function(obj) {\n        return {\n            data: obj.data,\n            mode: obj.mode,\n            length: obj.length\n        };\n    });\n}\n/**\n * Returns how many bits are needed to encode a string of\n * specified length with the specified mode\n *\n * @param  {Number} length String length\n * @param  {Mode} mode     Segment mode\n * @return {Number}        Bit length\n */ function getSegmentBitsLength(length, mode) {\n    switch(mode){\n        case Mode.NUMERIC:\n            return NumericData.getBitsLength(length);\n        case Mode.ALPHANUMERIC:\n            return AlphanumericData.getBitsLength(length);\n        case Mode.KANJI:\n            return KanjiData.getBitsLength(length);\n        case Mode.BYTE:\n            return ByteData.getBitsLength(length);\n    }\n}\n/**\n * Merges adjacent segments which have the same mode\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */ function mergeSegments(segs) {\n    return segs.reduce(function(acc, curr) {\n        const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;\n        if (prevSeg && prevSeg.mode === curr.mode) {\n            acc[acc.length - 1].data += curr.data;\n            return acc;\n        }\n        acc.push(curr);\n        return acc;\n    }, []);\n}\n/**\n * Generates a list of all possible nodes combination which\n * will be used to build a segments graph.\n *\n * Nodes are divided by groups. Each group will contain a list of all the modes\n * in which is possible to encode the given text.\n *\n * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.\n * The group for '12345' will contain then 3 objects, one for each\n * possible encoding mode.\n *\n * Each node represents a possible segment.\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */ function buildNodes(segs) {\n    const nodes = [];\n    for(let i = 0; i < segs.length; i++){\n        const seg = segs[i];\n        switch(seg.mode){\n            case Mode.NUMERIC:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.ALPHANUMERIC,\n                        length: seg.length\n                    },\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: seg.length\n                    }\n                ]);\n                break;\n            case Mode.ALPHANUMERIC:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: seg.length\n                    }\n                ]);\n                break;\n            case Mode.KANJI:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: getStringByteLength(seg.data)\n                    }\n                ]);\n                break;\n            case Mode.BYTE:\n                nodes.push([\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: getStringByteLength(seg.data)\n                    }\n                ]);\n        }\n    }\n    return nodes;\n}\n/**\n * Builds a graph from a list of nodes.\n * All segments in each node group will be connected with all the segments of\n * the next group and so on.\n *\n * At each connection will be assigned a weight depending on the\n * segment's byte length.\n *\n * @param  {Array} nodes    Array of object with segments data\n * @param  {Number} version QR Code version\n * @return {Object}         Graph of all possible segments\n */ function buildGraph(nodes, version) {\n    const table = {};\n    const graph = {\n        start: {}\n    };\n    let prevNodeIds = [\n        \"start\"\n    ];\n    for(let i = 0; i < nodes.length; i++){\n        const nodeGroup = nodes[i];\n        const currentNodeIds = [];\n        for(let j = 0; j < nodeGroup.length; j++){\n            const node = nodeGroup[j];\n            const key = \"\" + i + j;\n            currentNodeIds.push(key);\n            table[key] = {\n                node: node,\n                lastCount: 0\n            };\n            graph[key] = {};\n            for(let n = 0; n < prevNodeIds.length; n++){\n                const prevNodeId = prevNodeIds[n];\n                if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {\n                    graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);\n                    table[prevNodeId].lastCount += node.length;\n                } else {\n                    if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;\n                    graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version) // switch cost\n                    ;\n                }\n            }\n        }\n        prevNodeIds = currentNodeIds;\n    }\n    for(let n = 0; n < prevNodeIds.length; n++){\n        graph[prevNodeIds[n]].end = 0;\n    }\n    return {\n        map: graph,\n        table: table\n    };\n}\n/**\n * Builds a segment from a specified data and mode.\n * If a mode is not specified, the more suitable will be used.\n *\n * @param  {String} data             Input data\n * @param  {Mode | String} modesHint Data mode\n * @return {Segment}                 Segment\n */ function buildSingleSegment(data, modesHint) {\n    let mode;\n    const bestMode = Mode.getBestModeForData(data);\n    mode = Mode.from(modesHint, bestMode);\n    // Make sure data can be encoded\n    if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {\n        throw new Error('\"' + data + '\"' + \" cannot be encoded with mode \" + Mode.toString(mode) + \".\\n Suggested mode is: \" + Mode.toString(bestMode));\n    }\n    // Use Mode.BYTE if Kanji support is disabled\n    if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {\n        mode = Mode.BYTE;\n    }\n    switch(mode){\n        case Mode.NUMERIC:\n            return new NumericData(data);\n        case Mode.ALPHANUMERIC:\n            return new AlphanumericData(data);\n        case Mode.KANJI:\n            return new KanjiData(data);\n        case Mode.BYTE:\n            return new ByteData(data);\n    }\n}\n/**\n * Builds a list of segments from an array.\n * Array can contain Strings or Objects with segment's info.\n *\n * For each item which is a string, will be generated a segment with the given\n * string and the more appropriate encoding mode.\n *\n * For each item which is an object, will be generated a segment with the given\n * data and mode.\n * Objects must contain at least the property \"data\".\n * If property \"mode\" is not present, the more suitable mode will be used.\n *\n * @param  {Array} array Array of objects with segments data\n * @return {Array}       Array of Segments\n */ exports.fromArray = function fromArray(array) {\n    return array.reduce(function(acc, seg) {\n        if (typeof seg === \"string\") {\n            acc.push(buildSingleSegment(seg, null));\n        } else if (seg.data) {\n            acc.push(buildSingleSegment(seg.data, seg.mode));\n        }\n        return acc;\n    }, []);\n};\n/**\n * Builds an optimized sequence of segments from a string,\n * which will produce the shortest possible bitstream.\n *\n * @param  {String} data    Input string\n * @param  {Number} version QR Code version\n * @return {Array}          Array of segments\n */ exports.fromString = function fromString(data, version) {\n    const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());\n    const nodes = buildNodes(segs);\n    const graph = buildGraph(nodes, version);\n    const path = dijkstra.find_path(graph.map, \"start\", \"end\");\n    const optimizedSegs = [];\n    for(let i = 1; i < path.length - 1; i++){\n        optimizedSegs.push(graph.table[path[i]].node);\n    }\n    return exports.fromArray(mergeSegments(optimizedSegs));\n};\n/**\n * Splits a string in various segments with the modes which\n * best represent their content.\n * The produced segments are far from being optimized.\n * The output of this function is only used to estimate a QR Code version\n * which may contain the data.\n *\n * @param  {string} data Input string\n * @return {Array}       Array of segments\n */ exports.rawSplit = function rawSplit(data) {\n    return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/segments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("let toSJISFunction;\nconst CODEWORDS_COUNT = [\n    0,\n    26,\n    44,\n    70,\n    100,\n    134,\n    172,\n    196,\n    242,\n    292,\n    346,\n    404,\n    466,\n    532,\n    581,\n    655,\n    733,\n    815,\n    901,\n    991,\n    1085,\n    1156,\n    1258,\n    1364,\n    1474,\n    1588,\n    1706,\n    1828,\n    1921,\n    2051,\n    2185,\n    2323,\n    2465,\n    2611,\n    2761,\n    2876,\n    3034,\n    3196,\n    3362,\n    3532,\n    3706\n];\n/**\n * Returns the QR Code size for the specified version\n *\n * @param  {Number} version QR Code version\n * @return {Number}         size of QR code\n */ exports.getSymbolSize = function getSymbolSize(version) {\n    if (!version) throw new Error('\"version\" cannot be null or undefined');\n    if (version < 1 || version > 40) throw new Error('\"version\" should be in range from 1 to 40');\n    return version * 4 + 17;\n};\n/**\n * Returns the total number of codewords used to store data and EC information.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Data length in bits\n */ exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {\n    return CODEWORDS_COUNT[version];\n};\n/**\n * Encode data with Bose-Chaudhuri-Hocquenghem\n *\n * @param  {Number} data Value to encode\n * @return {Number}      Encoded value\n */ exports.getBCHDigit = function(data) {\n    let digit = 0;\n    while(data !== 0){\n        digit++;\n        data >>>= 1;\n    }\n    return digit;\n};\nexports.setToSJISFunction = function setToSJISFunction(f) {\n    if (typeof f !== \"function\") {\n        throw new Error('\"toSJISFunc\" is not a valid function.');\n    }\n    toSJISFunction = f;\n};\nexports.isKanjiModeEnabled = function() {\n    return typeof toSJISFunction !== \"undefined\";\n};\nexports.toSJIS = function toSJIS(kanji) {\n    return toSJISFunction(kanji);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUE7QUFDSixNQUFNQyxrQkFBa0I7SUFDdEI7SUFDQTtJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUMxQztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUM3QztJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUN0RDtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtDQUN2RDtBQUVEOzs7OztDQUtDLEdBQ0RDLHFCQUFxQixHQUFHLFNBQVNDLGNBQWVDLE9BQU87SUFDckQsSUFBSSxDQUFDQSxTQUFTLE1BQU0sSUFBSUMsTUFBTTtJQUM5QixJQUFJRCxVQUFVLEtBQUtBLFVBQVUsSUFBSSxNQUFNLElBQUlDLE1BQU07SUFDakQsT0FBT0QsVUFBVSxJQUFJO0FBQ3ZCO0FBRUE7Ozs7O0NBS0MsR0FDREYsK0JBQStCLEdBQUcsU0FBU0ksd0JBQXlCRixPQUFPO0lBQ3pFLE9BQU9ILGVBQWUsQ0FBQ0csUUFBUTtBQUNqQztBQUVBOzs7OztDQUtDLEdBQ0RGLG1CQUFtQixHQUFHLFNBQVVNLElBQUk7SUFDbEMsSUFBSUMsUUFBUTtJQUVaLE1BQU9ELFNBQVMsRUFBRztRQUNqQkM7UUFDQUQsVUFBVTtJQUNaO0lBRUEsT0FBT0M7QUFDVDtBQUVBUCx5QkFBeUIsR0FBRyxTQUFTUSxrQkFBbUJDLENBQUM7SUFDdkQsSUFBSSxPQUFPQSxNQUFNLFlBQVk7UUFDM0IsTUFBTSxJQUFJTixNQUFNO0lBQ2xCO0lBRUFMLGlCQUFpQlc7QUFDbkI7QUFFQVQsMEJBQTBCLEdBQUc7SUFDM0IsT0FBTyxPQUFPRixtQkFBbUI7QUFDbkM7QUFFQUUsY0FBYyxHQUFHLFNBQVNXLE9BQVFDLEtBQUs7SUFDckMsT0FBT2QsZUFBZWM7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3V0aWxzLmpzPzczYWQiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHRvU0pJU0Z1bmN0aW9uXG5jb25zdCBDT0RFV09SRFNfQ09VTlQgPSBbXG4gIDAsIC8vIE5vdCB1c2VkXG4gIDI2LCA0NCwgNzAsIDEwMCwgMTM0LCAxNzIsIDE5NiwgMjQyLCAyOTIsIDM0NixcbiAgNDA0LCA0NjYsIDUzMiwgNTgxLCA2NTUsIDczMywgODE1LCA5MDEsIDk5MSwgMTA4NSxcbiAgMTE1NiwgMTI1OCwgMTM2NCwgMTQ3NCwgMTU4OCwgMTcwNiwgMTgyOCwgMTkyMSwgMjA1MSwgMjE4NSxcbiAgMjMyMywgMjQ2NSwgMjYxMSwgMjc2MSwgMjg3NiwgMzAzNCwgMzE5NiwgMzM2MiwgMzUzMiwgMzcwNlxuXVxuXG4vKipcbiAqIFJldHVybnMgdGhlIFFSIENvZGUgc2l6ZSBmb3IgdGhlIHNwZWNpZmllZCB2ZXJzaW9uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIHNpemUgb2YgUVIgY29kZVxuICovXG5leHBvcnRzLmdldFN5bWJvbFNpemUgPSBmdW5jdGlvbiBnZXRTeW1ib2xTaXplICh2ZXJzaW9uKSB7XG4gIGlmICghdmVyc2lvbikgdGhyb3cgbmV3IEVycm9yKCdcInZlcnNpb25cIiBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKVxuICBpZiAodmVyc2lvbiA8IDEgfHwgdmVyc2lvbiA+IDQwKSB0aHJvdyBuZXcgRXJyb3IoJ1widmVyc2lvblwiIHNob3VsZCBiZSBpbiByYW5nZSBmcm9tIDEgdG8gNDAnKVxuICByZXR1cm4gdmVyc2lvbiAqIDQgKyAxN1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRvdGFsIG51bWJlciBvZiBjb2Rld29yZHMgdXNlZCB0byBzdG9yZSBkYXRhIGFuZCBFQyBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgRGF0YSBsZW5ndGggaW4gYml0c1xuICovXG5leHBvcnRzLmdldFN5bWJvbFRvdGFsQ29kZXdvcmRzID0gZnVuY3Rpb24gZ2V0U3ltYm9sVG90YWxDb2Rld29yZHMgKHZlcnNpb24pIHtcbiAgcmV0dXJuIENPREVXT1JEU19DT1VOVFt2ZXJzaW9uXVxufVxuXG4vKipcbiAqIEVuY29kZSBkYXRhIHdpdGggQm9zZS1DaGF1ZGh1cmktSG9jcXVlbmdoZW1cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGRhdGEgVmFsdWUgdG8gZW5jb2RlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgRW5jb2RlZCB2YWx1ZVxuICovXG5leHBvcnRzLmdldEJDSERpZ2l0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgbGV0IGRpZ2l0ID0gMFxuXG4gIHdoaWxlIChkYXRhICE9PSAwKSB7XG4gICAgZGlnaXQrK1xuICAgIGRhdGEgPj4+PSAxXG4gIH1cblxuICByZXR1cm4gZGlnaXRcbn1cblxuZXhwb3J0cy5zZXRUb1NKSVNGdW5jdGlvbiA9IGZ1bmN0aW9uIHNldFRvU0pJU0Z1bmN0aW9uIChmKSB7XG4gIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignXCJ0b1NKSVNGdW5jXCIgaXMgbm90IGEgdmFsaWQgZnVuY3Rpb24uJylcbiAgfVxuXG4gIHRvU0pJU0Z1bmN0aW9uID0gZlxufVxuXG5leHBvcnRzLmlzS2FuamlNb2RlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiB0b1NKSVNGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCdcbn1cblxuZXhwb3J0cy50b1NKSVMgPSBmdW5jdGlvbiB0b1NKSVMgKGthbmppKSB7XG4gIHJldHVybiB0b1NKSVNGdW5jdGlvbihrYW5qaSlcbn1cbiJdLCJuYW1lcyI6WyJ0b1NKSVNGdW5jdGlvbiIsIkNPREVXT1JEU19DT1VOVCIsImV4cG9ydHMiLCJnZXRTeW1ib2xTaXplIiwidmVyc2lvbiIsIkVycm9yIiwiZ2V0U3ltYm9sVG90YWxDb2Rld29yZHMiLCJnZXRCQ0hEaWdpdCIsImRhdGEiLCJkaWdpdCIsInNldFRvU0pJU0Z1bmN0aW9uIiwiZiIsImlzS2FuamlNb2RlRW5hYmxlZCIsInRvU0pJUyIsImthbmppIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version-check.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version-check.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */ exports.isValid = function isValid(version) {\n    return !isNaN(version) && version >= 1 && version <= 40;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdmVyc2lvbi1jaGVjay5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQyxHQUNEQSxlQUFlLEdBQUcsU0FBU0MsUUFBU0MsT0FBTztJQUN6QyxPQUFPLENBQUNDLE1BQU1ELFlBQVlBLFdBQVcsS0FBS0EsV0FBVztBQUN2RCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdmVyc2lvbi1jaGVjay5qcz8zNDYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2sgaWYgUVIgQ29kZSB2ZXJzaW9uIGlzIHZhbGlkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgdHJ1ZSBpZiB2YWxpZCB2ZXJzaW9uLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAodmVyc2lvbikge1xuICByZXR1cm4gIWlzTmFOKHZlcnNpb24pICYmIHZlcnNpb24gPj0gMSAmJiB2ZXJzaW9uIDw9IDQwXG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsImlzVmFsaWQiLCJ2ZXJzaW9uIiwiaXNOYU4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version-check.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/utils.js\");\nconst ECCode = __webpack_require__(/*! ./error-correction-code */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-code.js\");\nconst ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/error-correction-level.js\");\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/mode.js\");\nconst VersionCheck = __webpack_require__(/*! ./version-check */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version-check.js\");\n// Generator polynomial used to encode version information\nconst G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\nconst G18_BCH = Utils.getBCHDigit(G18);\nfunction getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n    for(let currentVersion = 1; currentVersion <= 40; currentVersion++){\n        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n            return currentVersion;\n        }\n    }\n    return undefined;\n}\nfunction getReservedBitsCount(mode, version) {\n    // Character count indicator + mode indicator bits\n    return Mode.getCharCountIndicator(mode, version) + 4;\n}\nfunction getTotalBitsFromDataArray(segments, version) {\n    let totalBits = 0;\n    segments.forEach(function(data) {\n        const reservedBits = getReservedBitsCount(data.mode, version);\n        totalBits += reservedBits + data.getBitsLength();\n    });\n    return totalBits;\n}\nfunction getBestVersionForMixedData(segments, errorCorrectionLevel) {\n    for(let currentVersion = 1; currentVersion <= 40; currentVersion++){\n        const length = getTotalBitsFromDataArray(segments, currentVersion);\n        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n            return currentVersion;\n        }\n    }\n    return undefined;\n}\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */ exports.from = function from(value, defaultValue) {\n    if (VersionCheck.isValid(value)) {\n        return parseInt(value, 10);\n    }\n    return defaultValue;\n};\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */ exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n    if (!VersionCheck.isValid(version)) {\n        throw new Error(\"Invalid QR Code version\");\n    }\n    // Use Byte mode as default\n    if (typeof mode === \"undefined\") mode = Mode.BYTE;\n    // Total codewords for this QR code version (Data + Error correction)\n    const totalCodewords = Utils.getSymbolTotalCodewords(version);\n    // Total number of error correction codewords\n    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    // Total number of data codewords\n    const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n    const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);\n    // Return max number of storable codewords\n    switch(mode){\n        case Mode.NUMERIC:\n            return Math.floor(usableBits / 10 * 3);\n        case Mode.ALPHANUMERIC:\n            return Math.floor(usableBits / 11 * 2);\n        case Mode.KANJI:\n            return Math.floor(usableBits / 13);\n        case Mode.BYTE:\n        default:\n            return Math.floor(usableBits / 8);\n    }\n};\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */ exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n    let seg;\n    const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n    if (Array.isArray(data)) {\n        if (data.length > 1) {\n            return getBestVersionForMixedData(data, ecl);\n        }\n        if (data.length === 0) {\n            return 1;\n        }\n        seg = data[0];\n    } else {\n        seg = data;\n    }\n    return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n};\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */ exports.getEncodedBits = function getEncodedBits(version) {\n    if (!VersionCheck.isValid(version) || version < 7) {\n        throw new Error(\"Invalid QR Code version\");\n    }\n    let d = version << 12;\n    while(Utils.getBCHDigit(d) - G18_BCH >= 0){\n        d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n    }\n    return version << 12 | d;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n*copyright Ryan Day 2012\n*\n* Licensed under the MIT license:\n*   http://www.opensource.org/licenses/mit-license.php\n*\n* this is the main server side application file for node-qrcode.\n* these exports use serverside canvas api methods for file IO and buffers\n*\n*/ \nmodule.exports = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/server.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFTQTtBQUVBQSxpSUFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9pbmRleC5qcz83ZmE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qY29weXJpZ2h0IFJ5YW4gRGF5IDIwMTJcbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4qXG4qIHRoaXMgaXMgdGhlIG1haW4gc2VydmVyIHNpZGUgYXBwbGljYXRpb24gZmlsZSBmb3Igbm9kZS1xcmNvZGUuXG4qIHRoZXNlIGV4cG9ydHMgdXNlIHNlcnZlcnNpZGUgY2FudmFzIGFwaSBtZXRob2RzIGZvciBmaWxlIElPIGFuZCBidWZmZXJzXG4qXG4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc2VydmVyJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/canvas.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/canvas.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utils.js\");\nfunction clearCanvas(ctx, canvas, size) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    if (!canvas.style) canvas.style = {};\n    canvas.height = size;\n    canvas.width = size;\n    canvas.style.height = size + \"px\";\n    canvas.style.width = size + \"px\";\n}\nfunction getCanvasElement() {\n    try {\n        return document.createElement(\"canvas\");\n    } catch (e) {\n        throw new Error(\"You need to specify a canvas element\");\n    }\n}\nexports.render = function render(qrData, canvas, options) {\n    let opts = options;\n    let canvasEl = canvas;\n    if (typeof opts === \"undefined\" && (!canvas || !canvas.getContext)) {\n        opts = canvas;\n        canvas = undefined;\n    }\n    if (!canvas) {\n        canvasEl = getCanvasElement();\n    }\n    opts = Utils.getOptions(opts);\n    const size = Utils.getImageWidth(qrData.modules.size, opts);\n    const ctx = canvasEl.getContext(\"2d\");\n    const image = ctx.createImageData(size, size);\n    Utils.qrToImageData(image.data, qrData, opts);\n    clearCanvas(ctx, canvasEl, size);\n    ctx.putImageData(image, 0, 0);\n    return canvasEl;\n};\nexports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {\n    let opts = options;\n    if (typeof opts === \"undefined\" && (!canvas || !canvas.getContext)) {\n        opts = canvas;\n        canvas = undefined;\n    }\n    if (!opts) opts = {};\n    const canvasEl = exports.render(qrData, canvas, opts);\n    const type = opts.type || \"image/png\";\n    const rendererOpts = opts.rendererOpts || {};\n    return canvasEl.toDataURL(type, rendererOpts.quality);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL2NhbnZhcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUV0QixTQUFTQyxZQUFhQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsSUFBSTtJQUNyQ0YsSUFBSUcsU0FBUyxDQUFDLEdBQUcsR0FBR0YsT0FBT0csS0FBSyxFQUFFSCxPQUFPSSxNQUFNO0lBRS9DLElBQUksQ0FBQ0osT0FBT0ssS0FBSyxFQUFFTCxPQUFPSyxLQUFLLEdBQUcsQ0FBQztJQUNuQ0wsT0FBT0ksTUFBTSxHQUFHSDtJQUNoQkQsT0FBT0csS0FBSyxHQUFHRjtJQUNmRCxPQUFPSyxLQUFLLENBQUNELE1BQU0sR0FBR0gsT0FBTztJQUM3QkQsT0FBT0ssS0FBSyxDQUFDRixLQUFLLEdBQUdGLE9BQU87QUFDOUI7QUFFQSxTQUFTSztJQUNQLElBQUk7UUFDRixPQUFPQyxTQUFTQyxhQUFhLENBQUM7SUFDaEMsRUFBRSxPQUFPQyxHQUFHO1FBQ1YsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0FBQ0Y7QUFFQUMsY0FBYyxHQUFHLFNBQVNDLE9BQVFDLE1BQU0sRUFBRWIsTUFBTSxFQUFFYyxPQUFPO0lBQ3ZELElBQUlDLE9BQU9EO0lBQ1gsSUFBSUUsV0FBV2hCO0lBRWYsSUFBSSxPQUFPZSxTQUFTLGVBQWdCLEVBQUNmLFVBQVUsQ0FBQ0EsT0FBT2lCLFVBQVUsR0FBRztRQUNsRUYsT0FBT2Y7UUFDUEEsU0FBU2tCO0lBQ1g7SUFFQSxJQUFJLENBQUNsQixRQUFRO1FBQ1hnQixXQUFXVjtJQUNiO0lBRUFTLE9BQU9uQixNQUFNdUIsVUFBVSxDQUFDSjtJQUN4QixNQUFNZCxPQUFPTCxNQUFNd0IsYUFBYSxDQUFDUCxPQUFPUSxPQUFPLENBQUNwQixJQUFJLEVBQUVjO0lBRXRELE1BQU1oQixNQUFNaUIsU0FBU0MsVUFBVSxDQUFDO0lBQ2hDLE1BQU1LLFFBQVF2QixJQUFJd0IsZUFBZSxDQUFDdEIsTUFBTUE7SUFDeENMLE1BQU00QixhQUFhLENBQUNGLE1BQU1HLElBQUksRUFBRVosUUFBUUU7SUFFeENqQixZQUFZQyxLQUFLaUIsVUFBVWY7SUFDM0JGLElBQUkyQixZQUFZLENBQUNKLE9BQU8sR0FBRztJQUUzQixPQUFPTjtBQUNUO0FBRUFMLHVCQUF1QixHQUFHLFNBQVNnQixnQkFBaUJkLE1BQU0sRUFBRWIsTUFBTSxFQUFFYyxPQUFPO0lBQ3pFLElBQUlDLE9BQU9EO0lBRVgsSUFBSSxPQUFPQyxTQUFTLGVBQWdCLEVBQUNmLFVBQVUsQ0FBQ0EsT0FBT2lCLFVBQVUsR0FBRztRQUNsRUYsT0FBT2Y7UUFDUEEsU0FBU2tCO0lBQ1g7SUFFQSxJQUFJLENBQUNILE1BQU1BLE9BQU8sQ0FBQztJQUVuQixNQUFNQyxXQUFXTCxRQUFRQyxNQUFNLENBQUNDLFFBQVFiLFFBQVFlO0lBRWhELE1BQU1hLE9BQU9iLEtBQUthLElBQUksSUFBSTtJQUMxQixNQUFNQyxlQUFlZCxLQUFLYyxZQUFZLElBQUksQ0FBQztJQUUzQyxPQUFPYixTQUFTYyxTQUFTLENBQUNGLE1BQU1DLGFBQWFFLE9BQU87QUFDdEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9jYW52YXMuanM/NzNlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5mdW5jdGlvbiBjbGVhckNhbnZhcyAoY3R4LCBjYW52YXMsIHNpemUpIHtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG5cbiAgaWYgKCFjYW52YXMuc3R5bGUpIGNhbnZhcy5zdHlsZSA9IHt9XG4gIGNhbnZhcy5oZWlnaHQgPSBzaXplXG4gIGNhbnZhcy53aWR0aCA9IHNpemVcbiAgY2FudmFzLnN0eWxlLmhlaWdodCA9IHNpemUgKyAncHgnXG4gIGNhbnZhcy5zdHlsZS53aWR0aCA9IHNpemUgKyAncHgnXG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc0VsZW1lbnQgKCkge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgY2FudmFzIGVsZW1lbnQnKVxuICB9XG59XG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChxckRhdGEsIGNhbnZhcywgb3B0aW9ucykge1xuICBsZXQgb3B0cyA9IG9wdGlvbnNcbiAgbGV0IGNhbnZhc0VsID0gY2FudmFzXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJyAmJiAoIWNhbnZhcyB8fCAhY2FudmFzLmdldENvbnRleHQpKSB7XG4gICAgb3B0cyA9IGNhbnZhc1xuICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKCFjYW52YXMpIHtcbiAgICBjYW52YXNFbCA9IGdldENhbnZhc0VsZW1lbnQoKVxuICB9XG5cbiAgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0cylcbiAgY29uc3Qgc2l6ZSA9IFV0aWxzLmdldEltYWdlV2lkdGgocXJEYXRhLm1vZHVsZXMuc2l6ZSwgb3B0cylcblxuICBjb25zdCBjdHggPSBjYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpXG4gIGNvbnN0IGltYWdlID0gY3R4LmNyZWF0ZUltYWdlRGF0YShzaXplLCBzaXplKVxuICBVdGlscy5xclRvSW1hZ2VEYXRhKGltYWdlLmRhdGEsIHFyRGF0YSwgb3B0cylcblxuICBjbGVhckNhbnZhcyhjdHgsIGNhbnZhc0VsLCBzaXplKVxuICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlLCAwLCAwKVxuXG4gIHJldHVybiBjYW52YXNFbFxufVxuXG5leHBvcnRzLnJlbmRlclRvRGF0YVVSTCA9IGZ1bmN0aW9uIHJlbmRlclRvRGF0YVVSTCAocXJEYXRhLCBjYW52YXMsIG9wdGlvbnMpIHtcbiAgbGV0IG9wdHMgPSBvcHRpb25zXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJyAmJiAoIWNhbnZhcyB8fCAhY2FudmFzLmdldENvbnRleHQpKSB7XG4gICAgb3B0cyA9IGNhbnZhc1xuICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cblxuICBjb25zdCBjYW52YXNFbCA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgY2FudmFzLCBvcHRzKVxuXG4gIGNvbnN0IHR5cGUgPSBvcHRzLnR5cGUgfHwgJ2ltYWdlL3BuZydcbiAgY29uc3QgcmVuZGVyZXJPcHRzID0gb3B0cy5yZW5kZXJlck9wdHMgfHwge31cblxuICByZXR1cm4gY2FudmFzRWwudG9EYXRhVVJMKHR5cGUsIHJlbmRlcmVyT3B0cy5xdWFsaXR5KVxufVxuIl0sIm5hbWVzIjpbIlV0aWxzIiwicmVxdWlyZSIsImNsZWFyQ2FudmFzIiwiY3R4IiwiY2FudmFzIiwic2l6ZSIsImNsZWFyUmVjdCIsIndpZHRoIiwiaGVpZ2h0Iiwic3R5bGUiLCJnZXRDYW52YXNFbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZSIsIkVycm9yIiwiZXhwb3J0cyIsInJlbmRlciIsInFyRGF0YSIsIm9wdGlvbnMiLCJvcHRzIiwiY2FudmFzRWwiLCJnZXRDb250ZXh0IiwidW5kZWZpbmVkIiwiZ2V0T3B0aW9ucyIsImdldEltYWdlV2lkdGgiLCJtb2R1bGVzIiwiaW1hZ2UiLCJjcmVhdGVJbWFnZURhdGEiLCJxclRvSW1hZ2VEYXRhIiwiZGF0YSIsInB1dEltYWdlRGF0YSIsInJlbmRlclRvRGF0YVVSTCIsInR5cGUiLCJyZW5kZXJlck9wdHMiLCJ0b0RhdGFVUkwiLCJxdWFsaXR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/canvas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/png.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/png.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst PNG = (__webpack_require__(/*! pngjs */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png.js\").PNG);\nconst Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utils.js\");\nexports.render = function render(qrData, options) {\n    const opts = Utils.getOptions(options);\n    const pngOpts = opts.rendererOpts;\n    const size = Utils.getImageWidth(qrData.modules.size, opts);\n    pngOpts.width = size;\n    pngOpts.height = size;\n    const pngImage = new PNG(pngOpts);\n    Utils.qrToImageData(pngImage.data, qrData, opts);\n    return pngImage;\n};\nexports.renderToDataURL = function renderToDataURL(qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    exports.renderToBuffer(qrData, options, function(err, output) {\n        if (err) cb(err);\n        let url = \"data:image/png;base64,\";\n        url += output.toString(\"base64\");\n        cb(null, url);\n    });\n};\nexports.renderToBuffer = function renderToBuffer(qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    const png = exports.render(qrData, options);\n    const buffer = [];\n    png.on(\"error\", cb);\n    png.on(\"data\", function(data) {\n        buffer.push(data);\n    });\n    png.on(\"end\", function() {\n        cb(null, Buffer.concat(buffer));\n    });\n    png.pack();\n};\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    let called = false;\n    const done = (...args)=>{\n        if (called) return;\n        called = true;\n        cb.apply(null, args);\n    };\n    const stream = fs.createWriteStream(path);\n    stream.on(\"error\", done);\n    stream.on(\"close\", done);\n    exports.renderToFileStream(stream, qrData, options);\n};\nexports.renderToFileStream = function renderToFileStream(stream, qrData, options) {\n    const png = exports.render(qrData, options);\n    png.pack().pipe(stream);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3BuZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUNuQixNQUFNQyxNQUFNRCw4R0FBb0I7QUFDaEMsTUFBTUUsUUFBUUYsbUJBQU9BLENBQUM7QUFFdEJHLGNBQWMsR0FBRyxTQUFTQyxPQUFRQyxNQUFNLEVBQUVDLE9BQU87SUFDL0MsTUFBTUMsT0FBT0wsTUFBTU0sVUFBVSxDQUFDRjtJQUM5QixNQUFNRyxVQUFVRixLQUFLRyxZQUFZO0lBQ2pDLE1BQU1DLE9BQU9ULE1BQU1VLGFBQWEsQ0FBQ1AsT0FBT1EsT0FBTyxDQUFDRixJQUFJLEVBQUVKO0lBRXRERSxRQUFRSyxLQUFLLEdBQUdIO0lBQ2hCRixRQUFRTSxNQUFNLEdBQUdKO0lBRWpCLE1BQU1LLFdBQVcsSUFBSWYsSUFBSVE7SUFDekJQLE1BQU1lLGFBQWEsQ0FBQ0QsU0FBU0UsSUFBSSxFQUFFYixRQUFRRTtJQUUzQyxPQUFPUztBQUNUO0FBRUFiLHVCQUF1QixHQUFHLFNBQVNnQixnQkFBaUJkLE1BQU0sRUFBRUMsT0FBTyxFQUFFYyxFQUFFO0lBQ3JFLElBQUksT0FBT0EsT0FBTyxhQUFhO1FBQzdCQSxLQUFLZDtRQUNMQSxVQUFVZTtJQUNaO0lBRUFsQixRQUFRbUIsY0FBYyxDQUFDakIsUUFBUUMsU0FBUyxTQUFVaUIsR0FBRyxFQUFFQyxNQUFNO1FBQzNELElBQUlELEtBQUtILEdBQUdHO1FBQ1osSUFBSUUsTUFBTTtRQUNWQSxPQUFPRCxPQUFPRSxRQUFRLENBQUM7UUFDdkJOLEdBQUcsTUFBTUs7SUFDWDtBQUNGO0FBRUF0QixzQkFBc0IsR0FBRyxTQUFTbUIsZUFBZ0JqQixNQUFNLEVBQUVDLE9BQU8sRUFBRWMsRUFBRTtJQUNuRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS2Q7UUFDTEEsVUFBVWU7SUFDWjtJQUVBLE1BQU1NLE1BQU14QixRQUFRQyxNQUFNLENBQUNDLFFBQVFDO0lBQ25DLE1BQU1zQixTQUFTLEVBQUU7SUFFakJELElBQUlFLEVBQUUsQ0FBQyxTQUFTVDtJQUVoQk8sSUFBSUUsRUFBRSxDQUFDLFFBQVEsU0FBVVgsSUFBSTtRQUMzQlUsT0FBT0UsSUFBSSxDQUFDWjtJQUNkO0lBRUFTLElBQUlFLEVBQUUsQ0FBQyxPQUFPO1FBQ1pULEdBQUcsTUFBTVcsT0FBT0MsTUFBTSxDQUFDSjtJQUN6QjtJQUVBRCxJQUFJTSxJQUFJO0FBQ1Y7QUFFQTlCLG9CQUFvQixHQUFHLFNBQVMrQixhQUFjQyxJQUFJLEVBQUU5QixNQUFNLEVBQUVDLE9BQU8sRUFBRWMsRUFBRTtJQUNyRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS2Q7UUFDTEEsVUFBVWU7SUFDWjtJQUVBLElBQUllLFNBQVM7SUFDYixNQUFNQyxPQUFPLENBQUMsR0FBR0M7UUFDZixJQUFJRixRQUFRO1FBQ1pBLFNBQVM7UUFDVGhCLEdBQUdtQixLQUFLLENBQUMsTUFBTUQ7SUFDakI7SUFDQSxNQUFNRSxTQUFTekMsR0FBRzBDLGlCQUFpQixDQUFDTjtJQUVwQ0ssT0FBT1gsRUFBRSxDQUFDLFNBQVNRO0lBQ25CRyxPQUFPWCxFQUFFLENBQUMsU0FBU1E7SUFFbkJsQyxRQUFRdUMsa0JBQWtCLENBQUNGLFFBQVFuQyxRQUFRQztBQUM3QztBQUVBSCwwQkFBMEIsR0FBRyxTQUFTdUMsbUJBQW9CRixNQUFNLEVBQUVuQyxNQUFNLEVBQUVDLE9BQU87SUFDL0UsTUFBTXFCLE1BQU14QixRQUFRQyxNQUFNLENBQUNDLFFBQVFDO0lBQ25DcUIsSUFBSU0sSUFBSSxHQUFHVSxJQUFJLENBQUNIO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvcG5nLmpzPzRmN2EiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCBQTkcgPSByZXF1aXJlKCdwbmdqcycpLlBOR1xuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKHFyRGF0YSwgb3B0aW9ucykge1xuICBjb25zdCBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICBjb25zdCBwbmdPcHRzID0gb3B0cy5yZW5kZXJlck9wdHNcbiAgY29uc3Qgc2l6ZSA9IFV0aWxzLmdldEltYWdlV2lkdGgocXJEYXRhLm1vZHVsZXMuc2l6ZSwgb3B0cylcblxuICBwbmdPcHRzLndpZHRoID0gc2l6ZVxuICBwbmdPcHRzLmhlaWdodCA9IHNpemVcblxuICBjb25zdCBwbmdJbWFnZSA9IG5ldyBQTkcocG5nT3B0cylcbiAgVXRpbHMucXJUb0ltYWdlRGF0YShwbmdJbWFnZS5kYXRhLCBxckRhdGEsIG9wdHMpXG5cbiAgcmV0dXJuIHBuZ0ltYWdlXG59XG5cbmV4cG9ydHMucmVuZGVyVG9EYXRhVVJMID0gZnVuY3Rpb24gcmVuZGVyVG9EYXRhVVJMIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGlmICh0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgZXhwb3J0cy5yZW5kZXJUb0J1ZmZlcihxckRhdGEsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIsIG91dHB1dCkge1xuICAgIGlmIChlcnIpIGNiKGVycilcbiAgICBsZXQgdXJsID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnXG4gICAgdXJsICs9IG91dHB1dC50b1N0cmluZygnYmFzZTY0JylcbiAgICBjYihudWxsLCB1cmwpXG4gIH0pXG59XG5cbmV4cG9ydHMucmVuZGVyVG9CdWZmZXIgPSBmdW5jdGlvbiByZW5kZXJUb0J1ZmZlciAocXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGNvbnN0IHBuZyA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgb3B0aW9ucylcbiAgY29uc3QgYnVmZmVyID0gW11cblxuICBwbmcub24oJ2Vycm9yJywgY2IpXG5cbiAgcG5nLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBidWZmZXIucHVzaChkYXRhKVxuICB9KVxuXG4gIHBuZy5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGNiKG51bGwsIEJ1ZmZlci5jb25jYXQoYnVmZmVyKSlcbiAgfSlcblxuICBwbmcucGFjaygpXG59XG5cbmV4cG9ydHMucmVuZGVyVG9GaWxlID0gZnVuY3Rpb24gcmVuZGVyVG9GaWxlIChwYXRoLCBxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGlmICh0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgbGV0IGNhbGxlZCA9IGZhbHNlXG4gIGNvbnN0IGRvbmUgPSAoLi4uYXJncykgPT4ge1xuICAgIGlmIChjYWxsZWQpIHJldHVyblxuICAgIGNhbGxlZCA9IHRydWVcbiAgICBjYi5hcHBseShudWxsLCBhcmdzKVxuICB9XG4gIGNvbnN0IHN0cmVhbSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHBhdGgpXG5cbiAgc3RyZWFtLm9uKCdlcnJvcicsIGRvbmUpXG4gIHN0cmVhbS5vbignY2xvc2UnLCBkb25lKVxuXG4gIGV4cG9ydHMucmVuZGVyVG9GaWxlU3RyZWFtKHN0cmVhbSwgcXJEYXRhLCBvcHRpb25zKVxufVxuXG5leHBvcnRzLnJlbmRlclRvRmlsZVN0cmVhbSA9IGZ1bmN0aW9uIHJlbmRlclRvRmlsZVN0cmVhbSAoc3RyZWFtLCBxckRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgcG5nID0gZXhwb3J0cy5yZW5kZXIocXJEYXRhLCBvcHRpb25zKVxuICBwbmcucGFjaygpLnBpcGUoc3RyZWFtKVxufVxuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsIlBORyIsIlV0aWxzIiwiZXhwb3J0cyIsInJlbmRlciIsInFyRGF0YSIsIm9wdGlvbnMiLCJvcHRzIiwiZ2V0T3B0aW9ucyIsInBuZ09wdHMiLCJyZW5kZXJlck9wdHMiLCJzaXplIiwiZ2V0SW1hZ2VXaWR0aCIsIm1vZHVsZXMiLCJ3aWR0aCIsImhlaWdodCIsInBuZ0ltYWdlIiwicXJUb0ltYWdlRGF0YSIsImRhdGEiLCJyZW5kZXJUb0RhdGFVUkwiLCJjYiIsInVuZGVmaW5lZCIsInJlbmRlclRvQnVmZmVyIiwiZXJyIiwib3V0cHV0IiwidXJsIiwidG9TdHJpbmciLCJwbmciLCJidWZmZXIiLCJvbiIsInB1c2giLCJCdWZmZXIiLCJjb25jYXQiLCJwYWNrIiwicmVuZGVyVG9GaWxlIiwicGF0aCIsImNhbGxlZCIsImRvbmUiLCJhcmdzIiwiYXBwbHkiLCJzdHJlYW0iLCJjcmVhdGVXcml0ZVN0cmVhbSIsInJlbmRlclRvRmlsZVN0cmVhbSIsInBpcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/png.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg-tag.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg-tag.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utils.js\");\nfunction getColorAttrib(color, attrib) {\n    const alpha = color.a / 255;\n    const str = attrib + '=\"' + color.hex + '\"';\n    return alpha < 1 ? str + \" \" + attrib + '-opacity=\"' + alpha.toFixed(2).slice(1) + '\"' : str;\n}\nfunction svgCmd(cmd, x, y) {\n    let str = cmd + x;\n    if (typeof y !== \"undefined\") str += \" \" + y;\n    return str;\n}\nfunction qrToPath(data, size, margin) {\n    let path = \"\";\n    let moveBy = 0;\n    let newRow = false;\n    let lineLength = 0;\n    for(let i = 0; i < data.length; i++){\n        const col = Math.floor(i % size);\n        const row = Math.floor(i / size);\n        if (!col && !newRow) newRow = true;\n        if (data[i]) {\n            lineLength++;\n            if (!(i > 0 && col > 0 && data[i - 1])) {\n                path += newRow ? svgCmd(\"M\", col + margin, 0.5 + row + margin) : svgCmd(\"m\", moveBy, 0);\n                moveBy = 0;\n                newRow = false;\n            }\n            if (!(col + 1 < size && data[i + 1])) {\n                path += svgCmd(\"h\", lineLength);\n                lineLength = 0;\n            }\n        } else {\n            moveBy++;\n        }\n    }\n    return path;\n}\nexports.render = function render(qrData, options, cb) {\n    const opts = Utils.getOptions(options);\n    const size = qrData.modules.size;\n    const data = qrData.modules.data;\n    const qrcodesize = size + opts.margin * 2;\n    const bg = !opts.color.light.a ? \"\" : \"<path \" + getColorAttrib(opts.color.light, \"fill\") + ' d=\"M0 0h' + qrcodesize + \"v\" + qrcodesize + 'H0z\"/>';\n    const path = \"<path \" + getColorAttrib(opts.color.dark, \"stroke\") + ' d=\"' + qrToPath(data, size, opts.margin) + '\"/>';\n    const viewBox = 'viewBox=\"' + \"0 0 \" + qrcodesize + \" \" + qrcodesize + '\"';\n    const width = !opts.width ? \"\" : 'width=\"' + opts.width + '\" height=\"' + opts.width + '\" ';\n    const svgTag = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' + width + viewBox + ' shape-rendering=\"crispEdges\">' + bg + path + \"</svg>\\n\";\n    if (typeof cb === \"function\") {\n        cb(null, svgTag);\n    }\n    return svgTag;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3N2Zy10YWcuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFdEIsU0FBU0MsZUFBZ0JDLEtBQUssRUFBRUMsTUFBTTtJQUNwQyxNQUFNQyxRQUFRRixNQUFNRyxDQUFDLEdBQUc7SUFDeEIsTUFBTUMsTUFBTUgsU0FBUyxPQUFPRCxNQUFNSyxHQUFHLEdBQUc7SUFFeEMsT0FBT0gsUUFBUSxJQUNYRSxNQUFNLE1BQU1ILFNBQVMsZUFBZUMsTUFBTUksT0FBTyxDQUFDLEdBQUdDLEtBQUssQ0FBQyxLQUFLLE1BQ2hFSDtBQUNOO0FBRUEsU0FBU0ksT0FBUUMsR0FBRyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDeEIsSUFBSVAsTUFBTUssTUFBTUM7SUFDaEIsSUFBSSxPQUFPQyxNQUFNLGFBQWFQLE9BQU8sTUFBTU87SUFFM0MsT0FBT1A7QUFDVDtBQUVBLFNBQVNRLFNBQVVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxNQUFNO0lBQ25DLElBQUlDLE9BQU87SUFDWCxJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsU0FBUztJQUNiLElBQUlDLGFBQWE7SUFFakIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlQLEtBQUtRLE1BQU0sRUFBRUQsSUFBSztRQUNwQyxNQUFNRSxNQUFNQyxLQUFLQyxLQUFLLENBQUNKLElBQUlOO1FBQzNCLE1BQU1XLE1BQU1GLEtBQUtDLEtBQUssQ0FBQ0osSUFBSU47UUFFM0IsSUFBSSxDQUFDUSxPQUFPLENBQUNKLFFBQVFBLFNBQVM7UUFFOUIsSUFBSUwsSUFBSSxDQUFDTyxFQUFFLEVBQUU7WUFDWEQ7WUFFQSxJQUFJLENBQUVDLENBQUFBLElBQUksS0FBS0UsTUFBTSxLQUFLVCxJQUFJLENBQUNPLElBQUksRUFBRSxHQUFHO2dCQUN0Q0osUUFBUUUsU0FDSlYsT0FBTyxLQUFLYyxNQUFNUCxRQUFRLE1BQU1VLE1BQU1WLFVBQ3RDUCxPQUFPLEtBQUtTLFFBQVE7Z0JBRXhCQSxTQUFTO2dCQUNUQyxTQUFTO1lBQ1g7WUFFQSxJQUFJLENBQUVJLENBQUFBLE1BQU0sSUFBSVIsUUFBUUQsSUFBSSxDQUFDTyxJQUFJLEVBQUUsR0FBRztnQkFDcENKLFFBQVFSLE9BQU8sS0FBS1c7Z0JBQ3BCQSxhQUFhO1lBQ2Y7UUFDRixPQUFPO1lBQ0xGO1FBQ0Y7SUFDRjtJQUVBLE9BQU9EO0FBQ1Q7QUFFQVUsY0FBYyxHQUFHLFNBQVNDLE9BQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxFQUFFO0lBQ25ELE1BQU1DLE9BQU9sQyxNQUFNbUMsVUFBVSxDQUFDSDtJQUM5QixNQUFNZixPQUFPYyxPQUFPSyxPQUFPLENBQUNuQixJQUFJO0lBQ2hDLE1BQU1ELE9BQU9lLE9BQU9LLE9BQU8sQ0FBQ3BCLElBQUk7SUFDaEMsTUFBTXFCLGFBQWFwQixPQUFPaUIsS0FBS2hCLE1BQU0sR0FBRztJQUV4QyxNQUFNb0IsS0FBSyxDQUFDSixLQUFLL0IsS0FBSyxDQUFDb0MsS0FBSyxDQUFDakMsQ0FBQyxHQUMxQixLQUNBLFdBQVdKLGVBQWVnQyxLQUFLL0IsS0FBSyxDQUFDb0MsS0FBSyxFQUFFLFVBQzVDLGNBQWNGLGFBQWEsTUFBTUEsYUFBYTtJQUVsRCxNQUFNbEIsT0FDSixXQUFXakIsZUFBZWdDLEtBQUsvQixLQUFLLENBQUNxQyxJQUFJLEVBQUUsWUFDM0MsU0FBU3pCLFNBQVNDLE1BQU1DLE1BQU1pQixLQUFLaEIsTUFBTSxJQUFJO0lBRS9DLE1BQU11QixVQUFVLGNBQWMsU0FBU0osYUFBYSxNQUFNQSxhQUFhO0lBRXZFLE1BQU1LLFFBQVEsQ0FBQ1IsS0FBS1EsS0FBSyxHQUFHLEtBQUssWUFBWVIsS0FBS1EsS0FBSyxHQUFHLGVBQWVSLEtBQUtRLEtBQUssR0FBRztJQUV0RixNQUFNQyxTQUFTLDZDQUE2Q0QsUUFBUUQsVUFBVSxtQ0FBbUNILEtBQUtuQixPQUFPO0lBRTdILElBQUksT0FBT2MsT0FBTyxZQUFZO1FBQzVCQSxHQUFHLE1BQU1VO0lBQ1g7SUFFQSxPQUFPQTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvc3ZnLXRhZy5qcz8xOTlhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIGdldENvbG9yQXR0cmliIChjb2xvciwgYXR0cmliKSB7XG4gIGNvbnN0IGFscGhhID0gY29sb3IuYSAvIDI1NVxuICBjb25zdCBzdHIgPSBhdHRyaWIgKyAnPVwiJyArIGNvbG9yLmhleCArICdcIidcblxuICByZXR1cm4gYWxwaGEgPCAxXG4gICAgPyBzdHIgKyAnICcgKyBhdHRyaWIgKyAnLW9wYWNpdHk9XCInICsgYWxwaGEudG9GaXhlZCgyKS5zbGljZSgxKSArICdcIidcbiAgICA6IHN0clxufVxuXG5mdW5jdGlvbiBzdmdDbWQgKGNtZCwgeCwgeSkge1xuICBsZXQgc3RyID0gY21kICsgeFxuICBpZiAodHlwZW9mIHkgIT09ICd1bmRlZmluZWQnKSBzdHIgKz0gJyAnICsgeVxuXG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gcXJUb1BhdGggKGRhdGEsIHNpemUsIG1hcmdpbikge1xuICBsZXQgcGF0aCA9ICcnXG4gIGxldCBtb3ZlQnkgPSAwXG4gIGxldCBuZXdSb3cgPSBmYWxzZVxuICBsZXQgbGluZUxlbmd0aCA9IDBcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjb2wgPSBNYXRoLmZsb29yKGkgJSBzaXplKVxuICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoaSAvIHNpemUpXG5cbiAgICBpZiAoIWNvbCAmJiAhbmV3Um93KSBuZXdSb3cgPSB0cnVlXG5cbiAgICBpZiAoZGF0YVtpXSkge1xuICAgICAgbGluZUxlbmd0aCsrXG5cbiAgICAgIGlmICghKGkgPiAwICYmIGNvbCA+IDAgJiYgZGF0YVtpIC0gMV0pKSB7XG4gICAgICAgIHBhdGggKz0gbmV3Um93XG4gICAgICAgICAgPyBzdmdDbWQoJ00nLCBjb2wgKyBtYXJnaW4sIDAuNSArIHJvdyArIG1hcmdpbilcbiAgICAgICAgICA6IHN2Z0NtZCgnbScsIG1vdmVCeSwgMClcblxuICAgICAgICBtb3ZlQnkgPSAwXG4gICAgICAgIG5ld1JvdyA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmICghKGNvbCArIDEgPCBzaXplICYmIGRhdGFbaSArIDFdKSkge1xuICAgICAgICBwYXRoICs9IHN2Z0NtZCgnaCcsIGxpbmVMZW5ndGgpXG4gICAgICAgIGxpbmVMZW5ndGggPSAwXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdmVCeSsrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhdGhcbn1cblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgY29uc3Qgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0aW9ucylcbiAgY29uc3Qgc2l6ZSA9IHFyRGF0YS5tb2R1bGVzLnNpemVcbiAgY29uc3QgZGF0YSA9IHFyRGF0YS5tb2R1bGVzLmRhdGFcbiAgY29uc3QgcXJjb2Rlc2l6ZSA9IHNpemUgKyBvcHRzLm1hcmdpbiAqIDJcblxuICBjb25zdCBiZyA9ICFvcHRzLmNvbG9yLmxpZ2h0LmFcbiAgICA/ICcnXG4gICAgOiAnPHBhdGggJyArIGdldENvbG9yQXR0cmliKG9wdHMuY29sb3IubGlnaHQsICdmaWxsJykgK1xuICAgICAgJyBkPVwiTTAgMGgnICsgcXJjb2Rlc2l6ZSArICd2JyArIHFyY29kZXNpemUgKyAnSDB6XCIvPidcblxuICBjb25zdCBwYXRoID1cbiAgICAnPHBhdGggJyArIGdldENvbG9yQXR0cmliKG9wdHMuY29sb3IuZGFyaywgJ3N0cm9rZScpICtcbiAgICAnIGQ9XCInICsgcXJUb1BhdGgoZGF0YSwgc2l6ZSwgb3B0cy5tYXJnaW4pICsgJ1wiLz4nXG5cbiAgY29uc3Qgdmlld0JveCA9ICd2aWV3Qm94PVwiJyArICcwIDAgJyArIHFyY29kZXNpemUgKyAnICcgKyBxcmNvZGVzaXplICsgJ1wiJ1xuXG4gIGNvbnN0IHdpZHRoID0gIW9wdHMud2lkdGggPyAnJyA6ICd3aWR0aD1cIicgKyBvcHRzLndpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBvcHRzLndpZHRoICsgJ1wiICdcblxuICBjb25zdCBzdmdUYWcgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgJyArIHdpZHRoICsgdmlld0JveCArICcgc2hhcGUtcmVuZGVyaW5nPVwiY3Jpc3BFZGdlc1wiPicgKyBiZyArIHBhdGggKyAnPC9zdmc+XFxuJ1xuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYihudWxsLCBzdmdUYWcpXG4gIH1cblxuICByZXR1cm4gc3ZnVGFnXG59XG4iXSwibmFtZXMiOlsiVXRpbHMiLCJyZXF1aXJlIiwiZ2V0Q29sb3JBdHRyaWIiLCJjb2xvciIsImF0dHJpYiIsImFscGhhIiwiYSIsInN0ciIsImhleCIsInRvRml4ZWQiLCJzbGljZSIsInN2Z0NtZCIsImNtZCIsIngiLCJ5IiwicXJUb1BhdGgiLCJkYXRhIiwic2l6ZSIsIm1hcmdpbiIsInBhdGgiLCJtb3ZlQnkiLCJuZXdSb3ciLCJsaW5lTGVuZ3RoIiwiaSIsImxlbmd0aCIsImNvbCIsIk1hdGgiLCJmbG9vciIsInJvdyIsImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwiY2IiLCJvcHRzIiwiZ2V0T3B0aW9ucyIsIm1vZHVsZXMiLCJxcmNvZGVzaXplIiwiYmciLCJsaWdodCIsImRhcmsiLCJ2aWV3Qm94Iiwid2lkdGgiLCJzdmdUYWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg-tag.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const svgTagRenderer = __webpack_require__(/*! ./svg-tag */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg-tag.js\");\nexports.render = svgTagRenderer.render;\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    const fs = __webpack_require__(/*! fs */ \"fs\");\n    const svgTag = exports.render(qrData, options);\n    const xmlStr = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">' + svgTag;\n    fs.writeFile(path, xmlStr, cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3N2Zy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxpQkFBaUJDLG1CQUFPQSxDQUFDO0FBRS9CQyxjQUFjLEdBQUdGLGVBQWVHLE1BQU07QUFFdENELG9CQUFvQixHQUFHLFNBQVNFLGFBQWNDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEVBQUU7SUFDckUsSUFBSSxPQUFPQSxPQUFPLGFBQWE7UUFDN0JBLEtBQUtEO1FBQ0xBLFVBQVVFO0lBQ1o7SUFFQSxNQUFNQyxLQUFLVCxtQkFBT0EsQ0FBQztJQUNuQixNQUFNVSxTQUFTVCxRQUFRQyxNQUFNLENBQUNHLFFBQVFDO0lBRXRDLE1BQU1LLFNBQVMsMkNBQ2IsdUdBQ0FEO0lBRUZELEdBQUdHLFNBQVMsQ0FBQ1IsTUFBTU8sUUFBUUo7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9zdmcuanM/NmI2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzdmdUYWdSZW5kZXJlciA9IHJlcXVpcmUoJy4vc3ZnLXRhZycpXG5cbmV4cG9ydHMucmVuZGVyID0gc3ZnVGFnUmVuZGVyZXIucmVuZGVyXG5cbmV4cG9ydHMucmVuZGVyVG9GaWxlID0gZnVuY3Rpb24gcmVuZGVyVG9GaWxlIChwYXRoLCBxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGlmICh0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG4gIGNvbnN0IHN2Z1RhZyA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgb3B0aW9ucylcblxuICBjb25zdCB4bWxTdHIgPSAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwidXRmLThcIj8+JyArXG4gICAgJzwhRE9DVFlQRSBzdmcgUFVCTElDIFwiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU5cIiBcImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZFwiPicgK1xuICAgIHN2Z1RhZ1xuXG4gIGZzLndyaXRlRmlsZShwYXRoLCB4bWxTdHIsIGNiKVxufVxuIl0sIm5hbWVzIjpbInN2Z1RhZ1JlbmRlcmVyIiwicmVxdWlyZSIsImV4cG9ydHMiLCJyZW5kZXIiLCJyZW5kZXJUb0ZpbGUiLCJwYXRoIiwicXJEYXRhIiwib3B0aW9ucyIsImNiIiwidW5kZWZpbmVkIiwiZnMiLCJzdmdUYWciLCJ4bWxTdHIiLCJ3cml0ZUZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const big = __webpack_require__(/*! ./terminal/terminal */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal/terminal.js\");\nconst small = __webpack_require__(/*! ./terminal/terminal-small */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal/terminal-small.js\");\nexports.render = function(qrData, options, cb) {\n    if (options && options.small) {\n        return small.render(qrData, options, cb);\n    }\n    return big.render(qrData, options, cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3Rlcm1pbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU1DLG1CQUFPQSxDQUFDO0FBQ3BCLE1BQU1DLFFBQVFELG1CQUFPQSxDQUFDO0FBRXRCRSxjQUFjLEdBQUcsU0FBVUUsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEVBQUU7SUFDNUMsSUFBSUQsV0FBV0EsUUFBUUosS0FBSyxFQUFFO1FBQzVCLE9BQU9BLE1BQU1FLE1BQU0sQ0FBQ0MsUUFBUUMsU0FBU0M7SUFDdkM7SUFDQSxPQUFPUCxJQUFJSSxNQUFNLENBQUNDLFFBQVFDLFNBQVNDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjQvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvdGVybWluYWwuanM/YjkxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiaWcgPSByZXF1aXJlKCcuL3Rlcm1pbmFsL3Rlcm1pbmFsJylcbmNvbnN0IHNtYWxsID0gcmVxdWlyZSgnLi90ZXJtaW5hbC90ZXJtaW5hbC1zbWFsbCcpXG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gKHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zbWFsbCkge1xuICAgIHJldHVybiBzbWFsbC5yZW5kZXIocXJEYXRhLCBvcHRpb25zLCBjYilcbiAgfVxuICByZXR1cm4gYmlnLnJlbmRlcihxckRhdGEsIG9wdGlvbnMsIGNiKVxufVxuIl0sIm5hbWVzIjpbImJpZyIsInJlcXVpcmUiLCJzbWFsbCIsImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwiY2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal/terminal-small.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal/terminal-small.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const backgroundWhite = \"\\x1b[47m\";\nconst backgroundBlack = \"\\x1b[40m\";\nconst foregroundWhite = \"\\x1b[37m\";\nconst foregroundBlack = \"\\x1b[30m\";\nconst reset = \"\\x1b[0m\";\nconst lineSetupNormal = backgroundWhite + foregroundBlack // setup colors\n;\nconst lineSetupInverse = backgroundBlack + foregroundWhite // setup colors\n;\nconst createPalette = function(lineSetup, foregroundWhite, foregroundBlack) {\n    return {\n        // 1 ... white, 2 ... black, 0 ... transparent (default)\n        \"00\": reset + \" \" + lineSetup,\n        \"01\": reset + foregroundWhite + \"▄\" + lineSetup,\n        \"02\": reset + foregroundBlack + \"▄\" + lineSetup,\n        10: reset + foregroundWhite + \"▀\" + lineSetup,\n        11: \" \",\n        12: \"▄\",\n        20: reset + foregroundBlack + \"▀\" + lineSetup,\n        21: \"▀\",\n        22: \"█\"\n    };\n};\n/**\n * Returns code for QR pixel\n * @param {boolean[][]} modules\n * @param {number} size\n * @param {number} x\n * @param {number} y\n * @return {'0' | '1' | '2'}\n */ const mkCodePixel = function(modules, size, x, y) {\n    const sizePlus = size + 1;\n    if (x >= sizePlus || y >= sizePlus || y < -1 || x < -1) return \"0\";\n    if (x >= size || y >= size || y < 0 || x < 0) return \"1\";\n    const idx = y * size + x;\n    return modules[idx] ? \"2\" : \"1\";\n};\n/**\n * Returns code for four QR pixels. Suitable as key in palette.\n * @param {boolean[][]} modules\n * @param {number} size\n * @param {number} x\n * @param {number} y\n * @return {keyof palette}\n */ const mkCode = function(modules, size, x, y) {\n    return mkCodePixel(modules, size, x, y) + mkCodePixel(modules, size, x, y + 1);\n};\nexports.render = function(qrData, options, cb) {\n    const size = qrData.modules.size;\n    const data = qrData.modules.data;\n    const inverse = !!(options && options.inverse);\n    const lineSetup = options && options.inverse ? lineSetupInverse : lineSetupNormal;\n    const white = inverse ? foregroundBlack : foregroundWhite;\n    const black = inverse ? foregroundWhite : foregroundBlack;\n    const palette = createPalette(lineSetup, white, black);\n    const newLine = reset + \"\\n\" + lineSetup;\n    let output = lineSetup // setup colors\n    ;\n    for(let y = -1; y < size + 1; y += 2){\n        for(let x = -1; x < size; x++){\n            output += palette[mkCode(data, size, x, y)];\n        }\n        output += palette[mkCode(data, size, size, y)] + newLine;\n    }\n    output += reset;\n    if (typeof cb === \"function\") {\n        cb(null, output);\n    }\n    return output;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3Rlcm1pbmFsL3Rlcm1pbmFsLXNtYWxsLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLGtCQUFrQjtBQUN4QixNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQyxRQUFRO0FBQ2QsTUFBTUMsa0JBQWtCTCxrQkFBa0JHLGdCQUFnQixlQUFlOztBQUN6RSxNQUFNRyxtQkFBbUJMLGtCQUFrQkMsZ0JBQWdCLGVBQWU7O0FBRTFFLE1BQU1LLGdCQUFnQixTQUFVQyxTQUFTLEVBQUVOLGVBQWUsRUFBRUMsZUFBZTtJQUN6RSxPQUFPO1FBQ0wsd0RBQXdEO1FBRXhELE1BQU1DLFFBQVEsTUFBTUk7UUFDcEIsTUFBTUosUUFBUUYsa0JBQWtCLE1BQU1NO1FBQ3RDLE1BQU1KLFFBQVFELGtCQUFrQixNQUFNSztRQUN0QyxJQUFJSixRQUFRRixrQkFBa0IsTUFBTU07UUFDcEMsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJSixRQUFRRCxrQkFBa0IsTUFBTUs7UUFDcEMsSUFBSTtRQUNKLElBQUk7SUFDTjtBQUNGO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELE1BQU1DLGNBQWMsU0FBVUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUMvQyxNQUFNQyxXQUFXSCxPQUFPO0lBQ3hCLElBQUksS0FBTUcsWUFBY0QsS0FBS0MsWUFBY0QsSUFBSSxDQUFDLEtBQU9ELElBQUksQ0FBQyxHQUFJLE9BQU87SUFDdkUsSUFBSSxLQUFNRCxRQUFVRSxLQUFLRixRQUFVRSxJQUFJLEtBQU9ELElBQUksR0FBSSxPQUFPO0lBQzdELE1BQU1HLE1BQU0sSUFBS0osT0FBUUM7SUFDekIsT0FBT0YsT0FBTyxDQUFDSyxJQUFJLEdBQUcsTUFBTTtBQUM5QjtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxNQUFNQyxTQUFTLFNBQVVOLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDMUMsT0FDRUosWUFBWUMsU0FBU0MsTUFBTUMsR0FBR0MsS0FDOUJKLFlBQVlDLFNBQVNDLE1BQU1DLEdBQUdDLElBQUk7QUFFdEM7QUFFQUksY0FBYyxHQUFHLFNBQVVFLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxFQUFFO0lBQzVDLE1BQU1WLE9BQU9RLE9BQU9ULE9BQU8sQ0FBQ0MsSUFBSTtJQUNoQyxNQUFNVyxPQUFPSCxPQUFPVCxPQUFPLENBQUNZLElBQUk7SUFFaEMsTUFBTUMsVUFBVSxDQUFDLENBQUVILENBQUFBLFdBQVdBLFFBQVFHLE9BQU87SUFDN0MsTUFBTWYsWUFBWVksV0FBV0EsUUFBUUcsT0FBTyxHQUFHakIsbUJBQW1CRDtJQUNsRSxNQUFNbUIsUUFBUUQsVUFBVXBCLGtCQUFrQkQ7SUFDMUMsTUFBTXVCLFFBQVFGLFVBQVVyQixrQkFBa0JDO0lBRTFDLE1BQU11QixVQUFVbkIsY0FBY0MsV0FBV2dCLE9BQU9DO0lBQ2hELE1BQU1FLFVBQVV2QixRQUFRLE9BQU9JO0lBRS9CLElBQUlvQixTQUFTcEIsVUFBVSxlQUFlOztJQUV0QyxJQUFLLElBQUlLLElBQUksQ0FBQyxHQUFHQSxJQUFJRixPQUFPLEdBQUdFLEtBQUssRUFBRztRQUNyQyxJQUFLLElBQUlELElBQUksQ0FBQyxHQUFHQSxJQUFJRCxNQUFNQyxJQUFLO1lBQzlCZ0IsVUFBVUYsT0FBTyxDQUFDVixPQUFPTSxNQUFNWCxNQUFNQyxHQUFHQyxHQUFHO1FBQzdDO1FBRUFlLFVBQVVGLE9BQU8sQ0FBQ1YsT0FBT00sTUFBTVgsTUFBTUEsTUFBTUUsR0FBRyxHQUFHYztJQUNuRDtJQUVBQyxVQUFVeEI7SUFFVixJQUFJLE9BQU9pQixPQUFPLFlBQVk7UUFDNUJBLEdBQUcsTUFBTU87SUFDWDtJQUVBLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci90ZXJtaW5hbC90ZXJtaW5hbC1zbWFsbC5qcz83NGFjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJhY2tncm91bmRXaGl0ZSA9ICdcXHgxYls0N20nXG5jb25zdCBiYWNrZ3JvdW5kQmxhY2sgPSAnXFx4MWJbNDBtJ1xuY29uc3QgZm9yZWdyb3VuZFdoaXRlID0gJ1xceDFiWzM3bSdcbmNvbnN0IGZvcmVncm91bmRCbGFjayA9ICdcXHgxYlszMG0nXG5jb25zdCByZXNldCA9ICdcXHgxYlswbSdcbmNvbnN0IGxpbmVTZXR1cE5vcm1hbCA9IGJhY2tncm91bmRXaGl0ZSArIGZvcmVncm91bmRCbGFjayAvLyBzZXR1cCBjb2xvcnNcbmNvbnN0IGxpbmVTZXR1cEludmVyc2UgPSBiYWNrZ3JvdW5kQmxhY2sgKyBmb3JlZ3JvdW5kV2hpdGUgLy8gc2V0dXAgY29sb3JzXG5cbmNvbnN0IGNyZWF0ZVBhbGV0dGUgPSBmdW5jdGlvbiAobGluZVNldHVwLCBmb3JlZ3JvdW5kV2hpdGUsIGZvcmVncm91bmRCbGFjaykge1xuICByZXR1cm4ge1xuICAgIC8vIDEgLi4uIHdoaXRlLCAyIC4uLiBibGFjaywgMCAuLi4gdHJhbnNwYXJlbnQgKGRlZmF1bHQpXG5cbiAgICAnMDAnOiByZXNldCArICcgJyArIGxpbmVTZXR1cCxcbiAgICAnMDEnOiByZXNldCArIGZvcmVncm91bmRXaGl0ZSArICfiloQnICsgbGluZVNldHVwLFxuICAgICcwMic6IHJlc2V0ICsgZm9yZWdyb3VuZEJsYWNrICsgJ+KWhCcgKyBsaW5lU2V0dXAsXG4gICAgMTA6IHJlc2V0ICsgZm9yZWdyb3VuZFdoaXRlICsgJ+KWgCcgKyBsaW5lU2V0dXAsXG4gICAgMTE6ICcgJyxcbiAgICAxMjogJ+KWhCcsXG4gICAgMjA6IHJlc2V0ICsgZm9yZWdyb3VuZEJsYWNrICsgJ+KWgCcgKyBsaW5lU2V0dXAsXG4gICAgMjE6ICfiloAnLFxuICAgIDIyOiAn4paIJ1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBjb2RlIGZvciBRUiBwaXhlbFxuICogQHBhcmFtIHtib29sZWFuW11bXX0gbW9kdWxlc1xuICogQHBhcmFtIHtudW1iZXJ9IHNpemVcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcGFyYW0ge251bWJlcn0geVxuICogQHJldHVybiB7JzAnIHwgJzEnIHwgJzInfVxuICovXG5jb25zdCBta0NvZGVQaXhlbCA9IGZ1bmN0aW9uIChtb2R1bGVzLCBzaXplLCB4LCB5KSB7XG4gIGNvbnN0IHNpemVQbHVzID0gc2l6ZSArIDFcbiAgaWYgKCh4ID49IHNpemVQbHVzKSB8fCAoeSA+PSBzaXplUGx1cykgfHwgKHkgPCAtMSkgfHwgKHggPCAtMSkpIHJldHVybiAnMCdcbiAgaWYgKCh4ID49IHNpemUpIHx8ICh5ID49IHNpemUpIHx8ICh5IDwgMCkgfHwgKHggPCAwKSkgcmV0dXJuICcxJ1xuICBjb25zdCBpZHggPSAoeSAqIHNpemUpICsgeFxuICByZXR1cm4gbW9kdWxlc1tpZHhdID8gJzInIDogJzEnXG59XG5cbi8qKlxuICogUmV0dXJucyBjb2RlIGZvciBmb3VyIFFSIHBpeGVscy4gU3VpdGFibGUgYXMga2V5IGluIHBhbGV0dGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW5bXVtdfSBtb2R1bGVzXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtrZXlvZiBwYWxldHRlfVxuICovXG5jb25zdCBta0NvZGUgPSBmdW5jdGlvbiAobW9kdWxlcywgc2l6ZSwgeCwgeSkge1xuICByZXR1cm4gKFxuICAgIG1rQ29kZVBpeGVsKG1vZHVsZXMsIHNpemUsIHgsIHkpICtcbiAgICBta0NvZGVQaXhlbChtb2R1bGVzLCBzaXplLCB4LCB5ICsgMSlcbiAgKVxufVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGNvbnN0IHNpemUgPSBxckRhdGEubW9kdWxlcy5zaXplXG4gIGNvbnN0IGRhdGEgPSBxckRhdGEubW9kdWxlcy5kYXRhXG5cbiAgY29uc3QgaW52ZXJzZSA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5pbnZlcnNlKVxuICBjb25zdCBsaW5lU2V0dXAgPSBvcHRpb25zICYmIG9wdGlvbnMuaW52ZXJzZSA/IGxpbmVTZXR1cEludmVyc2UgOiBsaW5lU2V0dXBOb3JtYWxcbiAgY29uc3Qgd2hpdGUgPSBpbnZlcnNlID8gZm9yZWdyb3VuZEJsYWNrIDogZm9yZWdyb3VuZFdoaXRlXG4gIGNvbnN0IGJsYWNrID0gaW52ZXJzZSA/IGZvcmVncm91bmRXaGl0ZSA6IGZvcmVncm91bmRCbGFja1xuXG4gIGNvbnN0IHBhbGV0dGUgPSBjcmVhdGVQYWxldHRlKGxpbmVTZXR1cCwgd2hpdGUsIGJsYWNrKVxuICBjb25zdCBuZXdMaW5lID0gcmVzZXQgKyAnXFxuJyArIGxpbmVTZXR1cFxuXG4gIGxldCBvdXRwdXQgPSBsaW5lU2V0dXAgLy8gc2V0dXAgY29sb3JzXG5cbiAgZm9yIChsZXQgeSA9IC0xOyB5IDwgc2l6ZSArIDE7IHkgKz0gMikge1xuICAgIGZvciAobGV0IHggPSAtMTsgeCA8IHNpemU7IHgrKykge1xuICAgICAgb3V0cHV0ICs9IHBhbGV0dGVbbWtDb2RlKGRhdGEsIHNpemUsIHgsIHkpXVxuICAgIH1cblxuICAgIG91dHB1dCArPSBwYWxldHRlW21rQ29kZShkYXRhLCBzaXplLCBzaXplLCB5KV0gKyBuZXdMaW5lXG4gIH1cblxuICBvdXRwdXQgKz0gcmVzZXRcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IobnVsbCwgb3V0cHV0KVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dFxufVxuIl0sIm5hbWVzIjpbImJhY2tncm91bmRXaGl0ZSIsImJhY2tncm91bmRCbGFjayIsImZvcmVncm91bmRXaGl0ZSIsImZvcmVncm91bmRCbGFjayIsInJlc2V0IiwibGluZVNldHVwTm9ybWFsIiwibGluZVNldHVwSW52ZXJzZSIsImNyZWF0ZVBhbGV0dGUiLCJsaW5lU2V0dXAiLCJta0NvZGVQaXhlbCIsIm1vZHVsZXMiLCJzaXplIiwieCIsInkiLCJzaXplUGx1cyIsImlkeCIsIm1rQ29kZSIsImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwiY2IiLCJkYXRhIiwiaW52ZXJzZSIsIndoaXRlIiwiYmxhY2siLCJwYWxldHRlIiwibmV3TGluZSIsIm91dHB1dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal/terminal-small.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal/terminal.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal/terminal.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// let Utils = require('./utils')\nexports.render = function(qrData, options, cb) {\n    const size = qrData.modules.size;\n    const data = qrData.modules.data;\n    // let opts = Utils.getOptions(options)\n    // use same scheme as https://github.com/gtanner/qrcode-terminal because it actually works! =)\n    const black = \"\\x1b[40m  \\x1b[0m\";\n    const white = \"\\x1b[47m  \\x1b[0m\";\n    let output = \"\";\n    const hMargin = Array(size + 3).join(white);\n    const vMargin = Array(2).join(white);\n    output += hMargin + \"\\n\";\n    for(let i = 0; i < size; ++i){\n        output += white;\n        for(let j = 0; j < size; j++){\n            // let topModule = data[i * size + j]\n            // let bottomModule = data[(i + 1) * size + j]\n            output += data[i * size + j] ? black : white // getBlockChar(topModule, bottomModule)\n            ;\n        }\n        // output += white+'\\n'\n        output += vMargin + \"\\n\";\n    }\n    output += hMargin + \"\\n\";\n    if (typeof cb === \"function\") {\n        cb(null, output);\n    }\n    return output;\n} /*\nexports.renderToFile = function renderToFile (path, qrData, options, cb) {\n  if (typeof cb === 'undefined') {\n    cb = options\n    options = undefined\n  }\n\n  let fs = require('fs')\n  let utf8 = exports.render(qrData, options)\n  fs.writeFile(path, utf8, cb)\n}\n*/ ;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3Rlcm1pbmFsL3Rlcm1pbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQ0EsY0FBYyxHQUFHLFNBQVVFLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxFQUFFO0lBQzVDLE1BQU1DLE9BQU9ILE9BQU9JLE9BQU8sQ0FBQ0QsSUFBSTtJQUNoQyxNQUFNRSxPQUFPTCxPQUFPSSxPQUFPLENBQUNDLElBQUk7SUFFaEMsdUNBQXVDO0lBRXZDLDhGQUE4RjtJQUM5RixNQUFNQyxRQUFRO0lBQ2QsTUFBTUMsUUFBUTtJQUVkLElBQUlDLFNBQVM7SUFDYixNQUFNQyxVQUFVQyxNQUFNUCxPQUFPLEdBQUdRLElBQUksQ0FBQ0o7SUFDckMsTUFBTUssVUFBVUYsTUFBTSxHQUFHQyxJQUFJLENBQUNKO0lBRTlCQyxVQUFVQyxVQUFVO0lBQ3BCLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJVixNQUFNLEVBQUVVLEVBQUc7UUFDN0JMLFVBQVVEO1FBQ1YsSUFBSyxJQUFJTyxJQUFJLEdBQUdBLElBQUlYLE1BQU1XLElBQUs7WUFDN0IscUNBQXFDO1lBQ3JDLDhDQUE4QztZQUU5Q04sVUFBVUgsSUFBSSxDQUFDUSxJQUFJVixPQUFPVyxFQUFFLEdBQUdSLFFBQVFDLE1BQUssd0NBQXdDOztRQUN0RjtRQUNBLHVCQUF1QjtRQUN2QkMsVUFBVUksVUFBVTtJQUN0QjtJQUVBSixVQUFVQyxVQUFVO0lBRXBCLElBQUksT0FBT1AsT0FBTyxZQUFZO1FBQzVCQSxHQUFHLE1BQU1NO0lBQ1g7SUFFQSxPQUFPQTtBQUNULEVBQ0E7Ozs7Ozs7Ozs7O0FBV0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci90ZXJtaW5hbC90ZXJtaW5hbC5qcz9mMDg4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxldCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGNvbnN0IHNpemUgPSBxckRhdGEubW9kdWxlcy5zaXplXG4gIGNvbnN0IGRhdGEgPSBxckRhdGEubW9kdWxlcy5kYXRhXG5cbiAgLy8gbGV0IG9wdHMgPSBVdGlscy5nZXRPcHRpb25zKG9wdGlvbnMpXG5cbiAgLy8gdXNlIHNhbWUgc2NoZW1lIGFzIGh0dHBzOi8vZ2l0aHViLmNvbS9ndGFubmVyL3FyY29kZS10ZXJtaW5hbCBiZWNhdXNlIGl0IGFjdHVhbGx5IHdvcmtzISA9KVxuICBjb25zdCBibGFjayA9ICdcXHgxYls0MG0gIFxceDFiWzBtJ1xuICBjb25zdCB3aGl0ZSA9ICdcXHgxYls0N20gIFxceDFiWzBtJ1xuXG4gIGxldCBvdXRwdXQgPSAnJ1xuICBjb25zdCBoTWFyZ2luID0gQXJyYXkoc2l6ZSArIDMpLmpvaW4od2hpdGUpXG4gIGNvbnN0IHZNYXJnaW4gPSBBcnJheSgyKS5qb2luKHdoaXRlKVxuXG4gIG91dHB1dCArPSBoTWFyZ2luICsgJ1xcbidcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICBvdXRwdXQgKz0gd2hpdGVcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNpemU7IGorKykge1xuICAgICAgLy8gbGV0IHRvcE1vZHVsZSA9IGRhdGFbaSAqIHNpemUgKyBqXVxuICAgICAgLy8gbGV0IGJvdHRvbU1vZHVsZSA9IGRhdGFbKGkgKyAxKSAqIHNpemUgKyBqXVxuXG4gICAgICBvdXRwdXQgKz0gZGF0YVtpICogc2l6ZSArIGpdID8gYmxhY2sgOiB3aGl0ZS8vIGdldEJsb2NrQ2hhcih0b3BNb2R1bGUsIGJvdHRvbU1vZHVsZSlcbiAgICB9XG4gICAgLy8gb3V0cHV0ICs9IHdoaXRlKydcXG4nXG4gICAgb3V0cHV0ICs9IHZNYXJnaW4gKyAnXFxuJ1xuICB9XG5cbiAgb3V0cHV0ICs9IGhNYXJnaW4gKyAnXFxuJ1xuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYihudWxsLCBvdXRwdXQpXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG4vKlxuZXhwb3J0cy5yZW5kZXJUb0ZpbGUgPSBmdW5jdGlvbiByZW5kZXJUb0ZpbGUgKHBhdGgsIHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYiA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkXG4gIH1cblxuICBsZXQgZnMgPSByZXF1aXJlKCdmcycpXG4gIGxldCB1dGY4ID0gZXhwb3J0cy5yZW5kZXIocXJEYXRhLCBvcHRpb25zKVxuICBmcy53cml0ZUZpbGUocGF0aCwgdXRmOCwgY2IpXG59XG4qL1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwiY2IiLCJzaXplIiwibW9kdWxlcyIsImRhdGEiLCJibGFjayIsIndoaXRlIiwib3V0cHV0IiwiaE1hcmdpbiIsIkFycmF5Iiwiam9pbiIsInZNYXJnaW4iLCJpIiwiaiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal/terminal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utf8.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utf8.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utils.js\");\nconst BLOCK_CHAR = {\n    WW: \" \",\n    WB: \"▄\",\n    BB: \"█\",\n    BW: \"▀\"\n};\nconst INVERTED_BLOCK_CHAR = {\n    BB: \" \",\n    BW: \"▄\",\n    WW: \"█\",\n    WB: \"▀\"\n};\nfunction getBlockChar(top, bottom, blocks) {\n    if (top && bottom) return blocks.BB;\n    if (top && !bottom) return blocks.BW;\n    if (!top && bottom) return blocks.WB;\n    return blocks.WW;\n}\nexports.render = function(qrData, options, cb) {\n    const opts = Utils.getOptions(options);\n    let blocks = BLOCK_CHAR;\n    if (opts.color.dark.hex === \"#ffffff\" || opts.color.light.hex === \"#000000\") {\n        blocks = INVERTED_BLOCK_CHAR;\n    }\n    const size = qrData.modules.size;\n    const data = qrData.modules.data;\n    let output = \"\";\n    let hMargin = Array(size + opts.margin * 2 + 1).join(blocks.WW);\n    hMargin = Array(opts.margin / 2 + 1).join(hMargin + \"\\n\");\n    const vMargin = Array(opts.margin + 1).join(blocks.WW);\n    output += hMargin;\n    for(let i = 0; i < size; i += 2){\n        output += vMargin;\n        for(let j = 0; j < size; j++){\n            const topModule = data[i * size + j];\n            const bottomModule = data[(i + 1) * size + j];\n            output += getBlockChar(topModule, bottomModule, blocks);\n        }\n        output += vMargin + \"\\n\";\n    }\n    output += hMargin.slice(0, -1);\n    if (typeof cb === \"function\") {\n        cb(null, output);\n    }\n    return output;\n};\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    const fs = __webpack_require__(/*! fs */ \"fs\");\n    const utf8 = exports.render(qrData, options);\n    fs.writeFile(path, utf8, cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3V0ZjguanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFdEIsTUFBTUMsYUFBYTtJQUNqQkMsSUFBSTtJQUNKQyxJQUFJO0lBQ0pDLElBQUk7SUFDSkMsSUFBSTtBQUNOO0FBRUEsTUFBTUMsc0JBQXNCO0lBQzFCRixJQUFJO0lBQ0pDLElBQUk7SUFDSkgsSUFBSTtJQUNKQyxJQUFJO0FBQ047QUFFQSxTQUFTSSxhQUFjQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsTUFBTTtJQUN4QyxJQUFJRixPQUFPQyxRQUFRLE9BQU9DLE9BQU9OLEVBQUU7SUFDbkMsSUFBSUksT0FBTyxDQUFDQyxRQUFRLE9BQU9DLE9BQU9MLEVBQUU7SUFDcEMsSUFBSSxDQUFDRyxPQUFPQyxRQUFRLE9BQU9DLE9BQU9QLEVBQUU7SUFDcEMsT0FBT08sT0FBT1IsRUFBRTtBQUNsQjtBQUVBUyxjQUFjLEdBQUcsU0FBVUUsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEVBQUU7SUFDNUMsTUFBTUMsT0FBT2pCLE1BQU1rQixVQUFVLENBQUNIO0lBQzlCLElBQUlKLFNBQVNUO0lBQ2IsSUFBSWUsS0FBS0UsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsS0FBSyxhQUFhSixLQUFLRSxLQUFLLENBQUNHLEtBQUssQ0FBQ0QsR0FBRyxLQUFLLFdBQVc7UUFDM0VWLFNBQVNKO0lBQ1g7SUFFQSxNQUFNZ0IsT0FBT1QsT0FBT1UsT0FBTyxDQUFDRCxJQUFJO0lBQ2hDLE1BQU1FLE9BQU9YLE9BQU9VLE9BQU8sQ0FBQ0MsSUFBSTtJQUVoQyxJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsVUFBVUMsTUFBTUwsT0FBUU4sS0FBS1ksTUFBTSxHQUFHLElBQUssR0FBR0MsSUFBSSxDQUFDbkIsT0FBT1IsRUFBRTtJQUNoRXdCLFVBQVVDLE1BQU0sS0FBTUMsTUFBTSxHQUFHLElBQUssR0FBR0MsSUFBSSxDQUFDSCxVQUFVO0lBRXRELE1BQU1JLFVBQVVILE1BQU1YLEtBQUtZLE1BQU0sR0FBRyxHQUFHQyxJQUFJLENBQUNuQixPQUFPUixFQUFFO0lBRXJEdUIsVUFBVUM7SUFDVixJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSVQsTUFBTVMsS0FBSyxFQUFHO1FBQ2hDTixVQUFVSztRQUNWLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJVixNQUFNVSxJQUFLO1lBQzdCLE1BQU1DLFlBQVlULElBQUksQ0FBQ08sSUFBSVQsT0FBT1UsRUFBRTtZQUNwQyxNQUFNRSxlQUFlVixJQUFJLENBQUMsQ0FBQ08sSUFBSSxLQUFLVCxPQUFPVSxFQUFFO1lBRTdDUCxVQUFVbEIsYUFBYTBCLFdBQVdDLGNBQWN4QjtRQUNsRDtRQUVBZSxVQUFVSyxVQUFVO0lBQ3RCO0lBRUFMLFVBQVVDLFFBQVFTLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFFNUIsSUFBSSxPQUFPcEIsT0FBTyxZQUFZO1FBQzVCQSxHQUFHLE1BQU1VO0lBQ1g7SUFFQSxPQUFPQTtBQUNUO0FBRUFkLG9CQUFvQixHQUFHLFNBQVN5QixhQUFjQyxJQUFJLEVBQUV4QixNQUFNLEVBQUVDLE9BQU8sRUFBRUMsRUFBRTtJQUNyRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS0Q7UUFDTEEsVUFBVXdCO0lBQ1o7SUFFQSxNQUFNQyxLQUFLdkMsbUJBQU9BLENBQUM7SUFDbkIsTUFBTXdDLE9BQU83QixRQUFRQyxNQUFNLENBQUNDLFFBQVFDO0lBQ3BDeUIsR0FBR0UsU0FBUyxDQUFDSixNQUFNRyxNQUFNekI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci91dGY4LmpzPzQ5NDUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuY29uc3QgQkxPQ0tfQ0hBUiA9IHtcbiAgV1c6ICcgJyxcbiAgV0I6ICfiloQnLFxuICBCQjogJ+KWiCcsXG4gIEJXOiAn4paAJ1xufVxuXG5jb25zdCBJTlZFUlRFRF9CTE9DS19DSEFSID0ge1xuICBCQjogJyAnLFxuICBCVzogJ+KWhCcsXG4gIFdXOiAn4paIJyxcbiAgV0I6ICfiloAnXG59XG5cbmZ1bmN0aW9uIGdldEJsb2NrQ2hhciAodG9wLCBib3R0b20sIGJsb2Nrcykge1xuICBpZiAodG9wICYmIGJvdHRvbSkgcmV0dXJuIGJsb2Nrcy5CQlxuICBpZiAodG9wICYmICFib3R0b20pIHJldHVybiBibG9ja3MuQldcbiAgaWYgKCF0b3AgJiYgYm90dG9tKSByZXR1cm4gYmxvY2tzLldCXG4gIHJldHVybiBibG9ja3MuV1dcbn1cblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiAocXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBjb25zdCBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICBsZXQgYmxvY2tzID0gQkxPQ0tfQ0hBUlxuICBpZiAob3B0cy5jb2xvci5kYXJrLmhleCA9PT0gJyNmZmZmZmYnIHx8IG9wdHMuY29sb3IubGlnaHQuaGV4ID09PSAnIzAwMDAwMCcpIHtcbiAgICBibG9ja3MgPSBJTlZFUlRFRF9CTE9DS19DSEFSXG4gIH1cblxuICBjb25zdCBzaXplID0gcXJEYXRhLm1vZHVsZXMuc2l6ZVxuICBjb25zdCBkYXRhID0gcXJEYXRhLm1vZHVsZXMuZGF0YVxuXG4gIGxldCBvdXRwdXQgPSAnJ1xuICBsZXQgaE1hcmdpbiA9IEFycmF5KHNpemUgKyAob3B0cy5tYXJnaW4gKiAyKSArIDEpLmpvaW4oYmxvY2tzLldXKVxuICBoTWFyZ2luID0gQXJyYXkoKG9wdHMubWFyZ2luIC8gMikgKyAxKS5qb2luKGhNYXJnaW4gKyAnXFxuJylcblxuICBjb25zdCB2TWFyZ2luID0gQXJyYXkob3B0cy5tYXJnaW4gKyAxKS5qb2luKGJsb2Nrcy5XVylcblxuICBvdXRwdXQgKz0gaE1hcmdpblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkgKz0gMikge1xuICAgIG91dHB1dCArPSB2TWFyZ2luXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgIGNvbnN0IHRvcE1vZHVsZSA9IGRhdGFbaSAqIHNpemUgKyBqXVxuICAgICAgY29uc3QgYm90dG9tTW9kdWxlID0gZGF0YVsoaSArIDEpICogc2l6ZSArIGpdXG5cbiAgICAgIG91dHB1dCArPSBnZXRCbG9ja0NoYXIodG9wTW9kdWxlLCBib3R0b21Nb2R1bGUsIGJsb2NrcylcbiAgICB9XG5cbiAgICBvdXRwdXQgKz0gdk1hcmdpbiArICdcXG4nXG4gIH1cblxuICBvdXRwdXQgKz0gaE1hcmdpbi5zbGljZSgwLCAtMSlcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IobnVsbCwgb3V0cHV0KVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dFxufVxuXG5leHBvcnRzLnJlbmRlclRvRmlsZSA9IGZ1bmN0aW9uIHJlbmRlclRvRmlsZSAocGF0aCwgcXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuICBjb25zdCB1dGY4ID0gZXhwb3J0cy5yZW5kZXIocXJEYXRhLCBvcHRpb25zKVxuICBmcy53cml0ZUZpbGUocGF0aCwgdXRmOCwgY2IpXG59XG4iXSwibmFtZXMiOlsiVXRpbHMiLCJyZXF1aXJlIiwiQkxPQ0tfQ0hBUiIsIldXIiwiV0IiLCJCQiIsIkJXIiwiSU5WRVJURURfQkxPQ0tfQ0hBUiIsImdldEJsb2NrQ2hhciIsInRvcCIsImJvdHRvbSIsImJsb2NrcyIsImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwiY2IiLCJvcHRzIiwiZ2V0T3B0aW9ucyIsImNvbG9yIiwiZGFyayIsImhleCIsImxpZ2h0Iiwic2l6ZSIsIm1vZHVsZXMiLCJkYXRhIiwib3V0cHV0IiwiaE1hcmdpbiIsIkFycmF5IiwibWFyZ2luIiwiam9pbiIsInZNYXJnaW4iLCJpIiwiaiIsInRvcE1vZHVsZSIsImJvdHRvbU1vZHVsZSIsInNsaWNlIiwicmVuZGVyVG9GaWxlIiwicGF0aCIsInVuZGVmaW5lZCIsImZzIiwidXRmOCIsIndyaXRlRmlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utf8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utils.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utils.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("function hex2rgba(hex) {\n    if (typeof hex === \"number\") {\n        hex = hex.toString();\n    }\n    if (typeof hex !== \"string\") {\n        throw new Error(\"Color should be defined as hex string\");\n    }\n    let hexCode = hex.slice().replace(\"#\", \"\").split(\"\");\n    if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {\n        throw new Error(\"Invalid hex color: \" + hex);\n    }\n    // Convert from short to long form (fff -> ffffff)\n    if (hexCode.length === 3 || hexCode.length === 4) {\n        hexCode = Array.prototype.concat.apply([], hexCode.map(function(c) {\n            return [\n                c,\n                c\n            ];\n        }));\n    }\n    // Add default alpha value\n    if (hexCode.length === 6) hexCode.push(\"F\", \"F\");\n    const hexValue = parseInt(hexCode.join(\"\"), 16);\n    return {\n        r: hexValue >> 24 & 255,\n        g: hexValue >> 16 & 255,\n        b: hexValue >> 8 & 255,\n        a: hexValue & 255,\n        hex: \"#\" + hexCode.slice(0, 6).join(\"\")\n    };\n}\nexports.getOptions = function getOptions(options) {\n    if (!options) options = {};\n    if (!options.color) options.color = {};\n    const margin = typeof options.margin === \"undefined\" || options.margin === null || options.margin < 0 ? 4 : options.margin;\n    const width = options.width && options.width >= 21 ? options.width : undefined;\n    const scale = options.scale || 4;\n    return {\n        width: width,\n        scale: width ? 4 : scale,\n        margin: margin,\n        color: {\n            dark: hex2rgba(options.color.dark || \"#000000ff\"),\n            light: hex2rgba(options.color.light || \"#ffffffff\")\n        },\n        type: options.type,\n        rendererOpts: options.rendererOpts || {}\n    };\n};\nexports.getScale = function getScale(qrSize, opts) {\n    return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;\n};\nexports.getImageWidth = function getImageWidth(qrSize, opts) {\n    const scale = exports.getScale(qrSize, opts);\n    return Math.floor((qrSize + opts.margin * 2) * scale);\n};\nexports.qrToImageData = function qrToImageData(imgData, qr, opts) {\n    const size = qr.modules.size;\n    const data = qr.modules.data;\n    const scale = exports.getScale(size, opts);\n    const symbolSize = Math.floor((size + opts.margin * 2) * scale);\n    const scaledMargin = opts.margin * scale;\n    const palette = [\n        opts.color.light,\n        opts.color.dark\n    ];\n    for(let i = 0; i < symbolSize; i++){\n        for(let j = 0; j < symbolSize; j++){\n            let posDst = (i * symbolSize + j) * 4;\n            let pxColor = opts.color.light;\n            if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {\n                const iSrc = Math.floor((i - scaledMargin) / scale);\n                const jSrc = Math.floor((j - scaledMargin) / scale);\n                pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];\n            }\n            imgData[posDst++] = pxColor.r;\n            imgData[posDst++] = pxColor.g;\n            imgData[posDst++] = pxColor.b;\n            imgData[posDst] = pxColor.a;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/server.js":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/server.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const canPromise = __webpack_require__(/*! ./can-promise */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/can-promise.js\");\nconst QRCode = __webpack_require__(/*! ./core/qrcode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/core/qrcode.js\");\nconst PngRenderer = __webpack_require__(/*! ./renderer/png */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/png.js\");\nconst Utf8Renderer = __webpack_require__(/*! ./renderer/utf8 */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/utf8.js\");\nconst TerminalRenderer = __webpack_require__(/*! ./renderer/terminal */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/terminal.js\");\nconst SvgRenderer = __webpack_require__(/*! ./renderer/svg */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/renderer/svg.js\");\nfunction checkParams(text, opts, cb) {\n    if (typeof text === \"undefined\") {\n        throw new Error(\"String required as first argument\");\n    }\n    if (typeof cb === \"undefined\") {\n        cb = opts;\n        opts = {};\n    }\n    if (typeof cb !== \"function\") {\n        if (!canPromise()) {\n            throw new Error(\"Callback required as last argument\");\n        } else {\n            opts = cb || {};\n            cb = null;\n        }\n    }\n    return {\n        opts: opts,\n        cb: cb\n    };\n}\nfunction getTypeFromFilename(path) {\n    return path.slice((path.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n}\nfunction getRendererFromType(type) {\n    switch(type){\n        case \"svg\":\n            return SvgRenderer;\n        case \"txt\":\n        case \"utf8\":\n            return Utf8Renderer;\n        case \"png\":\n        case \"image/png\":\n        default:\n            return PngRenderer;\n    }\n}\nfunction getStringRendererFromType(type) {\n    switch(type){\n        case \"svg\":\n            return SvgRenderer;\n        case \"terminal\":\n            return TerminalRenderer;\n        case \"utf8\":\n        default:\n            return Utf8Renderer;\n    }\n}\nfunction render(renderFunc, text, params) {\n    if (!params.cb) {\n        return new Promise(function(resolve, reject) {\n            try {\n                const data = QRCode.create(text, params.opts);\n                return renderFunc(data, params.opts, function(err, data) {\n                    return err ? reject(err) : resolve(data);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n    try {\n        const data = QRCode.create(text, params.opts);\n        return renderFunc(data, params.opts, params.cb);\n    } catch (e) {\n        params.cb(e);\n    }\n}\nexports.create = QRCode.create;\nexports.toCanvas = __webpack_require__(/*! ./browser */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/browser.js\").toCanvas;\nexports.toString = function toString(text, opts, cb) {\n    const params = checkParams(text, opts, cb);\n    const type = params.opts ? params.opts.type : undefined;\n    const renderer = getStringRendererFromType(type);\n    return render(renderer.render, text, params);\n};\nexports.toDataURL = function toDataURL(text, opts, cb) {\n    const params = checkParams(text, opts, cb);\n    const renderer = getRendererFromType(params.opts.type);\n    return render(renderer.renderToDataURL, text, params);\n};\nexports.toBuffer = function toBuffer(text, opts, cb) {\n    const params = checkParams(text, opts, cb);\n    const renderer = getRendererFromType(params.opts.type);\n    return render(renderer.renderToBuffer, text, params);\n};\nexports.toFile = function toFile(path, text, opts, cb) {\n    if (typeof path !== \"string\" || !(typeof text === \"string\" || typeof text === \"object\")) {\n        throw new Error(\"Invalid argument\");\n    }\n    if (arguments.length < 3 && !canPromise()) {\n        throw new Error(\"Too few arguments provided\");\n    }\n    const params = checkParams(text, opts, cb);\n    const type = params.opts.type || getTypeFromFilename(path);\n    const renderer = getRendererFromType(type);\n    const renderToFile = renderer.renderToFile.bind(null, path);\n    return render(renderToFile, text, params);\n};\nexports.toFileStream = function toFileStream(stream, text, opts) {\n    if (arguments.length < 2) {\n        throw new Error(\"Too few arguments provided\");\n    }\n    const params = checkParams(text, opts, stream.emit.bind(stream, \"error\"));\n    const renderer = getRendererFromType(\"png\") // Only png support for now\n    ;\n    const renderToFileStream = renderer.renderToFileStream.bind(null, stream);\n    render(renderToFileStream, text, params);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS40L25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3NlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQztBQUM1QixNQUFNRyxlQUFlSCxtQkFBT0EsQ0FBQztBQUM3QixNQUFNSSxtQkFBbUJKLG1CQUFPQSxDQUFDO0FBQ2pDLE1BQU1LLGNBQWNMLG1CQUFPQSxDQUFDO0FBRTVCLFNBQVNNLFlBQWFDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxFQUFFO0lBQ2xDLElBQUksT0FBT0YsU0FBUyxhQUFhO1FBQy9CLE1BQU0sSUFBSUcsTUFBTTtJQUNsQjtJQUVBLElBQUksT0FBT0QsT0FBTyxhQUFhO1FBQzdCQSxLQUFLRDtRQUNMQSxPQUFPLENBQUM7SUFDVjtJQUVBLElBQUksT0FBT0MsT0FBTyxZQUFZO1FBQzVCLElBQUksQ0FBQ1YsY0FBYztZQUNqQixNQUFNLElBQUlXLE1BQU07UUFDbEIsT0FBTztZQUNMRixPQUFPQyxNQUFNLENBQUM7WUFDZEEsS0FBSztRQUNQO0lBQ0Y7SUFFQSxPQUFPO1FBQ0xELE1BQU1BO1FBQ05DLElBQUlBO0lBQ047QUFDRjtBQUVBLFNBQVNFLG9CQUFxQkMsSUFBSTtJQUNoQyxPQUFPQSxLQUFLQyxLQUFLLENBQUMsQ0FBQ0QsS0FBS0UsV0FBVyxDQUFDLE9BQU8sTUFBTSxLQUFLLEdBQUdDLFdBQVc7QUFDdEU7QUFFQSxTQUFTQyxvQkFBcUJDLElBQUk7SUFDaEMsT0FBUUE7UUFDTixLQUFLO1lBQ0gsT0FBT1o7UUFFVCxLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9GO1FBRVQsS0FBSztRQUNMLEtBQUs7UUFDTDtZQUNFLE9BQU9EO0lBQ1g7QUFDRjtBQUVBLFNBQVNnQiwwQkFBMkJELElBQUk7SUFDdEMsT0FBUUE7UUFDTixL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QixNQUFNO0lBQ2xCO0lBRUEsTUFBTVcsU0FBU2YsWUFBWUMsTUFBTUMsTUFBTW9DLE9BQU9DLElBQUksQ0FBQ0gsSUFBSSxDQUFDRSxRQUFRO0lBQ2hFLE1BQU1YLFdBQVdqQixvQkFBb0IsT0FBTywyQkFBMkI7O0lBQ3ZFLE1BQU04QixxQkFBcUJiLFNBQVNhLGtCQUFrQixDQUFDSixJQUFJLENBQUMsTUFBTUU7SUFDbEV6QixPQUFPMkIsb0JBQW9CdkMsTUFBTWM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuNC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9zZXJ2ZXIuanM/OTliNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjYW5Qcm9taXNlID0gcmVxdWlyZSgnLi9jYW4tcHJvbWlzZScpXG5jb25zdCBRUkNvZGUgPSByZXF1aXJlKCcuL2NvcmUvcXJjb2RlJylcbmNvbnN0IFBuZ1JlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlci9wbmcnKVxuY29uc3QgVXRmOFJlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlci91dGY4JylcbmNvbnN0IFRlcm1pbmFsUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL3Rlcm1pbmFsJylcbmNvbnN0IFN2Z1JlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlci9zdmcnKVxuXG5mdW5jdGlvbiBjaGVja1BhcmFtcyAodGV4dCwgb3B0cywgY2IpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIHJlcXVpcmVkIGFzIGZpcnN0IGFyZ3VtZW50JylcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2IgPSBvcHRzXG4gICAgb3B0cyA9IHt9XG4gIH1cblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKCFjYW5Qcm9taXNlKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgcmVxdWlyZWQgYXMgbGFzdCBhcmd1bWVudCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdHMgPSBjYiB8fCB7fVxuICAgICAgY2IgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvcHRzOiBvcHRzLFxuICAgIGNiOiBjYlxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFR5cGVGcm9tRmlsZW5hbWUgKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguc2xpY2UoKHBhdGgubGFzdEluZGV4T2YoJy4nKSAtIDEgPj4+IDApICsgMikudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBnZXRSZW5kZXJlckZyb21UeXBlICh0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3N2Zyc6XG4gICAgICByZXR1cm4gU3ZnUmVuZGVyZXJcblxuICAgIGNhc2UgJ3R4dCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICByZXR1cm4gVXRmOFJlbmRlcmVyXG5cbiAgICBjYXNlICdwbmcnOlxuICAgIGNhc2UgJ2ltYWdlL3BuZyc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBQbmdSZW5kZXJlclxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFN0cmluZ1JlbmRlcmVyRnJvbVR5cGUgKHR5cGUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnc3ZnJzpcbiAgICAgIHJldHVybiBTdmdSZW5kZXJlclxuXG4gICAgY2FzZSAndGVybWluYWwnOlxuICAgICAgcmV0dXJuIFRlcm1pbmFsUmVuZGVyZXJcblxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gVXRmOFJlbmRlcmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyIChyZW5kZXJGdW5jLCB0ZXh0LCBwYXJhbXMpIHtcbiAgaWYgKCFwYXJhbXMuY2IpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IFFSQ29kZS5jcmVhdGUodGV4dCwgcGFyYW1zLm9wdHMpXG4gICAgICAgIHJldHVybiByZW5kZXJGdW5jKGRhdGEsIHBhcmFtcy5vcHRzLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZShkYXRhKVxuICAgICAgICB9KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBkYXRhID0gUVJDb2RlLmNyZWF0ZSh0ZXh0LCBwYXJhbXMub3B0cylcbiAgICByZXR1cm4gcmVuZGVyRnVuYyhkYXRhLCBwYXJhbXMub3B0cywgcGFyYW1zLmNiKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcGFyYW1zLmNiKGUpXG4gIH1cbn1cblxuZXhwb3J0cy5jcmVhdGUgPSBRUkNvZGUuY3JlYXRlXG5cbmV4cG9ydHMudG9DYW52YXMgPSByZXF1aXJlKCcuL2Jyb3dzZXInKS50b0NhbnZhc1xuXG5leHBvcnRzLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKHRleHQsIG9wdHMsIGNiKSB7XG4gIGNvbnN0IHBhcmFtcyA9IGNoZWNrUGFyYW1zKHRleHQsIG9wdHMsIGNiKVxuICBjb25zdCB0eXBlID0gcGFyYW1zLm9wdHMgPyBwYXJhbXMub3B0cy50eXBlIDogdW5kZWZpbmVkXG4gIGNvbnN0IHJlbmRlcmVyID0gZ2V0U3RyaW5nUmVuZGVyZXJGcm9tVHlwZSh0eXBlKVxuICByZXR1cm4gcmVuZGVyKHJlbmRlcmVyLnJlbmRlciwgdGV4dCwgcGFyYW1zKVxufVxuXG5leHBvcnRzLnRvRGF0YVVSTCA9IGZ1bmN0aW9uIHRvRGF0YVVSTCAodGV4dCwgb3B0cywgY2IpIHtcbiAgY29uc3QgcGFyYW1zID0gY2hlY2tQYXJhbXModGV4dCwgb3B0cywgY2IpXG4gIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXJGcm9tVHlwZShwYXJhbXMub3B0cy50eXBlKVxuICByZXR1cm4gcmVuZGVyKHJlbmRlcmVyLnJlbmRlclRvRGF0YVVSTCwgdGV4dCwgcGFyYW1zKVxufVxuXG5leHBvcnRzLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKHRleHQsIG9wdHMsIGNiKSB7XG4gIGNvbnN0IHBhcmFtcyA9IGNoZWNrUGFyYW1zKHRleHQsIG9wdHMsIGNiKVxuICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyRnJvbVR5cGUocGFyYW1zLm9wdHMudHlwZSlcbiAgcmV0dXJuIHJlbmRlcihyZW5kZXJlci5yZW5kZXJUb0J1ZmZlciwgdGV4dCwgcGFyYW1zKVxufVxuXG5leHBvcnRzLnRvRmlsZSA9IGZ1bmN0aW9uIHRvRmlsZSAocGF0aCwgdGV4dCwgb3B0cywgY2IpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJyB8fCAhKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGV4dCA9PT0gJ29iamVjdCcpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50JylcbiAgfVxuXG4gIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8IDMpICYmICFjYW5Qcm9taXNlKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBmZXcgYXJndW1lbnRzIHByb3ZpZGVkJylcbiAgfVxuXG4gIGNvbnN0IHBhcmFtcyA9IGNoZWNrUGFyYW1zKHRleHQsIG9wdHMsIGNiKVxuICBjb25zdCB0eXBlID0gcGFyYW1zLm9wdHMudHlwZSB8fCBnZXRUeXBlRnJvbUZpbGVuYW1lKHBhdGgpXG4gIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXJGcm9tVHlwZSh0eXBlKVxuICBjb25zdCByZW5kZXJUb0ZpbGUgPSByZW5kZXJlci5yZW5kZXJUb0ZpbGUuYmluZChudWxsLCBwYXRoKVxuXG4gIHJldHVybiByZW5kZXIocmVuZGVyVG9GaWxlLCB0ZXh0LCBwYXJhbXMpXG59XG5cbmV4cG9ydHMudG9GaWxlU3RyZWFtID0gZnVuY3Rpb24gdG9GaWxlU3RyZWFtIChzdHJlYW0sIHRleHQsIG9wdHMpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb28gZmV3IGFyZ3VtZW50cyBwcm92aWRlZCcpXG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSBjaGVja1BhcmFtcyh0ZXh0LCBvcHRzLCBzdHJlYW0uZW1pdC5iaW5kKHN0cmVhbSwgJ2Vycm9yJykpXG4gIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXJGcm9tVHlwZSgncG5nJykgLy8gT25seSBwbmcgc3VwcG9ydCBmb3Igbm93XG4gIGNvbnN0IHJlbmRlclRvRmlsZVN0cmVhbSA9IHJlbmRlcmVyLnJlbmRlclRvRmlsZVN0cmVhbS5iaW5kKG51bGwsIHN0cmVhbSlcbiAgcmVuZGVyKHJlbmRlclRvRmlsZVN0cmVhbSwgdGV4dCwgcGFyYW1zKVxufVxuIl0sIm5hbWVzIjpbImNhblByb21pc2UiLCJyZXF1aXJlIiwiUVJDb2RlIiwiUG5nUmVuZGVyZXIiLCJVdGY4UmVuZGVyZXIiLCJUZXJtaW5hbFJlbmRlcmVyIiwiU3ZnUmVuZGVyZXIiLCJjaGVja1BhcmFtcyIsInRleHQiLCJvcHRzIiwiY2IiLCJFcnJvciIsImdldFR5cGVGcm9tRmlsZW5hbWUiLCJwYXRoIiwic2xpY2UiLCJsYXN0SW5kZXhPZiIsInRvTG93ZXJDYXNlIiwiZ2V0UmVuZGVyZXJGcm9tVHlwZSIsInR5cGUiLCJnZXRTdHJpbmdSZW5kZXJlckZyb21UeXBlIiwicmVuZGVyIiwicmVuZGVyRnVuYyIsInBhcmFtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGF0YSIsImNyZWF0ZSIsImVyciIsImUiLCJleHBvcnRzIiwidG9DYW52YXMiLCJ0b1N0cmluZyIsInVuZGVmaW5lZCIsInJlbmRlcmVyIiwidG9EYXRhVVJMIiwicmVuZGVyVG9EYXRhVVJMIiwidG9CdWZmZXIiLCJyZW5kZXJUb0J1ZmZlciIsInRvRmlsZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlbmRlclRvRmlsZSIsImJpbmQiLCJ0b0ZpbGVTdHJlYW0iLCJzdHJlYW0iLCJlbWl0IiwicmVuZGVyVG9GaWxlU3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.4/node_modules/qrcode/lib/server.js\n");

/***/ })

};
;