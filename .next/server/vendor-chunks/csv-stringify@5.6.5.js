"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/csv-stringify@5.6.5";
exports.ids = ["vendor-chunks/csv-stringify@5.6.5"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/csv-stringify@5.6.5/node_modules/csv-stringify/lib/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/csv-stringify@5.6.5/node_modules/csv-stringify/lib/index.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\nCSV Stringify\n\nPlease look at the [project documentation](https://csv.js.org/stringify/) for\nadditional information.\n*/ \nconst { Transform } = __webpack_require__(/*! stream */ \"stream\");\nconst bom_utf8 = Buffer.from([\n    239,\n    187,\n    191\n]);\nclass Stringifier extends Transform {\n    constructor(opts = {}){\n        super({\n            ...{\n                writableObjectMode: true\n            },\n            ...opts\n        });\n        const options = {};\n        let err;\n        // Merge with user options\n        for(let opt in opts){\n            options[underscore(opt)] = opts[opt];\n        }\n        if (err = this.normalize(options)) throw err;\n        switch(options.record_delimiter){\n            case \"auto\":\n                options.record_delimiter = null;\n                break;\n            case \"unix\":\n                options.record_delimiter = \"\\n\";\n                break;\n            case \"mac\":\n                options.record_delimiter = \"\\r\";\n                break;\n            case \"windows\":\n                options.record_delimiter = \"\\r\\n\";\n                break;\n            case \"ascii\":\n                options.record_delimiter = \"\\x1e\";\n                break;\n            case \"unicode\":\n                options.record_delimiter = \"\\u2028\";\n                break;\n        }\n        // Expose options\n        this.options = options;\n        // Internal state\n        this.state = {\n            stop: false\n        };\n        // Information\n        this.info = {\n            records: 0\n        };\n    }\n    normalize(options) {\n        // Normalize option `bom`\n        if (options.bom === undefined || options.bom === null || options.bom === false) {\n            options.bom = false;\n        } else if (options.bom !== true) {\n            return new CsvError(\"CSV_OPTION_BOOLEAN_INVALID_TYPE\", [\n                \"option `bom` is optional and must be a boolean value,\",\n                `got ${JSON.stringify(options.bom)}`\n            ]);\n        }\n        // Normalize option `delimiter`\n        if (options.delimiter === undefined || options.delimiter === null) {\n            options.delimiter = \",\";\n        } else if (Buffer.isBuffer(options.delimiter)) {\n            options.delimiter = options.delimiter.toString();\n        } else if (typeof options.delimiter !== \"string\") {\n            return new CsvError(\"CSV_OPTION_DELIMITER_INVALID_TYPE\", [\n                \"option `delimiter` must be a buffer or a string,\",\n                `got ${JSON.stringify(options.delimiter)}`\n            ]);\n        }\n        // Normalize option `quote`\n        if (options.quote === undefined || options.quote === null) {\n            options.quote = '\"';\n        } else if (options.quote === true) {\n            options.quote = '\"';\n        } else if (options.quote === false) {\n            options.quote = \"\";\n        } else if (Buffer.isBuffer(options.quote)) {\n            options.quote = options.quote.toString();\n        } else if (typeof options.quote !== \"string\") {\n            return new CsvError(\"CSV_OPTION_QUOTE_INVALID_TYPE\", [\n                \"option `quote` must be a boolean, a buffer or a string,\",\n                `got ${JSON.stringify(options.quote)}`\n            ]);\n        }\n        // Normalize option `quoted`\n        if (options.quoted === undefined || options.quoted === null) {\n            options.quoted = false;\n        } else {\n        // todo\n        }\n        // Normalize option `quoted_empty`\n        if (options.quoted_empty === undefined || options.quoted_empty === null) {\n            options.quoted_empty = undefined;\n        } else {\n        // todo\n        }\n        // Normalize option `quoted_match`\n        if (options.quoted_match === undefined || options.quoted_match === null || options.quoted_match === false) {\n            options.quoted_match = null;\n        } else if (!Array.isArray(options.quoted_match)) {\n            options.quoted_match = [\n                options.quoted_match\n            ];\n        }\n        if (options.quoted_match) {\n            for (let quoted_match of options.quoted_match){\n                const isString = typeof quoted_match === \"string\";\n                const isRegExp = quoted_match instanceof RegExp;\n                if (!isString && !isRegExp) {\n                    return Error(`Invalid Option: quoted_match must be a string or a regex, got ${JSON.stringify(quoted_match)}`);\n                }\n            }\n        }\n        // Normalize option `quoted_string`\n        if (options.quoted_string === undefined || options.quoted_string === null) {\n            options.quoted_string = false;\n        } else {\n        // todo\n        }\n        // Normalize option `eof`\n        if (options.eof === undefined || options.eof === null) {\n            options.eof = true;\n        } else {\n        // todo\n        }\n        // Normalize option `escape`\n        if (options.escape === undefined || options.escape === null) {\n            options.escape = '\"';\n        } else if (Buffer.isBuffer(options.escape)) {\n            options.escape = options.escape.toString();\n        } else if (typeof options.escape !== \"string\") {\n            return Error(`Invalid Option: escape must be a buffer or a string, got ${JSON.stringify(options.escape)}`);\n        }\n        if (options.escape.length > 1) {\n            return Error(`Invalid Option: escape must be one character, got ${options.escape.length} characters`);\n        }\n        // Normalize option `header`\n        if (options.header === undefined || options.header === null) {\n            options.header = false;\n        } else {\n        // todo\n        }\n        // Normalize option `columns`\n        options.columns = this.normalize_columns(options.columns);\n        // Normalize option `quoted`\n        if (options.quoted === undefined || options.quoted === null) {\n            options.quoted = false;\n        } else {\n        // todo\n        }\n        // Normalize option `cast`\n        if (options.cast === undefined || options.cast === null) {\n            options.cast = {};\n        } else {\n        // todo\n        }\n        // Normalize option cast.bigint\n        if (options.cast.bigint === undefined || options.cast.bigint === null) {\n            // Cast boolean to string by default\n            options.cast.bigint = (value)=>\"\" + value;\n        }\n        // Normalize option cast.boolean\n        if (options.cast.boolean === undefined || options.cast.boolean === null) {\n            // Cast boolean to string by default\n            options.cast.boolean = (value)=>value ? \"1\" : \"\";\n        }\n        // Normalize option cast.date\n        if (options.cast.date === undefined || options.cast.date === null) {\n            // Cast date to timestamp string by default\n            options.cast.date = (value)=>\"\" + value.getTime();\n        }\n        // Normalize option cast.number\n        if (options.cast.number === undefined || options.cast.number === null) {\n            // Cast number to string using native casting by default\n            options.cast.number = (value)=>\"\" + value;\n        }\n        // Normalize option cast.object\n        if (options.cast.object === undefined || options.cast.object === null) {\n            // Stringify object as JSON by default\n            options.cast.object = (value)=>JSON.stringify(value);\n        }\n        // Normalize option cast.string\n        if (options.cast.string === undefined || options.cast.string === null) {\n            // Leave string untouched\n            options.cast.string = function(value) {\n                return value;\n            };\n        }\n        // Normalize option `record_delimiter`\n        if (options.record_delimiter === undefined || options.record_delimiter === null) {\n            options.record_delimiter = \"\\n\";\n        } else if (Buffer.isBuffer(options.record_delimiter)) {\n            options.record_delimiter = options.record_delimiter.toString();\n        } else if (typeof options.record_delimiter !== \"string\") {\n            return Error(`Invalid Option: record_delimiter must be a buffer or a string, got ${JSON.stringify(options.record_delimiter)}`);\n        }\n    }\n    _transform(chunk, encoding, callback) {\n        if (this.state.stop === true) {\n            return;\n        }\n        // Chunk validation\n        if (!Array.isArray(chunk) && typeof chunk !== \"object\") {\n            this.state.stop = true;\n            return callback(Error(`Invalid Record: expect an array or an object, got ${JSON.stringify(chunk)}`));\n        }\n        // Detect columns from the first record\n        if (this.info.records === 0) {\n            if (Array.isArray(chunk)) {\n                if (this.options.header === true && !this.options.columns) {\n                    this.state.stop = true;\n                    return callback(Error(\"Undiscoverable Columns: header option requires column option or object records\"));\n                }\n            } else if (this.options.columns === undefined || this.options.columns === null) {\n                this.options.columns = this.normalize_columns(Object.keys(chunk));\n            }\n        }\n        // Emit the header\n        if (this.info.records === 0) {\n            this.bom();\n            this.headers();\n        }\n        // Emit and stringify the record if an object or an array\n        try {\n            this.emit(\"record\", chunk, this.info.records);\n        } catch (err) {\n            this.state.stop = true;\n            return this.emit(\"error\", err);\n        }\n        // Convert the record into a string\n        let chunk_string;\n        if (this.options.eof) {\n            chunk_string = this.stringify(chunk);\n            if (chunk_string === undefined) {\n                return;\n            } else {\n                chunk_string = chunk_string + this.options.record_delimiter;\n            }\n        } else {\n            chunk_string = this.stringify(chunk);\n            if (chunk_string === undefined) {\n                return;\n            } else {\n                if (this.options.header || this.info.records) {\n                    chunk_string = this.options.record_delimiter + chunk_string;\n                }\n            }\n        }\n        // Emit the csv\n        this.info.records++;\n        this.push(chunk_string);\n        callback();\n    }\n    _flush(callback) {\n        if (this.info.records === 0) {\n            this.bom();\n            this.headers();\n        }\n        callback();\n    }\n    stringify(chunk, chunkIsHeader = false) {\n        if (typeof chunk !== \"object\") {\n            return chunk;\n        }\n        const { columns, header } = this.options;\n        const record = [];\n        // Record is an array\n        if (Array.isArray(chunk)) {\n            // We are getting an array but the user has specified output columns. In\n            // this case, we respect the columns indexes\n            if (columns) {\n                chunk.splice(columns.length);\n            }\n            // Cast record elements\n            for(let i1 = 0; i1 < chunk.length; i1++){\n                const field = chunk[i1];\n                const [err, value] = this.__cast(field, {\n                    index: i1,\n                    column: i1,\n                    records: this.info.records,\n                    header: chunkIsHeader\n                });\n                if (err) {\n                    this.emit(\"error\", err);\n                    return;\n                }\n                record[i1] = [\n                    value,\n                    field\n                ];\n            }\n        // Record is a literal object\n        } else {\n            if (columns) {\n                for(let i1 = 0; i1 < columns.length; i1++){\n                    const field = get(chunk, columns[i1].key);\n                    const [err, value] = this.__cast(field, {\n                        index: i1,\n                        column: columns[i1].key,\n                        records: this.info.records,\n                        header: chunkIsHeader\n                    });\n                    if (err) {\n                        this.emit(\"error\", err);\n                        return;\n                    }\n                    record[i1] = [\n                        value,\n                        field\n                    ];\n                }\n            } else {\n                for (let column of chunk){\n                    const field = chunk[column];\n                    const [err, value] = this.__cast(field, {\n                        index: i,\n                        column: columns[i].key,\n                        records: this.info.records,\n                        header: chunkIsHeader\n                    });\n                    if (err) {\n                        this.emit(\"error\", err);\n                        return;\n                    }\n                    record.push([\n                        value,\n                        field\n                    ]);\n                }\n            }\n        }\n        let csvrecord = \"\";\n        for(let i1 = 0; i1 < record.length; i1++){\n            let options, err;\n            let [value, field] = record[i1];\n            if (typeof value === \"string\") {\n                options = this.options;\n            } else if (isObject(value)) {\n                // let { value, ...options } = value\n                options = value;\n                value = options.value;\n                delete options.value;\n                if (typeof value !== \"string\" && value !== undefined && value !== null) {\n                    this.emit(\"error\", Error(`Invalid Casting Value: returned value must return a string, null or undefined, got ${JSON.stringify(value)}`));\n                    return;\n                }\n                options = {\n                    ...this.options,\n                    ...options\n                };\n                if (err = this.normalize(options)) {\n                    this.emit(\"error\", err);\n                    return;\n                }\n            } else if (value === undefined || value === null) {\n                options = this.options;\n            } else {\n                this.emit(\"error\", Error(`Invalid Casting Value: returned value must return a string, an object, null or undefined, got ${JSON.stringify(value)}`));\n                return;\n            }\n            const { delimiter, escape, quote, quoted, quoted_empty, quoted_string, quoted_match, record_delimiter } = options;\n            if (value) {\n                if (typeof value !== \"string\") {\n                    this.emit(\"error\", Error(`Formatter must return a string, null or undefined, got ${JSON.stringify(value)}`));\n                    return null;\n                }\n                const containsdelimiter = delimiter.length && value.indexOf(delimiter) >= 0;\n                const containsQuote = quote !== \"\" && value.indexOf(quote) >= 0;\n                const containsEscape = value.indexOf(escape) >= 0 && escape !== quote;\n                const containsRecordDelimiter = value.indexOf(record_delimiter) >= 0;\n                const quotedString = quoted_string && typeof field === \"string\";\n                let quotedMatch = quoted_match && quoted_match.filter((quoted_match)=>{\n                    if (typeof quoted_match === \"string\") {\n                        return value.indexOf(quoted_match) !== -1;\n                    } else {\n                        return quoted_match.test(value);\n                    }\n                });\n                quotedMatch = quotedMatch && quotedMatch.length > 0;\n                const shouldQuote = containsQuote === true || containsdelimiter || containsRecordDelimiter || quoted || quotedString || quotedMatch;\n                if (shouldQuote === true && containsEscape === true) {\n                    const regexp = escape === \"\\\\\" ? new RegExp(escape + escape, \"g\") : new RegExp(escape, \"g\");\n                    value = value.replace(regexp, escape + escape);\n                }\n                if (containsQuote === true) {\n                    const regexp = new RegExp(quote, \"g\");\n                    value = value.replace(regexp, escape + quote);\n                }\n                if (shouldQuote === true) {\n                    value = quote + value + quote;\n                }\n                csvrecord += value;\n            } else if (quoted_empty === true || field === \"\" && quoted_string === true && quoted_empty !== false) {\n                csvrecord += quote + quote;\n            }\n            if (i1 !== record.length - 1) {\n                csvrecord += delimiter;\n            }\n        }\n        return csvrecord;\n    }\n    bom() {\n        if (this.options.bom !== true) {\n            return;\n        }\n        this.push(bom_utf8);\n    }\n    headers() {\n        if (this.options.header === false) {\n            return;\n        }\n        if (this.options.columns === undefined) {\n            return;\n        }\n        let headers = this.options.columns.map((column)=>column.header);\n        if (this.options.eof) {\n            headers = this.stringify(headers, true) + this.options.record_delimiter;\n        } else {\n            headers = this.stringify(headers);\n        }\n        this.push(headers);\n    }\n    __cast(value, context) {\n        const type = typeof value;\n        try {\n            if (type === \"string\") {\n                return [\n                    undefined,\n                    this.options.cast.string(value, context)\n                ];\n            } else if (type === \"bigint\") {\n                return [\n                    undefined,\n                    this.options.cast.bigint(value, context)\n                ];\n            } else if (type === \"number\") {\n                return [\n                    undefined,\n                    this.options.cast.number(value, context)\n                ];\n            } else if (type === \"boolean\") {\n                return [\n                    undefined,\n                    this.options.cast.boolean(value, context)\n                ];\n            } else if (value instanceof Date) {\n                return [\n                    undefined,\n                    this.options.cast.date(value, context)\n                ];\n            } else if (type === \"object\" && value !== null) {\n                return [\n                    undefined,\n                    this.options.cast.object(value, context)\n                ];\n            } else {\n                return [\n                    undefined,\n                    value,\n                    value\n                ];\n            }\n        } catch (err) {\n            return [\n                err\n            ];\n        }\n    }\n    normalize_columns(columns) {\n        if (columns === undefined || columns === null) {\n            return undefined;\n        }\n        if (typeof columns !== \"object\") {\n            throw Error('Invalid option \"columns\": expect an array or an object');\n        }\n        if (!Array.isArray(columns)) {\n            const newcolumns = [];\n            for(let k in columns){\n                newcolumns.push({\n                    key: k,\n                    header: columns[k]\n                });\n            }\n            columns = newcolumns;\n        } else {\n            const newcolumns = [];\n            for (let column of columns){\n                if (typeof column === \"string\") {\n                    newcolumns.push({\n                        key: column,\n                        header: column\n                    });\n                } else if (typeof column === \"object\" && column !== undefined && !Array.isArray(column)) {\n                    if (!column.key) {\n                        throw Error('Invalid column definition: property \"key\" is required');\n                    }\n                    if (column.header === undefined) {\n                        column.header = column.key;\n                    }\n                    newcolumns.push(column);\n                } else {\n                    throw Error(\"Invalid column definition: expect a string or an object\");\n                }\n            }\n            columns = newcolumns;\n        }\n        return columns;\n    }\n}\nconst stringify = function() {\n    let data, options, callback;\n    for(let i1 in arguments){\n        const argument = arguments[i1];\n        const type = typeof argument;\n        if (data === undefined && Array.isArray(argument)) {\n            data = argument;\n        } else if (options === undefined && isObject(argument)) {\n            options = argument;\n        } else if (callback === undefined && type === \"function\") {\n            callback = argument;\n        } else {\n            throw new CsvError(\"CSV_INVALID_ARGUMENT\", [\n                \"Invalid argument:\",\n                `got ${JSON.stringify(argument)} at index ${i1}`\n            ]);\n        }\n    }\n    const stringifier = new Stringifier(options);\n    if (callback) {\n        const chunks = [];\n        stringifier.on(\"readable\", function() {\n            let chunk;\n            while((chunk = this.read()) !== null){\n                chunks.push(chunk);\n            }\n        });\n        stringifier.on(\"error\", function(err) {\n            callback(err);\n        });\n        stringifier.on(\"end\", function() {\n            callback(undefined, chunks.join(\"\"));\n        });\n    }\n    if (data !== undefined) {\n        // Give a chance for events to be registered later\n        if (typeof setImmediate === \"function\") {\n            setImmediate(function() {\n                for (let record of data){\n                    stringifier.write(record);\n                }\n                stringifier.end();\n            });\n        } else {\n            for (let record of data){\n                stringifier.write(record);\n            }\n            stringifier.end();\n        }\n    }\n    return stringifier;\n};\nclass CsvError extends Error {\n    constructor(code, message, ...contexts){\n        if (Array.isArray(message)) message = message.join(\" \");\n        super(message);\n        if (Error.captureStackTrace !== undefined) {\n            Error.captureStackTrace(this, CsvError);\n        }\n        this.code = code;\n        for (const context of contexts){\n            for(const key in context){\n                const value = context[key];\n                this[key] = Buffer.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value));\n            }\n        }\n    }\n}\nstringify.Stringifier = Stringifier;\nstringify.CsvError = CsvError;\nmodule.exports = stringify;\nconst isObject = function(obj) {\n    return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n};\nconst underscore = function(str) {\n    return str.replace(/([A-Z])/g, function(_, match) {\n        return \"_\" + match.toLowerCase();\n    });\n};\n// Lodash implementation of `get`\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(// Match anything that isn't a dot or bracket.\n\"[^.[\\\\]]+\" + \"|\" + // Or match property names within brackets.\n\"\\\\[(?:\" + // Match a non-string expression.\n\"([^\\\"'][^[]*)\" + \"|\" + // Or match strings (supports escaping characters).\n\"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" + \")\\\\]\" + \"|\" + // Or match \"\" as the space between consecutive dots or empty brackets.\n\"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\", \"g\");\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst reIsPlainProp = /^\\w*$/;\nconst getTag = function(value) {\n    if (!value) value === undefined ? \"[object Undefined]\" : \"[object Null]\";\n    return Object.prototype.toString.call(value);\n};\nconst isKey = function(value, object) {\n    if (Array.isArray(value)) {\n        return false;\n    }\n    const type = typeof value;\n    if (type === \"number\" || type === \"symbol\" || type === \"boolean\" || !value || isSymbol(value)) {\n        return true;\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n};\nconst isSymbol = function(value) {\n    const type = typeof value;\n    return type === \"symbol\" || type === \"object\" && value && getTag(value) === \"[object Symbol]\";\n};\nconst stringToPath = function(string) {\n    const result = [];\n    if (string.charCodeAt(0) === charCodeOfDot) {\n        result.push(\"\");\n    }\n    string.replace(rePropName, function(match, expression, quote, subString) {\n        let key = match;\n        if (quote) {\n            key = subString.replace(reEscapeChar, \"$1\");\n        } else if (expression) {\n            key = expression.trim();\n        }\n        result.push(key);\n    });\n    return result;\n};\nconst castPath = function(value, object) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return isKey(value, object) ? [\n            value\n        ] : stringToPath(value);\n    }\n};\nconst toKey = function(value) {\n    if (typeof value === \"string\" || isSymbol(value)) return value;\n    const result = `${value}`;\n    return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n};\nconst get = function(object, path) {\n    path = castPath(path, object);\n    let index = 0;\n    const length = path.length;\n    while(object != null && index < length){\n        object = object[toKey(path[index++])];\n    }\n    return index && index === length ? object : undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/csv-stringify@5.6.5/node_modules/csv-stringify/lib/index.js\n");

/***/ })

};
;