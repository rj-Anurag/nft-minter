"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/near-seed-phrase@0.2.1";
exports.ids = ["vendor-chunks/near-seed-phrase@0.2.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/near-seed-phrase@0.2.1/node_modules/near-seed-phrase/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/near-seed-phrase@0.2.1/node_modules/near-seed-phrase/index.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst bip39 = __webpack_require__(/*! bip39-light */ \"(ssr)/./node_modules/.pnpm/bip39-light@1.0.7/node_modules/bip39-light/index.js\");\nconst { derivePath } = __webpack_require__(/*! near-hd-key */ \"(ssr)/./node_modules/.pnpm/near-hd-key@1.2.1/node_modules/near-hd-key/dist/index.js\");\nconst bs58 = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/.pnpm/bs58@4.0.1/node_modules/bs58/index.js\");\nconst nacl = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js\");\nconst KEY_DERIVATION_PATH = \"m/44'/397'/0'\";\nconst generateSeedPhrase = (entropy)=>{\n    return parseSeedPhrase(entropy !== undefined ? bip39.entropyToMnemonic(entropy) : bip39.generateMnemonic());\n};\nconst normalizeSeedPhrase = (seedPhrase)=>seedPhrase.trim().split(/\\s+/).map((part)=>part.toLowerCase()).join(\" \");\nconst parseSeedPhrase = (seedPhrase, derivationPath)=>{\n    const seed = bip39.mnemonicToSeed(normalizeSeedPhrase(seedPhrase));\n    const { key } = derivePath(derivationPath || KEY_DERIVATION_PATH, seed.toString(\"hex\"));\n    const keyPair = nacl.sign.keyPair.fromSeed(key);\n    const publicKey = \"ed25519:\" + bs58.encode(Buffer.from(keyPair.publicKey));\n    const secretKey = \"ed25519:\" + bs58.encode(Buffer.from(keyPair.secretKey));\n    return {\n        seedPhrase,\n        secretKey,\n        publicKey\n    };\n};\nconst findSeedPhraseKey = (seedPhrase, publicKeys)=>{\n    // TODO: Need to iterate through multiple possible derivation paths?\n    const keyInfo = parseSeedPhrase(seedPhrase);\n    if (publicKeys.indexOf(keyInfo.publicKey) < 0) {\n        return {};\n    }\n    return keyInfo;\n};\nmodule.exports = {\n    KEY_DERIVATION_PATH,\n    generateSeedPhrase,\n    normalizeSeedPhrase,\n    parseSeedPhrase,\n    findSeedPhraseKey\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmVhci1zZWVkLXBocmFzZUAwLjIuMS9ub2RlX21vZHVsZXMvbmVhci1zZWVkLXBocmFzZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDdEIsTUFBTSxFQUFFQyxVQUFVLEVBQUUsR0FBR0QsbUJBQU9BLENBQUM7QUFDL0IsTUFBTUUsT0FBT0YsbUJBQU9BLENBQUM7QUFDckIsTUFBTUcsT0FBT0gsbUJBQU9BLENBQUM7QUFFckIsTUFBTUksc0JBQXNCO0FBRTVCLE1BQU1DLHFCQUFxQixDQUFDQztJQUN4QixPQUFPQyxnQkFBZ0JELFlBQVlFLFlBQVlULE1BQU1VLGlCQUFpQixDQUFDSCxXQUFXUCxNQUFNVyxnQkFBZ0I7QUFDNUc7QUFFQSxNQUFNQyxzQkFBc0IsQ0FBQ0MsYUFBZUEsV0FBV0MsSUFBSSxHQUFHQyxLQUFLLENBQUMsT0FBT0MsR0FBRyxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLQyxXQUFXLElBQUlDLElBQUksQ0FBQztBQUVoSCxNQUFNWCxrQkFBa0IsQ0FBQ0ssWUFBWU87SUFDakMsTUFBTUMsT0FBT3JCLE1BQU1zQixjQUFjLENBQUNWLG9CQUFvQkM7SUFDdEQsTUFBTSxFQUFFVSxHQUFHLEVBQUUsR0FBR3JCLFdBQVdrQixrQkFBa0JmLHFCQUFxQmdCLEtBQUtHLFFBQVEsQ0FBQztJQUNoRixNQUFNQyxVQUFVckIsS0FBS3NCLElBQUksQ0FBQ0QsT0FBTyxDQUFDRSxRQUFRLENBQUNKO0lBQzNDLE1BQU1LLFlBQVksYUFBYXpCLEtBQUswQixNQUFNLENBQUNDLE9BQU9DLElBQUksQ0FBQ04sUUFBUUcsU0FBUztJQUN4RSxNQUFNSSxZQUFZLGFBQWE3QixLQUFLMEIsTUFBTSxDQUFDQyxPQUFPQyxJQUFJLENBQUNOLFFBQVFPLFNBQVM7SUFDeEUsT0FBTztRQUFFbkI7UUFBWW1CO1FBQVdKO0lBQVU7QUFDOUM7QUFFQSxNQUFNSyxvQkFBb0IsQ0FBQ3BCLFlBQVlxQjtJQUNuQyxvRUFBb0U7SUFDcEUsTUFBTUMsVUFBVTNCLGdCQUFnQks7SUFDaEMsSUFBSXFCLFdBQVdFLE9BQU8sQ0FBQ0QsUUFBUVAsU0FBUyxJQUFJLEdBQUc7UUFDM0MsT0FBTyxDQUFDO0lBQ1o7SUFDQSxPQUFPTztBQUNYO0FBRUFFLE9BQU9DLE9BQU8sR0FBRztJQUNiakM7SUFDQUM7SUFDQU07SUFDQUo7SUFDQXlCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL25lYXItc2VlZC1waHJhc2VAMC4yLjEvbm9kZV9tb2R1bGVzL25lYXItc2VlZC1waHJhc2UvaW5kZXguanM/ZGM4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiaXAzOSA9IHJlcXVpcmUoJ2JpcDM5LWxpZ2h0Jyk7XG5jb25zdCB7IGRlcml2ZVBhdGggfSA9IHJlcXVpcmUoJ25lYXItaGQta2V5Jyk7XG5jb25zdCBiczU4ID0gcmVxdWlyZSgnYnM1OCcpO1xuY29uc3QgbmFjbCA9IHJlcXVpcmUoJ3R3ZWV0bmFjbCcpO1xuXG5jb25zdCBLRVlfREVSSVZBVElPTl9QQVRIID0gXCJtLzQ0Jy8zOTcnLzAnXCJcblxuY29uc3QgZ2VuZXJhdGVTZWVkUGhyYXNlID0gKGVudHJvcHkpID0+IHtcbiAgICByZXR1cm4gcGFyc2VTZWVkUGhyYXNlKGVudHJvcHkgIT09IHVuZGVmaW5lZCA/IGJpcDM5LmVudHJvcHlUb01uZW1vbmljKGVudHJvcHkpIDogYmlwMzkuZ2VuZXJhdGVNbmVtb25pYygpKVxufVxuXG5jb25zdCBub3JtYWxpemVTZWVkUGhyYXNlID0gKHNlZWRQaHJhc2UpID0+IHNlZWRQaHJhc2UudHJpbSgpLnNwbGl0KC9cXHMrLykubWFwKHBhcnQgPT4gcGFydC50b0xvd2VyQ2FzZSgpKS5qb2luKCcgJylcblxuY29uc3QgcGFyc2VTZWVkUGhyYXNlID0gKHNlZWRQaHJhc2UsIGRlcml2YXRpb25QYXRoKSA9PiB7XG4gICAgY29uc3Qgc2VlZCA9IGJpcDM5Lm1uZW1vbmljVG9TZWVkKG5vcm1hbGl6ZVNlZWRQaHJhc2Uoc2VlZFBocmFzZSkpXG4gICAgY29uc3QgeyBrZXkgfSA9IGRlcml2ZVBhdGgoZGVyaXZhdGlvblBhdGggfHwgS0VZX0RFUklWQVRJT05fUEFUSCwgc2VlZC50b1N0cmluZygnaGV4JykpXG4gICAgY29uc3Qga2V5UGFpciA9IG5hY2wuc2lnbi5rZXlQYWlyLmZyb21TZWVkKGtleSlcbiAgICBjb25zdCBwdWJsaWNLZXkgPSAnZWQyNTUxOTonICsgYnM1OC5lbmNvZGUoQnVmZmVyLmZyb20oa2V5UGFpci5wdWJsaWNLZXkpKVxuICAgIGNvbnN0IHNlY3JldEtleSA9ICdlZDI1NTE5OicgKyBiczU4LmVuY29kZShCdWZmZXIuZnJvbShrZXlQYWlyLnNlY3JldEtleSkpXG4gICAgcmV0dXJuIHsgc2VlZFBocmFzZSwgc2VjcmV0S2V5LCBwdWJsaWNLZXkgfVxufVxuXG5jb25zdCBmaW5kU2VlZFBocmFzZUtleSA9IChzZWVkUGhyYXNlLCBwdWJsaWNLZXlzKSA9PiB7XG4gICAgLy8gVE9ETzogTmVlZCB0byBpdGVyYXRlIHRocm91Z2ggbXVsdGlwbGUgcG9zc2libGUgZGVyaXZhdGlvbiBwYXRocz9cbiAgICBjb25zdCBrZXlJbmZvID0gcGFyc2VTZWVkUGhyYXNlKHNlZWRQaHJhc2UpXG4gICAgaWYgKHB1YmxpY0tleXMuaW5kZXhPZihrZXlJbmZvLnB1YmxpY0tleSkgPCAwKSB7XG4gICAgICAgIHJldHVybiB7fVxuICAgIH1cbiAgICByZXR1cm4ga2V5SW5mb1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBLRVlfREVSSVZBVElPTl9QQVRILFxuICAgIGdlbmVyYXRlU2VlZFBocmFzZSxcbiAgICBub3JtYWxpemVTZWVkUGhyYXNlLFxuICAgIHBhcnNlU2VlZFBocmFzZSxcbiAgICBmaW5kU2VlZFBocmFzZUtleVxufVxuIl0sIm5hbWVzIjpbImJpcDM5IiwicmVxdWlyZSIsImRlcml2ZVBhdGgiLCJiczU4IiwibmFjbCIsIktFWV9ERVJJVkFUSU9OX1BBVEgiLCJnZW5lcmF0ZVNlZWRQaHJhc2UiLCJlbnRyb3B5IiwicGFyc2VTZWVkUGhyYXNlIiwidW5kZWZpbmVkIiwiZW50cm9weVRvTW5lbW9uaWMiLCJnZW5lcmF0ZU1uZW1vbmljIiwibm9ybWFsaXplU2VlZFBocmFzZSIsInNlZWRQaHJhc2UiLCJ0cmltIiwic3BsaXQiLCJtYXAiLCJwYXJ0IiwidG9Mb3dlckNhc2UiLCJqb2luIiwiZGVyaXZhdGlvblBhdGgiLCJzZWVkIiwibW5lbW9uaWNUb1NlZWQiLCJrZXkiLCJ0b1N0cmluZyIsImtleVBhaXIiLCJzaWduIiwiZnJvbVNlZWQiLCJwdWJsaWNLZXkiLCJlbmNvZGUiLCJCdWZmZXIiLCJmcm9tIiwic2VjcmV0S2V5IiwiZmluZFNlZWRQaHJhc2VLZXkiLCJwdWJsaWNLZXlzIiwia2V5SW5mbyIsImluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/near-seed-phrase@0.2.1/node_modules/near-seed-phrase/index.js\n");

/***/ })

};
;