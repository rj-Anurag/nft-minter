"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pngjs@5.0.0";
exports.ids = ["vendor-chunks/pngjs@5.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitmapper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitmapper.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/interlace.js\");\nlet pixelBppMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 1 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = data[rawPos + 1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 2 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 3 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = data[rawPos + 3];\n    }\n];\nlet pixelBppCustomMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        let pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, pixelData, pxPos) {\n        let pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = pixelData[1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, pixelData, pxPos) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = pixelData[3];\n    }\n];\nfunction bitRetriever(data, depth) {\n    let leftOver = [];\n    let i = 0;\n    function split() {\n        if (i === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let byte = data[i];\n        i++;\n        let byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;\n        switch(depth){\n            default:\n                throw new Error(\"unrecognised depth\");\n            case 16:\n                byte2 = data[i];\n                i++;\n                leftOver.push((byte << 8) + byte2);\n                break;\n            case 4:\n                byte2 = byte & 0x0f;\n                byte1 = byte >> 4;\n                leftOver.push(byte1, byte2);\n                break;\n            case 2:\n                byte4 = byte & 3;\n                byte3 = byte >> 2 & 3;\n                byte2 = byte >> 4 & 3;\n                byte1 = byte >> 6 & 3;\n                leftOver.push(byte1, byte2, byte3, byte4);\n                break;\n            case 1:\n                byte8 = byte & 1;\n                byte7 = byte >> 1 & 1;\n                byte6 = byte >> 2 & 1;\n                byte5 = byte >> 3 & 1;\n                byte4 = byte >> 4 & 1;\n                byte3 = byte >> 5 & 1;\n                byte2 = byte >> 6 & 1;\n                byte1 = byte >> 7 & 1;\n                leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);\n                break;\n        }\n    }\n    return {\n        get: function(count) {\n            while(leftOver.length < count){\n                split();\n            }\n            let returner = leftOver.slice(0, count);\n            leftOver = leftOver.slice(count);\n            return returner;\n        },\n        resetAfterLine: function() {\n            leftOver.length = 0;\n        },\n        end: function() {\n            if (i !== data.length) {\n                throw new Error(\"extra data found\");\n            }\n        }\n    };\n}\nfunction mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {\n    // eslint-disable-line max-params\n    let imageWidth = image.width;\n    let imageHeight = image.height;\n    let imagePass = image.index;\n    for(let y = 0; y < imageHeight; y++){\n        for(let x = 0; x < imageWidth; x++){\n            let pxPos = getPxPos(x, y, imagePass);\n            pixelBppMapper[bpp](pxData, data, pxPos, rawPos);\n            rawPos += bpp; //eslint-disable-line no-param-reassign\n        }\n    }\n    return rawPos;\n}\nfunction mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {\n    // eslint-disable-line max-params\n    let imageWidth = image.width;\n    let imageHeight = image.height;\n    let imagePass = image.index;\n    for(let y = 0; y < imageHeight; y++){\n        for(let x = 0; x < imageWidth; x++){\n            let pixelData = bits.get(bpp);\n            let pxPos = getPxPos(x, y, imagePass);\n            pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);\n        }\n        bits.resetAfterLine();\n    }\n}\nexports.dataToBitMap = function(data, bitmapInfo) {\n    let width = bitmapInfo.width;\n    let height = bitmapInfo.height;\n    let depth = bitmapInfo.depth;\n    let bpp = bitmapInfo.bpp;\n    let interlace = bitmapInfo.interlace;\n    let bits;\n    if (depth !== 8) {\n        bits = bitRetriever(data, depth);\n    }\n    let pxData;\n    if (depth <= 8) {\n        pxData = Buffer.alloc(width * height * 4);\n    } else {\n        pxData = new Uint16Array(width * height * 4);\n    }\n    let maxBit = Math.pow(2, depth) - 1;\n    let rawPos = 0;\n    let images;\n    let getPxPos;\n    if (interlace) {\n        images = interlaceUtils.getImagePasses(width, height);\n        getPxPos = interlaceUtils.getInterlaceIterator(width, height);\n    } else {\n        let nonInterlacedPxPos = 0;\n        getPxPos = function() {\n            let returner = nonInterlacedPxPos;\n            nonInterlacedPxPos += 4;\n            return returner;\n        };\n        images = [\n            {\n                width: width,\n                height: height\n            }\n        ];\n    }\n    for(let imageIndex = 0; imageIndex < images.length; imageIndex++){\n        if (depth === 8) {\n            rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);\n        } else {\n            mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);\n        }\n    }\n    if (depth === 8) {\n        if (rawPos !== data.length) {\n            throw new Error(\"extra data found\");\n        }\n    } else {\n        bits.end();\n    }\n    return pxData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitmapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitpacker.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitpacker.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/constants.js\");\nmodule.exports = function(dataIn, width, height, options) {\n    let outHasAlpha = [\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) !== -1;\n    if (options.colorType === options.inputColorType) {\n        let bigEndian = function() {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            // Int16Array uses the platform's endianness.\n            return new Int16Array(buffer)[0] !== 256;\n        }();\n        // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n        if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {\n            return dataIn;\n        }\n    }\n    // map to a UInt16 array if data is 16bit, fix endianness below\n    let data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n    let maxValue = 255;\n    let inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n    if (inBpp === 4 && !options.inputHasAlpha) {\n        inBpp = 3;\n    }\n    let outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n    if (options.bitDepth === 16) {\n        maxValue = 65535;\n        outBpp *= 2;\n    }\n    let outData = Buffer.alloc(width * height * outBpp);\n    let inIndex = 0;\n    let outIndex = 0;\n    let bgColor = options.bgColor || {};\n    if (bgColor.red === undefined) {\n        bgColor.red = maxValue;\n    }\n    if (bgColor.green === undefined) {\n        bgColor.green = maxValue;\n    }\n    if (bgColor.blue === undefined) {\n        bgColor.blue = maxValue;\n    }\n    function getRGBA() {\n        let red;\n        let green;\n        let blue;\n        let alpha = maxValue;\n        switch(options.inputColorType){\n            case constants.COLORTYPE_COLOR_ALPHA:\n                alpha = data[inIndex + 3];\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_COLOR:\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_ALPHA:\n                alpha = data[inIndex + 1];\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            case constants.COLORTYPE_GRAYSCALE:\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            default:\n                throw new Error(\"input color type:\" + options.inputColorType + \" is not supported at present\");\n        }\n        if (options.inputHasAlpha) {\n            if (!outHasAlpha) {\n                alpha /= maxValue;\n                red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n                green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n                blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n            }\n        }\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha\n        };\n    }\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let rgba = getRGBA(data, inIndex);\n            switch(options.colorType){\n                case constants.COLORTYPE_COLOR_ALPHA:\n                case constants.COLORTYPE_COLOR:\n                    if (options.bitDepth === 8) {\n                        outData[outIndex] = rgba.red;\n                        outData[outIndex + 1] = rgba.green;\n                        outData[outIndex + 2] = rgba.blue;\n                        if (outHasAlpha) {\n                            outData[outIndex + 3] = rgba.alpha;\n                        }\n                    } else {\n                        outData.writeUInt16BE(rgba.red, outIndex);\n                        outData.writeUInt16BE(rgba.green, outIndex + 2);\n                        outData.writeUInt16BE(rgba.blue, outIndex + 4);\n                        if (outHasAlpha) {\n                            outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n                        }\n                    }\n                    break;\n                case constants.COLORTYPE_ALPHA:\n                case constants.COLORTYPE_GRAYSCALE:\n                    {\n                        // Convert to grayscale and alpha\n                        let grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n                        if (options.bitDepth === 8) {\n                            outData[outIndex] = grayscale;\n                            if (outHasAlpha) {\n                                outData[outIndex + 1] = rgba.alpha;\n                            }\n                        } else {\n                            outData.writeUInt16BE(grayscale, outIndex);\n                            if (outHasAlpha) {\n                                outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n                            }\n                        }\n                        break;\n                    }\n                default:\n                    throw new Error(\"unrecognised color Type \" + options.colorType);\n            }\n            inIndex += inBpp;\n            outIndex += outBpp;\n        }\n    }\n    return outData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitpacker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/chunkstream.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/chunkstream.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet ChunkStream = module.exports = function() {\n    Stream.call(this);\n    this._buffers = [];\n    this._buffered = 0;\n    this._reads = [];\n    this._paused = false;\n    this._encoding = \"utf8\";\n    this.writable = true;\n};\nutil.inherits(ChunkStream, Stream);\nChunkStream.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n    process.nextTick((function() {\n        this._process();\n        // its paused and there is not enought data then ask for more\n        if (this._paused && this._reads && this._reads.length > 0) {\n            this._paused = false;\n            this.emit(\"drain\");\n        }\n    }).bind(this));\n};\nChunkStream.prototype.write = function(data, encoding) {\n    if (!this.writable) {\n        this.emit(\"error\", new Error(\"Stream not writable\"));\n        return false;\n    }\n    let dataBuffer;\n    if (Buffer.isBuffer(data)) {\n        dataBuffer = data;\n    } else {\n        dataBuffer = Buffer.from(data, encoding || this._encoding);\n    }\n    this._buffers.push(dataBuffer);\n    this._buffered += dataBuffer.length;\n    this._process();\n    // ok if there are no more read requests\n    if (this._reads && this._reads.length === 0) {\n        this._paused = true;\n    }\n    return this.writable && !this._paused;\n};\nChunkStream.prototype.end = function(data, encoding) {\n    if (data) {\n        this.write(data, encoding);\n    }\n    this.writable = false;\n    // already destroyed\n    if (!this._buffers) {\n        return;\n    }\n    // enqueue or handle end\n    if (this._buffers.length === 0) {\n        this._end();\n    } else {\n        this._buffers.push(null);\n        this._process();\n    }\n};\nChunkStream.prototype.destroySoon = ChunkStream.prototype.end;\nChunkStream.prototype._end = function() {\n    if (this._reads.length > 0) {\n        this.emit(\"error\", new Error(\"Unexpected end of input\"));\n    }\n    this.destroy();\n};\nChunkStream.prototype.destroy = function() {\n    if (!this._buffers) {\n        return;\n    }\n    this.writable = false;\n    this._reads = null;\n    this._buffers = null;\n    this.emit(\"close\");\n};\nChunkStream.prototype._processReadAllowingLess = function(read) {\n    // ok there is any data so that we can satisfy this request\n    this._reads.shift(); // == read\n    // first we need to peek into first buffer\n    let smallerBuf = this._buffers[0];\n    // ok there is more data than we need\n    if (smallerBuf.length > read.length) {\n        this._buffered -= read.length;\n        this._buffers[0] = smallerBuf.slice(read.length);\n        read.func.call(this, smallerBuf.slice(0, read.length));\n    } else {\n        // ok this is less than maximum length so use it all\n        this._buffered -= smallerBuf.length;\n        this._buffers.shift(); // == smallerBuf\n        read.func.call(this, smallerBuf);\n    }\n};\nChunkStream.prototype._processRead = function(read) {\n    this._reads.shift(); // == read\n    let pos = 0;\n    let count = 0;\n    let data = Buffer.alloc(read.length);\n    // create buffer for all data\n    while(pos < read.length){\n        let buf = this._buffers[count++];\n        let len = Math.min(buf.length, read.length - pos);\n        buf.copy(data, pos, 0, len);\n        pos += len;\n        // last buffer wasn't used all so just slice it and leave\n        if (len !== buf.length) {\n            this._buffers[--count] = buf.slice(len);\n        }\n    }\n    // remove all used buffers\n    if (count > 0) {\n        this._buffers.splice(0, count);\n    }\n    this._buffered -= read.length;\n    read.func.call(this, data);\n};\nChunkStream.prototype._process = function() {\n    try {\n        // as long as there is any data and read requests\n        while(this._buffered > 0 && this._reads && this._reads.length > 0){\n            let read = this._reads[0];\n            // read any data (but no more than length)\n            if (read.allowLess) {\n                this._processReadAllowingLess(read);\n            } else if (this._buffered >= read.length) {\n                // ok we can meet some expectations\n                this._processRead(read);\n            } else {\n                break;\n            }\n        }\n        if (this._buffers && !this.writable) {\n            this._end();\n        }\n    } catch (ex) {\n        this.emit(\"error\", ex);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/chunkstream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/constants.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/constants.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    PNG_SIGNATURE: [\n        0x89,\n        0x50,\n        0x4e,\n        0x47,\n        0x0d,\n        0x0a,\n        0x1a,\n        0x0a\n    ],\n    TYPE_IHDR: 0x49484452,\n    TYPE_IEND: 0x49454e44,\n    TYPE_IDAT: 0x49444154,\n    TYPE_PLTE: 0x504c5445,\n    TYPE_tRNS: 0x74524e53,\n    TYPE_gAMA: 0x67414d41,\n    // color-type bits\n    COLORTYPE_GRAYSCALE: 0,\n    COLORTYPE_PALETTE: 1,\n    COLORTYPE_COLOR: 2,\n    COLORTYPE_ALPHA: 4,\n    // color-type combinations\n    COLORTYPE_PALETTE_COLOR: 3,\n    COLORTYPE_COLOR_ALPHA: 6,\n    COLORTYPE_TO_BPP_MAP: {\n        0: 1,\n        2: 3,\n        3: 1,\n        4: 2,\n        6: 4\n    },\n    GAMMA_DIVISION: 100000\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLGVBQWU7UUFBQztRQUFNO1FBQU07UUFBTTtRQUFNO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFFL0RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxXQUFXO0lBRVgsa0JBQWtCO0lBQ2xCQyxxQkFBcUI7SUFDckJDLG1CQUFtQjtJQUNuQkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFFakIsMEJBQTBCO0lBQzFCQyx5QkFBeUI7SUFDekJDLHVCQUF1QjtJQUV2QkMsc0JBQXNCO1FBQ3BCLEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO0lBQ0w7SUFFQUMsZ0JBQWdCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wbmdqc0A1LjAuMC9ub2RlX21vZHVsZXMvcG5nanMvbGliL2NvbnN0YW50cy5qcz8wZDdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUE5HX1NJR05BVFVSRTogWzB4ODksIDB4NTAsIDB4NGUsIDB4NDcsIDB4MGQsIDB4MGEsIDB4MWEsIDB4MGFdLFxuXG4gIFRZUEVfSUhEUjogMHg0OTQ4NDQ1MixcbiAgVFlQRV9JRU5EOiAweDQ5NDU0ZTQ0LFxuICBUWVBFX0lEQVQ6IDB4NDk0NDQxNTQsXG4gIFRZUEVfUExURTogMHg1MDRjNTQ0NSxcbiAgVFlQRV90Uk5TOiAweDc0NTI0ZTUzLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICBUWVBFX2dBTUE6IDB4Njc0MTRkNDEsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgLy8gY29sb3ItdHlwZSBiaXRzXG4gIENPTE9SVFlQRV9HUkFZU0NBTEU6IDAsXG4gIENPTE9SVFlQRV9QQUxFVFRFOiAxLFxuICBDT0xPUlRZUEVfQ09MT1I6IDIsXG4gIENPTE9SVFlQRV9BTFBIQTogNCwgLy8gZS5nLiBncmF5c2NhbGUgYW5kIGFscGhhXG5cbiAgLy8gY29sb3ItdHlwZSBjb21iaW5hdGlvbnNcbiAgQ09MT1JUWVBFX1BBTEVUVEVfQ09MT1I6IDMsXG4gIENPTE9SVFlQRV9DT0xPUl9BTFBIQTogNixcblxuICBDT0xPUlRZUEVfVE9fQlBQX01BUDoge1xuICAgIDA6IDEsXG4gICAgMjogMyxcbiAgICAzOiAxLFxuICAgIDQ6IDIsXG4gICAgNjogNCxcbiAgfSxcblxuICBHQU1NQV9ESVZJU0lPTjogMTAwMDAwLFxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiUE5HX1NJR05BVFVSRSIsIlRZUEVfSUhEUiIsIlRZUEVfSUVORCIsIlRZUEVfSURBVCIsIlRZUEVfUExURSIsIlRZUEVfdFJOUyIsIlRZUEVfZ0FNQSIsIkNPTE9SVFlQRV9HUkFZU0NBTEUiLCJDT0xPUlRZUEVfUEFMRVRURSIsIkNPTE9SVFlQRV9DT0xPUiIsIkNPTE9SVFlQRV9BTFBIQSIsIkNPTE9SVFlQRV9QQUxFVFRFX0NPTE9SIiwiQ09MT1JUWVBFX0NPTE9SX0FMUEhBIiwiQ09MT1JUWVBFX1RPX0JQUF9NQVAiLCJHQU1NQV9ESVZJU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/crc.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/crc.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\nlet crcTable = [];\n(function() {\n    for(let i = 0; i < 256; i++){\n        let currentCrc = i;\n        for(let j = 0; j < 8; j++){\n            if (currentCrc & 1) {\n                currentCrc = 0xedb88320 ^ currentCrc >>> 1;\n            } else {\n                currentCrc = currentCrc >>> 1;\n            }\n        }\n        crcTable[i] = currentCrc;\n    }\n})();\nlet CrcCalculator = module.exports = function() {\n    this._crc = -1;\n};\nCrcCalculator.prototype.write = function(data) {\n    for(let i = 0; i < data.length; i++){\n        this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;\n    }\n    return true;\n};\nCrcCalculator.prototype.crc32 = function() {\n    return this._crc ^ -1;\n};\nCrcCalculator.crc32 = function(buf) {\n    let crc = -1;\n    for(let i = 0; i < buf.length; i++){\n        crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;\n    }\n    return crc ^ -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jcmMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxXQUFXLEVBQUU7QUFFaEI7SUFDQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLQSxJQUFLO1FBQzVCLElBQUlDLGFBQWFEO1FBQ2pCLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7WUFDMUIsSUFBSUQsYUFBYSxHQUFHO2dCQUNsQkEsYUFBYSxhQUFjQSxlQUFlO1lBQzVDLE9BQU87Z0JBQ0xBLGFBQWFBLGVBQWU7WUFDOUI7UUFDRjtRQUNBRixRQUFRLENBQUNDLEVBQUUsR0FBR0M7SUFDaEI7QUFDRjtBQUVBLElBQUlFLGdCQUFpQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ3BDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLENBQUM7QUFDZjtBQUVBSCxjQUFjSSxTQUFTLENBQUNDLEtBQUssR0FBRyxTQUFVQyxJQUFJO0lBQzVDLElBQUssSUFBSVQsSUFBSSxHQUFHQSxJQUFJUyxLQUFLQyxNQUFNLEVBQUVWLElBQUs7UUFDcEMsSUFBSSxDQUFDTSxJQUFJLEdBQUdQLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQ08sSUFBSSxHQUFHRyxJQUFJLENBQUNULEVBQUUsSUFBSSxLQUFLLEdBQUksSUFBSSxDQUFDTSxJQUFJLEtBQUs7SUFDdEU7SUFDQSxPQUFPO0FBQ1Q7QUFFQUgsY0FBY0ksU0FBUyxDQUFDSSxLQUFLLEdBQUc7SUFDOUIsT0FBTyxJQUFJLENBQUNMLElBQUksR0FBRyxDQUFDO0FBQ3RCO0FBRUFILGNBQWNRLEtBQUssR0FBRyxTQUFVQyxHQUFHO0lBQ2pDLElBQUlDLE1BQU0sQ0FBQztJQUNYLElBQUssSUFBSWIsSUFBSSxHQUFHQSxJQUFJWSxJQUFJRixNQUFNLEVBQUVWLElBQUs7UUFDbkNhLE1BQU1kLFFBQVEsQ0FBQyxDQUFDYyxNQUFNRCxHQUFHLENBQUNaLEVBQUUsSUFBSSxLQUFLLEdBQUlhLFFBQVE7SUFDbkQ7SUFDQSxPQUFPQSxNQUFNLENBQUM7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3BuZ2pzQDUuMC4wL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvY3JjLmpzPzQwY2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBjcmNUYWJsZSA9IFtdO1xuXG4oZnVuY3Rpb24gKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnRDcmMgPSBpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgaisrKSB7XG4gICAgICBpZiAoY3VycmVudENyYyAmIDEpIHtcbiAgICAgICAgY3VycmVudENyYyA9IDB4ZWRiODgzMjAgXiAoY3VycmVudENyYyA+Pj4gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50Q3JjID0gY3VycmVudENyYyA+Pj4gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3JjVGFibGVbaV0gPSBjdXJyZW50Q3JjO1xuICB9XG59KSgpO1xuXG5sZXQgQ3JjQ2FsY3VsYXRvciA9IChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY3JjID0gLTE7XG59KTtcblxuQ3JjQ2FsY3VsYXRvci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLl9jcmMgPSBjcmNUYWJsZVsodGhpcy5fY3JjIF4gZGF0YVtpXSkgJiAweGZmXSBeICh0aGlzLl9jcmMgPj4+IDgpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuQ3JjQ2FsY3VsYXRvci5wcm90b3R5cGUuY3JjMzIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9jcmMgXiAtMTtcbn07XG5cbkNyY0NhbGN1bGF0b3IuY3JjMzIgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGxldCBjcmMgPSAtMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpKyspIHtcbiAgICBjcmMgPSBjcmNUYWJsZVsoY3JjIF4gYnVmW2ldKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOCk7XG4gIH1cbiAgcmV0dXJuIGNyYyBeIC0xO1xufTtcbiJdLCJuYW1lcyI6WyJjcmNUYWJsZSIsImkiLCJjdXJyZW50Q3JjIiwiaiIsIkNyY0NhbGN1bGF0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiX2NyYyIsInByb3RvdHlwZSIsIndyaXRlIiwiZGF0YSIsImxlbmd0aCIsImNyYzMyIiwiYnVmIiwiY3JjIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/crc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-pack.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-pack.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/paeth-predictor.js\");\nfunction filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(let x = 0; x < byteWidth; x++){\n        rawData[rawPos + x] = pxData[pxPos + x];\n    }\n}\nfunction filterSumNone(pxData, pxPos, byteWidth) {\n    let sum = 0;\n    let length = pxPos + byteWidth;\n    for(let i = pxPos; i < length; i++){\n        sum += Math.abs(pxData[i]);\n    }\n    return sum;\n}\nfunction filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let val = pxData[pxPos + x] - left;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumSub(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let val = pxData[pxPos + x] - left;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(let x = 0; x < byteWidth; x++){\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - up;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumUp(pxData, pxPos, byteWidth) {\n    let sum = 0;\n    let length = pxPos + byteWidth;\n    for(let x = pxPos; x < length; x++){\n        let up = pxPos > 0 ? pxData[x - byteWidth] : 0;\n        let val = pxData[x] - up;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - (left + up >> 1);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumAvg(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - (left + up >> 1);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        let val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumPaeth(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        let val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nlet filters = {\n    0: filterNone,\n    1: filterSub,\n    2: filterUp,\n    3: filterAvg,\n    4: filterPaeth\n};\nlet filterSums = {\n    0: filterSumNone,\n    1: filterSumSub,\n    2: filterSumUp,\n    3: filterSumAvg,\n    4: filterSumPaeth\n};\nmodule.exports = function(pxData, width, height, options, bpp) {\n    let filterTypes;\n    if (!(\"filterType\" in options) || options.filterType === -1) {\n        filterTypes = [\n            0,\n            1,\n            2,\n            3,\n            4\n        ];\n    } else if (typeof options.filterType === \"number\") {\n        filterTypes = [\n            options.filterType\n        ];\n    } else {\n        throw new Error(\"unrecognised filter types\");\n    }\n    if (options.bitDepth === 16) {\n        bpp *= 2;\n    }\n    let byteWidth = width * bpp;\n    let rawPos = 0;\n    let pxPos = 0;\n    let rawData = Buffer.alloc((byteWidth + 1) * height);\n    let sel = filterTypes[0];\n    for(let y = 0; y < height; y++){\n        if (filterTypes.length > 1) {\n            // find best filter for this line (with lowest sum of values)\n            let min = Infinity;\n            for(let i = 0; i < filterTypes.length; i++){\n                let sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);\n                if (sum < min) {\n                    sel = filterTypes[i];\n                    min = sum;\n                }\n            }\n        }\n        rawData[rawPos] = sel;\n        rawPos++;\n        filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);\n        rawPos += byteWidth;\n        pxPos += byteWidth;\n    }\n    return rawData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-pack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse-async.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse-async.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/chunkstream.js\");\nlet Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse.js\");\nlet FilterAsync = module.exports = function(bitmapInfo) {\n    ChunkStream.call(this);\n    let buffers = [];\n    let that = this;\n    this._filter = new Filter(bitmapInfo, {\n        read: this.read.bind(this),\n        write: function(buffer) {\n            buffers.push(buffer);\n        },\n        complete: function() {\n            that.emit(\"complete\", Buffer.concat(buffers));\n        }\n    });\n    this._filter.start();\n};\nutil.inherits(FilterAsync, ChunkStream);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2UtYXN5bmMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUN6QixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQyxtR0FBZTtBQUN6QyxJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQyxxR0FBZ0I7QUFFckMsSUFBSUcsY0FBZUMsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLFVBQVU7SUFDdERMLFlBQVlNLElBQUksQ0FBQyxJQUFJO0lBRXJCLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJUixPQUFPSSxZQUFZO1FBQ3BDSyxNQUFNLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUN6QkMsT0FBTyxTQUFVQyxNQUFNO1lBQ3JCTixRQUFRTyxJQUFJLENBQUNEO1FBQ2Y7UUFDQUUsVUFBVTtZQUNSUCxLQUFLUSxJQUFJLENBQUMsWUFBWUMsT0FBT0MsTUFBTSxDQUFDWDtRQUN0QztJQUNGO0lBRUEsSUFBSSxDQUFDRSxPQUFPLENBQUNVLEtBQUs7QUFDcEI7QUFDQXJCLEtBQUtzQixRQUFRLENBQUNsQixhQUFhRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2UtYXN5bmMuanM/NTU4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBDaHVua1N0cmVhbSA9IHJlcXVpcmUoXCIuL2NodW5rc3RyZWFtXCIpO1xubGV0IEZpbHRlciA9IHJlcXVpcmUoXCIuL2ZpbHRlci1wYXJzZVwiKTtcblxubGV0IEZpbHRlckFzeW5jID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcEluZm8pIHtcbiAgQ2h1bmtTdHJlYW0uY2FsbCh0aGlzKTtcblxuICBsZXQgYnVmZmVycyA9IFtdO1xuICBsZXQgdGhhdCA9IHRoaXM7XG4gIHRoaXMuX2ZpbHRlciA9IG5ldyBGaWx0ZXIoYml0bWFwSW5mbywge1xuICAgIHJlYWQ6IHRoaXMucmVhZC5iaW5kKHRoaXMpLFxuICAgIHdyaXRlOiBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICBidWZmZXJzLnB1c2goYnVmZmVyKTtcbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LmVtaXQoXCJjb21wbGV0ZVwiLCBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpKTtcbiAgICB9LFxuICB9KTtcblxuICB0aGlzLl9maWx0ZXIuc3RhcnQoKTtcbn0pO1xudXRpbC5pbmhlcml0cyhGaWx0ZXJBc3luYywgQ2h1bmtTdHJlYW0pO1xuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiQ2h1bmtTdHJlYW0iLCJGaWx0ZXIiLCJGaWx0ZXJBc3luYyIsIm1vZHVsZSIsImV4cG9ydHMiLCJiaXRtYXBJbmZvIiwiY2FsbCIsImJ1ZmZlcnMiLCJ0aGF0IiwiX2ZpbHRlciIsInJlYWQiLCJiaW5kIiwid3JpdGUiLCJidWZmZXIiLCJwdXNoIiwiY29tcGxldGUiLCJlbWl0IiwiQnVmZmVyIiwiY29uY2F0Iiwic3RhcnQiLCJpbmhlcml0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse-sync.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse-sync.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-reader.js\");\nlet Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse.js\");\nexports.process = function(inBuffer, bitmapInfo) {\n    let outBuffers = [];\n    let reader = new SyncReader(inBuffer);\n    let filter = new Filter(bitmapInfo, {\n        read: reader.read.bind(reader),\n        write: function(bufferPart) {\n            outBuffers.push(bufferPart);\n        },\n        complete: function() {}\n    });\n    filter.start();\n    reader.process();\n    return Buffer.concat(outBuffers);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2Utc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDLG1HQUFlO0FBQ3hDLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLHFHQUFnQjtBQUVyQ0UsZUFBZSxHQUFHLFNBQVVFLFFBQVEsRUFBRUMsVUFBVTtJQUM5QyxJQUFJQyxhQUFhLEVBQUU7SUFDbkIsSUFBSUMsU0FBUyxJQUFJUixXQUFXSztJQUM1QixJQUFJSSxTQUFTLElBQUlQLE9BQU9JLFlBQVk7UUFDbENJLE1BQU1GLE9BQU9FLElBQUksQ0FBQ0MsSUFBSSxDQUFDSDtRQUN2QkksT0FBTyxTQUFVQyxVQUFVO1lBQ3pCTixXQUFXTyxJQUFJLENBQUNEO1FBQ2xCO1FBQ0FFLFVBQVUsWUFBYTtJQUN6QjtJQUVBTixPQUFPTyxLQUFLO0lBQ1pSLE9BQU9KLE9BQU87SUFFZCxPQUFPYSxPQUFPQyxNQUFNLENBQUNYO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wbmdqc0A1LjAuMC9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1zeW5jLmpzPzhkOWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBTeW5jUmVhZGVyID0gcmVxdWlyZShcIi4vc3luYy1yZWFkZXJcIik7XG5sZXQgRmlsdGVyID0gcmVxdWlyZShcIi4vZmlsdGVyLXBhcnNlXCIpO1xuXG5leHBvcnRzLnByb2Nlc3MgPSBmdW5jdGlvbiAoaW5CdWZmZXIsIGJpdG1hcEluZm8pIHtcbiAgbGV0IG91dEJ1ZmZlcnMgPSBbXTtcbiAgbGV0IHJlYWRlciA9IG5ldyBTeW5jUmVhZGVyKGluQnVmZmVyKTtcbiAgbGV0IGZpbHRlciA9IG5ldyBGaWx0ZXIoYml0bWFwSW5mbywge1xuICAgIHJlYWQ6IHJlYWRlci5yZWFkLmJpbmQocmVhZGVyKSxcbiAgICB3cml0ZTogZnVuY3Rpb24gKGJ1ZmZlclBhcnQpIHtcbiAgICAgIG91dEJ1ZmZlcnMucHVzaChidWZmZXJQYXJ0KTtcbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgfSk7XG5cbiAgZmlsdGVyLnN0YXJ0KCk7XG4gIHJlYWRlci5wcm9jZXNzKCk7XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0QnVmZmVycyk7XG59O1xuIl0sIm5hbWVzIjpbIlN5bmNSZWFkZXIiLCJyZXF1aXJlIiwiRmlsdGVyIiwiZXhwb3J0cyIsInByb2Nlc3MiLCJpbkJ1ZmZlciIsImJpdG1hcEluZm8iLCJvdXRCdWZmZXJzIiwicmVhZGVyIiwiZmlsdGVyIiwicmVhZCIsImJpbmQiLCJ3cml0ZSIsImJ1ZmZlclBhcnQiLCJwdXNoIiwiY29tcGxldGUiLCJzdGFydCIsIkJ1ZmZlciIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/interlace.js\");\nlet paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/paeth-predictor.js\");\nfunction getByteWidth(width, bpp, depth) {\n    let byteWidth = width * bpp;\n    if (depth !== 8) {\n        byteWidth = Math.ceil(byteWidth / (8 / depth));\n    }\n    return byteWidth;\n}\nlet Filter = module.exports = function(bitmapInfo, dependencies) {\n    let width = bitmapInfo.width;\n    let height = bitmapInfo.height;\n    let interlace = bitmapInfo.interlace;\n    let bpp = bitmapInfo.bpp;\n    let depth = bitmapInfo.depth;\n    this.read = dependencies.read;\n    this.write = dependencies.write;\n    this.complete = dependencies.complete;\n    this._imageIndex = 0;\n    this._images = [];\n    if (interlace) {\n        let passes = interlaceUtils.getImagePasses(width, height);\n        for(let i = 0; i < passes.length; i++){\n            this._images.push({\n                byteWidth: getByteWidth(passes[i].width, bpp, depth),\n                height: passes[i].height,\n                lineIndex: 0\n            });\n        }\n    } else {\n        this._images.push({\n            byteWidth: getByteWidth(width, bpp, depth),\n            height: height,\n            lineIndex: 0\n        });\n    }\n    // when filtering the line we look at the pixel to the left\n    // the spec also says it is done on a byte level regardless of the number of pixels\n    // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back\n    // a pixel rather than just a different byte part. However if we are sub byte, we ignore.\n    if (depth === 8) {\n        this._xComparison = bpp;\n    } else if (depth === 16) {\n        this._xComparison = bpp * 2;\n    } else {\n        this._xComparison = 1;\n    }\n};\nFilter.prototype.start = function() {\n    this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));\n};\nFilter.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        unfilteredLine[x] = rawByte + f1Left;\n    }\n};\nFilter.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f2Up = lastLine ? lastLine[x] : 0;\n        unfilteredLine[x] = rawByte + f2Up;\n    }\n};\nFilter.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f3Up = lastLine ? lastLine[x] : 0;\n        let f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        let f3Add = Math.floor((f3Left + f3Up) / 2);\n        unfilteredLine[x] = rawByte + f3Add;\n    }\n};\nFilter.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f4Up = lastLine ? lastLine[x] : 0;\n        let f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        let f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;\n        let f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);\n        unfilteredLine[x] = rawByte + f4Add;\n    }\n};\nFilter.prototype._reverseFilterLine = function(rawData) {\n    let filter = rawData[0];\n    let unfilteredLine;\n    let currentImage = this._images[this._imageIndex];\n    let byteWidth = currentImage.byteWidth;\n    if (filter === 0) {\n        unfilteredLine = rawData.slice(1, byteWidth + 1);\n    } else {\n        unfilteredLine = Buffer.alloc(byteWidth);\n        switch(filter){\n            case 1:\n                this._unFilterType1(rawData, unfilteredLine, byteWidth);\n                break;\n            case 2:\n                this._unFilterType2(rawData, unfilteredLine, byteWidth);\n                break;\n            case 3:\n                this._unFilterType3(rawData, unfilteredLine, byteWidth);\n                break;\n            case 4:\n                this._unFilterType4(rawData, unfilteredLine, byteWidth);\n                break;\n            default:\n                throw new Error(\"Unrecognised filter type - \" + filter);\n        }\n    }\n    this.write(unfilteredLine);\n    currentImage.lineIndex++;\n    if (currentImage.lineIndex >= currentImage.height) {\n        this._lastLine = null;\n        this._imageIndex++;\n        currentImage = this._images[this._imageIndex];\n    } else {\n        this._lastLine = unfilteredLine;\n    }\n    if (currentImage) {\n        // read, using the byte width that may be from the new current image\n        this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));\n    } else {\n        this._lastLine = null;\n        this.complete();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/format-normaliser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/format-normaliser.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("\nfunction dePalette(indata, outdata, width, height, palette) {\n    let pxPos = 0;\n    // use values from palette\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let color = palette[indata[pxPos]];\n            if (!color) {\n                throw new Error(\"index \" + indata[pxPos] + \" not in palette\");\n            }\n            for(let i = 0; i < 4; i++){\n                outdata[pxPos + i] = color[i];\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction replaceTransparentColor(indata, outdata, width, height, transColor) {\n    let pxPos = 0;\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let makeTrans = false;\n            if (transColor.length === 1) {\n                if (transColor[0] === indata[pxPos]) {\n                    makeTrans = true;\n                }\n            } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {\n                makeTrans = true;\n            }\n            if (makeTrans) {\n                for(let i = 0; i < 4; i++){\n                    outdata[pxPos + i] = 0;\n                }\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction scaleDepth(indata, outdata, width, height, depth) {\n    let maxOutSample = 255;\n    let maxInSample = Math.pow(2, depth) - 1;\n    let pxPos = 0;\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            for(let i = 0; i < 4; i++){\n                outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);\n            }\n            pxPos += 4;\n        }\n    }\n}\nmodule.exports = function(indata, imageData) {\n    let depth = imageData.depth;\n    let width = imageData.width;\n    let height = imageData.height;\n    let colorType = imageData.colorType;\n    let transColor = imageData.transColor;\n    let palette = imageData.palette;\n    let outdata = indata; // only different for 16 bits\n    if (colorType === 3) {\n        // paletted\n        dePalette(indata, outdata, width, height, palette);\n    } else {\n        if (transColor) {\n            replaceTransparentColor(indata, outdata, width, height, transColor);\n        }\n        // if it needs scaling\n        if (depth !== 8) {\n            // if we need to change the buffer size\n            if (depth === 16) {\n                outdata = Buffer.alloc(width * height * 4);\n            }\n            scaleDepth(indata, outdata, width, height, depth);\n        }\n    }\n    return outdata;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9mb3JtYXQtbm9ybWFsaXNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVNBLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUN4RCxJQUFJQyxRQUFRO0lBQ1osMEJBQTBCO0lBQzFCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxRQUFRRyxJQUFLO1FBQy9CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxPQUFPSyxJQUFLO1lBQzlCLElBQUlDLFFBQVFKLE9BQU8sQ0FBQ0osTUFBTSxDQUFDSyxNQUFNLENBQUM7WUFFbEMsSUFBSSxDQUFDRyxPQUFPO2dCQUNWLE1BQU0sSUFBSUMsTUFBTSxXQUFXVCxNQUFNLENBQUNLLE1BQU0sR0FBRztZQUM3QztZQUVBLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7Z0JBQzFCVCxPQUFPLENBQUNJLFFBQVFLLEVBQUUsR0FBR0YsS0FBSyxDQUFDRSxFQUFFO1lBQy9CO1lBQ0FMLFNBQVM7UUFDWDtJQUNGO0FBQ0Y7QUFFQSxTQUFTTSx3QkFBd0JYLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRVMsVUFBVTtJQUN6RSxJQUFJUCxRQUFRO0lBQ1osSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFFBQVFHLElBQUs7UUFDL0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLE9BQU9LLElBQUs7WUFDOUIsSUFBSU0sWUFBWTtZQUVoQixJQUFJRCxXQUFXRSxNQUFNLEtBQUssR0FBRztnQkFDM0IsSUFBSUYsVUFBVSxDQUFDLEVBQUUsS0FBS1osTUFBTSxDQUFDSyxNQUFNLEVBQUU7b0JBQ25DUSxZQUFZO2dCQUNkO1lBQ0YsT0FBTyxJQUNMRCxVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLE1BQU0sSUFDL0JPLFVBQVUsQ0FBQyxFQUFFLEtBQUtaLE1BQU0sQ0FBQ0ssUUFBUSxFQUFFLElBQ25DTyxVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLFFBQVEsRUFBRSxFQUNuQztnQkFDQVEsWUFBWTtZQUNkO1lBQ0EsSUFBSUEsV0FBVztnQkFDYixJQUFLLElBQUlILElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO29CQUMxQlQsT0FBTyxDQUFDSSxRQUFRSyxFQUFFLEdBQUc7Z0JBQ3ZCO1lBQ0Y7WUFDQUwsU0FBUztRQUNYO0lBQ0Y7QUFDRjtBQUVBLFNBQVNVLFdBQVdmLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRWEsS0FBSztJQUN2RCxJQUFJQyxlQUFlO0lBQ25CLElBQUlDLGNBQWNDLEtBQUtDLEdBQUcsQ0FBQyxHQUFHSixTQUFTO0lBQ3ZDLElBQUlYLFFBQVE7SUFFWixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsUUFBUUcsSUFBSztRQUMvQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsT0FBT0ssSUFBSztZQUM5QixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO2dCQUMxQlQsT0FBTyxDQUFDSSxRQUFRSyxFQUFFLEdBQUdTLEtBQUtFLEtBQUssQ0FDN0IsTUFBTyxDQUFDaEIsUUFBUUssRUFBRSxHQUFHTyxlQUFnQkMsY0FBYztZQUV2RDtZQUNBYixTQUFTO1FBQ1g7SUFDRjtBQUNGO0FBRUFpQixPQUFPQyxPQUFPLEdBQUcsU0FBVXZCLE1BQU0sRUFBRXdCLFNBQVM7SUFDMUMsSUFBSVIsUUFBUVEsVUFBVVIsS0FBSztJQUMzQixJQUFJZCxRQUFRc0IsVUFBVXRCLEtBQUs7SUFDM0IsSUFBSUMsU0FBU3FCLFVBQVVyQixNQUFNO0lBQzdCLElBQUlzQixZQUFZRCxVQUFVQyxTQUFTO0lBQ25DLElBQUliLGFBQWFZLFVBQVVaLFVBQVU7SUFDckMsSUFBSVIsVUFBVW9CLFVBQVVwQixPQUFPO0lBRS9CLElBQUlILFVBQVVELFFBQVEsNkJBQTZCO0lBRW5ELElBQUl5QixjQUFjLEdBQUc7UUFDbkIsV0FBVztRQUNYMUIsVUFBVUMsUUFBUUMsU0FBU0MsT0FBT0MsUUFBUUM7SUFDNUMsT0FBTztRQUNMLElBQUlRLFlBQVk7WUFDZEQsd0JBQXdCWCxRQUFRQyxTQUFTQyxPQUFPQyxRQUFRUztRQUMxRDtRQUNBLHNCQUFzQjtRQUN0QixJQUFJSSxVQUFVLEdBQUc7WUFDZix1Q0FBdUM7WUFDdkMsSUFBSUEsVUFBVSxJQUFJO2dCQUNoQmYsVUFBVXlCLE9BQU9DLEtBQUssQ0FBQ3pCLFFBQVFDLFNBQVM7WUFDMUM7WUFDQVksV0FBV2YsUUFBUUMsU0FBU0MsT0FBT0MsUUFBUWE7UUFDN0M7SUFDRjtJQUNBLE9BQU9mO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3BuZ2pzQDUuMC4wL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvZm9ybWF0LW5vcm1hbGlzZXIuanM/ZDFhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZGVQYWxldHRlKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgcGFsZXR0ZSkge1xuICBsZXQgcHhQb3MgPSAwO1xuICAvLyB1c2UgdmFsdWVzIGZyb20gcGFsZXR0ZVxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBsZXQgY29sb3IgPSBwYWxldHRlW2luZGF0YVtweFBvc11dO1xuXG4gICAgICBpZiAoIWNvbG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImluZGV4IFwiICsgaW5kYXRhW3B4UG9zXSArIFwiIG5vdCBpbiBwYWxldHRlXCIpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBvdXRkYXRhW3B4UG9zICsgaV0gPSBjb2xvcltpXTtcbiAgICAgIH1cbiAgICAgIHB4UG9zICs9IDQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VUcmFuc3BhcmVudENvbG9yKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgdHJhbnNDb2xvcikge1xuICBsZXQgcHhQb3MgPSAwO1xuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBsZXQgbWFrZVRyYW5zID0gZmFsc2U7XG5cbiAgICAgIGlmICh0cmFuc0NvbG9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAodHJhbnNDb2xvclswXSA9PT0gaW5kYXRhW3B4UG9zXSkge1xuICAgICAgICAgIG1ha2VUcmFucyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHRyYW5zQ29sb3JbMF0gPT09IGluZGF0YVtweFBvc10gJiZcbiAgICAgICAgdHJhbnNDb2xvclsxXSA9PT0gaW5kYXRhW3B4UG9zICsgMV0gJiZcbiAgICAgICAgdHJhbnNDb2xvclsyXSA9PT0gaW5kYXRhW3B4UG9zICsgMl1cbiAgICAgICkge1xuICAgICAgICBtYWtlVHJhbnMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG1ha2VUcmFucykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgIG91dGRhdGFbcHhQb3MgKyBpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB4UG9zICs9IDQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNjYWxlRGVwdGgoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCkge1xuICBsZXQgbWF4T3V0U2FtcGxlID0gMjU1O1xuICBsZXQgbWF4SW5TYW1wbGUgPSBNYXRoLnBvdygyLCBkZXB0aCkgLSAxO1xuICBsZXQgcHhQb3MgPSAwO1xuXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgIG91dGRhdGFbcHhQb3MgKyBpXSA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgKGluZGF0YVtweFBvcyArIGldICogbWF4T3V0U2FtcGxlKSAvIG1heEluU2FtcGxlICsgMC41XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBweFBvcyArPSA0O1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRhdGEsIGltYWdlRGF0YSkge1xuICBsZXQgZGVwdGggPSBpbWFnZURhdGEuZGVwdGg7XG4gIGxldCB3aWR0aCA9IGltYWdlRGF0YS53aWR0aDtcbiAgbGV0IGhlaWdodCA9IGltYWdlRGF0YS5oZWlnaHQ7XG4gIGxldCBjb2xvclR5cGUgPSBpbWFnZURhdGEuY29sb3JUeXBlO1xuICBsZXQgdHJhbnNDb2xvciA9IGltYWdlRGF0YS50cmFuc0NvbG9yO1xuICBsZXQgcGFsZXR0ZSA9IGltYWdlRGF0YS5wYWxldHRlO1xuXG4gIGxldCBvdXRkYXRhID0gaW5kYXRhOyAvLyBvbmx5IGRpZmZlcmVudCBmb3IgMTYgYml0c1xuXG4gIGlmIChjb2xvclR5cGUgPT09IDMpIHtcbiAgICAvLyBwYWxldHRlZFxuICAgIGRlUGFsZXR0ZShpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHBhbGV0dGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0cmFuc0NvbG9yKSB7XG4gICAgICByZXBsYWNlVHJhbnNwYXJlbnRDb2xvcihpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHRyYW5zQ29sb3IpO1xuICAgIH1cbiAgICAvLyBpZiBpdCBuZWVkcyBzY2FsaW5nXG4gICAgaWYgKGRlcHRoICE9PSA4KSB7XG4gICAgICAvLyBpZiB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgYnVmZmVyIHNpemVcbiAgICAgIGlmIChkZXB0aCA9PT0gMTYpIHtcbiAgICAgICAgb3V0ZGF0YSA9IEJ1ZmZlci5hbGxvYyh3aWR0aCAqIGhlaWdodCAqIDQpO1xuICAgICAgfVxuICAgICAgc2NhbGVEZXB0aChpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dGRhdGE7XG59O1xuIl0sIm5hbWVzIjpbImRlUGFsZXR0ZSIsImluZGF0YSIsIm91dGRhdGEiLCJ3aWR0aCIsImhlaWdodCIsInBhbGV0dGUiLCJweFBvcyIsInkiLCJ4IiwiY29sb3IiLCJFcnJvciIsImkiLCJyZXBsYWNlVHJhbnNwYXJlbnRDb2xvciIsInRyYW5zQ29sb3IiLCJtYWtlVHJhbnMiLCJsZW5ndGgiLCJzY2FsZURlcHRoIiwiZGVwdGgiLCJtYXhPdXRTYW1wbGUiLCJtYXhJblNhbXBsZSIsIk1hdGgiLCJwb3ciLCJmbG9vciIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbWFnZURhdGEiLCJjb2xvclR5cGUiLCJCdWZmZXIiLCJhbGxvYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/format-normaliser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/interlace.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/interlace.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Adam 7\n//   0 1 2 3 4 5 6 7\n// 0 x 6 4 6 x 6 4 6\n// 1 7 7 7 7 7 7 7 7\n// 2 5 6 5 6 5 6 5 6\n// 3 7 7 7 7 7 7 7 7\n// 4 3 6 4 6 3 6 4 6\n// 5 7 7 7 7 7 7 7 7\n// 6 5 6 5 6 5 6 5 6\n// 7 7 7 7 7 7 7 7 7\nlet imagePasses = [\n    {\n        // pass 1 - 1px\n        x: [\n            0\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        // pass 2 - 1px\n        x: [\n            4\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        // pass 3 - 2px\n        x: [\n            0,\n            4\n        ],\n        y: [\n            4\n        ]\n    },\n    {\n        // pass 4 - 4px\n        x: [\n            2,\n            6\n        ],\n        y: [\n            0,\n            4\n        ]\n    },\n    {\n        // pass 5 - 8px\n        x: [\n            0,\n            2,\n            4,\n            6\n        ],\n        y: [\n            2,\n            6\n        ]\n    },\n    {\n        // pass 6 - 16px\n        x: [\n            1,\n            3,\n            5,\n            7\n        ],\n        y: [\n            0,\n            2,\n            4,\n            6\n        ]\n    },\n    {\n        // pass 7 - 32px\n        x: [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7\n        ],\n        y: [\n            1,\n            3,\n            5,\n            7\n        ]\n    }\n];\nexports.getImagePasses = function(width, height) {\n    let images = [];\n    let xLeftOver = width % 8;\n    let yLeftOver = height % 8;\n    let xRepeats = (width - xLeftOver) / 8;\n    let yRepeats = (height - yLeftOver) / 8;\n    for(let i = 0; i < imagePasses.length; i++){\n        let pass = imagePasses[i];\n        let passWidth = xRepeats * pass.x.length;\n        let passHeight = yRepeats * pass.y.length;\n        for(let j = 0; j < pass.x.length; j++){\n            if (pass.x[j] < xLeftOver) {\n                passWidth++;\n            } else {\n                break;\n            }\n        }\n        for(let j = 0; j < pass.y.length; j++){\n            if (pass.y[j] < yLeftOver) {\n                passHeight++;\n            } else {\n                break;\n            }\n        }\n        if (passWidth > 0 && passHeight > 0) {\n            images.push({\n                width: passWidth,\n                height: passHeight,\n                index: i\n            });\n        }\n    }\n    return images;\n};\nexports.getInterlaceIterator = function(width) {\n    return function(x, y, pass) {\n        let outerXLeftOver = x % imagePasses[pass].x.length;\n        let outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];\n        let outerYLeftOver = y % imagePasses[pass].y.length;\n        let outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];\n        return outerX * 4 + outerY * width * 4;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9pbnRlcmxhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixTQUFTO0FBQ1Qsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFFcEIsSUFBSUEsY0FBYztJQUNoQjtRQUNFLGVBQWU7UUFDZkMsR0FBRztZQUFDO1NBQUU7UUFDTkMsR0FBRztZQUFDO1NBQUU7SUFDUjtJQUNBO1FBQ0UsZUFBZTtRQUNmRCxHQUFHO1lBQUM7U0FBRTtRQUNOQyxHQUFHO1lBQUM7U0FBRTtJQUNSO0lBQ0E7UUFDRSxlQUFlO1FBQ2ZELEdBQUc7WUFBQztZQUFHO1NBQUU7UUFDVEMsR0FBRztZQUFDO1NBQUU7SUFDUjtJQUNBO1FBQ0UsZUFBZTtRQUNmRCxHQUFHO1lBQUM7WUFBRztTQUFFO1FBQ1RDLEdBQUc7WUFBQztZQUFHO1NBQUU7SUFDWDtJQUNBO1FBQ0UsZUFBZTtRQUNmRCxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtRQUNmQyxHQUFHO1lBQUM7WUFBRztTQUFFO0lBQ1g7SUFDQTtRQUNFLGdCQUFnQjtRQUNoQkQsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7UUFDZkMsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7SUFDakI7SUFDQTtRQUNFLGdCQUFnQjtRQUNoQkQsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1lBQUc7WUFBRztZQUFHO1lBQUc7U0FBRTtRQUMzQkMsR0FBRztZQUFDO1lBQUc7WUFBRztZQUFHO1NBQUU7SUFDakI7Q0FDRDtBQUVEQyxzQkFBc0IsR0FBRyxTQUFVRSxLQUFLLEVBQUVDLE1BQU07SUFDOUMsSUFBSUMsU0FBUyxFQUFFO0lBQ2YsSUFBSUMsWUFBWUgsUUFBUTtJQUN4QixJQUFJSSxZQUFZSCxTQUFTO0lBQ3pCLElBQUlJLFdBQVcsQ0FBQ0wsUUFBUUcsU0FBUSxJQUFLO0lBQ3JDLElBQUlHLFdBQVcsQ0FBQ0wsU0FBU0csU0FBUSxJQUFLO0lBQ3RDLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJWixZQUFZYSxNQUFNLEVBQUVELElBQUs7UUFDM0MsSUFBSUUsT0FBT2QsV0FBVyxDQUFDWSxFQUFFO1FBQ3pCLElBQUlHLFlBQVlMLFdBQVdJLEtBQUtiLENBQUMsQ0FBQ1ksTUFBTTtRQUN4QyxJQUFJRyxhQUFhTCxXQUFXRyxLQUFLWixDQUFDLENBQUNXLE1BQU07UUFDekMsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlILEtBQUtiLENBQUMsQ0FBQ1ksTUFBTSxFQUFFSSxJQUFLO1lBQ3RDLElBQUlILEtBQUtiLENBQUMsQ0FBQ2dCLEVBQUUsR0FBR1QsV0FBVztnQkFDekJPO1lBQ0YsT0FBTztnQkFDTDtZQUNGO1FBQ0Y7UUFDQSxJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUgsS0FBS1osQ0FBQyxDQUFDVyxNQUFNLEVBQUVJLElBQUs7WUFDdEMsSUFBSUgsS0FBS1osQ0FBQyxDQUFDZSxFQUFFLEdBQUdSLFdBQVc7Z0JBQ3pCTztZQUNGLE9BQU87Z0JBQ0w7WUFDRjtRQUNGO1FBQ0EsSUFBSUQsWUFBWSxLQUFLQyxhQUFhLEdBQUc7WUFDbkNULE9BQU9XLElBQUksQ0FBQztnQkFBRWIsT0FBT1U7Z0JBQVdULFFBQVFVO2dCQUFZRyxPQUFPUDtZQUFFO1FBQy9EO0lBQ0Y7SUFDQSxPQUFPTDtBQUNUO0FBRUFKLDRCQUE0QixHQUFHLFNBQVVFLEtBQUs7SUFDNUMsT0FBTyxTQUFVSixDQUFDLEVBQUVDLENBQUMsRUFBRVksSUFBSTtRQUN6QixJQUFJTyxpQkFBaUJwQixJQUFJRCxXQUFXLENBQUNjLEtBQUssQ0FBQ2IsQ0FBQyxDQUFDWSxNQUFNO1FBQ25ELElBQUlTLFNBQ0YsQ0FBRXJCLElBQUlvQixjQUFhLElBQUtyQixXQUFXLENBQUNjLEtBQUssQ0FBQ2IsQ0FBQyxDQUFDWSxNQUFNLEdBQUksSUFDdERiLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDYixDQUFDLENBQUNvQixlQUFlO1FBQ3JDLElBQUlFLGlCQUFpQnJCLElBQUlGLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDWixDQUFDLENBQUNXLE1BQU07UUFDbkQsSUFBSVcsU0FDRixDQUFFdEIsSUFBSXFCLGNBQWEsSUFBS3ZCLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDWixDQUFDLENBQUNXLE1BQU0sR0FBSSxJQUN0RGIsV0FBVyxDQUFDYyxLQUFLLENBQUNaLENBQUMsQ0FBQ3FCLGVBQWU7UUFDckMsT0FBT0QsU0FBUyxJQUFJRSxTQUFTbkIsUUFBUTtJQUN2QztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wbmdqc0A1LjAuMC9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ludGVybGFjZS5qcz9jZmIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vLyBBZGFtIDdcbi8vICAgMCAxIDIgMyA0IDUgNiA3XG4vLyAwIHggNiA0IDYgeCA2IDQgNlxuLy8gMSA3IDcgNyA3IDcgNyA3IDdcbi8vIDIgNSA2IDUgNiA1IDYgNSA2XG4vLyAzIDcgNyA3IDcgNyA3IDcgN1xuLy8gNCAzIDYgNCA2IDMgNiA0IDZcbi8vIDUgNyA3IDcgNyA3IDcgNyA3XG4vLyA2IDUgNiA1IDYgNSA2IDUgNlxuLy8gNyA3IDcgNyA3IDcgNyA3IDdcblxubGV0IGltYWdlUGFzc2VzID0gW1xuICB7XG4gICAgLy8gcGFzcyAxIC0gMXB4XG4gICAgeDogWzBdLFxuICAgIHk6IFswXSxcbiAgfSxcbiAge1xuICAgIC8vIHBhc3MgMiAtIDFweFxuICAgIHg6IFs0XSxcbiAgICB5OiBbMF0sXG4gIH0sXG4gIHtcbiAgICAvLyBwYXNzIDMgLSAycHhcbiAgICB4OiBbMCwgNF0sXG4gICAgeTogWzRdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyA0IC0gNHB4XG4gICAgeDogWzIsIDZdLFxuICAgIHk6IFswLCA0XSxcbiAgfSxcbiAge1xuICAgIC8vIHBhc3MgNSAtIDhweFxuICAgIHg6IFswLCAyLCA0LCA2XSxcbiAgICB5OiBbMiwgNl0sXG4gIH0sXG4gIHtcbiAgICAvLyBwYXNzIDYgLSAxNnB4XG4gICAgeDogWzEsIDMsIDUsIDddLFxuICAgIHk6IFswLCAyLCA0LCA2XSxcbiAgfSxcbiAge1xuICAgIC8vIHBhc3MgNyAtIDMycHhcbiAgICB4OiBbMCwgMSwgMiwgMywgNCwgNSwgNiwgN10sXG4gICAgeTogWzEsIDMsIDUsIDddLFxuICB9LFxuXTtcblxuZXhwb3J0cy5nZXRJbWFnZVBhc3NlcyA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gIGxldCBpbWFnZXMgPSBbXTtcbiAgbGV0IHhMZWZ0T3ZlciA9IHdpZHRoICUgODtcbiAgbGV0IHlMZWZ0T3ZlciA9IGhlaWdodCAlIDg7XG4gIGxldCB4UmVwZWF0cyA9ICh3aWR0aCAtIHhMZWZ0T3ZlcikgLyA4O1xuICBsZXQgeVJlcGVhdHMgPSAoaGVpZ2h0IC0geUxlZnRPdmVyKSAvIDg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VQYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcGFzcyA9IGltYWdlUGFzc2VzW2ldO1xuICAgIGxldCBwYXNzV2lkdGggPSB4UmVwZWF0cyAqIHBhc3MueC5sZW5ndGg7XG4gICAgbGV0IHBhc3NIZWlnaHQgPSB5UmVwZWF0cyAqIHBhc3MueS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXNzLngubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChwYXNzLnhbal0gPCB4TGVmdE92ZXIpIHtcbiAgICAgICAgcGFzc1dpZHRoKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXNzLnkubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChwYXNzLnlbal0gPCB5TGVmdE92ZXIpIHtcbiAgICAgICAgcGFzc0hlaWdodCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXNzV2lkdGggPiAwICYmIHBhc3NIZWlnaHQgPiAwKSB7XG4gICAgICBpbWFnZXMucHVzaCh7IHdpZHRoOiBwYXNzV2lkdGgsIGhlaWdodDogcGFzc0hlaWdodCwgaW5kZXg6IGkgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbWFnZXM7XG59O1xuXG5leHBvcnRzLmdldEludGVybGFjZUl0ZXJhdG9yID0gZnVuY3Rpb24gKHdpZHRoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoeCwgeSwgcGFzcykge1xuICAgIGxldCBvdXRlclhMZWZ0T3ZlciA9IHggJSBpbWFnZVBhc3Nlc1twYXNzXS54Lmxlbmd0aDtcbiAgICBsZXQgb3V0ZXJYID1cbiAgICAgICgoeCAtIG91dGVyWExlZnRPdmVyKSAvIGltYWdlUGFzc2VzW3Bhc3NdLngubGVuZ3RoKSAqIDggK1xuICAgICAgaW1hZ2VQYXNzZXNbcGFzc10ueFtvdXRlclhMZWZ0T3Zlcl07XG4gICAgbGV0IG91dGVyWUxlZnRPdmVyID0geSAlIGltYWdlUGFzc2VzW3Bhc3NdLnkubGVuZ3RoO1xuICAgIGxldCBvdXRlclkgPVxuICAgICAgKCh5IC0gb3V0ZXJZTGVmdE92ZXIpIC8gaW1hZ2VQYXNzZXNbcGFzc10ueS5sZW5ndGgpICogOCArXG4gICAgICBpbWFnZVBhc3Nlc1twYXNzXS55W291dGVyWUxlZnRPdmVyXTtcbiAgICByZXR1cm4gb3V0ZXJYICogNCArIG91dGVyWSAqIHdpZHRoICogNDtcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsiaW1hZ2VQYXNzZXMiLCJ4IiwieSIsImV4cG9ydHMiLCJnZXRJbWFnZVBhc3NlcyIsIndpZHRoIiwiaGVpZ2h0IiwiaW1hZ2VzIiwieExlZnRPdmVyIiwieUxlZnRPdmVyIiwieFJlcGVhdHMiLCJ5UmVwZWF0cyIsImkiLCJsZW5ndGgiLCJwYXNzIiwicGFzc1dpZHRoIiwicGFzc0hlaWdodCIsImoiLCJwdXNoIiwiaW5kZXgiLCJnZXRJbnRlcmxhY2VJdGVyYXRvciIsIm91dGVyWExlZnRPdmVyIiwib3V0ZXJYIiwib3V0ZXJZTGVmdE92ZXIiLCJvdXRlclkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/interlace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer-async.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer-async.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/constants.js\");\nlet Packer = __webpack_require__(/*! ./packer */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer.js\");\nlet PackerAsync = module.exports = function(opt) {\n    Stream.call(this);\n    let options = opt || {};\n    this._packer = new Packer(options);\n    this._deflate = this._packer.createDeflate();\n    this.readable = true;\n};\nutil.inherits(PackerAsync, Stream);\nPackerAsync.prototype.pack = function(data, width, height, gamma) {\n    // Signature\n    this.emit(\"data\", Buffer.from(constants.PNG_SIGNATURE));\n    this.emit(\"data\", this._packer.packIHDR(width, height));\n    if (gamma) {\n        this.emit(\"data\", this._packer.packGAMA(gamma));\n    }\n    let filteredData = this._packer.filterData(data, width, height);\n    // compress it\n    this._deflate.on(\"error\", this.emit.bind(this, \"error\"));\n    this._deflate.on(\"data\", (function(compressedData) {\n        this.emit(\"data\", this._packer.packIDAT(compressedData));\n    }).bind(this));\n    this._deflate.on(\"end\", (function() {\n        this.emit(\"data\", this._packer.packIEND());\n        this.emit(\"end\");\n    }).bind(this));\n    this._deflate.end(filteredData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItYXN5bmMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUN6QixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUM3QixJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQywrRkFBYTtBQUNyQyxJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQyx5RkFBVTtBQUUvQixJQUFJSSxjQUFlQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsR0FBRztJQUMvQ04sT0FBT08sSUFBSSxDQUFDLElBQUk7SUFFaEIsSUFBSUMsVUFBVUYsT0FBTyxDQUFDO0lBRXRCLElBQUksQ0FBQ0csT0FBTyxHQUFHLElBQUlQLE9BQU9NO0lBQzFCLElBQUksQ0FBQ0UsUUFBUSxHQUFHLElBQUksQ0FBQ0QsT0FBTyxDQUFDRSxhQUFhO0lBRTFDLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0FBQ2xCO0FBQ0FkLEtBQUtlLFFBQVEsQ0FBQ1YsYUFBYUg7QUFFM0JHLFlBQVlXLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFNBQVVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLEtBQUs7SUFDL0QsWUFBWTtJQUNaLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFFBQVFDLE9BQU9DLElBQUksQ0FBQ3JCLFVBQVVzQixhQUFhO0lBQ3JELElBQUksQ0FBQ0gsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUNlLFFBQVEsQ0FBQ1AsT0FBT0M7SUFFL0MsSUFBSUMsT0FBTztRQUNULElBQUksQ0FBQ0MsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUNnQixRQUFRLENBQUNOO0lBQzFDO0lBRUEsSUFBSU8sZUFBZSxJQUFJLENBQUNqQixPQUFPLENBQUNrQixVQUFVLENBQUNYLE1BQU1DLE9BQU9DO0lBRXhELGNBQWM7SUFDZCxJQUFJLENBQUNSLFFBQVEsQ0FBQ2tCLEVBQUUsQ0FBQyxTQUFTLElBQUksQ0FBQ1IsSUFBSSxDQUFDUyxJQUFJLENBQUMsSUFBSSxFQUFFO0lBRS9DLElBQUksQ0FBQ25CLFFBQVEsQ0FBQ2tCLEVBQUUsQ0FDZCxRQUNBLFVBQVVFLGNBQWM7UUFDdEIsSUFBSSxDQUFDVixJQUFJLENBQUMsUUFBUSxJQUFJLENBQUNYLE9BQU8sQ0FBQ3NCLFFBQVEsQ0FBQ0Q7SUFDMUMsR0FBRUQsSUFBSSxDQUFDLElBQUk7SUFHYixJQUFJLENBQUNuQixRQUFRLENBQUNrQixFQUFFLENBQ2QsT0FDQTtRQUNFLElBQUksQ0FBQ1IsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUN1QixRQUFRO1FBQ3ZDLElBQUksQ0FBQ1osSUFBSSxDQUFDO0lBQ1osR0FBRVMsSUFBSSxDQUFDLElBQUk7SUFHYixJQUFJLENBQUNuQixRQUFRLENBQUN1QixHQUFHLENBQUNQO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wbmdqc0A1LjAuMC9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhY2tlci1hc3luYy5qcz84YzMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IFN0cmVhbSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5sZXQgY29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xubGV0IFBhY2tlciA9IHJlcXVpcmUoXCIuL3BhY2tlclwiKTtcblxubGV0IFBhY2tlckFzeW5jID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdCkge1xuICBTdHJlYW0uY2FsbCh0aGlzKTtcblxuICBsZXQgb3B0aW9ucyA9IG9wdCB8fCB7fTtcblxuICB0aGlzLl9wYWNrZXIgPSBuZXcgUGFja2VyKG9wdGlvbnMpO1xuICB0aGlzLl9kZWZsYXRlID0gdGhpcy5fcGFja2VyLmNyZWF0ZURlZmxhdGUoKTtcblxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcbn0pO1xudXRpbC5pbmhlcml0cyhQYWNrZXJBc3luYywgU3RyZWFtKTtcblxuUGFja2VyQXN5bmMucHJvdG90eXBlLnBhY2sgPSBmdW5jdGlvbiAoZGF0YSwgd2lkdGgsIGhlaWdodCwgZ2FtbWEpIHtcbiAgLy8gU2lnbmF0dXJlXG4gIHRoaXMuZW1pdChcImRhdGFcIiwgQnVmZmVyLmZyb20oY29uc3RhbnRzLlBOR19TSUdOQVRVUkUpKTtcbiAgdGhpcy5lbWl0KFwiZGF0YVwiLCB0aGlzLl9wYWNrZXIucGFja0lIRFIod2lkdGgsIGhlaWdodCkpO1xuXG4gIGlmIChnYW1tYSkge1xuICAgIHRoaXMuZW1pdChcImRhdGFcIiwgdGhpcy5fcGFja2VyLnBhY2tHQU1BKGdhbW1hKSk7XG4gIH1cblxuICBsZXQgZmlsdGVyZWREYXRhID0gdGhpcy5fcGFja2VyLmZpbHRlckRhdGEoZGF0YSwgd2lkdGgsIGhlaWdodCk7XG5cbiAgLy8gY29tcHJlc3MgaXRcbiAgdGhpcy5fZGVmbGF0ZS5vbihcImVycm9yXCIsIHRoaXMuZW1pdC5iaW5kKHRoaXMsIFwiZXJyb3JcIikpO1xuXG4gIHRoaXMuX2RlZmxhdGUub24oXG4gICAgXCJkYXRhXCIsXG4gICAgZnVuY3Rpb24gKGNvbXByZXNzZWREYXRhKSB7XG4gICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHRoaXMuX3BhY2tlci5wYWNrSURBVChjb21wcmVzc2VkRGF0YSkpO1xuICAgIH0uYmluZCh0aGlzKVxuICApO1xuXG4gIHRoaXMuX2RlZmxhdGUub24oXG4gICAgXCJlbmRcIixcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHRoaXMuX3BhY2tlci5wYWNrSUVORCgpKTtcbiAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcblxuICB0aGlzLl9kZWZsYXRlLmVuZChmaWx0ZXJlZERhdGEpO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIlN0cmVhbSIsImNvbnN0YW50cyIsIlBhY2tlciIsIlBhY2tlckFzeW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdCIsImNhbGwiLCJvcHRpb25zIiwiX3BhY2tlciIsIl9kZWZsYXRlIiwiY3JlYXRlRGVmbGF0ZSIsInJlYWRhYmxlIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJwYWNrIiwiZGF0YSIsIndpZHRoIiwiaGVpZ2h0IiwiZ2FtbWEiLCJlbWl0IiwiQnVmZmVyIiwiZnJvbSIsIlBOR19TSUdOQVRVUkUiLCJwYWNrSUhEUiIsInBhY2tHQU1BIiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyRGF0YSIsIm9uIiwiYmluZCIsImNvbXByZXNzZWREYXRhIiwicGFja0lEQVQiLCJwYWNrSUVORCIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer-sync.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer-sync.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet hasSyncZlib = true;\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/constants.js\");\nlet Packer = __webpack_require__(/*! ./packer */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer.js\");\nmodule.exports = function(metaData, opt) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    let options = opt || {};\n    let packer = new Packer(options);\n    let chunks = [];\n    // Signature\n    chunks.push(Buffer.from(constants.PNG_SIGNATURE));\n    // Header\n    chunks.push(packer.packIHDR(metaData.width, metaData.height));\n    if (metaData.gamma) {\n        chunks.push(packer.packGAMA(metaData.gamma));\n    }\n    let filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);\n    // compress it\n    let compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());\n    filteredData = null;\n    if (!compressedData || !compressedData.length) {\n        throw new Error(\"bad png - invalid compressed data response\");\n    }\n    chunks.push(packer.packIDAT(compressedData));\n    // End\n    chunks.push(packer.packIEND());\n    return Buffer.concat(chunks);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGNBQWM7QUFDbEIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUMsa0JBQU07QUFDekIsSUFBSSxDQUFDRCxLQUFLRSxXQUFXLEVBQUU7SUFDckJILGNBQWM7QUFDaEI7QUFDQSxJQUFJSSxZQUFZRixtQkFBT0EsQ0FBQywrRkFBYTtBQUNyQyxJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQyx5RkFBVTtBQUUvQkksT0FBT0MsT0FBTyxHQUFHLFNBQVVDLFFBQVEsRUFBRUMsR0FBRztJQUN0QyxJQUFJLENBQUNULGFBQWE7UUFDaEIsTUFBTSxJQUFJVSxNQUNSO0lBRUo7SUFFQSxJQUFJQyxVQUFVRixPQUFPLENBQUM7SUFFdEIsSUFBSUcsU0FBUyxJQUFJUCxPQUFPTTtJQUV4QixJQUFJRSxTQUFTLEVBQUU7SUFFZixZQUFZO0lBQ1pBLE9BQU9DLElBQUksQ0FBQ0MsT0FBT0MsSUFBSSxDQUFDWixVQUFVYSxhQUFhO0lBRS9DLFNBQVM7SUFDVEosT0FBT0MsSUFBSSxDQUFDRixPQUFPTSxRQUFRLENBQUNWLFNBQVNXLEtBQUssRUFBRVgsU0FBU1ksTUFBTTtJQUUzRCxJQUFJWixTQUFTYSxLQUFLLEVBQUU7UUFDbEJSLE9BQU9DLElBQUksQ0FBQ0YsT0FBT1UsUUFBUSxDQUFDZCxTQUFTYSxLQUFLO0lBQzVDO0lBRUEsSUFBSUUsZUFBZVgsT0FBT1ksVUFBVSxDQUNsQ2hCLFNBQVNpQixJQUFJLEVBQ2JqQixTQUFTVyxLQUFLLEVBQ2RYLFNBQVNZLE1BQU07SUFHakIsY0FBYztJQUNkLElBQUlNLGlCQUFpQnpCLEtBQUtFLFdBQVcsQ0FDbkNvQixjQUNBWCxPQUFPZSxpQkFBaUI7SUFFMUJKLGVBQWU7SUFFZixJQUFJLENBQUNHLGtCQUFrQixDQUFDQSxlQUFlRSxNQUFNLEVBQUU7UUFDN0MsTUFBTSxJQUFJbEIsTUFBTTtJQUNsQjtJQUNBRyxPQUFPQyxJQUFJLENBQUNGLE9BQU9pQixRQUFRLENBQUNIO0lBRTVCLE1BQU07SUFDTmIsT0FBT0MsSUFBSSxDQUFDRixPQUFPa0IsUUFBUTtJQUUzQixPQUFPZixPQUFPZ0IsTUFBTSxDQUFDbEI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3BuZ2pzQDUuMC4wL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvcGFja2VyLXN5bmMuanM/M2UyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IGhhc1N5bmNabGliID0gdHJ1ZTtcbmxldCB6bGliID0gcmVxdWlyZShcInpsaWJcIik7XG5pZiAoIXpsaWIuZGVmbGF0ZVN5bmMpIHtcbiAgaGFzU3luY1psaWIgPSBmYWxzZTtcbn1cbmxldCBjb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5sZXQgUGFja2VyID0gcmVxdWlyZShcIi4vcGFja2VyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRhRGF0YSwgb3B0KSB7XG4gIGlmICghaGFzU3luY1psaWIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlRvIHVzZSB0aGUgc3luYyBjYXBhYmlsaXR5IG9mIHRoaXMgbGlicmFyeSBpbiBvbGQgbm9kZSB2ZXJzaW9ucywgcGxlYXNlIHBpbiBwbmdqcyB0byB2Mi4zLjBcIlxuICAgICk7XG4gIH1cblxuICBsZXQgb3B0aW9ucyA9IG9wdCB8fCB7fTtcblxuICBsZXQgcGFja2VyID0gbmV3IFBhY2tlcihvcHRpb25zKTtcblxuICBsZXQgY2h1bmtzID0gW107XG5cbiAgLy8gU2lnbmF0dXJlXG4gIGNodW5rcy5wdXNoKEJ1ZmZlci5mcm9tKGNvbnN0YW50cy5QTkdfU0lHTkFUVVJFKSk7XG5cbiAgLy8gSGVhZGVyXG4gIGNodW5rcy5wdXNoKHBhY2tlci5wYWNrSUhEUihtZXRhRGF0YS53aWR0aCwgbWV0YURhdGEuaGVpZ2h0KSk7XG5cbiAgaWYgKG1ldGFEYXRhLmdhbW1hKSB7XG4gICAgY2h1bmtzLnB1c2gocGFja2VyLnBhY2tHQU1BKG1ldGFEYXRhLmdhbW1hKSk7XG4gIH1cblxuICBsZXQgZmlsdGVyZWREYXRhID0gcGFja2VyLmZpbHRlckRhdGEoXG4gICAgbWV0YURhdGEuZGF0YSxcbiAgICBtZXRhRGF0YS53aWR0aCxcbiAgICBtZXRhRGF0YS5oZWlnaHRcbiAgKTtcblxuICAvLyBjb21wcmVzcyBpdFxuICBsZXQgY29tcHJlc3NlZERhdGEgPSB6bGliLmRlZmxhdGVTeW5jKFxuICAgIGZpbHRlcmVkRGF0YSxcbiAgICBwYWNrZXIuZ2V0RGVmbGF0ZU9wdGlvbnMoKVxuICApO1xuICBmaWx0ZXJlZERhdGEgPSBudWxsO1xuXG4gIGlmICghY29tcHJlc3NlZERhdGEgfHwgIWNvbXByZXNzZWREYXRhLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJhZCBwbmcgLSBpbnZhbGlkIGNvbXByZXNzZWQgZGF0YSByZXNwb25zZVwiKTtcbiAgfVxuICBjaHVua3MucHVzaChwYWNrZXIucGFja0lEQVQoY29tcHJlc3NlZERhdGEpKTtcblxuICAvLyBFbmRcbiAgY2h1bmtzLnB1c2gocGFja2VyLnBhY2tJRU5EKCkpO1xuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KGNodW5rcyk7XG59O1xuIl0sIm5hbWVzIjpbImhhc1N5bmNabGliIiwiemxpYiIsInJlcXVpcmUiLCJkZWZsYXRlU3luYyIsImNvbnN0YW50cyIsIlBhY2tlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJtZXRhRGF0YSIsIm9wdCIsIkVycm9yIiwib3B0aW9ucyIsInBhY2tlciIsImNodW5rcyIsInB1c2giLCJCdWZmZXIiLCJmcm9tIiwiUE5HX1NJR05BVFVSRSIsInBhY2tJSERSIiwid2lkdGgiLCJoZWlnaHQiLCJnYW1tYSIsInBhY2tHQU1BIiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyRGF0YSIsImRhdGEiLCJjb21wcmVzc2VkRGF0YSIsImdldERlZmxhdGVPcHRpb25zIiwibGVuZ3RoIiwicGFja0lEQVQiLCJwYWNrSUVORCIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/constants.js\");\nlet CrcStream = __webpack_require__(/*! ./crc */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/crc.js\");\nlet bitPacker = __webpack_require__(/*! ./bitpacker */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitpacker.js\");\nlet filter = __webpack_require__(/*! ./filter-pack */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-pack.js\");\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet Packer = module.exports = function(options) {\n    this._options = options;\n    options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;\n    options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;\n    options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;\n    options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;\n    options.deflateFactory = options.deflateFactory || zlib.createDeflate;\n    options.bitDepth = options.bitDepth || 8;\n    // This is outputColorType\n    options.colorType = typeof options.colorType === \"number\" ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;\n    options.inputColorType = typeof options.inputColorType === \"number\" ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) === -1) {\n        throw new Error(\"option color type:\" + options.colorType + \" is not supported at present\");\n    }\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.inputColorType) === -1) {\n        throw new Error(\"option input color type:\" + options.inputColorType + \" is not supported at present\");\n    }\n    if (options.bitDepth !== 8 && options.bitDepth !== 16) {\n        throw new Error(\"option bit depth:\" + options.bitDepth + \" is not supported at present\");\n    }\n};\nPacker.prototype.getDeflateOptions = function() {\n    return {\n        chunkSize: this._options.deflateChunkSize,\n        level: this._options.deflateLevel,\n        strategy: this._options.deflateStrategy\n    };\n};\nPacker.prototype.createDeflate = function() {\n    return this._options.deflateFactory(this.getDeflateOptions());\n};\nPacker.prototype.filterData = function(data, width, height) {\n    // convert to correct format for filtering (e.g. right bpp and bit depth)\n    let packedData = bitPacker(data, width, height, this._options);\n    // filter pixel data\n    let bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];\n    let filteredData = filter(packedData, width, height, this._options, bpp);\n    return filteredData;\n};\nPacker.prototype._packChunk = function(type, data) {\n    let len = data ? data.length : 0;\n    let buf = Buffer.alloc(len + 12);\n    buf.writeUInt32BE(len, 0);\n    buf.writeUInt32BE(type, 4);\n    if (data) {\n        data.copy(buf, 8);\n    }\n    buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);\n    return buf;\n};\nPacker.prototype.packGAMA = function(gamma) {\n    let buf = Buffer.alloc(4);\n    buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);\n    return this._packChunk(constants.TYPE_gAMA, buf);\n};\nPacker.prototype.packIHDR = function(width, height) {\n    let buf = Buffer.alloc(13);\n    buf.writeUInt32BE(width, 0);\n    buf.writeUInt32BE(height, 4);\n    buf[8] = this._options.bitDepth; // Bit depth\n    buf[9] = this._options.colorType; // colorType\n    buf[10] = 0; // compression\n    buf[11] = 0; // filter\n    buf[12] = 0; // interlace\n    return this._packChunk(constants.TYPE_IHDR, buf);\n};\nPacker.prototype.packIDAT = function(data) {\n    return this._packChunk(constants.TYPE_IDAT, data);\n};\nPacker.prototype.packIEND = function() {\n    return this._packChunk(constants.TYPE_IEND, null);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/paeth-predictor.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/paeth-predictor.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function paethPredictor(left, above, upLeft) {\n    let paeth = left + above - upLeft;\n    let pLeft = Math.abs(paeth - left);\n    let pAbove = Math.abs(paeth - above);\n    let pUpLeft = Math.abs(paeth - upLeft);\n    if (pLeft <= pAbove && pLeft <= pUpLeft) {\n        return left;\n    }\n    if (pAbove <= pUpLeft) {\n        return above;\n    }\n    return upLeft;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWV0aC1wcmVkaWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGVBQWVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQzFELElBQUlDLFFBQVFILE9BQU9DLFFBQVFDO0lBQzNCLElBQUlFLFFBQVFDLEtBQUtDLEdBQUcsQ0FBQ0gsUUFBUUg7SUFDN0IsSUFBSU8sU0FBU0YsS0FBS0MsR0FBRyxDQUFDSCxRQUFRRjtJQUM5QixJQUFJTyxVQUFVSCxLQUFLQyxHQUFHLENBQUNILFFBQVFEO0lBRS9CLElBQUlFLFNBQVNHLFVBQVVILFNBQVNJLFNBQVM7UUFDdkMsT0FBT1I7SUFDVDtJQUNBLElBQUlPLFVBQVVDLFNBQVM7UUFDckIsT0FBT1A7SUFDVDtJQUNBLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3BuZ2pzQDUuMC4wL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvcGFldGgtcHJlZGljdG9yLmpzP2Y2MDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFldGhQcmVkaWN0b3IobGVmdCwgYWJvdmUsIHVwTGVmdCkge1xuICBsZXQgcGFldGggPSBsZWZ0ICsgYWJvdmUgLSB1cExlZnQ7XG4gIGxldCBwTGVmdCA9IE1hdGguYWJzKHBhZXRoIC0gbGVmdCk7XG4gIGxldCBwQWJvdmUgPSBNYXRoLmFicyhwYWV0aCAtIGFib3ZlKTtcbiAgbGV0IHBVcExlZnQgPSBNYXRoLmFicyhwYWV0aCAtIHVwTGVmdCk7XG5cbiAgaWYgKHBMZWZ0IDw9IHBBYm92ZSAmJiBwTGVmdCA8PSBwVXBMZWZ0KSB7XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH1cbiAgaWYgKHBBYm92ZSA8PSBwVXBMZWZ0KSB7XG4gICAgcmV0dXJuIGFib3ZlO1xuICB9XG4gIHJldHVybiB1cExlZnQ7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJwYWV0aFByZWRpY3RvciIsImxlZnQiLCJhYm92ZSIsInVwTGVmdCIsInBhZXRoIiwicExlZnQiLCJNYXRoIiwiYWJzIiwicEFib3ZlIiwicFVwTGVmdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/paeth-predictor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser-async.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser-async.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/chunkstream.js\");\nlet FilterAsync = __webpack_require__(/*! ./filter-parse-async */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse-async.js\");\nlet Parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser.js\");\nlet bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitmapper.js\");\nlet formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/format-normaliser.js\");\nlet ParserAsync = module.exports = function(options) {\n    ChunkStream.call(this);\n    this._parser = new Parser(options, {\n        read: this.read.bind(this),\n        error: this._handleError.bind(this),\n        metadata: this._handleMetaData.bind(this),\n        gamma: this.emit.bind(this, \"gamma\"),\n        palette: this._handlePalette.bind(this),\n        transColor: this._handleTransColor.bind(this),\n        finished: this._finished.bind(this),\n        inflateData: this._inflateData.bind(this),\n        simpleTransparency: this._simpleTransparency.bind(this),\n        headersFinished: this._headersFinished.bind(this)\n    });\n    this._options = options;\n    this.writable = true;\n    this._parser.start();\n};\nutil.inherits(ParserAsync, ChunkStream);\nParserAsync.prototype._handleError = function(err) {\n    this.emit(\"error\", err);\n    this.writable = false;\n    this.destroy();\n    if (this._inflate && this._inflate.destroy) {\n        this._inflate.destroy();\n    }\n    if (this._filter) {\n        this._filter.destroy();\n        // For backward compatibility with Node 7 and below.\n        // Suppress errors due to _inflate calling write() even after\n        // it's destroy()'ed.\n        this._filter.on(\"error\", function() {});\n    }\n    this.errord = true;\n};\nParserAsync.prototype._inflateData = function(data) {\n    if (!this._inflate) {\n        if (this._bitmapInfo.interlace) {\n            this._inflate = zlib.createInflate();\n            this._inflate.on(\"error\", this.emit.bind(this, \"error\"));\n            this._filter.on(\"complete\", this._complete.bind(this));\n            this._inflate.pipe(this._filter);\n        } else {\n            let rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;\n            let imageSize = rowSize * this._bitmapInfo.height;\n            let chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);\n            this._inflate = zlib.createInflate({\n                chunkSize: chunkSize\n            });\n            let leftToInflate = imageSize;\n            let emitError = this.emit.bind(this, \"error\");\n            this._inflate.on(\"error\", function(err) {\n                if (!leftToInflate) {\n                    return;\n                }\n                emitError(err);\n            });\n            this._filter.on(\"complete\", this._complete.bind(this));\n            let filterWrite = this._filter.write.bind(this._filter);\n            this._inflate.on(\"data\", function(chunk) {\n                if (!leftToInflate) {\n                    return;\n                }\n                if (chunk.length > leftToInflate) {\n                    chunk = chunk.slice(0, leftToInflate);\n                }\n                leftToInflate -= chunk.length;\n                filterWrite(chunk);\n            });\n            this._inflate.on(\"end\", this._filter.end.bind(this._filter));\n        }\n    }\n    this._inflate.write(data);\n};\nParserAsync.prototype._handleMetaData = function(metaData) {\n    this._metaData = metaData;\n    this._bitmapInfo = Object.create(metaData);\n    this._filter = new FilterAsync(this._bitmapInfo);\n};\nParserAsync.prototype._handleTransColor = function(transColor) {\n    this._bitmapInfo.transColor = transColor;\n};\nParserAsync.prototype._handlePalette = function(palette) {\n    this._bitmapInfo.palette = palette;\n};\nParserAsync.prototype._simpleTransparency = function() {\n    this._metaData.alpha = true;\n};\nParserAsync.prototype._headersFinished = function() {\n    // Up until this point, we don't know if we have a tRNS chunk (alpha)\n    // so we can't emit metadata any earlier\n    this.emit(\"metadata\", this._metaData);\n};\nParserAsync.prototype._finished = function() {\n    if (this.errord) {\n        return;\n    }\n    if (!this._inflate) {\n        this.emit(\"error\", \"No Inflate block\");\n    } else {\n        // no more data to inflate\n        this._inflate.end();\n    }\n};\nParserAsync.prototype._complete = function(filteredData) {\n    if (this.errord) {\n        return;\n    }\n    let normalisedBitmapData;\n    try {\n        let bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n        normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n        bitmapData = null;\n    } catch (ex) {\n        this._handleError(ex);\n        return;\n    }\n    this.emit(\"parsed\", normalisedBitmapData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser-sync.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser-sync.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet hasSyncZlib = true;\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet inflateSync = __webpack_require__(/*! ./sync-inflate */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-inflate.js\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nlet SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-reader.js\");\nlet FilterSync = __webpack_require__(/*! ./filter-parse-sync */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/filter-parse-sync.js\");\nlet Parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser.js\");\nlet bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/bitmapper.js\");\nlet formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/format-normaliser.js\");\nmodule.exports = function(buffer, options) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    let err;\n    function handleError(_err_) {\n        err = _err_;\n    }\n    let metaData;\n    function handleMetaData(_metaData_) {\n        metaData = _metaData_;\n    }\n    function handleTransColor(transColor) {\n        metaData.transColor = transColor;\n    }\n    function handlePalette(palette) {\n        metaData.palette = palette;\n    }\n    function handleSimpleTransparency() {\n        metaData.alpha = true;\n    }\n    let gamma;\n    function handleGamma(_gamma_) {\n        gamma = _gamma_;\n    }\n    let inflateDataList = [];\n    function handleInflateData(inflatedData) {\n        inflateDataList.push(inflatedData);\n    }\n    let reader = new SyncReader(buffer);\n    let parser = new Parser(options, {\n        read: reader.read.bind(reader),\n        error: handleError,\n        metadata: handleMetaData,\n        gamma: handleGamma,\n        palette: handlePalette,\n        transColor: handleTransColor,\n        inflateData: handleInflateData,\n        simpleTransparency: handleSimpleTransparency\n    });\n    parser.start();\n    reader.process();\n    if (err) {\n        throw err;\n    }\n    //join together the inflate datas\n    let inflateData = Buffer.concat(inflateDataList);\n    inflateDataList.length = 0;\n    let inflatedData;\n    if (metaData.interlace) {\n        inflatedData = zlib.inflateSync(inflateData);\n    } else {\n        let rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;\n        let imageSize = rowSize * metaData.height;\n        inflatedData = inflateSync(inflateData, {\n            chunkSize: imageSize,\n            maxLength: imageSize\n        });\n    }\n    inflateData = null;\n    if (!inflatedData || !inflatedData.length) {\n        throw new Error(\"bad png - invalid inflate data response\");\n    }\n    let unfilteredData = FilterSync.process(inflatedData, metaData);\n    inflateData = null;\n    let bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n    unfilteredData = null;\n    let normalisedBitmapData = formatNormaliser(bitmapData, metaData);\n    metaData.data = normalisedBitmapData;\n    metaData.gamma = gamma || 0;\n    return metaData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYXJzZXItc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGNBQWM7QUFDbEIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUMsa0JBQU07QUFDekIsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMscUdBQWdCO0FBQzFDLElBQUksQ0FBQ0QsS0FBS0csV0FBVyxFQUFFO0lBQ3JCSixjQUFjO0FBQ2hCO0FBQ0EsSUFBSUssYUFBYUgsbUJBQU9BLENBQUMsbUdBQWU7QUFDeEMsSUFBSUksYUFBYUosbUJBQU9BLENBQUMsK0dBQXFCO0FBQzlDLElBQUlLLFNBQVNMLG1CQUFPQSxDQUFDLHlGQUFVO0FBQy9CLElBQUlNLFlBQVlOLG1CQUFPQSxDQUFDLCtGQUFhO0FBQ3JDLElBQUlPLG1CQUFtQlAsbUJBQU9BLENBQUMsK0dBQXFCO0FBRXBEUSxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3hDLElBQUksQ0FBQ2IsYUFBYTtRQUNoQixNQUFNLElBQUljLE1BQ1I7SUFFSjtJQUVBLElBQUlDO0lBQ0osU0FBU0MsWUFBWUMsS0FBSztRQUN4QkYsTUFBTUU7SUFDUjtJQUVBLElBQUlDO0lBQ0osU0FBU0MsZUFBZUMsVUFBVTtRQUNoQ0YsV0FBV0U7SUFDYjtJQUVBLFNBQVNDLGlCQUFpQkMsVUFBVTtRQUNsQ0osU0FBU0ksVUFBVSxHQUFHQTtJQUN4QjtJQUVBLFNBQVNDLGNBQWNDLE9BQU87UUFDNUJOLFNBQVNNLE9BQU8sR0FBR0E7SUFDckI7SUFFQSxTQUFTQztRQUNQUCxTQUFTUSxLQUFLLEdBQUc7SUFDbkI7SUFFQSxJQUFJQztJQUNKLFNBQVNDLFlBQVlDLE9BQU87UUFDMUJGLFFBQVFFO0lBQ1Y7SUFFQSxJQUFJQyxrQkFBa0IsRUFBRTtJQUN4QixTQUFTQyxrQkFBa0JDLFlBQVk7UUFDckNGLGdCQUFnQkcsSUFBSSxDQUFDRDtJQUN2QjtJQUVBLElBQUlFLFNBQVMsSUFBSTdCLFdBQVdPO0lBRTVCLElBQUl1QixTQUFTLElBQUk1QixPQUFPTSxTQUFTO1FBQy9CdUIsTUFBTUYsT0FBT0UsSUFBSSxDQUFDQyxJQUFJLENBQUNIO1FBQ3ZCSSxPQUFPdEI7UUFDUHVCLFVBQVVwQjtRQUNWUSxPQUFPQztRQUNQSixTQUFTRDtRQUNURCxZQUFZRDtRQUNabUIsYUFBYVQ7UUFDYlUsb0JBQW9CaEI7SUFDdEI7SUFFQVUsT0FBT08sS0FBSztJQUNaUixPQUFPUyxPQUFPO0lBRWQsSUFBSTVCLEtBQUs7UUFDUCxNQUFNQTtJQUNSO0lBRUEsaUNBQWlDO0lBQ2pDLElBQUl5QixjQUFjSSxPQUFPQyxNQUFNLENBQUNmO0lBQ2hDQSxnQkFBZ0JnQixNQUFNLEdBQUc7SUFFekIsSUFBSWQ7SUFDSixJQUFJZCxTQUFTNkIsU0FBUyxFQUFFO1FBQ3RCZixlQUFlL0IsS0FBS0UsV0FBVyxDQUFDcUM7SUFDbEMsT0FBTztRQUNMLElBQUlRLFVBQ0YsQ0FBQyxTQUFVQyxLQUFLLEdBQUcvQixTQUFTZ0MsR0FBRyxHQUFHaEMsU0FBU2lDLEtBQUssR0FBRyxLQUFNLEtBQUs7UUFDaEUsSUFBSUMsWUFBWUosVUFBVTlCLFNBQVNtQyxNQUFNO1FBQ3pDckIsZUFBZTdCLFlBQVlxQyxhQUFhO1lBQ3RDYyxXQUFXRjtZQUNYRyxXQUFXSDtRQUNiO0lBQ0Y7SUFDQVosY0FBYztJQUVkLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUNBLGFBQWFjLE1BQU0sRUFBRTtRQUN6QyxNQUFNLElBQUloQyxNQUFNO0lBQ2xCO0lBRUEsSUFBSTBDLGlCQUFpQmxELFdBQVdxQyxPQUFPLENBQUNYLGNBQWNkO0lBQ3REc0IsY0FBYztJQUVkLElBQUlpQixhQUFhakQsVUFBVWtELFlBQVksQ0FBQ0YsZ0JBQWdCdEM7SUFDeERzQyxpQkFBaUI7SUFFakIsSUFBSUcsdUJBQXVCbEQsaUJBQWlCZ0QsWUFBWXZDO0lBRXhEQSxTQUFTMEMsSUFBSSxHQUFHRDtJQUNoQnpDLFNBQVNTLEtBQUssR0FBR0EsU0FBUztJQUUxQixPQUFPVDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wbmdqc0A1LjAuMC9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhcnNlci1zeW5jLmpzP2Q4ODgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBoYXNTeW5jWmxpYiA9IHRydWU7XG5sZXQgemxpYiA9IHJlcXVpcmUoXCJ6bGliXCIpO1xubGV0IGluZmxhdGVTeW5jID0gcmVxdWlyZShcIi4vc3luYy1pbmZsYXRlXCIpO1xuaWYgKCF6bGliLmRlZmxhdGVTeW5jKSB7XG4gIGhhc1N5bmNabGliID0gZmFsc2U7XG59XG5sZXQgU3luY1JlYWRlciA9IHJlcXVpcmUoXCIuL3N5bmMtcmVhZGVyXCIpO1xubGV0IEZpbHRlclN5bmMgPSByZXF1aXJlKFwiLi9maWx0ZXItcGFyc2Utc3luY1wiKTtcbmxldCBQYXJzZXIgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5sZXQgYml0bWFwcGVyID0gcmVxdWlyZShcIi4vYml0bWFwcGVyXCIpO1xubGV0IGZvcm1hdE5vcm1hbGlzZXIgPSByZXF1aXJlKFwiLi9mb3JtYXQtbm9ybWFsaXNlclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRpb25zKSB7XG4gIGlmICghaGFzU3luY1psaWIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlRvIHVzZSB0aGUgc3luYyBjYXBhYmlsaXR5IG9mIHRoaXMgbGlicmFyeSBpbiBvbGQgbm9kZSB2ZXJzaW9ucywgcGxlYXNlIHBpbiBwbmdqcyB0byB2Mi4zLjBcIlxuICAgICk7XG4gIH1cblxuICBsZXQgZXJyO1xuICBmdW5jdGlvbiBoYW5kbGVFcnJvcihfZXJyXykge1xuICAgIGVyciA9IF9lcnJfO1xuICB9XG5cbiAgbGV0IG1ldGFEYXRhO1xuICBmdW5jdGlvbiBoYW5kbGVNZXRhRGF0YShfbWV0YURhdGFfKSB7XG4gICAgbWV0YURhdGEgPSBfbWV0YURhdGFfO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVHJhbnNDb2xvcih0cmFuc0NvbG9yKSB7XG4gICAgbWV0YURhdGEudHJhbnNDb2xvciA9IHRyYW5zQ29sb3I7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgICBtZXRhRGF0YS5wYWxldHRlID0gcGFsZXR0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVNpbXBsZVRyYW5zcGFyZW5jeSgpIHtcbiAgICBtZXRhRGF0YS5hbHBoYSA9IHRydWU7XG4gIH1cblxuICBsZXQgZ2FtbWE7XG4gIGZ1bmN0aW9uIGhhbmRsZUdhbW1hKF9nYW1tYV8pIHtcbiAgICBnYW1tYSA9IF9nYW1tYV87XG4gIH1cblxuICBsZXQgaW5mbGF0ZURhdGFMaXN0ID0gW107XG4gIGZ1bmN0aW9uIGhhbmRsZUluZmxhdGVEYXRhKGluZmxhdGVkRGF0YSkge1xuICAgIGluZmxhdGVEYXRhTGlzdC5wdXNoKGluZmxhdGVkRGF0YSk7XG4gIH1cblxuICBsZXQgcmVhZGVyID0gbmV3IFN5bmNSZWFkZXIoYnVmZmVyKTtcblxuICBsZXQgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zLCB7XG4gICAgcmVhZDogcmVhZGVyLnJlYWQuYmluZChyZWFkZXIpLFxuICAgIGVycm9yOiBoYW5kbGVFcnJvcixcbiAgICBtZXRhZGF0YTogaGFuZGxlTWV0YURhdGEsXG4gICAgZ2FtbWE6IGhhbmRsZUdhbW1hLFxuICAgIHBhbGV0dGU6IGhhbmRsZVBhbGV0dGUsXG4gICAgdHJhbnNDb2xvcjogaGFuZGxlVHJhbnNDb2xvcixcbiAgICBpbmZsYXRlRGF0YTogaGFuZGxlSW5mbGF0ZURhdGEsXG4gICAgc2ltcGxlVHJhbnNwYXJlbmN5OiBoYW5kbGVTaW1wbGVUcmFuc3BhcmVuY3ksXG4gIH0pO1xuXG4gIHBhcnNlci5zdGFydCgpO1xuICByZWFkZXIucHJvY2VzcygpO1xuXG4gIGlmIChlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICAvL2pvaW4gdG9nZXRoZXIgdGhlIGluZmxhdGUgZGF0YXNcbiAgbGV0IGluZmxhdGVEYXRhID0gQnVmZmVyLmNvbmNhdChpbmZsYXRlRGF0YUxpc3QpO1xuICBpbmZsYXRlRGF0YUxpc3QubGVuZ3RoID0gMDtcblxuICBsZXQgaW5mbGF0ZWREYXRhO1xuICBpZiAobWV0YURhdGEuaW50ZXJsYWNlKSB7XG4gICAgaW5mbGF0ZWREYXRhID0gemxpYi5pbmZsYXRlU3luYyhpbmZsYXRlRGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJvd1NpemUgPVxuICAgICAgKChtZXRhRGF0YS53aWR0aCAqIG1ldGFEYXRhLmJwcCAqIG1ldGFEYXRhLmRlcHRoICsgNykgPj4gMykgKyAxO1xuICAgIGxldCBpbWFnZVNpemUgPSByb3dTaXplICogbWV0YURhdGEuaGVpZ2h0O1xuICAgIGluZmxhdGVkRGF0YSA9IGluZmxhdGVTeW5jKGluZmxhdGVEYXRhLCB7XG4gICAgICBjaHVua1NpemU6IGltYWdlU2l6ZSxcbiAgICAgIG1heExlbmd0aDogaW1hZ2VTaXplLFxuICAgIH0pO1xuICB9XG4gIGluZmxhdGVEYXRhID0gbnVsbDtcblxuICBpZiAoIWluZmxhdGVkRGF0YSB8fCAhaW5mbGF0ZWREYXRhLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJhZCBwbmcgLSBpbnZhbGlkIGluZmxhdGUgZGF0YSByZXNwb25zZVwiKTtcbiAgfVxuXG4gIGxldCB1bmZpbHRlcmVkRGF0YSA9IEZpbHRlclN5bmMucHJvY2VzcyhpbmZsYXRlZERhdGEsIG1ldGFEYXRhKTtcbiAgaW5mbGF0ZURhdGEgPSBudWxsO1xuXG4gIGxldCBiaXRtYXBEYXRhID0gYml0bWFwcGVyLmRhdGFUb0JpdE1hcCh1bmZpbHRlcmVkRGF0YSwgbWV0YURhdGEpO1xuICB1bmZpbHRlcmVkRGF0YSA9IG51bGw7XG5cbiAgbGV0IG5vcm1hbGlzZWRCaXRtYXBEYXRhID0gZm9ybWF0Tm9ybWFsaXNlcihiaXRtYXBEYXRhLCBtZXRhRGF0YSk7XG5cbiAgbWV0YURhdGEuZGF0YSA9IG5vcm1hbGlzZWRCaXRtYXBEYXRhO1xuICBtZXRhRGF0YS5nYW1tYSA9IGdhbW1hIHx8IDA7XG5cbiAgcmV0dXJuIG1ldGFEYXRhO1xufTtcbiJdLCJuYW1lcyI6WyJoYXNTeW5jWmxpYiIsInpsaWIiLCJyZXF1aXJlIiwiaW5mbGF0ZVN5bmMiLCJkZWZsYXRlU3luYyIsIlN5bmNSZWFkZXIiLCJGaWx0ZXJTeW5jIiwiUGFyc2VyIiwiYml0bWFwcGVyIiwiZm9ybWF0Tm9ybWFsaXNlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJidWZmZXIiLCJvcHRpb25zIiwiRXJyb3IiLCJlcnIiLCJoYW5kbGVFcnJvciIsIl9lcnJfIiwibWV0YURhdGEiLCJoYW5kbGVNZXRhRGF0YSIsIl9tZXRhRGF0YV8iLCJoYW5kbGVUcmFuc0NvbG9yIiwidHJhbnNDb2xvciIsImhhbmRsZVBhbGV0dGUiLCJwYWxldHRlIiwiaGFuZGxlU2ltcGxlVHJhbnNwYXJlbmN5IiwiYWxwaGEiLCJnYW1tYSIsImhhbmRsZUdhbW1hIiwiX2dhbW1hXyIsImluZmxhdGVEYXRhTGlzdCIsImhhbmRsZUluZmxhdGVEYXRhIiwiaW5mbGF0ZWREYXRhIiwicHVzaCIsInJlYWRlciIsInBhcnNlciIsInJlYWQiLCJiaW5kIiwiZXJyb3IiLCJtZXRhZGF0YSIsImluZmxhdGVEYXRhIiwic2ltcGxlVHJhbnNwYXJlbmN5Iiwic3RhcnQiLCJwcm9jZXNzIiwiQnVmZmVyIiwiY29uY2F0IiwibGVuZ3RoIiwiaW50ZXJsYWNlIiwicm93U2l6ZSIsIndpZHRoIiwiYnBwIiwiZGVwdGgiLCJpbWFnZVNpemUiLCJoZWlnaHQiLCJjaHVua1NpemUiLCJtYXhMZW5ndGgiLCJ1bmZpbHRlcmVkRGF0YSIsImJpdG1hcERhdGEiLCJkYXRhVG9CaXRNYXAiLCJub3JtYWxpc2VkQml0bWFwRGF0YSIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/constants.js\");\nlet CrcCalculator = __webpack_require__(/*! ./crc */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/crc.js\");\nlet Parser = module.exports = function(options, dependencies) {\n    this._options = options;\n    options.checkCRC = options.checkCRC !== false;\n    this._hasIHDR = false;\n    this._hasIEND = false;\n    this._emittedHeadersFinished = false;\n    // input flags/metadata\n    this._palette = [];\n    this._colorType = 0;\n    this._chunks = {};\n    this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);\n    this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);\n    this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);\n    this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);\n    this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);\n    this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);\n    this.read = dependencies.read;\n    this.error = dependencies.error;\n    this.metadata = dependencies.metadata;\n    this.gamma = dependencies.gamma;\n    this.transColor = dependencies.transColor;\n    this.palette = dependencies.palette;\n    this.parsed = dependencies.parsed;\n    this.inflateData = dependencies.inflateData;\n    this.finished = dependencies.finished;\n    this.simpleTransparency = dependencies.simpleTransparency;\n    this.headersFinished = dependencies.headersFinished || function() {};\n};\nParser.prototype.start = function() {\n    this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));\n};\nParser.prototype._parseSignature = function(data) {\n    let signature = constants.PNG_SIGNATURE;\n    for(let i = 0; i < signature.length; i++){\n        if (data[i] !== signature[i]) {\n            this.error(new Error(\"Invalid file signature\"));\n            return;\n        }\n    }\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._parseChunkBegin = function(data) {\n    // chunk content length\n    let length = data.readUInt32BE(0);\n    // chunk type\n    let type = data.readUInt32BE(4);\n    let name = \"\";\n    for(let i = 4; i < 8; i++){\n        name += String.fromCharCode(data[i]);\n    }\n    //console.log('chunk ', name, length);\n    // chunk flags\n    let ancillary = Boolean(data[4] & 0x20); // or critical\n    //    priv = Boolean(data[5] & 0x20), // or public\n    //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe\n    if (!this._hasIHDR && type !== constants.TYPE_IHDR) {\n        this.error(new Error(\"Expected IHDR on beggining\"));\n        return;\n    }\n    this._crc = new CrcCalculator();\n    this._crc.write(Buffer.from(name));\n    if (this._chunks[type]) {\n        return this._chunks[type](length);\n    }\n    if (!ancillary) {\n        this.error(new Error(\"Unsupported critical chunk type \" + name));\n        return;\n    }\n    this.read(length + 4, this._skipChunk.bind(this));\n};\nParser.prototype._skipChunk = function() {\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._handleChunkEnd = function() {\n    this.read(4, this._parseChunkEnd.bind(this));\n};\nParser.prototype._parseChunkEnd = function(data) {\n    let fileCrc = data.readInt32BE(0);\n    let calcCrc = this._crc.crc32();\n    // check CRC\n    if (this._options.checkCRC && calcCrc !== fileCrc) {\n        this.error(new Error(\"Crc error - \" + fileCrc + \" - \" + calcCrc));\n        return;\n    }\n    if (!this._hasIEND) {\n        this.read(8, this._parseChunkBegin.bind(this));\n    }\n};\nParser.prototype._handleIHDR = function(length) {\n    this.read(length, this._parseIHDR.bind(this));\n};\nParser.prototype._parseIHDR = function(data) {\n    this._crc.write(data);\n    let width = data.readUInt32BE(0);\n    let height = data.readUInt32BE(4);\n    let depth = data[8];\n    let colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha\n    let compr = data[10];\n    let filter = data[11];\n    let interlace = data[12];\n    // console.log('    width', width, 'height', height,\n    //     'depth', depth, 'colorType', colorType,\n    //     'compr', compr, 'filter', filter, 'interlace', interlace\n    // );\n    if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {\n        this.error(new Error(\"Unsupported bit depth \" + depth));\n        return;\n    }\n    if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {\n        this.error(new Error(\"Unsupported color type\"));\n        return;\n    }\n    if (compr !== 0) {\n        this.error(new Error(\"Unsupported compression method\"));\n        return;\n    }\n    if (filter !== 0) {\n        this.error(new Error(\"Unsupported filter method\"));\n        return;\n    }\n    if (interlace !== 0 && interlace !== 1) {\n        this.error(new Error(\"Unsupported interlace method\"));\n        return;\n    }\n    this._colorType = colorType;\n    let bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];\n    this._hasIHDR = true;\n    this.metadata({\n        width: width,\n        height: height,\n        depth: depth,\n        interlace: Boolean(interlace),\n        palette: Boolean(colorType & constants.COLORTYPE_PALETTE),\n        color: Boolean(colorType & constants.COLORTYPE_COLOR),\n        alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),\n        bpp: bpp,\n        colorType: colorType\n    });\n    this._handleChunkEnd();\n};\nParser.prototype._handlePLTE = function(length) {\n    this.read(length, this._parsePLTE.bind(this));\n};\nParser.prototype._parsePLTE = function(data) {\n    this._crc.write(data);\n    let entries = Math.floor(data.length / 3);\n    // console.log('Palette:', entries);\n    for(let i = 0; i < entries; i++){\n        this._palette.push([\n            data[i * 3],\n            data[i * 3 + 1],\n            data[i * 3 + 2],\n            0xff\n        ]);\n    }\n    this.palette(this._palette);\n    this._handleChunkEnd();\n};\nParser.prototype._handleTRNS = function(length) {\n    this.simpleTransparency();\n    this.read(length, this._parseTRNS.bind(this));\n};\nParser.prototype._parseTRNS = function(data) {\n    this._crc.write(data);\n    // palette\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {\n        if (this._palette.length === 0) {\n            this.error(new Error(\"Transparency chunk must be after palette\"));\n            return;\n        }\n        if (data.length > this._palette.length) {\n            this.error(new Error(\"More transparent colors than palette size\"));\n            return;\n        }\n        for(let i = 0; i < data.length; i++){\n            this._palette[i][3] = data[i];\n        }\n        this.palette(this._palette);\n    }\n    // for colorType 0 (grayscale) and 2 (rgb)\n    // there might be one gray/color defined as transparent\n    if (this._colorType === constants.COLORTYPE_GRAYSCALE) {\n        // grey, 2 bytes\n        this.transColor([\n            data.readUInt16BE(0)\n        ]);\n    }\n    if (this._colorType === constants.COLORTYPE_COLOR) {\n        this.transColor([\n            data.readUInt16BE(0),\n            data.readUInt16BE(2),\n            data.readUInt16BE(4)\n        ]);\n    }\n    this._handleChunkEnd();\n};\nParser.prototype._handleGAMA = function(length) {\n    this.read(length, this._parseGAMA.bind(this));\n};\nParser.prototype._parseGAMA = function(data) {\n    this._crc.write(data);\n    this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);\n    this._handleChunkEnd();\n};\nParser.prototype._handleIDAT = function(length) {\n    if (!this._emittedHeadersFinished) {\n        this._emittedHeadersFinished = true;\n        this.headersFinished();\n    }\n    this.read(-length, this._parseIDAT.bind(this, length));\n};\nParser.prototype._parseIDAT = function(length, data) {\n    this._crc.write(data);\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {\n        throw new Error(\"Expected palette not found\");\n    }\n    this.inflateData(data);\n    let leftOverLength = length - data.length;\n    if (leftOverLength > 0) {\n        this._handleIDAT(leftOverLength);\n    } else {\n        this._handleChunkEnd();\n    }\n};\nParser.prototype._handleIEND = function(length) {\n    this.read(length, this._parseIEND.bind(this));\n};\nParser.prototype._parseIEND = function(data) {\n    this._crc.write(data);\n    this._hasIEND = true;\n    this._handleChunkEnd();\n    if (this.finished) {\n        this.finished();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png-sync.js":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png-sync.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet parse = __webpack_require__(/*! ./parser-sync */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser-sync.js\");\nlet pack = __webpack_require__(/*! ./packer-sync */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer-sync.js\");\nexports.read = function(buffer, options) {\n    return parse(buffer, options || {});\n};\nexports.write = function(png, options) {\n    return pack(png, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wbmctc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDLG1HQUFlO0FBQ25DLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDLG1HQUFlO0FBRWxDRSxZQUFZLEdBQUcsU0FBVUUsTUFBTSxFQUFFQyxPQUFPO0lBQ3RDLE9BQU9OLE1BQU1LLFFBQVFDLFdBQVcsQ0FBQztBQUNuQztBQUVBSCxhQUFhLEdBQUcsU0FBVUssR0FBRyxFQUFFRixPQUFPO0lBQ3BDLE9BQU9KLEtBQUtNLEtBQUtGO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wbmdqc0A1LjAuMC9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BuZy1zeW5jLmpzP2NkMzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBwYXJzZSA9IHJlcXVpcmUoXCIuL3BhcnNlci1zeW5jXCIpO1xubGV0IHBhY2sgPSByZXF1aXJlKFwiLi9wYWNrZXItc3luY1wiKTtcblxuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0aW9ucykge1xuICByZXR1cm4gcGFyc2UoYnVmZmVyLCBvcHRpb25zIHx8IHt9KTtcbn07XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAocG5nLCBvcHRpb25zKSB7XG4gIHJldHVybiBwYWNrKHBuZywgb3B0aW9ucyk7XG59O1xuIl0sIm5hbWVzIjpbInBhcnNlIiwicmVxdWlyZSIsInBhY2siLCJleHBvcnRzIiwicmVhZCIsImJ1ZmZlciIsIm9wdGlvbnMiLCJ3cml0ZSIsInBuZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet Parser = __webpack_require__(/*! ./parser-async */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/parser-async.js\");\nlet Packer = __webpack_require__(/*! ./packer-async */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/packer-async.js\");\nlet PNGSync = __webpack_require__(/*! ./png-sync */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png-sync.js\");\nlet PNG = exports.PNG = function(options) {\n    Stream.call(this);\n    options = options || {}; // eslint-disable-line no-param-reassign\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    this.width = options.width | 0;\n    this.height = options.height | 0;\n    this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null;\n    if (options.fill && this.data) {\n        this.data.fill(0);\n    }\n    this.gamma = 0;\n    this.readable = this.writable = true;\n    this._parser = new Parser(options);\n    this._parser.on(\"error\", this.emit.bind(this, \"error\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._parser.on(\"metadata\", this._metadata.bind(this));\n    this._parser.on(\"gamma\", this._gamma.bind(this));\n    this._parser.on(\"parsed\", (function(data) {\n        this.data = data;\n        this.emit(\"parsed\", data);\n    }).bind(this));\n    this._packer = new Packer(options);\n    this._packer.on(\"data\", this.emit.bind(this, \"data\"));\n    this._packer.on(\"end\", this.emit.bind(this, \"end\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._packer.on(\"error\", this.emit.bind(this, \"error\"));\n};\nutil.inherits(PNG, Stream);\nPNG.sync = PNGSync;\nPNG.prototype.pack = function() {\n    if (!this.data || !this.data.length) {\n        this.emit(\"error\", \"No data provided\");\n        return this;\n    }\n    process.nextTick((function() {\n        this._packer.pack(this.data, this.width, this.height, this.gamma);\n    }).bind(this));\n    return this;\n};\nPNG.prototype.parse = function(data, callback) {\n    if (callback) {\n        let onParsed, onError;\n        onParsed = (function(parsedData) {\n            this.removeListener(\"error\", onError);\n            this.data = parsedData;\n            callback(null, this);\n        }).bind(this);\n        onError = (function(err) {\n            this.removeListener(\"parsed\", onParsed);\n            callback(err, null);\n        }).bind(this);\n        this.once(\"parsed\", onParsed);\n        this.once(\"error\", onError);\n    }\n    this.end(data);\n    return this;\n};\nPNG.prototype.write = function(data) {\n    this._parser.write(data);\n    return true;\n};\nPNG.prototype.end = function(data) {\n    this._parser.end(data);\n};\nPNG.prototype._metadata = function(metadata) {\n    this.width = metadata.width;\n    this.height = metadata.height;\n    this.emit(\"metadata\", metadata);\n};\nPNG.prototype._gamma = function(gamma) {\n    this.gamma = gamma;\n};\nPNG.prototype._handleClose = function() {\n    if (!this._parser.writable && !this._packer.readable) {\n        this.emit(\"close\");\n    }\n};\nPNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) {\n    // eslint-disable-line max-params\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    /* eslint-disable no-param-reassign */ srcX |= 0;\n    srcY |= 0;\n    width |= 0;\n    height |= 0;\n    deltaX |= 0;\n    deltaY |= 0;\n    /* eslint-enable no-param-reassign */ if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {\n        throw new Error(\"bitblt reading outside image\");\n    }\n    if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {\n        throw new Error(\"bitblt writing outside image\");\n    }\n    for(let y = 0; y < height; y++){\n        src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);\n    }\n};\nPNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) {\n    // eslint-disable-line max-params\n    PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);\n    return this;\n};\nPNG.adjustGamma = function(src) {\n    if (src.gamma) {\n        for(let y = 0; y < src.height; y++){\n            for(let x = 0; x < src.width; x++){\n                let idx = src.width * y + x << 2;\n                for(let i = 0; i < 3; i++){\n                    let sample = src.data[idx + i] / 255;\n                    sample = Math.pow(sample, 1 / 2.2 / src.gamma);\n                    src.data[idx + i] = Math.round(sample * 255);\n                }\n            }\n        }\n        src.gamma = 0;\n    }\n};\nPNG.prototype.adjustGamma = function() {\n    PNG.adjustGamma(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-inflate.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-inflate.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nlet assert = (__webpack_require__(/*! assert */ \"assert\").ok);\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet util = __webpack_require__(/*! util */ \"util\");\nlet kMaxLength = (__webpack_require__(/*! buffer */ \"buffer\").kMaxLength);\nfunction Inflate(opts) {\n    if (!(this instanceof Inflate)) {\n        return new Inflate(opts);\n    }\n    if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {\n        opts.chunkSize = zlib.Z_MIN_CHUNK;\n    }\n    zlib.Inflate.call(this, opts);\n    // Node 8 --> 9 compatibility check\n    this._offset = this._offset === undefined ? this._outOffset : this._offset;\n    this._buffer = this._buffer || this._outBuffer;\n    if (opts && opts.maxLength != null) {\n        this._maxLength = opts.maxLength;\n    }\n}\nfunction createInflate(opts) {\n    return new Inflate(opts);\n}\nfunction _close(engine, callback) {\n    if (callback) {\n        process.nextTick(callback);\n    }\n    // Caller may invoke .close after a zlib error (which will null _handle).\n    if (!engine._handle) {\n        return;\n    }\n    engine._handle.close();\n    engine._handle = null;\n}\nInflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {\n    if (typeof asyncCb === \"function\") {\n        return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);\n    }\n    let self = this;\n    let availInBefore = chunk && chunk.length;\n    let availOutBefore = this._chunkSize - this._offset;\n    let leftToInflate = this._maxLength;\n    let inOff = 0;\n    let buffers = [];\n    let nread = 0;\n    let error;\n    this.on(\"error\", function(err) {\n        error = err;\n    });\n    function handleChunk(availInAfter, availOutAfter) {\n        if (self._hadError) {\n            return;\n        }\n        let have = availOutBefore - availOutAfter;\n        assert(have >= 0, \"have should not go down\");\n        if (have > 0) {\n            let out = self._buffer.slice(self._offset, self._offset + have);\n            self._offset += have;\n            if (out.length > leftToInflate) {\n                out = out.slice(0, leftToInflate);\n            }\n            buffers.push(out);\n            nread += out.length;\n            leftToInflate -= out.length;\n            if (leftToInflate === 0) {\n                return false;\n            }\n        }\n        if (availOutAfter === 0 || self._offset >= self._chunkSize) {\n            availOutBefore = self._chunkSize;\n            self._offset = 0;\n            self._buffer = Buffer.allocUnsafe(self._chunkSize);\n        }\n        if (availOutAfter === 0) {\n            inOff += availInBefore - availInAfter;\n            availInBefore = availInAfter;\n            return true;\n        }\n        return false;\n    }\n    assert(this._handle, \"zlib binding closed\");\n    let res;\n    do {\n        res = this._handle.writeSync(flushFlag, chunk, inOff, availInBefore, this._buffer, this._offset, availOutBefore); // out_len\n        // Node 8 --> 9 compatibility check\n        res = res || this._writeState;\n    }while (!this._hadError && handleChunk(res[0], res[1]));\n    if (this._hadError) {\n        throw error;\n    }\n    if (nread >= kMaxLength) {\n        _close(this);\n        throw new RangeError(\"Cannot create final Buffer. It would be larger than 0x\" + kMaxLength.toString(16) + \" bytes\");\n    }\n    let buf = Buffer.concat(buffers, nread);\n    _close(this);\n    return buf;\n};\nutil.inherits(Inflate, zlib.Inflate);\nfunction zlibBufferSync(engine, buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer);\n    }\n    if (!(buffer instanceof Buffer)) {\n        throw new TypeError(\"Not a string or buffer\");\n    }\n    let flushFlag = engine._finishFlushFlag;\n    if (flushFlag == null) {\n        flushFlag = zlib.Z_FINISH;\n    }\n    return engine._processChunk(buffer, flushFlag);\n}\nfunction inflateSync(buffer, opts) {\n    return zlibBufferSync(new Inflate(opts), buffer);\n}\nmodule.exports = exports = inflateSync;\nexports.Inflate = Inflate;\nexports.createInflate = createInflate;\nexports.inflateSync = inflateSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-inflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-reader.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-reader.js ***!
  \******************************************************************************/
/***/ ((module) => {

eval("\nlet SyncReader = module.exports = function(buffer) {\n    this._buffer = buffer;\n    this._reads = [];\n};\nSyncReader.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n};\nSyncReader.prototype.process = function() {\n    // as long as there is any data and read requests\n    while(this._reads.length > 0 && this._buffer.length){\n        let read = this._reads[0];\n        if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {\n            // ok there is any data so that we can satisfy this request\n            this._reads.shift(); // == read\n            let buf = this._buffer;\n            this._buffer = buf.slice(read.length);\n            read.func.call(this, buf.slice(0, read.length));\n        } else {\n            break;\n        }\n    }\n    if (this._reads.length > 0) {\n        return new Error(\"There are some read requests waitng on finished stream\");\n    }\n    if (this._buffer.length > 0) {\n        return new Error(\"unrecognised content at end of stream\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcG5nanNANS4wLjAvbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9zeW5jLXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGFBQWNDLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxNQUFNO0lBQ2pELElBQUksQ0FBQ0MsT0FBTyxHQUFHRDtJQUNmLElBQUksQ0FBQ0UsTUFBTSxHQUFHLEVBQUU7QUFDbEI7QUFFQUwsV0FBV00sU0FBUyxDQUFDQyxJQUFJLEdBQUcsU0FBVUMsTUFBTSxFQUFFQyxRQUFRO0lBQ3BELElBQUksQ0FBQ0osTUFBTSxDQUFDSyxJQUFJLENBQUM7UUFDZkYsUUFBUUcsS0FBS0MsR0FBRyxDQUFDSjtRQUNqQkssV0FBV0wsU0FBUztRQUNwQk0sTUFBTUw7SUFDUjtBQUNGO0FBRUFULFdBQVdNLFNBQVMsQ0FBQ1MsT0FBTyxHQUFHO0lBQzdCLGlEQUFpRDtJQUNqRCxNQUFPLElBQUksQ0FBQ1YsTUFBTSxDQUFDRyxNQUFNLEdBQUcsS0FBSyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFFO1FBQ3BELElBQUlELE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUMsRUFBRTtRQUV6QixJQUNFLElBQUksQ0FBQ0QsT0FBTyxDQUFDSSxNQUFNLElBQ2xCLEtBQUksQ0FBQ0osT0FBTyxDQUFDSSxNQUFNLElBQUlELEtBQUtDLE1BQU0sSUFBSUQsS0FBS00sU0FBUyxHQUNyRDtZQUNBLDJEQUEyRDtZQUMzRCxJQUFJLENBQUNSLE1BQU0sQ0FBQ1csS0FBSyxJQUFJLFVBQVU7WUFFL0IsSUFBSUMsTUFBTSxJQUFJLENBQUNiLE9BQU87WUFFdEIsSUFBSSxDQUFDQSxPQUFPLEdBQUdhLElBQUlDLEtBQUssQ0FBQ1gsS0FBS0MsTUFBTTtZQUVwQ0QsS0FBS08sSUFBSSxDQUFDSyxJQUFJLENBQUMsSUFBSSxFQUFFRixJQUFJQyxLQUFLLENBQUMsR0FBR1gsS0FBS0MsTUFBTTtRQUMvQyxPQUFPO1lBQ0w7UUFDRjtJQUNGO0lBRUEsSUFBSSxJQUFJLENBQUNILE1BQU0sQ0FBQ0csTUFBTSxHQUFHLEdBQUc7UUFDMUIsT0FBTyxJQUFJWSxNQUFNO0lBQ25CO0lBRUEsSUFBSSxJQUFJLENBQUNoQixPQUFPLENBQUNJLE1BQU0sR0FBRyxHQUFHO1FBQzNCLE9BQU8sSUFBSVksTUFBTTtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wbmdqc0A1LjAuMC9ub2RlX21vZHVsZXMvcG5nanMvbGliL3N5bmMtcmVhZGVyLmpzP2NhZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBTeW5jUmVhZGVyID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gIHRoaXMuX3JlYWRzID0gW107XG59KTtcblxuU3luY1JlYWRlci5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChsZW5ndGgsIGNhbGxiYWNrKSB7XG4gIHRoaXMuX3JlYWRzLnB1c2goe1xuICAgIGxlbmd0aDogTWF0aC5hYnMobGVuZ3RoKSwgLy8gaWYgbGVuZ3RoIDwgMCB0aGVuIGF0IG1vc3QgdGhpcyBsZW5ndGhcbiAgICBhbGxvd0xlc3M6IGxlbmd0aCA8IDAsXG4gICAgZnVuYzogY2FsbGJhY2ssXG4gIH0pO1xufTtcblxuU3luY1JlYWRlci5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gYXMgbG9uZyBhcyB0aGVyZSBpcyBhbnkgZGF0YSBhbmQgcmVhZCByZXF1ZXN0c1xuICB3aGlsZSAodGhpcy5fcmVhZHMubGVuZ3RoID4gMCAmJiB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgbGV0IHJlYWQgPSB0aGlzLl9yZWFkc1swXTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMuX2J1ZmZlci5sZW5ndGggJiZcbiAgICAgICh0aGlzLl9idWZmZXIubGVuZ3RoID49IHJlYWQubGVuZ3RoIHx8IHJlYWQuYWxsb3dMZXNzKVxuICAgICkge1xuICAgICAgLy8gb2sgdGhlcmUgaXMgYW55IGRhdGEgc28gdGhhdCB3ZSBjYW4gc2F0aXNmeSB0aGlzIHJlcXVlc3RcbiAgICAgIHRoaXMuX3JlYWRzLnNoaWZ0KCk7IC8vID09IHJlYWRcblxuICAgICAgbGV0IGJ1ZiA9IHRoaXMuX2J1ZmZlcjtcblxuICAgICAgdGhpcy5fYnVmZmVyID0gYnVmLnNsaWNlKHJlYWQubGVuZ3RoKTtcblxuICAgICAgcmVhZC5mdW5jLmNhbGwodGhpcywgYnVmLnNsaWNlKDAsIHJlYWQubGVuZ3RoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9yZWFkcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcIlRoZXJlIGFyZSBzb21lIHJlYWQgcmVxdWVzdHMgd2FpdG5nIG9uIGZpbmlzaGVkIHN0cmVhbVwiKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9idWZmZXIubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJ1bnJlY29nbmlzZWQgY29udGVudCBhdCBlbmQgb2Ygc3RyZWFtXCIpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbIlN5bmNSZWFkZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVmZmVyIiwiX2J1ZmZlciIsIl9yZWFkcyIsInByb3RvdHlwZSIsInJlYWQiLCJsZW5ndGgiLCJjYWxsYmFjayIsInB1c2giLCJNYXRoIiwiYWJzIiwiYWxsb3dMZXNzIiwiZnVuYyIsInByb2Nlc3MiLCJzaGlmdCIsImJ1ZiIsInNsaWNlIiwiY2FsbCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/sync-reader.js\n");

/***/ })

};
;