"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/aptos@1.8.5_debug@4.4.0";
exports.ids = ["vendor-chunks/aptos@1.8.5_debug@4.4.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/aptos@1.8.5_debug@4.4.0/node_modules/aptos/dist/index.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/aptos@1.8.5_debug@4.4.0/node_modules/aptos/dist/index.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* binding */ ApiError2),\n/* harmony export */   AptosAccount: () => (/* binding */ AptosAccount),\n/* harmony export */   AptosClient: () => (/* binding */ AptosClient),\n/* harmony export */   AptosToken: () => (/* binding */ AptosToken),\n/* harmony export */   BCS: () => (/* binding */ bcs_exports),\n/* harmony export */   CoinClient: () => (/* binding */ CoinClient),\n/* harmony export */   FailedTransactionError: () => (/* binding */ FailedTransactionError),\n/* harmony export */   FaucetClient: () => (/* binding */ FaucetClient),\n/* harmony export */   HexString: () => (/* binding */ HexString),\n/* harmony export */   IndexerClient: () => (/* binding */ IndexerClient),\n/* harmony export */   Network: () => (/* binding */ Network),\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   TokenClient: () => (/* binding */ TokenClient),\n/* harmony export */   TokenTypes: () => (/* binding */ token_types_exports),\n/* harmony export */   TransactionBuilder: () => (/* binding */ TransactionBuilder),\n/* harmony export */   TransactionBuilderABI: () => (/* binding */ TransactionBuilderABI),\n/* harmony export */   TransactionBuilderEd25519: () => (/* binding */ TransactionBuilderEd25519),\n/* harmony export */   TransactionBuilderMultiEd25519: () => (/* binding */ TransactionBuilderMultiEd25519),\n/* harmony export */   TransactionBuilderRemoteABI: () => (/* binding */ TransactionBuilderRemoteABI),\n/* harmony export */   TxnBuilderTypes: () => (/* binding */ aptos_types_exports),\n/* harmony export */   TypeTagParser: () => (/* binding */ TypeTagParser),\n/* harmony export */   Types: () => (/* binding */ generated_exports),\n/* harmony export */   WaitForTransactionError: () => (/* binding */ WaitForTransactionError),\n/* harmony export */   derivePath: () => (/* binding */ derivePath),\n/* harmony export */   deserializePropertyMap: () => (/* binding */ deserializePropertyMap),\n/* harmony export */   deserializeValueBasedOnTypeTag: () => (/* binding */ deserializeValueBasedOnTypeTag),\n/* harmony export */   getAddressFromAccountOrAddress: () => (/* binding */ getAddressFromAccountOrAddress),\n/* harmony export */   getPropertyValueRaw: () => (/* binding */ getPropertyValueRaw)\n/* harmony export */ });\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js\");\n/* harmony import */ var _scure_bip39__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @scure/bip39 */ \"(ssr)/./node_modules/.pnpm/@scure+bip39@1.1.0/node_modules/@scure/bip39/index.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@0.27.2_debug@4.4.0/node_modules/axios/index.js\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! form-data */ \"(ssr)/./node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/form_data.js\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __decorateClass = (decorators, target, key, kind)=>{\n    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n    if (kind && result) __defProp(target, key, result);\n    return result;\n};\n// src/account/aptos_account.ts\n\n\n\n\n// src/utils/hd-key.ts\n\n\n\n\nvar pathRegex = /^m(\\/[0-9]+')+$/;\nvar replaceDerive = (val)=>val.replace(\"'\", \"\");\nvar HMAC_KEY = \"ed25519 seed\";\nvar HARDENED_OFFSET = 2147483648;\nvar getMasterKeyFromSeed = (seed)=>{\n    const h = _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__.hmac.create(_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_5__.sha512, HMAC_KEY);\n    const I = h.update((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(seed)).digest();\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR\n    };\n};\nvar CKDPriv = ({ key, chainCode }, index)=>{\n    const buffer = new ArrayBuffer(4);\n    new DataView(buffer).setUint32(0, index);\n    const indexBytes = new Uint8Array(buffer);\n    const zero = new Uint8Array([\n        0\n    ]);\n    const data = new Uint8Array([\n        ...zero,\n        ...key,\n        ...indexBytes\n    ]);\n    const I = _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__.hmac.create(_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_5__.sha512, chainCode).update(data).digest();\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR\n    };\n};\nvar isValidPath = (path)=>{\n    if (!pathRegex.test(path)) {\n        return false;\n    }\n    return !path.split(\"/\").slice(1).map(replaceDerive).some(Number.isNaN);\n};\nvar derivePath = (path, seed, offset = HARDENED_OFFSET)=>{\n    if (!isValidPath(path)) {\n        throw new Error(\"Invalid derivation path\");\n    }\n    const { key, chainCode } = getMasterKeyFromSeed(seed);\n    const segments = path.split(\"/\").slice(1).map(replaceDerive).map((el)=>parseInt(el, 10));\n    return segments.reduce((parentKeys, segment)=>CKDPriv(parentKeys, segment + offset), {\n        key,\n        chainCode\n    });\n};\n// src/utils/misc.ts\nasync function sleep(timeMs) {\n    return new Promise((resolve2)=>{\n        setTimeout(resolve2, timeMs);\n    });\n}\nvar DEFAULT_VERSION_PATH_BASE = \"/v1\";\nfunction fixNodeUrl(nodeUrl) {\n    let out = `${nodeUrl}`;\n    if (out.endsWith(\"/\")) {\n        out = out.substring(0, out.length - 1);\n    }\n    if (!out.endsWith(DEFAULT_VERSION_PATH_BASE)) {\n        out = `${out}${DEFAULT_VERSION_PATH_BASE}`;\n    }\n    return out;\n}\nvar DEFAULT_MAX_GAS_AMOUNT = 2e5;\nvar DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\nvar DEFAULT_TXN_TIMEOUT_SEC = 20;\nvar APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n// src/utils/memoize-decorator.ts\nfunction Memoize(args) {\n    let hashFunction;\n    let ttlMs;\n    let tags;\n    if (typeof args === \"object\") {\n        hashFunction = args.hashFunction;\n        ttlMs = args.ttlMs;\n        tags = args.tags;\n    } else {\n        hashFunction = args;\n    }\n    return (target, propertyKey, descriptor)=>{\n        if (descriptor.value != null) {\n            descriptor.value = getNewFunction(descriptor.value, hashFunction, ttlMs, tags);\n        } else if (descriptor.get != null) {\n            descriptor.get = getNewFunction(descriptor.get, hashFunction, ttlMs, tags);\n        } else {\n            throw new Error(\"Only put a Memoize() decorator on a method or get accessor.\");\n        }\n    };\n}\nfunction MemoizeExpiring(ttlMs, hashFunction) {\n    return Memoize({\n        ttlMs,\n        hashFunction\n    });\n}\nvar clearCacheTagsMap = /* @__PURE__ */ new Map();\nfunction clear(tags) {\n    const cleared = /* @__PURE__ */ new Set();\n    for (const tag of tags){\n        const maps = clearCacheTagsMap.get(tag);\n        if (maps) {\n            for (const mp of maps){\n                if (!cleared.has(mp)) {\n                    mp.clear();\n                    cleared.add(mp);\n                }\n            }\n        }\n    }\n    return cleared.size;\n}\nfunction getNewFunction(originalMethod, hashFunction, ttlMs = 0, tags) {\n    const propMapName = Symbol(\"__memoized_map__\");\n    return function(...args) {\n        let returnedValue;\n        const that = this;\n        if (!that.hasOwnProperty(propMapName)) {\n            Object.defineProperty(that, propMapName, {\n                configurable: false,\n                enumerable: false,\n                writable: false,\n                value: /* @__PURE__ */ new Map()\n            });\n        }\n        const myMap = that[propMapName];\n        if (Array.isArray(tags)) {\n            for (const tag of tags){\n                if (clearCacheTagsMap.has(tag)) {\n                    clearCacheTagsMap.get(tag).push(myMap);\n                } else {\n                    clearCacheTagsMap.set(tag, [\n                        myMap\n                    ]);\n                }\n            }\n        }\n        if (hashFunction || args.length > 0 || ttlMs > 0) {\n            let hashKey;\n            if (hashFunction === true) {\n                hashKey = args.map((a)=>a.toString()).join(\"!\");\n            } else if (hashFunction) {\n                hashKey = hashFunction.apply(that, args);\n            } else {\n                hashKey = args[0];\n            }\n            const timestampKey = `${hashKey}__timestamp`;\n            let isExpired = false;\n            if (ttlMs > 0) {\n                if (!myMap.has(timestampKey)) {\n                    isExpired = true;\n                } else {\n                    const timestamp = myMap.get(timestampKey);\n                    isExpired = Date.now() - timestamp > ttlMs;\n                }\n            }\n            if (myMap.has(hashKey) && !isExpired) {\n                returnedValue = myMap.get(hashKey);\n            } else {\n                returnedValue = originalMethod.apply(that, args);\n                myMap.set(hashKey, returnedValue);\n                if (ttlMs > 0) {\n                    myMap.set(timestampKey, Date.now());\n                }\n            }\n        } else {\n            const hashKey = that;\n            if (myMap.has(hashKey)) {\n                returnedValue = myMap.get(hashKey);\n            } else {\n                returnedValue = originalMethod.apply(that, args);\n                myMap.set(hashKey, returnedValue);\n            }\n        }\n        return returnedValue;\n    };\n}\n// src/utils/hex_string.ts\n\nvar HexString = class {\n    static fromBuffer(buffer) {\n        return HexString.fromUint8Array(buffer);\n    }\n    static fromUint8Array(arr) {\n        return new HexString((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(arr));\n    }\n    static ensure(hexString) {\n        if (typeof hexString === \"string\") {\n            return new HexString(hexString);\n        }\n        return hexString;\n    }\n    constructor(hexString){\n        if (hexString.startsWith(\"0x\")) {\n            this.hexString = hexString;\n        } else {\n            this.hexString = `0x${hexString}`;\n        }\n    }\n    hex() {\n        return this.hexString;\n    }\n    noPrefix() {\n        return this.hexString.slice(2);\n    }\n    toString() {\n        return this.hex();\n    }\n    toShortString() {\n        const trimmed = this.hexString.replace(/^0x0*/, \"\");\n        return `0x${trimmed}`;\n    }\n    toUint8Array() {\n        return Uint8Array.from((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(this.noPrefix()));\n    }\n};\n// src/utils/pagination_helpers.ts\nasync function paginateWithCursor(apiFunction, accountAddress, limitPerRequest, query) {\n    var _a;\n    const out = [];\n    let cursor;\n    while(true){\n        const response = await apiFunction(HexString.ensure(accountAddress).hex(), (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString(), cursor, limitPerRequest);\n        cursor = response.__headers[\"x-aptos-cursor\"];\n        delete response.__headers;\n        out.push(...response);\n        if (cursor === null || cursor === void 0) {\n            break;\n        }\n    }\n    return out;\n}\n// src/utils/api-endpoints.ts\nvar NetworkToIndexerAPI = {\n    mainnet: \"https://indexer.mainnet.aptoslabs.com/v1/graphql\",\n    testnet: \"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\",\n    devnet: \"https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql\"\n};\nvar NetworkToNodeAPI = {\n    mainnet: \"https://fullnode.mainnet.aptoslabs.com/v1\",\n    testnet: \"https://fullnode.testnet.aptoslabs.com/v1\",\n    devnet: \"https://fullnode.devnet.aptoslabs.com/v1\"\n};\nvar Network = /* @__PURE__ */ ((Network3)=>{\n    Network3[\"MAINNET\"] = \"mainnet\";\n    Network3[\"TESTNET\"] = \"testnet\";\n    Network3[\"DEVNET\"] = \"devnet\";\n    return Network3;\n})(Network || {});\n// src/aptos_types/index.ts\nvar aptos_types_exports = {};\n__export(aptos_types_exports, {\n    AccountAddress: ()=>AccountAddress,\n    AccountAuthenticator: ()=>AccountAuthenticator,\n    AccountAuthenticatorEd25519: ()=>AccountAuthenticatorEd25519,\n    AccountAuthenticatorMultiEd25519: ()=>AccountAuthenticatorMultiEd25519,\n    ArgumentABI: ()=>ArgumentABI,\n    AuthenticationKey: ()=>AuthenticationKey,\n    ChainId: ()=>ChainId,\n    ChangeSet: ()=>ChangeSet,\n    Ed25519PublicKey: ()=>Ed25519PublicKey,\n    Ed25519Signature: ()=>Ed25519Signature,\n    EntryFunction: ()=>EntryFunction,\n    EntryFunctionABI: ()=>EntryFunctionABI,\n    Identifier: ()=>Identifier,\n    Module: ()=>Module,\n    ModuleId: ()=>ModuleId,\n    MultiAgentRawTransaction: ()=>MultiAgentRawTransaction,\n    MultiEd25519PublicKey: ()=>MultiEd25519PublicKey,\n    MultiEd25519Signature: ()=>MultiEd25519Signature,\n    MultiSig: ()=>MultiSig,\n    MultiSigTransactionPayload: ()=>MultiSigTransactionPayload,\n    RawTransaction: ()=>RawTransaction,\n    RawTransactionWithData: ()=>RawTransactionWithData,\n    RotationProofChallenge: ()=>RotationProofChallenge,\n    Script: ()=>Script,\n    ScriptABI: ()=>ScriptABI,\n    SignedTransaction: ()=>SignedTransaction,\n    StructTag: ()=>StructTag,\n    Transaction: ()=>Transaction,\n    TransactionArgument: ()=>TransactionArgument,\n    TransactionArgumentAddress: ()=>TransactionArgumentAddress,\n    TransactionArgumentBool: ()=>TransactionArgumentBool,\n    TransactionArgumentU128: ()=>TransactionArgumentU128,\n    TransactionArgumentU16: ()=>TransactionArgumentU16,\n    TransactionArgumentU256: ()=>TransactionArgumentU256,\n    TransactionArgumentU32: ()=>TransactionArgumentU32,\n    TransactionArgumentU64: ()=>TransactionArgumentU64,\n    TransactionArgumentU8: ()=>TransactionArgumentU8,\n    TransactionArgumentU8Vector: ()=>TransactionArgumentU8Vector,\n    TransactionAuthenticator: ()=>TransactionAuthenticator,\n    TransactionAuthenticatorEd25519: ()=>TransactionAuthenticatorEd25519,\n    TransactionAuthenticatorMultiAgent: ()=>TransactionAuthenticatorMultiAgent,\n    TransactionAuthenticatorMultiEd25519: ()=>TransactionAuthenticatorMultiEd25519,\n    TransactionPayload: ()=>TransactionPayload,\n    TransactionPayloadEntryFunction: ()=>TransactionPayloadEntryFunction,\n    TransactionPayloadMultisig: ()=>TransactionPayloadMultisig,\n    TransactionPayloadScript: ()=>TransactionPayloadScript,\n    TransactionScriptABI: ()=>TransactionScriptABI,\n    TypeArgumentABI: ()=>TypeArgumentABI,\n    TypeTag: ()=>TypeTag,\n    TypeTagAddress: ()=>TypeTagAddress,\n    TypeTagBool: ()=>TypeTagBool,\n    TypeTagParser: ()=>TypeTagParser,\n    TypeTagParserError: ()=>TypeTagParserError,\n    TypeTagSigner: ()=>TypeTagSigner,\n    TypeTagStruct: ()=>TypeTagStruct,\n    TypeTagU128: ()=>TypeTagU128,\n    TypeTagU16: ()=>TypeTagU16,\n    TypeTagU256: ()=>TypeTagU256,\n    TypeTagU32: ()=>TypeTagU32,\n    TypeTagU64: ()=>TypeTagU64,\n    TypeTagU8: ()=>TypeTagU8,\n    TypeTagVector: ()=>TypeTagVector,\n    UserTransaction: ()=>UserTransaction,\n    WriteSet: ()=>WriteSet,\n    stringStructTag: ()=>stringStructTag\n});\n// src/bcs/index.ts\nvar bcs_exports = {};\n__export(bcs_exports, {\n    Deserializer: ()=>Deserializer,\n    Serializer: ()=>Serializer,\n    bcsSerializeBool: ()=>bcsSerializeBool,\n    bcsSerializeBytes: ()=>bcsSerializeBytes,\n    bcsSerializeFixedBytes: ()=>bcsSerializeFixedBytes,\n    bcsSerializeStr: ()=>bcsSerializeStr,\n    bcsSerializeU128: ()=>bcsSerializeU128,\n    bcsSerializeU16: ()=>bcsSerializeU16,\n    bcsSerializeU32: ()=>bcsSerializeU32,\n    bcsSerializeU8: ()=>bcsSerializeU8,\n    bcsSerializeUint64: ()=>bcsSerializeUint64,\n    bcsToBytes: ()=>bcsToBytes,\n    deserializeVector: ()=>deserializeVector,\n    serializeVector: ()=>serializeVector,\n    serializeVectorWithFunc: ()=>serializeVectorWithFunc\n});\n// src/bcs/consts.ts\nvar MAX_U8_NUMBER = 2 ** 8 - 1;\nvar MAX_U16_NUMBER = 2 ** 16 - 1;\nvar MAX_U32_NUMBER = 2 ** 32 - 1;\nvar MAX_U64_BIG_INT = BigInt(2 ** 64) - BigInt(1);\nvar MAX_U128_BIG_INT = BigInt(2 ** 128) - BigInt(1);\nvar MAX_U256_BIG_INT = BigInt(2 ** 256) - BigInt(1);\n// src/bcs/serializer.ts\nvar Serializer = class {\n    constructor(){\n        this.buffer = new ArrayBuffer(64);\n        this.offset = 0;\n    }\n    ensureBufferWillHandleSize(bytes) {\n        while(this.buffer.byteLength < this.offset + bytes){\n            const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n            new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n            this.buffer = newBuffer;\n        }\n    }\n    serialize(values) {\n        this.ensureBufferWillHandleSize(values.length);\n        new Uint8Array(this.buffer, this.offset).set(values);\n        this.offset += values.length;\n    }\n    serializeWithFunction(fn, bytesLength, value) {\n        this.ensureBufferWillHandleSize(bytesLength);\n        const dv = new DataView(this.buffer, this.offset);\n        fn.apply(dv, [\n            0,\n            value,\n            true\n        ]);\n        this.offset += bytesLength;\n    }\n    serializeStr(value) {\n        const textEncoder = new TextEncoder();\n        this.serializeBytes(textEncoder.encode(value));\n    }\n    serializeBytes(value) {\n        this.serializeU32AsUleb128(value.length);\n        this.serialize(value);\n    }\n    serializeFixedBytes(value) {\n        this.serialize(value);\n    }\n    serializeBool(value) {\n        if (typeof value !== \"boolean\") {\n            throw new Error(\"Value needs to be a boolean\");\n        }\n        const byteValue = value ? 1 : 0;\n        this.serialize(new Uint8Array([\n            byteValue\n        ]));\n    }\n    serializeU8(value) {\n        this.serialize(new Uint8Array([\n            value\n        ]));\n    }\n    serializeU16(value) {\n        this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n    }\n    serializeU32(value) {\n        this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n    }\n    serializeU64(value) {\n        const low = BigInt(value.toString()) & BigInt(MAX_U32_NUMBER);\n        const high = BigInt(value.toString()) >> BigInt(32);\n        this.serializeU32(Number(low));\n        this.serializeU32(Number(high));\n    }\n    serializeU128(value) {\n        const low = BigInt(value.toString()) & MAX_U64_BIG_INT;\n        const high = BigInt(value.toString()) >> BigInt(64);\n        this.serializeU64(low);\n        this.serializeU64(high);\n    }\n    serializeU256(value) {\n        const low = BigInt(value.toString()) & MAX_U128_BIG_INT;\n        const high = BigInt(value.toString()) >> BigInt(128);\n        this.serializeU128(low);\n        this.serializeU128(high);\n    }\n    serializeU32AsUleb128(val) {\n        let value = val;\n        const valueArray = [];\n        while(value >>> 7 !== 0){\n            valueArray.push(value & 127 | 128);\n            value >>>= 7;\n        }\n        valueArray.push(value);\n        this.serialize(new Uint8Array(valueArray));\n    }\n    getBytes() {\n        return new Uint8Array(this.buffer).slice(0, this.offset);\n    }\n};\n__decorateClass([\n    checkNumberRange(0, MAX_U8_NUMBER)\n], Serializer.prototype, \"serializeU8\", 1);\n__decorateClass([\n    checkNumberRange(0, MAX_U16_NUMBER)\n], Serializer.prototype, \"serializeU16\", 1);\n__decorateClass([\n    checkNumberRange(0, MAX_U32_NUMBER)\n], Serializer.prototype, \"serializeU32\", 1);\n__decorateClass([\n    checkNumberRange(BigInt(0), MAX_U64_BIG_INT)\n], Serializer.prototype, \"serializeU64\", 1);\n__decorateClass([\n    checkNumberRange(BigInt(0), MAX_U128_BIG_INT)\n], Serializer.prototype, \"serializeU128\", 1);\n__decorateClass([\n    checkNumberRange(BigInt(0), MAX_U256_BIG_INT)\n], Serializer.prototype, \"serializeU256\", 1);\n__decorateClass([\n    checkNumberRange(0, MAX_U32_NUMBER)\n], Serializer.prototype, \"serializeU32AsUleb128\", 1);\nfunction checkNumberRange(minValue, maxValue, message) {\n    return (target, propertyKey, descriptor)=>{\n        const childFunction = descriptor.value;\n        descriptor.value = function deco(value) {\n            const valueBigInt = BigInt(value.toString());\n            if (valueBigInt > BigInt(maxValue.toString()) || valueBigInt < BigInt(minValue.toString())) {\n                throw new Error(message || \"Value is out of range\");\n            }\n            childFunction.apply(this, [\n                value\n            ]);\n        };\n        return descriptor;\n    };\n}\n// src/bcs/deserializer.ts\nvar Deserializer = class {\n    constructor(data){\n        this.buffer = new ArrayBuffer(data.length);\n        new Uint8Array(this.buffer).set(data, 0);\n        this.offset = 0;\n    }\n    read(length) {\n        if (this.offset + length > this.buffer.byteLength) {\n            throw new Error(\"Reached to the end of buffer\");\n        }\n        const bytes = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return bytes;\n    }\n    deserializeStr() {\n        const value = this.deserializeBytes();\n        const textDecoder = new TextDecoder();\n        return textDecoder.decode(value);\n    }\n    deserializeBytes() {\n        const len = this.deserializeUleb128AsU32();\n        return new Uint8Array(this.read(len));\n    }\n    deserializeFixedBytes(len) {\n        return new Uint8Array(this.read(len));\n    }\n    deserializeBool() {\n        const bool = new Uint8Array(this.read(1))[0];\n        if (bool !== 1 && bool !== 0) {\n            throw new Error(\"Invalid boolean value\");\n        }\n        return bool === 1;\n    }\n    deserializeU8() {\n        return new DataView(this.read(1)).getUint8(0);\n    }\n    deserializeU16() {\n        return new DataView(this.read(2)).getUint16(0, true);\n    }\n    deserializeU32() {\n        return new DataView(this.read(4)).getUint32(0, true);\n    }\n    deserializeU64() {\n        const low = this.deserializeU32();\n        const high = this.deserializeU32();\n        return BigInt(BigInt(high) << BigInt(32) | BigInt(low));\n    }\n    deserializeU128() {\n        const low = this.deserializeU64();\n        const high = this.deserializeU64();\n        return BigInt(high << BigInt(64) | low);\n    }\n    deserializeU256() {\n        const low = this.deserializeU128();\n        const high = this.deserializeU128();\n        return BigInt(high << BigInt(128) | low);\n    }\n    deserializeUleb128AsU32() {\n        let value = BigInt(0);\n        let shift = 0;\n        while(value < MAX_U32_NUMBER){\n            const byte = this.deserializeU8();\n            value |= BigInt(byte & 127) << BigInt(shift);\n            if ((byte & 128) === 0) {\n                break;\n            }\n            shift += 7;\n        }\n        if (value > MAX_U32_NUMBER) {\n            throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n        }\n        return Number(value);\n    }\n};\n// src/bcs/helper.ts\nfunction serializeVector(value, serializer) {\n    serializer.serializeU32AsUleb128(value.length);\n    value.forEach((item)=>{\n        item.serialize(serializer);\n    });\n}\nfunction serializeVectorWithFunc(value, func) {\n    const serializer = new Serializer();\n    serializer.serializeU32AsUleb128(value.length);\n    const f = serializer[func];\n    value.forEach((item)=>{\n        f.call(serializer, item);\n    });\n    return serializer.getBytes();\n}\nfunction deserializeVector(deserializer, cls) {\n    const length = deserializer.deserializeUleb128AsU32();\n    const list = [];\n    for(let i = 0; i < length; i += 1){\n        list.push(cls.deserialize(deserializer));\n    }\n    return list;\n}\nfunction bcsToBytes(value) {\n    const serializer = new Serializer();\n    value.serialize(serializer);\n    return serializer.getBytes();\n}\nfunction bcsSerializeUint64(value) {\n    const serializer = new Serializer();\n    serializer.serializeU64(value);\n    return serializer.getBytes();\n}\nfunction bcsSerializeU8(value) {\n    const serializer = new Serializer();\n    serializer.serializeU8(value);\n    return serializer.getBytes();\n}\nfunction bcsSerializeU16(value) {\n    const serializer = new Serializer();\n    serializer.serializeU16(value);\n    return serializer.getBytes();\n}\nfunction bcsSerializeU32(value) {\n    const serializer = new Serializer();\n    serializer.serializeU32(value);\n    return serializer.getBytes();\n}\nfunction bcsSerializeU128(value) {\n    const serializer = new Serializer();\n    serializer.serializeU128(value);\n    return serializer.getBytes();\n}\nfunction bcsSerializeBool(value) {\n    const serializer = new Serializer();\n    serializer.serializeBool(value);\n    return serializer.getBytes();\n}\nfunction bcsSerializeStr(value) {\n    const serializer = new Serializer();\n    serializer.serializeStr(value);\n    return serializer.getBytes();\n}\nfunction bcsSerializeBytes(value) {\n    const serializer = new Serializer();\n    serializer.serializeBytes(value);\n    return serializer.getBytes();\n}\nfunction bcsSerializeFixedBytes(value) {\n    const serializer = new Serializer();\n    serializer.serializeFixedBytes(value);\n    return serializer.getBytes();\n}\n// src/aptos_types/transaction.ts\n\n// src/aptos_types/account_address.ts\nvar _AccountAddress = class {\n    constructor(address){\n        if (address.length !== _AccountAddress.LENGTH) {\n            throw new Error(\"Expected address of length 32\");\n        }\n        this.address = address;\n    }\n    static fromHex(addr) {\n        let address = HexString.ensure(addr);\n        if (address.noPrefix().length % 2 !== 0) {\n            address = new HexString(`0${address.noPrefix()}`);\n        }\n        const addressBytes = address.toUint8Array();\n        if (addressBytes.length > _AccountAddress.LENGTH) {\n            throw new Error(\"Hex string is too long. Address's length is 32 bytes.\");\n        } else if (addressBytes.length === _AccountAddress.LENGTH) {\n            return new _AccountAddress(addressBytes);\n        }\n        const res = new Uint8Array(_AccountAddress.LENGTH);\n        res.set(addressBytes, _AccountAddress.LENGTH - addressBytes.length);\n        return new _AccountAddress(res);\n    }\n    static isValid(addr) {\n        if (addr === \"\") {\n            return false;\n        }\n        let address = HexString.ensure(addr);\n        if (address.noPrefix().length % 2 !== 0) {\n            address = new HexString(`0${address.noPrefix()}`);\n        }\n        const addressBytes = address.toUint8Array();\n        return addressBytes.length <= _AccountAddress.LENGTH;\n    }\n    toHexString() {\n        return HexString.fromUint8Array(this.address).hex();\n    }\n    serialize(serializer) {\n        serializer.serializeFixedBytes(this.address);\n    }\n    static deserialize(deserializer) {\n        return new _AccountAddress(deserializer.deserializeFixedBytes(_AccountAddress.LENGTH));\n    }\n};\nvar AccountAddress = _AccountAddress;\nAccountAddress.LENGTH = 32;\nAccountAddress.CORE_CODE_ADDRESS = _AccountAddress.fromHex(\"0x1\");\n// src/aptos_types/ed25519.ts\nvar _Ed25519PublicKey = class {\n    constructor(value){\n        if (value.length !== _Ed25519PublicKey.LENGTH) {\n            throw new Error(`Ed25519PublicKey length should be ${_Ed25519PublicKey.LENGTH}`);\n        }\n        this.value = value;\n    }\n    toBytes() {\n        return this.value;\n    }\n    serialize(serializer) {\n        serializer.serializeBytes(this.value);\n    }\n    static deserialize(deserializer) {\n        const value = deserializer.deserializeBytes();\n        return new _Ed25519PublicKey(value);\n    }\n};\nvar Ed25519PublicKey = _Ed25519PublicKey;\nEd25519PublicKey.LENGTH = 32;\nvar _Ed25519Signature = class {\n    constructor(value){\n        this.value = value;\n        if (value.length !== _Ed25519Signature.LENGTH) {\n            throw new Error(`Ed25519Signature length should be ${_Ed25519Signature.LENGTH}`);\n        }\n    }\n    serialize(serializer) {\n        serializer.serializeBytes(this.value);\n    }\n    static deserialize(deserializer) {\n        const value = deserializer.deserializeBytes();\n        return new _Ed25519Signature(value);\n    }\n};\nvar Ed25519Signature = _Ed25519Signature;\nEd25519Signature.LENGTH = 64;\n// src/aptos_types/multi_ed25519.ts\nvar MAX_SIGNATURES_SUPPORTED = 32;\nvar MultiEd25519PublicKey = class {\n    constructor(public_keys, threshold){\n        this.public_keys = public_keys;\n        this.threshold = threshold;\n        if (threshold > MAX_SIGNATURES_SUPPORTED) {\n            throw new Error(`\"threshold\" cannot be larger than ${MAX_SIGNATURES_SUPPORTED}`);\n        }\n    }\n    toBytes() {\n        const bytes = new Uint8Array(this.public_keys.length * Ed25519PublicKey.LENGTH + 1);\n        this.public_keys.forEach((k, i)=>{\n            bytes.set(k.value, i * Ed25519PublicKey.LENGTH);\n        });\n        bytes[this.public_keys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n        return bytes;\n    }\n    serialize(serializer) {\n        serializer.serializeBytes(this.toBytes());\n    }\n    static deserialize(deserializer) {\n        const bytes = deserializer.deserializeBytes();\n        const threshold = bytes[bytes.length - 1];\n        const keys = [];\n        for(let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH){\n            const begin = i;\n            keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n        }\n        return new MultiEd25519PublicKey(keys, threshold);\n    }\n};\nvar _MultiEd25519Signature = class {\n    constructor(signatures, bitmap){\n        this.signatures = signatures;\n        this.bitmap = bitmap;\n        if (bitmap.length !== _MultiEd25519Signature.BITMAP_LEN) {\n            throw new Error(`\"bitmap\" length should be ${_MultiEd25519Signature.BITMAP_LEN}`);\n        }\n    }\n    toBytes() {\n        const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + _MultiEd25519Signature.BITMAP_LEN);\n        this.signatures.forEach((k, i)=>{\n            bytes.set(k.value, i * Ed25519Signature.LENGTH);\n        });\n        bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n        return bytes;\n    }\n    static createBitmap(bits) {\n        const firstBitInByte = 128;\n        const bitmap = new Uint8Array([\n            0,\n            0,\n            0,\n            0\n        ]);\n        const dupCheckSet = /* @__PURE__ */ new Set();\n        bits.forEach((bit)=>{\n            if (bit >= MAX_SIGNATURES_SUPPORTED) {\n                throw new Error(`Invalid bit value ${bit}.`);\n            }\n            if (dupCheckSet.has(bit)) {\n                throw new Error(\"Duplicated bits detected.\");\n            }\n            dupCheckSet.add(bit);\n            const byteOffset = Math.floor(bit / 8);\n            let byte = bitmap[byteOffset];\n            byte |= firstBitInByte >> bit % 8;\n            bitmap[byteOffset] = byte;\n        });\n        return bitmap;\n    }\n    serialize(serializer) {\n        serializer.serializeBytes(this.toBytes());\n    }\n    static deserialize(deserializer) {\n        const bytes = deserializer.deserializeBytes();\n        const bitmap = bytes.subarray(bytes.length - 4);\n        const sigs = [];\n        for(let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH){\n            const begin = i;\n            sigs.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n        }\n        return new _MultiEd25519Signature(sigs, bitmap);\n    }\n};\nvar MultiEd25519Signature = _MultiEd25519Signature;\nMultiEd25519Signature.BITMAP_LEN = 4;\n// src/aptos_types/authenticator.ts\nvar TransactionAuthenticator = class {\n    static deserialize(deserializer) {\n        const index = deserializer.deserializeUleb128AsU32();\n        switch(index){\n            case 0:\n                return TransactionAuthenticatorEd25519.load(deserializer);\n            case 1:\n                return TransactionAuthenticatorMultiEd25519.load(deserializer);\n            case 2:\n                return TransactionAuthenticatorMultiAgent.load(deserializer);\n            default:\n                throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n        }\n    }\n};\nvar TransactionAuthenticatorEd25519 = class extends TransactionAuthenticator {\n    constructor(public_key, signature){\n        super();\n        this.public_key = public_key;\n        this.signature = signature;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n        this.public_key.serialize(serializer);\n        this.signature.serialize(serializer);\n    }\n    static load(deserializer) {\n        const public_key = Ed25519PublicKey.deserialize(deserializer);\n        const signature = Ed25519Signature.deserialize(deserializer);\n        return new TransactionAuthenticatorEd25519(public_key, signature);\n    }\n};\nvar TransactionAuthenticatorMultiEd25519 = class extends TransactionAuthenticator {\n    constructor(public_key, signature){\n        super();\n        this.public_key = public_key;\n        this.signature = signature;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(1);\n        this.public_key.serialize(serializer);\n        this.signature.serialize(serializer);\n    }\n    static load(deserializer) {\n        const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n        const signature = MultiEd25519Signature.deserialize(deserializer);\n        return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n    }\n};\nvar TransactionAuthenticatorMultiAgent = class extends TransactionAuthenticator {\n    constructor(sender, secondary_signer_addresses, secondary_signers){\n        super();\n        this.sender = sender;\n        this.secondary_signer_addresses = secondary_signer_addresses;\n        this.secondary_signers = secondary_signers;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(2);\n        this.sender.serialize(serializer);\n        serializeVector(this.secondary_signer_addresses, serializer);\n        serializeVector(this.secondary_signers, serializer);\n    }\n    static load(deserializer) {\n        const sender = AccountAuthenticator.deserialize(deserializer);\n        const secondary_signer_addresses = deserializeVector(deserializer, AccountAddress);\n        const secondary_signers = deserializeVector(deserializer, AccountAuthenticator);\n        return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n    }\n};\nvar AccountAuthenticator = class {\n    static deserialize(deserializer) {\n        const index = deserializer.deserializeUleb128AsU32();\n        switch(index){\n            case 0:\n                return AccountAuthenticatorEd25519.load(deserializer);\n            case 1:\n                return AccountAuthenticatorMultiEd25519.load(deserializer);\n            default:\n                throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n        }\n    }\n};\nvar AccountAuthenticatorEd25519 = class extends AccountAuthenticator {\n    constructor(public_key, signature){\n        super();\n        this.public_key = public_key;\n        this.signature = signature;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n        this.public_key.serialize(serializer);\n        this.signature.serialize(serializer);\n    }\n    static load(deserializer) {\n        const public_key = Ed25519PublicKey.deserialize(deserializer);\n        const signature = Ed25519Signature.deserialize(deserializer);\n        return new AccountAuthenticatorEd25519(public_key, signature);\n    }\n};\nvar AccountAuthenticatorMultiEd25519 = class extends AccountAuthenticator {\n    constructor(public_key, signature){\n        super();\n        this.public_key = public_key;\n        this.signature = signature;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(1);\n        this.public_key.serialize(serializer);\n        this.signature.serialize(serializer);\n    }\n    static load(deserializer) {\n        const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n        const signature = MultiEd25519Signature.deserialize(deserializer);\n        return new AccountAuthenticatorMultiEd25519(public_key, signature);\n    }\n};\n// src/aptos_types/identifier.ts\nvar Identifier = class {\n    constructor(value){\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeStr(this.value);\n    }\n    static deserialize(deserializer) {\n        const value = deserializer.deserializeStr();\n        return new Identifier(value);\n    }\n};\n// src/aptos_types/type_tag.ts\nvar TypeTag = class {\n    static deserialize(deserializer) {\n        const index = deserializer.deserializeUleb128AsU32();\n        switch(index){\n            case 0:\n                return TypeTagBool.load(deserializer);\n            case 1:\n                return TypeTagU8.load(deserializer);\n            case 2:\n                return TypeTagU64.load(deserializer);\n            case 3:\n                return TypeTagU128.load(deserializer);\n            case 4:\n                return TypeTagAddress.load(deserializer);\n            case 5:\n                return TypeTagSigner.load(deserializer);\n            case 6:\n                return TypeTagVector.load(deserializer);\n            case 7:\n                return TypeTagStruct.load(deserializer);\n            case 8:\n                return TypeTagU16.load(deserializer);\n            case 9:\n                return TypeTagU32.load(deserializer);\n            case 10:\n                return TypeTagU256.load(deserializer);\n            default:\n                throw new Error(`Unknown variant index for TypeTag: ${index}`);\n        }\n    }\n};\nvar TypeTagBool = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n    }\n    static load(deserializer) {\n        return new TypeTagBool();\n    }\n};\nvar TypeTagU8 = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(1);\n    }\n    static load(_deserializer) {\n        return new TypeTagU8();\n    }\n};\nvar TypeTagU16 = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(1);\n    }\n    static load(_deserializer) {\n        return new TypeTagU16();\n    }\n};\nvar TypeTagU32 = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(1);\n    }\n    static load(_deserializer) {\n        return new TypeTagU32();\n    }\n};\nvar TypeTagU64 = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(2);\n    }\n    static load(_deserializer) {\n        return new TypeTagU64();\n    }\n};\nvar TypeTagU128 = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(3);\n    }\n    static load(_deserializer) {\n        return new TypeTagU128();\n    }\n};\nvar TypeTagU256 = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(1);\n    }\n    static load(_deserializer) {\n        return new TypeTagU256();\n    }\n};\nvar TypeTagAddress = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(4);\n    }\n    static load(_deserializer) {\n        return new TypeTagAddress();\n    }\n};\nvar TypeTagSigner = class extends TypeTag {\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(5);\n    }\n    static load(_deserializer) {\n        return new TypeTagSigner();\n    }\n};\nvar TypeTagVector = class extends TypeTag {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(6);\n        this.value.serialize(serializer);\n    }\n    static load(deserializer) {\n        const value = TypeTag.deserialize(deserializer);\n        return new TypeTagVector(value);\n    }\n};\nvar TypeTagStruct = class extends TypeTag {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(7);\n        this.value.serialize(serializer);\n    }\n    static load(deserializer) {\n        const value = StructTag.deserialize(deserializer);\n        return new TypeTagStruct(value);\n    }\n    isStringTypeTag() {\n        if (this.value.module_name.value === \"string\" && this.value.name.value === \"String\" && this.value.address.toHexString() === AccountAddress.fromHex(\"0x1\").toHexString()) {\n            return true;\n        }\n        return false;\n    }\n};\nvar StructTag = class {\n    constructor(address, module_name, name, type_args){\n        this.address = address;\n        this.module_name = module_name;\n        this.name = name;\n        this.type_args = type_args;\n    }\n    static fromString(structTag) {\n        const typeTagStruct = new TypeTagParser(structTag).parseTypeTag();\n        return new StructTag(typeTagStruct.value.address, typeTagStruct.value.module_name, typeTagStruct.value.name, typeTagStruct.value.type_args);\n    }\n    serialize(serializer) {\n        this.address.serialize(serializer);\n        this.module_name.serialize(serializer);\n        this.name.serialize(serializer);\n        serializeVector(this.type_args, serializer);\n    }\n    static deserialize(deserializer) {\n        const address = AccountAddress.deserialize(deserializer);\n        const moduleName = Identifier.deserialize(deserializer);\n        const name = Identifier.deserialize(deserializer);\n        const typeArgs = deserializeVector(deserializer, TypeTag);\n        return new StructTag(address, moduleName, name, typeArgs);\n    }\n};\nvar stringStructTag = new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"string\"), new Identifier(\"String\"), []);\nfunction bail(message) {\n    throw new TypeTagParserError(message);\n}\nfunction isWhiteSpace(c) {\n    if (c.match(/\\s/)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidAlphabetic(c) {\n    if (c.match(/[_A-Za-z0-9]/g)) {\n        return true;\n    }\n    return false;\n}\nfunction isGeneric(c) {\n    if (c.match(/T\\d+/g)) {\n        return true;\n    }\n    return false;\n}\nfunction nextToken(tagStr, pos) {\n    const c = tagStr[pos];\n    if (c === \":\") {\n        if (tagStr.slice(pos, pos + 2) === \"::\") {\n            return [\n                [\n                    \"COLON\",\n                    \"::\"\n                ],\n                2\n            ];\n        }\n        bail(\"Unrecognized token.\");\n    } else if (c === \"<\") {\n        return [\n            [\n                \"LT\",\n                \"<\"\n            ],\n            1\n        ];\n    } else if (c === \">\") {\n        return [\n            [\n                \"GT\",\n                \">\"\n            ],\n            1\n        ];\n    } else if (c === \",\") {\n        return [\n            [\n                \"COMMA\",\n                \",\"\n            ],\n            1\n        ];\n    } else if (isWhiteSpace(c)) {\n        let res = \"\";\n        for(let i = pos; i < tagStr.length; i += 1){\n            const char = tagStr[i];\n            if (isWhiteSpace(char)) {\n                res = `${res}${char}`;\n            } else {\n                break;\n            }\n        }\n        return [\n            [\n                \"SPACE\",\n                res\n            ],\n            res.length\n        ];\n    } else if (isValidAlphabetic(c)) {\n        let res = \"\";\n        for(let i = pos; i < tagStr.length; i += 1){\n            const char = tagStr[i];\n            if (isValidAlphabetic(char)) {\n                res = `${res}${char}`;\n            } else {\n                break;\n            }\n        }\n        if (isGeneric(res)) {\n            return [\n                [\n                    \"GENERIC\",\n                    res\n                ],\n                res.length\n            ];\n        }\n        return [\n            [\n                \"IDENT\",\n                res\n            ],\n            res.length\n        ];\n    }\n    throw new Error(\"Unrecognized token.\");\n}\nfunction tokenize(tagStr) {\n    let pos = 0;\n    const tokens = [];\n    while(pos < tagStr.length){\n        const [token, size] = nextToken(tagStr, pos);\n        if (token[0] !== \"SPACE\") {\n            tokens.push(token);\n        }\n        pos += size;\n    }\n    return tokens;\n}\nvar TypeTagParser = class {\n    constructor(tagStr, typeTags){\n        this.typeTags = [];\n        this.tokens = tokenize(tagStr);\n        this.typeTags = typeTags || [];\n    }\n    consume(targetToken) {\n        const token = this.tokens.shift();\n        if (!token || token[1] !== targetToken) {\n            bail(\"Invalid type tag.\");\n        }\n    }\n    parseCommaList(endToken, allowTraillingComma) {\n        const res = [];\n        if (this.tokens.length <= 0) {\n            bail(\"Invalid type tag.\");\n        }\n        while(this.tokens[0][1] !== endToken){\n            res.push(this.parseTypeTag());\n            if (this.tokens.length > 0 && this.tokens[0][1] === endToken) {\n                break;\n            }\n            this.consume(\",\");\n            if (this.tokens.length > 0 && this.tokens[0][1] === endToken && allowTraillingComma) {\n                break;\n            }\n            if (this.tokens.length <= 0) {\n                bail(\"Invalid type tag.\");\n            }\n        }\n        return res;\n    }\n    parseTypeTag() {\n        if (this.tokens.length === 0) {\n            bail(\"Invalid type tag.\");\n        }\n        const [tokenTy, tokenVal] = this.tokens.shift();\n        if (tokenVal === \"u8\") {\n            return new TypeTagU8();\n        }\n        if (tokenVal === \"u16\") {\n            return new TypeTagU16();\n        }\n        if (tokenVal === \"u32\") {\n            return new TypeTagU32();\n        }\n        if (tokenVal === \"u64\") {\n            return new TypeTagU64();\n        }\n        if (tokenVal === \"u128\") {\n            return new TypeTagU128();\n        }\n        if (tokenVal === \"u256\") {\n            return new TypeTagU256();\n        }\n        if (tokenVal === \"bool\") {\n            return new TypeTagBool();\n        }\n        if (tokenVal === \"address\") {\n            return new TypeTagAddress();\n        }\n        if (tokenVal === \"vector\") {\n            this.consume(\"<\");\n            const res = this.parseTypeTag();\n            this.consume(\">\");\n            return new TypeTagVector(res);\n        }\n        if (tokenVal === \"string\") {\n            return new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"string\"), new Identifier(\"String\"), []);\n        }\n        if (tokenTy === \"IDENT\" && (tokenVal.startsWith(\"0x\") || tokenVal.startsWith(\"0X\"))) {\n            const address = tokenVal;\n            this.consume(\"::\");\n            const [moduleTokenTy, module] = this.tokens.shift();\n            if (moduleTokenTy !== \"IDENT\") {\n                bail(\"Invalid type tag.\");\n            }\n            this.consume(\"::\");\n            const [nameTokenTy, name] = this.tokens.shift();\n            if (nameTokenTy !== \"IDENT\") {\n                bail(\"Invalid type tag.\");\n            }\n            if (module === \"object\" && name === \"Object\") {\n                this.tokens.splice(0, 3);\n                return new TypeTagAddress();\n            }\n            let tyTags = [];\n            if (this.tokens.length > 0 && this.tokens[0][1] === \"<\") {\n                this.consume(\"<\");\n                tyTags = this.parseCommaList(\">\", true);\n                this.consume(\">\");\n            }\n            const structTag = new StructTag(AccountAddress.fromHex(address), new Identifier(module), new Identifier(name), tyTags);\n            return new TypeTagStruct(structTag);\n        }\n        if (tokenTy === \"GENERIC\") {\n            if (this.typeTags.length === 0) {\n                bail(\"Can't convert generic type since no typeTags were specified.\");\n            }\n            const idx = parseInt(tokenVal.substring(1), 10);\n            return new TypeTagParser(this.typeTags[idx]).parseTypeTag();\n        }\n        throw new Error(\"Invalid type tag.\");\n    }\n};\nvar TypeTagParserError = class extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"TypeTagParserError\";\n    }\n};\n// src/aptos_types/transaction.ts\nvar RawTransaction = class {\n    constructor(sender, sequence_number, payload, max_gas_amount, gas_unit_price, expiration_timestamp_secs, chain_id){\n        this.sender = sender;\n        this.sequence_number = sequence_number;\n        this.payload = payload;\n        this.max_gas_amount = max_gas_amount;\n        this.gas_unit_price = gas_unit_price;\n        this.expiration_timestamp_secs = expiration_timestamp_secs;\n        this.chain_id = chain_id;\n    }\n    serialize(serializer) {\n        this.sender.serialize(serializer);\n        serializer.serializeU64(this.sequence_number);\n        this.payload.serialize(serializer);\n        serializer.serializeU64(this.max_gas_amount);\n        serializer.serializeU64(this.gas_unit_price);\n        serializer.serializeU64(this.expiration_timestamp_secs);\n        this.chain_id.serialize(serializer);\n    }\n    static deserialize(deserializer) {\n        const sender = AccountAddress.deserialize(deserializer);\n        const sequence_number = deserializer.deserializeU64();\n        const payload = TransactionPayload.deserialize(deserializer);\n        const max_gas_amount = deserializer.deserializeU64();\n        const gas_unit_price = deserializer.deserializeU64();\n        const expiration_timestamp_secs = deserializer.deserializeU64();\n        const chain_id = ChainId.deserialize(deserializer);\n        return new RawTransaction(sender, sequence_number, payload, max_gas_amount, gas_unit_price, expiration_timestamp_secs, chain_id);\n    }\n};\nvar Script = class {\n    constructor(code, ty_args, args){\n        this.code = code;\n        this.ty_args = ty_args;\n        this.args = args;\n    }\n    serialize(serializer) {\n        serializer.serializeBytes(this.code);\n        serializeVector(this.ty_args, serializer);\n        serializeVector(this.args, serializer);\n    }\n    static deserialize(deserializer) {\n        const code = deserializer.deserializeBytes();\n        const ty_args = deserializeVector(deserializer, TypeTag);\n        const args = deserializeVector(deserializer, TransactionArgument);\n        return new Script(code, ty_args, args);\n    }\n};\nvar EntryFunction = class {\n    constructor(module_name, function_name, ty_args, args){\n        this.module_name = module_name;\n        this.function_name = function_name;\n        this.ty_args = ty_args;\n        this.args = args;\n    }\n    static natural(module, func, ty_args, args) {\n        return new EntryFunction(ModuleId.fromStr(module), new Identifier(func), ty_args, args);\n    }\n    static natual(module, func, ty_args, args) {\n        return EntryFunction.natural(module, func, ty_args, args);\n    }\n    serialize(serializer) {\n        this.module_name.serialize(serializer);\n        this.function_name.serialize(serializer);\n        serializeVector(this.ty_args, serializer);\n        serializer.serializeU32AsUleb128(this.args.length);\n        this.args.forEach((item)=>{\n            serializer.serializeBytes(item);\n        });\n    }\n    static deserialize(deserializer) {\n        const module_name = ModuleId.deserialize(deserializer);\n        const function_name = Identifier.deserialize(deserializer);\n        const ty_args = deserializeVector(deserializer, TypeTag);\n        const length = deserializer.deserializeUleb128AsU32();\n        const list = [];\n        for(let i = 0; i < length; i += 1){\n            list.push(deserializer.deserializeBytes());\n        }\n        const args = list;\n        return new EntryFunction(module_name, function_name, ty_args, args);\n    }\n};\nvar MultiSigTransactionPayload = class {\n    constructor(transaction_payload){\n        this.transaction_payload = transaction_payload;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n        this.transaction_payload.serialize(serializer);\n    }\n    static deserialize(deserializer) {\n        deserializer.deserializeUleb128AsU32();\n        return new MultiSigTransactionPayload(EntryFunction.deserialize(deserializer));\n    }\n};\nvar MultiSig = class {\n    constructor(multisig_address, transaction_payload){\n        this.multisig_address = multisig_address;\n        this.transaction_payload = transaction_payload;\n    }\n    serialize(serializer) {\n        this.multisig_address.serialize(serializer);\n        if (this.transaction_payload === void 0) {\n            serializer.serializeBool(false);\n        } else {\n            serializer.serializeBool(true);\n            this.transaction_payload.serialize(serializer);\n        }\n    }\n    static deserialize(deserializer) {\n        const multisig_address = AccountAddress.deserialize(deserializer);\n        const payloadPresent = deserializer.deserializeBool();\n        let transaction_payload;\n        if (payloadPresent) {\n            transaction_payload = MultiSigTransactionPayload.deserialize(deserializer);\n        }\n        return new MultiSig(multisig_address, transaction_payload);\n    }\n};\nvar Module = class {\n    constructor(code){\n        this.code = code;\n    }\n    serialize(serializer) {\n        serializer.serializeBytes(this.code);\n    }\n    static deserialize(deserializer) {\n        const code = deserializer.deserializeBytes();\n        return new Module(code);\n    }\n};\nvar ModuleId = class {\n    constructor(address, name){\n        this.address = address;\n        this.name = name;\n    }\n    static fromStr(moduleId) {\n        const parts = moduleId.split(\"::\");\n        if (parts.length !== 2) {\n            throw new Error(\"Invalid module id.\");\n        }\n        return new ModuleId(AccountAddress.fromHex(new HexString(parts[0])), new Identifier(parts[1]));\n    }\n    serialize(serializer) {\n        this.address.serialize(serializer);\n        this.name.serialize(serializer);\n    }\n    static deserialize(deserializer) {\n        const address = AccountAddress.deserialize(deserializer);\n        const name = Identifier.deserialize(deserializer);\n        return new ModuleId(address, name);\n    }\n};\nvar ChangeSet = class {\n    serialize(serializer) {\n        throw new Error(\"Not implemented.\");\n    }\n    static deserialize(deserializer) {\n        throw new Error(\"Not implemented.\");\n    }\n};\nvar WriteSet = class {\n    serialize(serializer) {\n        throw new Error(\"Not implmented.\");\n    }\n    static deserialize(deserializer) {\n        throw new Error(\"Not implmented.\");\n    }\n};\nvar SignedTransaction = class {\n    constructor(raw_txn, authenticator){\n        this.raw_txn = raw_txn;\n        this.authenticator = authenticator;\n    }\n    serialize(serializer) {\n        this.raw_txn.serialize(serializer);\n        this.authenticator.serialize(serializer);\n    }\n    static deserialize(deserializer) {\n        const raw_txn = RawTransaction.deserialize(deserializer);\n        const authenticator = TransactionAuthenticator.deserialize(deserializer);\n        return new SignedTransaction(raw_txn, authenticator);\n    }\n};\nvar RawTransactionWithData = class {\n    static deserialize(deserializer) {\n        const index = deserializer.deserializeUleb128AsU32();\n        switch(index){\n            case 0:\n                return MultiAgentRawTransaction.load(deserializer);\n            default:\n                throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n        }\n    }\n};\nvar MultiAgentRawTransaction = class extends RawTransactionWithData {\n    constructor(raw_txn, secondary_signer_addresses){\n        super();\n        this.raw_txn = raw_txn;\n        this.secondary_signer_addresses = secondary_signer_addresses;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n        this.raw_txn.serialize(serializer);\n        serializeVector(this.secondary_signer_addresses, serializer);\n    }\n    static load(deserializer) {\n        const rawTxn = RawTransaction.deserialize(deserializer);\n        const secondarySignerAddresses = deserializeVector(deserializer, AccountAddress);\n        return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n    }\n};\nvar TransactionPayload = class {\n    static deserialize(deserializer) {\n        const index = deserializer.deserializeUleb128AsU32();\n        switch(index){\n            case 0:\n                return TransactionPayloadScript.load(deserializer);\n            case 2:\n                return TransactionPayloadEntryFunction.load(deserializer);\n            case 3:\n                return TransactionPayloadMultisig.load(deserializer);\n            default:\n                throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n        }\n    }\n};\nvar TransactionPayloadScript = class extends TransactionPayload {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n        this.value.serialize(serializer);\n    }\n    static load(deserializer) {\n        const value = Script.deserialize(deserializer);\n        return new TransactionPayloadScript(value);\n    }\n};\nvar TransactionPayloadEntryFunction = class extends TransactionPayload {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(2);\n        this.value.serialize(serializer);\n    }\n    static load(deserializer) {\n        const value = EntryFunction.deserialize(deserializer);\n        return new TransactionPayloadEntryFunction(value);\n    }\n};\nvar TransactionPayloadMultisig = class extends TransactionPayload {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(3);\n        this.value.serialize(serializer);\n    }\n    static load(deserializer) {\n        const value = MultiSig.deserialize(deserializer);\n        return new TransactionPayloadMultisig(value);\n    }\n};\nvar ChainId = class {\n    constructor(value){\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU8(this.value);\n    }\n    static deserialize(deserializer) {\n        const value = deserializer.deserializeU8();\n        return new ChainId(value);\n    }\n};\nvar TransactionArgument = class {\n    static deserialize(deserializer) {\n        const index = deserializer.deserializeUleb128AsU32();\n        switch(index){\n            case 0:\n                return TransactionArgumentU8.load(deserializer);\n            case 1:\n                return TransactionArgumentU64.load(deserializer);\n            case 2:\n                return TransactionArgumentU128.load(deserializer);\n            case 3:\n                return TransactionArgumentAddress.load(deserializer);\n            case 4:\n                return TransactionArgumentU8Vector.load(deserializer);\n            case 5:\n                return TransactionArgumentBool.load(deserializer);\n            case 6:\n                return TransactionArgumentU16.load(deserializer);\n            case 7:\n                return TransactionArgumentU32.load(deserializer);\n            case 8:\n                return TransactionArgumentU256.load(deserializer);\n            default:\n                throw new Error(`Unknown variant index for TransactionArgument: ${index}`);\n        }\n    }\n};\nvar TransactionArgumentU8 = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n        serializer.serializeU8(this.value);\n    }\n    static load(deserializer) {\n        const value = deserializer.deserializeU8();\n        return new TransactionArgumentU8(value);\n    }\n};\nvar TransactionArgumentU16 = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(6);\n        serializer.serializeU16(this.value);\n    }\n    static load(deserializer) {\n        const value = deserializer.deserializeU16();\n        return new TransactionArgumentU16(value);\n    }\n};\nvar TransactionArgumentU32 = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(7);\n        serializer.serializeU32(this.value);\n    }\n    static load(deserializer) {\n        const value = deserializer.deserializeU32();\n        return new TransactionArgumentU32(value);\n    }\n};\nvar TransactionArgumentU64 = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(1);\n        serializer.serializeU64(this.value);\n    }\n    static load(deserializer) {\n        const value = deserializer.deserializeU64();\n        return new TransactionArgumentU64(value);\n    }\n};\nvar TransactionArgumentU128 = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(2);\n        serializer.serializeU128(this.value);\n    }\n    static load(deserializer) {\n        const value = deserializer.deserializeU128();\n        return new TransactionArgumentU128(value);\n    }\n};\nvar TransactionArgumentU256 = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(8);\n        serializer.serializeU256(this.value);\n    }\n    static load(deserializer) {\n        const value = deserializer.deserializeU256();\n        return new TransactionArgumentU256(value);\n    }\n};\nvar TransactionArgumentAddress = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(3);\n        this.value.serialize(serializer);\n    }\n    static load(deserializer) {\n        const value = AccountAddress.deserialize(deserializer);\n        return new TransactionArgumentAddress(value);\n    }\n};\nvar TransactionArgumentU8Vector = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(4);\n        serializer.serializeBytes(this.value);\n    }\n    static load(deserializer) {\n        const value = deserializer.deserializeBytes();\n        return new TransactionArgumentU8Vector(value);\n    }\n};\nvar TransactionArgumentBool = class extends TransactionArgument {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(5);\n        serializer.serializeBool(this.value);\n    }\n    static load(deserializer) {\n        const value = deserializer.deserializeBool();\n        return new TransactionArgumentBool(value);\n    }\n};\nvar Transaction = class {\n    getHashSalt() {\n        const hash = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256.create();\n        hash.update(\"APTOS::Transaction\");\n        return hash.digest();\n    }\n    static deserialize(deserializer) {\n        const index = deserializer.deserializeUleb128AsU32();\n        switch(index){\n            case 0:\n                return UserTransaction.load(deserializer);\n            default:\n                throw new Error(`Unknown variant index for Transaction: ${index}`);\n        }\n    }\n};\nvar UserTransaction = class extends Transaction {\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    hash() {\n        const hash = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256.create();\n        hash.update(this.getHashSalt());\n        hash.update(bcsToBytes(this));\n        return hash.digest();\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n        this.value.serialize(serializer);\n    }\n    static load(deserializer) {\n        return new UserTransaction(SignedTransaction.deserialize(deserializer));\n    }\n};\n// src/aptos_types/abi.ts\nvar TypeArgumentABI = class {\n    constructor(name){\n        this.name = name;\n    }\n    serialize(serializer) {\n        serializer.serializeStr(this.name);\n    }\n    static deserialize(deserializer) {\n        const name = deserializer.deserializeStr();\n        return new TypeArgumentABI(name);\n    }\n};\nvar ArgumentABI = class {\n    constructor(name, type_tag){\n        this.name = name;\n        this.type_tag = type_tag;\n    }\n    serialize(serializer) {\n        serializer.serializeStr(this.name);\n        this.type_tag.serialize(serializer);\n    }\n    static deserialize(deserializer) {\n        const name = deserializer.deserializeStr();\n        const typeTag = TypeTag.deserialize(deserializer);\n        return new ArgumentABI(name, typeTag);\n    }\n};\nvar ScriptABI = class {\n    static deserialize(deserializer) {\n        const index = deserializer.deserializeUleb128AsU32();\n        switch(index){\n            case 0:\n                return TransactionScriptABI.load(deserializer);\n            case 1:\n                return EntryFunctionABI.load(deserializer);\n            default:\n                throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n        }\n    }\n};\nvar TransactionScriptABI = class extends ScriptABI {\n    constructor(name, doc, code, ty_args, args){\n        super();\n        this.name = name;\n        this.doc = doc;\n        this.code = code;\n        this.ty_args = ty_args;\n        this.args = args;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(0);\n        serializer.serializeStr(this.name);\n        serializer.serializeStr(this.doc);\n        serializer.serializeBytes(this.code);\n        serializeVector(this.ty_args, serializer);\n        serializeVector(this.args, serializer);\n    }\n    static load(deserializer) {\n        const name = deserializer.deserializeStr();\n        const doc = deserializer.deserializeStr();\n        const code = deserializer.deserializeBytes();\n        const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n        const args = deserializeVector(deserializer, ArgumentABI);\n        return new TransactionScriptABI(name, doc, code, tyArgs, args);\n    }\n};\nvar EntryFunctionABI = class extends ScriptABI {\n    constructor(name, module_name, doc, ty_args, args){\n        super();\n        this.name = name;\n        this.module_name = module_name;\n        this.doc = doc;\n        this.ty_args = ty_args;\n        this.args = args;\n    }\n    serialize(serializer) {\n        serializer.serializeU32AsUleb128(1);\n        serializer.serializeStr(this.name);\n        this.module_name.serialize(serializer);\n        serializer.serializeStr(this.doc);\n        serializeVector(this.ty_args, serializer);\n        serializeVector(this.args, serializer);\n    }\n    static load(deserializer) {\n        const name = deserializer.deserializeStr();\n        const moduleName = ModuleId.deserialize(deserializer);\n        const doc = deserializer.deserializeStr();\n        const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n        const args = deserializeVector(deserializer, ArgumentABI);\n        return new EntryFunctionABI(name, moduleName, doc, tyArgs, args);\n    }\n};\n// src/aptos_types/authentication_key.ts\n\nvar _AuthenticationKey = class {\n    constructor(bytes){\n        if (bytes.length !== _AuthenticationKey.LENGTH) {\n            throw new Error(\"Expected a byte array of length 32\");\n        }\n        this.bytes = bytes;\n    }\n    static fromMultiEd25519PublicKey(publicKey) {\n        const pubKeyBytes = publicKey.toBytes();\n        const bytes = new Uint8Array(pubKeyBytes.length + 1);\n        bytes.set(pubKeyBytes);\n        bytes.set([\n            _AuthenticationKey.MULTI_ED25519_SCHEME\n        ], pubKeyBytes.length);\n        const hash = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256.create();\n        hash.update(bytes);\n        return new _AuthenticationKey(hash.digest());\n    }\n    static fromEd25519PublicKey(publicKey) {\n        const pubKeyBytes = publicKey.value;\n        const bytes = new Uint8Array(pubKeyBytes.length + 1);\n        bytes.set(pubKeyBytes);\n        bytes.set([\n            _AuthenticationKey.ED25519_SCHEME\n        ], pubKeyBytes.length);\n        const hash = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256.create();\n        hash.update(bytes);\n        return new _AuthenticationKey(hash.digest());\n    }\n    derivedAddress() {\n        return HexString.fromUint8Array(this.bytes);\n    }\n};\nvar AuthenticationKey = _AuthenticationKey;\nAuthenticationKey.LENGTH = 32;\nAuthenticationKey.MULTI_ED25519_SCHEME = 1;\nAuthenticationKey.ED25519_SCHEME = 0;\nAuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME = 255;\n// src/aptos_types/rotation_proof_challenge.ts\nvar RotationProofChallenge = class {\n    constructor(accountAddress, moduleName, structName, sequenceNumber, originator, currentAuthKey, newPublicKey){\n        this.accountAddress = accountAddress;\n        this.moduleName = moduleName;\n        this.structName = structName;\n        this.sequenceNumber = sequenceNumber;\n        this.originator = originator;\n        this.currentAuthKey = currentAuthKey;\n        this.newPublicKey = newPublicKey;\n    }\n    serialize(serializer) {\n        this.accountAddress.serialize(serializer);\n        serializer.serializeStr(this.moduleName);\n        serializer.serializeStr(this.structName);\n        serializer.serializeU64(this.sequenceNumber);\n        this.originator.serialize(serializer);\n        this.currentAuthKey.serialize(serializer);\n        serializer.serializeBytes(this.newPublicKey);\n    }\n};\n// src/account/aptos_account.ts\nvar _AptosAccount = class {\n    static fromAptosAccountObject(obj) {\n        return new _AptosAccount(HexString.ensure(obj.privateKeyHex).toUint8Array(), obj.address);\n    }\n    static isValidPath(path) {\n        return /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'+$/.test(path);\n    }\n    static fromDerivePath(path, mnemonics) {\n        if (!_AptosAccount.isValidPath(path)) {\n            throw new Error(\"Invalid derivation path\");\n        }\n        const normalizeMnemonics = mnemonics.trim().split(/\\s+/).map((part)=>part.toLowerCase()).join(\" \");\n        const { key } = derivePath(path, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(_scure_bip39__WEBPACK_IMPORTED_MODULE_1__.mnemonicToSeedSync(normalizeMnemonics)));\n        return new _AptosAccount(key);\n    }\n    constructor(privateKeyBytes, address){\n        if (privateKeyBytes) {\n            this.signingKey = tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.keyPair.fromSeed(privateKeyBytes.slice(0, 32));\n        } else {\n            this.signingKey = tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.keyPair();\n        }\n        this.accountAddress = HexString.ensure(address || this.authKey().hex());\n    }\n    address() {\n        return this.accountAddress;\n    }\n    authKey() {\n        const pubKey = new Ed25519PublicKey(this.signingKey.publicKey);\n        const authKey = AuthenticationKey.fromEd25519PublicKey(pubKey);\n        return authKey.derivedAddress();\n    }\n    static getResourceAccountAddress(sourceAddress, seed) {\n        const source = bcsToBytes(AccountAddress.fromHex(sourceAddress));\n        const bytes = new Uint8Array([\n            ...source,\n            ...seed,\n            AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME\n        ]);\n        const hash = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256.create();\n        hash.update(bytes);\n        return HexString.fromUint8Array(hash.digest());\n    }\n    pubKey() {\n        return HexString.fromUint8Array(this.signingKey.publicKey);\n    }\n    signBuffer(buffer) {\n        const signature = tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.detached(buffer, this.signingKey.secretKey);\n        return HexString.fromUint8Array(signature);\n    }\n    signHexString(hexString) {\n        const toSign = HexString.ensure(hexString).toUint8Array();\n        return this.signBuffer(toSign);\n    }\n    verifySignature(message, signature) {\n        const rawMessage = HexString.ensure(message).toUint8Array();\n        const rawSignature = HexString.ensure(signature).toUint8Array();\n        return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.detached.verify(rawMessage, rawSignature, this.signingKey.publicKey);\n    }\n    toPrivateKeyObject() {\n        return {\n            address: this.address().hex(),\n            publicKeyHex: this.pubKey().hex(),\n            privateKeyHex: HexString.fromUint8Array(this.signingKey.secretKey.slice(0, 32)).hex()\n        };\n    }\n};\nvar AptosAccount = _AptosAccount;\n__decorateClass([\n    Memoize()\n], AptosAccount.prototype, \"authKey\", 1);\nfunction getAddressFromAccountOrAddress(accountOrAddress) {\n    return accountOrAddress instanceof AptosAccount ? accountOrAddress.address() : HexString.ensure(accountOrAddress);\n}\n// src/providers/indexer.ts\n\n// src/indexer/generated/queries.ts\nvar TokenDataFieldsFragmentDoc = `\n    fragment TokenDataFields on current_token_datas {\n  creator_address\n  collection_name\n  description\n  metadata_uri\n  name\n  token_data_id_hash\n  collection_data_id_hash\n}\n    `;\nvar CollectionDataFieldsFragmentDoc = `\n    fragment CollectionDataFields on current_collection_datas {\n  metadata_uri\n  supply\n  description\n  collection_name\n  collection_data_id_hash\n  table_handle\n  creator_address\n}\n    `;\nvar GetAccountCoinsData = `\n    query getAccountCoinsData($owner_address: String, $offset: Int, $limit: Int) {\n  current_coin_balances(\n    where: {owner_address: {_eq: $owner_address}}\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    coin_type\n    coin_info {\n      name\n      decimals\n      symbol\n    }\n  }\n}\n    `;\nvar GetAccountCurrentTokens = `\n    query getAccountCurrentTokens($address: String!, $offset: Int, $limit: Int) {\n  current_token_ownerships(\n    where: {owner_address: {_eq: $address}, amount: {_gt: 0}}\n    order_by: [{last_transaction_version: desc}, {creator_address: asc}, {collection_name: asc}, {name: asc}]\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    current_token_data {\n      ...TokenDataFields\n    }\n    current_collection_data {\n      ...CollectionDataFields\n    }\n    last_transaction_version\n    property_version\n  }\n}\n    ${TokenDataFieldsFragmentDoc}\n${CollectionDataFieldsFragmentDoc}`;\nvar GetAccountTokensCount = `\n    query getAccountTokensCount($owner_address: String) {\n  current_token_ownerships_aggregate(\n    where: {owner_address: {_eq: $owner_address}, amount: {_gt: \"0\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nvar GetAccountTransactionsCount = `\n    query getAccountTransactionsCount($address: String) {\n  move_resources_aggregate(\n    where: {address: {_eq: $address}}\n    distinct_on: transaction_version\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nvar GetAccountTransactionsData = `\n    query getAccountTransactionsData($address: String, $limit: Int, $offset: Int) {\n  move_resources(\n    where: {address: {_eq: $address}}\n    order_by: {transaction_version: desc}\n    distinct_on: transaction_version\n    limit: $limit\n    offset: $offset\n  ) {\n    transaction_version\n  }\n}\n    `;\nvar GetCurrentDelegatorBalancesCount = `\n    query getCurrentDelegatorBalancesCount($poolAddress: String) {\n  current_delegator_balances_aggregate(\n    where: {pool_type: {_eq: \"active_shares\"}, pool_address: {_eq: $poolAddress}, amount: {_gt: \"0\"}}\n    distinct_on: delegator_address\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nvar GetDelegatedStakingActivities = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `;\nvar GetIndexerLedgerInfo = `\n    query getIndexerLedgerInfo {\n  ledger_infos {\n    chain_id\n  }\n}\n    `;\nvar GetTokenActivities = `\n    query getTokenActivities($idHash: String!, $offset: Int, $limit: Int) {\n  token_activities(\n    where: {token_data_id_hash: {_eq: $idHash}}\n    order_by: {transaction_version: desc}\n    offset: $offset\n    limit: $limit\n  ) {\n    creator_address\n    collection_name\n    name\n    token_data_id_hash\n    collection_data_id_hash\n    from_address\n    to_address\n    transaction_version\n    transaction_timestamp\n    property_version\n    transfer_type\n    event_sequence_number\n    token_amount\n  }\n}\n    `;\nvar GetTokenActivitiesCount = `\n    query getTokenActivitiesCount($token_id: String) {\n  token_activities_aggregate(where: {token_data_id_hash: {_eq: $token_id}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nvar GetTokenData = `\n    query getTokenData($token_id: String) {\n  current_token_datas(where: {token_data_id_hash: {_eq: $token_id}}) {\n    token_data_id_hash\n    name\n    collection_name\n    creator_address\n    default_properties\n    largest_property_version\n    maximum\n    metadata_uri\n    payee_address\n    royalty_points_denominator\n    royalty_points_numerator\n    supply\n  }\n}\n    `;\nvar GetTokenOwnersData = `\n    query getTokenOwnersData($token_id: String, $property_version: numeric) {\n  current_token_ownerships(\n    where: {token_data_id_hash: {_eq: $token_id}, property_version: {_eq: $property_version}}\n  ) {\n    owner_address\n  }\n}\n    `;\nvar GetTopUserTransactions = `\n    query getTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `;\nvar GetUserTransactions = `\n    query getUserTransactions($limit: Int, $start_version: bigint, $offset: Int) {\n  user_transactions(\n    limit: $limit\n    order_by: {version: desc}\n    where: {version: {_lte: $start_version}}\n    offset: $offset\n  ) {\n    version\n  }\n}\n    `;\n// src/providers/indexer.ts\nvar IndexerClient = class {\n    constructor(endpoint){\n        this.endpoint = endpoint;\n    }\n    static validateAddress(address) {\n        if (address.length < 66) {\n            throw new Error(\"Address needs to be 66 chars long.\");\n        }\n    }\n    async queryIndexer(graphqlQuery) {\n        const { data } = await axios__WEBPACK_IMPORTED_MODULE_6__.post(this.endpoint, graphqlQuery);\n        if (data.errors) {\n            throw new Error(`Indexer data error ${JSON.stringify(data.errors, null, \" \")}`);\n        }\n        return data.data;\n    }\n    async getIndexerLedgerInfo() {\n        const graphqlQuery = {\n            query: GetIndexerLedgerInfo\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getAccountNFTs(ownerAddress, options) {\n        const address = HexString.ensure(ownerAddress).hex();\n        IndexerClient.validateAddress(address);\n        const graphqlQuery = {\n            query: GetAccountCurrentTokens,\n            variables: {\n                address,\n                offset: options == null ? void 0 : options.offset,\n                limit: options == null ? void 0 : options.limit\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getTokenActivities(idHash, options) {\n        const graphqlQuery = {\n            query: GetTokenActivities,\n            variables: {\n                idHash,\n                offset: options == null ? void 0 : options.offset,\n                limit: options == null ? void 0 : options.limit\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getAccountCoinsData(ownerAddress, options) {\n        const address = HexString.ensure(ownerAddress).hex();\n        IndexerClient.validateAddress(address);\n        const graphqlQuery = {\n            query: GetAccountCoinsData,\n            variables: {\n                owner_address: address,\n                offset: options == null ? void 0 : options.offset,\n                limit: options == null ? void 0 : options.limit\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getAccountTokensCount(ownerAddress) {\n        const address = HexString.ensure(ownerAddress).hex();\n        IndexerClient.validateAddress(address);\n        const graphqlQuery = {\n            query: GetAccountTokensCount,\n            variables: {\n                owner_address: address\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getAccountTransactionsCount(accountAddress) {\n        const address = HexString.ensure(accountAddress).hex();\n        IndexerClient.validateAddress(address);\n        const graphqlQuery = {\n            query: GetAccountTransactionsCount,\n            variables: {\n                address\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getAccountTransactionsData(accountAddress, options) {\n        const address = HexString.ensure(accountAddress).hex();\n        IndexerClient.validateAddress(address);\n        const graphqlQuery = {\n            query: GetAccountTransactionsData,\n            variables: {\n                address,\n                offset: options == null ? void 0 : options.offset,\n                limit: options == null ? void 0 : options.limit\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getDelegatedStakingActivities(delegatorAddress, poolAddress) {\n        const delegator = HexString.ensure(delegatorAddress).hex();\n        const pool = HexString.ensure(poolAddress).hex();\n        IndexerClient.validateAddress(delegator);\n        IndexerClient.validateAddress(pool);\n        const graphqlQuery = {\n            query: GetDelegatedStakingActivities,\n            variables: {\n                delegatorAddress: delegator,\n                poolAddress: pool\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getTokenActivitiesCount(tokenId) {\n        const graphqlQuery = {\n            query: GetTokenActivitiesCount,\n            variables: {\n                token_id: tokenId\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getTokenData(tokenId) {\n        const graphqlQuery = {\n            query: GetTokenData,\n            variables: {\n                token_id: tokenId\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getTokenOwnersData(tokenId, propertyVersion) {\n        const graphqlQuery = {\n            query: GetTokenOwnersData,\n            variables: {\n                token_id: tokenId,\n                property_version: propertyVersion\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getTopUserTransactions(limit) {\n        const graphqlQuery = {\n            query: GetTopUserTransactions,\n            variables: {\n                limit\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getUserTransactions(startVersion, options) {\n        const graphqlQuery = {\n            query: GetUserTransactions,\n            variables: {\n                start_version: startVersion,\n                offset: options == null ? void 0 : options.offset,\n                limit: options == null ? void 0 : options.limit\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n    async getCurrentDelegatorBalancesCount(poolAddress) {\n        const address = HexString.ensure(poolAddress).hex();\n        IndexerClient.validateAddress(address);\n        const graphqlQuery = {\n            query: GetCurrentDelegatorBalancesCount,\n            variables: {\n                poolAddress: address\n            }\n        };\n        return this.queryIndexer(graphqlQuery);\n    }\n};\n// src/generated/index.ts\nvar generated_exports = {};\n__export(generated_exports, {\n    $AccountData: ()=>$AccountData,\n    $AccountSignature: ()=>$AccountSignature,\n    $AccountSignature_Ed25519Signature: ()=>$AccountSignature_Ed25519Signature,\n    $AccountSignature_MultiEd25519Signature: ()=>$AccountSignature_MultiEd25519Signature,\n    $Address: ()=>$Address,\n    $AptosError: ()=>$AptosError,\n    $AptosErrorCode: ()=>$AptosErrorCode,\n    $Block: ()=>$Block,\n    $BlockMetadataTransaction: ()=>$BlockMetadataTransaction,\n    $DecodedTableData: ()=>$DecodedTableData,\n    $DeleteModule: ()=>$DeleteModule,\n    $DeleteResource: ()=>$DeleteResource,\n    $DeleteTableItem: ()=>$DeleteTableItem,\n    $DeletedTableData: ()=>$DeletedTableData,\n    $DirectWriteSet: ()=>$DirectWriteSet,\n    $Ed25519Signature: ()=>$Ed25519Signature,\n    $EncodeSubmissionRequest: ()=>$EncodeSubmissionRequest,\n    $EntryFunctionId: ()=>$EntryFunctionId,\n    $EntryFunctionPayload: ()=>$EntryFunctionPayload,\n    $Event: ()=>$Event,\n    $EventGuid: ()=>$EventGuid,\n    $GasEstimation: ()=>$GasEstimation,\n    $GenesisPayload: ()=>$GenesisPayload,\n    $GenesisPayload_WriteSetPayload: ()=>$GenesisPayload_WriteSetPayload,\n    $GenesisTransaction: ()=>$GenesisTransaction,\n    $HashValue: ()=>$HashValue,\n    $HealthCheckSuccess: ()=>$HealthCheckSuccess,\n    $HexEncodedBytes: ()=>$HexEncodedBytes,\n    $IdentifierWrapper: ()=>$IdentifierWrapper,\n    $IndexResponse: ()=>$IndexResponse,\n    $ModuleBundlePayload: ()=>$ModuleBundlePayload,\n    $MoveAbility: ()=>$MoveAbility,\n    $MoveFunction: ()=>$MoveFunction,\n    $MoveFunctionGenericTypeParam: ()=>$MoveFunctionGenericTypeParam,\n    $MoveFunctionVisibility: ()=>$MoveFunctionVisibility,\n    $MoveModule: ()=>$MoveModule,\n    $MoveModuleBytecode: ()=>$MoveModuleBytecode,\n    $MoveModuleId: ()=>$MoveModuleId,\n    $MoveResource: ()=>$MoveResource,\n    $MoveScriptBytecode: ()=>$MoveScriptBytecode,\n    $MoveStruct: ()=>$MoveStruct,\n    $MoveStructField: ()=>$MoveStructField,\n    $MoveStructGenericTypeParam: ()=>$MoveStructGenericTypeParam,\n    $MoveStructTag: ()=>$MoveStructTag,\n    $MoveStructValue: ()=>$MoveStructValue,\n    $MoveType: ()=>$MoveType,\n    $MoveValue: ()=>$MoveValue,\n    $MultiAgentSignature: ()=>$MultiAgentSignature,\n    $MultiEd25519Signature: ()=>$MultiEd25519Signature,\n    $MultisigPayload: ()=>$MultisigPayload,\n    $MultisigTransactionPayload: ()=>$MultisigTransactionPayload,\n    $PendingTransaction: ()=>$PendingTransaction,\n    $RawTableItemRequest: ()=>$RawTableItemRequest,\n    $RoleType: ()=>$RoleType,\n    $ScriptPayload: ()=>$ScriptPayload,\n    $ScriptWriteSet: ()=>$ScriptWriteSet,\n    $StateCheckpointTransaction: ()=>$StateCheckpointTransaction,\n    $StateKeyWrapper: ()=>$StateKeyWrapper,\n    $SubmitTransactionRequest: ()=>$SubmitTransactionRequest,\n    $TableItemRequest: ()=>$TableItemRequest,\n    $Transaction: ()=>$Transaction,\n    $TransactionPayload: ()=>$TransactionPayload,\n    $TransactionPayload_EntryFunctionPayload: ()=>$TransactionPayload_EntryFunctionPayload,\n    $TransactionPayload_ModuleBundlePayload: ()=>$TransactionPayload_ModuleBundlePayload,\n    $TransactionPayload_MultisigPayload: ()=>$TransactionPayload_MultisigPayload,\n    $TransactionPayload_ScriptPayload: ()=>$TransactionPayload_ScriptPayload,\n    $TransactionSignature: ()=>$TransactionSignature,\n    $TransactionSignature_Ed25519Signature: ()=>$TransactionSignature_Ed25519Signature,\n    $TransactionSignature_MultiAgentSignature: ()=>$TransactionSignature_MultiAgentSignature,\n    $TransactionSignature_MultiEd25519Signature: ()=>$TransactionSignature_MultiEd25519Signature,\n    $Transaction_BlockMetadataTransaction: ()=>$Transaction_BlockMetadataTransaction,\n    $Transaction_GenesisTransaction: ()=>$Transaction_GenesisTransaction,\n    $Transaction_PendingTransaction: ()=>$Transaction_PendingTransaction,\n    $Transaction_StateCheckpointTransaction: ()=>$Transaction_StateCheckpointTransaction,\n    $Transaction_UserTransaction: ()=>$Transaction_UserTransaction,\n    $TransactionsBatchSingleSubmissionFailure: ()=>$TransactionsBatchSingleSubmissionFailure,\n    $TransactionsBatchSubmissionResult: ()=>$TransactionsBatchSubmissionResult,\n    $U128: ()=>$U128,\n    $U256: ()=>$U256,\n    $U64: ()=>$U64,\n    $UserTransaction: ()=>$UserTransaction,\n    $VersionedEvent: ()=>$VersionedEvent,\n    $ViewRequest: ()=>$ViewRequest,\n    $WriteModule: ()=>$WriteModule,\n    $WriteResource: ()=>$WriteResource,\n    $WriteSet: ()=>$WriteSet,\n    $WriteSetChange: ()=>$WriteSetChange,\n    $WriteSetChange_DeleteModule: ()=>$WriteSetChange_DeleteModule,\n    $WriteSetChange_DeleteResource: ()=>$WriteSetChange_DeleteResource,\n    $WriteSetChange_DeleteTableItem: ()=>$WriteSetChange_DeleteTableItem,\n    $WriteSetChange_WriteModule: ()=>$WriteSetChange_WriteModule,\n    $WriteSetChange_WriteResource: ()=>$WriteSetChange_WriteResource,\n    $WriteSetChange_WriteTableItem: ()=>$WriteSetChange_WriteTableItem,\n    $WriteSetPayload: ()=>$WriteSetPayload,\n    $WriteSet_DirectWriteSet: ()=>$WriteSet_DirectWriteSet,\n    $WriteSet_ScriptWriteSet: ()=>$WriteSet_ScriptWriteSet,\n    $WriteTableItem: ()=>$WriteTableItem,\n    AccountsService: ()=>AccountsService,\n    ApiError: ()=>ApiError,\n    AptosErrorCode: ()=>AptosErrorCode,\n    AptosGeneratedClient: ()=>AptosGeneratedClient,\n    BaseHttpRequest: ()=>BaseHttpRequest,\n    BlocksService: ()=>BlocksService,\n    CancelError: ()=>CancelError,\n    CancelablePromise: ()=>CancelablePromise,\n    EventsService: ()=>EventsService,\n    GeneralService: ()=>GeneralService,\n    MoveFunctionVisibility: ()=>MoveFunctionVisibility,\n    OpenAPI: ()=>OpenAPI,\n    RoleType: ()=>RoleType,\n    TablesService: ()=>TablesService,\n    TransactionsService: ()=>TransactionsService,\n    ViewService: ()=>ViewService\n});\n// src/generated/core/BaseHttpRequest.ts\nvar BaseHttpRequest = class {\n    constructor(config){\n        this.config = config;\n    }\n};\n// src/generated/core/request.ts\n\n\n// src/generated/core/ApiError.ts\nvar ApiError = class extends Error {\n    constructor(request2, response, message){\n        super(message);\n        this.name = \"ApiError\";\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request2;\n    }\n};\n// src/generated/core/CancelablePromise.ts\nvar CancelError = class extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"CancelError\";\n    }\n    get isCancelled() {\n        return true;\n    }\n};\nvar CancelablePromise = class {\n    constructor(executor){\n        this._isResolved = false;\n        this._isRejected = false;\n        this._isCancelled = false;\n        this._cancelHandlers = [];\n        this._promise = new Promise((resolve2, reject)=>{\n            this._resolve = resolve2;\n            this._reject = reject;\n            const onResolve = (value)=>{\n                var _a;\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isResolved = true;\n                (_a = this._resolve) == null ? void 0 : _a.call(this, value);\n            };\n            const onReject = (reason)=>{\n                var _a;\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isRejected = true;\n                (_a = this._reject) == null ? void 0 : _a.call(this, reason);\n            };\n            const onCancel = (cancelHandler)=>{\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._cancelHandlers.push(cancelHandler);\n            };\n            Object.defineProperty(onCancel, \"isResolved\", {\n                get: ()=>this._isResolved\n            });\n            Object.defineProperty(onCancel, \"isRejected\", {\n                get: ()=>this._isRejected\n            });\n            Object.defineProperty(onCancel, \"isCancelled\", {\n                get: ()=>this._isCancelled\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    then(onFulfilled, onRejected) {\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this._promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this._promise.finally(onFinally);\n    }\n    cancel() {\n        var _a;\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n            return;\n        }\n        this._isCancelled = true;\n        if (this._cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this._cancelHandlers){\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn(\"Cancellation threw an error\", error);\n                return;\n            }\n        }\n        this._cancelHandlers.length = 0;\n        (_a = this._reject) == null ? void 0 : _a.call(this, new CancelError(\"Request aborted\"));\n    }\n    get isCancelled() {\n        return this._isCancelled;\n    }\n};\nSymbol.toStringTag;\n// src/generated/core/request.ts\nvar CookieJar = class {\n    constructor(jar2 = /* @__PURE__ */ new Map()){\n        this.jar = jar2;\n    }\n    setCookie(url, cookieStr) {\n        var _a;\n        const key = url.origin.toLowerCase();\n        if (!this.jar.has(key)) {\n            this.jar.set(key, []);\n        }\n        const cookie = CookieJar.parse(cookieStr);\n        this.jar.set(key, [\n            ...((_a = this.jar.get(key)) == null ? void 0 : _a.filter((c)=>c.name !== cookie.name)) || [],\n            cookie\n        ]);\n    }\n    getCookies(url) {\n        var _a;\n        const key = url.origin.toLowerCase();\n        if (!this.jar.get(key)) {\n            return [];\n        }\n        return ((_a = this.jar.get(key)) == null ? void 0 : _a.filter((cookie)=>!cookie.expires || cookie.expires > new Date())) || [];\n    }\n    static parse(str) {\n        if (typeof str !== \"string\") {\n            throw new Error(\"argument str must be a string\");\n        }\n        const parts = str.split(\";\").map((part)=>part.trim());\n        let cookie;\n        if (parts.length > 0) {\n            const [name, value] = parts[0].split(\"=\");\n            if (!name || !value) {\n                throw new Error(\"Invalid cookie\");\n            }\n            cookie = {\n                name,\n                value\n            };\n        } else {\n            throw new Error(\"Invalid cookie\");\n        }\n        parts.slice(1).forEach((part)=>{\n            const [name, value] = part.split(\"=\");\n            if (!name.trim()) {\n                throw new Error(\"Invalid cookie\");\n            }\n            const nameLow = name.toLowerCase();\n            const val = (value == null ? void 0 : value.charAt(0)) === \"'\" || (value == null ? void 0 : value.charAt(0)) === '\"' ? value == null ? void 0 : value.slice(1, -1) : value;\n            if (nameLow === \"expires\") {\n                cookie.expires = new Date(val);\n            }\n            if (nameLow === \"path\") {\n                cookie.path = val;\n            }\n            if (nameLow === \"samesite\") {\n                if (val !== \"Lax\" && val !== \"None\" && val !== \"Strict\") {\n                    throw new Error(\"Invalid cookie SameSite value\");\n                }\n                cookie.sameSite = val;\n            }\n            if (nameLow === \"secure\") {\n                cookie.secure = true;\n            }\n        });\n        return cookie;\n    }\n};\nvar jar = new CookieJar();\naxios__WEBPACK_IMPORTED_MODULE_6__.interceptors.response.use((response)=>{\n    if (Array.isArray(response.headers[\"set-cookie\"])) {\n        response.headers[\"set-cookie\"].forEach((c)=>{\n            jar.setCookie(new URL(response.config.url), c);\n        });\n    }\n    return response;\n});\naxios__WEBPACK_IMPORTED_MODULE_6__.interceptors.request.use(function(config) {\n    const cookies = jar.getCookies(new URL(config.url));\n    if ((cookies == null ? void 0 : cookies.length) > 0 && config.headers) {\n        config.headers.cookie = cookies.map((cookie)=>`${cookie.name}=${cookie.value}`).join(\"; \");\n    }\n    return config;\n});\nvar isDefined = (value)=>{\n    return value !== void 0 && value !== null;\n};\nvar isString = (value)=>{\n    return typeof value === \"string\";\n};\nvar isStringWithValue = (value)=>{\n    return isString(value) && value !== \"\";\n};\nvar isBlob = (value)=>{\n    return typeof value === \"object\" && typeof value.type === \"string\" && typeof value.stream === \"function\" && typeof value.arrayBuffer === \"function\" && typeof value.constructor === \"function\" && typeof value.constructor.name === \"string\" && /^(Blob|File)$/.test(value.constructor.name) && /^(Blob|File)$/.test(value[Symbol.toStringTag]);\n};\nvar isFormData = (value)=>{\n    return value instanceof form_data__WEBPACK_IMPORTED_MODULE_7__;\n};\nvar isSuccess = (status)=>{\n    return status >= 200 && status < 300;\n};\nvar base64 = (str)=>{\n    return btoa(str);\n};\nvar getQueryString = (params)=>{\n    const qs = [];\n    const append = (key, value)=>{\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n    const process = (key, value)=>{\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach((v)=>{\n                    process(key, v);\n                });\n            } else if (typeof value === \"object\") {\n                Object.entries(value).forEach(([k, v])=>{\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n    Object.entries(params).forEach(([key, value])=>{\n        process(key, value);\n    });\n    if (qs.length > 0) {\n        return `?${qs.join(\"&\")}`;\n    }\n    return \"\";\n};\nvar getUrl = (config, options)=>{\n    const encoder = config.ENCODE_PATH || encodeURI;\n    const path = options.url.replace(\"{api-version}\", config.VERSION).replace(/{(.*?)}/g, (substring, group)=>{\n        var _a;\n        if ((_a = options.path) == null ? void 0 : _a.hasOwnProperty(group)) {\n            return encoder(String(options.path[group]));\n        }\n        return substring;\n    });\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\nvar getFormData = (options)=>{\n    if (options.formData) {\n        const formData = new form_data__WEBPACK_IMPORTED_MODULE_7__();\n        const process = (key, value)=>{\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n        Object.entries(options.formData).filter(([_, value])=>isDefined(value)).forEach(([key, value])=>{\n            if (Array.isArray(value)) {\n                value.forEach((v)=>process(key, v));\n            } else {\n                process(key, value);\n            }\n        });\n        return formData;\n    }\n    return void 0;\n};\nvar resolve = async (options, resolver)=>{\n    if (typeof resolver === \"function\") {\n        return resolver(options);\n    }\n    return resolver;\n};\nvar getHeaders = async (config, options, formData)=>{\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n    const formHeaders = typeof (formData == null ? void 0 : formData.getHeaders) === \"function\" && (formData == null ? void 0 : formData.getHeaders()) || {};\n    const headers = Object.entries({\n        Accept: \"application/json\",\n        ...additionalHeaders,\n        ...options.headers,\n        ...formHeaders\n    }).filter(([_, value])=>isDefined(value)).reduce((headers2, [key, value])=>({\n            ...headers2,\n            [key]: String(value)\n        }), {});\n    if (isStringWithValue(token)) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers[\"Authorization\"] = `Basic ${credentials}`;\n    }\n    if (options.body) {\n        if (options.mediaType) {\n            headers[\"Content-Type\"] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers[\"Content-Type\"] = options.body.type || \"application/octet-stream\";\n        } else if (isString(options.body)) {\n            headers[\"Content-Type\"] = \"text/plain\";\n        } else if (!isFormData(options.body)) {\n            headers[\"Content-Type\"] = \"application/json\";\n        }\n    }\n    return headers;\n};\nvar getRequestBody = (options)=>{\n    if (options.body) {\n        return options.body;\n    }\n    return void 0;\n};\nvar sendRequest = async (config, options, url, body, formData, headers, onCancel)=>{\n    const source = axios__WEBPACK_IMPORTED_MODULE_6__.CancelToken.source();\n    const requestConfig = {\n        url,\n        headers,\n        data: body != null ? body : formData,\n        method: options.method,\n        withCredentials: config.WITH_CREDENTIALS,\n        cancelToken: source.token\n    };\n    const isBCS = Object.keys(config.HEADERS || {}).filter((k)=>k.toLowerCase() === \"accept\").map((k)=>config.HEADERS[k]).includes(\"application/x-bcs\");\n    if (isBCS) {\n        requestConfig.responseType = \"arraybuffer\";\n    }\n    onCancel(()=>source.cancel(\"The user aborted a request.\"));\n    try {\n        return await axios__WEBPACK_IMPORTED_MODULE_6__.request(requestConfig);\n    } catch (error) {\n        const axiosError = error;\n        if (axiosError.response) {\n            return axiosError.response;\n        }\n        throw error;\n    }\n};\nvar getResponseHeader = (response, responseHeader)=>{\n    if (responseHeader) {\n        const content = response.headers[responseHeader];\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return void 0;\n};\nvar getResponseBody = (response)=>{\n    if (response.status !== 204) {\n        return response.data;\n    }\n    return void 0;\n};\nvar catchErrorCodes = (options, result)=>{\n    const errors = {\n        400: \"Bad Request\",\n        401: \"Unauthorized\",\n        403: \"Forbidden\",\n        404: \"Not Found\",\n        429: \"Too Many Requests\",\n        500: \"Internal Server Error\",\n        502: \"Bad Gateway\",\n        503: \"Service Unavailable\",\n        ...options.errors\n    };\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n    if (!result.ok) {\n        throw new ApiError(options, result, \"Generic Error\");\n    }\n};\nvar request = (config, options)=>{\n    return new CancelablePromise(async (resolve2, reject, onCancel)=>{\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options, formData);\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n                const responseBody = getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n                const result = {\n                    url,\n                    ok: isSuccess(response.status),\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader != null ? responseHeader : responseBody\n                };\n                catchErrorCodes(options, result);\n                const out = result.body;\n                try {\n                    out[\"__headers\"] = response.headers;\n                } catch (_) {}\n                resolve2(out);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n// src/generated/core/AxiosHttpRequest.ts\nvar AxiosHttpRequest = class extends BaseHttpRequest {\n    constructor(config){\n        super(config);\n    }\n    request(options) {\n        return request(this.config, options);\n    }\n};\n// src/generated/services/AccountsService.ts\nvar AccountsService = class {\n    constructor(httpRequest){\n        this.httpRequest = httpRequest;\n    }\n    getAccount(address, ledgerVersion) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/accounts/{address}\",\n            path: {\n                \"address\": address\n            },\n            query: {\n                \"ledger_version\": ledgerVersion\n            }\n        });\n    }\n    getAccountResources(address, ledgerVersion, start, limit) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/accounts/{address}/resources\",\n            path: {\n                \"address\": address\n            },\n            query: {\n                \"ledger_version\": ledgerVersion,\n                \"start\": start,\n                \"limit\": limit\n            }\n        });\n    }\n    getAccountModules(address, ledgerVersion, start, limit) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/accounts/{address}/modules\",\n            path: {\n                \"address\": address\n            },\n            query: {\n                \"ledger_version\": ledgerVersion,\n                \"start\": start,\n                \"limit\": limit\n            }\n        });\n    }\n    getAccountResource(address, resourceType, ledgerVersion) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/accounts/{address}/resource/{resource_type}\",\n            path: {\n                \"address\": address,\n                \"resource_type\": resourceType\n            },\n            query: {\n                \"ledger_version\": ledgerVersion\n            }\n        });\n    }\n    getAccountModule(address, moduleName, ledgerVersion) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/accounts/{address}/module/{module_name}\",\n            path: {\n                \"address\": address,\n                \"module_name\": moduleName\n            },\n            query: {\n                \"ledger_version\": ledgerVersion\n            }\n        });\n    }\n};\n// src/generated/services/BlocksService.ts\nvar BlocksService = class {\n    constructor(httpRequest){\n        this.httpRequest = httpRequest;\n    }\n    getBlockByHeight(blockHeight, withTransactions) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/blocks/by_height/{block_height}\",\n            path: {\n                \"block_height\": blockHeight\n            },\n            query: {\n                \"with_transactions\": withTransactions\n            }\n        });\n    }\n    getBlockByVersion(version, withTransactions) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/blocks/by_version/{version}\",\n            path: {\n                \"version\": version\n            },\n            query: {\n                \"with_transactions\": withTransactions\n            }\n        });\n    }\n};\n// src/generated/services/EventsService.ts\nvar EventsService = class {\n    constructor(httpRequest){\n        this.httpRequest = httpRequest;\n    }\n    getEventsByCreationNumber(address, creationNumber, start, limit) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/accounts/{address}/events/{creation_number}\",\n            path: {\n                \"address\": address,\n                \"creation_number\": creationNumber\n            },\n            query: {\n                \"start\": start,\n                \"limit\": limit\n            }\n        });\n    }\n    getEventsByEventHandle(address, eventHandle, fieldName, start, limit) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/accounts/{address}/events/{event_handle}/{field_name}\",\n            path: {\n                \"address\": address,\n                \"event_handle\": eventHandle,\n                \"field_name\": fieldName\n            },\n            query: {\n                \"start\": start,\n                \"limit\": limit\n            }\n        });\n    }\n};\n// src/generated/services/GeneralService.ts\nvar GeneralService = class {\n    constructor(httpRequest){\n        this.httpRequest = httpRequest;\n    }\n    spec() {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/spec\"\n        });\n    }\n    healthy(durationSecs) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/-/healthy\",\n            query: {\n                \"duration_secs\": durationSecs\n            }\n        });\n    }\n    getLedgerInfo() {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/\"\n        });\n    }\n};\n// src/generated/services/TablesService.ts\nvar TablesService = class {\n    constructor(httpRequest){\n        this.httpRequest = httpRequest;\n    }\n    getTableItem(tableHandle, requestBody, ledgerVersion) {\n        return this.httpRequest.request({\n            method: \"POST\",\n            url: \"/tables/{table_handle}/item\",\n            path: {\n                \"table_handle\": tableHandle\n            },\n            query: {\n                \"ledger_version\": ledgerVersion\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    getRawTableItem(tableHandle, requestBody, ledgerVersion) {\n        return this.httpRequest.request({\n            method: \"POST\",\n            url: \"/tables/{table_handle}/raw_item\",\n            path: {\n                \"table_handle\": tableHandle\n            },\n            query: {\n                \"ledger_version\": ledgerVersion\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n};\n// src/generated/services/TransactionsService.ts\nvar TransactionsService = class {\n    constructor(httpRequest){\n        this.httpRequest = httpRequest;\n    }\n    getTransactions(start, limit) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/transactions\",\n            query: {\n                \"start\": start,\n                \"limit\": limit\n            }\n        });\n    }\n    submitTransaction(requestBody) {\n        return this.httpRequest.request({\n            method: \"POST\",\n            url: \"/transactions\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    getTransactionByHash(txnHash) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/transactions/by_hash/{txn_hash}\",\n            path: {\n                \"txn_hash\": txnHash\n            }\n        });\n    }\n    getTransactionByVersion(txnVersion) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/transactions/by_version/{txn_version}\",\n            path: {\n                \"txn_version\": txnVersion\n            }\n        });\n    }\n    getAccountTransactions(address, start, limit) {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/accounts/{address}/transactions\",\n            path: {\n                \"address\": address\n            },\n            query: {\n                \"start\": start,\n                \"limit\": limit\n            }\n        });\n    }\n    submitBatchTransactions(requestBody) {\n        return this.httpRequest.request({\n            method: \"POST\",\n            url: \"/transactions/batch\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    simulateTransaction(requestBody, estimateMaxGasAmount, estimateGasUnitPrice, estimatePrioritizedGasUnitPrice) {\n        return this.httpRequest.request({\n            method: \"POST\",\n            url: \"/transactions/simulate\",\n            query: {\n                \"estimate_max_gas_amount\": estimateMaxGasAmount,\n                \"estimate_gas_unit_price\": estimateGasUnitPrice,\n                \"estimate_prioritized_gas_unit_price\": estimatePrioritizedGasUnitPrice\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    encodeSubmission(requestBody) {\n        return this.httpRequest.request({\n            method: \"POST\",\n            url: \"/transactions/encode_submission\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    estimateGasPrice() {\n        return this.httpRequest.request({\n            method: \"GET\",\n            url: \"/estimate_gas_price\"\n        });\n    }\n};\n// src/generated/services/ViewService.ts\nvar ViewService = class {\n    constructor(httpRequest){\n        this.httpRequest = httpRequest;\n    }\n    view(requestBody, ledgerVersion) {\n        return this.httpRequest.request({\n            method: \"POST\",\n            url: \"/view\",\n            query: {\n                \"ledger_version\": ledgerVersion\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n};\n// src/generated/AptosGeneratedClient.ts\nvar AptosGeneratedClient = class {\n    constructor(config, HttpRequest = AxiosHttpRequest){\n        var _a, _b, _c, _d;\n        this.request = new HttpRequest({\n            BASE: (_a = config == null ? void 0 : config.BASE) != null ? _a : \"/v1\",\n            VERSION: (_b = config == null ? void 0 : config.VERSION) != null ? _b : \"1.2.0\",\n            WITH_CREDENTIALS: (_c = config == null ? void 0 : config.WITH_CREDENTIALS) != null ? _c : false,\n            CREDENTIALS: (_d = config == null ? void 0 : config.CREDENTIALS) != null ? _d : \"include\",\n            TOKEN: config == null ? void 0 : config.TOKEN,\n            USERNAME: config == null ? void 0 : config.USERNAME,\n            PASSWORD: config == null ? void 0 : config.PASSWORD,\n            HEADERS: config == null ? void 0 : config.HEADERS,\n            ENCODE_PATH: config == null ? void 0 : config.ENCODE_PATH\n        });\n        this.accounts = new AccountsService(this.request);\n        this.blocks = new BlocksService(this.request);\n        this.events = new EventsService(this.request);\n        this.general = new GeneralService(this.request);\n        this.tables = new TablesService(this.request);\n        this.transactions = new TransactionsService(this.request);\n        this.view = new ViewService(this.request);\n    }\n};\n// src/generated/core/OpenAPI.ts\nvar OpenAPI = {\n    BASE: \"/v1\",\n    VERSION: \"1.2.0\",\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: \"include\",\n    TOKEN: void 0,\n    USERNAME: void 0,\n    PASSWORD: void 0,\n    HEADERS: void 0,\n    ENCODE_PATH: void 0\n};\n// src/generated/models/AptosErrorCode.ts\nvar AptosErrorCode = /* @__PURE__ */ ((AptosErrorCode2)=>{\n    AptosErrorCode2[\"ACCOUNT_NOT_FOUND\"] = \"account_not_found\";\n    AptosErrorCode2[\"RESOURCE_NOT_FOUND\"] = \"resource_not_found\";\n    AptosErrorCode2[\"MODULE_NOT_FOUND\"] = \"module_not_found\";\n    AptosErrorCode2[\"STRUCT_FIELD_NOT_FOUND\"] = \"struct_field_not_found\";\n    AptosErrorCode2[\"VERSION_NOT_FOUND\"] = \"version_not_found\";\n    AptosErrorCode2[\"TRANSACTION_NOT_FOUND\"] = \"transaction_not_found\";\n    AptosErrorCode2[\"TABLE_ITEM_NOT_FOUND\"] = \"table_item_not_found\";\n    AptosErrorCode2[\"BLOCK_NOT_FOUND\"] = \"block_not_found\";\n    AptosErrorCode2[\"VERSION_PRUNED\"] = \"version_pruned\";\n    AptosErrorCode2[\"BLOCK_PRUNED\"] = \"block_pruned\";\n    AptosErrorCode2[\"INVALID_INPUT\"] = \"invalid_input\";\n    AptosErrorCode2[\"INVALID_TRANSACTION_UPDATE\"] = \"invalid_transaction_update\";\n    AptosErrorCode2[\"SEQUENCE_NUMBER_TOO_OLD\"] = \"sequence_number_too_old\";\n    AptosErrorCode2[\"VM_ERROR\"] = \"vm_error\";\n    AptosErrorCode2[\"HEALTH_CHECK_FAILED\"] = \"health_check_failed\";\n    AptosErrorCode2[\"MEMPOOL_IS_FULL\"] = \"mempool_is_full\";\n    AptosErrorCode2[\"INTERNAL_ERROR\"] = \"internal_error\";\n    AptosErrorCode2[\"WEB_FRAMEWORK_ERROR\"] = \"web_framework_error\";\n    AptosErrorCode2[\"BCS_NOT_SUPPORTED\"] = \"bcs_not_supported\";\n    AptosErrorCode2[\"API_DISABLED\"] = \"api_disabled\";\n    return AptosErrorCode2;\n})(AptosErrorCode || {});\n// src/generated/models/MoveFunctionVisibility.ts\nvar MoveFunctionVisibility = /* @__PURE__ */ ((MoveFunctionVisibility2)=>{\n    MoveFunctionVisibility2[\"PRIVATE\"] = \"private\";\n    MoveFunctionVisibility2[\"PUBLIC\"] = \"public\";\n    MoveFunctionVisibility2[\"FRIEND\"] = \"friend\";\n    return MoveFunctionVisibility2;\n})(MoveFunctionVisibility || {});\n// src/generated/models/RoleType.ts\nvar RoleType = /* @__PURE__ */ ((RoleType2)=>{\n    RoleType2[\"VALIDATOR\"] = \"validator\";\n    RoleType2[\"FULL_NODE\"] = \"full_node\";\n    return RoleType2;\n})(RoleType || {});\n// src/generated/schemas/$AccountData.ts\nvar $AccountData = {\n    description: `Account data\n\n    A simplified version of the onchain Account resource`,\n    properties: {\n        sequence_number: {\n            type: \"U64\",\n            isRequired: true\n        },\n        authentication_key: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$AccountSignature.ts\nvar $AccountSignature = {\n    type: \"one-of\",\n    description: `Account signature scheme\n\n    The account signature scheme allows you to have two types of accounts:\n\n    1. A single Ed25519 key account, one private key\n    2. A k-of-n multi-Ed25519 key account, multiple private keys, such that k-of-n must sign a transaction.`,\n    contains: [\n        {\n            type: \"AccountSignature_Ed25519Signature\"\n        },\n        {\n            type: \"AccountSignature_MultiEd25519Signature\"\n        }\n    ]\n};\n// src/generated/schemas/$AccountSignature_Ed25519Signature.ts\nvar $AccountSignature_Ed25519Signature = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"Ed25519Signature\"\n        }\n    ]\n};\n// src/generated/schemas/$AccountSignature_MultiEd25519Signature.ts\nvar $AccountSignature_MultiEd25519Signature = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"MultiEd25519Signature\"\n        }\n    ]\n};\n// src/generated/schemas/$Address.ts\nvar $Address = {\n    type: \"string\",\n    description: `A hex encoded 32 byte Aptos account address.\n\n    This is represented in a string as a 64 character hex string, sometimes\n    shortened by stripping leading 0s, and adding a 0x.\n\n    For example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n    `,\n    format: \"hex\"\n};\n// src/generated/schemas/$AptosError.ts\nvar $AptosError = {\n    description: `This is the generic struct we use for all API errors, it contains a string\n    message and an Aptos API specific error code.`,\n    properties: {\n        message: {\n            type: \"string\",\n            description: `A message describing the error`,\n            isRequired: true\n        },\n        error_code: {\n            type: \"AptosErrorCode\",\n            isRequired: true\n        },\n        vm_error_code: {\n            type: \"number\",\n            description: `A code providing VM error details when submitting transactions to the VM`,\n            format: \"uint64\"\n        }\n    }\n};\n// src/generated/schemas/$AptosErrorCode.ts\nvar $AptosErrorCode = {\n    type: \"Enum\"\n};\n// src/generated/schemas/$Block.ts\nvar $Block = {\n    description: `A Block with or without transactions\n\n    This contains the information about a transactions along with\n    associated transactions if requested`,\n    properties: {\n        block_height: {\n            type: \"U64\",\n            isRequired: true\n        },\n        block_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        block_timestamp: {\n            type: \"U64\",\n            isRequired: true\n        },\n        first_version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        last_version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        transactions: {\n            type: \"array\",\n            contains: {\n                type: \"Transaction\"\n            }\n        }\n    }\n};\n// src/generated/schemas/$BlockMetadataTransaction.ts\nvar $BlockMetadataTransaction = {\n    description: `A block metadata transaction\n\n    This signifies the beginning of a block, and contains information\n    about the specific block`,\n    properties: {\n        version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        state_change_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        event_root_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        state_checkpoint_hash: {\n            type: \"HashValue\"\n        },\n        gas_used: {\n            type: \"U64\",\n            isRequired: true\n        },\n        success: {\n            type: \"boolean\",\n            description: `Whether the transaction was successful`,\n            isRequired: true\n        },\n        vm_status: {\n            type: \"string\",\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true\n        },\n        accumulator_root_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        changes: {\n            type: \"array\",\n            contains: {\n                type: \"WriteSetChange\"\n            },\n            isRequired: true\n        },\n        id: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        epoch: {\n            type: \"U64\",\n            isRequired: true\n        },\n        round: {\n            type: \"U64\",\n            isRequired: true\n        },\n        events: {\n            type: \"array\",\n            contains: {\n                type: \"Event\"\n            },\n            isRequired: true\n        },\n        previous_block_votes_bitvec: {\n            type: \"array\",\n            contains: {\n                type: \"number\",\n                format: \"uint8\"\n            },\n            isRequired: true\n        },\n        proposer: {\n            type: \"Address\",\n            isRequired: true\n        },\n        failed_proposer_indices: {\n            type: \"array\",\n            contains: {\n                type: \"number\",\n                format: \"uint32\"\n            },\n            isRequired: true\n        },\n        timestamp: {\n            type: \"U64\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$DecodedTableData.ts\nvar $DecodedTableData = {\n    description: `Decoded table data`,\n    properties: {\n        key: {\n            description: `Key of table in JSON`,\n            properties: {},\n            isRequired: true\n        },\n        key_type: {\n            type: \"string\",\n            description: `Type of key`,\n            isRequired: true\n        },\n        value: {\n            description: `Value of table in JSON`,\n            properties: {},\n            isRequired: true\n        },\n        value_type: {\n            type: \"string\",\n            description: `Type of value`,\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$DeletedTableData.ts\nvar $DeletedTableData = {\n    description: `Deleted table data`,\n    properties: {\n        key: {\n            description: `Deleted key`,\n            properties: {},\n            isRequired: true\n        },\n        key_type: {\n            type: \"string\",\n            description: `Deleted key type`,\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$DeleteModule.ts\nvar $DeleteModule = {\n    description: `Delete a module`,\n    properties: {\n        address: {\n            type: \"Address\",\n            isRequired: true\n        },\n        state_key_hash: {\n            type: \"string\",\n            description: `State key hash`,\n            isRequired: true\n        },\n        module: {\n            type: \"MoveModuleId\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$DeleteResource.ts\nvar $DeleteResource = {\n    description: `Delete a resource`,\n    properties: {\n        address: {\n            type: \"Address\",\n            isRequired: true\n        },\n        state_key_hash: {\n            type: \"string\",\n            description: `State key hash`,\n            isRequired: true\n        },\n        resource: {\n            type: \"MoveStructTag\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$DeleteTableItem.ts\nvar $DeleteTableItem = {\n    description: `Delete a table item`,\n    properties: {\n        state_key_hash: {\n            type: \"string\",\n            isRequired: true\n        },\n        handle: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        },\n        key: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        },\n        data: {\n            type: \"DeletedTableData\"\n        }\n    }\n};\n// src/generated/schemas/$DirectWriteSet.ts\nvar $DirectWriteSet = {\n    properties: {\n        changes: {\n            type: \"array\",\n            contains: {\n                type: \"WriteSetChange\"\n            },\n            isRequired: true\n        },\n        events: {\n            type: \"array\",\n            contains: {\n                type: \"Event\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$Ed25519Signature.ts\nvar $Ed25519Signature = {\n    description: `A single Ed25519 signature`,\n    properties: {\n        public_key: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        },\n        signature: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$EncodeSubmissionRequest.ts\nvar $EncodeSubmissionRequest = {\n    description: `Request to encode a submission`,\n    properties: {\n        sender: {\n            type: \"Address\",\n            isRequired: true\n        },\n        sequence_number: {\n            type: \"U64\",\n            isRequired: true\n        },\n        max_gas_amount: {\n            type: \"U64\",\n            isRequired: true\n        },\n        gas_unit_price: {\n            type: \"U64\",\n            isRequired: true\n        },\n        expiration_timestamp_secs: {\n            type: \"U64\",\n            isRequired: true\n        },\n        payload: {\n            type: \"TransactionPayload\",\n            isRequired: true\n        },\n        secondary_signers: {\n            type: \"array\",\n            contains: {\n                type: \"Address\"\n            }\n        }\n    }\n};\n// src/generated/schemas/$EntryFunctionId.ts\nvar $EntryFunctionId = {\n    type: \"string\",\n    description: `Entry function id is string representation of a entry function defined on-chain.\n\n    Format: \\`{address}::{module name}::{function name}\\`\n\n    Both \\`module name\\` and \\`function name\\` are case-sensitive.\n    `\n};\n// src/generated/schemas/$EntryFunctionPayload.ts\nvar $EntryFunctionPayload = {\n    description: `Payload which runs a single entry function`,\n    properties: {\n        function: {\n            type: \"EntryFunctionId\",\n            isRequired: true\n        },\n        type_arguments: {\n            type: \"array\",\n            contains: {\n                type: \"MoveType\"\n            },\n            isRequired: true\n        },\n        arguments: {\n            type: \"array\",\n            contains: {\n                properties: {}\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$Event.ts\nvar $Event = {\n    description: `An event from a transaction`,\n    properties: {\n        guid: {\n            type: \"EventGuid\",\n            isRequired: true\n        },\n        sequence_number: {\n            type: \"U64\",\n            isRequired: true\n        },\n        type: {\n            type: \"MoveType\",\n            isRequired: true\n        },\n        data: {\n            description: `The JSON representation of the event`,\n            properties: {},\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$EventGuid.ts\nvar $EventGuid = {\n    properties: {\n        creation_number: {\n            type: \"U64\",\n            isRequired: true\n        },\n        account_address: {\n            type: \"Address\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$GasEstimation.ts\nvar $GasEstimation = {\n    description: `Struct holding the outputs of the estimate gas API`,\n    properties: {\n        deprioritized_gas_estimate: {\n            type: \"number\",\n            description: `The deprioritized estimate for the gas unit price`,\n            format: \"uint64\"\n        },\n        gas_estimate: {\n            type: \"number\",\n            description: `The current estimate for the gas unit price`,\n            isRequired: true,\n            format: \"uint64\"\n        },\n        prioritized_gas_estimate: {\n            type: \"number\",\n            description: `The prioritized estimate for the gas unit price`,\n            format: \"uint64\"\n        }\n    }\n};\n// src/generated/schemas/$GenesisPayload.ts\nvar $GenesisPayload = {\n    type: \"one-of\",\n    description: `The writeset payload of the Genesis transaction`,\n    contains: [\n        {\n            type: \"GenesisPayload_WriteSetPayload\"\n        }\n    ]\n};\n// src/generated/schemas/$GenesisPayload_WriteSetPayload.ts\nvar $GenesisPayload_WriteSetPayload = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"WriteSetPayload\"\n        }\n    ]\n};\n// src/generated/schemas/$GenesisTransaction.ts\nvar $GenesisTransaction = {\n    description: `The genesis transaction\n\n    This only occurs at the genesis transaction (version 0)`,\n    properties: {\n        version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        state_change_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        event_root_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        state_checkpoint_hash: {\n            type: \"HashValue\"\n        },\n        gas_used: {\n            type: \"U64\",\n            isRequired: true\n        },\n        success: {\n            type: \"boolean\",\n            description: `Whether the transaction was successful`,\n            isRequired: true\n        },\n        vm_status: {\n            type: \"string\",\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true\n        },\n        accumulator_root_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        changes: {\n            type: \"array\",\n            contains: {\n                type: \"WriteSetChange\"\n            },\n            isRequired: true\n        },\n        payload: {\n            type: \"GenesisPayload\",\n            isRequired: true\n        },\n        events: {\n            type: \"array\",\n            contains: {\n                type: \"Event\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$HashValue.ts\nvar $HashValue = {\n    type: \"string\"\n};\n// src/generated/schemas/$HealthCheckSuccess.ts\nvar $HealthCheckSuccess = {\n    description: `Representation of a successful healthcheck`,\n    properties: {\n        message: {\n            type: \"string\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$HexEncodedBytes.ts\nvar $HexEncodedBytes = {\n    type: \"string\",\n    description: `All bytes (Vec<u8>) data is represented as hex-encoded string prefixed with \\`0x\\` and fulfilled with\n    two hex digits per byte.\n\n    Unlike the \\`Address\\` type, HexEncodedBytes will not trim any zeros.\n    `,\n    format: \"hex\"\n};\n// src/generated/schemas/$IdentifierWrapper.ts\nvar $IdentifierWrapper = {\n    type: \"string\"\n};\n// src/generated/schemas/$IndexResponse.ts\nvar $IndexResponse = {\n    description: `The struct holding all data returned to the client by the\n    index endpoint (i.e., GET \"/\").  Only for responding in JSON`,\n    properties: {\n        chain_id: {\n            type: \"number\",\n            description: `Chain ID of the current chain`,\n            isRequired: true,\n            format: \"uint8\"\n        },\n        epoch: {\n            type: \"U64\",\n            isRequired: true\n        },\n        ledger_version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        oldest_ledger_version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        ledger_timestamp: {\n            type: \"U64\",\n            isRequired: true\n        },\n        node_role: {\n            type: \"RoleType\",\n            isRequired: true\n        },\n        oldest_block_height: {\n            type: \"U64\",\n            isRequired: true\n        },\n        block_height: {\n            type: \"U64\",\n            isRequired: true\n        },\n        git_hash: {\n            type: \"string\",\n            description: `Git hash of the build of the API endpoint.  Can be used to determine the exact\n            software version used by the API endpoint.`\n        }\n    }\n};\n// src/generated/schemas/$ModuleBundlePayload.ts\nvar $ModuleBundlePayload = {\n    properties: {\n        modules: {\n            type: \"array\",\n            contains: {\n                type: \"MoveModuleBytecode\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MoveAbility.ts\nvar $MoveAbility = {\n    type: \"string\"\n};\n// src/generated/schemas/$MoveFunction.ts\nvar $MoveFunction = {\n    description: `Move function`,\n    properties: {\n        name: {\n            type: \"IdentifierWrapper\",\n            isRequired: true\n        },\n        visibility: {\n            type: \"MoveFunctionVisibility\",\n            isRequired: true\n        },\n        is_entry: {\n            type: \"boolean\",\n            description: `Whether the function can be called as an entry function directly in a transaction`,\n            isRequired: true\n        },\n        is_view: {\n            type: \"boolean\",\n            description: `Whether the function is a view function or not`,\n            isRequired: true\n        },\n        generic_type_params: {\n            type: \"array\",\n            contains: {\n                type: \"MoveFunctionGenericTypeParam\"\n            },\n            isRequired: true\n        },\n        params: {\n            type: \"array\",\n            contains: {\n                type: \"MoveType\"\n            },\n            isRequired: true\n        },\n        return: {\n            type: \"array\",\n            contains: {\n                type: \"MoveType\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MoveFunctionGenericTypeParam.ts\nvar $MoveFunctionGenericTypeParam = {\n    description: `Move function generic type param`,\n    properties: {\n        constraints: {\n            type: \"array\",\n            contains: {\n                type: \"MoveAbility\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MoveFunctionVisibility.ts\nvar $MoveFunctionVisibility = {\n    type: \"Enum\"\n};\n// src/generated/schemas/$MoveModule.ts\nvar $MoveModule = {\n    description: `A Move module`,\n    properties: {\n        address: {\n            type: \"Address\",\n            isRequired: true\n        },\n        name: {\n            type: \"IdentifierWrapper\",\n            isRequired: true\n        },\n        friends: {\n            type: \"array\",\n            contains: {\n                type: \"MoveModuleId\"\n            },\n            isRequired: true\n        },\n        exposed_functions: {\n            type: \"array\",\n            contains: {\n                type: \"MoveFunction\"\n            },\n            isRequired: true\n        },\n        structs: {\n            type: \"array\",\n            contains: {\n                type: \"MoveStruct\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MoveModuleBytecode.ts\nvar $MoveModuleBytecode = {\n    description: `Move module bytecode along with it's ABI`,\n    properties: {\n        bytecode: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        },\n        abi: {\n            type: \"MoveModule\"\n        }\n    }\n};\n// src/generated/schemas/$MoveModuleId.ts\nvar $MoveModuleId = {\n    type: \"string\",\n    description: `Move module id is a string representation of Move module.\n\n    Format: \\`{address}::{module name}\\`\n\n    \\`address\\` should be hex-encoded 32 byte account address that is prefixed with \\`0x\\`.\n\n    Module name is case-sensitive.\n    `\n};\n// src/generated/schemas/$MoveResource.ts\nvar $MoveResource = {\n    description: `A parsed Move resource`,\n    properties: {\n        type: {\n            type: \"MoveStructTag\",\n            isRequired: true\n        },\n        data: {\n            type: \"MoveStructValue\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MoveScriptBytecode.ts\nvar $MoveScriptBytecode = {\n    description: `Move script bytecode`,\n    properties: {\n        bytecode: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        },\n        abi: {\n            type: \"MoveFunction\"\n        }\n    }\n};\n// src/generated/schemas/$MoveStruct.ts\nvar $MoveStruct = {\n    description: `A move struct`,\n    properties: {\n        name: {\n            type: \"IdentifierWrapper\",\n            isRequired: true\n        },\n        is_native: {\n            type: \"boolean\",\n            description: `Whether the struct is a native struct of Move`,\n            isRequired: true\n        },\n        abilities: {\n            type: \"array\",\n            contains: {\n                type: \"MoveAbility\"\n            },\n            isRequired: true\n        },\n        generic_type_params: {\n            type: \"array\",\n            contains: {\n                type: \"MoveStructGenericTypeParam\"\n            },\n            isRequired: true\n        },\n        fields: {\n            type: \"array\",\n            contains: {\n                type: \"MoveStructField\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MoveStructField.ts\nvar $MoveStructField = {\n    description: `Move struct field`,\n    properties: {\n        name: {\n            type: \"IdentifierWrapper\",\n            isRequired: true\n        },\n        type: {\n            type: \"MoveType\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MoveStructGenericTypeParam.ts\nvar $MoveStructGenericTypeParam = {\n    description: `Move generic type param`,\n    properties: {\n        constraints: {\n            type: \"array\",\n            contains: {\n                type: \"MoveAbility\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MoveStructTag.ts\nvar $MoveStructTag = {\n    type: \"string\",\n    description: `String representation of a MoveStructTag (on-chain Move struct type). This exists so you\n    can specify MoveStructTags as path / query parameters, e.g. for get_events_by_event_handle.\n\n    It is a combination of:\n    1. \\`move_module_address\\`, \\`module_name\\` and \\`struct_name\\`, all joined by \\`::\\`\n    2. \\`struct generic type parameters\\` joined by \\`, \\`\n\n    Examples:\n     * \\`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\\`\n     * \\`0x1::account::Account\\`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n    See [doc](https://aptos.dev/concepts/accounts) for more details.\n    `,\n    pattern: \"^0x[0-9a-zA-Z:_<>]+$\"\n};\n// src/generated/schemas/$MoveStructValue.ts\nvar $MoveStructValue = {\n    description: `This is a JSON representation of some data within an account resource. More specifically,\n    it is a map of strings to arbitrary JSON values / objects, where the keys are top level\n    fields within the given resource.\n\n    To clarify, you might query for 0x1::account::Account and see the example data.\n\n    Move \\`bool\\` type value is serialized into \\`boolean\\`.\n\n    Move \\`u8\\`, \\`u16\\` and \\`u32\\` type value is serialized into \\`integer\\`.\n\n    Move \\`u64\\`, \\`u128\\` and \\`u256\\` type value is serialized into \\`string\\`.\n\n    Move \\`address\\` type value (32 byte Aptos account address) is serialized into a HexEncodedBytes string.\n    For example:\n    - \\`0x1\\`\n    - \\`0x1668f6be25668c1a17cd8caf6b8d2f25\\`\n\n    Move \\`vector\\` type value is serialized into \\`array\\`, except \\`vector<u8>\\` which is serialized into a\n    HexEncodedBytes string with \\`0x\\` prefix.\n    For example:\n    - \\`vector<u64>{255, 255}\\` => \\`[\"255\", \"255\"]\\`\n    - \\`vector<u8>{255, 255}\\` => \\`0xffff\\`\n\n    Move \\`struct\\` type value is serialized into \\`object\\` that looks like this (except some Move stdlib types, see the following section):\n    \\`\\`\\`json\n    {\n        field1_name: field1_value,\n        field2_name: field2_value,\n        ......\n    }\n    \\`\\`\\`\n\n    For example:\n    \\`{ \"created\": \"0xa550c18\", \"role_id\": \"0\" }\\`\n\n     **Special serialization for Move stdlib types**:\n    - [0x1::string::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ascii.md)\n    is serialized into \\`string\\`. For example, struct value \\`0x1::string::String{bytes: b\"Hello World!\"}\\`\n    is serialized as \\`\"Hello World!\"\\` in JSON.\n    `,\n    properties: {}\n};\n// src/generated/schemas/$MoveType.ts\nvar $MoveType = {\n    type: \"string\",\n    description: `String representation of an on-chain Move type tag that is exposed in transaction payload.\n    Values:\n    - bool\n    - u8\n    - u16\n    - u32\n    - u64\n    - u128\n    - u256\n    - address\n    - signer\n    - vector: \\`vector<{non-reference MoveTypeId}>\\`\n    - struct: \\`{address}::{module_name}::{struct_name}::<{generic types}>\\`\n\n    Vector type value examples:\n    - \\`vector<u8>\\`\n    - \\`vector<vector<u64>>\\`\n    - \\`vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>\\`\n\n    Struct type value examples:\n    - \\`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n    - \\`0x1::account::Account\\`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n    `,\n    pattern: \"^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\"\n};\n// src/generated/schemas/$MoveValue.ts\nvar $MoveValue = {\n    type: \"any-of\",\n    description: `An enum of the possible Move value types`,\n    contains: [\n        {\n            type: \"number\",\n            format: \"uint8\"\n        },\n        {\n            type: \"number\",\n            format: \"uint16\"\n        },\n        {\n            type: \"number\",\n            format: \"uint32\"\n        },\n        {\n            type: \"U64\"\n        },\n        {\n            type: \"U128\"\n        },\n        {\n            type: \"U256\"\n        },\n        {\n            type: \"boolean\"\n        },\n        {\n            type: \"Address\"\n        },\n        {\n            type: \"array\",\n            contains: {\n                type: \"MoveValue\"\n            }\n        },\n        {\n            type: \"HexEncodedBytes\"\n        },\n        {\n            type: \"MoveStructValue\"\n        },\n        {\n            type: \"string\"\n        }\n    ]\n};\n// src/generated/schemas/$MultiAgentSignature.ts\nvar $MultiAgentSignature = {\n    description: `Multi agent signature for multi agent transactions\n\n    This allows you to have transactions across multiple accounts`,\n    properties: {\n        sender: {\n            type: \"AccountSignature\",\n            isRequired: true\n        },\n        secondary_signer_addresses: {\n            type: \"array\",\n            contains: {\n                type: \"Address\"\n            },\n            isRequired: true\n        },\n        secondary_signers: {\n            type: \"array\",\n            contains: {\n                type: \"AccountSignature\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MultiEd25519Signature.ts\nvar $MultiEd25519Signature = {\n    description: `A Ed25519 multi-sig signature\n\n    This allows k-of-n signing for a transaction`,\n    properties: {\n        public_keys: {\n            type: \"array\",\n            contains: {\n                type: \"HexEncodedBytes\"\n            },\n            isRequired: true\n        },\n        signatures: {\n            type: \"array\",\n            contains: {\n                type: \"HexEncodedBytes\"\n            },\n            isRequired: true\n        },\n        threshold: {\n            type: \"number\",\n            description: `The number of signatures required for a successful transaction`,\n            isRequired: true,\n            format: \"uint8\"\n        },\n        bitmap: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$MultisigPayload.ts\nvar $MultisigPayload = {\n    description: `A multisig transaction that allows an owner of a multisig account to execute a pre-approved\n    transaction as the multisig account.`,\n    properties: {\n        multisig_address: {\n            type: \"Address\",\n            isRequired: true\n        },\n        transaction_payload: {\n            type: \"MultisigTransactionPayload\"\n        }\n    }\n};\n// src/generated/schemas/$MultisigTransactionPayload.ts\nvar $MultisigTransactionPayload = {\n    type: \"any-of\",\n    contains: [\n        {\n            type: \"EntryFunctionPayload\"\n        }\n    ]\n};\n// src/generated/schemas/$PendingTransaction.ts\nvar $PendingTransaction = {\n    description: `A transaction waiting in mempool`,\n    properties: {\n        hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        sender: {\n            type: \"Address\",\n            isRequired: true\n        },\n        sequence_number: {\n            type: \"U64\",\n            isRequired: true\n        },\n        max_gas_amount: {\n            type: \"U64\",\n            isRequired: true\n        },\n        gas_unit_price: {\n            type: \"U64\",\n            isRequired: true\n        },\n        expiration_timestamp_secs: {\n            type: \"U64\",\n            isRequired: true\n        },\n        payload: {\n            type: \"TransactionPayload\",\n            isRequired: true\n        },\n        signature: {\n            type: \"TransactionSignature\"\n        }\n    }\n};\n// src/generated/schemas/$RawTableItemRequest.ts\nvar $RawTableItemRequest = {\n    description: `Table Item request for the GetTableItemRaw API`,\n    properties: {\n        key: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$RoleType.ts\nvar $RoleType = {\n    type: \"Enum\"\n};\n// src/generated/schemas/$ScriptPayload.ts\nvar $ScriptPayload = {\n    description: `Payload which runs a script that can run multiple functions`,\n    properties: {\n        code: {\n            type: \"MoveScriptBytecode\",\n            isRequired: true\n        },\n        type_arguments: {\n            type: \"array\",\n            contains: {\n                type: \"MoveType\"\n            },\n            isRequired: true\n        },\n        arguments: {\n            type: \"array\",\n            contains: {\n                properties: {}\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$ScriptWriteSet.ts\nvar $ScriptWriteSet = {\n    properties: {\n        execute_as: {\n            type: \"Address\",\n            isRequired: true\n        },\n        script: {\n            type: \"ScriptPayload\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$StateCheckpointTransaction.ts\nvar $StateCheckpointTransaction = {\n    description: `A state checkpoint transaction`,\n    properties: {\n        version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        state_change_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        event_root_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        state_checkpoint_hash: {\n            type: \"HashValue\"\n        },\n        gas_used: {\n            type: \"U64\",\n            isRequired: true\n        },\n        success: {\n            type: \"boolean\",\n            description: `Whether the transaction was successful`,\n            isRequired: true\n        },\n        vm_status: {\n            type: \"string\",\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true\n        },\n        accumulator_root_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        changes: {\n            type: \"array\",\n            contains: {\n                type: \"WriteSetChange\"\n            },\n            isRequired: true\n        },\n        timestamp: {\n            type: \"U64\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$StateKeyWrapper.ts\nvar $StateKeyWrapper = {\n    type: \"string\",\n    description: `Representation of a StateKey as a hex string. This is used for cursor based pagination.\n    `\n};\n// src/generated/schemas/$SubmitTransactionRequest.ts\nvar $SubmitTransactionRequest = {\n    description: `A request to submit a transaction\n\n    This requires a transaction and a signature of it`,\n    properties: {\n        sender: {\n            type: \"Address\",\n            isRequired: true\n        },\n        sequence_number: {\n            type: \"U64\",\n            isRequired: true\n        },\n        max_gas_amount: {\n            type: \"U64\",\n            isRequired: true\n        },\n        gas_unit_price: {\n            type: \"U64\",\n            isRequired: true\n        },\n        expiration_timestamp_secs: {\n            type: \"U64\",\n            isRequired: true\n        },\n        payload: {\n            type: \"TransactionPayload\",\n            isRequired: true\n        },\n        signature: {\n            type: \"TransactionSignature\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$TableItemRequest.ts\nvar $TableItemRequest = {\n    description: `Table Item request for the GetTableItem API`,\n    properties: {\n        key_type: {\n            type: \"MoveType\",\n            isRequired: true\n        },\n        value_type: {\n            type: \"MoveType\",\n            isRequired: true\n        },\n        key: {\n            description: `The value of the table item's key`,\n            properties: {},\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$Transaction.ts\nvar $Transaction = {\n    type: \"one-of\",\n    description: `Enum of the different types of transactions in Aptos`,\n    contains: [\n        {\n            type: \"Transaction_PendingTransaction\"\n        },\n        {\n            type: \"Transaction_UserTransaction\"\n        },\n        {\n            type: \"Transaction_GenesisTransaction\"\n        },\n        {\n            type: \"Transaction_BlockMetadataTransaction\"\n        },\n        {\n            type: \"Transaction_StateCheckpointTransaction\"\n        }\n    ]\n};\n// src/generated/schemas/$Transaction_BlockMetadataTransaction.ts\nvar $Transaction_BlockMetadataTransaction = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"BlockMetadataTransaction\"\n        }\n    ]\n};\n// src/generated/schemas/$Transaction_GenesisTransaction.ts\nvar $Transaction_GenesisTransaction = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"GenesisTransaction\"\n        }\n    ]\n};\n// src/generated/schemas/$Transaction_PendingTransaction.ts\nvar $Transaction_PendingTransaction = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"PendingTransaction\"\n        }\n    ]\n};\n// src/generated/schemas/$Transaction_StateCheckpointTransaction.ts\nvar $Transaction_StateCheckpointTransaction = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"StateCheckpointTransaction\"\n        }\n    ]\n};\n// src/generated/schemas/$Transaction_UserTransaction.ts\nvar $Transaction_UserTransaction = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"UserTransaction\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionPayload.ts\nvar $TransactionPayload = {\n    type: \"one-of\",\n    description: `An enum of the possible transaction payloads`,\n    contains: [\n        {\n            type: \"TransactionPayload_EntryFunctionPayload\"\n        },\n        {\n            type: \"TransactionPayload_ScriptPayload\"\n        },\n        {\n            type: \"TransactionPayload_ModuleBundlePayload\"\n        },\n        {\n            type: \"TransactionPayload_MultisigPayload\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionPayload_EntryFunctionPayload.ts\nvar $TransactionPayload_EntryFunctionPayload = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"EntryFunctionPayload\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionPayload_ModuleBundlePayload.ts\nvar $TransactionPayload_ModuleBundlePayload = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"ModuleBundlePayload\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionPayload_MultisigPayload.ts\nvar $TransactionPayload_MultisigPayload = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"MultisigPayload\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionPayload_ScriptPayload.ts\nvar $TransactionPayload_ScriptPayload = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"ScriptPayload\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionsBatchSingleSubmissionFailure.ts\nvar $TransactionsBatchSingleSubmissionFailure = {\n    description: `Information telling which batch submission transactions failed`,\n    properties: {\n        error: {\n            type: \"AptosError\",\n            isRequired: true\n        },\n        transaction_index: {\n            type: \"number\",\n            description: `The index of which transaction failed, same as submission order`,\n            isRequired: true,\n            format: \"uint64\"\n        }\n    }\n};\n// src/generated/schemas/$TransactionsBatchSubmissionResult.ts\nvar $TransactionsBatchSubmissionResult = {\n    description: `Batch transaction submission result\n\n    Tells which transactions failed`,\n    properties: {\n        transaction_failures: {\n            type: \"array\",\n            contains: {\n                type: \"TransactionsBatchSingleSubmissionFailure\"\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$TransactionSignature.ts\nvar $TransactionSignature = {\n    type: \"one-of\",\n    description: `An enum representing the different transaction signatures available`,\n    contains: [\n        {\n            type: \"TransactionSignature_Ed25519Signature\"\n        },\n        {\n            type: \"TransactionSignature_MultiEd25519Signature\"\n        },\n        {\n            type: \"TransactionSignature_MultiAgentSignature\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionSignature_Ed25519Signature.ts\nvar $TransactionSignature_Ed25519Signature = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"Ed25519Signature\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionSignature_MultiAgentSignature.ts\nvar $TransactionSignature_MultiAgentSignature = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"MultiAgentSignature\"\n        }\n    ]\n};\n// src/generated/schemas/$TransactionSignature_MultiEd25519Signature.ts\nvar $TransactionSignature_MultiEd25519Signature = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"MultiEd25519Signature\"\n        }\n    ]\n};\n// src/generated/schemas/$U128.ts\nvar $U128 = {\n    type: \"string\",\n    description: `A string containing a 128-bit unsigned integer.\n\n    We represent u128 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u128s in JSON natively.\n    `,\n    format: \"uint128\"\n};\n// src/generated/schemas/$U256.ts\nvar $U256 = {\n    type: \"string\",\n    description: `A string containing a 256-bit unsigned integer.\n\n    We represent u256 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u256s in JSON natively.\n    `,\n    format: \"uint256\"\n};\n// src/generated/schemas/$U64.ts\nvar $U64 = {\n    type: \"string\",\n    description: `A string containing a 64-bit unsigned integer.\n\n    We represent u64 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u64s in JSON natively.\n    `,\n    format: \"uint64\"\n};\n// src/generated/schemas/$UserTransaction.ts\nvar $UserTransaction = {\n    description: `A transaction submitted by a user to change the state of the blockchain`,\n    properties: {\n        version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        state_change_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        event_root_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        state_checkpoint_hash: {\n            type: \"HashValue\"\n        },\n        gas_used: {\n            type: \"U64\",\n            isRequired: true\n        },\n        success: {\n            type: \"boolean\",\n            description: `Whether the transaction was successful`,\n            isRequired: true\n        },\n        vm_status: {\n            type: \"string\",\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true\n        },\n        accumulator_root_hash: {\n            type: \"HashValue\",\n            isRequired: true\n        },\n        changes: {\n            type: \"array\",\n            contains: {\n                type: \"WriteSetChange\"\n            },\n            isRequired: true\n        },\n        sender: {\n            type: \"Address\",\n            isRequired: true\n        },\n        sequence_number: {\n            type: \"U64\",\n            isRequired: true\n        },\n        max_gas_amount: {\n            type: \"U64\",\n            isRequired: true\n        },\n        gas_unit_price: {\n            type: \"U64\",\n            isRequired: true\n        },\n        expiration_timestamp_secs: {\n            type: \"U64\",\n            isRequired: true\n        },\n        payload: {\n            type: \"TransactionPayload\",\n            isRequired: true\n        },\n        signature: {\n            type: \"TransactionSignature\"\n        },\n        events: {\n            type: \"array\",\n            contains: {\n                type: \"Event\"\n            },\n            isRequired: true\n        },\n        timestamp: {\n            type: \"U64\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$VersionedEvent.ts\nvar $VersionedEvent = {\n    description: `An event from a transaction with a version`,\n    properties: {\n        version: {\n            type: \"U64\",\n            isRequired: true\n        },\n        guid: {\n            type: \"EventGuid\",\n            isRequired: true\n        },\n        sequence_number: {\n            type: \"U64\",\n            isRequired: true\n        },\n        type: {\n            type: \"MoveType\",\n            isRequired: true\n        },\n        data: {\n            description: `The JSON representation of the event`,\n            properties: {},\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$ViewRequest.ts\nvar $ViewRequest = {\n    description: `View request for the Move View Function API`,\n    properties: {\n        function: {\n            type: \"EntryFunctionId\",\n            isRequired: true\n        },\n        type_arguments: {\n            type: \"array\",\n            contains: {\n                type: \"MoveType\"\n            },\n            isRequired: true\n        },\n        arguments: {\n            type: \"array\",\n            contains: {\n                properties: {}\n            },\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$WriteModule.ts\nvar $WriteModule = {\n    description: `Write a new module or update an existing one`,\n    properties: {\n        address: {\n            type: \"Address\",\n            isRequired: true\n        },\n        state_key_hash: {\n            type: \"string\",\n            description: `State key hash`,\n            isRequired: true\n        },\n        data: {\n            type: \"MoveModuleBytecode\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$WriteResource.ts\nvar $WriteResource = {\n    description: `Write a resource or update an existing one`,\n    properties: {\n        address: {\n            type: \"Address\",\n            isRequired: true\n        },\n        state_key_hash: {\n            type: \"string\",\n            description: `State key hash`,\n            isRequired: true\n        },\n        data: {\n            type: \"MoveResource\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$WriteSet.ts\nvar $WriteSet = {\n    type: \"one-of\",\n    description: `The associated writeset with a payload`,\n    contains: [\n        {\n            type: \"WriteSet_ScriptWriteSet\"\n        },\n        {\n            type: \"WriteSet_DirectWriteSet\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSet_DirectWriteSet.ts\nvar $WriteSet_DirectWriteSet = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"DirectWriteSet\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSet_ScriptWriteSet.ts\nvar $WriteSet_ScriptWriteSet = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"ScriptWriteSet\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSetChange.ts\nvar $WriteSetChange = {\n    type: \"one-of\",\n    description: `A final state change of a transaction on a resource or module`,\n    contains: [\n        {\n            type: \"WriteSetChange_DeleteModule\"\n        },\n        {\n            type: \"WriteSetChange_DeleteResource\"\n        },\n        {\n            type: \"WriteSetChange_DeleteTableItem\"\n        },\n        {\n            type: \"WriteSetChange_WriteModule\"\n        },\n        {\n            type: \"WriteSetChange_WriteResource\"\n        },\n        {\n            type: \"WriteSetChange_WriteTableItem\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSetChange_DeleteModule.ts\nvar $WriteSetChange_DeleteModule = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"DeleteModule\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSetChange_DeleteResource.ts\nvar $WriteSetChange_DeleteResource = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"DeleteResource\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSetChange_DeleteTableItem.ts\nvar $WriteSetChange_DeleteTableItem = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"DeleteTableItem\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSetChange_WriteModule.ts\nvar $WriteSetChange_WriteModule = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"WriteModule\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSetChange_WriteResource.ts\nvar $WriteSetChange_WriteResource = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"WriteResource\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSetChange_WriteTableItem.ts\nvar $WriteSetChange_WriteTableItem = {\n    type: \"all-of\",\n    contains: [\n        {\n            properties: {\n                type: {\n                    type: \"string\",\n                    isRequired: true\n                }\n            }\n        },\n        {\n            type: \"WriteTableItem\"\n        }\n    ]\n};\n// src/generated/schemas/$WriteSetPayload.ts\nvar $WriteSetPayload = {\n    description: `A writeset payload, used only for genesis`,\n    properties: {\n        write_set: {\n            type: \"WriteSet\",\n            isRequired: true\n        }\n    }\n};\n// src/generated/schemas/$WriteTableItem.ts\nvar $WriteTableItem = {\n    description: `Change set to write a table item`,\n    properties: {\n        state_key_hash: {\n            type: \"string\",\n            isRequired: true\n        },\n        handle: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        },\n        key: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        },\n        value: {\n            type: \"HexEncodedBytes\",\n            isRequired: true\n        },\n        data: {\n            type: \"DecodedTableData\"\n        }\n    }\n};\n// src/transaction_builder/builder.ts\n\n// src/transaction_builder/builder_utils.ts\nfunction assertType(val, types, message) {\n    if (!(types == null ? void 0 : types.includes(typeof val))) {\n        throw new Error(message || `Invalid arg: ${val} type should be ${types instanceof Array ? types.join(\" or \") : types}`);\n    }\n}\nfunction ensureBoolean(val) {\n    assertType(val, [\n        \"boolean\",\n        \"string\"\n    ]);\n    if (typeof val === \"boolean\") {\n        return val;\n    }\n    if (val === \"true\") {\n        return true;\n    }\n    if (val === \"false\") {\n        return false;\n    }\n    throw new Error(\"Invalid boolean string.\");\n}\nfunction ensureNumber(val) {\n    assertType(val, [\n        \"number\",\n        \"string\"\n    ]);\n    if (typeof val === \"number\") {\n        return val;\n    }\n    const res = Number.parseInt(val, 10);\n    if (Number.isNaN(res)) {\n        throw new Error(\"Invalid number string.\");\n    }\n    return res;\n}\nfunction ensureBigInt(val) {\n    assertType(val, [\n        \"number\",\n        \"bigint\",\n        \"string\"\n    ]);\n    return BigInt(val);\n}\nfunction serializeArg(argVal, argType, serializer) {\n    if (argType instanceof TypeTagBool) {\n        serializer.serializeBool(ensureBoolean(argVal));\n        return;\n    }\n    if (argType instanceof TypeTagU8) {\n        serializer.serializeU8(ensureNumber(argVal));\n        return;\n    }\n    if (argType instanceof TypeTagU16) {\n        serializer.serializeU16(ensureNumber(argVal));\n        return;\n    }\n    if (argType instanceof TypeTagU32) {\n        serializer.serializeU32(ensureNumber(argVal));\n        return;\n    }\n    if (argType instanceof TypeTagU64) {\n        serializer.serializeU64(ensureBigInt(argVal));\n        return;\n    }\n    if (argType instanceof TypeTagU128) {\n        serializer.serializeU128(ensureBigInt(argVal));\n        return;\n    }\n    if (argType instanceof TypeTagU256) {\n        serializer.serializeU256(ensureBigInt(argVal));\n        return;\n    }\n    if (argType instanceof TypeTagAddress) {\n        let addr;\n        if (typeof argVal === \"string\" || argVal instanceof HexString) {\n            addr = AccountAddress.fromHex(argVal);\n        } else if (argVal instanceof AccountAddress) {\n            addr = argVal;\n        } else {\n            throw new Error(\"Invalid account address.\");\n        }\n        addr.serialize(serializer);\n        return;\n    }\n    if (argType instanceof TypeTagVector) {\n        if (argType.value instanceof TypeTagU8) {\n            if (argVal instanceof Uint8Array) {\n                serializer.serializeBytes(argVal);\n                return;\n            }\n            if (typeof argVal === \"string\") {\n                serializer.serializeStr(argVal);\n                return;\n            }\n        }\n        if (!Array.isArray(argVal)) {\n            throw new Error(\"Invalid vector args.\");\n        }\n        serializer.serializeU32AsUleb128(argVal.length);\n        argVal.forEach((arg)=>serializeArg(arg, argType.value, serializer));\n        return;\n    }\n    if (argType instanceof TypeTagStruct) {\n        const { address, module_name: moduleName, name } = argType.value;\n        if (`${HexString.fromUint8Array(address.address).toShortString()}::${moduleName.value}::${name.value}` !== \"0x1::string::String\") {\n            throw new Error(\"The only supported struct arg is of type 0x1::string::String\");\n        }\n        assertType(argVal, [\n            \"string\"\n        ]);\n        serializer.serializeStr(argVal);\n        return;\n    }\n    throw new Error(\"Unsupported arg type.\");\n}\nfunction argToTransactionArgument(argVal, argType) {\n    if (argType instanceof TypeTagBool) {\n        return new TransactionArgumentBool(ensureBoolean(argVal));\n    }\n    if (argType instanceof TypeTagU8) {\n        return new TransactionArgumentU8(ensureNumber(argVal));\n    }\n    if (argType instanceof TypeTagU16) {\n        return new TransactionArgumentU16(ensureNumber(argVal));\n    }\n    if (argType instanceof TypeTagU32) {\n        return new TransactionArgumentU32(ensureNumber(argVal));\n    }\n    if (argType instanceof TypeTagU64) {\n        return new TransactionArgumentU64(ensureBigInt(argVal));\n    }\n    if (argType instanceof TypeTagU128) {\n        return new TransactionArgumentU128(ensureBigInt(argVal));\n    }\n    if (argType instanceof TypeTagU256) {\n        return new TransactionArgumentU256(ensureBigInt(argVal));\n    }\n    if (argType instanceof TypeTagAddress) {\n        let addr;\n        if (typeof argVal === \"string\" || argVal instanceof HexString) {\n            addr = AccountAddress.fromHex(argVal);\n        } else if (argVal instanceof AccountAddress) {\n            addr = argVal;\n        } else {\n            throw new Error(\"Invalid account address.\");\n        }\n        return new TransactionArgumentAddress(addr);\n    }\n    if (argType instanceof TypeTagVector && argType.value instanceof TypeTagU8) {\n        if (!(argVal instanceof Uint8Array)) {\n            throw new Error(`${argVal} should be an instance of Uint8Array`);\n        }\n        return new TransactionArgumentU8Vector(argVal);\n    }\n    throw new Error(\"Unknown type for TransactionArgument.\");\n}\n// src/transaction_builder/builder.ts\nvar RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\nvar RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\nvar TransactionBuilder = class {\n    constructor(signingFunction, rawTxnBuilder){\n        this.rawTxnBuilder = rawTxnBuilder;\n        this.signingFunction = signingFunction;\n    }\n    build(func, ty_tags, args) {\n        if (!this.rawTxnBuilder) {\n            throw new Error(\"this.rawTxnBuilder doesn't exist.\");\n        }\n        return this.rawTxnBuilder.build(func, ty_tags, args);\n    }\n    static getSigningMessage(rawTxn) {\n        const hash = _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256.create();\n        if (rawTxn instanceof RawTransaction) {\n            hash.update(RAW_TRANSACTION_SALT);\n        } else if (rawTxn instanceof MultiAgentRawTransaction) {\n            hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n        } else {\n            throw new Error(\"Unknown transaction type.\");\n        }\n        const prefix = hash.digest();\n        const body = bcsToBytes(rawTxn);\n        const mergedArray = new Uint8Array(prefix.length + body.length);\n        mergedArray.set(prefix);\n        mergedArray.set(body, prefix.length);\n        return mergedArray;\n    }\n};\nvar TransactionBuilderEd25519 = class extends TransactionBuilder {\n    constructor(signingFunction, publicKey, rawTxnBuilder){\n        super(signingFunction, rawTxnBuilder);\n        this.publicKey = publicKey;\n    }\n    rawToSigned(rawTxn) {\n        const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n        const signature = this.signingFunction(signingMessage);\n        const authenticator = new TransactionAuthenticatorEd25519(new Ed25519PublicKey(this.publicKey), signature);\n        return new SignedTransaction(rawTxn, authenticator);\n    }\n    sign(rawTxn) {\n        return bcsToBytes(this.rawToSigned(rawTxn));\n    }\n};\nvar TransactionBuilderMultiEd25519 = class extends TransactionBuilder {\n    constructor(signingFunction, publicKey){\n        super(signingFunction);\n        this.publicKey = publicKey;\n    }\n    rawToSigned(rawTxn) {\n        const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n        const signature = this.signingFunction(signingMessage);\n        const authenticator = new TransactionAuthenticatorMultiEd25519(this.publicKey, signature);\n        return new SignedTransaction(rawTxn, authenticator);\n    }\n    sign(rawTxn) {\n        return bcsToBytes(this.rawToSigned(rawTxn));\n    }\n};\nvar TransactionBuilderABI = class {\n    constructor(abis, builderConfig){\n        this.abiMap = /* @__PURE__ */ new Map();\n        abis.forEach((abi)=>{\n            const deserializer = new Deserializer(abi);\n            const scriptABI = ScriptABI.deserialize(deserializer);\n            let k;\n            if (scriptABI instanceof EntryFunctionABI) {\n                const funcABI = scriptABI;\n                const { address: addr, name: moduleName } = funcABI.module_name;\n                k = `${HexString.fromUint8Array(addr.address).toShortString()}::${moduleName.value}::${funcABI.name}`;\n            } else {\n                const funcABI = scriptABI;\n                k = funcABI.name;\n            }\n            if (this.abiMap.has(k)) {\n                throw new Error(\"Found conflicting ABI interfaces\");\n            }\n            this.abiMap.set(k, scriptABI);\n        });\n        this.builderConfig = {\n            maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n            expSecFromNow: DEFAULT_TXN_EXP_SEC_FROM_NOW,\n            ...builderConfig\n        };\n    }\n    static toBCSArgs(abiArgs, args) {\n        if (abiArgs.length !== args.length) {\n            throw new Error(\"Wrong number of args provided.\");\n        }\n        return args.map((arg, i)=>{\n            const serializer = new Serializer();\n            serializeArg(arg, abiArgs[i].type_tag, serializer);\n            return serializer.getBytes();\n        });\n    }\n    static toTransactionArguments(abiArgs, args) {\n        if (abiArgs.length !== args.length) {\n            throw new Error(\"Wrong number of args provided.\");\n        }\n        return args.map((arg, i)=>argToTransactionArgument(arg, abiArgs[i].type_tag));\n    }\n    setSequenceNumber(seqNumber) {\n        this.builderConfig.sequenceNumber = BigInt(seqNumber);\n    }\n    buildTransactionPayload(func, ty_tags, args) {\n        const typeTags = ty_tags.map((ty_arg)=>new TypeTagParser(ty_arg).parseTypeTag());\n        let payload;\n        if (!this.abiMap.has(func)) {\n            throw new Error(`Cannot find function: ${func}`);\n        }\n        const scriptABI = this.abiMap.get(func);\n        if (scriptABI instanceof EntryFunctionABI) {\n            const funcABI = scriptABI;\n            const bcsArgs = TransactionBuilderABI.toBCSArgs(funcABI.args, args);\n            payload = new TransactionPayloadEntryFunction(new EntryFunction(funcABI.module_name, new Identifier(funcABI.name), typeTags, bcsArgs));\n        } else if (scriptABI instanceof TransactionScriptABI) {\n            const funcABI = scriptABI;\n            const scriptArgs = TransactionBuilderABI.toTransactionArguments(funcABI.args, args);\n            payload = new TransactionPayloadScript(new Script(funcABI.code, typeTags, scriptArgs));\n        } else {\n            throw new Error(\"Unknown ABI format.\");\n        }\n        return payload;\n    }\n    build(func, ty_tags, args) {\n        const { sender, sequenceNumber, gasUnitPrice, maxGasAmount, expSecFromNow, chainId } = this.builderConfig;\n        if (!gasUnitPrice) {\n            throw new Error(\"No gasUnitPrice provided.\");\n        }\n        const senderAccount = sender instanceof AccountAddress ? sender : AccountAddress.fromHex(sender);\n        const expTimestampSec = BigInt(Math.floor(Date.now() / 1e3) + Number(expSecFromNow));\n        const payload = this.buildTransactionPayload(func, ty_tags, args);\n        if (payload) {\n            return new RawTransaction(senderAccount, BigInt(sequenceNumber), payload, BigInt(maxGasAmount), BigInt(gasUnitPrice), expTimestampSec, new ChainId(Number(chainId)));\n        }\n        throw new Error(\"Invalid ABI.\");\n    }\n};\nvar TransactionBuilderRemoteABI = class {\n    constructor(aptosClient, builderConfig){\n        this.aptosClient = aptosClient;\n        this.builderConfig = builderConfig;\n    }\n    async fetchABI(addr) {\n        const modules = await this.aptosClient.getAccountModules(addr);\n        const abis = modules.map((module)=>module.abi).flatMap((abi)=>abi.exposed_functions.filter((ef)=>ef.is_entry).map((ef)=>({\n                    fullName: `${abi.address}::${abi.name}::${ef.name}`,\n                    ...ef\n                })));\n        const abiMap = /* @__PURE__ */ new Map();\n        abis.forEach((abi)=>{\n            abiMap.set(abi.fullName, abi);\n        });\n        return abiMap;\n    }\n    async build(func, ty_tags, args) {\n        const normlize = (s)=>s.replace(/^0[xX]0*/g, \"0x\");\n        func = normlize(func);\n        const funcNameParts = func.split(\"::\");\n        if (funcNameParts.length !== 3) {\n            throw new Error(\"'func' needs to be a fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coins::transfer\");\n        }\n        const [addr, module] = func.split(\"::\");\n        const abiMap = await this.fetchABI(addr);\n        if (!abiMap.has(func)) {\n            throw new Error(`${func} doesn't exist.`);\n        }\n        const funcAbi = abiMap.get(func);\n        const abiArgs = funcAbi.params.filter((param)=>param !== \"signer\" && param !== \"&signer\");\n        const typeArgABIs = abiArgs.map((abiArg, i)=>new ArgumentABI(`var${i}`, new TypeTagParser(abiArg, ty_tags).parseTypeTag()));\n        const entryFunctionABI = new EntryFunctionABI(funcAbi.name, ModuleId.fromStr(`${addr}::${module}`), \"\", funcAbi.generic_type_params.map((_, i)=>new TypeArgumentABI(`${i}`)), typeArgABIs);\n        const { sender, ...rest } = this.builderConfig;\n        const senderAddress = sender instanceof AccountAddress ? HexString.fromUint8Array(sender.address) : sender;\n        const [{ sequence_number: sequenceNumber }, chainId, { gas_estimate: gasUnitPrice }] = await Promise.all([\n            (rest == null ? void 0 : rest.sequenceNumber) ? Promise.resolve({\n                sequence_number: rest == null ? void 0 : rest.sequenceNumber\n            }) : this.aptosClient.getAccount(senderAddress),\n            (rest == null ? void 0 : rest.chainId) ? Promise.resolve(rest == null ? void 0 : rest.chainId) : this.aptosClient.getChainId(),\n            (rest == null ? void 0 : rest.gasUnitPrice) ? Promise.resolve({\n                gas_estimate: rest == null ? void 0 : rest.gasUnitPrice\n            }) : this.aptosClient.estimateGasPrice()\n        ]);\n        const builderABI = new TransactionBuilderABI([\n            bcsToBytes(entryFunctionABI)\n        ], {\n            sender,\n            sequenceNumber,\n            chainId,\n            gasUnitPrice: BigInt(gasUnitPrice),\n            ...rest\n        });\n        return builderABI.build(func, ty_tags, args);\n    }\n};\n__decorateClass([\n    MemoizeExpiring(10 * 60 * 1e3)\n], TransactionBuilderRemoteABI.prototype, \"fetchABI\", 1);\n// src/providers/aptos_client.ts\nvar _AptosClient = class {\n    constructor(nodeUrl, config, doNotFixNodeUrl = false){\n        if (!nodeUrl) {\n            throw new Error(\"Node URL cannot be empty.\");\n        }\n        const conf = config === void 0 || config === null ? {} : {\n            ...config\n        };\n        if (doNotFixNodeUrl) {\n            this.nodeUrl = nodeUrl;\n        } else {\n            this.nodeUrl = fixNodeUrl(nodeUrl);\n        }\n        conf.BASE = this.nodeUrl;\n        if ((config == null ? void 0 : config.WITH_CREDENTIALS) === false) {\n            conf.WITH_CREDENTIALS = false;\n        } else {\n            conf.WITH_CREDENTIALS = true;\n        }\n        this.client = new AptosGeneratedClient(conf);\n    }\n    async getAccount(accountAddress) {\n        return this.client.accounts.getAccount(HexString.ensure(accountAddress).hex());\n    }\n    async getAccountTransactions(accountAddress, query) {\n        var _a;\n        return this.client.transactions.getAccountTransactions(HexString.ensure(accountAddress).hex(), (_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(), query == null ? void 0 : query.limit);\n    }\n    async getAccountModules(accountAddress, query) {\n        const f = this.client.accounts.getAccountModules.bind({\n            httpRequest: this.client.request\n        });\n        const out = await paginateWithCursor(f, accountAddress, 1e3, query);\n        return out;\n    }\n    async getAccountModule(accountAddress, moduleName, query) {\n        var _a;\n        return this.client.accounts.getAccountModule(HexString.ensure(accountAddress).hex(), moduleName, (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString());\n    }\n    async getAccountResources(accountAddress, query) {\n        const f = this.client.accounts.getAccountResources.bind({\n            httpRequest: this.client.request\n        });\n        const out = await paginateWithCursor(f, accountAddress, 9999, query);\n        return out;\n    }\n    async getAccountResource(accountAddress, resourceType, query) {\n        var _a;\n        return this.client.accounts.getAccountResource(HexString.ensure(accountAddress).hex(), resourceType, (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString());\n    }\n    static generateBCSTransaction(accountFrom, rawTxn) {\n        const txnBuilder = new TransactionBuilderEd25519((signingMessage)=>{\n            const sigHexStr = accountFrom.signBuffer(signingMessage);\n            return new aptos_types_exports.Ed25519Signature(sigHexStr.toUint8Array());\n        }, accountFrom.pubKey().toUint8Array());\n        return txnBuilder.sign(rawTxn);\n    }\n    static generateBCSSimulation(accountFrom, rawTxn) {\n        const txnBuilder = new TransactionBuilderEd25519((_signingMessage)=>{\n            const invalidSigBytes = new Uint8Array(64);\n            return new aptos_types_exports.Ed25519Signature(invalidSigBytes);\n        }, accountFrom.pubKey().toUint8Array());\n        return txnBuilder.sign(rawTxn);\n    }\n    async generateTransaction(sender, payload, options) {\n        const config = {\n            sender\n        };\n        if (options == null ? void 0 : options.sequence_number) {\n            config.sequenceNumber = options.sequence_number;\n        }\n        if (options == null ? void 0 : options.gas_unit_price) {\n            config.gasUnitPrice = options.gas_unit_price;\n        }\n        if (options == null ? void 0 : options.max_gas_amount) {\n            config.maxGasAmount = options.max_gas_amount;\n        }\n        if (options == null ? void 0 : options.expiration_timestamp_secs) {\n            const timestamp = Number.parseInt(options.expiration_timestamp_secs, 10);\n            config.expSecFromNow = timestamp - Math.floor(Date.now() / 1e3);\n        }\n        const builder = new TransactionBuilderRemoteABI(this, config);\n        return builder.build(payload.function, payload.type_arguments, payload.arguments);\n    }\n    async signTransaction(accountFrom, rawTransaction) {\n        return Promise.resolve(_AptosClient.generateBCSTransaction(accountFrom, rawTransaction));\n    }\n    async getEventsByCreationNumber(address, creationNumber, query) {\n        var _a;\n        return this.client.events.getEventsByCreationNumber(HexString.ensure(address).hex(), creationNumber.toString(), (_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(), query == null ? void 0 : query.limit);\n    }\n    async getEventsByEventHandle(address, eventHandleStruct, fieldName, query) {\n        var _a;\n        return this.client.events.getEventsByEventHandle(HexString.ensure(address).hex(), eventHandleStruct, fieldName, (_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(), query == null ? void 0 : query.limit);\n    }\n    async submitTransaction(signedTxn) {\n        return this.submitSignedBCSTransaction(signedTxn);\n    }\n    async simulateTransaction(accountOrPubkey, rawTransaction, query) {\n        let signedTxn;\n        if (accountOrPubkey instanceof AptosAccount) {\n            signedTxn = _AptosClient.generateBCSSimulation(accountOrPubkey, rawTransaction);\n        } else if (accountOrPubkey instanceof MultiEd25519PublicKey) {\n            const txnBuilder = new TransactionBuilderMultiEd25519(()=>{\n                const { threshold } = accountOrPubkey;\n                const bits = [];\n                const signatures = [];\n                for(let i = 0; i < threshold; i += 1){\n                    bits.push(i);\n                    signatures.push(new aptos_types_exports.Ed25519Signature(new Uint8Array(64)));\n                }\n                const bitmap = aptos_types_exports.MultiEd25519Signature.createBitmap(bits);\n                return new aptos_types_exports.MultiEd25519Signature(signatures, bitmap);\n            }, accountOrPubkey);\n            signedTxn = txnBuilder.sign(rawTransaction);\n        } else {\n            const txnBuilder = new TransactionBuilderEd25519(()=>{\n                const invalidSigBytes = new Uint8Array(64);\n                return new aptos_types_exports.Ed25519Signature(invalidSigBytes);\n            }, accountOrPubkey.toBytes());\n            signedTxn = txnBuilder.sign(rawTransaction);\n        }\n        return this.submitBCSSimulation(signedTxn, query);\n    }\n    async submitSignedBCSTransaction(signedTxn) {\n        return this.client.request.request({\n            url: \"/transactions\",\n            method: \"POST\",\n            body: signedTxn,\n            mediaType: \"application/x.aptos.signed_transaction+bcs\"\n        });\n    }\n    async submitBCSSimulation(bcsBody, query) {\n        var _a, _b, _c;\n        const queryParams = {\n            estimate_gas_unit_price: (_a = query == null ? void 0 : query.estimateGasUnitPrice) != null ? _a : false,\n            estimate_max_gas_amount: (_b = query == null ? void 0 : query.estimateMaxGasAmount) != null ? _b : false,\n            estimate_prioritized_gas_unit_price: (_c = query == null ? void 0 : query.estimatePrioritizedGasUnitPrice) != null ? _c : false\n        };\n        return this.client.request.request({\n            url: \"/transactions/simulate\",\n            query: queryParams,\n            method: \"POST\",\n            body: bcsBody,\n            mediaType: \"application/x.aptos.signed_transaction+bcs\"\n        });\n    }\n    async getTransactions(query) {\n        var _a;\n        return this.client.transactions.getTransactions((_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(), query == null ? void 0 : query.limit);\n    }\n    async getTransactionByHash(txnHash) {\n        return this.client.transactions.getTransactionByHash(txnHash);\n    }\n    async getTransactionByVersion(txnVersion) {\n        return this.client.transactions.getTransactionByVersion(txnVersion.toString());\n    }\n    async transactionPending(txnHash) {\n        try {\n            const response = await this.client.transactions.getTransactionByHash(txnHash);\n            return response.type === \"pending_transaction\";\n        } catch (e) {\n            if ((e == null ? void 0 : e.status) === 404) {\n                return true;\n            }\n            throw e;\n        }\n    }\n    async waitForTransactionWithResult(txnHash, extraArgs) {\n        var _a, _b;\n        const timeoutSecs = (_a = extraArgs == null ? void 0 : extraArgs.timeoutSecs) != null ? _a : DEFAULT_TXN_TIMEOUT_SEC;\n        const checkSuccess = (_b = extraArgs == null ? void 0 : extraArgs.checkSuccess) != null ? _b : false;\n        let isPending = true;\n        let count = 0;\n        let lastTxn;\n        while(isPending){\n            if (count >= timeoutSecs) {\n                break;\n            }\n            try {\n                lastTxn = await this.client.transactions.getTransactionByHash(txnHash);\n                isPending = lastTxn.type === \"pending_transaction\";\n                if (!isPending) {\n                    break;\n                }\n            } catch (e) {\n                const isApiError = e instanceof ApiError;\n                const isRequestError = isApiError && e.status !== 404 && e.status >= 400 && e.status < 500;\n                if (!isApiError || isRequestError) {\n                    throw e;\n                }\n            }\n            await sleep(1e3);\n            count += 1;\n        }\n        if (lastTxn === void 0) {\n            throw new Error(`Waiting for transaction ${txnHash} failed`);\n        }\n        if (isPending) {\n            throw new WaitForTransactionError(`Waiting for transaction ${txnHash} timed out after ${timeoutSecs} seconds`, lastTxn);\n        }\n        if (!checkSuccess) {\n            return lastTxn;\n        }\n        if (!(lastTxn == null ? void 0 : lastTxn.success)) {\n            throw new FailedTransactionError(`Transaction ${txnHash} committed to the blockchain but execution failed`, lastTxn);\n        }\n        return lastTxn;\n    }\n    async waitForTransaction(txnHash, extraArgs) {\n        await this.waitForTransactionWithResult(txnHash, extraArgs);\n    }\n    async getLedgerInfo() {\n        return this.client.general.getLedgerInfo();\n    }\n    async getChainId() {\n        const result = await this.getLedgerInfo();\n        return result.chain_id;\n    }\n    async getTableItem(handle, data, query) {\n        var _a;\n        const tableItem = await this.client.tables.getTableItem(handle, data, (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString());\n        return tableItem;\n    }\n    async generateRawTransaction(accountFrom, payload, extraArgs) {\n        const [{ sequence_number: sequenceNumber }, chainId, { gas_estimate: gasEstimate }] = await Promise.all([\n            this.getAccount(accountFrom),\n            this.getChainId(),\n            (extraArgs == null ? void 0 : extraArgs.gasUnitPrice) ? Promise.resolve({\n                gas_estimate: extraArgs.gasUnitPrice\n            }) : this.estimateGasPrice()\n        ]);\n        const { maxGasAmount, gasUnitPrice, expireTimestamp } = {\n            maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n            gasUnitPrice: BigInt(gasEstimate),\n            expireTimestamp: BigInt(Math.floor(Date.now() / 1e3) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n            ...extraArgs\n        };\n        return new aptos_types_exports.RawTransaction(aptos_types_exports.AccountAddress.fromHex(accountFrom), BigInt(sequenceNumber), payload, maxGasAmount, gasUnitPrice, expireTimestamp, new aptos_types_exports.ChainId(chainId));\n    }\n    async generateSignSubmitTransaction(sender, payload, extraArgs) {\n        const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n        const bcsTxn = _AptosClient.generateBCSTransaction(sender, rawTransaction);\n        const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async publishPackage(sender, packageMetadata, modules, extraArgs) {\n        const codeSerializer = new Serializer();\n        serializeVector(modules, codeSerializer);\n        const payload = new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural(\"0x1::code\", \"publish_package_txn\", [], [\n            bcsSerializeBytes(packageMetadata),\n            codeSerializer.getBytes()\n        ]));\n        return this.generateSignSubmitTransaction(sender, payload, extraArgs);\n    }\n    async generateSignSubmitWaitForTransaction(sender, payload, extraArgs) {\n        const txnHash = await this.generateSignSubmitTransaction(sender, payload, extraArgs);\n        return this.waitForTransactionWithResult(txnHash, extraArgs);\n    }\n    async estimateGasPrice() {\n        return this.client.transactions.estimateGasPrice();\n    }\n    async estimateMaxGasAmount(forAccount) {\n        const typeTag = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n        const [{ gas_estimate: gasUnitPrice }, resources] = await Promise.all([\n            this.estimateGasPrice(),\n            this.getAccountResources(forAccount)\n        ]);\n        const accountResource = resources.find((r)=>r.type === typeTag);\n        const balance = BigInt(accountResource.data.coin.value);\n        return balance / BigInt(gasUnitPrice);\n    }\n    async rotateAuthKeyEd25519(forAccount, toPrivateKeyBytes, extraArgs) {\n        const { sequence_number: sequenceNumber, authentication_key: authKey } = await this.getAccount(forAccount.address());\n        const helperAccount = new AptosAccount(toPrivateKeyBytes);\n        const challenge = new aptos_types_exports.RotationProofChallenge(aptos_types_exports.AccountAddress.CORE_CODE_ADDRESS, \"account\", \"RotationProofChallenge\", BigInt(sequenceNumber), aptos_types_exports.AccountAddress.fromHex(forAccount.address()), new aptos_types_exports.AccountAddress(new HexString(authKey).toUint8Array()), helperAccount.pubKey().toUint8Array());\n        const challengeHex = HexString.fromUint8Array(bcsToBytes(challenge));\n        const proofSignedByCurrentPrivateKey = forAccount.signHexString(challengeHex);\n        const proofSignedByNewPrivateKey = helperAccount.signHexString(challengeHex);\n        const payload = new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural(\"0x1::account\", \"rotate_authentication_key\", [], [\n            bcsSerializeU8(0),\n            bcsSerializeBytes(forAccount.pubKey().toUint8Array()),\n            bcsSerializeU8(0),\n            bcsSerializeBytes(helperAccount.pubKey().toUint8Array()),\n            bcsSerializeBytes(proofSignedByCurrentPrivateKey.toUint8Array()),\n            bcsSerializeBytes(proofSignedByNewPrivateKey.toUint8Array())\n        ]));\n        const rawTransaction = await this.generateRawTransaction(forAccount.address(), payload, extraArgs);\n        const bcsTxn = _AptosClient.generateBCSTransaction(forAccount, rawTransaction);\n        return this.submitSignedBCSTransaction(bcsTxn);\n    }\n    async lookupOriginalAddress(addressOrAuthKey) {\n        const resource = await this.getAccountResource(\"0x1\", \"0x1::account::OriginatingAddress\");\n        const { address_map: { handle } } = resource.data;\n        const origAddress = await this.getTableItem(handle, {\n            key_type: \"address\",\n            value_type: \"address\",\n            key: HexString.ensure(addressOrAuthKey).hex()\n        });\n        return new HexString(origAddress);\n    }\n    async getBlockByHeight(blockHeight, withTransactions) {\n        return this.client.blocks.getBlockByHeight(blockHeight, withTransactions);\n    }\n    async getBlockByVersion(version, withTransactions) {\n        return this.client.blocks.getBlockByVersion(version, withTransactions);\n    }\n    async view(payload, ledger_version) {\n        return this.client.view.view(payload, ledger_version);\n    }\n    clearCache(tags) {\n        clear(tags);\n    }\n};\nvar AptosClient = _AptosClient;\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getAccount\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getAccountTransactions\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getAccountModules\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getAccountModule\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getAccountResources\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getAccountResource\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getEventsByCreationNumber\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getEventsByEventHandle\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"submitSignedBCSTransaction\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"submitBCSSimulation\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getTransactions\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getTransactionByHash\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getTransactionByVersion\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getLedgerInfo\", 1);\n__decorateClass([\n    Memoize()\n], AptosClient.prototype, \"getChainId\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getTableItem\", 1);\n__decorateClass([\n    parseApiError,\n    Memoize({\n        ttlMs: 5 * 60 * 1e3,\n        tags: [\n            \"gas_estimates\"\n        ]\n    })\n], AptosClient.prototype, \"estimateGasPrice\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"estimateMaxGasAmount\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getBlockByHeight\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"getBlockByVersion\", 1);\n__decorateClass([\n    parseApiError\n], AptosClient.prototype, \"view\", 1);\nvar ApiError2 = class extends Error {\n    constructor(status, message, errorCode, vmErrorCode){\n        super(message);\n        this.status = status;\n        this.message = message;\n        this.errorCode = errorCode;\n        this.vmErrorCode = vmErrorCode;\n    }\n};\nvar WaitForTransactionError = class extends Error {\n    constructor(message, lastSubmittedTransaction){\n        super(message);\n        this.lastSubmittedTransaction = lastSubmittedTransaction;\n    }\n};\nvar FailedTransactionError = class extends Error {\n    constructor(message, transaction){\n        super(message);\n        this.transaction = transaction;\n    }\n};\nfunction parseApiError(target, propertyKey, descriptor) {\n    const childFunction = descriptor.value;\n    descriptor.value = async function wrapper(...args) {\n        var _a, _b;\n        try {\n            const res = await childFunction.apply(this, [\n                ...args\n            ]);\n            return res;\n        } catch (e) {\n            if (e instanceof ApiError) {\n                throw new ApiError2(e.status, JSON.stringify({\n                    message: e.message,\n                    ...e.body\n                }), (_a = e.body) == null ? void 0 : _a.error_code, (_b = e.body) == null ? void 0 : _b.vm_error_code);\n            }\n            throw e;\n        }\n    };\n    return descriptor;\n}\n// src/providers/provider.ts\nvar Provider = class {\n    constructor(network, config, doNotFixNodeUrl = false){\n        let fullNodeUrl = null;\n        let indexerUrl = null;\n        if (typeof network === \"object\" && isCustomEndpoints(network)) {\n            fullNodeUrl = network.fullnodeUrl;\n            indexerUrl = network.indexerUrl;\n            this.network = \"CUSTOM\";\n        } else {\n            fullNodeUrl = NetworkToNodeAPI[network];\n            indexerUrl = NetworkToIndexerAPI[network];\n            this.network = network;\n        }\n        if (!fullNodeUrl || !indexerUrl) {\n            throw new Error(\"network is not provided\");\n        }\n        this.aptosClient = new AptosClient(fullNodeUrl, config, doNotFixNodeUrl);\n        this.indexerClient = new IndexerClient(indexerUrl);\n    }\n};\nfunction applyMixin(targetClass, baseClass, baseClassProp) {\n    Object.getOwnPropertyNames(baseClass.prototype).forEach((propertyName)=>{\n        const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, propertyName);\n        if (!propertyDescriptor) return;\n        propertyDescriptor.value = function(...args) {\n            return this[baseClassProp][propertyName](...args);\n        };\n        Object.defineProperty(targetClass.prototype, propertyName, propertyDescriptor);\n    });\n}\napplyMixin(Provider, AptosClient, \"aptosClient\");\napplyMixin(Provider, IndexerClient, \"indexerClient\");\nfunction isCustomEndpoints(network) {\n    return network.fullnodeUrl !== void 0 && typeof network.fullnodeUrl === \"string\" && network.indexerUrl !== void 0 && typeof network.indexerUrl === \"string\";\n}\n// src/utils/property_map_serde.ts\nvar PropertyValue = class {\n    constructor(type, value){\n        this.type = type;\n        this.value = value;\n    }\n};\nvar PropertyMap = class {\n    constructor(){\n        this.data = {};\n    }\n    setProperty(key, value) {\n        this.data[key] = value;\n    }\n};\nfunction getPropertyType(typ) {\n    let typeTag;\n    if (typ === \"string\" || typ === \"String\") {\n        typeTag = new TypeTagStruct(stringStructTag);\n    } else {\n        typeTag = new TypeTagParser(typ).parseTypeTag();\n    }\n    return typeTag;\n}\nfunction getPropertyValueRaw(values, types) {\n    if (values.length !== types.length) {\n        throw new Error(\"Length of property values and types not match\");\n    }\n    const results = new Array();\n    types.forEach((typ, index)=>{\n        try {\n            const typeTag = getPropertyType(typ);\n            const serializer = new Serializer();\n            serializeArg(values[index], typeTag, serializer);\n            results.push(serializer.getBytes());\n        } catch (error) {\n            results.push(new TextEncoder().encode(values[index]));\n        }\n    });\n    return results;\n}\nfunction getSinglePropertyValueRaw(value, type) {\n    if (!value || !type) {\n        throw new Error(\"value or type can not be empty\");\n    }\n    try {\n        const typeTag = getPropertyType(type);\n        const serializer = new Serializer();\n        serializeArg(value, typeTag, serializer);\n        return serializer.getBytes();\n    } catch (error) {\n        return new TextEncoder().encode(value);\n    }\n}\nfunction deserializePropertyMap(rawPropertyMap) {\n    const entries = rawPropertyMap.map.data;\n    const pm = new PropertyMap();\n    entries.forEach((prop)=>{\n        const { key } = prop;\n        const val = prop.value.value;\n        const typ = prop.value.type;\n        const typeTag = getPropertyType(typ);\n        const newValue = deserializeValueBasedOnTypeTag(typeTag, val);\n        const pv = new PropertyValue(typ, newValue);\n        pm.setProperty(key, pv);\n    });\n    return pm;\n}\nfunction deserializeValueBasedOnTypeTag(tag, val) {\n    const de = new Deserializer(new HexString(val).toUint8Array());\n    let res = \"\";\n    if (tag instanceof TypeTagU8) {\n        res = de.deserializeU8().toString();\n    } else if (tag instanceof TypeTagU64) {\n        res = de.deserializeU64().toString();\n    } else if (tag instanceof TypeTagU128) {\n        res = de.deserializeU128().toString();\n    } else if (tag instanceof TypeTagBool) {\n        res = de.deserializeBool() ? \"true\" : \"false\";\n    } else if (tag instanceof TypeTagAddress) {\n        res = HexString.fromUint8Array(de.deserializeFixedBytes(32)).hex();\n    } else if (tag instanceof TypeTagStruct && tag.isStringTypeTag()) {\n        res = de.deserializeStr();\n    } else {\n        res = val;\n    }\n    return res;\n}\n// src/aptos_types/token_types.ts\nvar token_types_exports = {};\n__export(token_types_exports, {\n    PropertyMap: ()=>PropertyMap,\n    PropertyValue: ()=>PropertyValue,\n    Token: ()=>Token,\n    TokenData: ()=>TokenData\n});\nvar TokenData = class {\n    constructor(collection, description, name, maximum, supply, uri, default_properties, mutability_config){\n        this.collection = collection;\n        this.description = description;\n        this.name = name;\n        this.maximum = maximum;\n        this.supply = supply;\n        this.uri = uri;\n        this.default_properties = deserializePropertyMap(default_properties);\n        this.mutability_config = mutability_config;\n    }\n};\nvar Token = class {\n    constructor(id, amount, token_properties){\n        this.id = id;\n        this.amount = amount;\n        this.token_properties = deserializePropertyMap(token_properties);\n    }\n};\n// src/plugins/token_client.ts\nvar TokenClient = class {\n    constructor(aptosClient){\n        this.aptosClient = aptosClient;\n    }\n    async createCollection(account, name, description, uri, maxAmount = MAX_U64_BIG_INT, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: account.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::create_collection_script\", [], [\n            name,\n            description,\n            uri,\n            maxAmount,\n            [\n                false,\n                false,\n                false\n            ]\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async createToken(account, collectionName, name, description, supply, uri, max = MAX_U64_BIG_INT, royalty_payee_address = account.address(), royalty_points_denominator = 0, royalty_points_numerator = 0, property_keys = [], property_values = [], property_types = [], extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: account.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::create_token_script\", [], [\n            collectionName,\n            name,\n            description,\n            supply,\n            max,\n            uri,\n            royalty_payee_address,\n            royalty_points_denominator,\n            royalty_points_numerator,\n            [\n                false,\n                false,\n                false,\n                false,\n                false\n            ],\n            property_keys,\n            getPropertyValueRaw(property_values, property_types),\n            property_types\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async createTokenWithMutabilityConfig(account, collectionName, name, description, supply, uri, max = MAX_U64_BIG_INT, royalty_payee_address = account.address(), royalty_points_denominator = 0, royalty_points_numerator = 0, property_keys = [], property_values = [], property_types = [], mutability_config = [\n        false,\n        false,\n        false,\n        false,\n        false\n    ], extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: account.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::create_token_script\", [], [\n            collectionName,\n            name,\n            description,\n            supply,\n            max,\n            uri,\n            royalty_payee_address,\n            royalty_points_denominator,\n            royalty_points_numerator,\n            mutability_config,\n            property_keys,\n            property_values,\n            property_types\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async offerToken(account, receiver, creator, collectionName, name, amount, property_version = 0, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: account.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token_transfers::offer_script\", [], [\n            receiver,\n            creator,\n            collectionName,\n            name,\n            property_version,\n            amount\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async claimToken(account, sender, creator, collectionName, name, property_version = 0, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: account.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token_transfers::claim_script\", [], [\n            sender,\n            creator,\n            collectionName,\n            name,\n            property_version\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async cancelTokenOffer(account, receiver, creator, collectionName, name, property_version = 0, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: account.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token_transfers::cancel_offer_script\", [], [\n            receiver,\n            creator,\n            collectionName,\n            name,\n            property_version\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async directTransferToken(sender, receiver, creator, collectionName, name, amount, propertyVersion = 0, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: sender.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::direct_transfer_script\", [], [\n            creator,\n            collectionName,\n            name,\n            propertyVersion,\n            amount\n        ]);\n        const multiAgentTxn = new aptos_types_exports.MultiAgentRawTransaction(rawTxn, [\n            aptos_types_exports.AccountAddress.fromHex(receiver.address())\n        ]);\n        const senderSignature = new aptos_types_exports.Ed25519Signature(sender.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array());\n        const senderAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(sender.signingKey.publicKey), senderSignature);\n        const receiverSignature = new aptos_types_exports.Ed25519Signature(receiver.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array());\n        const receiverAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(receiver.signingKey.publicKey), receiverSignature);\n        const multiAgentAuthenticator = new aptos_types_exports.TransactionAuthenticatorMultiAgent(senderAuthenticator, [\n            aptos_types_exports.AccountAddress.fromHex(receiver.address())\n        ], [\n            receiverAuthenticator\n        ]);\n        const bcsTxn = bcsToBytes(new aptos_types_exports.SignedTransaction(rawTxn, multiAgentAuthenticator));\n        const transactionRes = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return transactionRes.hash;\n    }\n    async optInTokenTransfer(sender, optIn, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: sender.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::opt_in_direct_transfer\", [], [\n            optIn\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async transferWithOptIn(sender, creator, collectionName, tokenName, propertyVersion, receiver, amount, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: sender.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::transfer_with_opt_in\", [], [\n            creator,\n            collectionName,\n            tokenName,\n            propertyVersion,\n            receiver,\n            amount\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async burnByCreator(creator, ownerAddress, collection, name, PropertyVersion, amount, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: creator.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::burn_by_creator\", [], [\n            ownerAddress,\n            collection,\n            name,\n            PropertyVersion,\n            amount\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(creator, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async burnByOwner(owner, creatorAddress, collection, name, PropertyVersion, amount, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: owner.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::burn\", [], [\n            creatorAddress,\n            collection,\n            name,\n            PropertyVersion,\n            amount\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async mutateTokenProperties(account, tokenOwner, creator, collection_name, tokenName, propertyVersion, amount, keys, values, types, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: account.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x3::token::mutate_token_properties\", [], [\n            tokenOwner,\n            creator,\n            collection_name,\n            tokenName,\n            propertyVersion,\n            amount,\n            keys,\n            values,\n            types\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async getCollectionData(creator, collectionName) {\n        const resources = await this.aptosClient.getAccountResources(creator);\n        const accountResource = resources.find((r)=>r.type === \"0x3::token::Collections\");\n        const { handle } = accountResource.data.collection_data;\n        const getCollectionTableItemRequest = {\n            key_type: \"0x1::string::String\",\n            value_type: \"0x3::token::CollectionData\",\n            key: collectionName\n        };\n        const collectionTable = await this.aptosClient.getTableItem(handle, getCollectionTableItemRequest);\n        return collectionTable;\n    }\n    async getTokenData(creator, collectionName, tokenName) {\n        const creatorHex = creator instanceof HexString ? creator.hex() : creator;\n        const collection = await this.aptosClient.getAccountResource(creatorHex, \"0x3::token::Collections\");\n        const { handle } = collection.data.token_data;\n        const tokenDataId = {\n            creator: creatorHex,\n            collection: collectionName,\n            name: tokenName\n        };\n        const getTokenTableItemRequest = {\n            key_type: \"0x3::token::TokenDataId\",\n            value_type: \"0x3::token::TokenData\",\n            key: tokenDataId\n        };\n        const rawTokenData = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n        return new TokenData(rawTokenData.collection, rawTokenData.description, rawTokenData.name, rawTokenData.maximum, rawTokenData.supply, rawTokenData.uri, rawTokenData.default_properties, rawTokenData.mutability_config);\n    }\n    async getToken(creator, collectionName, tokenName, property_version = \"0\") {\n        const tokenDataId = {\n            creator: creator instanceof HexString ? creator.hex() : creator,\n            collection: collectionName,\n            name: tokenName\n        };\n        return this.getTokenForAccount(creator, {\n            token_data_id: tokenDataId,\n            property_version\n        });\n    }\n    async getTokenForAccount(account, tokenId) {\n        const tokenStore = await this.aptosClient.getAccountResource(account instanceof HexString ? account.hex() : account, \"0x3::token::TokenStore\");\n        const { handle } = tokenStore.data.tokens;\n        const getTokenTableItemRequest = {\n            key_type: \"0x3::token::TokenId\",\n            value_type: \"0x3::token::Token\",\n            key: tokenId\n        };\n        try {\n            const rawToken = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n            return new Token(rawToken.id, rawToken.amount, rawToken.token_properties);\n        } catch (error) {\n            if ((error == null ? void 0 : error.status) === 404) {\n                return {\n                    id: tokenId,\n                    amount: \"0\",\n                    token_properties: new PropertyMap()\n                };\n            }\n            return error;\n        }\n    }\n};\n// src/plugins/aptos_token.ts\nvar PropertyTypeMap = {\n    BOOLEAN: \"bool\",\n    U8: \"u8\",\n    U16: \"u16\",\n    U32: \"u32\",\n    U64: \"u64\",\n    U128: \"u128\",\n    U256: \"u256\",\n    ADDRESS: \"address\",\n    VECTOR: \"vector<u8>\",\n    STRING: \"string\"\n};\nvar AptosToken = class {\n    constructor(provider){\n        this.tokenType = \"0x4::token::Token\";\n        this.provider = provider;\n    }\n    async submitTransaction(account, funcName, typeArgs, args, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.provider, {\n            sender: account.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(`0x4::aptos_token::${funcName}`, typeArgs, args);\n        const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n        const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async createCollection(creator, description, name, uri, maxSupply = MAX_U64_BIG_INT, options, extraArgs) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;\n        return this.submitTransaction(creator, \"create_collection\", [], [\n            description,\n            maxSupply,\n            name,\n            uri,\n            (_a = options == null ? void 0 : options.mutableDescription) != null ? _a : true,\n            (_b = options == null ? void 0 : options.mutableRoyalty) != null ? _b : true,\n            (_c = options == null ? void 0 : options.mutableURI) != null ? _c : true,\n            (_d = options == null ? void 0 : options.mutableTokenDescription) != null ? _d : true,\n            (_e = options == null ? void 0 : options.mutableTokenName) != null ? _e : true,\n            (_f = options == null ? void 0 : options.mutableTokenProperties) != null ? _f : true,\n            (_g = options == null ? void 0 : options.mutableTokenURI) != null ? _g : true,\n            (_h = options == null ? void 0 : options.tokensBurnableByCreator) != null ? _h : true,\n            (_i = options == null ? void 0 : options.tokensFreezableByCreator) != null ? _i : true,\n            (_j = options == null ? void 0 : options.royaltyNumerator) != null ? _j : 0,\n            (_k = options == null ? void 0 : options.royaltyDenominator) != null ? _k : 0\n        ], extraArgs);\n    }\n    async mint(account, collection, description, name, uri, propertyKeys = [], propertyTypes = [], propertyValues = [], extraArgs) {\n        return this.submitTransaction(account, \"mint\", [], [\n            collection,\n            description,\n            name,\n            uri,\n            propertyKeys,\n            propertyTypes,\n            getPropertyValueRaw(propertyValues, propertyTypes)\n        ], extraArgs);\n    }\n    async mintSoulBound(account, collection, description, name, uri, recipient, propertyKeys = [], propertyTypes = [], propertyValues = [], extraArgs) {\n        return this.submitTransaction(account, \"mint_soul_bound\", [], [\n            collection,\n            description,\n            name,\n            uri,\n            propertyKeys,\n            propertyTypes,\n            getPropertyValueRaw(propertyValues, propertyTypes),\n            recipient.address().hex()\n        ], extraArgs);\n    }\n    async burnToken(creator, token, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"burn\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex()\n        ], extraArgs);\n    }\n    async freezeTokenTransafer(creator, token, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"freeze_transfer\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex()\n        ], extraArgs);\n    }\n    async unfreezeTokenTransafer(creator, token, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"unfreeze_transfer\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex()\n        ], extraArgs);\n    }\n    async setTokenDescription(creator, token, description, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"set_description\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex(),\n            description\n        ], extraArgs);\n    }\n    async setTokenName(creator, token, name, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"set_name\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex(),\n            name\n        ], extraArgs);\n    }\n    async setTokenURI(creator, token, uri, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"set_uri\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex(),\n            uri\n        ], extraArgs);\n    }\n    async addTokenProperty(creator, token, propertyKey, propertyType, propertyValue, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"add_property\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex(),\n            propertyKey,\n            PropertyTypeMap[propertyType],\n            getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType])\n        ], extraArgs);\n    }\n    async removeTokenProperty(creator, token, propertyKey, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"remove_property\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex(),\n            propertyKey\n        ], extraArgs);\n    }\n    async updateTokenProperty(creator, token, propertyKey, propertyType, propertyValue, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"update_property\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex(),\n            propertyKey,\n            PropertyTypeMap[propertyType],\n            getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType])\n        ], extraArgs);\n    }\n    async addTypedProperty(creator, token, propertyKey, propertyType, propertyValue, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"add_typed_property\", [\n            tokenType || this.tokenType,\n            PropertyTypeMap[propertyType]\n        ], [\n            HexString.ensure(token).hex(),\n            propertyKey,\n            propertyValue\n        ], extraArgs);\n    }\n    async updateTypedProperty(creator, token, propertyKey, propertyType, propertyValue, tokenType, extraArgs) {\n        return this.submitTransaction(creator, \"update_typed_property\", [\n            tokenType || this.tokenType,\n            PropertyTypeMap[propertyType]\n        ], [\n            HexString.ensure(token).hex(),\n            propertyKey,\n            propertyValue\n        ], extraArgs);\n    }\n    async transferTokenOwnership(owner, token, recipient, tokenType, extraArgs) {\n        const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n            sender: owner.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(\"0x1::object::transfer\", [\n            tokenType || this.tokenType\n        ], [\n            HexString.ensure(token).hex(),\n            HexString.ensure(recipient).hex()\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n        const pendingTransaction = await this.provider.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n};\n// src/plugins/coin_client.ts\nvar CoinClient = class {\n    constructor(aptosClient){\n        this.aptosClient = aptosClient;\n    }\n    async transfer(from, to, amount, extraArgs) {\n        var _a;\n        const coinTypeToTransfer = (_a = extraArgs == null ? void 0 : extraArgs.coinType) != null ? _a : APTOS_COIN;\n        const func = (extraArgs == null ? void 0 : extraArgs.createReceiverIfMissing) ? \"0x1::aptos_account::transfer_coins\" : \"0x1::coin::transfer\";\n        const toAddress = getAddressFromAccountOrAddress(to);\n        const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n            sender: from.address(),\n            ...extraArgs\n        });\n        const rawTxn = await builder.build(func, [\n            coinTypeToTransfer\n        ], [\n            toAddress,\n            amount\n        ]);\n        const bcsTxn = AptosClient.generateBCSTransaction(from, rawTxn);\n        const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n        return pendingTransaction.hash;\n    }\n    async checkBalance(account, extraArgs) {\n        var _a;\n        const coinType = (_a = extraArgs == null ? void 0 : extraArgs.coinType) != null ? _a : APTOS_COIN;\n        const typeTag = `0x1::coin::CoinStore<${coinType}>`;\n        const address = getAddressFromAccountOrAddress(account);\n        const accountResource = await this.aptosClient.getAccountResource(address, typeTag);\n        return BigInt(accountResource.data.coin.value);\n    }\n};\n// src/plugins/faucet_client.ts\nvar FaucetClient = class extends AptosClient {\n    constructor(nodeUrl, faucetUrl, config){\n        var _a, _b, _c;\n        super(nodeUrl, config);\n        if (!faucetUrl) {\n            throw new Error(\"Faucet URL cannot be empty.\");\n        }\n        this.faucetRequester = new AxiosHttpRequest({\n            BASE: faucetUrl,\n            VERSION: (_a = config == null ? void 0 : config.VERSION) != null ? _a : \"0.1.0\",\n            WITH_CREDENTIALS: (_b = config == null ? void 0 : config.WITH_CREDENTIALS) != null ? _b : false,\n            CREDENTIALS: (_c = config == null ? void 0 : config.CREDENTIALS) != null ? _c : \"include\",\n            TOKEN: config == null ? void 0 : config.TOKEN,\n            USERNAME: config == null ? void 0 : config.USERNAME,\n            PASSWORD: config == null ? void 0 : config.PASSWORD,\n            HEADERS: config == null ? void 0 : config.HEADERS,\n            ENCODE_PATH: config == null ? void 0 : config.ENCODE_PATH\n        });\n    }\n    async fundAccount(address, amount, timeoutSecs = DEFAULT_TXN_TIMEOUT_SEC) {\n        const tnxHashes = await this.faucetRequester.request({\n            method: \"POST\",\n            url: \"/mint\",\n            query: {\n                address: HexString.ensure(address).noPrefix(),\n                amount\n            }\n        });\n        const promises = [];\n        for(let i = 0; i < tnxHashes.length; i += 1){\n            const tnxHash = tnxHashes[i];\n            promises.push(this.waitForTransaction(tnxHash, {\n                timeoutSecs\n            }));\n        }\n        await Promise.all(promises);\n        return tnxHashes;\n    }\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/aptos@1.8.5_debug@4.4.0/node_modules/aptos/dist/index.mjs\n");

/***/ })

};
;