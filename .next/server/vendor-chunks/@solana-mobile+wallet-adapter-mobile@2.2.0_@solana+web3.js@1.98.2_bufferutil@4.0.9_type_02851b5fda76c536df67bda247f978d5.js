"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana-mobile+wallet-adapter-mobile@2.2.0_@solana+web3.js@1.98.2_bufferutil@4.0.9_type_02851b5fda76c536df67bda247f978d5";
exports.ids = ["vendor-chunks/@solana-mobile+wallet-adapter-mobile@2.2.0_@solana+web3.js@1.98.2_bufferutil@4.0.9_type_02851b5fda76c536df67bda247f978d5"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@solana-mobile+wallet-adapter-mobile@2.2.0_@solana+web3.js@1.98.2_bufferutil@4.0.9_type_02851b5fda76c536df67bda247f978d5/node_modules/@solana-mobile/wallet-adapter-mobile/lib/esm/index.js":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solana-mobile+wallet-adapter-mobile@2.2.0_@solana+web3.js@1.98.2_bufferutil@4.0.9_type_02851b5fda76c536df67bda247f978d5/node_modules/@solana-mobile/wallet-adapter-mobile/lib/esm/index.js ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalSolanaMobileWalletAdapter: () => (/* binding */ LocalSolanaMobileWalletAdapter),\n/* harmony export */   RemoteSolanaMobileWalletAdapter: () => (/* binding */ RemoteSolanaMobileWalletAdapter),\n/* harmony export */   SolanaMobileWalletAdapter: () => (/* binding */ SolanaMobileWalletAdapter),\n/* harmony export */   SolanaMobileWalletAdapterWalletName: () => (/* binding */ SolanaMobileWalletAdapterWalletName),\n/* harmony export */   createDefaultAddressSelector: () => (/* binding */ createDefaultAddressSelector),\n/* harmony export */   createDefaultAuthorizationResultCache: () => (/* binding */ createDefaultAuthorizationResultCache),\n/* harmony export */   createDefaultWalletNotFoundHandler: () => (/* binding */ createDefaultWalletNotFoundHandler)\n/* harmony export */ });\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-adapter-base@0.9.26_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solana/wallet-adapter-base/lib/esm/signer.js\");\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-adapter-base@0.9.26_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solana/wallet-adapter-base/lib/esm/adapter.js\");\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-adapter-base@0.9.26_@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_/node_modules/@solana/wallet-adapter-base/lib/esm/errors.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/.pnpm/@solana+web3.js@1.98.2_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10/node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/wallet-standard-features */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-standard-features@1.3.0/node_modules/@solana/wallet-standard-features/lib/esm/signIn.js\");\n/* harmony import */ var _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/wallet-standard-features */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-standard-features@1.3.0/node_modules/@solana/wallet-standard-features/lib/esm/signMessage.js\");\n/* harmony import */ var _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @solana/wallet-standard-features */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-standard-features@1.3.0/node_modules/@solana/wallet-standard-features/lib/esm/signAndSendTransaction.js\");\n/* harmony import */ var _solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @solana/wallet-standard-features */ \"(ssr)/./node_modules/.pnpm/@solana+wallet-standard-features@1.3.0/node_modules/@solana/wallet-standard-features/lib/esm/signTransaction.js\");\n/* harmony import */ var _solana_mobile_wallet_standard_mobile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana-mobile/wallet-standard-mobile */ \"(ssr)/./node_modules/.pnpm/@solana-mobile+wallet-standard-mobile@0.2.0_@solana+wallet-adapter-base@0.9.26_@solana+_46283e622424f0b16001c45fba76773c/node_modules/@solana-mobile/wallet-standard-mobile/lib/esm/index.js\");\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\n false || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n false || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n/** Name of the feature. */ const StandardConnect = \"standard:connect\";\n/** Name of the feature. */ const StandardDisconnect = \"standard:disconnect\";\n/** Name of the feature. */ const StandardEvents = \"standard:events\";\n false || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n false || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n false || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n false || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nfunction fromUint8Array(byteArray) {\n    return window.btoa(String.fromCharCode.call(null, ...byteArray));\n}\nfunction getIsSupported() {\n    return  false && 0;\n}\nvar _BaseSolanaMobileWalletAdapter_instances, _BaseSolanaMobileWalletAdapter_wallet, _BaseSolanaMobileWalletAdapter_connecting, _BaseSolanaMobileWalletAdapter_readyState, _BaseSolanaMobileWalletAdapter_accountSelector, _BaseSolanaMobileWalletAdapter_selectedAccount, _BaseSolanaMobileWalletAdapter_publicKey, _BaseSolanaMobileWalletAdapter_handleChangeEvent, _BaseSolanaMobileWalletAdapter_connect, _BaseSolanaMobileWalletAdapter_declareWalletAsInstalled, _BaseSolanaMobileWalletAdapter_assertIsAuthorized, _BaseSolanaMobileWalletAdapter_performSignTransactions, _BaseSolanaMobileWalletAdapter_runWithGuard;\nconst SolanaMobileWalletAdapterWalletName = \"Mobile Wallet Adapter\";\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\nfunction isVersionedTransaction(transaction) {\n    return \"version\" in transaction;\n}\nfunction chainOrClusterToChainId(chain) {\n    switch(chain){\n        case \"mainnet-beta\":\n            return \"solana:mainnet\";\n        case \"testnet\":\n            return \"solana:testnet\";\n        case \"devnet\":\n            return \"solana:devnet\";\n        default:\n            return chain;\n    }\n}\nclass BaseSolanaMobileWalletAdapter extends _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_2__.BaseSignInMessageSignerWalletAdapter {\n    constructor(wallet, config){\n        super();\n        _BaseSolanaMobileWalletAdapter_instances.add(this);\n        this.supportedTransactionVersions = new Set(// FIXME(#244): We can't actually know what versions are supported until we know which wallet we're talking to.\n        [\n            \"legacy\",\n            0\n        ]);\n        _BaseSolanaMobileWalletAdapter_wallet.set(this, void 0);\n        _BaseSolanaMobileWalletAdapter_connecting.set(this, false);\n        _BaseSolanaMobileWalletAdapter_readyState.set(this, getIsSupported() ? _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Loadable : _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Unsupported);\n        _BaseSolanaMobileWalletAdapter_accountSelector.set(this, void 0);\n        _BaseSolanaMobileWalletAdapter_selectedAccount.set(this, void 0);\n        _BaseSolanaMobileWalletAdapter_publicKey.set(this, void 0);\n        _BaseSolanaMobileWalletAdapter_handleChangeEvent.set(this, (properties)=>__awaiter(this, void 0, void 0, function*() {\n                if (properties.accounts && properties.accounts.length > 0) {\n                    __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_declareWalletAsInstalled).call(this);\n                    const nextSelectedAccount = yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_accountSelector, \"f\").call(this, properties.accounts);\n                    if (nextSelectedAccount !== __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_selectedAccount, \"f\")) {\n                        __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_selectedAccount, nextSelectedAccount, \"f\");\n                        __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_publicKey, undefined, \"f\");\n                        this.emit(\"connect\", // Having just set `this.#selectedAccount`, `this.publicKey` is definitely non-null\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        this.publicKey);\n                    }\n                }\n            }));\n        // this.#chain = chainOrClusterToChainId(config.chain);\n        __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_accountSelector, (accounts)=>__awaiter(this, void 0, void 0, function*() {\n                var _a;\n                const selectedBase64EncodedAddress = yield config.addressSelector.select(accounts.map(({ publicKey })=>fromUint8Array(publicKey)));\n                return (_a = accounts.find(({ publicKey })=>fromUint8Array(publicKey) === selectedBase64EncodedAddress)) !== null && _a !== void 0 ? _a : accounts[0];\n            }), \"f\");\n        __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_wallet, wallet, \"f\");\n        __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[StandardEvents].on(\"change\", __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_handleChangeEvent, \"f\"));\n        this.name = __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").name;\n        this.icon = __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").icon;\n        this.url = __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").url;\n    // TODO: evaluate if this logic should be kept - it seems to create a nasty bug where \n    //  the wallet tries to auto connect on page load and gets blocked by the popup blocker\n    // if (this.#readyState !== WalletReadyState.Unsupported) {\n    //     config.authorizationResultCache.get().then((authorizationResult) => {\n    //         if (authorizationResult) {\n    //             // Having a prior authorization result is, right now, the best\n    //             // indication that a mobile wallet is installed. There is no API\n    //             // we can use to test for whether the association URI is supported.\n    //             this.#declareWalletAsInstalled();\n    //         }\n    //     });\n    // }\n    }\n    get publicKey() {\n        var _a;\n        if (!__classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_publicKey, \"f\") && __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_selectedAccount, \"f\")) {\n            try {\n                __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_publicKey, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(__classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_selectedAccount, \"f\").publicKey), \"f\");\n            } catch (e) {\n                throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletPublicKeyError(e instanceof Error && (e === null || e === void 0 ? void 0 : e.message) || \"Unknown error\", e);\n            }\n        }\n        return (_a = __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_publicKey, \"f\")) !== null && _a !== void 0 ? _a : null;\n    }\n    get connected() {\n        return __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").connected;\n    }\n    get connecting() {\n        return __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_connecting, \"f\");\n    }\n    get readyState() {\n        return __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_readyState, \"f\");\n    }\n    /** @deprecated Use `autoConnect()` instead. */ autoConnect_DO_NOT_USE_OR_YOU_WILL_BE_FIRED() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.autoConnect();\n        });\n    }\n    autoConnect() {\n        return __awaiter(this, void 0, void 0, function*() {\n            __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_connect).call(this, true);\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function*() {\n            __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_connect).call(this);\n        });\n    }\n    /** @deprecated Use `connect()` or `autoConnect()` instead. */ performAuthorization(signInPayload) {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                const cachedAuthorizationResult = yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").cachedAuthorizationResult;\n                if (cachedAuthorizationResult) {\n                    yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[StandardConnect].connect({\n                        silent: true\n                    });\n                    return cachedAuthorizationResult;\n                }\n                if (signInPayload) {\n                    yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[_solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_5__.SolanaSignIn].signIn(signInPayload);\n                } else yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[StandardConnect].connect();\n                const authorizationResult = yield yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").cachedAuthorizationResult;\n                return authorizationResult;\n            } catch (e) {\n                throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError(e instanceof Error && e.message || \"Unknown error\", e);\n            }\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function*() {\n            // return await this.#runWithGuard(this.#wallet.features[StandardDisconnect].disconnect);\n            return yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_runWithGuard).call(this, ()=>__awaiter(this, void 0, void 0, function*() {\n                    __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_connecting, false, \"f\");\n                    __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_publicKey, undefined, \"f\");\n                    __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_selectedAccount, undefined, \"f\");\n                    yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[StandardDisconnect].disconnect();\n                    this.emit(\"disconnect\");\n                }));\n        });\n    }\n    signIn(input) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_runWithGuard).call(this, ()=>__awaiter(this, void 0, void 0, function*() {\n                    var _a;\n                    if (__classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_readyState, \"f\") !== _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Installed && __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_readyState, \"f\") !== _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Loadable) {\n                        throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletNotReadyError();\n                    }\n                    __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_connecting, true, \"f\");\n                    try {\n                        const outputs = yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[_solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_5__.SolanaSignIn].signIn(Object.assign(Object.assign({}, input), {\n                            domain: (_a = input === null || input === void 0 ? void 0 : input.domain) !== null && _a !== void 0 ? _a : window.location.host\n                        }));\n                        if (outputs.length > 0) {\n                            return outputs[0];\n                        } else {\n                            throw new Error(\"Sign in failed, no sign in result returned by wallet\");\n                        }\n                    } catch (e) {\n                        throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError(e instanceof Error && e.message || \"Unknown error\", e);\n                    } finally{\n                        __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_connecting, false, \"f\");\n                    }\n                }));\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_runWithGuard).call(this, ()=>__awaiter(this, void 0, void 0, function*() {\n                    const account = __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_assertIsAuthorized).call(this);\n                    try {\n                        const outputs = yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[_solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_6__.SolanaSignMessage].signMessage({\n                            account,\n                            message: message\n                        });\n                        return outputs[0].signature;\n                    } catch (error) {\n                        throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignMessageError(error === null || error === void 0 ? void 0 : error.message, error);\n                    }\n                }));\n        });\n    }\n    sendTransaction(transaction, connection, options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_runWithGuard).call(this, ()=>__awaiter(this, void 0, void 0, function*() {\n                    const account = __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_assertIsAuthorized).call(this);\n                    try {\n                        function getTargetCommitment() {\n                            let targetCommitment;\n                            switch(connection.commitment){\n                                case \"confirmed\":\n                                case \"finalized\":\n                                case \"processed\":\n                                    targetCommitment = connection.commitment;\n                                    break;\n                                default:\n                                    targetCommitment = \"finalized\";\n                            }\n                            let targetPreflightCommitment;\n                            switch(options === null || options === void 0 ? void 0 : options.preflightCommitment){\n                                case \"confirmed\":\n                                case \"finalized\":\n                                case \"processed\":\n                                    targetPreflightCommitment = options.preflightCommitment;\n                                    break;\n                                case undefined:\n                                    targetPreflightCommitment = targetCommitment;\n                                    break;\n                                default:\n                                    targetPreflightCommitment = \"finalized\";\n                            }\n                            const preflightCommitmentScore = targetPreflightCommitment === \"finalized\" ? 2 : targetPreflightCommitment === \"confirmed\" ? 1 : 0;\n                            const targetCommitmentScore = targetCommitment === \"finalized\" ? 2 : targetCommitment === \"confirmed\" ? 1 : 0;\n                            return preflightCommitmentScore < targetCommitmentScore ? targetPreflightCommitment : targetCommitment;\n                        }\n                        if (_solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_7__.SolanaSignAndSendTransaction in __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features) {\n                            const chain = chainOrClusterToChainId(__classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").currentAuthorization.chain);\n                            const [signature] = (yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[_solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_7__.SolanaSignAndSendTransaction].signAndSendTransaction({\n                                account,\n                                transaction: transaction.serialize(),\n                                chain: chain,\n                                options: options ? {\n                                    skipPreflight: options.skipPreflight,\n                                    maxRetries: options.maxRetries\n                                } : undefined\n                            })).map((output)=>{\n                                return fromUint8Array(output.signature);\n                            });\n                            return signature;\n                        } else {\n                            const [signedTransaction] = yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_performSignTransactions).call(this, [\n                                transaction\n                            ]);\n                            if (isVersionedTransaction(signedTransaction)) {\n                                return yield connection.sendTransaction(signedTransaction);\n                            } else {\n                                const serializedTransaction = signedTransaction.serialize();\n                                return yield connection.sendRawTransaction(serializedTransaction, Object.assign(Object.assign({}, options), {\n                                    preflightCommitment: getTargetCommitment()\n                                }));\n                            }\n                        }\n                    } catch (error) {\n                        throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n                    }\n                }));\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_runWithGuard).call(this, ()=>__awaiter(this, void 0, void 0, function*() {\n                    const [signedTransaction] = yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_performSignTransactions).call(this, [\n                        transaction\n                    ]);\n                    return signedTransaction;\n                }));\n        });\n    }\n    signAllTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_runWithGuard).call(this, ()=>__awaiter(this, void 0, void 0, function*() {\n                    const signedTransactions = yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_performSignTransactions).call(this, transactions);\n                    return signedTransactions;\n                }));\n        });\n    }\n}\n_BaseSolanaMobileWalletAdapter_wallet = new WeakMap(), _BaseSolanaMobileWalletAdapter_connecting = new WeakMap(), _BaseSolanaMobileWalletAdapter_readyState = new WeakMap(), _BaseSolanaMobileWalletAdapter_accountSelector = new WeakMap(), _BaseSolanaMobileWalletAdapter_selectedAccount = new WeakMap(), _BaseSolanaMobileWalletAdapter_publicKey = new WeakMap(), _BaseSolanaMobileWalletAdapter_handleChangeEvent = new WeakMap(), _BaseSolanaMobileWalletAdapter_instances = new WeakSet(), _BaseSolanaMobileWalletAdapter_connect = function _BaseSolanaMobileWalletAdapter_connect(autoConnect = false) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (this.connecting || this.connected) {\n            return;\n        }\n        return yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_runWithGuard).call(this, ()=>__awaiter(this, void 0, void 0, function*() {\n                if (__classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_readyState, \"f\") !== _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Installed && __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_readyState, \"f\") !== _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Loadable) {\n                    throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletNotReadyError();\n                }\n                __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_connecting, true, \"f\");\n                try {\n                    yield __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[StandardConnect].connect({\n                        silent: autoConnect\n                    });\n                } catch (e) {\n                    throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError(e instanceof Error && e.message || \"Unknown error\", e);\n                } finally{\n                    __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_connecting, false, \"f\");\n                }\n            }));\n    });\n}, _BaseSolanaMobileWalletAdapter_declareWalletAsInstalled = function _BaseSolanaMobileWalletAdapter_declareWalletAsInstalled() {\n    if (__classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_readyState, \"f\") !== _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Installed) {\n        this.emit(\"readyStateChange\", __classPrivateFieldSet(this, _BaseSolanaMobileWalletAdapter_readyState, _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Installed, \"f\"));\n    }\n}, _BaseSolanaMobileWalletAdapter_assertIsAuthorized = function _BaseSolanaMobileWalletAdapter_assertIsAuthorized() {\n    if (!__classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").isAuthorized || !__classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_selectedAccount, \"f\")) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletNotConnectedError();\n    return __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_selectedAccount, \"f\");\n}, _BaseSolanaMobileWalletAdapter_performSignTransactions = function _BaseSolanaMobileWalletAdapter_performSignTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const account = __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_instances, \"m\", _BaseSolanaMobileWalletAdapter_assertIsAuthorized).call(this);\n        try {\n            if (_solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_8__.SolanaSignTransaction in __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features) {\n                return __classPrivateFieldGet(this, _BaseSolanaMobileWalletAdapter_wallet, \"f\").features[_solana_wallet_standard_features__WEBPACK_IMPORTED_MODULE_8__.SolanaSignTransaction].signTransaction(...transactions.map((value)=>{\n                    return {\n                        account,\n                        transaction: value.serialize()\n                    };\n                })).then((outputs)=>{\n                    return outputs.map((output)=>{\n                        const byteArray = output.signedTransaction;\n                        const numSignatures = byteArray[0];\n                        const messageOffset = numSignatures * SIGNATURE_LENGTH_IN_BYTES + 1;\n                        const version = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedMessage.deserializeMessageVersion(byteArray.slice(messageOffset, byteArray.length));\n                        if (version === \"legacy\") {\n                            return _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.from(byteArray);\n                        } else {\n                            return _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.VersionedTransaction.deserialize(byteArray);\n                        }\n                    });\n                });\n            } else {\n                throw new Error(\"Connected wallet does not support signing transactions\");\n            }\n        } catch (error) {\n            throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n    });\n}, _BaseSolanaMobileWalletAdapter_runWithGuard = function _BaseSolanaMobileWalletAdapter_runWithGuard(callback) {\n    return __awaiter(this, void 0, void 0, function*() {\n        try {\n            return yield callback();\n        } catch (e) {\n            this.emit(\"error\", e);\n            throw e;\n        }\n    });\n};\nclass LocalSolanaMobileWalletAdapter extends BaseSolanaMobileWalletAdapter {\n    constructor(config){\n        var _a;\n        const chain = chainOrClusterToChainId((_a = config.chain) !== null && _a !== void 0 ? _a : config.cluster);\n        super(new _solana_mobile_wallet_standard_mobile__WEBPACK_IMPORTED_MODULE_1__.LocalSolanaMobileWalletAdapterWallet({\n            appIdentity: config.appIdentity,\n            authorizationCache: {\n                set: config.authorizationResultCache.set,\n                get: ()=>__awaiter(this, void 0, void 0, function*() {\n                        const authorizationResult = yield config.authorizationResultCache.get();\n                        if (authorizationResult && \"chain\" in authorizationResult) {\n                            return authorizationResult;\n                        } else if (authorizationResult) {\n                            return Object.assign(Object.assign({}, authorizationResult), {\n                                chain: chain\n                            });\n                        } else return undefined;\n                    }),\n                clear: config.authorizationResultCache.clear\n            },\n            chains: [\n                chain\n            ],\n            chainSelector: (0,_solana_mobile_wallet_standard_mobile__WEBPACK_IMPORTED_MODULE_1__.createDefaultChainSelector)(),\n            onWalletNotFound: ()=>__awaiter(this, void 0, void 0, function*() {\n                    config.onWalletNotFound(this);\n                })\n        }), {\n            addressSelector: config.addressSelector,\n            chain: chain\n        });\n    }\n}\nclass RemoteSolanaMobileWalletAdapter extends BaseSolanaMobileWalletAdapter {\n    constructor(config){\n        const chain = chainOrClusterToChainId(config.chain);\n        super(new _solana_mobile_wallet_standard_mobile__WEBPACK_IMPORTED_MODULE_1__.RemoteSolanaMobileWalletAdapterWallet({\n            appIdentity: config.appIdentity,\n            authorizationCache: {\n                set: config.authorizationResultCache.set,\n                get: ()=>__awaiter(this, void 0, void 0, function*() {\n                        const authorizationResult = yield config.authorizationResultCache.get();\n                        if (authorizationResult && \"chain\" in authorizationResult) {\n                            return authorizationResult;\n                        } else if (authorizationResult) {\n                            return Object.assign(Object.assign({}, authorizationResult), {\n                                chain: chain\n                            });\n                        } else return undefined;\n                    }),\n                clear: config.authorizationResultCache.clear\n            },\n            chains: [\n                chain\n            ],\n            chainSelector: (0,_solana_mobile_wallet_standard_mobile__WEBPACK_IMPORTED_MODULE_1__.createDefaultChainSelector)(),\n            remoteHostAuthority: config.remoteHostAuthority,\n            onWalletNotFound: ()=>__awaiter(this, void 0, void 0, function*() {\n                    config.onWalletNotFound(this);\n                })\n        }), {\n            addressSelector: config.addressSelector,\n            chain: chain\n        });\n    }\n}\nclass SolanaMobileWalletAdapter extends LocalSolanaMobileWalletAdapter {\n}\nfunction createDefaultAddressSelector() {\n    return {\n        select (addresses) {\n            return __awaiter(this, void 0, void 0, function*() {\n                return addresses[0];\n            });\n        }\n    };\n}\nfunction createDefaultAuthorizationResultCache() {\n    return (0,_solana_mobile_wallet_standard_mobile__WEBPACK_IMPORTED_MODULE_1__.createDefaultAuthorizationCache)();\n}\nfunction defaultWalletNotFoundHandler(mobileWalletAdapter) {\n    return __awaiter(this, void 0, void 0, function*() {\n        return (0,_solana_mobile_wallet_standard_mobile__WEBPACK_IMPORTED_MODULE_1__.defaultErrorModalWalletNotFoundHandler)();\n    });\n}\nfunction createDefaultWalletNotFoundHandler() {\n    return defaultWalletNotFoundHandler;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solana-mobile+wallet-adapter-mobile@2.2.0_@solana+web3.js@1.98.2_bufferutil@4.0.9_type_02851b5fda76c536df67bda247f978d5/node_modules/@solana-mobile/wallet-adapter-mobile/lib/esm/index.js\n");

/***/ })

};
;