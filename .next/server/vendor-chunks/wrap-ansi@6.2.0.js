"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wrap-ansi@6.2.0";
exports.ids = ["vendor-chunks/wrap-ansi@6.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stringWidth = __webpack_require__(/*! string-width */ \"(ssr)/./node_modules/.pnpm/string-width@4.2.3/node_modules/string-width/index.js\");\nconst stripAnsi = __webpack_require__(/*! strip-ansi */ \"(ssr)/./node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js\");\nconst ansiStyles = __webpack_require__(/*! ansi-styles */ \"(ssr)/./node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js\");\nconst ESCAPES = new Set([\n    \"\\x1b\",\n    \"\\x9b\"\n]);\nconst END_CODE = 39;\nconst wrapAnsi = (code)=>`${ESCAPES.values().next().value}[${code}m`;\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = (string)=>string.split(\" \").map((character)=>stringWidth(character));\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns)=>{\n    const characters = [\n        ...word\n    ];\n    let isInsideEscape = false;\n    let visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n    for (const [index, character] of characters.entries()){\n        const characterLength = stringWidth(character);\n        if (visible + characterLength <= columns) {\n            rows[rows.length - 1] += character;\n        } else {\n            rows.push(character);\n            visible = 0;\n        }\n        if (ESCAPES.has(character)) {\n            isInsideEscape = true;\n        } else if (isInsideEscape && character === \"m\") {\n            isInsideEscape = false;\n            continue;\n        }\n        if (isInsideEscape) {\n            continue;\n        }\n        visible += characterLength;\n        if (visible === columns && index < characters.length - 1) {\n            rows.push(\"\");\n            visible = 0;\n        }\n    }\n    // It's possible that the last row we copy over is only\n    // ansi escape characters, handle this edge-case\n    if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n        rows[rows.length - 2] += rows.pop();\n    }\n};\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = (str)=>{\n    const words = str.split(\" \");\n    let last = words.length;\n    while(last > 0){\n        if (stringWidth(words[last - 1]) > 0) {\n            break;\n        }\n        last--;\n    }\n    if (last === words.length) {\n        return str;\n    }\n    return words.slice(0, last).join(\" \") + words.slice(last).join(\"\");\n};\n// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {})=>{\n    if (options.trim !== false && string.trim() === \"\") {\n        return \"\";\n    }\n    let pre = \"\";\n    let ret = \"\";\n    let escapeCode;\n    const lengths = wordLengths(string);\n    let rows = [\n        \"\"\n    ];\n    for (const [index, word] of string.split(\" \").entries()){\n        if (options.trim !== false) {\n            rows[rows.length - 1] = rows[rows.length - 1].trimLeft();\n        }\n        let rowLength = stringWidth(rows[rows.length - 1]);\n        if (index !== 0) {\n            if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n                // If we start with a new word but the current row length equals the length of the columns, add a new row\n                rows.push(\"\");\n                rowLength = 0;\n            }\n            if (rowLength > 0 || options.trim === false) {\n                rows[rows.length - 1] += \" \";\n                rowLength++;\n            }\n        }\n        // In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'\n        if (options.hard && lengths[index] > columns) {\n            const remainingColumns = columns - rowLength;\n            const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n            const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n            if (breaksStartingNextLine < breaksStartingThisLine) {\n                rows.push(\"\");\n            }\n            wrapWord(rows, word, columns);\n            continue;\n        }\n        if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n            if (options.wordWrap === false && rowLength < columns) {\n                wrapWord(rows, word, columns);\n                continue;\n            }\n            rows.push(\"\");\n        }\n        if (rowLength + lengths[index] > columns && options.wordWrap === false) {\n            wrapWord(rows, word, columns);\n            continue;\n        }\n        rows[rows.length - 1] += word;\n    }\n    if (options.trim !== false) {\n        rows = rows.map(stringVisibleTrimSpacesRight);\n    }\n    pre = rows.join(\"\\n\");\n    for (const [index, character] of [\n        ...pre\n    ].entries()){\n        ret += character;\n        if (ESCAPES.has(character)) {\n            const code = parseFloat(/\\d[^m]*/.exec(pre.slice(index, index + 4)));\n            escapeCode = code === END_CODE ? null : code;\n        }\n        const code = ansiStyles.codes.get(Number(escapeCode));\n        if (escapeCode && code) {\n            if (pre[index + 1] === \"\\n\") {\n                ret += wrapAnsi(code);\n            } else if (character === \"\\n\") {\n                ret += wrapAnsi(escapeCode);\n            }\n        }\n    }\n    return ret;\n};\n// For each newline, invoke the method separately\nmodule.exports = (string, columns, options)=>{\n    return String(string).normalize().replace(/\\r\\n/g, \"\\n\").split(\"\\n\").map((line)=>exec(line, columns, options)).join(\"\\n\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js\n");

/***/ })

};
;