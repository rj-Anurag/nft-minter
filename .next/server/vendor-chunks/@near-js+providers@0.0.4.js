"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@near-js+providers@0.0.4";
exports.ids = ["vendor-chunks/@near-js+providers@0.0.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/exponential-backoff.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/exponential-backoff.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.exponentialBackoff = void 0;\nfunction exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {\n    return __awaiter(this, void 0, void 0, function*() {\n        // TODO: jitter?\n        let waitTime = startWaitTime;\n        for(let i = 0; i < retryNumber; i++){\n            const result = yield getResult();\n            if (result) {\n                return result;\n            }\n            yield sleep(waitTime);\n            waitTime *= waitBackoff;\n        }\n        return null;\n    });\n}\nexports.exponentialBackoff = exponentialBackoff;\n// Sleep given number of millis.\nfunction sleep(millis) {\n    return new Promise((resolve)=>setTimeout(resolve, millis));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMC40L25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2V4cG9uZW50aWFsLWJhY2tvZmYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBTyw4Q0FBNkM7SUFBRWIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RGUsMEJBQTBCLEdBQUcsS0FBSztBQUNsQyxTQUFTQyxtQkFBbUJDLGFBQWEsRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUVDLFNBQVM7SUFDMUUsT0FBTzFCLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7UUFDbkMsZ0JBQWdCO1FBQ2hCLElBQUkyQixXQUFXSjtRQUNmLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJSixhQUFhSSxJQUFLO1lBQ2xDLE1BQU1iLFNBQVMsTUFBTVc7WUFDckIsSUFBSVgsUUFBUTtnQkFDUixPQUFPQTtZQUNYO1lBQ0EsTUFBTWMsTUFBTUY7WUFDWkEsWUFBWUY7UUFDaEI7UUFDQSxPQUFPO0lBQ1g7QUFDSjtBQUNBSiwwQkFBMEIsR0FBR0M7QUFDN0IsZ0NBQWdDO0FBQ2hDLFNBQVNPLE1BQU1DLE1BQU07SUFDakIsT0FBTyxJQUFJdEIsUUFBUUQsQ0FBQUEsVUFBV3dCLFdBQVd4QixTQUFTdUI7QUFDdEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK3Byb3ZpZGVyc0AwLjAuNC9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9leHBvbmVudGlhbC1iYWNrb2ZmLmpzP2RhMmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhwb25lbnRpYWxCYWNrb2ZmID0gdm9pZCAwO1xuZnVuY3Rpb24gZXhwb25lbnRpYWxCYWNrb2ZmKHN0YXJ0V2FpdFRpbWUsIHJldHJ5TnVtYmVyLCB3YWl0QmFja29mZiwgZ2V0UmVzdWx0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgLy8gVE9ETzogaml0dGVyP1xuICAgICAgICBsZXQgd2FpdFRpbWUgPSBzdGFydFdhaXRUaW1lO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJldHJ5TnVtYmVyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIGdldFJlc3VsdCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5aWVsZCBzbGVlcCh3YWl0VGltZSk7XG4gICAgICAgICAgICB3YWl0VGltZSAqPSB3YWl0QmFja29mZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZXhwb25lbnRpYWxCYWNrb2ZmID0gZXhwb25lbnRpYWxCYWNrb2ZmO1xuLy8gU2xlZXAgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpcy5cbmZ1bmN0aW9uIHNsZWVwKG1pbGxpcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbWlsbGlzKSk7XG59XG4iXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiZXhwb25lbnRpYWxCYWNrb2ZmIiwic3RhcnRXYWl0VGltZSIsInJldHJ5TnVtYmVyIiwid2FpdEJhY2tvZmYiLCJnZXRSZXN1bHQiLCJ3YWl0VGltZSIsImkiLCJzbGVlcCIsIm1pbGxpcyIsInNldFRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/exponential-backoff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/lib/index.mjs\"));\nconst http_1 = __importDefault(__webpack_require__(/*! http */ \"http\"));\nconst https_1 = __importDefault(__webpack_require__(/*! https */ \"https\"));\nconst httpAgent = new http_1.default.Agent({\n    keepAlive: true\n});\nconst httpsAgent = new https_1.default.Agent({\n    keepAlive: true\n});\nfunction agent(_parsedURL) {\n    if (_parsedURL.protocol === \"http:\") {\n        return httpAgent;\n    } else {\n        return httpsAgent;\n    }\n}\nfunction default_1(resource, init) {\n    return (0, node_fetch_1.default)(resource, Object.assign({\n        agent: agent(new URL(resource.toString()))\n    }, init));\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMC40L25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2ZldGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGVBQWVQLGdCQUFnQlEsbUJBQU9BLENBQUMscUdBQVk7QUFDekQsTUFBTUMsU0FBU1QsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QyxNQUFNRSxVQUFVVixnQkFBZ0JRLG1CQUFPQSxDQUFDLG9CQUFPO0FBQy9DLE1BQU1HLFlBQVksSUFBSUYsT0FBT0csT0FBTyxDQUFDQyxLQUFLLENBQUM7SUFBRUMsV0FBVztBQUFLO0FBQzdELE1BQU1DLGFBQWEsSUFBSUwsUUFBUUUsT0FBTyxDQUFDQyxLQUFLLENBQUM7SUFBRUMsV0FBVztBQUFLO0FBQy9ELFNBQVNFLE1BQU1DLFVBQVU7SUFDckIsSUFBSUEsV0FBV0MsUUFBUSxLQUFLLFNBQVM7UUFDakMsT0FBT1A7SUFDWCxPQUNLO1FBQ0QsT0FBT0k7SUFDWDtBQUNKO0FBQ0EsU0FBU0ksVUFBVUMsUUFBUSxFQUFFQyxJQUFJO0lBQzdCLE9BQU8sQ0FBQyxHQUFHZCxhQUFhSyxPQUFPLEVBQUVRLFVBQVVqQixPQUFPbUIsTUFBTSxDQUFDO1FBQUVOLE9BQU9BLE1BQU0sSUFBSU8sSUFBSUgsU0FBU0ksUUFBUTtJQUFLLEdBQUdIO0FBQzdHO0FBQ0FoQixrQkFBZSxHQUFHYyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMC40L25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2ZldGNoLmpzP2QxMWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGUtZmV0Y2hcIikpO1xuY29uc3QgaHR0cF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJodHRwXCIpKTtcbmNvbnN0IGh0dHBzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImh0dHBzXCIpKTtcbmNvbnN0IGh0dHBBZ2VudCA9IG5ldyBodHRwXzEuZGVmYXVsdC5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KTtcbmNvbnN0IGh0dHBzQWdlbnQgPSBuZXcgaHR0cHNfMS5kZWZhdWx0LkFnZW50KHsga2VlcEFsaXZlOiB0cnVlIH0pO1xuZnVuY3Rpb24gYWdlbnQoX3BhcnNlZFVSTCkge1xuICAgIGlmIChfcGFyc2VkVVJMLnByb3RvY29sID09PSAnaHR0cDonKSB7XG4gICAgICAgIHJldHVybiBodHRwQWdlbnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gaHR0cHNBZ2VudDtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0XzEocmVzb3VyY2UsIGluaXQpIHtcbiAgICByZXR1cm4gKDAsIG5vZGVfZmV0Y2hfMS5kZWZhdWx0KShyZXNvdXJjZSwgT2JqZWN0LmFzc2lnbih7IGFnZW50OiBhZ2VudChuZXcgVVJMKHJlc291cmNlLnRvU3RyaW5nKCkpKSB9LCBpbml0KSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibm9kZV9mZXRjaF8xIiwicmVxdWlyZSIsImh0dHBfMSIsImh0dHBzXzEiLCJodHRwQWdlbnQiLCJkZWZhdWx0IiwiQWdlbnQiLCJrZWVwQWxpdmUiLCJodHRwc0FnZW50IiwiYWdlbnQiLCJfcGFyc2VkVVJMIiwicHJvdG9jb2wiLCJkZWZhdWx0XzEiLCJyZXNvdXJjZSIsImluaXQiLCJhc3NpZ24iLCJVUkwiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch_json.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch_json.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fetchJson = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.0.3/node_modules/@near-js/types/lib/index.js\");\nconst http_errors_1 = __importDefault(__webpack_require__(/*! http-errors */ \"(ssr)/./node_modules/.pnpm/http-errors@1.8.1/node_modules/http-errors/index.js\"));\nconst exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/exponential-backoff.js\");\nconst START_WAIT_TIME_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.5;\nconst RETRY_NUMBER = 10;\nconst logWarning = (...args)=>!process.env[\"NEAR_NO_LOGS\"] && console.warn(...args);\nfunction fetchJson(connectionInfoOrUrl, json) {\n    return __awaiter(this, void 0, void 0, function*() {\n        let connectionInfo = {\n            url: null\n        };\n        if (typeof connectionInfoOrUrl === \"string\") {\n            connectionInfo.url = connectionInfoOrUrl;\n        } else {\n            connectionInfo = connectionInfoOrUrl;\n        }\n        const response = yield (0, exponential_backoff_1.exponentialBackoff)(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, ()=>__awaiter(this, void 0, void 0, function*() {\n                try {\n                    if (!global.fetch) {\n                        global.fetch = (yield Promise.resolve().then(()=>__importStar(__webpack_require__(/*! ./fetch */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch.js\")))).default;\n                    }\n                    const response = yield global.fetch(connectionInfo.url, {\n                        method: json ? \"POST\" : \"GET\",\n                        body: json ? json : undefined,\n                        headers: Object.assign(Object.assign({}, connectionInfo.headers), {\n                            \"Content-Type\": \"application/json\"\n                        })\n                    });\n                    if (!response.ok) {\n                        if (response.status === 503) {\n                            logWarning(`Retrying HTTP request for ${connectionInfo.url} as it's not available now`);\n                            return null;\n                        }\n                        throw (0, http_errors_1.default)(response.status, (yield response.text()));\n                    }\n                    return response;\n                } catch (error) {\n                    if (error.toString().includes(\"FetchError\") || error.toString().includes(\"Failed to fetch\")) {\n                        logWarning(`Retrying HTTP request for ${connectionInfo.url} because of error: ${error}`);\n                        return null;\n                    }\n                    throw error;\n                }\n            }));\n        if (!response) {\n            throw new types_1.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${connectionInfo.url}.`, \"RetriesExceeded\");\n        }\n        return yield response.json();\n    });\n}\nexports.fetchJson = fetchJson;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch_json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fetchJson = exports.Provider = exports.JsonRpcProvider = exports.exponentialBackoff = void 0;\nvar exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/exponential-backoff.js\");\nObject.defineProperty(exports, \"exponentialBackoff\", ({\n    enumerable: true,\n    get: function() {\n        return exponential_backoff_1.exponentialBackoff;\n    }\n}));\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/json-rpc-provider.js\");\nObject.defineProperty(exports, \"JsonRpcProvider\", ({\n    enumerable: true,\n    get: function() {\n        return json_rpc_provider_1.JsonRpcProvider;\n    }\n}));\nvar provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/provider.js\");\nObject.defineProperty(exports, \"Provider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_1.Provider;\n    }\n}));\nvar fetch_json_1 = __webpack_require__(/*! ./fetch_json */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch_json.js\");\nObject.defineProperty(exports, \"fetchJson\", ({\n    enumerable: true,\n    get: function() {\n        return fetch_json_1.fetchJson;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMC40L25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsZ0JBQWdCLEdBQUdBLHVCQUF1QixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ25HLElBQUlNLHdCQUF3QkMsbUJBQU9BLENBQUMsNklBQXVCO0FBQzNEVCxzREFBcUQ7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsc0JBQXNCRCxrQkFBa0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNqSixJQUFJSyxzQkFBc0JILG1CQUFPQSxDQUFDLHlJQUFxQjtBQUN2RFQsbURBQWtEO0lBQUVVLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLG9CQUFvQk4sZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3pJLElBQUlPLGFBQWFKLG1CQUFPQSxDQUFDLHVIQUFZO0FBQ3JDVCw0Q0FBMkM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsV0FBV1IsUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xILElBQUlTLGVBQWVMLG1CQUFPQSxDQUFDLDJIQUFjO0FBQ3pDVCw2Q0FBNEM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csYUFBYVYsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbmVhci1qcytwcm92aWRlcnNAMC4wLjQvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3Byb3ZpZGVycy9saWIvaW5kZXguanM/NTk0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2hKc29uID0gZXhwb3J0cy5Qcm92aWRlciA9IGV4cG9ydHMuSnNvblJwY1Byb3ZpZGVyID0gZXhwb3J0cy5leHBvbmVudGlhbEJhY2tvZmYgPSB2b2lkIDA7XG52YXIgZXhwb25lbnRpYWxfYmFja29mZl8xID0gcmVxdWlyZShcIi4vZXhwb25lbnRpYWwtYmFja29mZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4cG9uZW50aWFsQmFja29mZlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhwb25lbnRpYWxfYmFja29mZl8xLmV4cG9uZW50aWFsQmFja29mZjsgfSB9KTtcbnZhciBqc29uX3JwY19wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vanNvbi1ycGMtcHJvdmlkZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKc29uUnBjUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzb25fcnBjX3Byb3ZpZGVyXzEuSnNvblJwY1Byb3ZpZGVyOyB9IH0pO1xudmFyIHByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl8xLlByb3ZpZGVyOyB9IH0pO1xudmFyIGZldGNoX2pzb25fMSA9IHJlcXVpcmUoXCIuL2ZldGNoX2pzb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmZXRjaEpzb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoX2pzb25fMS5mZXRjaEpzb247IH0gfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmZXRjaEpzb24iLCJQcm92aWRlciIsIkpzb25ScGNQcm92aWRlciIsImV4cG9uZW50aWFsQmFja29mZiIsImV4cG9uZW50aWFsX2JhY2tvZmZfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwianNvbl9ycGNfcHJvdmlkZXJfMSIsInByb3ZpZGVyXzEiLCJmZXRjaF9qc29uXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/json-rpc-provider.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/json-rpc-provider.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JsonRpcProvider = void 0;\n/**\n * @module\n * @description\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see {@link providers/provider | providers} for a list of request and response types\n */ const utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@0.0.3/node_modules/@near-js/utils/lib/index.js\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.0.3/node_modules/@near-js/types/lib/index.js\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/.pnpm/@near-js+transactions@0.1.0/node_modules/@near-js/transactions/lib/index.js\");\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/.pnpm/borsh@0.7.0/node_modules/borsh/lib/index.js\");\nconst exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/exponential-backoff.js\");\nconst provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/provider.js\");\nconst fetch_json_1 = __webpack_require__(/*! ./fetch_json */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/fetch_json.js\");\n/** @hidden */ // Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see [https://github.com/near/nearcore/tree/master/chain/jsonrpc](https://github.com/near/nearcore/tree/master/chain/jsonrpc)\n */ class JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param connectionInfo Connection info\n     */ constructor(connectionInfo){\n        super();\n        this.connection = connectionInfo || {\n            url: \"\"\n        };\n    }\n    /**\n     * Gets the RPC's status\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#general-validator-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     */ status() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"status\", []);\n        });\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param signedTransaction The signed transaction being sent\n     */ sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const bytes = (0, transactions_1.encodeTransaction)(signedTransaction);\n            return this.sendJsonRpc(\"broadcast_tx_commit\", [\n                Buffer.from(bytes).toString(\"base64\")\n            ]);\n        });\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */ sendTransactionAsync(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const bytes = (0, transactions_1.encodeTransaction)(signedTransaction);\n            return this.sendJsonRpc(\"broadcast_tx_async\", [\n                Buffer.from(bytes).toString(\"base64\")\n            ]);\n        });\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#transaction-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */ txStatus(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (typeof txHash === \"string\") {\n                return this.txStatusString(txHash, accountId);\n            } else {\n                return this.txStatusUint8Array(txHash, accountId);\n            }\n        });\n    }\n    txStatusUint8Array(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"tx\", [\n                (0, borsh_1.baseEncode)(txHash),\n                accountId\n            ]);\n        });\n    }\n    txStatusString(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"tx\", [\n                txHash,\n                accountId\n            ]);\n        });\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */ txStatusReceipts(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (typeof txHash === \"string\") {\n                return this.sendJsonRpc(\"EXPERIMENTAL_tx_status\", [\n                    txHash,\n                    accountId\n                ]);\n            } else {\n                return this.sendJsonRpc(\"EXPERIMENTAL_tx_status\", [\n                    (0, borsh_1.baseEncode)(txHash),\n                    accountId\n                ]);\n            }\n        });\n    }\n    /**\n     * Query the RPC by passing an {@link providers/provider!RpcQueryRequest}\n     * @see [https://docs.near.org/api/rpc/contracts](https://docs.near.org/api/rpc/contracts)\n     *\n     * @typeParam T the shape of the returned query response\n     */ query(...args) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let result;\n            if (args.length === 1) {\n                const _a = args[0], { block_id, blockId } = _a, otherParams = __rest(_a, [\n                    \"block_id\",\n                    \"blockId\"\n                ]);\n                result = yield this.sendJsonRpc(\"query\", Object.assign(Object.assign({}, otherParams), {\n                    block_id: block_id || blockId\n                }));\n            } else {\n                const [path, data] = args;\n                result = yield this.sendJsonRpc(\"query\", [\n                    path,\n                    data\n                ]);\n            }\n            if (result && result.error) {\n                throw new types_1.TypedError(`Querying failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, (0, utils_1.getErrorTypeFromErrorMessage)(result.error, result.error.name));\n            }\n            return result;\n        });\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param blockQuery {@link providers/provider!BlockReference} (passing a {@link providers/provider!BlockId} is deprecated)\n     */ block(blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"block\", {\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     */ blockChanges(blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes_in_block\", {\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */ chunk(chunkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"chunk\", [\n                chunkId\n            ]);\n        });\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see [https://docs.near.org/api/rpc/network#validation-status](https://docs.near.org/api/rpc/network#validation-status)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */ validators(blockId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"validators\", [\n                blockId\n            ]);\n        });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */ experimental_protocolConfig(blockReference) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const _a = blockReference, { blockId } = _a, otherParams = __rest(_a, [\n                \"blockId\"\n            ]);\n            return yield this.sendJsonRpc(\"EXPERIMENTAL_protocol_config\", Object.assign(Object.assign({}, otherParams), {\n                block_id: blockId\n            }));\n        });\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see [https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof](https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n     */ lightClientProof(request) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.sendJsonRpc(\"EXPERIMENTAL_light_client_proof\", request);\n        });\n    }\n    /**\n     * Returns the next light client block as far in the future as possible from the last known hash\n     * to still be able to validate from that hash. This will either return the last block of the\n     * next epoch, or the last final known block.\n     *\n     * @see [https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block](https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block)\n     */ nextLightClientBlock(request) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.sendJsonRpc(\"next_light_client_block\", request);\n        });\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */ accessKeyChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"all_access_key_changes\",\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */ singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"single_access_key_changes\",\n                keys: accessKeyArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */ accountChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"account_changes\",\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */ contractStateChanges(accountIdArray, blockQuery, keyPrefix = \"\") {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"data_changes\",\n                account_ids: accountIdArray,\n                key_prefix_base64: keyPrefix,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */ contractCodeChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"contract_code_changes\",\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see [https://docs.near.org/api/rpc/gas](https://docs.near.org/api/rpc/gas)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */ gasPrice(blockId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.sendJsonRpc(\"gas_price\", [\n                blockId\n            ]);\n        });\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */ sendJsonRpc(method, params) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const response = yield (0, exponential_backoff_1.exponentialBackoff)(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, ()=>__awaiter(this, void 0, void 0, function*() {\n                    try {\n                        const request = {\n                            method,\n                            params,\n                            id: _nextId++,\n                            jsonrpc: \"2.0\"\n                        };\n                        const response = yield (0, fetch_json_1.fetchJson)(this.connection, JSON.stringify(request));\n                        if (response.error) {\n                            if (typeof response.error.data === \"object\") {\n                                if (typeof response.error.data.error_message === \"string\" && typeof response.error.data.error_type === \"string\") {\n                                    // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                                    throw new types_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                                }\n                                throw (0, utils_1.parseRpcError)(response.error.data);\n                            } else {\n                                const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                                // NOTE: All this hackery is happening because structured errors not implemented\n                                // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                                if (response.error.data === \"Timeout\" || errorMessage.includes(\"Timeout error\") || errorMessage.includes(\"query has timed out\")) {\n                                    throw new types_1.TypedError(errorMessage, \"TimeoutError\");\n                                }\n                                throw new types_1.TypedError(errorMessage, (0, utils_1.getErrorTypeFromErrorMessage)(response.error.data, response.error.name));\n                            }\n                        }\n                        // Success when response.error is not exist\n                        return response;\n                    } catch (error) {\n                        if (error.type === \"TimeoutError\") {\n                            if (!process.env[\"NEAR_NO_LOGS\"]) {\n                                console.warn(`Retrying request to ${method} as it has timed out`, params);\n                            }\n                            return null;\n                        }\n                        throw error;\n                    }\n                }));\n            const { result } = response;\n            // From jsonrpc spec:\n            // result\n            //   This member is REQUIRED on success.\n            //   This member MUST NOT exist if there was an error invoking the method.\n            if (typeof result === \"undefined\") {\n                throw new types_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, \"RetriesExceeded\");\n            }\n            return result;\n        });\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/json-rpc-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/provider.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * NEAR RPC API request types and responses\n * @module\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Provider = void 0;\n/** @hidden */ class Provider {\n}\nexports.Provider = Provider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMC40L25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7OztDQUdDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3hCLFlBQVksR0FDWixNQUFNRTtBQUNOO0FBQ0FGLGdCQUFnQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDAuMC40L25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL3Byb3ZpZGVyLmpzPzdjZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIE5FQVIgUlBDIEFQSSByZXF1ZXN0IHR5cGVzIGFuZCByZXNwb25zZXNcbiAqIEBtb2R1bGVcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm92aWRlciA9IHZvaWQgMDtcbi8qKiBAaGlkZGVuICovXG5jbGFzcyBQcm92aWRlciB7XG59XG5leHBvcnRzLlByb3ZpZGVyID0gUHJvdmlkZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@0.0.4/node_modules/@near-js/providers/lib/provider.js\n");

/***/ })

};
;