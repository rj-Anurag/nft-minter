"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana+codecs-strings@2.0.0-rc.1_fastestsmallesttextencoderdecoder@1.0.22_typescript@5.8.3";
exports.ids = ["vendor-chunks/@solana+codecs-strings@2.0.0-rc.1_fastestsmallesttextencoderdecoder@1.0.22_typescript@5.8.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@solana+codecs-strings@2.0.0-rc.1_fastestsmallesttextencoderdecoder@1.0.22_typescript@5.8.3/node_modules/@solana/codecs-strings/dist/index.node.cjs":
/*!********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solana+codecs-strings@2.0.0-rc.1_fastestsmallesttextencoderdecoder@1.0.22_typescript@5.8.3/node_modules/@solana/codecs-strings/dist/index.node.cjs ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar errors = __webpack_require__(/*! @solana/errors */ \"(ssr)/./node_modules/.pnpm/@solana+errors@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/errors/dist/index.node.cjs\");\nvar codecsCore = __webpack_require__(/*! @solana/codecs-core */ \"(ssr)/./node_modules/.pnpm/@solana+codecs-core@2.0.0-rc.1_typescript@5.8.3/node_modules/@solana/codecs-core/dist/index.node.cjs\");\n// src/assertions.ts\nfunction assertValidBaseString(alphabet4, testValue, givenValue = testValue) {\n    if (!testValue.match(new RegExp(`^[${alphabet4}]*$`))) {\n        throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n            alphabet: alphabet4,\n            base: alphabet4.length,\n            value: givenValue\n        });\n    }\n}\nvar getBaseXEncoder = (alphabet4)=>{\n    return codecsCore.createEncoder({\n        getSizeFromValue: (value)=>{\n            const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);\n            if (!tailChars) return value.length;\n            const base10Number = getBigIntFromBaseX(tailChars, alphabet4);\n            return leadingZeroes.length + Math.ceil(base10Number.toString(16).length / 2);\n        },\n        write (value, bytes, offset) {\n            assertValidBaseString(alphabet4, value);\n            if (value === \"\") return offset;\n            const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);\n            if (!tailChars) {\n                bytes.set(new Uint8Array(leadingZeroes.length).fill(0), offset);\n                return offset + leadingZeroes.length;\n            }\n            let base10Number = getBigIntFromBaseX(tailChars, alphabet4);\n            const tailBytes = [];\n            while(base10Number > 0n){\n                tailBytes.unshift(Number(base10Number % 256n));\n                base10Number /= 256n;\n            }\n            const bytesToAdd = [\n                ...Array(leadingZeroes.length).fill(0),\n                ...tailBytes\n            ];\n            bytes.set(bytesToAdd, offset);\n            return offset + bytesToAdd.length;\n        }\n    });\n};\nvar getBaseXDecoder = (alphabet4)=>{\n    return codecsCore.createDecoder({\n        read (rawBytes, offset) {\n            const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);\n            if (bytes.length === 0) return [\n                \"\",\n                0\n            ];\n            let trailIndex = bytes.findIndex((n)=>n !== 0);\n            trailIndex = trailIndex === -1 ? bytes.length : trailIndex;\n            const leadingZeroes = alphabet4[0].repeat(trailIndex);\n            if (trailIndex === bytes.length) return [\n                leadingZeroes,\n                rawBytes.length\n            ];\n            const base10Number = bytes.slice(trailIndex).reduce((sum, byte)=>sum * 256n + BigInt(byte), 0n);\n            const tailChars = getBaseXFromBigInt(base10Number, alphabet4);\n            return [\n                leadingZeroes + tailChars,\n                rawBytes.length\n            ];\n        }\n    });\n};\nvar getBaseXCodec = (alphabet4)=>codecsCore.combineCodec(getBaseXEncoder(alphabet4), getBaseXDecoder(alphabet4));\nfunction partitionLeadingZeroes(value, zeroCharacter) {\n    const [leadingZeros, tailChars] = value.split(new RegExp(`((?!${zeroCharacter}).*)`));\n    return [\n        leadingZeros,\n        tailChars\n    ];\n}\nfunction getBigIntFromBaseX(value, alphabet4) {\n    const base = BigInt(alphabet4.length);\n    let sum = 0n;\n    for (const char of value){\n        sum *= base;\n        sum += BigInt(alphabet4.indexOf(char));\n    }\n    return sum;\n}\nfunction getBaseXFromBigInt(value, alphabet4) {\n    const base = BigInt(alphabet4.length);\n    const tailChars = [];\n    while(value > 0n){\n        tailChars.unshift(alphabet4[Number(value % base)]);\n        value /= base;\n    }\n    return tailChars.join(\"\");\n}\n// src/base10.ts\nvar alphabet = \"0123456789\";\nvar getBase10Encoder = ()=>getBaseXEncoder(alphabet);\nvar getBase10Decoder = ()=>getBaseXDecoder(alphabet);\nvar getBase10Codec = ()=>getBaseXCodec(alphabet);\nvar INVALID_STRING_ERROR_BASE_CONFIG = {\n    alphabet: \"0123456789abcdef\",\n    base: 16\n};\nfunction charCodeToBase16(char) {\n    if (char >= 48 /* ZERO */  && char <= 57 /* NINE */ ) return char - 48 /* ZERO */ ;\n    if (char >= 65 /* A_UP */  && char <= 70 /* F_UP */ ) return char - (65 /* A_UP */  - 10);\n    if (char >= 97 /* A_LO */  && char <= 102 /* F_LO */ ) return char - (97 /* A_LO */  - 10);\n}\nvar getBase16Encoder = ()=>codecsCore.createEncoder({\n        getSizeFromValue: (value)=>Math.ceil(value.length / 2),\n        write (value, bytes, offset) {\n            const len = value.length;\n            const al = len / 2;\n            if (len === 1) {\n                const c = value.charCodeAt(0);\n                const n = charCodeToBase16(c);\n                if (n === void 0) {\n                    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n                        ...INVALID_STRING_ERROR_BASE_CONFIG,\n                        value\n                    });\n                }\n                bytes.set([\n                    n\n                ], offset);\n                return 1 + offset;\n            }\n            const hexBytes = new Uint8Array(al);\n            for(let i = 0, j = 0; i < al; i++){\n                const c1 = value.charCodeAt(j++);\n                const c2 = value.charCodeAt(j++);\n                const n1 = charCodeToBase16(c1);\n                const n2 = charCodeToBase16(c2);\n                if (n1 === void 0 || n2 === void 0 && !Number.isNaN(c2)) {\n                    throw new errors.SolanaError(errors.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n                        ...INVALID_STRING_ERROR_BASE_CONFIG,\n                        value\n                    });\n                }\n                hexBytes[i] = !Number.isNaN(c2) ? n1 << 4 | (n2 ?? 0) : n1;\n            }\n            bytes.set(hexBytes, offset);\n            return hexBytes.length + offset;\n        }\n    });\nvar getBase16Decoder = ()=>codecsCore.createDecoder({\n        read (bytes, offset) {\n            const value = bytes.slice(offset).reduce((str, byte)=>str + byte.toString(16).padStart(2, \"0\"), \"\");\n            return [\n                value,\n                bytes.length\n            ];\n        }\n    });\nvar getBase16Codec = ()=>codecsCore.combineCodec(getBase16Encoder(), getBase16Decoder());\n// src/base58.ts\nvar alphabet2 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar getBase58Encoder = ()=>getBaseXEncoder(alphabet2);\nvar getBase58Decoder = ()=>getBaseXDecoder(alphabet2);\nvar getBase58Codec = ()=>getBaseXCodec(alphabet2);\nvar getBaseXResliceEncoder = (alphabet4, bits)=>codecsCore.createEncoder({\n        getSizeFromValue: (value)=>Math.floor(value.length * bits / 8),\n        write (value, bytes, offset) {\n            assertValidBaseString(alphabet4, value);\n            if (value === \"\") return offset;\n            const charIndices = [\n                ...value\n            ].map((c)=>alphabet4.indexOf(c));\n            const reslicedBytes = reslice(charIndices, bits, 8, false);\n            bytes.set(reslicedBytes, offset);\n            return reslicedBytes.length + offset;\n        }\n    });\nvar getBaseXResliceDecoder = (alphabet4, bits)=>codecsCore.createDecoder({\n        read (rawBytes, offset = 0) {\n            const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);\n            if (bytes.length === 0) return [\n                \"\",\n                rawBytes.length\n            ];\n            const charIndices = reslice([\n                ...bytes\n            ], 8, bits, true);\n            return [\n                charIndices.map((i)=>alphabet4[i]).join(\"\"),\n                rawBytes.length\n            ];\n        }\n    });\nvar getBaseXResliceCodec = (alphabet4, bits)=>codecsCore.combineCodec(getBaseXResliceEncoder(alphabet4, bits), getBaseXResliceDecoder(alphabet4, bits));\nfunction reslice(input, inputBits, outputBits, useRemainder) {\n    const output = [];\n    let accumulator = 0;\n    let bitsInAccumulator = 0;\n    const mask = (1 << outputBits) - 1;\n    for (const value of input){\n        accumulator = accumulator << inputBits | value;\n        bitsInAccumulator += inputBits;\n        while(bitsInAccumulator >= outputBits){\n            bitsInAccumulator -= outputBits;\n            output.push(accumulator >> bitsInAccumulator & mask);\n        }\n    }\n    if (useRemainder && bitsInAccumulator > 0) {\n        output.push(accumulator << outputBits - bitsInAccumulator & mask);\n    }\n    return output;\n}\n// src/base64.ts\nvar alphabet3 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar getBase64Encoder = ()=>{\n    {\n        return codecsCore.createEncoder({\n            getSizeFromValue: (value)=>Buffer.from(value, \"base64\").length,\n            write (value, bytes, offset) {\n                assertValidBaseString(alphabet3, value.replace(/=/g, \"\"));\n                const buffer = Buffer.from(value, \"base64\");\n                bytes.set(buffer, offset);\n                return buffer.length + offset;\n            }\n        });\n    }\n};\nvar getBase64Decoder = ()=>{\n    {\n        return codecsCore.createDecoder({\n            read: (bytes, offset = 0)=>[\n                    Buffer.from(bytes, offset).toString(\"base64\"),\n                    bytes.length\n                ]\n        });\n    }\n};\nvar getBase64Codec = ()=>codecsCore.combineCodec(getBase64Encoder(), getBase64Decoder());\n// src/null-characters.ts\nvar removeNullCharacters = (value)=>// eslint-disable-next-line no-control-regex\n    value.replace(/\\u0000/g, \"\");\nvar padNullCharacters = (value, chars)=>value.padEnd(chars, \"\\x00\");\n// ../text-encoding-impl/dist/index.node.mjs\nvar e = globalThis.TextDecoder;\nvar o = globalThis.TextEncoder;\n// src/utf8.ts\nvar getUtf8Encoder = ()=>{\n    let textEncoder;\n    return codecsCore.createEncoder({\n        getSizeFromValue: (value)=>(textEncoder ||= new o()).encode(value).length,\n        write: (value, bytes, offset)=>{\n            const bytesToAdd = (textEncoder ||= new o()).encode(value);\n            bytes.set(bytesToAdd, offset);\n            return offset + bytesToAdd.length;\n        }\n    });\n};\nvar getUtf8Decoder = ()=>{\n    let textDecoder;\n    return codecsCore.createDecoder({\n        read (bytes, offset) {\n            const value = (textDecoder ||= new e()).decode(bytes.slice(offset));\n            return [\n                removeNullCharacters(value),\n                bytes.length\n            ];\n        }\n    });\n};\nvar getUtf8Codec = ()=>codecsCore.combineCodec(getUtf8Encoder(), getUtf8Decoder());\nexports.assertValidBaseString = assertValidBaseString;\nexports.getBase10Codec = getBase10Codec;\nexports.getBase10Decoder = getBase10Decoder;\nexports.getBase10Encoder = getBase10Encoder;\nexports.getBase16Codec = getBase16Codec;\nexports.getBase16Decoder = getBase16Decoder;\nexports.getBase16Encoder = getBase16Encoder;\nexports.getBase58Codec = getBase58Codec;\nexports.getBase58Decoder = getBase58Decoder;\nexports.getBase58Encoder = getBase58Encoder;\nexports.getBase64Codec = getBase64Codec;\nexports.getBase64Decoder = getBase64Decoder;\nexports.getBase64Encoder = getBase64Encoder;\nexports.getBaseXCodec = getBaseXCodec;\nexports.getBaseXDecoder = getBaseXDecoder;\nexports.getBaseXEncoder = getBaseXEncoder;\nexports.getBaseXResliceCodec = getBaseXResliceCodec;\nexports.getBaseXResliceDecoder = getBaseXResliceDecoder;\nexports.getBaseXResliceEncoder = getBaseXResliceEncoder;\nexports.getUtf8Codec = getUtf8Codec;\nexports.getUtf8Decoder = getUtf8Decoder;\nexports.getUtf8Encoder = getUtf8Encoder;\nexports.padNullCharacters = padNullCharacters;\nexports.removeNullCharacters = removeNullCharacters; //# sourceMappingURL=index.node.cjs.map\n //# sourceMappingURL=index.node.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@solana+codecs-strings@2.0.0-rc.1_fastestsmallesttextencoderdecoder@1.0.22_typescript@5.8.3/node_modules/@solana/codecs-strings/dist/index.node.cjs\n");

/***/ })

};
;